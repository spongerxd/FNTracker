{
  "UObjectShortTooltips": {
    "FortGameplayCueNotify_Loop": "A GameplayCue that has a duration that is driven by the game.",
    "FortGameplayCueNotify_BurstLatent": "A one off GameplayCue that can use latent actions such as timelines",
    "FortGameplayCueNotify_Looping": "This class is deprecated. Use AFortGameplayCueNotify_Loop (GCN Loop) instead."
  },
  "UObjectToolTips": {
    "EMeshNetworkNodeType.Unknown": "! A normal game client. Typically, these aren't connected directly to other\n! Mesh Nodes. Instead the Game Server is connected to the mesh.",
    "EMeshNetworkNodeType.Client": "! An edge server node, typically a Game Server.\n! May be connected directly to the Root Node in \"shallow\" networks or to\n! Inner nodes (but not other Edge nodes).",
    "EMeshNetworkNodeType.Edge": "! An intermediate server node. This only connects to either the Root Node,\n! other Inner Nodes, or Edge Nodes.",
    "BaseReplayEventInfo:EventTime": "! Note we don't serialise this. It's part of the event data, so we fill it in after.",
    "EMeshNetworkNodeType.Inner": "! Top level Mesh Node that acts as the absolute source of truth / controller.\n! TODO: At some point we may have support of \"sub meshes\" where there's a top level\n!                      configuration like node, and then a bunch of sparse networks.\n!                      In that case, it's likely the controller of each individual network would\n!                      be the \"Root\" for its network.",
    "FortPawn:bUpdateMeshComponentUpdateFlagOnServer": "!!! Do not disable unless performance was evaluated !!! When true, on dedicated servers auotmatically update the MeshComponentUpdateFlag on the mesh. Used in cases where there is a single enemy that has complex interactions (like a boss)",
    "PlayArgs:paused": "!< A pointer to the emitter component that represents the 3d location of the emission source of this sound. If nullptr, the default 2D emitter will be used.",
    "PlayArgs:muted": "!< If set to true, the sound will be prepared for playback, but will be paused. You must call continue on the returned SoundHandle to begin playback.",
    "EAudioTransportState.PreBuffering": "!< Invalid",
    "EAudioTransportState.Stopped": "!< Paused",
    "EAudioTransportState.Playing": "!< PlayRequested",
    "EAudioTransportState.Paused": "!< Playing",
    "EAudioTransportState.PlayRequested": "!< PreBuffering",
    "EAudioTransportState.Stopping": "!< Stopped",
    "FortPlayerControllerAthena:MatchReport": "!Client Only",
    "FortAthenaMutator_GalileoEquipment:SlotToSwapToAfterGrant_DEPRECATE": "!DEPRECATED!: use AFortAthenaMutator_InventoryOverride::InventoryAutoEquipSlot instead.\n     -1 Disables. 0 is pickaxes, 1-5 are the weapon slots.",
    "EFortFrontendInventoryFilter.WorldItemsInGame": "\"Backpack\"",
    "SkyfirePlayerPawnComponent:TimeUntilTeleportToLootRoomReachedCapCounter": "\"Counter\" increased when the time until loot room teleport hits a cap due to MaxTimeBeforeLootRoomTeleport.\n(This counter may wrap around back to 0 as we don't need an actual count, just an optimal way of replicating that the event occurred.)",
    "EFortFrontendInventoryFilter.WorldItemsStorage": "\"Inventory\"",
    "EFortFrontendInventoryFilter.Heroes": "\"Resources\"",
    "HUDElementVisibilityModSourceStack": "\"Stack\" of HUD visibility modifiers (not a true stack since the \"top\" depends on who the pawn in question is)",
    "FortMeatballVehicle:CacheAudioEngineOutOfFuel": "\"out of fuel\" engine turnover sound",
    "AbilityKitItem:Quantity": "# of item to give out",
    "HeroItem:Quantity": "# of item to give out",
    "WeaponModStaticMeshData:SocketName": "#todo #weaponmods matt.stone can we async load this via asset bundles like weapons do for skelemeshes?",
    "WeaponModManagerMeshActor:ISMComponents": "#todo #weaponmods matt.stone make TObjectKey work with UHT? can't uprop TObjectKey",
    "BaseVariantDef:ShotGridId": "#todo-sm: remove this following mass re-save",
    "FortControllerComponent_CampsiteAccountItem:CurrentlyStashedItemEntries": "'Live' state used to track the item currently stashed. In format ready to be used for giving item to player inventory.",
    "FortPlayerSettingsComponentBase:NameplateFocusMode": "(0) Default = Hostile Only, (1) Always = All Players, (2) Never = No Players, (3) Minimap = ???, (4) Custom = ???",
    "FortPlayerPawnAthena:CallerID_update_mesh_rotation": "(0.0f, 0.0f, -90.0f);",
    "ClientAILODSettings:bAIPawnApplyEffectOptimizations": "(AIPawn only) If true (>= 1) will enable effect optimizations on this pawn (which needs to be implemented on the pawn BP itself).",
    "ClientAILODSettings:bAIPawnOnlyTickMeshWhenRendered": "(AIPawn only) If true (>= 1) will force the mesh's pose ticking to tick only when the mesh is being rendered.",
    "FortCreativeBudgetClassInstanceLimit:ActorClass": "(Base) Actor class for which the number of instances in a volume will be limited",
    "FortCreativeBudgetLinkedClassInstanceLimit:ActorClass": "(Base) Actor class for which the number of instances in a volume will be limited",
    "FortActorComponent_Affiliation:OnRelationsUpdateDelegate": "(CLIENT ONLY) Delegate broadcasted when there's any update to any relation that could concern this actor (direct or indirect)",
    "EFortServerContentRestartReason.GameFeaturePluginDisabled": "(Creative) PlaylistConditionalFlags changed via hotfix",
    "EFortServerContentRestartReason.CreativeFeaturedIslandsChanged": "(Creative) curated hub changed via hotfix or calendar event",
    "EFortServerContentRestartReason.CreativePreloadRevisionChanged": "(Creative) featured island list changed via hotfix or calendar event",
    "EFortServerContentRestartReason.CreativePlaylistConditionalFlagsChanged": "(Creative) preload revision number changed via hotfix",
    "TagDrivenVariantDef:ExcludedMetaTags": "(DEPRECATED) Any of these meta tags being present will prevent application of this variant",
    "TagDrivenVariantDef:RequiredMetaTags": "(DEPRECATED) Any of these meta tags must be present to apply this variant",
    "CosmeticMetaTagCondition:RequiredMetaTags": "(DEPRECATED) At least one of these meta tags must be present on the item",
    "CosmeticMetaTagCondition:ExcludedMetaTags": "(DEPRECATED) None of these meta tags can be present on the item",
    "LeaderboardEntry:bIsArena": "(Deprecated) True if it's an Arena tournament",
    "FortChallengeBundleQuestEntry:RewardGiftBox": "(Optional) Which giftbox should the user be awarded when this quest is granted",
    "FortClientObservedStatArray:MyStatManager": "(Server-only) The stat manager providing us information",
    "FortPlayspaceMembershipActorComponent:OnFortPlayspaceMembershipChanged": "(Server/Client) Called when the bound playspace has been set/changed.",
    "FortAthenaToggleGameplayEffectStateTreeTaskInstanceData:bAutomaticallyRemoveAddedEffectsOnExit": "(can be used only when adding on enter and removing on exit) Automatically remove the previously added GameplayEffects.",
    "SpawnerDataComponentAffiliationSharedBBConfiguration:MaximumDistance": "(check is disabled if < 0) This AI will have to be at most at this distance from AIs inside the same faction to share the bb.",
    "FortAnimNode_GrindRailSlopeWarping:bLeftCurveHighMeansFootDown": "(checked): Left curve 1 means foot down; (unchecked): Left curve means is foot up",
    "FortAnimNode_PredictiveSlopeWarping:bLeftCurveHighMeansFootDown": "(checked): Left curve 1 means foot down; (unchecked): Left curve means is foot up",
    "FortAnimNode_GrindRailSlopeWarping:bRightCurveHighMeansFootDown": "(checked): Right curve 1 means foot down; (unchecked): Right curve 1 means foot up",
    "FortAnimNode_PredictiveSlopeWarping:bRightCurveHighMeansFootDown": "(checked): Right curve 1 means foot down; (unchecked): Right curve 1 means foot up",
    "EDayNightCycleMode.Default": "(default) Make no changes to the day/night cycle time",
    "FortPlayerPawn:bCanUseDefaultPartsOnLateLoad": "(defaults: true) if false the pawn will not be able to use the default parts during long-loads.",
    "FortDagwoodVehicle:FakeTireMeshes": "(fake - no springs associated with this tire) tire meshes that were spawned and attached at runtime",
    "FortAthenaPointAroundPlayerProvider:bGenerateAroundPlayerBots": "(not used when forcing a specific Pawn) If set to true, the point provider will generate around both real players and bot players. If set to false, it will generate only around real players.",
    "FortCharacterVehicle_Ostrich:SimulatedProxyFixupRange": "(not used yet) if simulated proxy is outside this range of the server position, do the fixup",
    "FortCharacterVehicle_Ostrich:bEnableSimulatedProxyFixup": "(not used yet) true if the failsafe fix for invis mechs is turned on",
    "FortMaterialStyleApplyParams:TargetMaterialStyleComponent": "(optional) material style utility component owned by the affected actor",
    "EOldMusicalTimeSpanLengthType.kBeats": "(uint8)MTSLengthType::kTicks// UE4 4.24.1 change wants one enum value to be zero, but cannot unroll MTSLengthType::kTick un UHT properly",
    "EOldMusicalTimeSpanOffsetType.kTicks": "(uint8)MTSOffsetType::kMs// UE4 4.24.1 change wants one enum value to be zero, but cannot unroll MTSOffsetType::kMs un UHT properly",
    "CollisionReactionConfiguration:bAutomaticallyRegisterCapsule": "(unused and untested) If enabled will register the pawn's capsule for collision reaction on BeginPlay.",
    "CollisionReactionConfiguration:bAutomaticallyRegisterMesh": "(unused and untested) If enabled will register the pawn's mesh for collision reaction on BeginPlay.",
    "FortAthenaLivingWorldEncounterStage:MaxSpawnCountPerEventGeneration": "(used if > 0) Maximum number of AI that can get spawned per event generation.",
    "CollisionReactionConfiguration:bProjectBoxSweepRotationOnTheFloor": "(works only on characters moving on the ground with a movement component) Enable to have the sweep rotation automatically project itself on the floor (basically following the floor normal).",
    "FortVolume:FortVolumePersistenceOptions": "*       Contains Persistence Component registry and used to define Volume Persistence Options",
    "FortPlayerSaveComponent:PendingToApplyData": "*       Contains information about players that are pending to apply loaded data\n*       Can happen because of player being teleported\n*       Can happen because of dead player waiting for respawn",
    "FortCreativePersistenceComponent:OnPlayerDataLoaded": "*       Delegated called whenever ApplyNonRespawnableData is called.\n*       Indicates that Loading has finished",
    "FortPlayerSaveComponent:PersistenceManager": "*       Persistence manager, used to talk to the inventory service",
    "FortVolume:PlayerSaveComponent": "*       Reference to PlayerSaveComponent\n*       Only Created if AFortVolumeManager::IsCreativeMinigamePersistenceEnabled()",
    "InhibitorData": "*      Data created to manage different inhibitors according to their settings",
    "FortCreativeResourceNodeComponent": "*      Designed to attach to a device where that device provides the SMActors that will be turned into resource nodes.\n*      Resource nodes are objects that provide resource to a player when harvested. The nodes can be configured to give\n*      precise amounts on hit and the total stock available.",
    "ESettingType": "*      Setting types, used to map the setting the proper backend data",
    "FortCreativePersistenceComponent": "*      This class was created with the intention of connecting a device and the possibility to store and persist data.\n*      At the moment this was created, main functionality is to store, load and apply player's data in a Creative Environment",
    "UIStateSettings": "*     Configurable UI State settings to be loaded once on game start",
    "RuntimeOptionReviewPromptCriteria": "*     Defines options that relate to prompting the user to leave a review",
    "FortInteriorAudioComponent": "*   Intended to be added to the FortInteriorAudioManager actor via GameFeatureAction\n*\n*   When added, receives API calls and participates in update loop\n*\n*    PreUpdate: for modifying ScanResult data\n*   PostUpdate: for acting upon existing ScanResult data (only called until all components receive PreUpdate)",
    "FortInteriorAudioComponent_BuildingGrid": "*   Intended to be added to the FortInteriorAudioManager actor via GameFeatureAction\n*\n*   When added, receives API calls and participates in update loop\n*\n*   Intended to eventually be deprecated in favor of something that isn't reliant on the Fortnite BuildingGrid\n*\n*      See UFortInteriorAudioComponent_Ambient for an example of how this scan data is used",
    "FortInteriorAudioComponent_Ambient": "*   Spawned and owned by FortInteriorAudioSubsystem, meant to handle BP logic for faster\n*   iteration by designers based on the data that the subsystem gathers every evaluation",
    "FortInteriorAudioComponent_SphereTrace": "*   Spawned and owned by FortInteriorAudioSubsystem, meant to handle BP logic for faster\n*   iteration by designers based on the data that the subsystem gathers every evaluation",
    "FortInteriorAudioManager": "*   Spawned and owned by FortInteriorAudioSubsystem, meant to handle BP logic for faster\n*   iteration by designers based on the data that the subsystem gathers every evaluation",
    "EStateTransitionControlEvent.OnStateTransitionPaused": "*  When a need for a pause has been confirmed - this event allows you to add your own requests to a transition pause which you didn't cause.\n*      For example, if you want to spawn a particle if (and ONLY if) another system is going to prevent the immediate change to a different state.",
    "DeltaVelocityDamageHandlerData": "* @struct FDefaultHandlerData\n*       Apply damage to objects based on their change in momentum as reported from a physics collision.\n*    Does not work for interactions with static objects",
    "MassDeltaVelocityDamageHandlerData": "* @struct FDefaultHandlerData\n*       Apply damage to objects based on their change in momentum as reported from a physics collision.\n*    Does not work for interactions with static objects",
    "CollisionResponseBaseData": "* @struct FFCollisionResponseBaseData\n*  Base class modifier Data to be used in an override for collisions between object pairs.\n*  Provides access to gameplay tags for ease of determining objects",
    "VelocityDamageHandlerData": "* @struct FVelocityDamageHandlerData\n*       Modifier Data to be used in an override for collisions between object pairs",
    "FMDeviceCableWildcardOrderingComponent": "* A component for ordering wildcard output ports on the cable splitter",
    "DynamicXpCreatorAccoladeTuning:Weight": "* A numerical value for each level of importance.\n* Weight % = Weight / Sum (Weight of Enabled Accolades)",
    "FortWaterBodyActor:WaterOverrideMaxCharacterForce": "* Allow water to override the max force applied on characters, useful to achieve strong currents since it is usually a bit low and slowly affects players. Ignored if zero.",
    "FortGameplayTagActor": "* An actor that implements the IGameplayTagAssetInterface.\n* Useful to create light actors that need gameplay tag interface functionality\n* without the overhead of an entire class like ABuildingGameplayActor.",
    "FortPlayerSurveyCMSFrequentlyAskedQuestion:Question": "* As a CMSFrequentlyAskedQuestion \"is a\" CMSQuestion, it might make sense to inherit the former from the latter.\n* However, as these CMS structures directly mirror JSON data, we want to make it explicitly clear that an FAQ is\n* truly an ID and a Question, instead of it just \"coincidentally\" having all the same fields as a CMSQuestion.",
    "FortSkyTubePhysicsComponent:bInSkyTube": "* Auto-marshaled variables used by async force calculations ***",
    "FortTaggedBoxComponent": "* Box Shape Component that can be tagged with Gameplay Tags",
    "VkVersePath:Url": "* Canonical transformation of the verse path to URL\n* This URL should serve an HTML page intended for displaying information on the verse path target",
    "UnicornAthenaPawnSampler": "* Class that periodically samples the owner athena pawn for information about it state\n* Attached to an athena pawn, it will periodically poll the owner for transform and gameplay information\n* It also keeps track of dance parties that occur.",
    "UnicornWebAPIComponent": "* Component responsible for communicating with the Project Pegasus backend\n* The web component transforms data in to its web request payload data for upload\n* Owned by a UnicornDriver, it gets created with the Driver and gets told what to do",
    "FortMotorSimComponent_PatternPlayer": "* Component that overrides Throttle and RPM with hand-authored curves, which can fire and forget on a throttle input threshold or continuously loop",
    "FortControllerComponent_AthenaQuestsPinner": "* Component which responsible for showing pinned quests in the world and on the minimap.",
    "FortMinigame:PlayerPersistentStartPoints": "* Contains all persistent start points that have been laoded for all players",
    "RadialWindField:ForceStrengthDistanceFalloff": "* Curve table affecting ForceStrength multiplier over distance\n* X-Axis: Distance from center of field (0=directly on center, 1=at or past max radius of field)\n* Y-Axis: Falloff applied to force (0=max falloff/no force, 1=no falloff)",
    "RadialWindField:PawnForceStrengthDistanceFalloff": "* Curve table affecting PawnForceStrength multiplier over distance\n* X-Axis: Distance from center of field (0=directly on center, 1=at or past max radius of field)\n* Y-Axis: Falloff applied to force (0=max falloff/no force, 1=no falloff)",
    "SqueegeeTextData": "* Data for text injections",
    "SqueegeeInjectionData": "* Data for widget injections",
    "NyxGlassWeaponComponent_Swinging:MaxSecondAttachPointDotProd": "* Defines the maximum allowed dot prod value between first chosen attach point and a second potential attach point.\n* Used to invalidate attach points that are too similar to the first chosen attach point.",
    "FMDeviceCableModulatorPortComponent": "* Device Cable Modulator ports are used by InWorldKnobActorBase to allow float providers to alter that knob's current value.\n* Since they're on a child actor they don't get saved normally, so they have a save data path used by InWorldKnobOptionsComponent.",
    "FMDeviceCablePortComponent": "* Device Cable Port component is a static mesh component that can visually connect to another instance of itself.\n* You can then communicate with the actor on the other end of this device through the Cable Connector Component.",
    "EFMDeviceCablePortComponentAllowMultipleConnections": "* Enumeration to define a mechanism for overriding the ability to have multiple connections to one port.\n* Provided as TOptional is not a reflectable type",
    "ScreenWidgetLayoutInfo": "* FScreenWidgetLayoutInfo helps the Screen Component cache off information on\n* widgets added to the screen for easier access later.",
    "EFMDeviceCableAnimationQuality": "* Fidelity of cable animation to apply",
    "FortObjectiveFilter_PawnEliminated": "* Fired when a pawn is eliminated. The author will be the controller that is responsible for it's death.\n* In the case of a converted pawn eliminating the target, it is fired for the controller that converted the pawn",
    "FortActorComponent_MultiInteract": "* FortActorComponent_MultiInteract handles when multiple players are interacting same target resulting in a faster speed\n* Should be attached to interaction target actors in blueprints, like safes, player pawn, reboot van, etc.\n* It is added into previous interaction process in UFortControllerComponent_Interaction\n* Interaction duration is boosted according to interacting player's number",
    "FabricMeshProviderMeshReferenceParams": "* If a texture is not baked (e.g. rendered to rendertarget), these parameters must be applied to another material downstream.",
    "CustomizableObjectIntValue:NamedValue": "* If both the Numeric and Named values are set, the Named value will be checked first.\n* The named value will only be valid if it exactly matches a named option for the given parameter.",
    "CustomizableObjectIntValue:NumericValue": "* If both the Numeric and Named values are set, the Named value will be checked first.\n* The numeric value should always be valid unless it exceeds the number of options the given parameter has\n*\n* Set to -1 in order to disable this fallback mechanism, or a high number to default to the last option",
    "FortSurfaceTrackingComponent:MultiSurfaceActorTag": "* If valid, we'll look for this ActorTag on the current Actor that we're standing on (if any)\n* and if this ActorTag is found, we'll force line traces to be used to support multi-surface actors",
    "RockVehicle_FuncTest_PhysicsReplay": "* Iterates all the physics tests located in \\PhysicsLogs to ensure current physics doesn't deviate from past results.",
    "RockVehicleManager": "* Manager actor that registers the FRockVehicleManagerAsyncCallback with the physics sim Async manager.\n* Also manages sending data back over to the individual RockVehicles on the GameThread.",
    "FabricMetaSoundManagerComponent": "* Manager class for adding and removing metasounds from a playspace-wide graph",
    "PlayspaceComponent_ActorMemoryTracker:MemoryThreshold": "* Memory Value we should aim at not exceeding within this playspace.",
    "FortMotorSimComponent_SurfaceModifier": "* Motor sim component that adds RPM and overrides throttle input based on an animated looping curve. The curve can be changed using SetSurface.\n* Has no affect if a surface is not specified.",
    "FortAthenaMutator_StreamDistanceOverride": "* Mutator that overrides stream distance Console Variables by applying a multiplier. The multiplier can be < 1 to decrease level streaming times,\n* or > 1 to expand the distance in which higher LOD assets are shown. Increasing this value comes with performance loss.\n* bApplyScalability can be used to automatically scale the base multiplier based on platform and view distance quality.\n* This mutator can be utilized by either calling ClientSetOverrideSettingsActive, or by setting bApplyOnBeginPlay to true",
    "FortWeaponModDataRow": "* NOTE: If adding new attribute properties, please update static const\n* FWeapAttrTagData FortWeapAttributes[NumWeapAttributeTags]\n* in UFortWeaponModItemDefinition::OnEquipModToWeapon.",
    "FortAnimInput_DBNOCarried": "* Nativized DBNO carried logic (for being carried while in DBNO).",
    "FortMinigame:PersistenceRequiredDevices": "* Number of devices requiring persistence.",
    "FortAnimInput_RandomizeMontageSection": "* Per-actor data for the RandomizeNextSection notify.",
    "FabricMeshProviderMeshReferenceParamInfo_Color": "* Provides a color implementation for a material reference param, blueprint read/write",
    "FabricMeshProviderMeshReferenceParamInfo_Scalar": "* Provides a scalar implementation for a material reference param, blueprint read/write",
    "FabricMeshProviderMeshReferenceParamInfo": "* Provides the identifying information for a material reference, Niagara parameter structure pattern.",
    "SoftQuestDefinitionFilterType": "* Quest Definition Query Type",
    "VictoryCrownPlaylistData": "* Simple struct for the table row used for victory crown playlist specific data",
    "FabricTextureProviderTexture": "* Source texture structure for texture provider",
    "FabricMeshInstanceReference": "* Struct for providing mesh instance info to blueprint",
    "FabricMeshProviderMeshReference": "* Structure that represents a Fabric Mesh in the world",
    "FMDeviceCable": "* The class that connects two device cable ports together.\n* A spline component is automatically filled with a path from one port to another and that can be used to render the connection.",
    "PegasusGameEventCollector": "* The event collector listens out to game state for a given Owner player, and logs out differences between updates as `TimelineEvents`.\n* For use in the Pegasus render system. The data is typically associated with a highlight clip we have been asked to render out. These timeline events will be visible\n* to end users on the web platform\n\n* Should not run under normal replay scenarios - should only run when asked to by the PegasusDriver's render job.",
    "FMDeviceCableManagerComponent": "* The manager for device cables for interactions between them.",
    "EInGameLinkType": "* There are more LinkTypes than in this enum because not all link types can be set on the game server\n* UNDEFINED is either a missing case OR that there is no game server (i.e. FN-Frontend)",
    "ItemFileRecord": "* These structs are used for default inventory and inventory auto-migration serialization",
    "FMDeviceCableControllerComponent": "* This class lives on the player controller as a way to interact with device cables.\n* It also handles any direct client<->server replication so that the cable system can use client-predictive behavior.",
    "FabricInteractableControllerComponent": "* This class lives on the player controller as a way to interact with in-world knobs.",
    "FabricInteractablePlayspaceComponent": "* This class lives on the player controller as a way to interact with in-world knobs.",
    "FortCreativeKeyLockComponent": "* This component allows to implement a lock mechanism, based on a FortItemDefinition as a key, on any actor",
    "FortVerbMessage_PlayerDowned": "* This is called when a player is put into a DBNO state.",
    "FortTooltipValueData": "* This is used to return a value, and some associated information for display in the UI, with a single tooltip query",
    "FortPlayerPawn:SkipStartCosmeticsPassForActor": "* This is used to track when we are in a cosmetic pass so that we can skip CosmeticsPassForActor.  It will be\n* non-zero when in one of these states.  This is so we don't start creating a cosmetic flow in the\n* old-cosmetic-flow path or in FinishedCustomization.",
    "FortVerbMessage_QuestUpdated": "* This verb is fired for any participant added to a quest (Active), and for every participant when a quest is completed (Completed).",
    "FortVerbMessage_Repair": "* This verb is for any time a repair tool is used.\n* Fired in FortHealthSet.cpp When a healing event is from a repair source (Has Tag Gameplay.Effect.RepairTool.Use)\n* Note: This does not fire if a repaired actor was already at full health.",
    "FortObjectiveFilter_PlacementUpdate:PlayersAlive": "* This will be the number of players still alive on the server when the event fires\n* For the player that died this will be number of players alive +1.",
    "ConcertRollbackComponent": "* Used in VKEdit and VKPlay to ignore saving actors into a LSR\n* This component will tell the FortLevelStreamComponent to unload then reload the level and when saved transactions should be applied.\n* It is expected the savedTransactions are stored and implemented by the ValkyrieBeaconHost.\n*\n* VK playlists will unload the level and then respawn all modifications done during live edit",
    "OnlineDiscoverySurfaceDevelopmentLinkCodes": "* Utility configuration object that contains a surface's name and its development link codes. Note: v2 API addition.",
    "PlayspaceComponent_ActorMemoryTracker:ScaledMemoryRange": "* Value to represent the scaled memory range that raw memory values will be scaled to.",
    "CustomizableObjectValueBase:RangeIndex": "* Values other than negative one imply this param is multidimensional.\n* Ensure that you have this correct, or we will crash!\n*\n* -1 as the value is only valid if the param is not multidimensional.\n* Any other value is only valid if the param IS multidimensional.",
    "FortControllerComponent_AthenaQuestsPinner:RevisitInWorldPinsRate": "* We don't want to touch pins every tick",
    "FortSurfaceTrackingComponent:bUseMovementCompCurrentFloor": "* Whether to read the pawn's movement component's current floor to get the current surface type.  This requires that \"Return Material on Move\" is enabled on the updated component (usually the root capsule component for pawns).\n* If false, we will fire a ray downwards from the pawn's position, probing for the surface beneath it.",
    "FMDeviceCableWildcardPortComponent": "* Wildcard port components are used by devices that are generic to type.\n* When one port is changed via a connection, all ports on a device are changed to match that port's type.",
    "FortVerb_ObjectWrapper": "* Wrapper struct for wrapping UObject weak pointers.\n* This is used to put this struct in an array to have blueprint arrays of weak object pointers",
    "FortPlayerSurveyAnalyticsTextReplacementEvaluation:TextReplacementValueID": "* these pairs of \"ID/Localized\" values closely resemble struct FFortPlayerSurveyLocalizableText, but that is not used here,\n* partially because said struct is in FortniteUI DLL instead of FortniteGame DLL, also because analytics data should be as\n* flat as possible for ease of queries",
    "HurdleInputConfig:Phase1_SweepGroundBufferHeight": "** The distance of the first sweep from the floor, small values to avoid small bumps on the ground",
    "HurdleInputConfigCache:Phase1_SweepGroundBufferHeight": "** The distance of the first sweep from the floor, small values to avoid small bumps on the ground",
    "HurdleInputConfig:Phase1_SweepGroundMaxHeight": "** The height of the initial sweep to search for hurdle obstacle",
    "HurdleInputConfigCache:Phase1_SweepGroundMaxHeight": "** The height of the initial sweep to search for hurdle obstacle",
    "ImGuiSettings:CanvasSize": "******* END MT CHANGE to add controller toggle setting ******/\nChose how to define the ImGui canvas size. Select between custom, desktop and viewport.",
    "ImGuiSettings:ImGuiInputHandlerClass": "******* MT CHANGE change to FSoftClassPath ******/\nPath to own implementation of ImGui Input Handler allowing to customize handling of keyboard and gamepad input.\nIf not set then default handler is used.",
    "ImGuiSettings:ToggleInputController": "******* MT CHANGE to add controller toggle setting ******/",
    "CreativeDataChannelTargetFN:ArenaPointLeaderBoard": "******************* START ArenaPointLeaderBoard *********************// String Format: \"PlayerName1:Region:points;PlayerName2:Region:points;PlayerNameN:Region:points\"",
    "CreativeDataChannelTargetRL:BallCoords": "******************* START BallCoords *********************// String Format: \"x,y,z\" // TODO: What other data do we need? Physics data to support this?",
    "CreativeDataChannelTargetFN:CashCupDataAllTimeEarners": "******************* START CashCupDataAllTimeEarners *********************// String Format: \"PlayerName1:CashEarned;PlayerName2:CashEarned;PlayerNameN:CashEarned\"",
    "CreativeDataChannelTargetRL:FinaleState": "******************* START FinaleState *********************// 1 for start, 0 for end, -1 for no state",
    "CreativeDataChannelTargetFN:LeaderBoard": "******************* START LeaderBoard *********************// String Format: \"?\"",
    "CreativeDataChannelTargetRL:MatchState": "******************* START MatchState *********************// 1 for start, 0 for end, -1 for no state",
    "CreativeDataChannelTargetRL:MediaStart": "******************* START MediaStart *********************// String Format: \"VUID;startTime\"",
    "CreativeDataChannelTargetRL:MediaStop": "******************* START MediaStop *********************// 1 for stop",
    "CreativeDataChannelTargetFN:MythicBossEliminatedPlayer": "******************* START MythicBossEliminatedPlayer *********************// String Format: \"PlayerName\"",
    "CreativeDataChannelTargetFN:MythicWeaponPlayer": "******************* START MythicWeaponPlayer *********************// String Format: \"PlayerName\"",
    "CreativeDataChannelTargetRL:Overtime": "******************* START Overtime *********************// 1 for overtimes, 0 for not.",
    "CreativeDataChannelTargetRL:PlayerBoost": "******************* START PlayerBoost *********************// String Format: \"TeamIndex:PlayerIndex:BoostAmount(int);\" can be several players or one player",
    "CreativeDataChannelTargetRL:PlayerBoostCollected": "******************* START PlayerBoostCollected *********************// String Format: \"TeamIndex;PlayerIndex;BoostType\"\n// No ExtraData for this property.",
    "CreativeDataChannelTargetRL:PlayerCoords": "******************* START PlayerCoords *********************// String Format: \"PlayerIndex0:x,y,z;PlayerIndex1:x,y,z;PlayerIndex2:x,y,z;\" // TODO: What other data do we need? Physics data to support this?",
    "CreativeDataChannelTargetFN:PlayerInfo": "******************* START PlayerInfo *********************// String Format: \"PlayerName1;PlayerName2;PlayerNameN\" TODO: get from DS",
    "CreativeDataChannelTargetFN:PlayerLocation": "******************* START PlayerLocation *********************// String Format: \"PlayerName1:x,y,z;PlayerName2:x,y,z;PlayerNameN:x,y,z\"",
    "CreativeDataChannelTargetRL:PlayerNames": "******************* START PlayerNames *********************// String Format: \"TeamIndex:Player1,Player2,PlayerN;TeamIndex:Player1,Player2,PlayerN;\"",
    "CreativeDataChannelTargetRL:ScoreTeam": "******************* START ScoreTeam *********************// Team index (order: blue, orange)",
    "CreativeDataChannelTargetRL:ScoreTotal": "******************* START ScoreTotal *********************// String Format: \"Team0:score;Team1:score\"",
    "CreativeDataChannelTargetRL:ScoreboardBestOf": "******************* START ScoreboardBestOf *********************// String Format \"x,y\" (x of 3, x of 5, x of 7)",
    "CreativeDataChannelTargetRL:ScoreboardTimeLeft": "******************* START ScoreboardTimeLeft *********************// Milliseconds of match time left",
    "CreativeDataChannelTargetRL:SeriesState": "******************* START SeriesState *********************// 1 for start, 0 for end, -1 for no state",
    "CreativeDataChannelTargetFN:StormCircleLocation": "******************* START StormCircleLocation *********************",
    "CreativeDataChannelTargetFN:StormCircleSize": "******************* START StormCircleSize *********************// Radius?",
    "CreativeDataChannelTargetRL:TeamNames": "******************* START TeamNames *********************// String Format: \"TeamOne;TeamTwo\"\n// No ExtraData for this property.",
    "UserOptionDefinitionMetaData": ", Abstract",
    "PlayspaceComponent": ", Within = Playspace",
    "ColorCurve": "- FColorCurve -\n\nAn editable color curve. Basically copied from FRichCurve in RichCurve.h\n(and its parent class FIndexedCurve), but with a set of FColorKeys\ninstead of FRichCurveKeys, and the Eval method is different.",
    "ColorGradient": "- FColorGradient -\n\nA color gradient. Sort of modeled on FRuntimeCurveLinearColor from\nCurveLinearColor.h, but has a different way of storing colors and\ninterpolating between them. Uses an FColorCurve instead of three\nseparate float curves for the RGB channels.",
    "ColorKey": "- FColorKey -\n\nA key in the color curve. Basically copied from FRichCurveKey in\nRichCurve.h, but with an FColor value instead of a float",
    "GrayscaleGradient": "- FGrayscaleGradient -\n\nA grayscale gradient. Uses an FRichCurve to store a 0-1 float value for\na single color channel.",
    "FInterpolationType": "- FInterpolationType -\n\nType of interpolation to use when evaluating the color curve",
    "ETextureFilterMode": "- Filter Mode -",
    "ELevelSaveRecordVersion.VersionPlusOne": "- Please see @Eric.Knapik and @Cory.Kolek (Creative Engineering Lead) for modifying this file.\n- Not all live servers are at the latest version and .island files are interchangeable and will need updated.\n-----<new versions can be added before this line>-------------------------------------------------\n- this needs to be the last line (see note below)",
    "FortWeakPointTypeData:WeakPointActors": "- Runtime Data -",
    "MidiMusicInfo:OverrideLength": "-- EDIT CONDITION TOGGLES --",
    "MoggMusicInfo:OverrideTempo": "-- EDIT CONDITION TOGGLES --",
    "FortGrantedQuestData:QuestPlaylists": "---- Shared quest data only ------",
    "CreativeUserContentManager:SaveThumbnails": "--------------------------------------------------------------|\nClient-Only Properties\n--------------------------------------------------------------|",
    "FabricInteractionTool:HoveredInteractable": "--------------------------------------------------------------|\nInteraction State\n--------------------------------------------------------------|",
    "CreativeUserContentManager:LevelSaveRecords": "--------------------------------------------------------------|\nServer-Only Properties\n--------------------------------------------------------------|",
    "FortWaterBodyCubeVolumeComponent:VolumeExtent": "------------------------------[Protected Editable Variables]------------------------------/",
    "FortWaterBodyCubeVolume:FortWaterBodyCubeVolumeComponent": "------------------------------[Protected Variables]------------------------------/",
    "FortWaterBodyCubeVolumeComponent:bIsWaterVisibiltyEnabled": "------------------------------[Protected Variables]------------------------------/",
    "EAIPatrolPathVersion.VersionPlusOne": "-----<new versions can be added before this line>-------------------------------------------------\n- this needs to be the last line (see note below)",
    "BuildingItemCollectorActor:NumInteractionsAllowed": "-1 (default) means allows infinite interactions.",
    "EFortItemEntryState.WeaponAmmoOverride": "-1 = weapon will be granted with default amount of ammunition (see UFortWeaponItemDefinition::OnItemInstanceAdded), 0 or positive value = Weapon will be granted with the specified amount of ammunition",
    "FortExperienceDelta:IsFinalXpUpdate": "-1 is uninitialized, 0 is false, 1 is true",
    "FortNevadaVehicle:AnimParamDriverSeatForwardBack": "-1 to 1 param used by animation to counter rotate the driver seat with the movement of the vehicle",
    "FortNevadaVehicle:AnimParamDriverSeatLeftRight": "-1 to 1 param used by animation to counter rotate the driver seat with the movement of the vehicle",
    "FortPlayerPawn:ZiplineSpeedFactorTarget": "-1.0 = moving max speed downhill.      1.0 = max speed straight up.",
    "FortAthenaMutator_SpawnImmunityTime:SpawnImmunityTime": "-1.0f for this value means we want to ignore the mutators override value",
    "EMidiMsgType": "...enum ESynchronizationType",
    "MidiMusicInfo": "...struct FMidiMusicTrackDesc",
    "MoggMusicTrack": "...struct FMoggChannel",
    "PresetVols": "...struct FMoggMusicInfo",
    "MoggMusicInfo": "...struct FMoggMusicTrack",
    "FortAthenaMutator_Chameleon": "/\n AFortAthenaMutator_Chameleon\n/",
    "FortAthenaMutator_SkyCap": "/\n AFortAthenaMutator_SkyCap\n/",
    "RelevantPawnArray": "/\n AFortAthenaMutator_SpecialRelevancy\n/",
    "FortAthenaMutator_StormVehicleHelper": "/\n AFortAthenaMutator_StormVehicleHelper\n/",
    "FortAthenaMutator_Tag": "/\n AFortAthenaMutator_Tag\n/",
    "FortGameplayMutator_DestroyMapActors": "/\n AFortGameplayMutator_DestroyMapActors\n/",
    "FortGameplayMutator_SetCVars": "/\n AFortGameplayMutator_SetCVars\n/",
    "FortPlayerSettingsComponentBase:AbilitySetOptionData": "/\n Abilities",
    "FortQuestMapMarkerComponent": "/\n Add this component and set the tag for the world coordinates of actor to be available for quest map marker",
    "FortniteUserInterfaceSettings:WidthScaleCurve_Android_InGame": "/\n Android\n/",
    "FortPlayerAnimationComponent:AnimInputDefaults": "/\n Anim inputs",
    "FortExperienceSettingsComponent:BuildingMode": "/\n Building",
    "FortPlayerSettingsComponentBase:BuildingMode": "/\n Building",
    "FortExperienceSettingsComponent:AimAssistAllowed": "/\n Controls",
    "FortPlayerSettingsComponentBase:bAimAssistAllowed": "/\n Controls",
    "FortPlayerSettingsComponentBase:CharacterOverride": "/\n Cosmetics",
    "FortPlayerSettingsComponentBase:bEnableVehiclesDamageObjects": "/\n Edit Mode",
    "ClientRelevancyGroupEntry": "/\n FClientRelevancyGroupEntry / FClientRelevancyGroupArray\n/",
    "FortDeveloperSettings": "/\n FFortDeveloperSettingsUtils",
    "TagTeamInfoEntry": "/\n FTagTeamInfoEntry/FTagTeamInfoArray\n/",
    "FortExperienceSettingsComponent:PlayerLives": "/\n Game Rules",
    "FortPlayerSettingsComponentBase:PlayerLives": "/\n Game Rules",
    "FortPlayerSettingsComponentBase:bAllowFriendlyFire": "/\n Game Rules",
    "FortFlowAnalyticsImpressionSection_Internal": "/\n Internal use only !!!\n See FortFlowAnalytics.h for API usage\n/",
    "FortExperienceSettingsComponent:DropAllItemsOverride": "/\n Inventory",
    "FortPlayerSettingsComponentBase:DropAllItemsOverride": "/\n Inventory",
    "FortPlayerSettingsComponentBase:bInstantReload": "/\n Inventory",
    "FortExperienceSettingsComponent:FallDamage": "/\n Movement",
    "FortPlayerSettingsComponentBase:bApplyJumpPenalty": "/\n Player Movement",
    "FortPlayerSettingsComponentBase:bFallDamage": "/\n Player Movement",
    "FortPlayerSettingsComponentBase:DamageToDeal": "/\n Player Self Damage",
    "FortExperienceSettingsComponent:HarvestRateMutliplier": "/\n Resources",
    "FortPlayerSettingsComponentBase:HarvestRateMutliplier": "/\n Resources",
    "FortPlayerSettingsComponentBase:MaximumResources": "/\n Resources",
    "FortExperienceSettingsComponent:DamageToDeal": "/\n Self Damage",
    "FortExperienceSettingsComponent:HealthSiphonValue": "/\n Siphon",
    "FortPlayerSettingsComponentBase:HealthSiphonValue": "/\n Siphon",
    "FortExperienceSettingsComponent:RespawnHeight": "/\n Spawning",
    "FortPlayerSettingsComponentBase:RespawnHeight": "/\n Spawning",
    "FortPlayerSettingsComponentBase:bIsPlayerTriggeredRespawnAllowed": "/\n Spawning",
    "FortQuestMapMarkerSettings": "/\n UFortQuestMapMarkerSettings",
    "FortExperienceSettingsComponent:NameplateDisplayMode": "/\n UI",
    "FortPlayerSettingsComponentBase:NameplateDisplayMode": "/\n UI",
    "FortExperienceSettingsComponent:Invincibility": "/\n Vitals",
    "FortExperienceSettingsComponent:VoiceChat": "/\n Voice Chat",
    "FortniteUserInterfaceSettings:WidthScaleCurve_iOS_InGame": "/\n iOS\n/",
    "FortItemEntryStateValue": "/\n/ FFortItemEntryStateValue\n/",
    "FortItemEntryStateValueConstObject": "/\n/ FFortItemEntryStateValue\n/",
    "FortAIPawn:OverriddenScore": "/ -1 indicates the score is not overridden",
    "EBotPOIUsageBitmask": "/ BotPOI Usage",
    "FortMapIconDefinition:bUseWorldSpaceForOffset": "/ If true, will change location offset to use world space instead of local space. Does not Apply to component",
    "FortMapIconDefinition:bIgnoreActorRotation": "/ If true, will ignore an actors rotation when placing the icon",
    "LacklusterData:OffroadTireTag": "/ Tag for chonker tires",
    "FortKatanaDashTargetingInfo:OutOfRangePercent": "0 - 1 value representing how far out of range the target is. 0 is in range, 1 is beyond the detection range. Based on AdditionalOutOfRangeDetection.",
    "FortAthenaVehicle:NormalizedRPM": "0-1 rpm value that is computed and set by audio BP",
    "FortVehicleFuelComponent:LowFuelPercent": "0-1 when to treat fuel as low",
    "MoggChannel:Index": "0-based channel index",
    "FortPlayerSettingsComponentBase:NameplateFocusAngle": "0.261799f is 15 degrees in radians",
    "FortAnimInput_TurnInPlace:RootYawOffsetAlpha": "0.f if RootYawOffset is zero, 1.f otherwise.",
    "DaySequenceProjectSettings:bDefaultLockEngineToDisplayRate": "0: Playback locked to playback frames\n1: Unlocked playback with sub frame interpolation",
    "OnlineAccountTexts:UnlinkConsoleFailed": "0: auth type",
    "OnlineAccountTexts:MCPTimeout": "0: game name",
    "OnlineAccountTexts:NoPlayEntitlement": "0: game name",
    "OnlineAccountTexts:NoServerAccess": "0: game name",
    "OnlineAccountTexts:ServiceDowntime": "0: game name",
    "OnlineAccountTexts:UnableToJoinWaitingRoomLoginQueue": "0: game name",
    "OnlineAccountTexts_FailedLoginConsole:PatchAvailable": "0: instruction for user",
    "OnlineAccountTexts:WaitingRoomError": "0: number of retries",
    "OnlineAccountTexts_FailedLoginConsole:NeedPremiumAccount": "0: premium online account name",
    "OnlineAccountTexts:DisconnectedFromMCP": "0: service name",
    "OnlineAccountTexts:ExtAuthAssociationFailure": "0: service name",
    "OnlineAccountTexts:ExtAuthCanceled": "0: service name",
    "OnlineAccountTexts:ExtAuthFailure": "0: service name",
    "OnlineAccountTexts:ExtAuthTimeout": "0: service name",
    "OnlineAccountTexts:LoggedOutReturnedToTitle": "0: service name",
    "OnlineAccountTexts:LoggedOutofMCP": "0: service name",
    "OnlineAccountTexts:UnableToConnect": "0: service name",
    "OnlineAccountTexts:UnexpectedConsoleAuthFailure": "0: service name",
    "OnlineAccountTexts_FailedLoginConsole:AgeRestriction": "0: service name",
    "OnlineAccountTexts_FailedLoginConsole:Generic": "0: service name",
    "OnlineAccountTexts_FailedLoginConsole:PleaseSignIn": "0: service name",
    "OnlineAccountTexts_FailedLoginConsole:UI": "0: service name",
    "OnlineAccountTexts_FailedLoginConsole:UnableToSignIn": "0: service name",
    "OnlineAccountTexts_FailedLoginConsole:UnexpectedError": "0: service name",
    "OnlineAccountTexts:WaitingRoomFailure": "0: service name, 1: error code",
    "OnlineAccountTexts:WaitingRoomWaiting": "0: time span",
    "EDynamicDestructionResourceType.Stone": "1",
    "CustomCharacterData:RequiredVariantPartFlags": "1 bit per part",
    "FortAnimInput_ShoppingCart:RunForwardAlpha": "1 implies player is running \"forward\" which could technically mean left or right as well. -1 means they want to actually reverse",
    "EFortPlaylistTeamSizeType.Duo": "1 player",
    "EFloorPatternType.CornerPiece": "1 tile selected",
    "ExperimentalCohortPercent:CohortPercent": "100 - force on, 0 - force off",
    "FortGameUserSettings:UserInterfaceContrast": "1: Normal contrast. > 1, increases the contrast.  Less than 1, makes things less contrasted (closer to everything being gray, don't go below 1).",
    "FortWeapon:CameraBase1PClass": "1st Person standard camera override for this weapon",
    "FortWeapon:CameraTargeting1PClass": "1st Person standard targeting camera override for this weapon",
    "EDynamicDestructionResourceType.Metal": "2",
    "EFortPlaylistTeamSizeType.Trio": "2 players",
    "EFloorPatternType.DiagonalPiece": "2 tiles selected",
    "EFloorPatternType.HalfPiece": "2 tiles selected",
    "BuildingFoundationSlab": "25x25 Foundation for \"The Slab\"",
    "FortAthenaLeashComponent:LeashRadius": "2D Radius of the leash",
    "DrawTaggedPlayerIndicatorsData:EnemyRenderDistance2D": "2D distance from the local player's camera under which the enemies with PlayerTag\n     get rendered on the map.\n     IF this value is nearly equal to 0, the map icon is not rendered.\n     IF this value is less than 0, the render distance check is ignored.\n     IF this value is above 0, the render distance check is performed.",
    "DrawTaggedPlayerIndicatorsData:FriendRenderDistance2D": "2D distance from the local player's camera under which the friendly players with PlayerTag\n     get rendered on the map.\n     IF this value is nearly equal to 0, the map icon is not rendered.\n     IF this value is less than 0, the render distance check is ignored.\n     IF this value is above 0, the render distance check is performed.",
    "FortMeleeWeaponStats:RangeVSBuildings2D": "2D range against building actors.",
    "EDynamicDestructionResourceType.Foliage": "3",
    "EFortPlaylistTeamSizeType.Squad": "3 players",
    "EFloorPatternType.LPiece": "3 tiles selected",
    "FortWeapon:CameraBase3PClass": "3rd Person standard camera override for this weapon",
    "FortWeapon:CameraTargeting3PClass": "3rd Person standard targeting camera override for this weapon",
    "FortWeapon:CameraTargeting3PReloadClass": "3rd Person targeting camera during reload override for this weapon",
    "ESpectatorCameraType.ThirdPerson": "3rd person camera attached to a player pawn",
    "BuildingFoundation3x3": "3x3 Foundation",
    "EFortPlaylistTeamSizeType.LargeTeam": "4 players",
    "EFloorPatternType.DefaultPiece": "4 tiles selected",
    "EFortResourceLevel.Fourth": "4-6 are only for ld-placed buildings",
    "EDynamicDestructionResourceType.Unused_6": "5",
    "BuildingFoundation5x10": "5x10 Foundation",
    "BuildingFoundation5x5": "5x5 Foundation",
    "EDynamicDestructionResourceType.Unused_7": "6",
    "EDynamicDestructionResourceType.Unused_8": "7",
    "FortPlayerPawn:HACK_CustomPRIComponent": "< Output parameters",
    "PFWExample_GameObject_PersistentInfo:FloatValue": "<<= ** These has to be UPROPERTY that is not transient for it to be written or read from the underlying services. The struct has to be USTRUCT",
    "PFWExample_GameObject_PersistentInfo:IntValue": "<<= ** These has to be UPROPERTY that is not transient for it to be written or read from the underlying services. The struct has to be USTRUCT",
    "PFWExample_GameObject_PersistentInfo:StringValue": "<<= ** These has to be UPROPERTY that is not transient for it to be written or read from the underlying services. The struct has to be USTRUCT",
    "PFWExample_GameObject_PersistentInfo:StructArrayValue": "<<= ** These has to be UPROPERTY that is not transient for it to be written or read from the underlying services. The struct has to be USTRUCT",
    "PFWExample_GameObject_PersistentInfo:StructValue": "<<= ** These has to be UPROPERTY that is not transient for it to be written or read from the underlying services. The struct has to be USTRUCT",
    "PFWExample_GameObject_PersistentInfo_Version0:FloatValue": "<<= ** These has to be UPROPERTY that is not transient for it to be written or read from the underlying services. The struct has to be USTRUCT",
    "PFWExample_GameObject_PersistentInfo_Version0:IntValue_1": "<<= ** These has to be UPROPERTY that is not transient for it to be written or read from the underlying services. The struct has to be USTRUCT",
    "PFWExample_GameObject_PersistentInfo_Version0:IntValue_2": "<<= ** These has to be UPROPERTY that is not transient for it to be written or read from the underlying services. The struct has to be USTRUCT",
    "PFWExample_GameObject_PersistentInfo_Version0:StringValue": "<<= ** These has to be UPROPERTY that is not transient for it to be written or read from the underlying services. The struct has to be USTRUCT",
    "PFWExample_SubGameObject_PersistentInfo:IntValue": "<<= ** These has to be UPROPERTY that is not transient for it to be written or read from the underlying services. The struct has to be USTRUCT",
    "ActiveItemGrantInfo:MaxAmount": "<= 0 for infinite, the maximum amount of this item type to grant.",
    "ActiveItemGrantInfo:AmountToGive": "<= 0 to disable, this is the amount to give per tick.",
    "FortPlayerPawn:Hero": "== Hacks to get around the implementation of hero cosmetics being dependent on PlayerStates and PlayerControllers! ==",
    "EFortPlaylistTeamSizeType.MAX": "> 4 players",
    "FortCreativeExplosiveBarrelDevice": "@James.Tan This class was created specifically for the Creative explosive barrel device because I wanted to minimize the risk in inherited other behaviors.",
    "FortGrantedQuestData": "@Jonathan.Bunner\nReplicated Quest Array + Objective Data Arrays currently implemented as member variables at the derived manager level vs as part of core\nIFortQuestInstanceManagerInterface\nThis allows managers to implement things differently if required (e.g. for unique access patterns / performance requirements).\nWe can revisit this if we need to later provide an out-of-the-box base class for the most common cases.",
    "ESettingType.ControllerLookSensitivityPitch": "@Owner Aaron.Eady",
    "ESettingType.CreativeTurboDelete": "@Owner Aaron.Eady",
    "ESettingType.EditButtonHoldTime": "@Owner Aaron.Eady",
    "ESettingType.GyroEnabled": "@Owner Aaron.Eady",
    "ESettingType.InvertPitchForAircraftPrimary": "@Owner Aaron.Eady",
    "ESettingType.InvertPitchForMotion": "@Owner Aaron.Eady",
    "ESettingType.InvertYaw": "@Owner Aaron.Eady",
    "ESettingType.LookSensitivityPreset": "@Owner Aaron.Eady",
    "ESettingType.LookStickDeadZone": "@Owner Aaron.Eady",
    "ESettingType.MouseTargetingMultiplier": "@Owner Aaron.Eady",
    "ESettingType.SafeZone": "@Owner Aaron.Eady",
    "ESettingType.SlideButtonHoldTime": "@Owner Aaron.Eady",
    "ESettingType.GamepadAutoRun": "@Owner Aaron.Eady (Deleted, always true now)",
    "ESettingType.AutoChangeMaterial": "@Owner Aidan.McInerny",
    "ESettingType.VoiceChat": "@Owner Bob.Tellez",
    "ESettingType.ThreeDResolution": "@Owner Bob.Tellez, BaseScalability.ini -> DefaultScalability.ini -> (Platform)Scalability.ini",
    "ESettingType.AimAssist": "@Owner Boson.Huang",
    "ESettingType.AccessoriesHeader": "@Owner Brian.Zaugg",
    "ESettingType.ConsoleUnlockedFPS": "@Owner Bryan.Wagstaff",
    "ESettingType.AllowLowPower": "@Owner Carlos.Cuello",
    "ESettingType.ToggleDoubleTapAutorun": "@Owner Carlos.Cuello",
    "ESettingType.AllowDynamicResolution": "@Owner Chris.Bunner",
    "ESettingType.Quality": "@Owner Daniel.Broder",
    "ESettingType.AnonymousCharacterMode": "@Owner Don.Eubanks",
    "ESettingType.AutoOpenDoors": "@Owner Don.Eubanks",
    "ESettingType.HiddenMatchmakingDelay": "@Owner Don.Eubanks",
    "ESettingType.UseGPUCrashDebugging": "@Owner Emil.Persson",
    "ESettingType.ForceFeedback": "@Owner Eric.Feldman",
    "ESettingType.LocalNotifications": "@Owner Greg.Beauchesne",
    "ESettingType.ReplayRecordingCreativeMode": "@Owner Jeff.Farris",
    "ESettingType.ReplayRecordingLargeTeams": "@Owner Jeff.Farris",
    "ESettingType.MusicVolume": "@Owner Jeffrey.Bauer",
    "ESettingType.Subtitles": "@Owner Jesse.Ziglar",
    "ESettingType.EquipFirstBuildingPieceWhenSwappingQuickbarsAthena": "@Owner John.Abercrombie, Peter.Knepley",
    "ESettingType.HideOtherPlayerNames": "@Owner Jon.Lietz",
    "ESettingType.UsePowerSavingMode": "@Owner Jon.Nabozny",
    "ESettingType.MouseSensitivityYaw": "@Owner Josh.Markiewicz",
    "ESettingType.AutorunLockZonePreference": "@Owner Mathieu.Chamberland",
    "ESettingType.ToggleSprint": "@Owner Mathieu.Chamberland",
    "ESettingType.ReplayRecording": "@Owner Mathieu.Roy",
    "ESettingType.AutoJoinGameVoiceChannel": "@Owner Matt.Stone",
    "ESettingType.HUDScale": "@Owner Matt.Stone",
    "ESettingType.ShowVoiceIndicators": "@Owner Matt.Stone",
    "ESettingType.AllowVideoPlayback": "@Owner Mic.Rooney",
    "ESettingType.AutoPickupWeapons": "@Owner Mic.Rooney",
    "ESettingType.AutoPickupWeaponsConsolePC": "@Owner Mic.Rooney",
    "ESettingType.ControllerLookSensitivityYaw": "@Owner Mic.Rooney",
    "ESettingType.EditConfirmOnRelease": "@Owner Mic.Rooney",
    "ESettingType.GyroHarvestingToolSensitivity": "@Owner Mic.Rooney",
    "ESettingType.GyroScopedSensitivity": "@Owner Mic.Rooney",
    "ESettingType.GyroSensitivity": "@Owner Mic.Rooney",
    "ESettingType.GyroTargetingSensitivity": "@Owner Mic.Rooney",
    "ESettingType.GyroYawAxis": "@Owner Mic.Rooney",
    "ESettingType.InvertPitch": "@Owner Mic.Rooney",
    "ESettingType.QuickEdit": "@Owner Mic.Rooney",
    "ESettingType.ShadowPlayHighlights": "@Owner Mic.Rooney",
    "ESettingType.ShowFPS": "@Owner Mic.Rooney",
    "ESettingType.ToggleTargeting": "@Owner Mic.Rooney",
    "ESettingType.TouchBuildingMultiplier": "@Owner Mic.Rooney",
    "ESettingType.TouchDragScopedSensitivity": "@Owner Mic.Rooney",
    "ESettingType.TouchDragTargetingSensitivity": "@Owner Mic.Rooney",
    "ESettingType.TouchEditModeMultiplier": "@Owner Mic.Rooney",
    "ESettingType.TouchVerticalSensitivity": "@Owner Mic.Rooney",
    "ESettingType.COUNT": "@Owner Michel.Champoux",
    "ESettingType.TouchEdit": "@Owner Mike.Fricker",
    "ESettingType.MouseSensitivityMultiplierForAircraft": "@Owner Mike.Fricker, Mic.Rooney",
    "ESettingType.MouseSensitivityPitch": "@Owner Mike.Fricker, Mic.Rooney",
    "ESettingType.EnableTryBuildOnFocus": "@Owner Nick.Cooper",
    "ESettingType.HoldToSwapPickup": "@Owner Nick.Cooper",
    "ESettingType.InWorldInteract": "@Owner Nick.Cooper",
    "ESettingType.TapInteract": "@Owner Nick.Cooper",
    "ESettingType.AutoSortConsumablesToRight": "@Owner Nick.Cooper, Mic.Rooney",
    "ESettingType.ColorBlindStrength": "@Owner Nick.Darnell",
    "ESettingType.EnableRudderControl": "@Owner Nick.Darnell",
    "ESettingType.IgnoreGamepadInput": "@Owner Nick.Darnell",
    "ESettingType.LockPrimaryInputMethodToMouse": "@Owner Nick.Darnell",
    "ESettingType.ShowGlobalChat": "@Owner Nick.Darnell",
    "ESettingType.ShowViewerCount": "@Owner Nick.Darnell",
    "ESettingType.VisualizeSoundEffectsHeader": "@Owner Nick.Darnell",
    "ESettingType.FireMode": "@Owner Nicolas Bongi",
    "ESettingType.BuildingPossession": "@Owner Nicolas.Bongi",
    "ESettingType.RenderingAPI": "@Owner Nicolas.Mercier; Setting is not used anymore,\nbut keep the slot in the enum to preserve the indices.",
    "ESettingType.AllowBackgroundAudio": "@Owner Peter.Knepley",
    "ESettingType.AutoEquipBetterItems": "@Owner Peter.Knepley",
    "ESettingType.CrossplayPreference": "@Owner Peter.Knepley",
    "ESettingType.DisablePreEditsWhenPlacingBuilding": "@Owner Peter.Knepley",
    "ESettingType.GamepadBuildingMultiplier": "@Owner Peter.Knepley",
    "ESettingType.GamepadEditModeMultiplier": "@Owner Peter.Knepley",
    "ESettingType.GamepadScopedMultiplier": "@Owner Peter.Knepley",
    "ESettingType.GamepadTargetingMultiplier": "@Owner Peter.Knepley",
    "ESettingType.MouseScopedMultiplier": "@Owner Peter.Knepley",
    "ESettingType.PingPlaceDangerMarkerWhenTargeting": "@Owner Peter.Knepley",
    "ESettingType.ProximityVoiceChat": "@Owner Peter.Knepley",
    "ESettingType.RudderDeadZone": "@Owner Peter.Knepley",
    "ESettingType.RudderMaxThrottle": "@Owner Peter.Knepley",
    "ESettingType.ShowTemperature": "@Owner Peter.Knepley",
    "ESettingType.TurboBuild": "@Owner Peter.Knepley",
    "ESettingType.VisualizeSoundEffects": "@Owner Peter.Knepley",
    "ESettingType.VoiceChatInputDevice": "@Owner Peter.Knepley",
    "ESettingType.VoiceChatOutputDevice": "@Owner Peter.Knepley",
    "ESettingType.PushToTalk": "@Owner Peter.Knepley (Athena), Alex.Thurman (STW)",
    "ESettingType.AnonymousMode": "@Owner Philip.Buuck",
    "ESettingType.ContextTutorial": "@Owner Philip.Buuck",
    "ESettingType.Disabled_AllowMultithreadedRendering": "@Owner Philip.Buuck",
    "ESettingType.FirstPersonCamera": "@Owner Stanley.Hayes",
    "ESettingType.InvertPitchForAircraftSecondary": "@Owner Steven.Barnett",
    "ESettingType.InvertYawForMotion": "@Owner Steven.Barnett",
    "ESettingType.TouchDragSensitivity": "@Owner Steven.Barnett",
    "ESettingType.TouchLookAccelerationMultiplier": "@Owner Todd.Eckert",
    "EBTLengthType": "@TODO this is here temporarily because MusicClock doesn't implement\nevents for all the types in ELengthType, and so we don't want to\nexpose those to users yet",
    "EHmxAudioAnalysisType": "@TODO where should this live?",
    "FortAthenaLoadout:CharacterVariantChannels": "@TODO: COSMETICS: Rename this to ActiveVariants or something like that (not Character-centric, and each entry has an item as part of the tuple, so it's not just channel data either)",
    "FortMantisRootMotionWarpInfo:bUseAlternativeWarpingBehavior": "@TODO: Temp flag to be able to have some extra features during warping without affecting existing users.",
    "FortPlayerParachute:bChuteOpened": "@TODO: This is currently used as a scratchpad for a couple of the gliders and needs to probably be renamed so it's not misused elsewhere (it's never set by code)",
    "CreativeAudioComponent:AutoplayOptions": "@brief  A selection of minigame states in which we can autoplay when entering those states, set via a bitmask",
    "CreativeAudioMixerDevice:CachedBusMix": "@brief A client cached bus mix",
    "CreativeAudioMixerDevice:CachedBusMixName": "@brief A client cached bus mix name",
    "CreativeAudioComponent:ClientCachedProxy": "@brief A client cached proxy that gets set when proxy data has changed",
    "CreativeAudioMixerDevice:ClientCachedProxy": "@brief A client cached proxy that gets set when proxy data has changed",
    "FortObjectiveFilterType_NearbyPlayers:NearbyPlayersTagQuery": "@brief Filter nearby players based on this query",
    "FortObjectiveFilterType_NearbyPlayers:SpecificAffiliationsAllowed": "@brief If empty, all affiliations are allowed",
    "FortObjectiveFilterType_NearbyPlayers:bFilterEnabled": "@brief If false, disable this entire subset of nearby player filters",
    "CreativeAudioComponent:bRestartAudioOnPlay": "@brief Should the audio restart if a new play call comes in?",
    "CreativeAudioComponent:bSyncPlayerAudio": "@brief Should we sync the audio across all players? Recommended for longer sounds",
    "CreativeAudioComponent:AudioComponent": "@brief The Audio Component on this device. We also use this as the source of truth for the state of PlayerAudioComponents",
    "CreativeAudioComponent:PlayerAudioComponents": "@brief The audio components used when playing on other players",
    "CreativeAudioComponent:FadeInDuration": "@brief The fade in duration used when playing sounds",
    "CreativeAudioComponent:FadeOutDuration": "@brief The fade out duration used when stopping sounds",
    "CreativeAudioComponent:PlayLocation": "@brief The possible locations for this audio to play, set via a bitmask",
    "CreativeAudioComponent:ServerInstigatorData": "@brief The server's instigator data which is used if everyone should hear the audio",
    "FortControllerComponent_PinQuest": "@brief This component is intended to be a plug-and-play solution for enabling quest pinning in any mode.",
    "FortControllerComponent_SharedQuests": "@brief This component is intended to be a plug-and-play solution for enabling shared quests in any mode. Right now it\nis coupled to things like the AthenaPlayerState or AthenaFortController which isn't ideal, plus it needs a\nQuestManagerComponent_Athena to work at all. As QS2 comes online and we start to sunset QS1 tech, this component\nshould be decoupled as much as possible, to allow for any game mode to add on their controller and have shared quests\n\nFor now, PlayerAssist code also lives here, which is a different concept than shared quests yet highly related. Should\nrevisit that once we settle on how we want to handle different types of playgroup sharing moving forward (from which\nshared quests and Player Assist are just 2 permutations of).",
    "CreativeAudioComponent:LastSoundPlayed": "@brief We cache the last sound played so that we only play if a new sound is assigned (unless RestartAudioOnPlay is true)",
    "CreativeAudioMixerDevice:FortActorOptionsComponent": "@brief We check when the user options are updated so we can respond immediately to bActivateInEditMode\n\n@see bActivateInEditMode",
    "CreativeAudioMixerDevice:bCachedIsActive": "@brief We store a cached version of the active state on the server",
    "CreativeAudioComponent:CachedInstigatorData": "@brief We store a cached version of the instigator data regardless of whether it'll be replicated via server or via proxies",
    "CreativeAudioComponent:CanBeHeardBy": "@brief Who can hear this audio? Set via a bitmask",
    "CraftingObjectBGA": "@class ACraftingObjectBGA\n\n    The crafting object is a useful actor to use for generic crafting purposes. The\n    object will have an inventory and will interface with a crafting component to\n    store a set of items that can be processed by the component to craft a desired\n    output object.",
    "FNE_Volume": "@class AFNE_Volume\n\nA lightweight extension to the GameplayVolume class",
    "FortAsyncObjectManager": "@class AFortAsyncObjectManager\n\nManager class wrapper around AsyncObjectManager that register any objects with IFortAsyncObjectInterface",
    "FortAthenaMutator_GenerateOverlapEventsOverride": "@class AFortAthenaMutator_GenerateOverlapEventsOverride\n\nThis mutator will take building actors and override the bGenerateOverlapEvents on\ntheir static mesh component.",
    "FortMeshNetworkEventsLoader": "@class AFortMeshNetworkEventsLoader\n\nThe main goal of this actor is to provide an event dispatching mechanism for Fortnite and\nthe games built off of it. Phase 1 will be events defined in the component proper, but phase 2+\nwill incorporate a more general framework for event responding and communication that the game/plugins\nfuture scripting initiatives/etc can interface with, and even a state machine defining phases\nand actions within a phase (see: https://docs.google.com/document/d/1v-7PzLudd9QkAQ3Bi7B2KvQ3wbSlVYGlISTGPXXA1e0/edit?usp=sharing)\n\nWe will want to support multiple loaders that can also be tied to one/many playspace(s) that way events\ncan target multiple events on a single map.\n\nThere are 2 types of mesh network events that can be communicated to the Root Server that are then\ndisseminated out to the rest of the server/clients on the network.\n\nMeshEventBurst - i.e. MeshNetEventBurst EventName\nMeshEventStart/MeshEventEnd - i.e. MeshNetEventStart EventName and MeshNetEventEnd EventName",
    "FortPhysicsReplicatedTargetGhost": "@class AFortPhysicsReplicatedTargetGhost\n\nThe physics ghost created in FortPhysicsReplication when you want to see\na picture of the ReplicatedMovements of an actor relative to where it current\nis on the client.\n\nThis helps to investigate issues where an actor on the client has over/under simulated\nrelative to the actor's ReplicatedMovement.",
    "FortPluginActorSpawner": "@class AFortPluginActorSpawner\n\n@todo: Delete this class!",
    "BelongTreatyProjectile": "@class BelongTreatyProjectile\n\nProjectile for the BelongTreaty feature. Has some helper functions to be consumed in BP.",
    "BelongTreatyProjectileMovementComponent": "@class BelongTreatyProjectileMovementComponent\n\nMovement component used for Belong Treaty projectile. Adds more fine-grained collision control driven by a tag query.",
    "FortCriteriaRequirementData": "@class FFortCriteriaRequirementData\n\n      The data structure that defines the required tag needed to\n      achieve the criteria power mod",
    "FGF_Character": "@class FGF_Character\n\nFGF: Fortnite Game Framework\n\nThis layer of Character is meant to be as close to engine as possible and should, for the most part, only be responsible\nfor housing components and contain platform-level functionality that's not specific to any Fortnite Experience",
    "FGF_GameMode": "@class FGF_GameMode\n\nFGF: Fortnite Game Framework\n\nThis layer of Game Mode is meant to be as close to engine as possible and should, for the most part, only be responsible\nfor housing components and contain platform-level functionality that's not specific to any Fortnite Experience.",
    "FGF_GameState": "@class FGF_GameState\n\nFGF: Fortnite Game Framework\n\nThis layer of GameState is meant to be as close to engine as possible and should, for the most part,\nonly be responsible for housing components that add features to a \"Fortnite Experience\".",
    "FGF_PlayerController": "@class FGF_PlayerController\n\nFGF: Fortnite Game Framework\n\nThis layer of Player Controller is meant to be as close to engine as possible and should, for the most part, only be responsible\nfor housing components and contain platform-level functionality that's not specific to any Fortnite Experience.",
    "FGF_PlayerState": "@class FGF_PlayerState\n\nFGF: Fortnite Game Framework\n\nThis layer of Player State is meant to be as close to engine as possible and should, for the most part, only be responsible\nfor housing components and contain platform-level functionality that's not specific to any Fortnite Experience",
    "PlayerFishingTelemetryData": "@class FPlayerFishingTelemetryData\n\nThe data structure that stores all the relevant information for a single fishing session.",
    "FortAthenaMutator_ScoutDrone": "@class FortAthenaMutator_ScoutDrone\n\nMutator to handle non-standard tweaks needed by the drone for indicators and interaction",
    "FortBRLogicRemovalComponent": "@class FortBRLogicRemovalComponent\n\nComponent used to detach/block Athena features so other experiences outside of Battle Royale can start with a clean slate.\nThis component should gradually be replaced by proper refactors and plugin-ization/component-ization of features",
    "FortDependantReplicationHelperComponent": "@class FortDependantReplicationHelperComponent\n\nHelper component that sets the owning actor as a dependant of the instigator pawn.",
    "FortExCaliberProjectile": "@class FortExCaliberProjectile\n\nEx Caliber Rifle's projectile nativization. Maintaining most of the names and logic from the original BP.",
    "FortLevelInstancePrefab": "@class FortLevelInstancePrefab\n\nSpawnable Level Instance Prefab. Used as base class of chunks of level that we want to spawn in runtime.\nThis is a simpler version of AFortAthenaLivingWorldPrefab for when we don't need to spawn AI within a level instance.",
    "FortMissionStormShieldManager": "@class FortMissionStormShieldManager\n\nClass used to decouple the MissionStormShield actor from Game State. The goal is to refactor it completely into a plugin but this is a first step towards decoupling it",
    "FortMusterExplosiveARProjectile": "@class FortMusterExplosiveARProjectile\n\nNative class for the Explosive AR projectile mainly used for nativizations.",
    "FortPrefabSpawner": "@class FortPrefabSpawner\n\nSpawner that, based on a group of tags/properties requests a prefab to spawn.\nSpawning managed by UFortRandomPrefabSpawnHelper.",
    "FortProjectileMovementComponent_FloorSnapped": "@class FortProjectileMovementComponent_FloorSnapped\n\nProjectile Movement Component used to make a projectile slide along a surface, counteracting gravity when going up a slope to keep velocity constant",
    "FortRandomPrefabSpawnHelper": "@class FortRandomPrefabSpawnHelper\n\nProvider component used to randomize actors to spawn based on certain properties represented by tags.\ni.e. \"I want to spawn a hard puzzle that is compatible with a 3x3 space\"",
    "FortScoutDrone": "@class FortScoutDrone\n\nClass representing a Remote-Controlled drone that can be controlled by the player",
    "FortScoutDroneAnalyticsComponent": "@class FortScoutDroneAnalyticsComponent\n\nComponent specialized in receiving drone-related events and sending session-based (Deploy adn Dismiss) analytics",
    "FortScoutDroneControllingComponent": "@class FortScoutDroneControllingComponent\n\nComponent used to manage the input of a the remote-controlled Scout Drone",
    "FortScoutDroneGlove": "@class FortScoutDroneGlove\n\nThe weapon that takes care of deploying the Scout Drone",
    "FortScoutDroneMovementComponent": "@class FortScoutDroneMovementComponent\n\nCustom Movement Component specifically suited for a remotely-controlled drone, that's an AI-possessed actor acting as an Autonomous Proxy",
    "FortScoutDronePawnOverrideComponent": "@class FortScoutDronePawnOverrideComponent\n\nUsed to override aspects of the game that the Scout Drone wants to mutate",
    "FortScoutDronePawnOwnerOverrideComponent": "@class FortScoutDronePawnOwnerOverrideComponent\n\nUsed to override aspects of the game that the Scout Drone's owner pawn wants to mutate",
    "FortScoutDronePickupManager": "@class FortScoutDronePickupManager\n\nHelper component used to do all the target pickup management needed in UFortGameplayAbility_ScoutDrone_PickUp.\nThe main reason it was created was to be able to replicate variables to all clients instead of just the owning client",
    "GameplayEventRouterComponent": "@class GameplayEventRouterComponent\n\nComponent that gives actors the ability to route Events, acting as a scope for the events that are registered within their owned router.\nAs we need to initialize and register this component before any other one, this component is NOT meant to be added via editor or in the constructor of a class.\n\nGiven that we use IGameplayEventRouterOwnerInterface to spawn this component dynamically, this component will never show up in editor, so if you want to use\na child class for your router, override GetRouterClass in IGameplayEventRouterOwnerInterface and pass in your custom class.\n\nOnly use IGameplayEventRouterOwnerInterface to manage the spawn of this component.",
    "GrindRailEditorComponent": "@class GrindRailEditorComponent\n\nDummy editor component to be able to add custom editor gizmos for grind rails",
    "PlayspaceComponent_LoadingScreen": "@class PlayspaceComponent_LoadingScreen",
    "ScoutDroneUIDirector": "@class ScoutDroneUIDirector\n\nDynamic UI Director that takes care of pushing Scout Drone Scenes",
    "SpatialGameplayActorTrackerComponent": "@class SpatialGameplayActorTrackerComponent",
    "ActorComponent_ReplicatedParamHelper": "@class UActorComponent_ReplicatedParamHelper",
    "AssembledMeshUserComponent": "@class UAssembledMeshUserComponent",
    "AthenaSpecialActorComponent": "@class UAthenaSpecialActorComponent\n\nThis component allows actors to have special actor map/minimap icons\nwithout having to code up specifically for a particular actor's class",
    "CosmeticsEarlyQRPComponent": "@class UCosmeticsEarlyQRPComponent\n@brief Component for managing early QRP interfaces related to cosmetics that will normally live on an actor\nor actor's component.  It's responsibility is to make it easy for one to use FCosmeticsEarlyQRP on an UObject.\nHowever in cases one may want to use CosmeticsFramework::FCosmeticsEarlyQRP (or multiple) directly as a\nmember rather then a component.\n\n@see FCosmeticsEarlyQRP\n\nThis class acts as a Component wrapper for the FCosmeticsEarlyQRP class.\nIt provides the necessary methods to interface with early QRP functionalities\nsuch as revising, pruning, queuing, and readiness checks.",
    "CraftingObjectComponent": "@class UCraftingObjectComponent",
    "CreativeRoyalePlayspaceComponent_LevelReset": "@class UCreativeRoyalePlayspaceComponent_LevelReset\n\nReset the world between Edit mode gameplays.\n\n CVars\n\n CreativeRoyale.LevelReset.bEnableLevelReset (Off - disabled)\n   Enable or disable Level Reset.\n\n CreativeRoyale.LevelReset.bBuildingContainersOnly (Off - disabled)\n   Debug support BuildingContainers only.\n\n CreativeRoyale.LevelReset.bHandleBuildingDamaged (On - enabled)\n   Testing Handle building damage as well as death.\n\n CreativeRoyale.LevelReset.bTestIgnoreFloorLootProcessing (Off - disabled)\n   Debug ignore floor loot.\n\n CreativeRoyale.LevelReset.bRespawnDeadActorsNextStartGame (Off - disabled)\n   Testing Level Reset by respawning dead actors next start round/game.\n\n CreativeRoyale.LevelReset.bDestroyDamagedActorsAfterEndGame (Off - disabled)\n   Testing Level Reset by destroying damaged actors after end round/game.\n\n CreativeRoyale.LevelReset.bRemoveActorInstanceFromSave (On - enabled)\n   Testing Remove ActorInstanceRecords entry from Level Save Record.\n\n CreativeRoyale.LevelReset.bRemoveActorFromSave (Off - disabled)\n   Testing Remove just Actor entry from Level Save Record.\n\n CreativeRoyale.LevelReset.bUseTransientFlagForAddActorToSave (Off - disabled)\n   Testing set transient flag for calls to AddActorToSave.\n\n CreativeRoyale.LevelReset.bSaveParentToAttachTo (On - enabled)\n   Testing Save ParentToAttachTo and Restore Attached Buildings.\n\n At startup in the initial map, the BuildingActor / BuildingContainer Actors\n   have callbacks added for OnDie / OnDamage.\n When the BuildingActor Dies during gameplay,\n   (When bRespawnDeadActorsNextStartGame is true)\n     it is added to list to get respawned next start round/game\n   (Else)\n     it is added to the Level Save Record and registered for deletion rollback.\n When the BuildingActor is Damaged during gameplay (if bHandleBuildingDamaged is true),\n   (When bDestroyDamagedActorsAfterEndGame is true)\n     it is added to list to get destroyed after end round/game, then added to dead list\n   (Else)\n        it is added to the Level Save Record and registered for modification rollback.\n When Edit mode round/gameplay is complete,\n   (When bRespawnDeadActorsNextStartGame and bDestroyDamagedActorsAfterEndGame are true)\n     damaged actors will be deleted and added to dead actors to be respawned at start of next round/game\n   (Else)\n     the Level Save Record performs the rollbacks.\n     (When bRemoveActorInstanceFromSave or bRemoveActorFromSave are true)\n       ActorInstanceRecords or Actors are removed from the Level Save Record.",
    "CreativeRoyalePlayspaceComponent_PlayerSpawning": "@class UCreativeRoyalePlayspaceComponent_PlayerSpawning",
    "CreativeRoyalePlayspaceComponent_RemoveItems": "@class UCreativeRoyalePlayspaceComponent_RemoveItems\n\nRemove unwanted Items between Edit mode gameplays.\n\n Functionality will run right after Start Game pressed and will remove what are now Player Tossed Pickups.",
    "FNE_VolumeComponent": "@class UFNE_VolumeComponent\n\nA component to spawn a lightweight Volume\nThe class template of Volume to spawn is set in the ChildActorComponent ChildActorClass.",
    "FortActorComponent_Affiliation": "@class UFortActorComponent_Affiliation\n\nActor component that contains affiliation information for an actor (faction and relations)",
    "FortAdvancedMeleeComponent": "@class UFortAdvancedMeleeComponent\n\nA component for advanced melee attacking",
    "FortAthenaAlertStateComponent": "@class UFortAthenaAlertStateComponent\n\nA component to hold information on the player pawn about its alert state (the ? filling up over its head)",
    "FortAthenaNPCLoopStateComponent": "@class UFortAthenaNPCLoopStateComponent\n\nComponent to handle NPC loop state (in/between/out of the loop). State can change GE applied to the NPC, collision profile and other things",
    "FortBuildingSMActorRepProxyComponent": "@class UFortBuildingSMActorRepProxyComponent\n\nThe purpose of this class is to add replication proxy data to building smactors w/out\nincreasing every smactor's size in memory. So, this component is added as needed to\nprovide the replication for various one-off things that probably won't update on a regular\nbasis or on a large number of smactors at any given time.",
    "FortCharacterCustomizationManagerComponent": "@class UFortCharacterCustomizationManagerComponent\n\nManages all the visual customizations that can be applied to our character without the need of an item definition, this includes Body Parts, AnimBP and Footstep Bank.\nHolds an array of customizations, so several customizations can be active at the same time.\nUses a priority system to break ties between customizations that attempt to override the same thing.\nTracks the handles of applied customizations to be able to pop them afterwards.",
    "FortControllerAIBotComponent_Telemetry": "@class UFortControllerAIBotComponent_Telemetry\n\nComponent telemetry used specifically for NPCs (Non game participant bots)",
    "FortControllerComponent_CraftingNetworkEvents": "@class UFortControllerComponent_CraftingNetworkEvents\n\nThe purpose of this component is to bridge the client and server for crafting. The\nplayer will have to interact w/ a Crafting Object (could be the player or some other object)\nwhich will tell the server to start/stop crafting or to retrieve the crafted item(s).",
    "FortGenericDataStoreManagerComponent": "@class UFortControllerComponent_GenericDataStoreManager\n\nThe purpose of this component is to provide a location for UObject based data stores to exist.\nWe can then access them in a generic way in either C++ or BP",
    "FortControllerComponent_InventoryNetworkManagement": "@class UFortControllerComponent_InventoryNetworkManagement\n\nThe purpose of this component is to bridge the client and server for inventory management. Basic\nRPC setups for adding/removing/swapping items between 2 inventory owners.\n\n    Note: Is replicated by default, but won't replicate properties as GetReplicationCondition has been overridden\n to skip property comparisons while still allowing RPCs.",
    "FortControllerComponent_InventoryService": "@class UFortControllerComponent_InventoryService\n\nPlayer Controller's window to the Fort Inventory Sidecar Backend Service.\nThe goal of this component is to consolidate the uses of needing to work with the\nside car inventory service. Inventory Items will be stored in their various structs\nand persisted out to the service as they update.",
    "FortControllerComponent_RadiusTracker": "@class UFortControllerComponent_RadiusTracker\n\nThis component handles the tracking of a radius around a target actor.  For example, it is used to track and display\na radius around players that are a player hunt bounty target for this player.  It may be used for any case where a\nplayer needs to track a radius around any actor.  The tracking values are set into this component for each player by\nthe UFortGameStateComponent_RadiusTracker, which only exists on the server on the GameState.  Then this component\nreplicates the data only to players for whom it is relevant.",
    "FortControllerComponent_RechargeWeapons": "@class UFortControllerComponent_RechargeWeapons\n\nNote: Is replicated by default, but won't replicate properties as GetReplicationCondition has been overridden\nto skip property comparisons while still allowing RPCs.",
    "FortControllerComponent_SeasonItem": "@class UFortControllerComponent_SeasonItem\n\nThis component manages runtime state for season item data",
    "FortControllerComponent_Telemetry": "@class UFortControllerComponent_Telemetry\n\nThe goal of this component is to store all of a player controllers telemetry data in\na single place that prevents the bloat of various systems. i.e. PlayerController, PlayerState,\nPlayerPawn, etc",
    "FortCurieCableSocketComponent": "@class UFortCurieCableSocketComponent\n\nThe component used for curie cable socket management that a curie cable end point connects to.",
    "FortGameStateComponent_AffiliationManager": "@class UFortGameStateComponent_AffiliationManager\n\nGame State Component in charge of managing relations between actors and factions",
    "FortGameStateComponent_Crafting": "@class UFortGameStateComponent_Crafting",
    "FortGameStateComponent_SurfaceOverride": "@class UFortGameStateComponent_SurfaceOverride\n\nThe basic abstract game state component for overriding special surface type.\nThe SpecialSurfaceType would override the original returning surface type when\nlocation is in special surface.",
    "FortHeldObjectComponent": "@class UFortHeldObjectComponent\n\n      The held object component defines all the necessary functions/data to allow\n      an object to become a held object. The component will implicitly grab a defined\n      shape component (sphere, capsule, etc) and a defined projectile movement component. With\n      these components it can handle implicitly being thrown, dropped, and placed.\n\n      The component is setup with a generic held object weapon that defines an equip \"pickup\" animation,\n      an ability to throw the object, and an ability to place the object. Drop happens via weapon switch, death,\n      etc implicitly.\n\n      @example: Attach this component to a BuildingGameplayActor. The BGA will override CanInteract\n      and call the components CanInteract. If BGA can be held it will call OnInteract and call PickupHeldObject.\n\n      @todo: For more fine control over pickup, placing, and throwing it would be nice to define anim\n      notifies that can be assigned to an animation. Right now, attachment is done on pickup via on interact\n      so it doesn't fully sync up with the weapon's equip anim. Throwing happens via a trigger event on the throw\n      which looks great, but the detachment is happening via a timer, which isn't great.",
    "FortHoldingObjectComponent": "@class UFortHoldingObjectComponent",
    "FortLinkToActorComponent": "@class UFortLinkToActorComponent\n\nThe goal of this component is to provide a mechanism for actors to request a link to whatever\nactor it finds in a specific direction. And when that actor dies/destroys/etc it can then post events\nto be handled by the owning actor.\n@Note: This will not perform any kind of actor to actor attachment. This is a soft-link only.\n\n @example: FortPickup falls out of a chest and lands on a floor, it can then have the component link\nto the floor piece and when the floor piece dies, an event can fire on the pickup to have it start falling.",
    "FortNavigationVisibilityComponent": "@class UFortNavigationVisibilityComponent\n\nThis component allows actors in the front end to hide/show themselves or do custom things base on visibility state",
    "FortPawnComponent_Convert": "@class UFortPawnComponent_Convert\n\nThis component handles both side of conversion (converter and converted). This used to manage hacking robots, hiring NPCs, taming animals, ...\n\nConverter: A player can convert another pawn, meaning converted pawn will be forced to join player's team.\nIt also handles how many converted pawn can be active at once and replace older ones by new ones\n\nConverted: Pawn that has been forced to change team and follow its converter.",
    "FortPawnComponent_Disguise": "@class UFortPawnComponent_Disguise\nActor component used to disguise an AI Bot.\nWith this component we can reveal the disguise OnDamage, or during a conversation, etc... by apply Factions and GE.",
    "FortPawnComponent_PassiveHealer": "@class UFortPawnComponent_PassiveHealer\nPlayers can interact with this NPC to mimic an emote and give some heal overtime",
    "FortPawnComponent_SpeechBubble": "@class UFortPawnComponent_SpeechBubble\nComponent use to show and hide a SpeechBubble on AI",
    "FortPickupInteractOverrideComponent_Crafting": "@class UFortPickupInteractOverrideComponent_Crafting\n\nThis class is used to support the in world contextual crafting.  It only works on the\nsecond interaction and does not support multi-item picks.",
    "FortPlayerStateComponent_Habanero": "@class UFortPlayerStateComponent_Habanero\n\nRecord ranked related replicated information to share across clients",
    "FortPlayerStateComponent_VictoryCrowns": "@class UFortPlayerStateComponent_VictoryCrowns\n\nRecord victory crown related replicated information to share across clients",
    "FortPlayspaceComponent_IslandLocalizationRequest": "@class UFortPlayspaceComponent_IslandLocalizationRequest\n\nThis class is responsible for loading localization documents from the localization service\nand sending them back to the client whenever a specific locale is needed.\n\nThe load from the service will occur once the island has been loaded, in other words, once we have the relevant LinkData available\n\nThe document itself will be replicated to the client via the UFortControllerComponent_LocalizationService. This component sends it\nto that component whenever a player enters the owning playspace.",
    "FortPlayspaceComponent_NaniteSettingsOverride": "@class UFortPlayspaceComponent_NaniteSettingsOverride\nPlayspace component to override Nanite Settings based on\nthe default map of a level loaded into VKPlay/VKEdit.",
    "FortPlayspaceComponent_PlayerSpawning": "@class UFortPlayspaceComponent_PlayerSpawning",
    "FortPlayspaceComponent_SingleUserMultiplayer": "@class UFortPlayspaceComponent_SingleUserMultiplayer\nComponent that allow moderators to spawn bots in order to help testing islands without having a lot of real players",
    "FortPlayspaceComponent_WorldTimeOfDayOverride": "@class UFortPlayspaceComponent_WorldTimeOfDayOverride\nPlayspace component to override World Time Of Day Manager based on\nthe default map of a level loaded into VKPlay.",
    "FortProjectileMoveComp_Chase": "@class UFortProjectileMoveComp_Chase\n\nAdds features for chase type enemies to the UFortProjectileMovementComponent\n\n@Note: Actors that use this component are required to implement the IFortProjectileMovementComponent",
    "FortProjectileMovementComponent": "@class UFortProjectileMovementComponent\n\nBuilt off the engine Projectile Movement Component, features were added\nto support game specific Homing.",
    "FortSoundIndicatorComponent": "@class UFortSoundIndicatorComponent\n\nThe sound indicator component defines all the necessary functions/data to allow an object to display sound indicator (an icon on a radial to indicate were a sound is coming from) to the player.",
    "FortSpawnActorComponent": "@class UFortSpawnActorComponent\n\nThe goal of this component is to spawn an actor (not attached to this component)\nbut owned and attached by the owner actor.\n\nThe actor will spawn and attach to the owner at the given socket or at scene\ncomponent found via component tag. If neither is provided or found it will fail\nto spawn the actor.",
    "FortSplatterSourceComponent": "@class UFortSplatterSourceComponent\n\nA component used for tracking previous spewed projectiles and splatter BGAs so that we bind them, so that we can create trails or splines between them, etc.",
    "FortTamedNpcWidgetComponent": "@class UFortTamedNpcWidgetComponent\n\nActor component used on STW to display a widget indicating that a wildlife NPC has been tamed",
    "FortTimeOfDayWeatherComponent": "@class UFortTimeOfDayWeatherComponent",
    "FortUnderwaterDamageComponent": "@class UFortUnderwaterDamageComponent\n\nA component for dealing damage to actors that are under water",
    "FortVehicleInteractionOverrideComponent": "@class UFortVehicleInteractionOverrideComponent\n\nAdd to IFortVehicleInterface to modify the vehicle's default player interactions\nIs implemented for AFortAthenaVehicle. May or may not be implemented for any other vehicle classes.",
    "FortVehiclePhysicsCollisionDamageComponent": "@class UFortVehiclePhysicsCollisionDamageComponent\n\nA component used to handle pawns and building that are hit. Settings are used to damage and destroy hit actors.",
    "FortVehicleSeatComponent": "@class UFortVehicleSeatComponent\n\nThe component we use for \"vehicles\" to manage seat attachment.",
    "PlayspaceComponent_AIPerceptionModifier": "@class UPlayspaceComponent_AIPerceptionModifier\n              Modifies the perception for AI that enter the volume\n              Currently only affects AI Bots",
    "PlayspaceComponent_AsyncQueue": "@class UPlayspaceComponent_AsyncQueue\nHelper component that contains an Async Trace Queue and an Async Overlap queue. Can be added manually to a playspace to have verbose control over queuing.\nOtherwise, use the static functions from BP or native to have one automatically created in the root playspace to centrally control all queue requests.",
    "PlayspaceComponent_CreativeCollectionBase": "@class UPlayspaceComponent_CreativeCollectionBase\nPlayspace Component base class that serves as a wrapper around a FortCreativeActorCollection, determining which Actors and Assets are allowed in this Playspace context.",
    "PlayspaceComponent_CreativeLoadingStateProxy": "@class UPlayspaceComponent_CreativeLoadingStateProxy\nAllows playspaces to broadcast Playspace_EventMessage_SpatialGameplayActorLoadingStateUpdated so that playlists can modify the default creative behavior for when creative volumes are refreshed.",
    "PlayspaceComponent_CreativeModifyEmotes": "@class UPlayspaceComponent_CreativeModifyEmotes",
    "PlayspaceComponent_CreativePlayManager": "@class UPlayspaceComponent_CreativePlayManager\nManages critical elements of gameplay and setup for Creative_Play type servers.",
    "PlayspaceComponent_CreativeSpawnTracker": "@class UPlayspaceComponent_CreativeSpawnTracker\nPlayspace Component that validates actors that enter it to see if they are part of the specified creative collection\nif they're not part of the collection it deletes them.\nThe component does depend on the Playspace_EventMessage_ActorTracker_ActorEntered which is currently fired by the volume, or the Playspace Spatial Actor Tracker component",
    "PlayspaceComponent_CreativeToolsPermission": "@class UPlayspaceComponent_CreativeToolsPermission",
    "PlayspaceComponent_FixupCreativeActors": "@class UPlayspaceComponent_FixupCreativeActors\nExposes a way to fixup all actors for creative after a Corresponding Spatial Actor tracker is run in the seutp.\nNote: Not intended to be used in live. This is mostly a useful development tool to fix up any large set of actors\nfor use in a Creative mode type enviornment.",
    "PlayspaceComponent_LiveEdit": "@class UPlayspaceComponent_LiveEdit",
    "PlayspaceComponent_MeshNetworkEventResponder": "@class UPlayspaceComponent_MeshNetworkEventResponder",
    "PlayspaceComponent_PlayStopPauseManager": "@class UPlayspaceComponent_PlayStopPauseManager",
    "PlayspaceComponent_PlayerPawnOverrides": "@class UPlayspaceComponent_PlayerPawnOverrides\n\nConfigures and overrides the behavior of all player pawn instances within the playspace",
    "PlayspaceComponent_PlayerSpawning": "@class UPlayspaceComponent_PlayerSpawning",
    "PlayspaceComponent_PlaysetRootSpawner": "@class UPlayspaceComponent_PlaysetRootSpawner\nPlayspace component that detects when a collection playset is placed and then spawns an AFortPlaysetRoot actor and\nattaches all the actors in the collection to it.",
    "PlayspaceComponent_SidewaysDimension": "@class UPlayspaceComponent_SidewaysDimension",
    "PlayspaceComponent_SidewaysEncounter": "@class UPlayspaceComponent_SidewaysEncounter",
    "PlayspaceComponent_SpatialActorTracker": "@class UPlayspaceComponent_SpatialActorTracker",
    "PlayspaceComponent_SpatialGameplay": "@class UPlayspaceComponent_SpatialGameplay",
    "PlayspaceComponent_VKEditCreativeToolsPermission": "@class UPlayspaceComponent_VKEditCreativeToolsPermission\nChild class of the component so we can set our own defaults where we see necessary.",
    "PlayspaceComponent_VoiceManager": "@class UPlayspaceComponent_VoiceManager",
    "PlayspaceControllerComponent_PlayerSpawning": "@class UPlayspaceControllerComponent_PlayerSpawning",
    "PlayspaceGameStateComponent": "@class UPlayspaceGameStateComponent",
    "PlayspaceGameStateComponent_PlayerSpawningManager": "@class UPlayspaceGameStateComponent_PlayerSpawningManager",
    "PlayspaceSpawningInfo": "@class UPlayspaceGameStateComponent_PlayerSpawningManager",
    "EControlsPrototypes": "@enum EControlsPrototypes\n\nDefines the enumerations for prototypes of various control setups",
    "ECraftingIngredientReqError": "@enum ECraftingObjectState",
    "ECraftingObjectState": "@enum ECraftingObjectState",
    "EFortPhysicsObjectType": "@enum EFortPhysicsObjectType\n\nEnum representing the different types of physics objects",
    "EFortPhysicsSimSize": "@enum EFortPhysicsSimSize\n\nEnum representing a relative size of the physics object.\n\n@note: if you add a new enum please update UFortPhysicsObjectAssetSetupData's constructor and\nalso add new table data Game/Balance/Physics/PhysicsObjectSetupData.uasset",
    "EGlobalWeatherState": "@enum EGlobalWeatherState",
    "EHeldObjectState": "@enum EHeldObjectState",
    "EPoppedTireReactionStates": "@enum EPoppedTireReactionStates\n\nDefines reaction states to a popped tire",
    "ESeatSelectionRule": "@enum ESeatSelectionRule\n\nWhich rule do we use when selecting a seat.",
    "EStashInventoryServiceSyncState": "@enum EStashInventoryServiceState",
    "ETireLocations": "@enum ETireLocations\n\nmap tire index to a human readable tire location",
    "ETireStates": "@enum ETireStates\n\nDefines possible tire states",
    "ETireSurfaces": "@enum ETireSurfaces\n\ntypes of surfaces that tires can be on for different traction behavior",
    "EVehicleClass": "@enum EVehicleClass\n\nused to differentiate behavior between various classes of vehicles",
    "EVehicleSeats": "@enum EVehicleSeats\n\nDefines the enumerations for vehicle seats",
    "BuildingActor:bCollisionBlockedByPawns": "@hack - Remove when physX code gives better alternative - If true, the spawn of the building was blocked by pawns, resulting in the collision being disabled vs pawns",
    "FortHeldObjectComponent:bCollisionBlockedByPawns": "@hack - Remove when physX code gives better alternative - If true, the spawn of the building was blocked by pawns, resulting in the collision being disabled vs pawns",
    "ESubGame.Creative": "@james.tan https://jira.it.epicgames.net/browse/FORT-275503\nAdded after Count so that the size of ABuildingContainer would not change. Creative is not treated as a \"true\" subgame, but is\nused to identify Creative initially so that additional content can be installed if required.",
    "FortGrantedQuestData:QuestExpiration": "@matthew.barry this should go into init data",
    "FortPlayerCameraBase:RCActorCameraClass": "@note: Don't like how this is setup right now, need a better way to support camera modes for plugins",
    "ComponentCacheHelper": "@struct ComponentCacheHelper\n\nHelper struct used to lazily cache components attached to an actor, so we don't have to do a linear search every time they need to be found.\nNote: We're assuming that we'll have a single component per class. If we find that we need to support multiple components for the same class, we'll add that on demand.",
    "AIWeatherData": "@struct FAIWeatherData",
    "ActionDefForUI": "@struct FActionDefForUI\n\nStores the data for UI actions and their labels.",
    "AssembledComponentReferences": "@struct FAssembledComponentReferences",
    "AthenaContentDownloadReplayData": "@struct FAthenaContentDownloadReplayData\n\nStructure that stores an array of all modules to be downloaded from the ValkyrieExternalContentLoader\nThis struct contains an array of FContentDownloadReplayModuleInfo representing the individual modules to be download\nThe IsValid flag is used to version test the ReplayBuffer and helps us invalidate the ReplayData.",
    "CachedRechargeAmmoData": "@struct FCachedRechargeAmmoData",
    "ChaseExternalForce": "@struct FChaseExternalForce",
    "ChaserMarkerPosition": "@struct FChaserMarkerPosition",
    "ChaserPatrolTurnData": "@struct FChaserPatrolTurnData\nReplicated data for smooth turn interpolation while on patrol",
    "ContentDownloadReplayModuleInfo": "@struct FContentDownloadReplayModuleInfo\n\nStructure that stores the module information to download a module from the ValkyrieExternalContentLoader\nThis struct contains the ModuleId as a FString and the ModuleVersion as an int32\nWe also use this struct to serialize to and from the replay bufffer.",
    "ContentDownloadReplayURIInfo": "@struct FContentDownloadReplayModuleInfo\n\nStructure that stores the module information to download a module from the ValkyrieExternalContentLoader\nThis struct contains the ModuleId as a FString and the ModuleVersion as an int32\nWe also use this struct to serialize to and from the replay bufffer.",
    "CraftingFormula": "@struct FCraftingFormula",
    "CraftingIngredientQueryState": "@struct FCraftingIngredientQueryState",
    "CraftingIngredientRequirement": "@struct FCraftingIngredientRequirement",
    "CraftingIngredientUIData": "@struct FCraftingIngredientUIData\nThis exists to map from a set of ingredient tags\nto an item def or an icon for use in displaying crafting formulas in the UI.\n\nNOTE: It is fully expected that you can have multiple entries with the same keys.\n          This would be done in case different plugins introduce different items that\n          satisfy the same key.  For example, maybe S16 adds two \"burning\" items, and\n          S17 adds another one.  The UI would need to handle this display case.",
    "CrashpadDynamicParams": "@struct FCrashpadDynamicParams\nParams from blueprint to control the nativized crashpad bounce behavior.\nThese params change and are passed in for each bounce",
    "CrashpadStaticParams": "@struct FCrashpadStaticParams\nParams from blueprint to control the nativized crashpad bounce behavior.\nThese params stay constant for the lifetime of the crashpad",
    "CustomHighlightingHandle": "@struct FCustomHighlightingHandle\nHandle that points to a specific custom highlighting override, used to identify them when popping from the stack",
    "DirectionalLightWeatherData": "@struct FDirectionalLightWeatherData",
    "ExponentialHeightFogWeatherData": "@struct FExponentialHeightFogWeatherData",
    "FactionData": "@struct FFactionData\n\nThe static information that defines a faction",
    "FortAffiliationActorIdentifierList": "@struct FFortAffiliationActorIdentifierList\n\nList of affiliation components UIDs. Used for replication and get back owners through affiliation manager",
    "FortAffiliationComponentSpecificRelations": "@struct FFortAffiliationComponentSpecificRelations\n\nList of specific relations, UIDs list is replicated to the client while component one is server only. This helps for fast access to components.",
    "FortCharacterCustomizationHandle": "@struct FFortCharacterCustomizationHandle\nHandle that points to a specific character customization so we can push and pop them from an array. Globally unique.",
    "FortCurieCableSocket": "@struct FFortCurieCableSocket\n\nThe struct used to define and manage a cable socket.",
    "FortCurieCableSocketConnection": "@struct FFortCurieCableSocketConnection\n\nThe struct used to store socket attachments",
    "FortCurieCableSocketIdentifier": "@struct FFortCurieCableSocketIdentifier\n\nThe struct used to uniquely identify a socket consisting of a tag and an index.",
    "FortFactionInfo": "@struct FFortFactionInfo\n\nAll factions information used for runtime (includes main game and active plugins)",
    "FortFactionSharedBBInfo": "@struct FFortFactionSharedBBInfo\n\nOwns and manage all the shared BBs the affiliation system has. Each newly created shared BB will have one.",
    "FortGameFeatureGameDataMapping": "@struct FFortGameFeatureGameDataMapping",
    "FortGameFeatureItemsToFullyLoadData": "@struct FFortGameFeatureItemsToFullyLoadData",
    "FortGameFeatureLootTableData": "@struct FFortGameFeatureLootTableData",
    "FortGlobalCurrencyStash": "@struct FFortGlobalCurrencyStash\n\nThe data object that represents what is stored in the inventory service\nfor the global currency a player has. (think bank account of money)",
    "ItemDefToItemVariantDataMapping": "@struct FFortItemDefToItemVariantDataMapping\n\nThe information that defines an item variant data mapping.",
    "FortLootGroupWeightData": "@struct FFortLootGroupWeightData\n\nThe data that defines a weighted entry into the loot group rolling data.",
    "FortRangedWeaponRecoil": "@struct FFortRangedWeaponRecoil",
    "FortRangedWeaponSpread": "@struct FFortRangedWeaponSpread",
    "FortVariantData": "@struct FFortVariantData\n\nThe information that defines a variant.",
    "GlobalCurrencyPhaseEndData": "@struct FGlobalCurrencyPhaseEndData",
    "GlobalCurrencyTrackedData": "@struct FGlobalCurrencyTrackedData",
    "GlobalCurrencyTransactionData": "@struct FGlobalCurrencyTransactionData",
    "GlobalWeatherData": "@struct FGlobalWeatherData",
    "HeightFogAltitudeWeatherData": "@struct FHeightFogAltitudeWeatherData",
    "HeldObjectThrownData": "@struct FHeldObjectThrownData\n\n      Stores data related to a held object being thrown.",
    "HeldObjectMovementReplicatedData": "@struct FHeldObjectThrownReplicatedData\n\n      The replicated data necessary to setup a projectile movement component.\n      @note: This only applies to held objects that have a projectile movement component.",
    "HoldingObjectData": "@struct FHoldingObjectData",
    "ImpulseDamageData": "@struct FImpulseDamageData",
    "ImpulseResponseData": "@struct FImpulseResponseData",
    "InteractionImpulseData": "@struct FInteractionImpulseData",
    "LevelStreamRequestHandshakeState": "@struct FLevelStreamRequestHandshakeState\n\nStructure that stores the current state of whether the most recent\nrequest to start level streaming is complete. SetupLevelStreaming and\nCleanupLevelStreaming do the work to inform the server what the current\nclient's state is.\n\nNote: The server might think the client has finished level streaming if\nSetup's event to the server hasn't been received yet and the server didn't\nmake an explicit request (teleport, respawn, force handshake) that would invoke\nstreaming.",
    "MaterialWeatherData": "@struct FMaterialWeatherData",
    "PhysicsObjectImpactInstigatorData": "@struct FPhysicsObjectInstigatorData\n\nStruct that stores the assigned instigator for when the physics object\nimpacts something (another object, player, etc) to give credit for the damage",
    "PhysicsObjectMovementStateData": "@struct FPhysicsObjectMovementStateData",
    "PhysicsObjectDeactivationSnapshot": "@struct FPhysicsObjectMovementStateData\n\nThis is a *HACK* to get a final snapshot of location/rotation on deactivate\nfrom the perspective of the server.",
    "PhysicsObjectSetupTags": "@struct FPhysicsObjectSetupTags\n\nThe setup tags used to gather all the various physics object data assets",
    "RepGlobalCurrencyStash": "@struct FRepGlobalCurrencyStash",
    "ReplicatedSpawnInfo": "@struct FReplicatedSpawnInfo",
    "SeatTransitionMontage": "@struct FSeatTransitionMontage\n\nThe montage we play when transitioning between seats",
    "SkyAtmosphereWeatherData": "@struct FSkyAtmosphereWeatherData",
    "SkylightWeatherData": "@struct FSkylightWeatherData",
    "TornadoClientSimulationArray": "@struct FTornadoClientSimulationArray",
    "TornadoSimulationData": "@struct FTornadoClientSimulationData\nThe set of actors we need to run the physics simulation against on the client's tick",
    "TurretCosmeticData": "@struct FTurretCosmeticData",
    "AthenaCarPlayerSlot": "@struct FVehicleSeatData\n\nStores the data necessary for a seat on a vehicle.",
    "WindWeatherData": "@struct FWindWeatherData",
    "FortPhysicsObjectBaseDamageOverrides": "@struct UFortPhysicsObjectBaseDamageOverrides\n\nUsed to override the base damage values in the component's ImpactDamageData",
    "PartyMemberCampaignHero": "@todo DanH FortParty: This info assumes that we have the mcp profile for this player available. So if we have their profile, why aren't we just watching it directly for changes to their primary hero?\n               By relying on this instead of the profile itself, we introduce a race condition, wherein we may be finding out about the party member's intended hero before it's actually official.\n               That's why we have to send the exact instance ID for looking up the item...",
    "FortPlayerCameraBase:CameraBlendStack": "@todo Do we need one of these per viewtarget? use a tmap?",
    "FortPlayerPawn:bIsSwimmingAnimLayerLinked": "@todo jose.villarroel: Temporary until we move all swimming logic out of player anim bp.\n      true if swimming anim layer is currently linked.",
    "FortProceduralFoliageComponent:GlobalFoliageSpawnerSet": "@todo this should be in DefaultGameData instead",
    "FortValidationData:ValidationObjectTypes": "@todo: Change EFortItemType to FPrimaryAssetType (Kept as EFortItemType since UI Dropdown for FPrimaryAssetType doesn't show Badges)\nArray of item types to validate",
    "DeployableBasePlot:DeployableBaseCoreClass": "@todo: Evaluate if this is valid when cores are officially being implemented. Class to use as the core",
    "DeployableBasePlot:PlotInventory": "@todo: This will need to be populated by the occupants account data in the future",
    "FortGeneratedEncounterOption:RangeLerpValue": "A 0-1 value that is used by range based encounter difficulty options",
    "FortGeneratedMissionOption:RangeLerpValue": "A 0-1 value that is used by range based encounter difficulty options",
    "FortCommonMatchmakingData_State:MatchmakingTransaction": "A 3-Phase Commit is required to change from NotReady to anything else. This will expand to a more comprehensive state machine",
    "FortAIDirectorDataManager:FactorsBeingTracked": "A Cached array of which factors are being tracked for querying without having to recreate every time",
    "EFortItemType.ChallengeBundle": "A Challenge Bundle is a list of quests with a description and an overall completion criteria, with optional rewards for completion",
    "FabricChildActorComponent": "A ChildActorComponent with Fabric-specific utility functions",
    "FortControllerComponent_QuickHeal": "A Controller component for classes dereived from AFortPlayerControllerGameplay\nControls Quickheal logic",
    "FortControllerComponent_Ghost": "A Controller component for classes dereived from AFortPlayerControllerGameplay\nMakes it easy to enter/exit ghost mode, also allows for auto-enter ghost most when DBNOed",
    "FortControllerComponent_ConversationHistory": "A Controller component for users wishing to store information about\nconversation based interactions they have had with other actors in the world\nand provide a centralized way to query against that data set\nState valid for server side access.",
    "FortConversationContextRequirement": "A Conversation context requirement which couples a controller requirement with\nparameters indicating which conversation participant the requirement is directed at",
    "ConversationParticipantRequirement": "A Conversation context requirement which wraps a controller requirement alongside\nparameters indicating the conversation participant to check, and various fields\nwhich allow control of behaviour/feedback, if that requirement is not met.",
    "ManagerParticipantSubsetID": "A FManagerParticipantSubsetID allows a single manager implementing the QuestManager interface, to manage *multiple* unique sets of\nparticipants to which quests can be granted, by assigning unique IDs to each subset.\n\nID's are context specific to any given manager, but always represents a unique group of participants that granted quests can be\nscoped to within the scope of that single manager.\n\nAny single ID is not necessarily globally unique across different managers ('1' could be widely used for example by multiple\nmanagers to represent different participant subsets - 'squad 1' for a squad manager, or 'bounty event 1' in a bounty quest manager)\n\nThe ID is implemented as a simple uint32 under the hood. FManagerParticipantSubsetID offers a variety of methods to assist in\ninitializing this uint32  from integer, name (hashed), or gameplay tag (hashed from string) depending on the contextual\nrequirements of the implementing manager",
    "FabricScreenComponent": "A FabricScreenComponent holds screen logic and knob positioning information.",
    "PendingSpawnInfo:PendingSpawnInfoGuid": "A GUID for identifying this pending spawn info",
    "CreativeFunctionalTest:SpatialGameplayActor": "A GameplayVolume or FortVolume that is containing this test.",
    "HUDWidgetException": "A HUD Widget Exception is used to deactivate a widget in the HLT with a CVAR (to let QA test new feature)",
    "HUDWidgetBehaviorExtensionsRegistryEntry": "A HUD Widget Registry entry that contains Behavior Extensions and, to which Behavior they should be appended.",
    "HUDWidgetBehaviorRegistryEntry": "A HUD Widget Registry entry that defines a behavior class and links it to the Widget it overrides.",
    "HUDWidgetRegistryEntry": "A HUD Widget Registry entry that defines the Widget's classes and property Models.",
    "MinigamePlayerPersistentStartPoint": "A MinigamePlayerPersistentStartPoint is a data structure that contains\na stored location and rotation, an ID to identify which player stored it,\nand a boolean to identify if the player has already consumed it.\nThese are created when a player loads data from FortCreativePersistenceComponent",
    "FortRewardActivity": "A Reward activity that matches rewards to the activity that caused them",
    "FortAthenaLivingWorldManager:RuntimePointProviderOwners": "A Set of runtime point providers owners to prevent generating multiple providers per owner",
    "EUIExtensionSlot.CustomMinigameCallouts": "A Space to put custom minigame Callouts",
    "CreativeEditOnlyMeshComponent": "A StaticMeshComponent that only exists while in Creative Edit mode. Assets are async loaded when in use\nand references are cleared to allow for garbage collection when not in use (i.e. during Play mode).",
    "FortCreativeIndexedObjectRegisterComponent:RegisterTag": "A UID for this register. When interacting with a register, you provide a tag and matches it with this tag.",
    "TileGroupInfo:TileGroup": "A WorldTileGroup",
    "FortAlwaysRelevantReplicatedActor": "A base class for replicated actors that are always relevant.  This is to give Replication Graph some control/visibility into one off blueprinted actors that are always relevant. Use this instead of basing an blueprint off of Actor.",
    "FortStaticReplicatedActor": "A base class for replicated actors that do not move.  This is to give Replication Graph some control/visibility into one off blueprinted actors, as well to maintain a single common NetCullDistanceSquared value that can be set for all of them.",
    "SpeedScaledAxisOffsetData:BaseOffset": "A base value that is added to the total offset after all calculations have been performed. Is applied before OffsetModifier.",
    "EFortItemType.AthenaBattleBus": "A battle bus replacement cosmetic",
    "FortPartyBeaconClient": "A beacon client used for making reservations with an existing game session",
    "FortSpectatorBeaconClient": "A beacon client used for making reservations with an existing game session",
    "FortLobbyBeaconClient": "A beacon client used for quality timings to a specified session",
    "ValkyrieBeaconHost": "A beacon host to handle fast editing requests from the editor client",
    "FortPartyBeaconHost": "A beacon host used for taking reservations for an existing game session",
    "FortSpectatorBeaconHost": "A beacon host used for taking reservations for an existing game session",
    "FortWeaponModBucket": "A bucket of different mod sets, each with their own weight of being chosen.\nDifferent weapons can be assigned to a bucket by adding the bucket's tag (ModSetBucket.) to the WID's tags.\nBuckets reference mod set assets, so mod sets can be shared across weapons.\nDesigners can define a weapon specific bucket, or a weapon class bucket, depending on the tag.\nA weapon can only have 1 bucket of potential mod sets though.",
    "BuildingPropMusicPlayer": "A building prop designed to play through a set of music files\n\n      The goal of this prop is to only have a single music file streaming at a time\n      and as we switch songs we'll unload the previous asset and async load in the\n      new asset.",
    "BuildingProp_DestructionObject": "A building prop for objective objects",
    "BuildingProp_VendingMachine": "A building prop that supports removing inventory",
    "BuildingProp_CaptureItemSpawner": "A building prop that supports spawning/tracking a single pickup item",
    "BuildingProp_ClassSelector": "A building prop that supports switching interacting players to a specific class slot",
    "BuildingProp_CaptureArea": "A building prop that supports:\n      - Items Capture\n      - Overlapping handle\n      - Inventory changes\n      - Capturing States\n      - Team Switch",
    "BuildingPropBigHealth": "A building prop with an int64 health amount, meant to be driven by mesh daddy",
    "AssembledMeshUserComponent:MeshPartComponents": "A cache of all the components we map. Use GetMeshPartComponentByTag to retrieve a specifi part if needed.",
    "CreativeEditOnlyMeshComponent:CachedMesh": "A cached reference to the loaded mesh (either Preview Mesh or Edit Mesh) so it doesn't get GC'd.",
    "FortPlayerStateAthena:TeamMemberState": "A cached version of ReplicatedTeamMemberState that allows us to hold the UI display longer than the variable will remain non-None\nNOTE: This is what UI should use",
    "StaticPathCalendarSplinePointGroup": "A calendar event can control more than a single spline point on the master path. this defines the range of spline points\n      that a calendar event should control.",
    "GasDebugReplicatableCallStack": "A call stack that can be sent between local client and server. Native callstack only works if client/server are the same build because they are raw process counter pointers,\ndue to extreme processing lag making it dangerous to retrieve callstack strings on servers.\nTODO: Threaded callstack retrieval could work",
    "ECaptureState.Neutralizing": "A captured zone's progress is being depleted by another team",
    "EFortItemType.ChallengeBundleSchedule": "A challenge bundle schedule is a list of challenge bundles that are granted either when the schedule is obtained or at some scheduled point in the future",
    "FortCharacterMovementMutatorComponent": "A character component that can implement custom movement modes beyond EFortCustomMovement.\nAutomatically created per pawn by AFortCharacterMovementMutator.",
    "FortGravityGunHolder:RingPivotComponent": "A child of the root component.",
    "FortDynamicRollBaseWeightTableRow:MinModifiedWeight": "A clamp for the lowest possible weight after all modifications.",
    "FortDynamicRollBaseWeightTableRow:MaxModifiedWeight": "A clamp for the maximum possible weight after all modifications have been made.\nNegative weights here will use the largest float as a maximum.",
    "FortClassTrackerComponent": "A class tracking component to do additional local filtering",
    "FortUIProxyActor": "A class used to display attributes without changing the real actor's base values or creating another real actor. This may be used for creating temporary instances for tooltips.",
    "FortAIProxyActor": "A class used to display player attributes without changing the FortPlayerState's base values. Used as the target for damage queries.",
    "FortPlayerAttributesProxyActor": "A class used to display player attributes without changing the FortPlayerState's base values. Used in the hero selection screen.",
    "FortThreatParticleActor": "A code base class for the threat particle Blueprint",
    "EIndexNavigationResult": "A code indicating the result of an index navigation attempt.",
    "FakeKillRelevancySupergroup": "A collection of RelevancyGroups who will remain relevant to each other during the current phase",
    "UIStateRelay:AvailableBatons": "A collection of batons representing responsibilities that may be transferred during the transition",
    "UIStateChartContextChangeSet": "A collection of changes that can be applied to a State Chart Context.\nIf a value is empty then the change is treated as a \"clear\".",
    "FortScriptedObjectMovement_WorldPhaseSite": "A collection of phases and their associated structures",
    "FortTooltipValueData:StateTags": "A collection of tags that tell information about the state of the value",
    "FortRewardReport": "A complete reward report, that describes rewards granted over a certain period of gameplay",
    "SpecialEventCursorPawnComponent:InputHelperComponent": "A component on the pawn, used for helping us to gather controller input.  Only valid on owning client.",
    "MutatorPlayerSettingsData:ScopeSettings": "A component owning",
    "SpecialEventRewindComponent_PlayerPawn": "A component that can record various data about a player pawn over time, and can apply the data back to the pawn during rewinding.\nAn AFortCharacterMovementMutator is necessary for handling the pawn movement (EMutatorMovementMode::Rewind).",
    "SpecialEventRewindComponent": "A component that can record various data about an actor over time, and can rewind through the data.\nProvides the structure and handles the core functionality of recording and rewinding, but performs no work on the owning actor.\nIntended to be used as a base class, not by itself.\nDerived classes are expected to:\n1. Have a corresponding derived FSpecialEventRewindComponentRecording struct with data pertinent to the owning actor type.\n2. Have two recording UPROPERTYs of the derived struct type - one for local recording, and one for replication (bIsPushBased = true).\n3. Implement the virtual functions in the Derived Class section below.",
    "SkyfireBackpackComponent": "A component that contains native functionality for the Skyfire Backpack",
    "FortControllerComponent_AugmentDynamicRollPlayerComponent": "A component that exists on the player to facilitate dynamic rolls. This is where the modifiable list of rolls live (in the base implementation). This can also\nhook into player specific delegates, so that we don't have the game state component listening to events for each player and figuring out where to route the data.\nThis mostly exists to handle any augment specific needs that shouldn't be handled in the base dynamic roll system.",
    "EncounterMobManagerComponent": "A component that handles the initialization, lifetime, and clean up of mobs that are a part of Encounters.",
    "PlayspaceComponent_LipSyncAssetManager": "A component that know what lipsync anim should be played per player.",
    "FortItemEntryComponent": "A component that wraps an item entry. This component can be used to persist item data on actors in the world.",
    "RegisterWithMutatorComponent": "A component to add to actors to register the actor with any mutator that implements IRegisterWithMutatorComponentManager",
    "FortCameraModeOverrideComponent": "A component used to override the camera mode used when this component is the player's view target",
    "OrbSpawnerConfigByCategory": "A config value that may be different depending on the active category (i.e. playlist).",
    "EventChannelState": "A consistent state of a given channel",
    "UIStateChartContextCondition:ComparisonConstant": "A constant to compare with the context value if a comparison type is indicated",
    "EFortItemType.AthenaConsumableEmote": "A consumable emote is a consumable animation (taunt or special dance)",
    "FakeKillRelevancyBucket": "A container for RelevancyGroups that are mutually relevant to each other at the start of a phase,\nbut will be split into two or more mutually irrelevant supergroups by the end of the phase",
    "UIStateChartTransitionOperationParameters": "A container for data exposed to State Components during a Transition Operation\nState Components may use this data to influence their load/unload process.",
    "BeginGroupTeleportParams": "A container to hold all of the parameters of the BeginGroupTeleport function",
    "UtilityContribution": "A contribution to a utility",
    "BuildingPoolHarvestResourceSpawnsData:FortEffectContextCopy": "A copy of the Gameplay Effect Context that triggered the last attempt to spawn harvest resources.\n     This data is needed by FBuildingSMActorAttemptSpawnResourcesParams which normally keeps holds the data as a raw pointer, but since we need the data over multiple frames we copy it.\n     Attempts to use a shared pointer instead of a copy failed -- the ability system would over-zealously attempt to destroy the shared pointer while we still had a reference which caused an error.",
    "ReroutePlayerEventQueueEntry:GameplayEventData": "A copy of the GameplayEventData parameter to OnGameplayEvent()",
    "ReroutePlayerEventQueueEntry": "A copy of the parameters from OnGameplayEvent() for a gameplay event that we were looking for.\nQueued in OnGameplayEvent().  Processed in FlushQueue() on the next tick.",
    "FortAthenaMutator_Chrome:GameMsg_RaceCountdownMessage": "A countdown message that is show right before the race begins!",
    "BuildingProp_CaptureItemSpawner:ItemRefCount": "A counter for tracking the number of references to our spawned item",
    "FortPlayerControllerGameplay:WantedFlightSpeed": "A creative option variable that we tie to a Creative Option. Informs that we should try to apply flight speed multiplier when applicable.",
    "FortPlayerControllerGameplay:WantedUIMetricsDisplay": "A creative option variable that we tie to a Creative Option. Informs that we should try to apply thermometer display mode when applicable.",
    "FortPlayerControllerGameplay:WantsToBeInvulnerable": "A creative option variable that we tie to a Creative Option. Informs that we should try to become invulnerable whenever we can.",
    "FortCreativeMoveTool:WantsAutoTractorBeam": "A creative option variable that we tie to a Creative Option. Informs that we should try to change auto tractor beam when we can",
    "FortPlayerControllerGameplay:WantsToGhostMode": "A creative option variable that we tie to a Creative Option. Informs that we should try to enter ghost mode whenever we can.",
    "FortCreativeEditCameraController:WantsToImmersiveEdit": "A creative option variable that we tie to a Creative Option. Informs that we should try to enter immersive edit mode whenever we can.",
    "FortPlayerControllerGameplay:WantsToSwapPhoneAndHarvestHold": "A creative option variable that we tie to a Creative Option. Informs that we should try to swap the phone and harvest tool input holds.",
    "FortHexMapCoord": "A cubic coordinate system for defining a hex map location",
    "FortMutatorMusicEventPlayInstance": "A currently active music event.  We allow two of these for crossfade effects.",
    "FortMotorSimComponent_SurfaceModifier:Surfaces": "A curve for each surface",
    "FortAthenaMutator_Uranium:PercentToMoveRespawnTowardCartViaTeamSize_DefenderTeam": "A curve table entry used to move the respawn location closer to the push cart based on how many fewer players the defenders have compared to the pushers\n All values should be between 0 and 1.0\n Example: # Pushers=5 # Defenders=5  Uses entry 0. Pushers=5 Defenders=3  Uses entry 2. Pushers=1 Defenders=5  Uses entry 0",
    "FortAthenaMutator_Uranium:PercentToMoveRespawnTowardCartViaTeamSize_PusherTeam": "A curve table entry used to move the respawn location closer to the push cart based on how many fewer players the pushers have compared to the defenders\n All values should be between 0 and 1.0\n Example: # Pushers = 5 # Defenders = 5  Uses entry 0. Pushers = 5 Defenders = 3  Uses entry 0. Pushers = 1 Defenders = 5  Uses entry 4",
    "OverrideMovementCurveData:BrakingDecelerationRunningCurve": "A curve that defines the braking deceleration factor as a function of input angle (0 is forward) when in Running movement style.",
    "OverrideMovementCurveData:BrakingDecelerationSprintingCurve": "A curve that defines the braking deceleration factor as a function of input angle (0 is forward) when in Sprinting movement style.",
    "OverrideMovementCurveData:BrakingDecelerationTacticalSprintingCurve": "A curve that defines the braking deceleration factor as a function of input angle (0 is forward) when in Sprinting movement style.",
    "OverrideMovementCurveData:BrakingDecelerationWalkingCurve": "A curve that defines the braking deceleration factor as a function of input angle (0 is forward) when in Walking movement style.",
    "NyxGlassWeaponComponent_Swinging:AttackAccelerationCurve": "A curve that defines the current acceleration when in the attack state.",
    "NyxGlassWeaponComponent_Swinging:InitialAccelerationCurve": "A curve that defines the initial acceleration based on time.",
    "NyxGlassWeaponComponent_Swinging:SpeedBasedOnHeightCurve": "A curve that defines what speed values should be used based on current height.",
    "FortNDCImpactInfo:Damage": "A damage amount to feed into the impact FX handler. This may in future come from the weapon data itself but currently we define manually here.",
    "EFortItemType.AthenaDance": "A dance is a persistent equipable emote and you always have at least one available",
    "UIStateChartContextCondition": "A data representation of a condition to be evaluated against a specific entry in the State Chart Context.",
    "EGameModePauseWarmupMaskId.Debug": "A debug cheat or start-up setting is keeping the warmup phase paused.",
    "GasDebugAbilitySnapshot": "A debug info snapshot of an ability",
    "GasDebugEffectSnapshot": "A debug info snapshot of an effect",
    "EFortBuildingType.Deco": "A decorative item with no collision or physics",
    "AlterationSlot:SlotInitIndex": "A default alteration specified by index into choices.",
    "FortSpectateAFriendController:DefaultCameraLocation": "A default location on the starter island where we can keep the spectator in place until they find a suitable player to follow.",
    "EDynamicFoundationEnabledState.Unknown": "A default state that is neither enabled or disabled so that regardless of what changes on the server manipulate a start enabled foundation as part of begin play, the actual state gets replicated",
    "FortAthenaMutator_TDM:OnPlayerStandingsChanged": "A delegate that is fired whenever the score of any player in the match changes. The data provided by this\ndelegate should not be stored or trusted after the frame in which it is received as it may no longer be accurate.",
    "MediaMusicTimelineGenerator:OnStopped": "A delegate that is invoked when a media source has been closed.",
    "MediaMusicTimelineGenerator:OnStarted": "A delegate that is invoked when playback has reached the end of the media.",
    "EpicArtApp:AppDelegate": "A delegate to manage running a Python callback when menu item is clicked",
    "FactionData:Description": "A description for the faction",
    "FortActorOptionsComponent:Internal_OptionsDescription": "A description of what the Toy and it's corresponding Toy Options do\n@note If Internal_PlayerOptions is null then we'll attempt to get the data from the FUserOptionDefinitionContainer on the owner actor class",
    "BuildingProp_BountyBoard": "A destructible building that can grant a bounty quest via a conversation when interacted with.",
    "FortTooltipValueData:ExplanationText": "A detailed explanation of what this value does. This may be empty for some values",
    "EConsoleAuthLinkState.OtherEpicAccountLinked": "A different epic account is already linked to this console auth",
    "EFortBuildingType.SpawnedItem": "A dynamically spawned item",
    "CubeMovementStaticPath:CubeSpacingFactor": "A factor of 10 means each node is roughly 10 cubes distance to the next point.\n      This may not always be true however, but it is what the generation attempts to do.",
    "FortFeedbackActionBankDefined": "A feedback bank data defined action",
    "FortFeedbackEvent": "A feedback event to be processed",
    "NPCQuestRow:OptionalFilterCategoryTag": "A filter category for more complex quest setups, where only a subset of available quests may be shown at any one time e.g. \"Exploration\" \"Combat\" \"Resource\"",
    "NPCSaleInventoryRow:OptionalFilterCategoryTag": "A filter category for more complex sale setups, where only a subset of available items may be shown at any one time",
    "CatalogOfferDefinition:MatchFilter": "A filter string to match this catalog item for queries (usually for dynamically generating storefronts)",
    "BuildingProp_BountyBoard:TargetFilter": "A filter used to ignore invalid bounty targets.",
    "BuildingProp_DeimosSpawner:bSpawnTimingOverrideEnabled": "A flag that enable/disable the override of the spawn timing override",
    "BuildingProp_DeimosSpawner:bNoSpawnLimitEnabled": "A flag that will override the settings of the pawn limit to -1 if true, indicating no limit to the number of spawns",
    "FortTimeOfDayCurve_Float:FlatValue": "A flat float value for any time of day used when the curve isn't specified",
    "FortTimeOfDayCurve_LinearColor:FlatValue": "A flat linear color value for any time of day used when the curve isn't specified",
    "FortTimeOfDayCurve_Vector:FlatValue": "A flat vector value for any time of day used when the curve isn't specified",
    "FortTimeOfDayCurve_Float:Curve": "A float curve based on time of day [0-24]",
    "NativeDayPhaseFloats": "A float for each phase of the day",
    "BuildingStairs": "A floor with height",
    "SpecialEventRewindComponentFrame_PlayerPawn": "A frame of recorded player pawn location/rotation data",
    "FortPlayerController:PreviewAbility": "A gameplay ability that we're about to execute. Use this to display cost information",
    "MashAISpecialEncounterData:InitialGameplayEffectByPlayerCount": "A gameplay effect from this array will be applied to the AI when they spawn. Which GE is applied is based on the player count (0 index = 1 player, 1 index = 2 players, etc)",
    "LevelInstanceGameplayVolume": "A gameplay volume that handles tracking actors to be saved out into a separate level instance record",
    "FortCreativeMoveTool:ServerSelectedActorLogicalConnections": "A generated list of of Logical Connection chains. This can be used to validate selected actor placement validity before spawning.\n              Only valid on the server.",
    "EFortCustomPartType.Gameplay": "A generic part used for gameplay important items, such as gauntlets.",
    "SpecialRelevancyMultiSquadControllerGroup:Controllers": "A group of controllers that are a subset of a FSpecialRelevancyGroup's Controllers",
    "AthenaAwardGroup": "A grouping of awards from a single source",
    "StateTransitionPauseRequestHandle": "A handle for a Pause Request (for State Transition Controllers)!\n\nYou can split the request amongst many blueprint by copying this handle around, or transfer the request by copying and then\nresetting the handle.",
    "FortDayPhaseCallbackHandle": "A handle to a registered day night callback",
    "FlightParams:MatchingTorqueCap": "A hard cap on how much torque this vehicle is able to apply on itself in order\n              to match the target heading and roll.",
    "GameplayEffectApplicationInfoHard": "A hard reference version of FGameplayEffectApplicationInfo",
    "FortClientEventName": "A helper client event name struct. Uses FFortClientEventNameCustomization.",
    "FortMissionEventName": "A helper mission event name struct. Uses FFortMissionEventNameCustomization.",
    "MultiItemReplicationProxy": "A helper struct that is used to replicate changes to various values on the owning multi-item to\n   the client all at once, rather than replicating multiple individual values.",
    "PersistenceFrameworkRootArea_NameToModuleMap": "A helper struct to define type.",
    "FlightParams:RollPerHeadingDiff": "A higher number means harder roll per turn.\n\n              Percent roll per percent heading diff. For example, if the target heading is\n              oriented at 90 degrees relative to the current heading, then heading diff is\n              100%. If they are perfectly aligned, then it is 0%. A roll angle is calculated\n              from the target heading direction, and TargetRollPerHeadingDiff and the target\n              heading diff magnitude are used to compute a blend parameter between control\n              frame's up and the \"full\" roll angle.",
    "BuildingProp_AISpawner": "A interactive, standalone building piece",
    "BuildingProp_Quest": "A interactive, standalone building piece",
    "FortCreativeDeviceProp": "A interactive, standalone building piece used for creative devices.",
    "ContextSetterClearEntry": "A key for the value to be cleared from the State Chart Context.",
    "RadiusTrackingGroupKey": "A key used by the map UFortGameStateComponent_RadiusTracker::RadiusTrackingInfos to organize Radius Tracking Data\n    The key is generated based on 1) the players that are tracking and 2) the ERadiusTrackingGroupingType.\n    This keying allows the same target to have multiple groups tracking them where members of the same group see the exact same tracking info, but members of different groups see different info.",
    "ContextSetterSetEntry": "A key-value pair to be set in the State Chart Context.",
    "HomebaseNodeDisplayData:LargePreviewImage": "A large image to show in a detailed view or other place.",
    "FortPlayerStateComponent_PlayerAugmentSystem": "A light weight and simple system for player augment perks.\n   NOTE: before changing this, consider if your feature is needed for all Fortnite game modes (br/creative/etc.)\n   Different game modes may use perks in different ways. This is a general purpose system. So ideally this class doesn't need to get much more complex than it is.\n   Instead, game mode specific features may be more appropriate to place in the components using the augment system in their own way.\n   For example, see UFortBattleRoyalPlayerAugmentSystem. It specifically does not use this component via inheritance.",
    "DynamicXpCreatorAccoladeTuning:MaxWeightPercentage": "A limit on the Weight % for this Accolade.\nFinalWeight% = MIN(Weight%, MaxWeight%)\nAlso used to compute the maximum amount of XP this Accolade can grant each time it is triggered.",
    "FortItemViewSettings:ZoomRange": "A limiter on what zoom levels are allowed.\nThe view at different zoom levels is a straight LERP/SLERP of the calculated location/rotation at uncapped minimum and maximum zoom levels.",
    "EFortFeedbackAddressee": "A line of feedback can address pawns with these roles in the event",
    "FortTimeOfDayCurve_LinearColor:Curve": "A linear color curve based on time of day [0-24]",
    "FortSoundLibraryPlaybackSettings:PitchMultiplier": "A linear scalar multiplied with the pitch",
    "FortSoundLibraryPlaybackSettings:VolumeMultiplier": "A linear scalar multiplied with the volume, in order to make the sound louder or softer",
    "FortMovementComp_Character:UseHighToleranceIds": "A list of IDs for every caller that wants to use the higher position tolerance (bUseHighTolerance).",
    "FortWeapon:FeedbackLineActionIdsToDim": "A list of KeyActionId related to feedback lines that will be hidden",
    "FortPawnComponent_Convert:ConverterSpecificAbilitiesAddedToConverted": "A list of abilities a converter can give the converted if any tags on the converted match",
    "FortOutpostCoreInfo:AccountsWithEditPermission": "A list of account ids (GUIDs) with edit access",
    "ValkyrieAllowedAssetType:Rules": "A list of actions that are allowed to be performed on an asset type",
    "ValkyrieEditorPermissionSettings:PropertySaveClassPermissionList": "A list of additional properties used to validate properties during saving.",
    "ValkyrieEditorPermissionSettings:PropertySaveStructPermissionList": "A list of additional properties used to validate properties during saving.",
    "FortKatanaDashTargetingInfo:DamagedActors": "A list of all actors that were damaged or destroyed by the dash (not including the dash blocking actor).",
    "ValkyrieEditorPermissionSettings_Animation:AnimationBlueprintBaseFunctionOverridesAllowList": "A list of all base Animation Blueprint functions can are allowed to be overridden",
    "WorldMapPinManager:CurrentPins": "A list of all currently spawned pin actors",
    "FortBuildingAddStructuralSupportComponent:AddedStructuralBuildingActors": "A list of all of the buildings added by this component.\n     Is used to destroy all of the added buildings when the owner building is destroyed",
    "AutoAimWeaponPawnComponent:MultiSocketTargetingBoneSegmentDatas": "A list of all of the sockets to use for auto targeting.",
    "FortAIPawn:AppearanceOverrideEntries": "A list of appearance overrides for this character (temporary until we do character customization in the future).",
    "FortAthenaMutator_ItemDropOnDeath:ItemsToDrop": "A list of arbitrary items to drop on death before respawning",
    "FortAthenaMutator_Mash:AISpecialEncountersBySafeZoneIndexMap": "A list of available AI special encounters (as they appear in AISpecialEncounterOptionsMap) keyed by safe zone index.",
    "FortGameModeAthena:AliveBots": "A list of bots still in match.",
    "ValkyrieEditorSettings:ValkyrieLogCategories": "A list of categories to display when the \"Show Output Log\" button is pressed in the Valkyrie status bar extension",
    "FortCloudSaveInfo:SavedRecords": "A list of cloud save records",
    "IntensityData:ExceptionEditModes": "A list of edit mode patterns that will be given the ExceptionEditModeWeight",
    "ValkyrieEditorPermissionSettings_Editor:AllowedImportExtensions": "A list of extensions that can be imported",
    "FortClassTrackerComponent:ExcludeActorTags": "A list of gameplay tags that will prevent an actor from being added",
    "FortObjectiveBase:ItemsToGiveOnObjectiveStart": "A list of items to grant to the player when the objective starts",
    "ContextSetterChanges:ValuesToSet": "A list of key-value pairs that will be set.",
    "ContextSetterChanges:ValuesToClear": "A list of keys for values that will be cleared.",
    "FortAthenaMutator_ItemDropOnDeath:LootTierGroupsToDrop": "A list of loot tier groups from the playlist's loot table to drop on death",
    "ValkyrieEditorPermissionSettings_Editor:AllowedEditorModes": "A list of mode IDs that should be exposed to the UI (primarily the level editor dropdown)",
    "BuildingProp_BountyBoard:PawnsInInteractRange": "A list of pawns for which the interaction text needs to be updated.",
    "FortOutpostCoreInfo:PlacedBuildings": "A list of placed buildings",
    "FortGameMode:ConnectedPlayerControllers": "A list of players and spectators still connected.",
    "FortGameModeAthena:AlivePlayers": "A list of players still in match.",
    "FortSubscriptionInfo:Progressables": "A list of progressables",
    "ValkyrieEditorConfig:TrustedProjectIds": "A list of project ids that are deemed safe to open (created locally, synced from source control, previously opened)",
    "ValkyrieEditorConfig:AdditionalProjectPaths": "A list of projects to display outside of the normal search locations (ones found using Browse)",
    "ValkyrieEditorPermissionSettings:HiddenPropertyClassPermissionList": "A list of properties not visible to users that is used during validation of classes, e.g. during saving.\nNote: AllowListing a property in a parent class automatically AllowLists that property in all of its child classes. It can be DenyListed in child classes if desired.",
    "ValkyrieEditorPermissionSettings:HiddenPropertyStructPermissionList": "A list of properties not visible to users that is used during validation of structs, e.g. during saving.",
    "ValkyrieEditorPermissionSettings:PropertyEditorStructPermissionList": "A list of properties to show for the specified UScriptStructs in all details views.",
    "ValkyrieEditorPermissionSettings:PropertyEditorClassPermissionList": "A list of properties to show for the specified classes in all details views\nNote: AllowListing a property in a parent class automatically AllowLists that property in all of its child classes. It can be DenyListed in child classes if desired.",
    "FortRewardReport:RewardActivities": "A list of reward activities. Always has at least one for General",
    "ValkyrieEditorSettings:EditorPermissions": "A list of roles that must be validated in order to unlock the functionality defined in the linked permissions JSON file",
    "FortSplineGroundPath:EvenlySizedSegments": "A list of segments that correspond with our replicated points except these segments are evenly sized segments (roughly) that make up the curve.",
    "WrapPreviewGridActor:ListOfActorsToSpawn": "A list of specific actors to spawn and apply wraps to",
    "FortSavedModeLoadout:SelectedGadgets": "A list of template names of gadgets the player has selected",
    "FortPlayerController:UpdatedObjectiveStats": "A list of updated objective stats, these are used in the UI if available",
    "FortAthenaMutator_Bismuth:ValidDeathReasons": "A list of valid death reasons to trigger a reflect kill from the AI bot to the player.",
    "AutoApplyWeaponModData:ApplicableWeaponTags": "A list of weapons that can use this FAutoApplyWeaponModData entry.",
    "EFortItemType.AthenaLoadingScreen": "A loading screen displayed when loading into or out of an athena map",
    "FortCreativeMoveTool:ConnectedActorStates": "A location to dump placement states and have them visually updated on clients. Maps Actors to placement validity.",
    "PendingSpawnInfo:SpawnLocation": "A location to spawn the enemy. Used when SpawnPoint is NULL",
    "BuildingGameplayActorSpawnMachine:InteractSoundCueLoop": "A looping interact sound cue during interact",
    "BuildingContainer:SearchingSoundCueLoop": "A looping searching sound cue during search",
    "FortAthenaSupplyDrop:SearchingSoundCueLoop": "A looping searching sound cue during search",
    "EFortItemType.AthenaSeasonTreasure": "A loot chest used in season rewards (potentially distinct from card packs as we show the loot table for these items past a certain point in the season and they may be draw without replacement)",
    "BuildingContainer": "A lootable container",
    "KeepItemContainer": "A lootable container that keeps track of handed out items, can take them back, and can be reset on demand",
    "FortExposedAsset:CustomAliases": "A manually-defined list of aliases to display this asset as. Aliases should exist within the same plugin as the ExposedPath, but the folder and asset name can be modified.",
    "FortItemEntryAbilityData:AbilityCooldownMap": "A map <ability cdo pointer, cooldown end time> to keep track of any ability that is on cooldown when this item is dropped and picked back up.",
    "FortCreativeMoveTool:PreviewToOriginalActors": "A map indexed by preview actors that points to the source actor so that function\\Events can be duplicated to new devices.",
    "FortWeaponRangedDualSwing:OverrideSwingingControlParams": "A map of SwingingControlParams that is set on the owning player's movement component. These can be switched between on the\n    owning client by calling SetActiveOverrideSwingingControlParams.",
    "SkyfireBoundGameplayEvents": "A map of all bound gameplay events to their handles for a player.",
    "BuildingPoolHarvestResourceSpawnsComponent:PoolHarvestResourceSpawnsByInstigatorPawnMap": "A map of all harvest resource spawn pools for our owning building keyed by instigator pawn.",
    "FortMantisTechniqueData:DynamicMontages": "A map of animation montages that should be dynamically selected from if the AnimationType is DynamicMontage. UFortGameplayAbility_Mantis::GetDynamicMontageNameForTechnique\n              will return the FName that maps to the montage that should be used. If GetDynamicMontageNameForTechnique fails or is not implemented, DefaultDynamicMontageName will be used.",
    "FortGameStateAthena:BusDriverMessages": "A map of bus driver thank you messages.",
    "FortGameplayMessageDispatcherComponent:ReceiverChannelList": "A map of channel ids to lists of receivers",
    "FortGameplayMessageDispatcherComponent:TriggersChannelList": "A map of channel ids to lists of triggers",
    "FortMantisTechniqueMetadata:FloatValues": "A map of gameplay tag to metadata float values.",
    "FortMantisTechniqueMetadata:IntValues": "A map of gameplay tag to metadata integer values.",
    "FortMantisTechniqueMetadata:StringValues": "A map of gameplay tag to metadata string values.",
    "FortMantisTechniqueMetadata:VectorValues": "A map of gameplay tag to metadata vector values.",
    "KatanaTargetingComponent:PrimaryAttackVariationInfos": "A map of primary variations to their configuration info.",
    "FortItemEntryTaggedFloatData:TaggedFloatMap": "A map to store any integer values that an item may need when dropped and restore them when picked back up.",
    "FortItemEntryTaggedIntegerData:TaggedIntegerMap": "A map to store any integer values that an item may need when dropped and restore them when picked back up.",
    "FortControllerComponent_Interaction:InteractionTagHistory": "A mapping of all the target tags and how many times they've been interacted with",
    "PickupInstigatorData:AccentColorParam": "A material color that should be associated with the pickup and related item entries",
    "BuildingSMActor:EditorOnlyStaticMeshComponent": "A mesh component to visualize this actor in the editor",
    "FortAthenaVehicleSpawner:PreviewMeshComponent": "A mesh component used to preview in editor without spawning a static mesh actor.",
    "EVoteSessionNetworkType.MeshNetwork": "A mesh network of servers",
    "FortAthenaMutator_TimedRespawnHelper:GameMsg_NoMoreRespawn": "A message that fires off when we have no more respawns",
    "PickupManagementSettings:PickupDespawnDelaySeconds": "A minimum delay of 0.01 is required.",
    "FortObjectiveFilter_MatchTimeElapsed": "A minute of match time has elapsed. Progress amount is set to 1 (aka \"1 minute\")",
    "FortObjectiveFilter_MissionTimeElapsed": "A minute of mission time has elapsed (triggers about .0004 seconds after the minute). For this to trigger,\nthe Mission MUST contain a UFortMissionTimerComponent with bUpdateQuestsTimeElapsed == true",
    "FortMissionEvent": "A mission event struct. Can be handled by Objectives",
    "FortQuestMissionCreationContext:MissionInfo": "A mission to create for a quest",
    "SpeedScaledAxisOffsetData:OffsetModifier": "A modifier applied to this offset after all calculations have been performed. Used primarily to enable/disable this offset from hot fixes.",
    "FortTrackMovementComponent:ClientPredictionSpeedModifier": "A modifier on TrackVelocity to account for differences between the client and server locations",
    "AircraftFlightConstructionInfo:SystematicPathOffsetFactor": "A multiplier applied to the max possible deviation angle used to find where on the opposite side of the map the path should end, between -1 and 1.",
    "FortWeaponRangedDualSwing:RopeMeshLengthMultiplier": "A multiplier applied to the rope's length to account for the length of the mesh. Effectively one over the size of the mesh on the Z axis.",
    "PendingSpawnInfo:ScoreMultiplier": "A multiplier on the score awarded for killing this AI",
    "FortAIPawn:ScoreMultiplier": "A multiplier on the score earned for killing this AI pawn",
    "DynamicXpProfileStats:DailyExcessXpMult": "A multiplier to Potential XP when player has gained too much XP for current day.",
    "FortMutatorGamePhaseMusicEvent": "A music event to play at a specific game phase",
    "FortMutatorGamePhaseStepMusicEvent": "A music event to play at a specific game phase step.  Note that some steps will happen multiple times during a match!",
    "EGameModePauseWarmupMaskId.Mutator": "A mutator is pausing the warmup phase.",
    "FortAthenaMutator_SkinChangeOnWin": "A mutator that allows for a custom skin to be applied to winners when the game ends.",
    "FortAthenaMutator_CreativeModifyEmotes": "A mutator that allows for adding or blocking emotes for players in a specific SpatialInterface\nThis mutator also makes some features AFortAthenaMutator_ExternalEmote more blueprint friendly",
    "FortAthenaMutator_CosmeticLoadoutOverride": "A mutator that forces players to use a given list of Cosmetic Override parts regardless of what they have equipped\n    Cosmetic Overrides use UFortItemDefintions to specify which item to use, which allows us to specify stats to observe\n    for the associated cosmetic.  Observed Stats are used to update certain cosmetics as games progress, as opposed to\n    just referencing the character part, which does not give us the option to specify any stats to observe.",
    "FortAthenaMutator_FactionCustomCharacterParts": "A mutator that forces players to use a given list of customization character parts regardless of what they have equipped based on which event/LTM faction they belong to",
    "FortAthenaMutator_CustomCharacterParts": "A mutator that forces players to use a given list of customization character parts regardless of what they have equipped.\n    Note: this does not update the player's Cosmetic Loadout, and thus functionality such as cosmetics that should update\n    via observed stats will not work as intended.",
    "FortAthenaMutator_TDM": "A mutator that handles gameplay and scoring logic for TDM (Team Death Match) style game modes.\nA Team Death Match game mode consists of players on two teams killing players the opposing team\nuntil one of the teams reaches a 'goal score'. Players will respawn until the match is over.",
    "FortAthenaMutator_LevelInstanceDevice": "A mutator to help prevent the user from modifying read only level instance devices",
    "FortAthenaMutator_SplitStorm": "A mutator to override the safe zone locations and add a second (proxy) storm circle for a particular phase.\nThis mutator is for playtesting purposes ONLY and should NOT be used in any playlist that ships to the public.\n\nSplit Storm Design Doc: https://docs.google.com/document/d/1fNHt9Q4UK7RU0x5YcFIcrQrMNo33xABfXvv7GogWAb4/edit",
    "FortAthenaMutator_AI_SignificanceBasedUpdate": "A mutator used to optimize AI processing in Athena. If enabled, this mutator will batch and stagger the\ntracked pawns' FortMovementComp_Character component updates so that not all components are being updated\non the same frame. The movement components are placed into buckets based on their pawn's significance. In\neach bucket, movement components are divided evenly and randomly into groups (the number of groups in a\nbucket equals it's FramesPerUpdate value). Only one group is updated per bucket per frame, so for a bucket\nwith FramesPerUpdate = 3, three groups will be created and the movement components in that bucket will be\nspread evenly throughout them. Then the three groups will be updated on the next three frames (one per frame)\nand the cycle will continue.",
    "FortActorOptionsComponent:Internal_OptionsDisplayName": "A name to display in the Toy Options UI header\n@note If Internal_PlayerOptions is null then we'll attempt to get the data from the FUserOptionDefinitionContainer on the owner actor class",
    "FortAnimationsPerGender": "A native struct to replace the gender animation selection that was previously in blueprints for things like the\nmannequin device. Stores a mapping from each set gender to an animation",
    "RepGraphMutatorSpatializationZone": "A near-copy of UReplicationGraphNode_DynamicSpatialFrequency::FSpatializationZone,\nused for overriding UFortRepicationGraph settings from BP",
    "ELoginResult.NetworkConnectionUnavailable": "A network connection is unavailable",
    "EFortCollectedState.NewLocation": "A new location is found and not seen by player",
    "EAthenaRoundsMutatorPhase.RoundSetup": "A new round is setting up",
    "BuildingCorner": "A non-interactive corner mesh that sits between two walls",
    "BuildingFloor": "A non-interactive flat floor",
    "BuildingRoof": "A non-supporting roof piece, essentially a wall with depth",
    "EEQSActorSpawnerSpawnType.Actor": "A normal actor, no special actions are taken to initialize the actor",
    "BuildingWall": "A normal, non-interactive wall",
    "FortDamageNumberInfo:VisualDamageScale": "A number between 0-1 that indicates some kind of visual scale to apply to the damage number",
    "FortAIDirector:SimulatedNumberOfPlayersForAIEncounters": "A number of players that running AI Encounters will pretend are in the game for debug and tuning purposes",
    "CombatEventMultiplier": "A pair with a combat event and its contribution multiplier. Used for combat factors",
    "FortAIDirectorFactorContribution": "A pair with a combat event and its contribution multiplier. Used for combat factors",
    "FortStatEvent:NotificationParameter": "A parameter to modify the notification",
    "IndicatedActorParticleSystemData:ParticleSystem": "A particle system to attach and play when the actor is added to the list.",
    "EHeldObjectState.Dropped": "A pawn has dropped this object. Dropped is similar to placed, but without a ray trace.",
    "EHeldObjectState.Placed": "A pawn has placed this object in front of them using a ray trace to determine the exact location.",
    "EHeldObjectState.Thrown": "A pawn has thrown this object.",
    "FortAthenaMutator_Mash:SpecialEncounterPawn": "A pawn spawned by the AI Special Encounter system. Like a boss pawn, but less important.\n     We track this pawn so that we can kill it when the current phase ends.",
    "EEQSActorSpawnerSpawnType.AIPawn": "A pawn that an AI is attached to",
    "EUraniumRoundPhase.FadeBeforeReleasePlayerIntoGameplay": "A phase that does a quick fade before releasing the player into gameplay to hide the awkward transition from POI Camera to Player Camera",
    "EEQSActorSpawnerSpawnType.Pickup": "A pickup actor that contains an item",
    "MinigamePlayerBucket": "A player bucket is a way to identify a group of players without referring to their Athena team (EFortTeam)\nIt is a stable way of identifying a \"group\" of players as Athena teams are not stable",
    "FortPickupInteractOverrideComponent": "A player controller component that overrides behavior of pickups.\nTypically added via a plugin's \"Add Components\" game feature action to the FortPlayerController.\n\n    @class UFortPickupInteractOverrideComponent",
    "EFortZoneType.Keep": "A player owned keep",
    "SpecialEventCursorPawnComponent": "A player pawn component used for moving a cursor widget based on controller input.\nOptionally distributes its data to non-owning clients, so you can see the cursors of non-locally-controlled players.\nIf you want it to live on client only, spawn it on client, with bReplicates = false.",
    "FortAthenaMutator_SpectateBeforeRespawn:SpectateToRespawnTransitionTime": "A player should start transitioning out of spectating by this much time before the respawn occurs",
    "FakeKillRelevancyVictim": "A player to be fake killed, and its location at the time that the kill was queued",
    "EFakeKillRelevancyPlayerKillStep": "A player's current step in the fake kill process",
    "UIStateChartContextEntryOverride:OverrideValue": "A player-specific value for this entry.",
    "FortGameFeatureDataBaseDataTableOverrides:BaseTable": "A plugin specific table that can be overridden on a per playlist basis",
    "FortPlaylistBaseCurveTableOverride:BaseTable": "A plugin specific table that can be overridden on a per playlist basis",
    "FortPlaylistBaseDataTableOverride:BaseTable": "A plugin specific table that can be overridden on a per playlist basis",
    "FortPickupCreative:CachedPickupInstigatorHandle": "A pointer to the actor responsible for spawning this pickup",
    "FortItemEntry:ParentInventory": "A pointer to the parent inventory",
    "AIPatrolPathComponent:PatrolPathActor": "A pointer to the shared FortAthenaPatrolPath for this patrol path",
    "BuildingRift": "A possible location for a rift to spawn",
    "FortEnemySpawn": "A possible location for an enemy to spawn",
    "FortGlobalMission": "A possible mission that could be generated",
    "FortPossibleMission": "A possible mission that could be generated",
    "FortNonPrimaryMission": "A possible non-primary mission that could be generated at world creation (depending on its own requirements and the\nrequirements specified by the Mission Generator.",
    "FortQuestDrivenMission": "A possible quest driven mission that could be generated when a player joins",
    "AlterationOption": "A potential alteration with associated cost",
    "EValkyrieProjectTemplateCategory.SampleProject": "A project template that are more complex and provides users with examples that are created by professional dev teams",
    "EValkyrieProjectTemplateCategory.UserGenerated": "A project template that contains content created by users",
    "EValkyrieProjectTemplateCategory.FeatureExample": "A project template that represents isolated functionality and allows the user to explore and learn more about specific features or systems",
    "EValkyrieProjectKind.Island": "A project that delivers an island that can be played in the game.\nIsland projects cannot have public assets or verse apis and cannot be referenced by other projects.",
    "EValkyrieProjectKind.Library": "A project with public assets and verse apis that can referenced by other projects.\nLibrary projects are likely to have multiple versions and are typically distributed via the marketplace hub.",
    "FortAbilitySystemProjectileBase": "A projectile that implements IFortAbilitySystemInterface and contains a UFortAbilitySystemComponent.",
    "BuildingPropCorner": "A prop that uses corner placement rules",
    "BuildingPropWall": "A prop that uses wall placement rules",
    "CreativeAudioMixerReplicationProxy": "A proxy for the Audio Mixer device, managed by ACreativeAudioMixerDevice\n\n@see ACreativeAudioMixerDevice",
    "CreativeAudioPlayerReplicationProxy": "A proxy for the Audio Player device, managed by the CreativeAudioComponent",
    "BuildingDeco": "A purely decorative object that cannot be interacted with",
    "FortObjectiveFilter_QuestUpdated": "A quest state has been updated.\nCalled when a quest is granted (State active), and completed (State complete)",
    "EFortQuestType.Optional": "A quest that does not block progression, but is otherwise normal",
    "EMaterialStyleParameterType": "A range of parameter types which are commonly leveraged when manipulating materials",
    "FortObjectiveFilter_ScoredPlayerElimination:Distance": "A range to filter based on the distance between the killer and killed player.",
    "FortObjectiveFilter_PawnEliminated:Distance": "A range to filter based on the distance between the killer and killed player.\nIf either of the pawns is null the distance value will be 0.",
    "EFortPartyMemberReadyCheckStatus.Canceled": "A ready check has been canceled, after we are done with matchmaking this should go back to none.",
    "EFortPartyMemberReadyCheckStatus.Complete": "A ready check has been completed, after we are done with matchmaking this should go back to None.",
    "EFortPartyMemberReadyCheckStatus.InProgress": "A ready check is active and in progress.",
    "FortMissionManagerRecord:MissionRecords": "A record of all the Missions held onto by the Mission Manager",
    "UserOptionDefinitionColorMetaData:ValuesDataTable": "A reference to a \"shared\" table of LinearColor presets.",
    "UserOptionDefinitionAssetReferenceMetaData:ValuesDataTable": "A reference to a table of asset option values that are commonly shared.",
    "UserOptionDefinitionClassReferenceMetaData:ValuesDataTable": "A reference to a table of asset option values that are commonly shared.",
    "UserOptionDefinitionIconMetaData:IconsDataTable": "A reference to a table of icons that are commonly shared",
    "BuildingItemWeaponUpgradeActor:BrickItem": "A reference to the Brick Item Definition",
    "BuildingItemWeaponUpgradeActor:MetalItem": "A reference to the Metal Item Definition",
    "BuildingItemWeaponUpgradeActor:WoodItem": "A reference to the Wood Item Definition",
    "FortAthenaMutator_SafeZoneOrderOptimize:DebugShortestRouteOrder": "A replicated copy of ShortestRouteOrder[0]",
    "CreativeAttenuationVizComponent": "A reusable component for attenuation visualisation",
    "CreativeRegisteredPlayersManagerComponent": "A reusable component that handles registering and unregistering AFortPlayerState",
    "AthenaBattlePassOffer": "A reward item that is offered in exchange for game currency",
    "FortGravityGunHolder:Ring1SMComponent": "A ring static mesh that goes around the held object.",
    "FortGravityGunHolder:Ring2SMComponent": "A ring static mesh that goes around the held object.",
    "FortGravityGunHolder:Ring3SMComponent": "A ring static mesh that goes around the held object.",
    "FortGravityGunHolder:RingSMComponent": "A ring static mesh that goes around the held object.",
    "RootMotionSource_KatanaDashForce": "A root motion MoveTo force that finds the floor at each point along its path and adjusts\ncharacter's location and prevent clipping into the floor and causing collision.",
    "RootMotionSource_RocketRam": "A root motion source that works much like FRootMotionSource_ConstantForce but provides functionality\n      to slide over ground instead of getting caught by inclines.",
    "PendingSpawnInfo:SpawnRotation": "A rotation to spawn the enemy. Used when SpawnPoint is NULL",
    "EAthenaRoundsMutatorPhase.RoundPlay": "A round is in progress",
    "FortVariantData:Weight": "A row from the data table so we can define the chance of rolling this variant.",
    "FortDynamicRollBaseWeightTableRow": "A row in a Table that defines the base weights for items that can be rolled. This is similar to a loot table, but much simpler.\nIt represents a roll entry in a table of potential items to roll.\nUsing named weights of a loot table provides similar functionality, but has to work around specifics (ie it always adds to weights instead of replaces).\nThis however gives us a little more flexibility, in that we avoid duplicates and execute custom logic related to a dynamically changing loot pool.\nIt also provides seeded generation so that situations can be repeated and analyzed.\nIt also avoids needing to set up loot tiers and loot packages, which has been a blocker for creative for things in the past.\nThe goal of this row is to stay generic and can be used for other similar systems in the future. It was created for player augments, but has no knowledge of player augment item types.",
    "FortDynamicRollWeightModifierTableRow": "A row in a table that defines the how weights in the base table can be modified.",
    "FortWeaponModOverrideDataRow": "A row that defines how some weapon mod data could be overridden for different weapons",
    "VoiceChatLogUploadRule": "A rule defining an event and/or error for which a log is to be uploaded",
    "GoaFInPersistent:PushForceCurrentMultiplier": "A runtime multiplier that can be used to modify the forward push applied to the vehicle",
    "JackalInPersistent:PushForceCurrentMultiplier": "A runtime multiplier that can be used to modify the forward push applied to the vehicle",
    "JackalInPersistent:FrontLateralFrictionRuntimeMultiplier": "A runtime multiplier that can be used to modify the lateral friction of the front and rear.\n      This vehicle uses the same value for the front and back, so only the value of the front is marshaled for performance",
    "FortPlayerController:bAllowBuildingPreviewAutoRotation": "A save the world building feature that auto-rotates pieces, but it's causing side ramps in battle royale",
    "FortControllerComponent_DynamicRollPlayerComponent:SeededRNG": "A seeed random stream used to generate chioces on the server; the seed can be overridden via cvar \"Fort.DynamicRollTable.DebugSeed SeedNumber\" for debugging purposes",
    "FortCharacterVehicle_Ostrich:PickupCapsuleComponent": "A separate capsuleComponent for detection of pickup overlaps",
    "FortAthenaMutator_Wax:BusGameMessages": "A series of messages the player sees on the bus, if enabled.",
    "BuildingProp_BountyBoard:PlayersGrantedBountySet": "A server only set of players that are hunters for a bounty quest that this building has granted.",
    "MidiMsgBroadcasterComponent:cursorSettings": "A set of Midi Cursors that will track the music and broadcast messages. Cursors can be offset from the current 'now' time.",
    "FortChaseCameraHelper:IgnoreActors": "A set of actors to ignore for our sweep.",
    "FortAudioToMPCComponent:TrackedAudioComponents": "A set of audio components that should be converted to MPC in addition to the audio component on this component's owning actor.",
    "ContextSetterChanges": "A set of changes to the State Chart Context that will be made all at one time.",
    "UIStateAutomationRule:ContextConditions": "A set of conditions against the State Chart Context that must all be true for this override to be applied.",
    "EFortItemEntryState": "A set of enums that describe the various types of state values an item entry can have",
    "DaySequenceBindingReferences:AnimSequenceInstances": "A set of object binding IDs that relate to anim sequence instances (must be a child of USkeletalMeshComponent)",
    "DAD_CosmeticItemUserOption": "A set of options that defines a cosmetic item for mannequins.",
    "DAD_MediaItemUserOption": "A set of options that defines a cosmetic item for mannequins.",
    "FortExposedAssetPathCustomization": "A set of rules defining how the exposed paths and aliases for a specific set of assets should be auto-generated",
    "FortExposedAssetPathCustomization:FolderPrefix": "A set of slash-delimited folders to add immediately after the plugin name, eg My/Prefix -> /Plugin/My/Prefix/RestOfPath",
    "RegisterWithMutatorComponent:GameplayTags": "A set of tags to be passed to mutators when this component registers itself with mutators that implement IRegisterWithMutatorComponentManager",
    "FortAnimNode_WeightedLookAt:BoneWeightsToApply": "A set of weights to apply to Bone to Modify and its ancestors, specified starting at Bone to Modify and moving upwards in the hierarchy.",
    "FortGameSessionDedicated:IdleResetShortTimer": "A short amount of time to set idle reset for if needed",
    "FortMcpQuestObjectiveInfo:HudShortDescription": "A short text description of this particular objective that's used in the HUD",
    "DestinationTrackerPawnComponent": "A simple component that tracks distance and heading to a given destination.",
    "EFortBuildingType.Floor": "A simple floor",
    "FortSwipeDetector": "A simple helper used for determining when a swipe has been inputted using pointer input.\nThis is intended to be used mostly with touch-capable devices, but is not limited to them.",
    "FortAthenaMutator_GameModeBase:GameMsg_AircraftPhaseIntroMessage": "A simple intro message that will fire at the start of the aircraft phase",
    "QuickBarEquippedItemGuids": "A simple snapshot of the item guids that are equipped in a quick bar.\n      Currently used to send a small update to the server to track for analytics\n      purposes",
    "EFortBuildingType.Wall": "A simple wall",
    "BuildingActorLocalizationEntry": "A single entry in the building actor localization cache.",
    "FortMissionPlacementItems:TagsToAddToChosenPlacementActors": "A single global 'Used' tag will always be added.  This container allows additional tags to be added to ALL placement locations chosen by the entire mission.  You can also specify individual tags per item with then WorldsToPlace and ActorsToPlace arrays.",
    "FortPlayerSpawnPadPlacementData:TagsToAddToChosenPlacementActor": "A single global 'Used' tag will always be added.  This container allows additional tags to be added to ALL placement locations chosen for player spawn pads.",
    "FortKeyframedMovementKeyframeData": "A single keyframe. Whether this is treated as a delta-type keyframe relative to the previous in a sequence\nor a set of absolute transforms is context-dependent (and member-specific). When passed to SetKeyframes,\n these are interpreted as relative transforms from the current actor location/rotation. They are converted\n to absolute transforms internally and used as such internally by this component",
    "FortGamestateComponent_AugmentTableManager": "A single location that handles preparing the augment tables based on the currently active plugins. Since preparing these tables is likely expensive, this\nis done in a single location. The AugmenyDynamicRollPlayerComponent handles tracking only the data relevant to the player.\nThis mostly exists to handle any augment specific needs that shouldn't be handled in the base dynamic roll system.",
    "FortGamestateComponent_DynamicRollTableManager": "A single location that handles preparing the roll tables based on the currently active plugins.\nSince table preparation can be expensive and a lot of data is shared among players, this exists as a single gamestate component used by all players.\nWhen tables have been loaded and prepared, this will broadcast an event letting player components (UFortControllerComponent_DynamicRollPlayerComponent) know that they can use the roll system.\n\nThis class is intended to be generic and not tied to player augments.",
    "CarryOverPlayerAugment": "A single player augment carried between matches. The source game mode is also stored to allow filtering augments\nearned in different game modes. A related struct, FCarryOverPlayerAugmentPersistenceData, is stored in the player profile.",
    "BuildingActorLocalizedStrings": "A single set of localized strings in the building actor localization cache.\n@note The indices of the strings in this struct must correspond to the CachedLangauges of the owner cache (or be empty).",
    "QuickBarSlot": "A slot in the quick bar",
    "HomebaseNodeDisplayData:SmallPreviewImage": "A small image to show in a normal view.",
    "GasDebugSnapshot": "A snapshot of GAS debug info that can be stored locally or sent client/server. This allows pausing and reading server-side info.",
    "FortPhysicsObjectComponent:DeactivationSnapshotData": "A snapshot of data for the physics object when it deactivates",
    "IndicatedActorData:Sound": "A sound to play when the actor is added to the list.",
    "StenciledActorData:Sound": "A sound to play when the actor is added to the list.",
    "EMashAISpecialEncounterType.UniqueAISpawn": "A specific enemy is spawned, but this enemy is not treated as anything special. Killing the enemy does not end the phase early nor is killing this type of enemy required to end the phase.",
    "AssetDependencySettings:ClassIgnoreList": "A static list of classes to ignore when gathering asset references",
    "AssetDependencySettings:ExcludedPackages": "A static list of packages to ignore when gathering asset references",
    "AssetDependencySettings:ExcludedPaths": "A static list of paths to ignore when gathering asset references",
    "FortTrackedModStaticMeshData:ModStaticMeshComp": "A static mesh component that may or may not exist for a weapon.\nThese are performance critical, and some mod meshes may be instanced rendered,\nrather than having actual components being updated on the weapon actor.\n\nFor now, only support spawning a single static mesh. This is performance critical and I'm not sure we will ever support an array of meshes for a single mod.\nWrapping this in a struct so we can easily refactor this to include more data, or potentially change it to an array.",
    "FortCreativeMoveTool:RecentlyPlacedAgingActors": "A store to keep track of recently placed actors. Is useful for ignoring recently placed actors.",
    "DynamicXpCalibrationResult:Ids": "A string ID used to link player analytics with current CalibrationPhase.",
    "SpecialEventGameUserSettingsControllerComponent:Version": "A string to differentiate the current special event from past/future events,\nAND to differentiate between steps of development within the upcoming event.\nMust be defined.  Must be unique from previous events.\nMust be altered every time the format of the save data changes.",
    "FortFocusedBuildingInfo": "A struct assembled in response to any changes to the currently focused building and used to update the UI",
    "UIStateChartManagerChartDeactivationRequest": "A struct containing information about a State Chart Entry while it is pending being deactivated.",
    "FortDynamicRollResult": "A struct containing relevant information for a given roll\nRather than just returning the item for the roll, which will become harder to refactor in blueprint, we return this so that we can easily refactor and add data later\n(eg like the first time an item has ever been rolled for a player).",
    "FortMantisTechniqueMetadata": "A struct containing user defined metadata that is determined on the client when a technique is started and replicated to the server.",
    "FortCreativeCreatorAnalyticsEventAttribute": "A struct for exposing analytics parameters to Creative blueprints",
    "FortAnalyticsEventAttribute": "A struct for exposing analytics parameters to mission blueprints",
    "FortOverrideData": "A struct of data that represents an \"Override\" to an existing data element in a Data Registry. New override data can be\ncreated that does not map to an existing element, but that data would only be fetchable at Run-time, and would be considered\n\"Impossible\" to query in blueprint.\nScope name can also be provided to associate this Override with a specific Scope context of where/when that value should be used.",
    "FortMantisTargetData:TechniqueMetadata": "A struct of user defined metadata for the active technique.",
    "FortReleaseVersion": "A struct representing a version of Fortnite. Note that it is only a BlueprintType for editor-only library functions, and this is not intended for general blueprint use.",
    "UIStateConfigurationChildReference": "A struct storing the ID of a child state.\nThis is isolated because it has its own property type customization.",
    "SoundThreshold": "A struct that contains the threshhold data for when to play a sound cue",
    "FortWorldMultiItemXPComponent:OwningItemReplicationProxy": "A struct that is used for replicating the owning multi-item's selected item index, XP value, XP delta, and XP percentage to the owning client.",
    "PFWExample_Struct": "A struct that is used in our UPFWExample_GameObject",
    "FortPipTest": "A struct to hold information required for the picture-in-picture test.",
    "UIStateAutomationRule": "A struct used during the Initial Child determination process at runtime.\nThis data is used to indicate that a particular child state should be chosen\nif a set of conditions are all met.",
    "PawnBountyInteractionInfo": "A struct used to wrap up params which can be used by clients to drive bounty board interaction text state.",
    "FortScriptedObjectMovement_Structure": "A structure created from movable objects.",
    "UIStateRelayBaton": "A structure representing ownership of a responsibility that may be transferred during a transition from\na component that is being deactivated to one that is being activated.",
    "PersistenceFrameworkServiceAssetInfo": "A structure used in to reference the asset. This separation into separate structure is needed for data registries.",
    "BuildingActorEditorSettings:bWarnAboutMaterial0Override": "A suppressible warning that allows for auto-enabling Allow Custom Material",
    "FortPlayerSurveyCMSQuestionContainer": "A survey's Questions can be one of two types of objects, and these have to be proper JSON objects for the CMS to handle\na functional array",
    "EFortQuestType.SurvivorQuest": "A survivor quest",
    "FortAIEncounterSpawnGroupCapsCategory:UnlockingTagQuery": "A tag query run on the encounter tags that must pass for AI that fit in this category to spawn.\nThis result is expected to change over the course of an encounter if tags are added to it.",
    "FortAIEncounterSpawnGroupCapsCategory:TagQuery": "A tag query to run on spawn group tags to determine if the group is a part of this population category",
    "FortStatManagerTag": "A tag representing a stat in the AFortPlayerController stat manager\n@TODO: This is an aspirational change, the stat manager and most associated code still uses FNames, but this allows us to present a friendly enumerated face to content authors\nThere is already some limited support for tags below, but they share no common root (they take a FName prefix and then do \"[Name]:[TagName]\" as the actual effective FName)",
    "FortAthenaMutator_Uranium:CameraGameplayTag": "A tag that RegisterWithMutatorComponents will pass in to identify them as belonging to a uranium POI camera actor",
    "FortAthenaMutator_Uranium:SplineGameplayTag": "A tag that RegisterWithMutatorComponents will pass in to identify them as belonging to a uranium push cart spline actor",
    "DynamicCompositeWorld:StreamingInLevelTag": "A tag that to key off of what levels to stream in",
    "DynamicCompositeWorld:StreamingOutLevelTag": "A tag that to key off of what levels to stream out",
    "UraniumPOIData:POITag": "A tag the specifies which POI this spline is associated with",
    "GameplayStatTag": "A tag to represent a GameplayStat. These are tags confined to the \"GameplayStat.\" parent tag.\nAll game code dealing with GameplayStats must use an FGameplayStatTag to refer to the stat.\nThere should be no direct string/name manipulation in code to using stats. Native code will\nnatively add the tag in OrionGlobals_Stats.h. Blueprints will just have a defaults-editable\nFGameplayStatTag UPROPERTY.\n\nThere is no automatic stat aggregation based on tag hierarchy:\n\nTags must be explicitly added to the dictionary. E.g, if you add \"GameplayStat.A.B.C\" to the tag dictionary,\nthat adds exactly one stat. \"GameplayStat.A\" will not be a stat.",
    "FortMcpQuestObjectiveInfo:Description": "A text description of this particular objective",
    "VkPublishedLink:Base": "A text string summarizing the content base for this link version",
    "FortRechargingActionTimer:ChargeThreshold": "A threshold to let us know if the charge has gone below or above it.",
    "FortRechargingActionTimerConfig:ChargeThreshold": "A threshold to let us know if the charge has gone below or above it.",
    "FortAthenaMutator_Wax:ThresholdShowEnemyFlashAt_One": "A threshold where once crossed (in the positive direction) the corresponding bar will flash",
    "FortAthenaMutator_Wax:ThresholdShowEnemyFlashAt_Three": "A threshold where once crossed (in the positive direction) the corresponding bar will flash",
    "FortAthenaMutator_Wax:ThresholdShowEnemyFlashAt_Two": "A threshold where once crossed (in the positive direction) the corresponding bar will flash",
    "FortAthenaMutator_Wax:ThresholdShowTeamFlashAt_One": "A threshold where once crossed (in the positive direction) the corresponding bar will flash",
    "FortAthenaMutator_Wax:ThresholdShowTeamFlashAt_Three": "A threshold where once crossed (in the positive direction) the corresponding bar will flash",
    "FortAthenaMutator_Wax:ThresholdShowTeamFlashAt_Two": "A threshold where once crossed (in the positive direction) the corresponding bar will flash",
    "EEpicLeaderboardTimeWindow": "A time window that a leaderboard can be queried over",
    "RecentlyRemovedQuickbarInfo": "A transient struct used for slotting items into the quickbar",
    "BuildingTrap": "A trap object that is attached to other pieces",
    "BuildingTrapCeiling": "A trap object that is attached to other pieces",
    "BuildingTrapCeiling_Falling": "A trap object that is attached to other pieces",
    "BuildingTrapFloor": "A trap object that is attached to other pieces",
    "BuildingTrapFloor_Turret": "A trap object that is attached to other pieces",
    "BuildingTrapLauncher": "A trap object that is attached to other pieces",
    "BuildingTrapWall": "A trap object that is attached to other pieces",
    "FortLauncherAthena": "A trap object that is attached to other pieces",
    "BuildingTrapDefender": "A trap object that is used to spawn in a Defender",
    "AthenaLTMTraversePoint": "A traverse point used by LTMs to detect if the player has reached said point.",
    "FortMcpQuestObjectiveInfo:FrontendScriptedAction": "A triggered action that is activated when this objective is active.\nNOTE: Currently only needed for ClientMenu asset bundle",
    "FortMcpQuestObjectiveInfo:ScriptedAction": "A triggered action that is activated when this objective is active.\nNOTE: Currently only needed for ClientMenu asset bundle",
    "PlayspaceManagerComponent:PlayspaceRootType": "A type that tracks whether the current Root \"wants\" to be the root. If it is set to ShouldBeClobbered, then the current Root is temporary\nand should be destroyed when any of the Root Creation types are called.",
    "FortClientAnnouncement:AnnouncementID": "A unique ID used to identify this announcement",
    "FortMissionEvent:MissionGuid": "A unique identifier for the mission this event should be sent to. If uninitialized, it will broadcast to all missions",
    "CursorSettings:eventSourceName": "A unique name that will identify event messages from this specific cursor.",
    "FortOctopusVehicle:TowhookMaxInvalidateTargetDot": "A value generated from TowhookMaxInvalidateTargetAngleDeg in BeginPlay",
    "FortSpaghettiVehicle:TowhookMaxInvalidateTargetDot": "A value generated from TowhookMaxInvalidateTargetAngleDeg in BeginPlay",
    "SkyAtmosphereValues:MieAnisotropy": "A value of 0 mean light is uniformly scattered. A value closer to 1 means lights will scatter more forward, resulting in halos around light sources.",
    "FortDynamicRollWeightModifierTableRow:WeightModificationValue": "A value to change the weight by.",
    "FortTimeOfDayCurve_Vector:Curve": "A vector curve based on time of day [0-24]",
    "RootMotionSource_RocketRam:PathOffsetCurve": "A vector curve denoting how far to offset the player from their expected position after accounting for their speed from the speed curve.",
    "FortGameModeMinimal": "A very minimal game mode, used for transition/empty maps where we want to spawn nothing",
    "EFortItemType.AthenaVictoryPose": "A victory pose is a persistent equipable emote that is automatically played when you win a match (you might not have one though)",
    "HomebaseNodeDisplayData:PreviewVideoMediaSource": "A video to show in a detailed view or other place.",
    "SkyfireOutOfBoundsVolume": "A volume that mimics a KillZ but instead of killing the player calls AFortAthenaMutator_Skyfire::OnPlayerKnockedOutOfPlayspace.",
    "BuildingPillar": "A wall that lives in the center of it's square",
    "FortDecoHelper:DecoTool": "A weak pointer to the actual gun",
    "UraniumPOIData:SplineActor": "A weak reference to the spline actor at this POI",
    "KatanaTargetingComponent": "A weapon component that handles targeting calculations for the katana.",
    "SpecialEventCursorWeaponComponent": "A weapon component that uses a USpecialEventCursorPawnComponent to determine the weapon's aim direction",
    "CatalogOfferDefinition:FilterWeight": "A weight to report when matching a filter. This is used for random selection.",
    "IntensityData:ExceptionEditModeWeight": "A weighting to apply to combat events involving buildings with the edit mode patterns specified in the ExeptionEditModes array",
    "FortZoneEvent": "A zone event struct. Can be handled by Objectives",
    "AthenaCapturePoint": "AAthenaCapturePoint\n      This new building gameplay actor is the basis for all building based capture\n      points.  The actor is setup to handle a plethora of capture point setups.\n\n      Basic Rules: When a team (1+ players) steps on the capture point the point\n      will flag which team is capturing and begin growing the percentage towards\n      100%, when the point reaches 100% the point will lock for a defined set of\n      time at which point it will unlock.\n\n      CaptureStates: Idle is used when the point has no one on it but doesn't have\n      the ability to return to 0. (Note: Useful when the decrease value is 0 to\n      force the other team to drop it down to zero before gaining any control).\n      Capturing is when a team is actively driving the percentage in their favor.\n      Contested is when multiple teams are on the point forcing the point to contention\n      based on the rules defined. Reseting is when the point has no one on it\n      and has the ability to drive the percentage back to zero.\n\n      Contention Rules: Currently there are two types of contention rules and it\n      isn't hard to add more in the future. MajorityWins (default) is where the\n      difference between multiple teams is the number of capturers and when an\n      even number are present the point is in contention. (Note: This setup actually\n      handles N teams where the team with the most and the team with the second\n      most affect the difference, i.e. Team1 = 2, Team2 = 1, Team3 = 1 then Team1\n      is capturing with a count of 1). OneTeamOnlyWins is where only 1 team can\n      be present on the point at a time to actually capture it.\n\n      Unlock Rules: Once the point is locked and the time interval is through and\n      unlocks the point there are a couple of rules that govern how the point behaves.\n      ResetState will remove the team that is controlling the point and reset all\n      values to 0 so capturing can begin from the beginning again. MaintainState is\n      used to keep the controlling team in ownership of the point at 100% so it is\n      the other teams job to recapture the point back to 0 then back up to 100%.",
    "AthenaTraversePoint": "AAthenaTraversePoint",
    "AttachableWheel": "AAttachableWheel\n\nA simple actor which has a simulated StaticMeshComponent and which\nmanages attachment with other objects in the world via a dynamically\nadded and removed PhysicsConstraintComponent.\n\nThis class is set up to be replicated by default. Attachment and\ndetachment functions are blueprint exposed but can only be called\nfrom the server.",
    "BuildingItemCollectorActor": "ABuildingItemCollectorActor\n\n      The Building Item Collector Actor is a complex actor that can be used\n      to build many different kinds of devices that players interact with\n      and deposit items from their inventory.\n\n      The Item Collector does not actually store actual inventory items. The\n      actor simply verifies how many a player has, saves the total towards\n      the deposit goal for that players team, then deletes those its from\n      the players inventory.\n\n      The Item Collector has various states (that may grow over time) such as FirstToGoal,\n      FreeForAll.\n\n      FirstToGoal - The objective of this behavior is for teams to deposit inventory items\n      trying to be the first team to reach a desired goal value.\n      When a team reaches the goal the Item Collector becomes \"captured\" and will no longer\n      accept inventory drops until it is reset.\n\n      Uses: BluGlo pylons in STW and Vending Machines in BR",
    "BuildingStaticGeo": "ABuildingStaticGeo is a lightweight drop in replacement for ABuildingSMActor, for cases that only need the shared\nmaterial overrides and nanite displacement mesh generation. This class retains the same property names as\nABuildingSMActor, so existing instances can be swapped over using the editor's \"Change Parent\" function.\nFuture work: Consider moving this functionality into UBuildingStaticMeshComponent.",
    "ExpectedConsoleVariableForTest": "ACreativeFunctionalTest\nBase class defining a Creative functional test.\n\nEDITOR ONLY! As FunctionalTest is editor only.\n\nUsed to get a player client into a particular playlist.\nPrimarily used to test Creative device functionality.\nThis test class has the option to level stream or spawn actors via the LevelSaveRecord (LSR) from a predefined DeviceMap.",
    "FortWeapon:TargetingEndSound": "ADS / Target end sound",
    "FortWeapon:TargetingStartSound": "ADS / Target start sound",
    "FortRangedWeaponStats:ADSTransitionInTime": "ADS transition in time.",
    "FortRangedWeaponStats:ADSTransitionOutTime": "ADS transition out time.",
    "AthenaVariantFilterTabInfo:bDisableScrollBox": "ADVANCED: please use this only on tabs where your ONE channel is a virtualized TileView that wants to (size) Fill, like ItemTexture",
    "FortActorSpawner": "AFortActorSpawner\n\n - Can be used to spawn other actors.\n - Allows specifying server or client authority.\n    - Creates a preview actor in the editor for visualization.",
    "FortAircraft": "AFortAircraft",
    "FortAmbientAudioVolume": "AFortAmbientAudioVolume - Fortnite specific audio gameplay volume that pulls in an ambient audio component for ease of use.",
    "FortAthenaAircraft": "AFortAthenaAircraft",
    "FortAthenaExitCraftBalloon": "AFortAthenaExitCraftBalloon",
    "FortAthenaMapInfo": "AFortAthenaMapInfo",
    "FortAthenaMutator_PerkSystemMutator": "AFortAthenaMutator_PerkSystemMutator",
    "FortAthenaMutator_RoundHelper": "AFortAthenaMutator_RoundHelper",
    "FortAthenaSimpleCar": "AFortAthenaSimpleCar",
    "FortHoagieAudioController": "AFortHoagieAudioController",
    "FortNevadaAudioController": "AFortNevadaAudioController",
    "FortPlayerControllerZone:TriggerHapticsComponent": "AFortPlayerController interface end",
    "FortControllerComponent_AdHocSquads": "AFortPlayerControllerAthena Component added to all players when the AFortAthenaMutator_AdHocSquads mutator is present and active.\nKeeps track of player data like what the player's original team/squad was.",
    "FortPlayerMarkerBase": "AFortPlayerMarkerBase controls the properties of the map marker, including it's material fx and sound.\nThe material variables manipulated in C++ include: SpawnOpacity, SpawnScale, and SpawnScaleVertical.\nMID_Main and MID_Target have to be setup in BP with those variables in their material for the animation to work properly",
    "PetStimuliRepData": "AFortPlayerPetRepState",
    "FortAIPawn:BeingControlledBy": "AFortPlayerState weak pointer for controlling pawn set with SetBeingControlled",
    "FortSafeZoneIndicator": "AFortSafeZoneIndicator",
    "FortSkydivingShadowProxy": "AFortSkydivingShadowProxy is an actor with an instanced static mesh component containing small planes beneath each\ntree on the map to project fake shadows. It shows/hides itself based on whether a locally controlled camera is\nis above/below a configurable altitude.",
    "FortTankVehicleAudioController": "AFortTankVehicleAudioController",
    "FortValetAudioController": "AFortValetAudioController",
    "FortVehicleAudioController": "AFortVehicleAudioController",
    "GameplayEffectVolume": "AGameplayEffectVolume: A bounding volume which applies a gameplay effect on the Fort Player Pawn while within its bounds and removes it once it exits.\nEach Fort Player Pawn is affected at any time by one PhysicsVolume.",
    "FortWeapon:GameplayAbilityBehaviorDistanceData": "AI Behavior specific distance data.",
    "EDeathCause.BasicFiend": "AI Deaths",
    "FortControllerComponent_CreativeDebugger:AIDebuggerClass": "AI Debugger Class that will be used to handle the AI debugging",
    "EFortAIDirectorFactor": "AI Director factors derived from AI Director Event data",
    "FortGameModeZone:AIDirector": "AI Director.",
    "FortGameModeZone:AIGoalManager": "AI Goal Manager.",
    "EncounterGoalSelectionTableEntry:RequiredGameplayTags": "AI Pawn must have all of these Gameplay Tags in order to use this Goal Selection Criteria.",
    "GoalSelectionQueryInfo:RequiredGameplayTags": "AI Pawn must have all of these Gameplay Tags in order to use this Goal Selection Query.",
    "PawnGoalSelectionTableEntry:RequiredGameplayTags": "AI Pawn must have at least one of these Gameplay Tags in order to use this Goal Selection Criteria.",
    "CharacterTypePreset:SpawnerData": "AI Spawner Data that will be spawned for this character preset",
    "FortAthenaMutator_Mash:AISpecialEncounter": "AI encounter data used when spawning AI special encounter AIs using the old style AI.",
    "FortAIBaseLootDropRow:AITags": "AI must have all of these tags for this row to apply to them. Tags are entered in a ; delimited list",
    "FortAILootDropModifierRow:AITags": "AI must have all of these tags for this row to apply to them. Tags are entered in a ; delimited list",
    "MMRSpawningDataTableInfo:AISpawnerData": "AI to Spawn",
    "FortRangedWeaponStats:EQSDensity": "AI: Density of EQS positioning query",
    "FortRangedWeaponStats:MaxPreferredRange": "AI: Max optimal range for shooting behavior",
    "FortRangedWeaponStats:MaxPreferredRangeEQS": "AI: Max optimal range for shooting behavior (used by EQS)",
    "FortRangedWeaponStats:MaxApproachRange": "AI: Max range for approaching behavior",
    "FortRangedWeaponStats:MaxActualRange": "AI: Max range for shooting behavior",
    "FortRangedWeaponStats:MinPreferredRange": "AI: Min optimal range for shooting behavior",
    "FortRangedWeaponStats:MinPreferredRangeEQS": "AI: Min optimal range for shooting behavior (used by EQS)",
    "FortRangedWeaponStats:MinApproachRange": "AI: Min range for approaching behavior",
    "FortRangedWeaponStats:MinActualRange": "AI: Min range for shooting behavior",
    "FortRangedWeaponStats:RangeToAutomaticallyAddEnemyPawnGoals": "AI: Range used to add enemies as goals regardless of senses when appropriate as specified by the AI's goal selection generator.",
    "FortAthenaNpcGalileoComponent:PossessedPawn": "AIBotController possessed pawn",
    "FortAICombatTokenProviderComponent": "AICombatTokenProviderComponent : Component that can give tokens used by the UFortAICombatTokenConsumerComponent in order to avoid that too many AIs attack at the same time the same target.",
    "FortAIComponent_Telemetry:CachedAIController": "AIController owner",
    "EFortItemTier.NumItemTierValues": "ALWAYS GOES AT THE END",
    "EFortRarity.NumRarityValues": "ALWAYS GOES AT THE END",
    "SimpleDestructibleProp": "ASimpleDestructibleProp\nAn editor only actor that allows level designers to place 1-hit destructible props throughout the level.\nOnce placed, they should be merged into ASimpleDestructiblePropGroups through the SimpleDestructiblePropGroupBuilder operation.\nThis will merge them into 1 actor that represents a large 2D cell of ASimpleDestructibleProps as lighter weight visual instances.",
    "SimpleDestructiblePropGroup": "ASimpleDestructiblePropGroup is a single actor representing a number of ASimpleDestructibleProps.\nIt can have many UInstancedStaticMeshComponents representing a variety of destructible instances.\nUpon taking damage, it just removes the damaged instances, the actor itself is never destroyed by damage.\n\nThese actors are procedurally generated in SimpleDestructiblePropGroupBuilder.",
    "AgeRatingDisplayData:AgeRatingTextAbbreviated": "Abbreviated text describing the age rating",
    "WeaponItemDefinitionDesignerData:EquippedAbilities": "Abilities added to the owner when this weapon is equipped, used for both triggered abilities and passives that apply on equip",
    "FortMissionStormSafeZone:Abilities": "Abilities held by this storm safe zone",
    "EFortGameplayAbilityActivation.Passive": "Abilities that always apply gameplay effects and/or tags",
    "EFortGameplayAbilityActivation.Triggered": "Abilities that are activated by a trigger",
    "EFortGameplayAbilityActivation.Active": "Abilities that are activated by player actions",
    "ObjectInteractionBehavior:StartInteractionAbility": "Abilities to execute for different operations, these are hard pointers because this class is async loaded on demand via the weapon ref",
    "PendingSpawnInfo:AbilitySetsToGrantOnSpawn": "Abilities to grant the pawn upon its spawning",
    "TempestTornadoForcesComponent:BlockAbilitiesWithTag": "Abilities with these tags will be blocked on pawns while in the tornado",
    "FortOffhandComponent:OffhandEquippedAbilitySet": "Ability Set for offhand item",
    "FortOffhandComponent:OffhandPrimaryAbilitySpecHandle": "Ability handle for Offhand Item Primary Ability",
    "STWDeveloperSettings:DevAbilityKits": "Ability kits to apply by default to heroes during PIE, in addition to their normal ones",
    "FortAthenaMutator_PlayerSettingsBase:AbilitySetOptions": "Ability knobs to propagate from data sources to ability sets spawned through this mutator",
    "SkyfireItemsAndAbilitySet:AbilitySet": "Ability set (which can hold GAs and GEs) applied to the player",
    "FortScoutDrone:StartupAbilitySet": "Ability set given to the Drone at startup",
    "FortAthenaMutator_Skyfire:TeleportAS": "Ability set that contains GAs/GEs related to teleporting. These do not handle the actual teleport, but respond to the TeleportData gameplay events to play visuals, etc.\nThis is removed after TeleportASRemovalDelay seconds after the player has exited the mothership so that the final exit skydive teleport can be handled. (Note: exit skydive visuals not yet implemented)",
    "BuildingGameplayActor:InherentAbilitySets": "Ability sets given to this actor at startup",
    "BuildingGameplayActor:bAllowRidingOnActor": "Ability sets given to this actor at startup",
    "FortAIPawn:SpawnInheritedCharacterAbilitySets": "Ability sets inherited by this character at spawn time",
    "FortAbilitySetDeliveryInfo:AbilitySets": "Ability sets to apply",
    "FortSpawnAIRequest:AbilitySetsToGrantOnSpawn": "Ability sets to grant to the requested spawn",
    "FortAbilityCameraOverrideSettings:CameraOverrideRequesterAbilitySpec": "Ability spec handle of the ability that set this ability specified camera class",
    "FortGlobalEnvironmentAbilityActor:AbilitySystemComponent": "Ability system component for the actor",
    "FortAbilitySetHandle:TargetAbilitySystemComponent": "Ability system component that was targeted by the ability set",
    "TeleportSettings:TeleportAbilityTag": "Ability tag to match with the teleport to leader ability",
    "FortAIPawn:bRootComponentIgnoreQueryPawnCapsule": "Ability targeting will attempt to use root collision cyclinder component (see GetBestTestComponentForTargetSelectionOverlap) instead of the component that generated the overlap, in most cases\nthis is desired but in some cases where pawns have unique shapes and use other capsules for collision (eg shark) ability targeting filters should prefer to use\nthe component that overlapped, rather than the root cyclinder collision. For example, enabling this will allow pickaxe hitting a large capsule on shark to register as a hit\nwhereas leaving this false will have targeting check to see if collision event also collides with root cyclinder capsule.",
    "WeaponItemDefinitionDesignerData:PrimaryFireAbility": "Ability to execute during primary firing of the weapon",
    "WeaponItemDefinitionDesignerData:SecondaryFireAbility": "Ability to execute during secondary firing of the weapon",
    "WeaponItemDefinitionDesignerData:ReloadAbility": "Ability to execute when trying to reload",
    "BuildingGameplayActorConsumable:OnConsumeMontageAbility": "Ability to use for playing the consume montage",
    "RockVehicleAbility_GroundTrails": "AbilityComponent that plays Ground effects from when driving over various surfaces",
    "HomebaseNodeLevel:AbilityKit": "AbilityKit received when node level is active",
    "EUIExtensionSlot.AboveMobileLocalPlayerInfo": "Above Mobile Local Player Health/Shields",
    "EUIExtensionSlot.AboveBacchusEquippedItemReloadWidget": "Above Mobile Reload Weapon widget",
    "FortGameModeOutpost:bCheckNavMeshAvailability": "Above part of unsupported Outpost structure disassembly system for use on zone entry",
    "EFortMinigameEnd.AbandonGame": "Abrupt end with no UI",
    "EFortMinigameEnd.Teardown": "Abrupt end with no UI, minimal cleanup",
    "SkyAtmosphereValues:OtherAbsorption": "Absorption coefficients for another atmosphere layer. Density increase from 0 to 1 between 10 to 25km and decreases from 1 to 0 between 25 to 40km. The default values represents ozone molecules absorption in the Earth atmosphere.",
    "SkyAtmosphereValues:OtherAbsorptionScale": "Absorption coefficients for another atmosphere layer. Density increase from 0 to 1 between 10 to 25km and decreases from 1 to 0 between 25 to 40km. This approximates ozone molecules distribution in the Earth atmosphere.",
    "FortPlayerControllerBoss": "Abstract",
    "DeployableBaseCore": "Abstract Deployable Base Core Actor",
    "FortGamePvPBase": "Abstract base class for all Fortnite PvP game modes",
    "FortDecoPreview_ComponentHarvester": "Abstract base class for generic preview representation of a building actor via component harvesting from a source actor",
    "FortDecoPreview": "Abstract base class for the visual representation of a deco object being previewed for placement",
    "BuildingActor": "Abstract base class that represents something that is part of the building system and is potentially persisted to the world",
    "CurieComponent": "Abstract base component representing a Curie element",
    "BuildingTurretComponent": "Abstract base for components driving turret functionality",
    "EBotMovementState": "Abstract class offering support to evaluators that trigger a BotMoveTo.\nIt gets notified the different movement result the bot move produces and\n offers default base behavior for some of them.",
    "FortPlayerControllerPvE": "Abstract,",
    "FortAthenaArithmeticStateTreeTask": "Abstract/Hidden task used as a base for other arithmetic operation on specific types.",
    "FortSkyTube:OuterMagnetAccel": "Accel applied when pushing toward the inner magnet ring",
    "FortSkyTube:TangentialAcceleration": "Acceleration along tube spline.",
    "FortSkyTube:ExitAcceleration": "Acceleration applied to player pawns when they should be ejected from the tube - directly away from the tube center.",
    "WindSplineComponent:InwardForceOuterRadiusAcceleration": "Acceleration applied when pushing toward the inner ring",
    "SlipperySlopeParams:SlopeForceAcceleration": "Acceleration force while standing on slopes below the player, modified by surface normal.",
    "TornadoConfigEntry:TangentAcceleration": "Acceleration in tangent direction",
    "TornadoConfigEntry:HeightAcceleration": "Acceleration in upwards direction",
    "FortGyroV2Settings:GyroV2AccelerationMode": "Acceleration mode, including an option for old motion acceleration.",
    "EBuildingAttachmentSlot.SLOT_Ceiling": "Accepts ceiling attachments only",
    "EBuildingAttachmentSlot.SLOT_Floor": "Accepts floor attachments and ceiling below",
    "EBuildingAttachmentSlot.SLOT_Wall": "Accepts wall attachments, and corners",
    "EFortTemplateAccess": "Access levels for requests",
    "ESettingType.ColorBlindMode": "Accessibility Tab Settings",
    "EFortTemplateAccess.Normal": "Accessible by all",
    "DynamicXpPlayerSessionTransient:QueuedAccolade": "Accolade IDs that are processing. The xp system is now queued and done in batches.",
    "AccoladeDeviceData:GUID": "Accolade device ID",
    "AccoladePublishData:ID": "Accolade device ID",
    "AccoladeDeviceData:Weight": "Accolade device XP award weight",
    "AccoladePublishData:Weight": "Accolade device XP award weight",
    "AccoladeDeviceData:Description": "Accolade device description",
    "AccoladePublishData:Description": "Accolade device description",
    "AccoladeDeviceData:Name": "Accolade device name",
    "AccoladePublishData:Name": "Accolade device name",
    "DynamicXpSessionAccoladeStats:AccoladeId": "AccoladeId from Name and grouping.",
    "FortBanHammerStrike:AccountId": "Account ID of player to be kicked",
    "AccountIdAndMatchEndData:AccountId": "Account ID of player who earned score",
    "AccountIdAndScore:AccountId": "Account ID of player who earned score",
    "ESettingType.PlayerSurveysAllowed": "Account Tab Settings",
    "ELoginResult.PinGrantTimeout": "Account activation time out",
    "ECreateAccountResult.GenericError": "Account creation failed due another reason",
    "ECreateAccountResult.DuplicateAccount": "Account creation failed due to display name or email conflict",
    "ECreateAccountResult.Pending": "Account creation pending",
    "ECreateAccountResult.Success": "Account creation succeeded and can login to new account",
    "EFortItemType.AccountItem": "Account item, parent of following types",
    "EFortAccountLinkingUIConfig.Default": "Account linking tab won't even show in the UI",
    "EFortAccountLinkingUIConfig.ExternalViewerOnly": "Account linking with login button will show",
    "EFortAccountLinkingUIConfig.FullExternal": "Account linking with message about viewer quests and recommendation to link @ website will show",
    "FortScoutDroneAnalyticsComponent:DBNOCarriedPlayers": "AccountIDs for all the players we carried throughout the match",
    "EFortMinigameTimeAliveTeamTrackingMethod.Accumulate": "Accumulate stat values for each member of the team",
    "FortExposedAssetProviderVersion": "Accumulator for the version hash",
    "EMatchmakingState.AcquiringLock": "Acquire a lock on the world",
    "EFortActionSourceControlCheckoutSuccessCriteria.AlwaysSucceed": "Action always reports success, even if internal errors occur",
    "DynamicUIAllowed:ActionDomain": "Action domain this widget will be part of. Leaving it blank means this widget will not receive inputs.",
    "FortSpecialEventEmoteData:BoundActions": "Action names to bind these emotes to.",
    "EFortBanHammerNotificationAction": "Actions for handling an offending player",
    "EFortPhysicsObjectActivationType.Lazy": "Activate as soon as perf will allow",
    "EFortCurieToggleComponentActivationBehavior.OnValidAttachment": "Activate only if any of the valid application elements apply and then attach to the specified material component; Implies deactivation behavior tied to lifespan of element",
    "FortBotPOIExcludedZoneDataTableRow:bEnabled": "Activate/Deactivate this Excluded Zone",
    "FortCurieToggleComponent:ActivationBehavior": "Activation behavior for the component",
    "EFortPhysicsObjectActivationType.Normal": "Activation type has not been specified",
    "EHurdleState.HurdleOver": "Active Vaulting State",
    "FortPickupEffect:ActiveAlterations": "Active alterations for the item we are proxying (they may affect the visual look of the pickup)",
    "CatalogDownload:Storefronts": "Active catalog entries",
    "Storefront:CatalogEntries": "Active catalog entries in this storefront",
    "FortComponent_Energy:ActiveEnergyChannels": "Active continuous adding/removing of energy per-frame currently, not counting ones that have been newly added\nthis frame, which can be found in NewActiveEnergyChannels.",
    "FortCalendarEventInventoryTransformData:EventCurrencyString": "Active event currency (\"<currency item def asset path>=<grant factor>\")",
    "EventRecord": "Active event record (type + expiry tuple)",
    "ActiveGameplayModifier:Mutators": "Active gameplay mutators",
    "FortAthenaVehicle:ActiveCustomUI": "Active instances of the custom UI for this vehicle",
    "FortCharacterVehicle_Ostrich:ActiveUI": "Active instances of the custom UI for this vehicle",
    "ECloudFileState.Loading": "Active loading from cloud, data is unreliable",
    "ActiveGameplayModifierArray:Items": "Active modifiers",
    "FortQuestDrivenMission:RequiredQuest": "Active quest that is required for this mission to be activated",
    "ECloudFileState.Saving": "Active saving to cloud, data is ok to read from",
    "EFortPartyState.BattleRoyaleMatchmaking": "Actively Battle Royale Matchmaking",
    "EFortGameFeatureState.Loading": "Actively loading into memory, main thread may be blocked",
    "EFortPartyState.Matchmaking": "Actively matchmaking, no destination yet",
    "EFortGameFeature.GameplayAthena": "Actively playing athena",
    "EFortGameFeature.GameplayCampaign": "Actively playing campaign",
    "EFortGameFeature.GameplayCampaignTutorial": "Actively playing campaign tutorial",
    "EFortGameFeature.GameplayCreative": "Actively playing creative",
    "AIRuntimeParametersSmartObjectActivity:ActivityID": "Activity ID",
    "FortAthenaAISmartObjectActivityConfig:ActivityRequirements": "Activity Requirements TagQuery",
    "GameActivityCheck": "Activity checks are for making sure the user can participate in the activity and giving reasons why not.  Initially just\nfor STW, but could be used more generally for other acitivities.",
    "PlaylistToActivityMapping:ActivityId": "Activity id the playlist is mapped to (eg PlaylistName=Playlist_DefaultSolo, ActivityId=BR_Solos)",
    "EncounterVariableSelections_ActorClass": "Actor Class  Encounter Variable Selections",
    "EncounterVarRow_ActorClass": "Actor Class Encounter Variable row",
    "RepGraphActorClassSettings": "Actor Class Settings that can be assigned directly to a Class.  Can also be mapped to a FRepGraphActorTemplateSettings",
    "FortPlayspaceMembershipActorComponent": "Actor Component (not to be placed on a Playspace directly!) that is used to fetch the bound playspace of an Actor.\nA playspace can be bound only if it has a specific tag on itself, as defined with CustomRequiredTagForPlayspace (if not set uses the defaults: 'Playspace.Bindable')\nNotes:\n- this currently does not handle playspace removal nor if the actor moves (which could be implemented via PlayspaceComponent_SpatialActorTracker)\n- actors might be bound to a playspace different from what they are spatially in, this can be an intended gameplay behaviour (ex. AIs bound to a playspace they are going to but are not yet in, or if they got launched out of physically)",
    "FortImpulseHandlerComponent": "Actor Component that adds a UFortAthenaImpulseResponseSet to the actor and responds to FFortAthenaImpulseChangedEvent events.",
    "FortPlayerConversationUIComponent": "Actor Component that takes care of Player Conversation UI. This component goes on the player controller\nonly on the client by nature of the add component game feature action.",
    "BuildingDuplicationData": "Actor Duplication Data for Building Actors",
    "EFortTargetSelectionFilter": "Actor Filter for Target Selection",
    "InhibitorData:Inhibitor": "Actor Inhibitor that owns these settings",
    "FortAIBotDebugActor": "Actor Spawned by UAthenaAIServicePlayerBots to be able to replicate the BotDebugMiniMap, Debug Only",
    "FortAIBotPOIDebugActor": "Actor Spawned by UAthenaAIServicePlayerBots to be able to replicate the BotPOIDebugMiniMap, Debug Only",
    "RepGraphActorTemplateSettings": "Actor Template Settings that can be made and used for multiple different Classes that share the same settings",
    "EFortBuildingInitializationReason.DynamicBuilderPlaced": "Actor Was placed by a DynamicBuilder",
    "VisibilityInfo:Actor": "Actor associated with this visibility info.",
    "FortWeap_EditingTool:EditActor": "Actor being edited by the tool",
    "GasDebuggerMenu:MonitoredActor": "Actor being monitored for debug info",
    "BuildingLayoutRequirement:LayoutRequirementSMActorClass": "Actor blueprint used to define the specific requirements for what must be built here.",
    "FortAthenaMutator_Traverse:TraversePointClass": "Actor class of our check point actor",
    "FortAthenaMutator_Skyfire:TODOverrideActorClass": "Actor class of the TOD Override for Skyfire",
    "BagelScoreData:ActorClass": "Actor class that identifies the scoring event (required only if score event is linked to a specific AI archetype)",
    "MashScoreData:ActorClass": "Actor class that identifies the scoring event (required only if score event is linked to a specific AI archetype)",
    "FortCreativeBudgetLinkedClassInstanceLimit:LinkedActorClass": "Actor class that will share an instance limit with the base ActorClass",
    "FortActorSpawner:ActorClassToSpawn": "Actor class that will spawn.",
    "HighlightObjectData:ActorClassFilter": "Actor class to filter for when doing the radius check.",
    "IndicatedActorDataWithFilter:ActorClassFilter": "Actor class to filter for when doing the radius check.",
    "FortAthenaMutator_RespawnAndSpectateSelect:DefaultSpawnLocationCameraClass": "Actor class used to spawn a camera actor onto the default spawn location (i.e. the storm shield)\n     (this is necessary because the storm shield's root is always at 0,0,0 making it a bad camera.)\n     ONLY used if: bCreateDefaultSpawnLocation == true  AND bShowDefaultSpawnLocation == true",
    "NyxGlassWeaponComponent_Swinging:DisallowedActorClasses": "Actor classes that should be filtered out during normal targeting.",
    "NyxGlassWeaponComponent_Swinging:DirectRaycastDisallowedActorClasses": "Actor classes that should be filtered out during targeting specifically for direct raycast targeting.",
    "MusicSequencerHitComponent:SoundPreloadClassList": "Actor classes to iterate on the level and preload the sound for (needs to implement IFortMusicSequencerInterface).",
    "FortAutoRegisterActorComponent": "Actor component that automatically registers the owning actor with the UFortGlobalActorRegistrySubsystem system when the component begins play.\n    Useful for automatically registering actors with a minimum amount of code/data changes.",
    "FortCustomTickComponent": "Actor component that dynamically determines how often it should broadcast a custom tick delegate, based on properties per net role and platform.\nUseful for ticking certain behaviors at a lower rate to improve perf.",
    "SpecialEventStatComponent": "Actor component that generically allows for the creation, and manipulation, and replication of stats associated with an actor",
    "ValkyrieEditorConfig:bVerseComponentMode": "Actor components limited to special Verse components //, EditAnywhere, Category = General, meta = (DisplayName = \"Verse Component Mode\"))",
    "ActorComponentRecord": "Actor components which implement the ILevelSaveSpawnable interface will be picked up by this system.\n   Properties of those components marked with SaveGame will be serializes.",
    "VoteInitiationActor": "Actor containing a VoteBroadcasterComponent that can initiate a voting scenario by either triggering one itself or\nholding it for another entity to trigger it, such as the mesh network",
    "FortDamageSource:DamageCauser": "Actor dealing the damage",
    "FortAthenaLivingWorldPrefabActorSpawner:ActorDescription": "Actor description of what should spawn on this spawner.",
    "PapayaTimedEvents": "Actor designed to handle TimedEvent execution\n\nEvents are stored on the server and replicated to the clients.\n\nClients will then execute the timed events based on their event time and current playback\ntime based on given MediaPlayer.",
    "EFortWorldManagerState.WMS_Created": "Actor exists, but nothing else",
    "BuildingGridActorFilter": "Actor filter for a building grid",
    "CreativeDeviceCached:ActorPtr": "Actor for this device",
    "CreativeDeviceInfo:ActorPtr": "Actor for this device",
    "CreativeDeviceSubscription:ActorPtr": "Actor for this device",
    "FortControllerComponent_Autofire:AutoFireReticleTarget": "Actor found under the reticle being auto-fired at",
    "FortPlayerController:AutoFireReticleTarget": "Actor found under the reticle being auto-fired at",
    "EFortBuildingPersistentState.Destroyed": "Actor has been destroyed",
    "EFortBuildingPersistentState.Searched": "Actor has been searched but still exists",
    "LootControllerNativeComponent:OutActors": "Actor list to fill asynchronously",
    "FortActorMetadataComponent": "Actor metadata component. It contains information to univocally identify the owner actor's archetype. This archetype\nis defined by the actor's asset and unique set of asset dependencies. Actor archetypes are identified by their\ntemplate ID which is used to associated all relevant metadata. The metadata can be used to estimate the memory\nincurred by adding instances of an actor archetype to the world.",
    "LevelSaveRecordCollectionItem:RecordUniqueName": "Actor name unique within the parent collection.",
    "FortConstructorBASE": "Actor representing the B.A.S.E. of the constructor abilities.",
    "FortEQSPrevisActor:SceneRoot": "Actor scene root component",
    "FortActorTemplateAssetData": "Actor template asset data structure.\n\nIt contains the asset name and instance size of the template and each of its asset dependencies.",
    "FortAthenaAIBotController:BotOwner": "Actor that \"owns\" the bot, can be used to do some logic like killing all bots owns by a specific actor",
    "FortWrapSkeletalMeshActor": "Actor that allows you to preview wraps on a skeletal mesh",
    "WrapPreviewGridActor": "Actor that allows you to preview wraps on a skeletal mesh",
    "FortMatchmakingActor": "Actor that can be interacted with and can bring up the UI for matchmaking",
    "FortHitNotifyContextSettings:DamageCauser": "Actor that causes damage (e.g. weapon, grenade)",
    "EncounterMobAnchor": "Actor that functions as an anchor for Mobs used in Encounters.\nEmpty for now, but useful for locking mob wave anchors to a specific class that we may extend in the future.",
    "FortDynamicBuilder": "Actor that handles building an entire building from a list of actors",
    "FortDynamicBuildingDeconstructor": "Actor that handles building an entire building from a list of actors",
    "FortClientDynamicBuilder": "Actor that handles building an entire building from a list of actors, but is allowed to spawn on client only",
    "FortPlayerController:DamageNumbersActor": "Actor that handles drawing the Damage Numbers",
    "FortRespawnDroneManager": "Actor that handles showing an animated sequence involving a respawn drone that plays when a player respawns through custom means (like an item or a mutator.)",
    "FortAthenaMutator_Cobalt:StormEyeActor": "Actor that handles the storm eye visuals. Spawned at runtime on clients using StormEyeActorClass",
    "FortHitNotifyContextSettings:DamageReceiver": "Actor that is getting damaged",
    "TeamSpottedActorInfo:SpottedActor": "Actor that was spotted",
    "TornadoSimulationData:Actor": "Actor that we are storing info about",
    "FortSnapOnSurfaceComponent:AttachToActor": "Actor to Attach to during the snap.",
    "EventModeFocusActor:Target": "Actor to focus when the player is inside the focus distance",
    "FortAthenaAIBotController:LeashActorToFollow": "Actor to follow if leash is activated",
    "IgnoreCollisionActor:IgnoreActor": "Actor to ignore.",
    "FortBuddyTagListener:Actor": "Actor to listen to.",
    "PhysicsConstantForceData:ForceOrigin": "Actor to verify we are still working the same cluster union",
    "PhysicsConstantForceData:ForceRoot": "Actor to verify we are still working the same cluster union",
    "FortCreativePatrolPath": "Actor use to create a patrol path followable by NPC in Creative",
    "FortAthenaPatrolPath": "Actor use to create a patrolling path followable by NPC",
    "EncounterMobSpawnInfo:EncounterAnchorPoint": "Actor used as a grounding point for a variety of mob  functionality. Features include:\n- If using valid leash radii, the anchor is considered the leash actor to follow for the AI Bot Controller controlling the mob.\n- If using a trigger sphere for enabling the encounter, the anchor is used as the center point for the sphere\n- If using a volume LWM point provider, the anchor's transform is carried over to the dynamically spawned volume, so size and location will be applied.",
    "BagelScoreMultiplierInstanceData:Actor": "Actor used for the score multiplier",
    "MashScoreMultiplierInstanceData:Actor": "Actor used for the score multiplier",
    "FabricStepSequencerComponent:ContinuationControlClass": "Actor used to drive continuations",
    "EFortBuildingInitializationReason.LoadedFromSave": "Actor was loaded from a save state",
    "EFortBuildingInitializationReason.StaticallyPlaced": "Actor was placed in the editor",
    "FortMarkActor:AttachedToActor": "Actor we are attached to",
    "FortControllerComponent_MinimapSpectating:HoveredActor": "Actor we are hovering over in the fullscreen map",
    "DecoPlacementState:LastHitActor": "Actor we hit when tracing for valid placement",
    "VisibilityInfo:VisibilityComponent": "Actor's visibility component for this info.",
    "ActorInstanceRecord:ActorID": "Actor->GetFName() used in old serialization and to spawn actors in editor with a deterministic name.",
    "FortAthenaWorldConditionInstanceData:ActorA": "ActorA in the WorldCondition Schema.",
    "FortAthenaWorldConditionInstanceData:ActorB": "ActorB in the WorldCondition Schema.",
    "FortAthenaWorldConditionInstanceData:ActorC": "ActorC in the WorldCondition Schema.",
    "EncounterVariable_ActorClass": "ActorClass EncounterVariable",
    "AthenaNavPresenceDetectorComponent": "ActorComponent that checks if one or more AthenaNavMesh is/are available under the owner's location.\n\n   It will initially broadcast NavMeshPresenceDetected or NavMeshPresenceDetected to tell if there is\n   proper NavMesh under owner's location (with bWasDetectedBefore/bWasUndetectedBefore = false).\n\n   If a NavMesh is not there, it will listen to newly computed nav tiles and if ever that NavMesh\n   become valid under the owner's location, we will broadcast the NavMeshPresenceDetected event once all the NavMeshes are detected (with bWasUndetectedBefore = true).\n\n   If bDisableUponNavMeshPresence = false, if NavMesh is present, it will continue listening to newly computed nav tiles and if ever the NavMesh\n   becomes INVALID under the owner's location, we will broadcast the NavMeshPresenceUndetected event (with bWasDetectedBefore = true).\n\n   @note: if NavmeshNameToUse is None, it wills check against all existing AthenaNavMesh. See AthenaNavSystem.h for navmesh names to specific if needed.\n   @note: if bDisableUponNavMeshPresence is True, the component Unregisters and so stops observing NavMesh changes and will not refire the NavMeshPresenceDetected/NavMeshPresenceUndetected events.",
    "FortVolume:TimerWidgetActors": "Actors extending FortTimeWidgetInterface instanced in the volume",
    "TempestTornadoForcesComponent:TagsToIgnore": "Actors marked with any of these tags will be ignored by the tornado",
    "FortCreativePhotoModeCamera:SavedActorGuid": "Actors spawned in the Editor Client will have a SaveGUID applied.",
    "CreativeRoyalePlayspaceComponent_LevelReset:SavedDeadActors": "Actors that Died that need to respawn at the start of the next round/game",
    "MilkshakeEarthquakeActor:AsyncOverlappedActors": "Actors that are considered within the earthquake.\nActors are determined to be in the earthquake via an AsyncOverlap call in BP. AsyncOverlap_ProcessHitActors (BP) is called each time\nthe async overlap hits an actor and adds that actor to the array (if they don't already have the earthquake tag). Actors are removed\nfrom the array if they are no longer within the earthquake via RemoveAsyncOverlappedActorsOutsideRadius which is called from BP each time an AsyncOverlap finishes.",
    "DeployableBasePlot:DeferredConstructionActors": "Actors that are in a deferred spawn state, awaiting a call to finish spawning them",
    "FortPoiSwapPlayspace:SpawnedActors": "Actors that make up the loaded user content spawned by the level save component",
    "FortFallTeleportComponentBase:TeleportOnBlocklist": "Actors that we are NOT allowed to teleport onto",
    "CreativeRoyalePlayspaceComponent_LevelReset:SavedDamagedActors": "Actors that were Damaged that need to respawn at the start of the next round/game",
    "CreativeFunctionalTest:CreatedDevices": "Actors that were spawned or level streamed in from the DeviceMap.",
    "BuildingGameplayActorAbilityDeliveryInfo:DeferredTouchActorsToProcess": "Actors that were touched and have been deferred by a frame to process; This handles cases where the actor touches before being fully initialized",
    "LevelSaveBaseComponent:ActorToAddAfterWrite": "Actors to add after writing.",
    "FortCheckPointCosmeticActor": "Actors used to mark checkpoints on a AFortCheckPointSplineActor\nThese checkpoints are cosmetic ONLY and should NOT have any gameplay logic",
    "FortCreativeLinearMoverComponent:ActorsToIgnoreDuringMovement": "Actors we encountered that we want to ignore during movement. Most likely due to prop mover being set to continue on prop collision",
    "BuildingGameplayActorLaserGrid:IgnoreActorTags": "Actors with any of these tags are ignored by the laser.",
    "FortNevadaVehicle:AlwaysAllowedBeamTags": "Actors with these tags will be allowed to be tractor beamed even if they have a DiallowedBeamTag",
    "FortNevadaVehicle:DisallowedBeamTags": "Actors with these tags won't be able to be tractor beamed",
    "BagelObjectiveAreaInstanceData:AreaActor": "Actors within the area (including multiple actors like spawn machine, fire, etc.)",
    "MashObjectiveAreaInstanceData:AreaActor": "Actors within the area (including multiple actors like spawn machine, fire, etc.)",
    "CustomCharacterPartModifier_TripleScoopBackpack_Common:IdlePlayerSpeed": "Acts as a minimum input speed for the player",
    "GunGameGunEntries:Entries": "Actual array of entries.",
    "ChatOptionData:ChatText": "Actual chat message corresponding to this option",
    "SquadChatOptionData:ChatText": "Actual chat message corresponding to this option",
    "DynamicUIAllowed:LayerIDOverride": "Actual layer value used in the engine.",
    "FortGameplayDataTrackerComponent:FullEventsToTrackList": "Actual list of events to track after combining manually configured events and auto added ones from tracked actor states",
    "FortAthenaMutator_BasicLimitedLives:LiveData": "Actual live respawns count - either team or player",
    "EFortBudgetType.Live": "Actual used budget",
    "FortAthena_WaxToken:ReusedSpline": "Actually updated and used to drive spline movement, no need to be present in UI.",
    "EFortCurieNativeFXType.Max": "Add an extra value to know where tag based options can start",
    "EPawnLaunchMinVelocityApply.Min": "Add min velocities for forward and vertical to the existing calculated velocities for launching a pawn",
    "EStimType.Unknown": "Add new one here",
    "EStatMod.Delta": "Add the given value to the existing value already stored in the stat. The most common modification.",
    "EAthenaMutatorEvaluators.Add": "Add the mutator value to the existing value",
    "EStatTeamAggregateFunction.Add": "Add the stat value for all team members (eg damage done)",
    "FortConditionalIncludeTags:IncludeTags": "Add these additional tags",
    "VideoWidgetConfig:bShouldBeModal": "Add widget to the modal stack",
    "ELevelSaveRecordVersion.AddedHardReferenceTracking": "Added FActorTemplateRecord::ActorDataHardReferences and FActorComponentRecord::ComponentDataHardReferences",
    "ELevelSaveRecordVersion.AddedDataHeaderSize": "Added FActorTemplateRecord::DataHeaderSize and FActorComponentRecord::DataHeaderSize",
    "ELevelSaveRecordVersion.AddedCrossReferenceSaving": "Added PropertyToActorGuid and ComponentRecordPropertyToActorGuid to support actor cross reference saving",
    "EUIExtensionSlot.InventoryScreenTab": "Added as an additional major tab on the inventory screen",
    "EUIExtensionSlot.InventoryPanelSubTab": "Added as an additional sub tab on the inventory panel",
    "EUIExtensionSlot.TeammateStatusPortraitOverlay_IGM": "Added as an overlay on the portrait of each teammate status widget in the in-game-menus (match recap, ready up, etc)",
    "EUIExtensionSlot.TeammateStatusPortraitOverlay": "Added as an overlay on the portrait of each teammate status widget in the top left of the screen",
    "EUIExtensionSlot.TeammateOverHealthbarOverlay": "Added as an overlay on the top of the team mate healthbar",
    "EUIExtensionSlot.TeammateOverShieldbarOverlay": "Added as an overlay on the top of the team mate shieldbar",
    "EUIExtensionSlot.TeammateStatusPortraitUnderlay": "Added as an underlay on the portrait of each teammate status widget in the top left of the screen",
    "ELevelSaveRecordVersion.AddedIslandTemplateId": "Added creative island template id",
    "RuntimeOptionPlaysetPropActorPath": "Added define to disable replay demo key binds in shipping builds due to FORT-488614",
    "FortVehicleAimingWeaponComp:HorizAimRotDelta": "Added for \"servo\" audio.  Tracks the horizontal Rotation delta in degree.  Value will be between -180 to 180",
    "FortVehicleAimingWeaponComp:VertAimRotDelta": "Added for \"servo\" audio.  Tracks the vert Rotation delta in degree.  Value will be between -90 to 90",
    "ELevelSaveRecordVersion.AddedLevelSaveTags": "Added level save tags.",
    "ELevelSaveRecordVersion.AddedSubobjectSerialization": "Added support for serializing owned subobjects (e.g., for verse)",
    "EUIExtensionSlot.MainMenuButtonListFrontEnd": "Added to Main Menu button list in the Front End",
    "EUIExtensionSlot.MainMenuButtonListInZone": "Added to Main Menu button list in zone",
    "FortControllerComponent_TeamPawnColor": "Added to player controllers via AFortAthenaMutator_TeamPawnColor to add color effects to pawns based on which team they are on.",
    "EUIExtensionSlot.PrimaryQuickBarSlot": "Added to primary quick bar slots on the HUD",
    "EUIExtensionSlot.InventoryEquipSlot": "Added to quickbar equip slot on the inventory panel",
    "EUIExtensionSlot.DynamicOverlayLobby": "Added to the Dynamic Overlay in the Front End Lobby",
    "EUIExtensionSlot.DynamicOverlayFrontEnd": "Added to the Dynamic Overlay on entire FrontEnd",
    "EUIExtensionSlot.NPCStatusWidgetAboveBars": "Added to the NPC status widget 'above bars' section",
    "EUIExtensionSlot.NPCStatusWidgetBarsPrefix": "Added to the NPC status widget 'bars prefix' slot",
    "EUIExtensionSlot.AbovePlayerIndicatorWidget": "Added to the Player Indicator widget 'above' section",
    "EUIExtensionSlot.HUDEquippedItemInfo_Ammo": "Added to the equipped item info AMMO section shown on the HUD next to the quick bars",
    "EUIExtensionSlot.HUDEquippedItemInfo": "Added to the equipped item info shown on the HUD next to the quick bars",
    "EUIExtensionSlot.InventoryItemInfoContents": "Added to the item info panel on the inventory screen below the item name",
    "EUIExtensionSlot.InventoryItemInfoBelowItemType": "Added to the item info panel on the inventory screen below the item type",
    "EUIExtensionSlot.InventoryItemInfoInspectPreview": "Added to the item info panel on the inventory screen while in preview [unexpanded] mode",
    "EUIExtensionSlot.PostMatchXPRecap": "Added to the overlay on the Post match xp recap screen",
    "EUIExtensionSlot.RightOfTeammateStatusBars": "Added to the right of each team mate status bars widget in the top left of the screen",
    "EUIExtensionSlot.RightOfTeammateStatus": "Added to the right of each team mate status widget in the top left of the screen",
    "EUIExtensionSlot.PostMatchXPRecap_RightSide": "Added to the right side on the Post match xp recap screen",
    "EUIExtensionSlot.PostMatchXPRecap_TopLeft": "Added to the top left side on the Post match xp recap screen",
    "EUIExtensionSlot.MobileHUDUnderMinimap": "Added under the Mobile Minimap in-game container",
    "EUIExtensionSlot.SidebarPanels": "Added under the Sidebar panel list",
    "ELevelSaveRecordVersion.LowerCloseThresholdForDuplicates": "Adding CVar for how close Buildings need to be to be considered in the same location",
    "ELevelSaveRecordVersion.AddedLevelStreamedDeleteRecord": "Adding FLevelStreamedDeleteActorRecord to track LevelStreamed changes.",
    "ELevelSaveRecordVersion.AddedLevelInstance": "Adding Level Instance to support embedded LSRs",
    "ELevelSaveRecordVersion.AddingScale": "Adding Scale",
    "ELevelSaveRecordVersion.AddingVolumeInfoRecordsMap": "Adding Volume info actor array for custom volume actors",
    "ELevelSaveRecordVersion.AddedConfigForNonSaveGameProperties": "Adding config for any non saveGame property to be saveable.",
    "ELevelSaveRecordVersion.AddingVolumeGridDependency": "Adding contextual information about volumes to enforce grid placement",
    "ELevelSaveRecordVersion.AddingDataHash": "Adding hashed data bytes for corruption detection.",
    "ELevelSaveRecordVersion.AddedNavmeshRequired": "Adding if Navmesh is required or not",
    "ELevelSaveRecordVersion.AddedPersistenceRequired": "Adding if Persistence is required or not",
    "ELevelSaveRecordVersion.DependenciesFromSerializedWorld": "Adding the dependencies from the serialized world so that the cooker find all necessary assets",
    "FortRangedWeaponStats:AIAdditionalSpreadForTargetMovingLaterally": "Additional AI weapon spread based on the AI's target moving laterally.",
    "AlterationMapping:AdditionalAlteration": "Additional AID.",
    "MissionVehicleSpawnSet:OccupiedLocationAdditionalContextTags": "Additional Context Tags to pass along when applying the GE to a queried location actor when the vehicle is occupying it",
    "PlayerLODViewConeHysteresisConfig:AdditionalObserverVisionAngleDeg": "Additional Deg to add on to all FPlayerLODViewConeConfig::ObserverVisionAngleDeg to provide Hysteresis at their current LOD Level\n(to prevent dropping down in LOD Level too quickly). This resulting angle will be clamped to 360.",
    "FortPartyMemberRepData": "Additional FN-specific replicated party member info",
    "FortCosmeticVariantPreview:AdditionalItems": "Additional Items the skin might have.",
    "EFortActivityIsLockedReason.K3SOtherSetting": "Additional K3S setting is blocking this mode",
    "PlayerLODViewConeHysteresisConfig:AdditionalRadius": "Additional Radius to add on to all FPlayerLODViewConeConfig::ViewConeMaxRadius and FPlayerLODViewConeConfig::AlwaysVisibleRadius\nto provide Hysteresis at their current LOD Level (to prevent dropping down in LOD Level too quickly)",
    "BuildingContainer:AdditionalPickupTags": "Additional Tags to add to pickup items from this container",
    "FortPawn:AdditionalPickupTags": "Additional Tags to add to pickup items from this pawn",
    "FortMinigame:AdditionalUIExtensions": "Additional UI Extensions not controlled by the tag-system",
    "ELevelSaveRecordVersion.AddedVkPalette": "Additional Vk modules to provide placeable content",
    "FortRewardActivity:AdditionalCompletionMissionPoints": "Additional completion-based mission points that were granted from activity completion",
    "CreativeAudioComponent": "Additional component that handles the AudioComponent on an Audio Player Device",
    "FortActiveSubscription:Metadata": "Additional data that is needed for ActiveSubscription information. Contains the following fields:\norderId: SamsungGalaxyStore orderId of the purchase",
    "FortFollowCam_Settings:TurnDeadZone": "Additional deadzone to help player run forward without unintentionally turning the camera (0-1).",
    "EFortUIFeature.ShowAccountBoosts": "Additional features",
    "FortServiceTransactionInfo:bPriceWasDiscounted": "Additional flags indicating whether this Cost was discounted from its 'original' value",
    "TornadoConfigEntry:EjectionBoost": "Additional force applied to objects when they are ejected",
    "RiderDismountLaunchVelocity:DismountVelocityBaseForwardVelocity": "Additional forward velocity",
    "QuestCategoryButtonOverrides:ExtensionImage": "Additional image on the right side of the button",
    "FortItemViewSettings:MeshBoundsCenterOffset": "Additional mesh offset to bounds center",
    "FortAIPawnUpgradeData:AdditionalModifiers": "Additional modifiers applied with this upgrade",
    "BuildingSMActor:NavObstacles": "Additional navigation obstacles, some actors will auto generate entries here!",
    "RandomDayphaseFX:AltParticleSystems": "Additional particle systems to randomly choose from. The particle system used will be a random one from this list plus ParticleSystem",
    "FortGamepadAdvancedOptions:LookVerticalBoostSpeedAds": "Additional pitch look speed applied on max stick deflection (when aiming down sights).\nRange is [0, 100] percent.",
    "FortGamepadAdvancedOptions:LookVerticalBoostSpeed": "Additional pitch look speed applied on max stick deflection.\nRange is [0, 100] percent.",
    "SidewaysStateComponent_Player:ExtraCorruptionRadius": "Additional radius to add to the actual Sideways bubble radius to extend the material FX beyond the edge of the\nbubble.",
    "FortTaggedSoundCue:Requirements": "Additional requirements to play or prevent the playing of this sound",
    "AthenaBattlePassOffer:ChainedRewardItemList": "Additional rewards granted as part of this offer",
    "RiderDismountLaunchVelocity:DismountVelocityBaseRightVelocity": "Additional right velocity",
    "FortItemViewSettings:CameraRotationOffset": "Additional rotation to be applied to the camera.",
    "FortAnimNode_PredictiveStrideWarping:SpeedScalingScaleBiasClamp": "Additional scaling, offsetting and clamping of PlayRate input.\nPerformed after PlayRateBasis.",
    "FortAnimNode_SpeedWarping:SpeedScalingScaleBiasClamp": "Additional scaling, offsetting and clamping of PlayRate input.\nPerformed after PlayRateBasis.",
    "ELevelSaveRecordVersion.DuplicateNewActorRecordsRemoved": "Additional step to remove duplicate actor records from bad user files.",
    "ELevelSaveRecordVersion.StartOfResaveWhenNotLatestVersion": "Additional step to resave the spawned actors when our save version is behind.",
    "FortAICloudVortex:VortexRing": "Additional swirly effects near the base of the tornado.",
    "AutoGoalCardData:RequiredQuestTag": "Additional tag that, if set, must appear on the quest to be grouped under this card\nIf unset, all quests NOT applied to other auto goal cards under this Type/SubType will be applied to this one",
    "InteriorAudioDictionaryEntry:Tags": "Additional tags",
    "FortQuestObjectiveStatTableRow:AlternateTemplateIds": "Additional templates used with Mcp events to set what template to look for. Can also be a raw Type with no colon",
    "FortRangedWeaponStats:SpreadDownsightsAdditionalCooldownTime": "Additional time to reach minimum downsights spread multiplier after the camera transition has completed",
    "FortAthenaMutator_Cobalt:RoundStartWidgetSequenceAdditionalDelay": "Additional time we want to add to the timer of the round start widget sequence.",
    "UserOptionDefinition:MetaData": "Additional type-specific meta-data used to define this option.",
    "RiderDismountLaunchVelocity:DismountVelocityBaseUpVelocity": "Additional up velocity",
    "FortAthenaAIBotDigestedTargetHeuristicSettings:ThreatDamageWeight": "Additional weight from target hurting bot -> TotalWeight += (WEIGHT + Multiplier * Square(AccumulatedReceivedDamage)) * TimeSinceLastDamage.GetValueAtLevel(TimeSinceLastDamage)",
    "FortAthenaAIBotDigestedTargetHeuristicSettings:ThreatDamageWeightMultiplier": "Additional weight from target hurting bot -> TotalWeight += (Weight + MULTIPLIER * Square(AccumulatedReceivedDamage)) * TimeSinceLastDamage.GetValueAtLevel(TimeSinceLastDamage)",
    "FortAthenaAIBotDigestedTargetHeuristicSettings:ThreatTimeSinceLastDamageMultiplier": "Additional weight from target hurting bot -> TotalWeight += (Weight + Multiplier * Square(AccumulatedReceivedDamage)) * TIMESINCELASTDAMAGE.GetValueAtLevel(TimeSinceLastDamage)",
    "FortAthenaAIBotTargetHeuristicSettings:ThreatTimeSinceLastDamageMultiplier": "Additional weight from target hurting bot -> TotalWeight += (Weight + Multiplier * Square(AccumulatedReceivedDamage)) * TIMESINCELASTDAMAGE.GetValueAtLevel(TimeSinceLastDamage)",
    "FortAthenaAIBotTargetHeuristicSettings:ThreatDamageWeight": "Additional weight from target hurting bot -> TotalWeight += WEIGHT + Multiplier * Square(AccumulatedReceivedDamage) * TimeSinceLastDamage.GetValueAtLevel(TimeSinceLastDamage)",
    "FortGamepadAdvancedOptions:LookHorizontalBoostSpeedAds": "Additional yaw look speed applied on max stick deflection (when aiming down sights).\nRange is [0, 100] percent.",
    "FortGamepadAdvancedOptions:LookHorizontalBoostSpeed": "Additional yaw look speed applied on max stick deflection.\nRange is [0, 100] percent.",
    "FortTheaterRuntimeData:MissionAlertCategoryRequirements": "Additional, category specific requirements for mission alerts",
    "EDestroyActorsAndComponentsMutator_ComponentNameComparisonType.AdditionalStatNameContains": "AdditionalStatObject()->GetName().Contains()",
    "EDestroyActorsAndComponentsMutator_ComponentNameComparisonType.AdditionalStatNameEquals": "AdditionalStatObject()->GetName().Equals()",
    "EDestroyActorsAndComponentsMutator_ComponentNameComparisonType.AdditionalStatNameStartsWith": "AdditionalStatObject()->GetName().StartsWith()",
    "FortPawn:AdditiveCringeCount": "Additive Cringe count, client only",
    "FortPawn:AdditiveCringeDuration": "Additive Cringe duration",
    "FortLocomotionAnimSet:CrouchAdditiveLean": "Additive Leans",
    "FortAnimInput_WeaponAdditiveAnimAsset:TargetingAdditivePoseOffset": "Additive Pose when aiming down sights",
    "FortAnimInput_WeaponAdditiveAnimAsset:RelaxedAdditivePoseOffset": "Additive Pose when holding weapon relaxed",
    "FortAnimInput_WeaponAdditiveAnimAsset:RelaxedWhileSprintingAdditiveAnim": "Additive Pose when holding weapon relaxed and sprinting",
    "FortAnimInput_WeaponAdditiveAnimAsset:RelaxedWhileCrouchSprintingAdditiveAnim": "Additive Pose when holding weapon relaxed and sprinting while crouched",
    "FortAnimInput_WeaponAdditiveAnimAsset:NonTargetedAdditivePoseOffset": "Additive Pose when weapon at ready",
    "FortTimeOfDayManager:AltitudeAdjustments": "Additive changes to specific properties based on elevation of the player camera. These are additive and blend on top of other time of day settings. They are blended before storm modifiers.",
    "FortTimeOfDayManager:AltitudeAdjustmentsForSecondFog": "Additive changes to specific properties based on elevation of the player camera. These are additive and blend on top of other time of day settings. They are blended before storm modifiers.",
    "DifficultyRowProgression:AdditiveDifficultyMod": "Additive mod to apply to the difficulty row, based on tier",
    "FortTierCollectionLayoutOutput:AdditiveDifficultyMod": "Additive modifier to apply to game difficulty",
    "FortAnimInput_StandingPawnAnimAsset:UpperBodyAdditivePoseOffset": "Additive pose applied on the upper body, typically used to correct the attachment bone. This can be left empty.",
    "FortAthenaCreativePortal:TeleportExitDistance": "Additive value to the attribute calculation, added in after the coefficient applies",
    "FortQuestIconComponent": "Adds a mini map / in-world icon to the owning actor, driven in sync with the state of the quest/objective owned by that actor. Whilst not active, the icon will be inactive. Whilst active, icon shown.",
    "RespawnAndSpectatePlayerComponent": "Adds a replicated PlayerComponent to players in games that use the RespawnAndSpectateSelect mutator\nKeeps track of the player's respawning state and respawn time on the server and the client",
    "FortControllerComponent_CreativeFunctionalTest": "Adds a suite of functional test utility functions to a FortPlayerController",
    "FortAthenaMutator_CustomCharacterPartsByKills": "Adds custom character parts to player pawns that have reached a specific kill threshold.\n    Can contain multiple kill thresholds (so players could get cooler and cooler skin unlocks as they reach higher thresholds.",
    "ERollModifierOperation.Add": "Adds from an items weight based on the sign of the modifier magnitude. To subtract, use negative values. Add operation is the ideal way to modify roll values.",
    "ValkyrieEditorSettings:bAddIslandsAsTemplateMaps": "Adds islands as template maps",
    "EPlayspaceCreationType.ChildOfRoot": "Adds itself as a child of the root or has logic within to insert based on its own criteria",
    "EPlayspaceComponentCreationType.Root": "Adds itself onto the root playspace",
    "EPlayspaceComponentCreationType.ByLocation": "Adds itself to whichever playspaces are at the specified location",
    "EPlayspaceComponentCreationType.ByTags": "Adds itself to whichever playspaces fulfill the tag",
    "FortAthenaAddGameplayTagsStateTreeTask": "Adds or remove, or both, gameplay tags to an actor.\nBy default will add on enter and remove on exit, but can also be used to remove on enter and add on exit or as a one off to do only add or only remove on enter.\nMust be stopped by a transition if running the add and remove mode.\nNote: if the provided tags is empty, will succeed without doing anything.",
    "TornadoConfigEntry:HeightAccelerationVariance": "Adds some random variance per-object to the height acceleration\nHeightAcceleration will be within (HeightAcceleration, HeightAcceleration * (1 + Variance))",
    "TornadoConfigEntry:HeightVelocityVariance": "Adds some random variance per-object to the height velocity\nTargetHeightVelocity will be within (TargetHeightVelocity, TargetHeightVelocity * (1 + Variance))",
    "TornadoConfigEntry:TangentAccelerationVariance": "Adds some random variance per-object to the tangent acceleration\nTangentAcceleration will be within (TangentAcceleration, TangentAcceleration * (1 + Variance))",
    "TornadoConfigEntry:TangentVelocityVariance": "Adds some random variance per-object to the target tangent velocity\nTargetTangentVelocity will be within (TargetTangentVelocity, TargetTangentVelocity * (1 + Variance))",
    "EValueCostCalculationMethod.InstancePayload": "Adds the entered InstancePayloadValue to the instance cost",
    "BuffetFaceAccGravityOverrideInput": "Adjusted from Gravity Override Input Struct in Buffet Body",
    "FortWeapon:TimerIntervalAdjustment": "Adjustment to handle frame rate affecting actual timer interval.",
    "EFortQuestObjectiveItemEvent.HasAccumulatedItem": "Advance the objective if the player has the specified item when the quest is granted",
    "EFortQuestObjectiveItemEvent.HasItem": "Advance the objective if the player has the specified item when the quest is granted",
    "FortObjectiveFilter_DestroyBuilding:VehicleFilter": "Advanced filter to check against the vehicle\n       * Only used if require In Vehicle and Use Advanced Vehicle Filter are both true",
    "FortObjectiveFilter_QuestUpdated:QuestDefinitions": "Advanced filter to match or prevent certain quest definitions",
    "AthenaPostMatchScreenContainerTabInfo:AutoAdvanceToTabID": "Advances to the next tab if available after the panel is ready",
    "BuildingProp_CreatureManager:SelectedAffectedTargetsType": "Affected Targets Option",
    "FortActorComponent_Affiliation:GameplayOwnerAffiliationComponent": "Affiliation component of current gameplay owner",
    "FortDeliveryInfoRequirementsFilter:ApplicableTeamAffiliation": "Affiliation to apply the effects to, if bConsiderTeamAffiliationToInstigator is true",
    "IndicatedActorDataWithFilter:WithAffiliation": "Affiliations to the local player that we will filter for.",
    "FortAthenaVehicle:ServerCriticalHealth": "After 0HP - we can take this much more damage before exploding.",
    "DynamicXpCircuitBreaker:BankXpRemovalMult": "After N seconds, the XP Bank is diminished.",
    "DynamicXpCircuitBreaker:BankXpRemovalTimeIntervalSecs": "After N seconds, the XP Bank is diminished.",
    "EFortMinigameSpawnPadSelection.Random": "After all viable locations are found, select randomly from the list.",
    "EFortMinigameSpawnPadSelection.NearTeammates": "After all viable locations are found, select spawn pad on list that is near Median position of the teammates (excluding yourself)",
    "FortMovementComp_Character:NetworkSmoothingVisibilityThreshold": "After character mesh is invisible for this amount of time or longer, use a delay between smoothing.",
    "BuildingActorClassData:LifespanAfterDeath": "After death, the actor will persist in the world for this amount of time in seconds, unless it was asked to instantly die. You should only need to change this is you are doing something special that involves death animations",
    "FortMovementComp_Character:SlideTimeUntilReset": "After leaving a sliding surface, turn off sliding after this amount of time. Keep this non-zero to avoid rapid state changes on small bumps.",
    "EMusicClipSyncOptions.AssumeTimeAuthority": "After starting become the emitter's current Time Authority. Should be used along with a Timeline Mapping and/or an unmute point.",
    "DigestedPerceptionStateSettings:ForgetTime": "After that time passed since receive a stimulus, bot forget this target (-1 = never)",
    "PerceptionStateSettings:ForgetTime": "After that time passed since receive a stimulus, bot forget this target (-1 = never)",
    "FortAthenaMutator_SynchronizedTeleport:TeleportFailsafeRetryTime": "After the failsafe timer, if no players have finished teleporting, then check repeatedly\nwith this amount of time until at least one player has finished",
    "EFortMinigameState.PostGameTimeDilation": "After the game during time dilation.",
    "SpecialEventCursorMode:MaxAdditiveRotationYaw": "After the horizontal cursor location exceeds MinCursorPercentForAdditiveRotationYaw, ease this yaw rotation onto the camera as the cursor approaches the edge of the screen",
    "FortAthenaMutator_Rounds:RoundEndUIDuration": "After the non-full-screen RoundEnd UI appears, wait this long before SetUpNextRound()",
    "FortRespawnDroneManager:PostFinishLifeSpan": "After the respawn sequence has finished how much longer should this actor live before it destroys itself\n     This duration should be enough time for cosmetics to cover up the removal and for the client's camera to be taken over by their newly spawned pawn.",
    "FortAthenaMutator_SpecialEvent:ScoreBrackets": "After the score is adjusted to give a decent goal, these values are used as snapping targets",
    "FortProjectileAthena:PawnHitResult": "After the server has received a hit result from the firing client, this impact hit result will be replicated to all of the other clients so the visuals will match",
    "SpecialEventCursorMode:MaxAdditiveRotationPitch": "After the vertical cursor location exceeds MinCursorPercentForAdditiveRotationPitch, ease this pitch rotation onto the camera as the cursor approaches the edge of the screen",
    "EShowPlacardPhase.PostShowFadeIn": "After we finish showing the screen and fade out, fade back in",
    "ELoginResult.AuthFailed_AgeVerificationIncomplete": "Age Verification process must be completed",
    "BuildingProp_CreatureManager:SelectedOverrideAggroDistance": "Aggro Range value",
    "FortGamepadSettings:EditModePullStrengthMovingNewTile": "Aim assist pull when moving between tiles in building edit mode",
    "FortGamepadSettings:EditModePullStrengthMovingWithinTile": "Aim assist pull when moving within a tile in building edit mode",
    "FortGamepadSettings:EditModePullStrengthStationary": "Aim assist pull when selecting tiles in building edit mode",
    "FortGamepadSettings:AimAssistTargetSelection": "Aim assist target selection settings",
    "TankWeaponAimingData:AimingMode": "Aiming mode to use. Description of each on the enum values.",
    "TurretCosmeticData:AimingWeaponComponent": "Aiming weapon component",
    "SubmixEffectDynamicReverbSettings:AirAbsorption": "Air Absorption - 0.0 < 0.994 < 1.0 - lower value means more absorption",
    "EAthenaGamePhase.Aircraft": "Aircraft has started and players are spawned from aircraft.",
    "EAircraftLaunchReason.EarlyTimerMostPlayers": "Aircraft was launched after early countdown with > threshold players",
    "EAircraftLaunchReason.EarlyTimerAllPlayers": "Aircraft was launched after early countdown with all players",
    "EAircraftLaunchReason.StdTimerFewPlayers": "Aircraft was launched after standard countdown with < threshold players",
    "EAircraftLaunchReason.StdTimerMostPlayers": "Aircraft was launched after standard countdown with > threshold players",
    "EAircraftLaunchReason.StdTimerAllPlayers": "Aircraft was launched after standard countdown with all players",
    "FortPlayerStateComponent_Quests:CompletedBundles": "All Bundles completed.",
    "ObjectiveExtension_AbilitiesAndEffects:GameplayAbilities": "All Gameplay Abilities you want active while this objective is active",
    "ObjectiveExtension_AbilitiesAndEffects:GameplayEffects": "All Gameplay Effects you want active while this objective is active",
    "PlayerLODViewConeConfig:AlwaysVisibleRadius": "All LOD AI's < than this radius to a player will satisfy the FortAILODLevel. This is not dependent on the ViewCone",
    "EFortFeedbackContext.FFC_AllPawns": "All Pawns should try and say something",
    "EFortPlayspaceMatchmakingRules.AllPlaylists": "All Playlists will accept users to this Playspace unless the current Playlist is in the ExcludedPlaylists list",
    "FortPlayerStateComponent_Quests:CompletedQuests": "All Quests completed. Exported to the backend on the Server, and used for UI on the Client",
    "SparksMusicPlayspace:Interactors": "All SparksPlayspaceInteractors that have been added to this playspace",
    "SparksMusicPlayspace:MusicPlayers": "All SparksPlayspaceMusicPlayer that have been added to this playspace",
    "ESharedQuestScopePolicy.Squad": "All Squad members can participate. Party members who are not squad mates, cannot participate.",
    "AIHotSpot:Slots": "All active slots",
    "KatanaTargetingComponent:DashBlockIgnoreTags": "All actors that have any matching tags with this container will not block the dash (i.e. they will be dashed through).",
    "EFortLevelStreamingState.LSS_UnconditionalFoundationsUpdated": "All always-stream foundations have been streamed in and have been updated.",
    "EFortPlayerMannequinLoadingMode.Asynchronous": "All assets (character parts, variant assets, etc.) are loaded asynchronously",
    "EFortPlayerMannequinLoadingMode.Synchronous": "All assets are loaded synchronously. Only works in editor builds",
    "FortQuickBars:AllCachedTraps": "All cached traps in player's inventory",
    "EInventoryPersistenceMode.Normal": "All changes automatically sent to sidecar on the next tick",
    "EFortCollectedState.Complete": "All completed and player has seen",
    "FortAthenaMutator_Disco:GameMsg_AlliesCapturedAllPoints": "All control points captured by allies",
    "FortAthenaMutator_Disco:GameMsg_EnemyCapturedAllPoints": "All control points captured by enemy",
    "DynamicXpPlayerSession": "All data about a player who is receiving Dynamic XP.",
    "FakeKillRelevancyPhaseData": "All data representing a fake kill phase",
    "DynamicXpPlayerSessionTransient": "All data that should be initialized/reset at start of session.  It already is in a real\na real game, but for testing we reuse FDynamicXpPlayerSession and want to keep its stats\nto simulate saving on MCP.",
    "EHudVisibilityState.FullyHidden": "All elements of gameplay and replay huds are hidden",
    "ConditionalFoundationQuotaTier": "All entries in a tier are chosen at once and streamed in completely before the next tier processed",
    "CreativeDataChannelTarget:EventsCache": "All events we've seen so far. Used to tell if we have already seen an event.",
    "EFortLevelStreamingState.LSS_AllFoundationsUpdated": "All foundations have been updated, and sublevels have been streamed. Loot quotas haven't been applied yet",
    "EFortPointsFromNavGraphGoalPathDistanceFilterOperator.AllGoalsInRange": "All goals must be in range",
    "FortGameUserSettings:Credentials": "All known saved credentials",
    "FortPartySquad:SquadMembers": "All members of the squad - always sized to the maximum possible squad size, so entries CAN be nullptr",
    "FortGameplayMessageDispatcherComponent:EnqueuedMessages": "All messages that will be eventually processed",
    "EFortLevelStreamingState.LSS_NewActorsCreatedButNotUpdated": "All new actors have been created, but data has not been serialized on top of them yet",
    "MutableObjectiveExtension_Gate:ObjectiveGates": "All objective gates to apply with detailed settings per list entry",
    "ObjectiveExtension_Gate:ObjectiveGates": "All objective gates to apply with detailed settings per list entry",
    "FortPlayerController:ManagedAIs": "All of the AIs we manage (ie. Defenders).  Only valid on the server.",
    "TeamSpottedActorInfoArray:SpottedActorInfo": "All of the actors spotted by the team",
    "VisibiltyInfoArray:VisibilityInfoArray": "All of the actors spotted by the team",
    "MeshSet:SearchedMesh": "All of the items below this comment apply only to containers",
    "EFortContentManagementState": "All of the possible states for the content management button (used to determine what to do on click and what to show visually)",
    "FortTeamInfo:TeamSpottedActors": "All of the spotted actors for the team",
    "BattlePassLandingPageButtonDisplayDetails:ButtonTexts": "All of the texts associated with the tile and battle pass screen descriptions",
    "FortUnableToPerformData:FailureTags": "All of these failure tags have to match for the this message to be interpreted as a match.",
    "GameplayTagMessage:Tags": "All of these tags have to match for the this message to be interpreted as a match.",
    "FortPlayerStateAthena:bHidingOtherPlayersNames": "All other player names will be shown as if they were using Anonymous mode",
    "EFortFeedbackSelectionMethod.FFSM_AllPawns": "All pawns can say something, if possible",
    "ESkyfirePhase.AllPlayersExited": "All players have left the mothership and returned to the main map\n(Currently unused since exiting the mothership hasn't been implemented yet)",
    "ERadiusTrackingGroupingType.Squad": "All players on the same squad will use this tracking info. Players on other squads will NOT have access to this data and will have to have their own tracking info",
    "ERadiusTrackingGroupingType.Team": "All players on the same team will use this tracking info. Players on other teams will NOT have access to this data and will have to have their own tracking info",
    "ERadiusTrackingGroupingType.Global": "All players will use the same tracking info for this target. This is a good way to make sure all players receive the same tracking info.",
    "VkModuleVersionWithArtifacts:Artifacts": "All possible artifacts for this module (covers various consumer roles and filters). The first match determines the ArtifactId used for a client.",
    "ESupervisedSettingRestrictionReason": "All possible reasons a setting could be restricted.",
    "EFortGameFeatureState.Preloaded": "All preparatory work done and ready to actively load, main thread will be ticking normally",
    "FortMinigame:MinigameComponents": "All registered components relevant to this minigame",
    "MilkshakeControllerComponent:RegisteredEarthquakes": "All registered earthquakes",
    "FortCosmeticDependentSwapData:SwapRequirements": "All requirements must be met for this swap to be applied",
    "EFortQuestRewardType.BasicRewards": "All rewards are given upon completion",
    "FortGameStateComponent_AffiliationManager:FactionInfos": "All runtime faction information with relationships",
    "PersistenceFrameworkServiceAssetInfo:bAllowNull": "All service settings to be null (empty). Useful in data overrides to clear a tag & setting row.",
    "FortUIZone:SpottedActorIndicators": "All spotted actor indicators; Re-used as a pool, never deleted",
    "EFortWorldRecordState.Failed": "All steps complete, we're done",
    "EValkyrieSubclassRule.All": "All subclasses, both native and BP",
    "BuildingNeighboringActorInfo:NeighboringFloorInfos": "All the building floors/ceilings in a support cell",
    "BuildingNeighboringActorInfo:NeighboringWallInfos": "All the building walls in a support cell",
    "FortEventLevelNavigationActor:CamerasThisNavObjectIsActiveFrom": "All the cameras this actor can be interacted with",
    "BuildingNeighboringActorInfo:NeighboringCenterCellInfos": "All the center cell actors. Most of the time will only hold the generator",
    "GameplayEventListenerData": "All the data needed to identify a listener and unregister it. Contains the callbacks for EventReceived and EventCleared (For Stateful Events)",
    "BagelFriendsLeaderboard:LeaderBoard": "All the different entries to this leaderboard",
    "MashFriendsLeaderboard:LeaderBoard": "All the different entries to this leaderboard",
    "BattlePassLandingPageButtonTexts": "All the different text lines associated with the button (depending on the player state we want to show different texts)",
    "ECreativeDynamicUIAnchor": "All the following types are DynamicUI clones that need to exist due to DynamicUI being a ClientOnly plugin\nwhile the creative devices options need to exist on the server.",
    "FortPawnVocalChord": "All the information needed to define a pawn's vocal chords",
    "EFortQuestState.Completed": "All the quest objectives fulfilled, but rewards not yet claimed",
    "EFortCollectionBookState.Completed": "All the slots filled, but rewards not yet claimed",
    "AthenaSquadPedestalGroup:MemberPedestals": "All the team member pedestals generated by CAC's that are children of PedestalChildrenRoot",
    "ESupervisedSettingsValueType": "All the types that supervised settings could have.",
    "FortRandomPrefabSpawnHelper:AllPrefabs": "All user-set prefabs available for assignment",
    "ESubGameAccessReason.OpenAccess": "All users are allowed to play",
    "EFortVoteArbitratorType.Unanimous": "All voters need to be in agreement",
    "FortItemEntry:WeaponModSlots": "All weapon mod slots currently on this item.",
    "EHudVisibilityState.FullyVisible": "All widgets (game view, and Replay view) are visible",
    "EFortInputActionGroup.AllModes": "AllModes SHOULD mean that the action will span across all modes, with exceptions below.",
    "FortAthenaMutator_Disco:GameMsg_AlliesAboutToWin": "Allies are about to win",
    "EVorbisMemoryScheme.PerStreamStack": "Allocate size bytes stack for every decoding Mogg. This is the original scheme.",
    "FortPlayerController:bDisableNativeDamageNumbers": "Allow BP to enable/disable the native damage numbers",
    "FortPlayerController:bDisableNativeHitMarker": "Allow BP to enable/disable the native hit marker",
    "FortDeveloperSettings:bAllowSlateGlobalInvalidationModeInPIE": "Allow SIG to work in the editor - Currently only works in PIE New Window.",
    "FortPlayerController:MyFortPawnBeforeTakeoverOfScriptedPawn": "Allow TakeoverScriptedPawn cheat to be reverted",
    "FortPlayerController:ScriptedPawnControllerBeforeTakeover": "Allow TakeoverScriptedPawn cheat to be reverted",
    "FortAthenaRiftPortal:IgnoredActors": "Allow actors to be set which should be ignored when the rift is applying gameplay effects",
    "FortAthenaAIBotController:bAllowUnsupportedItemsInDefaultInventory": "Allow bots to have unsupported items as part of its default inventory items",
    "FortMantisTechniqueCharacterSettings:bDetachCharacterRotationFromCamera": "Allow character to rotate freely from the camera while this technique is active.",
    "EFortMinigameState.WaitingForCameras": "Allow clients time to turn cameras back on",
    "DeltaVelocityDamageHandlerData:bEnableMassControl": "Allow configuring damage buckets to scale multiplicatively with object mass",
    "VelocityDamageHandlerData:bEnableMassControl": "Allow configuring damage buckets to scale multiplicatively with object mass. Useless if scaling purely",
    "FortGlobalMission:bAllowInTestMaps": "Allow disabling this mission in test maps that have no theater or the test theater.",
    "ValkyrieMenuRules:AllowExtenders": "Allow extenders in this menu",
    "CameraModeTaggedOverrideEntry": "Allow external systems to override the desired camera mode by tag",
    "FortAthenaMutator_CurieSettings": "Allow for a creative island setting knob to enable / disable curie.",
    "AthenaGameMessageData:MessageFlags": "Allow for modifications to how messages are presented.",
    "FortGameUserSettings:MobileQualitySettingsResetDefaultsGUID": "Allow mobile quality settings to be reset whenever the GUID changes.",
    "ETryExitVehicleBehavior.ForceAlways": "Allow ordinary checks to run, but regardless of which fail we should end up exiting the vehicle.",
    "AthenaDeveloperSettings:bAllowAthenaRespawning": "Allow respawning after death in BattleRoyale.",
    "EFMDeviceCableAnimationQuality.Low": "Allow scalar values",
    "VelocityDamageHandlerData:bScaleLinearlyInOneBucket": "Allow scaling linearly within one bucket",
    "MarshalledVFXAuthoredData:NameReplacements": "Allow separation between scripting and particle param names.",
    "FortGameStateAthena:FocalPointActor": "Allow special events to call attention to a specific actor and targeting players will point their camera towards it.",
    "FortAthenaCreativePortal:OverrideImageURL": "Allow specifying a custom image URL for the portal",
    "FortAthenaPartyRiftPortal:OverrideImageURL": "Allow specifying a custom image URL for the portal",
    "FortPlayerController:WorldInventoryClass": "Allow subclasses to have custom inventory",
    "EFMDeviceCableAnimationQuality.Med": "Allow texture renders",
    "EFortMantisTechniqueAnimationType.AnimInstance": "Allow the anim instance to handle the animation for this technique. Notifies from any animation sequence (not montage) will be processed.",
    "FortPlayerParachute:ParachuteHiddenAnimFinishTime": "Allow the parachute animation to tick for this many seconds after hidden, to ensure state is clean for next potential opening.",
    "FortPlayerControllerAthena:WinScreenDelayTime": "Allow the winner to run around for a bit before we take away input",
    "FortWeightedActorTypeList:WeightedClassTypes": "Allow this check to be used for checking both absence and/or presence of a certain value threshold",
    "ThresholdTestConfig:Requirement": "Allow this check to be used for checking both absence and/or presence of a certain value threshold",
    "FortGameplayCueSpawnCondition:bRequireVisible": "Allow this to not spawn if it is outside the screen, do not enable for long lasting effects",
    "FortAthenaLivingWorldEncounterStage:bAllowRandomMaximumActorCount": "Allow to dynamically change the MaximumActorCount each time this stage is started.",
    "FortLevelStreamComponent:bAllowUnload": "Allow unloading the playspace. Defaults to true.",
    "PlaysetLevelStreamComponent:bAllowUnload": "Allow unloading the playspace. Defaults to true.",
    "InteractionType:RequestingPlayerController": "Allow us to specify a player controller that can be different to the owner of the requesting pawn. Used by live spectators.",
    "RequestStyleParams:StyleSpecificationMethod": "Allow various methods by which to specify the desired style",
    "ObjectInteractionBehavior:InteractionClasses": "Allowed Classes for this specific Interaction Behavior set",
    "FortAthenaLivingWorldDespawnCondition:TimeAsCandidateBeforeDespawnDeviation": "Allowed random deviation on TimeAsCandidateBeforeDespawn.",
    "BotPOI:Usage": "Allowed usage of this BotPOI",
    "BotPOIDebugInfo:Usage": "Allowed usage of this BotPOI",
    "FortNonPlayerConversationParticipantComponent:ServicePricingKeyRemappingsTable": "Allows any NPC to specify 'redirects' for service pricing keys to allow for bespoke pricing in special cases\ne.g. \"HireNPC\" -> \"HireNPC.Specialist.Medic\". Can be set directly, or resolved from season data",
    "EFXType": "Allows blueprints and other code to specify a high-level category for FX so that we can filter them.",
    "EFortMantisBranchRule.Starter": "Allows branching only to techniques that start a sequence.",
    "EFortMantisBranchRule.Any": "Allows branching to any valid technique.",
    "DynamicXpCreatorAccoladeTuning": "Allows content creator to decide which accolades to have more or less importance than than other accolades. More important accolades give more XP.\nMapped to a list of Creator Facing knobs that defines how important this Accolade is relative to the other Accolades.",
    "EQuestSpecificationMethod": "Allows control of how the user wants to specify the quest to be tested",
    "UrgentQuestSettings:DeathFailurePolicy": "Allows control over what happens (if anything) in the case of participant death",
    "AthenaLavaFloor": "Allows customizations to lava floor independent of AAthenaFillFloor.",
    "FortScriptedObjectMovement_Slot:ObjectRemoveOrder": "Allows designer rough approximation of order slots should have their objects removed from. Acts essentially as a priority.\nAll slots with the same order position can have their objects be taken in and order. Objects from slots with lower values are taken first.\nConsider RemoveOrder 1 as \"removed first\" and RemoveOrder 2 as \"removed second\"; though what is removed first really depends all values in the structure.",
    "VehicleSpecificUIDetails": "Allows designers the ability to specify vehicle specific UI elements",
    "FortGameFeatureActionParameters_AddVehicleModData": "Allows designers to set up which mods a plugin exposes for use by vehicles.",
    "ScriptedActionVariant": "Allows for a tagged action to be implemented by the actor the cosmetic operates on",
    "SafeZoneLocationParams:ForceDistanceMin": "Allows for forcing the new location to be a minimum distance from the AnchorLocation. ForceDistanceMax must be greater of equal than this value for it to work.",
    "SafeZoneLocationParams:ForceDistanceMax": "Allows for forcing the new location to be within a maximum distance from the AnchorLocation if using ForceDistanceMin",
    "RuntimeFuelUsageInfo": "Allows for modifying how quickly a vehicle uses fuel during runtime",
    "MegaStormManager:GridRadiusCellOffset": "Allows global pushing in/out of grid cells calculated from the radius.",
    "CubeMovementStaticPath:TravelerCorruptionStepPercentOverrides": "Allows hand tweaking of point group step percentages for paths that cannot be easily processed at editor time.",
    "FortAnalyticsEventDenylistEntry": "Allows hotfixability of analytics events. You can denylist an event for a specific PlaylistName or PlaylistType (EFortGameType).\nSpecify the denylist type entry, then set the playlist (or type) in the PlaylistKey member,\nfollowed by the EventName and the probability of sending it. 0 == Never send, 1 == always send.\nPlaylistNames are more specific, so take precedence over a similar entry for an event in a given playlist type.\nSpecified as an array to allow hotfixes to incrementally add entries to Denylist.\nWhen loaded at runtime, these are converted to associative containers for faster lookup.",
    "ValkyrieAnalyticsEventDenylistEntry": "Allows hotfixability of analytics events. You can denylist an event for a specific PlaylistName or PlaylistType (EFortGameType).\nSpecify the denylist type entry, then set the playlist (or type) in the PlaylistKey member,\nfollowed by the EventName and the probability of sending it. 0 == Never send, 1 == always send.\nPlaylistNames are more specific, so take precedence over a similar entry for an event in a given playlist type.\nSpecified as an array to allow hotfixes to incrementally add entries to Denylist.\nWhen loaded at runtime, these are converted to associative containers for faster lookup.",
    "FortMovementComp_Character:VelocityBasedBackupCurve": "Allows limiting the backup rate based on the current normalized velocity in the range of [0, 1] taking the max speed into account.",
    "FortMovementComp_Character:VelocityBasedStrafeCurve": "Allows limiting the strafe rate based on the current normalized velocity in the range of [0, 1] taking the max speed into account.",
    "FortMovementComp_Character:VelocityBasedTurnCurve": "Allows limiting the yaw rate of the pawn based on the current normalized velocity in the range of [0, 1] taking the max speed into account.",
    "EMarkableResult.Markable": "Allows markers to attach to this actor",
    "FortAthenaMutator_EnvironmentalDamage:TeamDamageFilter": "Allows or dis-allows damage by certain players",
    "BuildingActor:NavigationObstacleOverride": "Allows overriding bIsDynamicObstacle flag of colliding static mesh components",
    "FortCreativeTimerObjective:MaintainInteractionWhileLookingAround": "Allows players who are interacting with this device to look around without cancelling interaction.",
    "FortPlayerController:bShouldAttemptReloadOnEquip": "Allows plugins to request a reload to begin as soon as the weapon is equipped",
    "FortSurfaceTypeToSurfaceTypeTag:bAllowsSurfaceRetriggerOfEvents": "Allows retrigger of surface change events everytime we land on this surface consecutively",
    "EFortMissionAudibility": "Allows specifying if missions objective success or failure events are audible.",
    "PlayspaceConfigComponent": "Allows specifying playspace specific configuration settings, in this case, the player component",
    "EUIExtensionSlot.Primary": "Allows the UI extension to provide a custom widget that's inserted in the primary slot of the HUD overlaying all\nstandard (persistent) HUD content, things like the compass, health bar, team view, minimap are in this layer.",
    "ItemCollectorRow:OverrideRarity": "Allows the corresponding item collector to override its rarity color",
    "ItemCollectorRow:bUseOverrideRarity": "Allows the corresponding item collector to override its rarity color",
    "ItemCollectorRow:OverrideGoal": "Allows the corresponding item collector to override the goal(Cost for vending machines)",
    "ItemCollectorRow:bOverrideLootRules": "Allows the corresponding item collector to override the standard loot rules",
    "BuildingActorEditorSettings:bAllowLevelEditorToDisableCellSnap": "Allows the level editor's grid snapping button to disable editor cell snap",
    "FortDeployableBaseManager:bRestrictedBuildingActive": "Allows the manager to restrict building or not",
    "EMarkableResult.Continue": "Allows the mark trace to go through the actor as if it wasn't there",
    "EMarkableResult.MarkableWithoutAttaching": "Allows the marker to snap to this actor, but stay at that location without following the actor around",
    "FortPawnMaterialScalarOverride": "Allows the pawn to define a simple override to a scalar material parameter that persists even when character parts\nchange.\n\nUsed in 22.00 to apply the chrome effect to the character material.",
    "BuildingItemCollectorActor:OverrideGoal": "Allows this Building Item Collector Actor to override the goal(Cost for vending machines) for this Collector Actor",
    "BuildingItemCollectorActor:bUseInstanceLootValueOverrides": "Allows this Building Item Collector Actor to override the loot rules per instance",
    "FortCharacterCustomization:FootstepBankOverride": "Allows this gadget to override the footstep audio of the owning character when equipped",
    "FortSourceWorldAndOverlayWorld:bSpecifySourceWorld": "Allows this level overlay to be attached to a specific level, or allow it to be attached to the default root world.",
    "BuildingItemWeaponUpgradeActor:UpgradedWeaponRarity": "Allows to read the weapon rarity that was just upgraded, this is to allow cosmetic changes (flashing lights / VFX on players)",
    "BuildingItemWeaponUpgradeActor:InteractionTimeUncommon": "Allows to set different interaction times for weapon Rarity if needed - Common -> UnCommon",
    "BuildingItemWeaponUpgradeActor:InteractionTimeVeryRare": "Allows to set different interaction times for weapon Rarity if needed - Rare -> VeryRare",
    "BuildingItemWeaponUpgradeActor:InteractionTimeMythic": "Allows to set different interaction times for weapon Rarity if needed - SuperRare -> Mythic",
    "BuildingItemWeaponUpgradeActor:InteractionTimeRare": "Allows to set different interaction times for weapon Rarity if needed - UnCommon -> Rare",
    "BuildingItemWeaponUpgradeActor:InteractionTimeSuperRare": "Allows to set different interaction times for weapon Rarity if needed - VeryRare -> SuperRare",
    "FortBotVisitedDynamicPOI": "Allows to store how many times the squad has visited a BotPOI",
    "FortInputActionThatShouldAlwaysBeBound": "Allows us to specify actions that are so important that they must be bound.",
    "FortInputActionGroupContext": "Allows us to specify information about generic input actions",
    "FortInputActionKeyAlias": "Allows us to specify information about generic input actions",
    "FortMinigameSettingsBuilding:bUseCustomMatchmakingSettings": "Allows you to override the generated matchmaking properties derrived from various game rules. While this value is false, the matchmaking values update dynamically with game rules.",
    "FortObjectiveFilter_BuildingRepair:ResourcesSpent": "Allows you to set a min / max amount of resources spent during this event to count for objective progress.",
    "FortAthenaMutator_Disco:GameMsg_AllyCapturePointLost": "Ally control point lost",
    "EHealthBarType.Armor": "Alpha Shield/Tactical Overshield",
    "NativeCurieFXTypeSettings:GlowFadeInCurve": "Alpha multiplier curve for fading in a Curie glow color",
    "NativeCurieFXTypeSettings:GlowFadeOutCurve": "Alpha multiplier curve for fading out a Curie glow color",
    "FortSplineGroundPath:PositionFinalizedParameterName": "Alpha that goes from 0 to 1.0 as the position transitions from the source to its final position.",
    "FortPlayerControllerOutpost:PostDepositedResources": "Already deposited resources in POST replicated from dedicated server",
    "EMatchConditionMutatorTeamStatus.Placed": "Already placed or disconnected in a previous segment of the match.  Never counted again as winning or losing.",
    "FortPlayerController:CachedFortPawn": "Also caching the parent type for cases where we might be controlling a non player pawn and still want to pass some events through to the pawn.",
    "FortMinigame:FullStatChangedDelegate": "Also invoked when stat changes occur, for anyone who wants to know all of the params of the changed stat (didn't want to force all users to add all these type dependencies)",
    "FortMovementComp_Character:bProjectNavMeshOnDestructibleChannel": "Also use Destructible channel for NavWalking geometry conforming. Needed if in your setup GeometryCollection, or in general destructible actors can be walked on",
    "AlterationWeightSet:WeightData": "Alteration weight data.",
    "FortObjectiveFilter_Acquire:ItemTemplates": "Alternate Assets whose Template Ids will be used by mcp to check for accumulated progress on quest grant",
    "FortWeapon:ImpactNiagaraPhysicalSurfaceEffectAssets": "Alternate Niagara versions to play for weapon attacks against specific surfaces",
    "FortWeaponPickaxeDualWieldAthena:OffhandImpactNiagaraPhysicalSurfaceEffects": "Alternate Niagara versions to play for weapon attacks against specific surfaces",
    "DagwoodActionDefForUI": "Alternate action prompt text for the Dagwood.",
    "BuildingSMActorClassData:AlternateMeshes": "Alternate meshes that may be used by the actor at runtime",
    "FortGliderLayeredAudioFloatParam": "Alternate to FFortLayeredAudioFloatParam, offering a cut down subset of relevant properties",
    "FortGliderLayeredAudioOneshotGate": "Alternate to FFortLayeredAudioOneshotGate, offering a cut down subset of relevant properties",
    "FortCloudSaveRecordInfo:ArchiveNumber": "Alternates between 0 and 1, used to set which is the \"current\" file, used for double buffering",
    "FortWeapon:CurrentGunFireIndex": "Alternates between each gunshot so we can use Channel A/B for single-fire",
    "LeaderboardEntry:DisplayedAlternativeTrackedStat": "Alternative tracked stat to display at the Match History modal.",
    "LeaderboardEntry:DetailsPanelAlternativeTrackedStats": "Alternative tracked stats to display at the Details panel.",
    "LeaderboardEntry:MatchHistoryAlternativeTrackedStats": "Alternative tracked stats to display at the Match History modal.",
    "ConditionalBenefitsConfig:GeneralConditionalBenefits": "Alternatively, some conditional benefits may always want to be checked for in isolation, simply based on conditions being met. e.g. \"TOD: Night / TOD: Day\"\nThey do not require Prerequisite benefits to be conferred. May still make use of \"PreviousBenefitsRemoved\" for more complex setups",
    "EBuildingActorComponentCreationPolicy.Always": "Always a component when this actor is created. More efficient for actors where you know it will always need one.",
    "EFortBuildingInitializationReason.None": "Always at the end",
    "ControlPointInstanceData:bAlwaysInPlay": "Always enables/disabled",
    "AthenaDeveloperSettings:bForceDBNO": "Always make eliminated players DBNO first even if there are no surviving squadmates.",
    "EFortVisibilityBehavior.Invalid": "Always seen",
    "EFortCreativeDiscoveryDeterminism.Always": "Always select.",
    "FortCosmeticModification:AmbientNiagaraSystem": "Ambient niagara system override for this alteration",
    "FortCosmeticModification:AmbientParticleSystem": "Ambient particle system override for this alteration",
    "EFortAthenaTutorialSubstep.ScreenReachLocation": "Ambush",
    "FortBaseWeaponStats:AmmoCostPerFire": "Ammo cost per weapon fire",
    "EKeepContainerType.AmmoStash": "Ammunition",
    "AthenaMatchXpMultiplierGroup:Amount": "Amount in percentage points\n  positive ones are additive bonuses: all multiplier bonus percentage points are summed, then added to 1.0 and pre-multiplied into all XP amounts\n  negative ones are global penalty multipliers on the final total amount",
    "FortWeaponComponent_RecoilCurve:TargetingMult": "Amount multiplier for recoil amount when targeting.",
    "FindActorByClassData:Price": "Amount needed to purchase this.",
    "FortAthenaLivingWorldManager:RegisteredPointProvidersCount": "Amount of Point Providers that are currently loaded (not necessarily registered as an active spawn location)",
    "FortXpRewards:LevelUpXp": "Amount of XP rewarded from the quest as a result of gaining a level up token",
    "AthenaReengagementRestedXp:RestXPGained": "Amount of XP to gain",
    "DynamicXpSessionAccoladeStats:GrantedXp": "Amount of XP we are granting, if any",
    "DynamicXpProfileStats:BucketXp": "Amount of XP we calculate player have in this current timespan window.  Some might have carried over from XpBank.",
    "FortGamepadSettings:AimAssistStrengthDBNO": "Amount of aim assist applied when aiming at DBNO player",
    "FortGamepadSettings:AimAssistStrengthDownsights": "Amount of aim assist applied when aiming downsights",
    "FortGamepadSettings:AimAssistStrength": "Amount of aim assist applied when aiming normally",
    "FortGamepadSettings:EditModeSlowMaxStrength": "Amount of aim assist slow applied to desired turn rate when target is at maximum distance. (0 = none, 1 = MAX)",
    "FortGamepadSettings:SlowMaxStrength": "Amount of aim assist slow applied to desired turn rate when target is at maximum distance. (0 = none, 1 = MAX)",
    "FortGamepadSettings:EditModeSlowMinStrength": "Amount of aim assist slow applied to desired turn rate when target is at minimum distance. (0 = none, 1 = MAX)",
    "FortGamepadSettings:SlowMinStrength": "Amount of aim assist slow applied to desired turn rate when target is at minimum distance. (0 = none, 1 = MAX)",
    "FortAimAssist2D_Settings:SlowInnerStrengthAds": "Amount of aim assist slow applied to desired turn rate when target is under the inner reticle. (0 = None, 1 = Max)",
    "FortAimAssist2D_Settings:SlowInnerStrengthHip": "Amount of aim assist slow applied to desired turn rate when target is under the inner reticle. (0 = None, 1 = Max)",
    "FortAimAssist2D_Settings:SlowOuterStrengthAds": "Amount of aim assist slow applied to desired turn rate when target is under the outer reticle. (0 = None, 1 = Max)",
    "FortAimAssist2D_Settings:SlowOuterStrengthHip": "Amount of aim assist slow applied to desired turn rate when target is under the outer reticle. (0 = None, 1 = Max)",
    "FortGameModeAthena:ScoreForGettingAtLeastOneKill": "Amount of bonus score for getting at least one kill; must be kept in sync with MCP Java code!",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:DamageForStormCapMarking": "Amount of damage dealt which will result in a player getting marked for death due to Storm Cap (equal or less than this value)",
    "PlayerDamageData:Damage": "Amount of damage dealt.",
    "FortVerbMessage_KillContribution:DamageDoneToPawn": "Amount of damage done by this contributor",
    "BuildingSMActor:LastDamageAmount": "Amount of damage received in the last damage event",
    "FortPlayerDeathReport:LethalDamage": "Amount of damage that dealt the lethal blow",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:StormCapDamagePerTick": "Amount of damage to deal every \"TimeBetweenStormCapDamage\" amount of time",
    "FortAthenaMutator_OnDmgDamageSelf:DamageToDeal": "Amount of damage to deal to ourselves when we deal damage",
    "EnergyChannelingData:EnergyPerSecond": "Amount of energy added (if positive) or removed (if negative) per second.",
    "FortOctopusVehicle:BounceContactRepulsionForce": "Amount of force applied at contacts when in bounce mode",
    "FortSpaghettiVehicle:BounceContactRepulsionForce": "Amount of force applied at contacts when in bounce mode",
    "BuildingTrapFloor_Hoverboard:PushAmount": "Amount of force applied to the player when they enter the trap",
    "OctopusInPersistent:BoostForce": "Amount of force to apply when boosting.",
    "FortGameFeatureSize:FreeSpace": "Amount of free space on disk",
    "FortGameFeatureSizeDetailed:FreeSpace": "Amount of free space on disk",
    "FortWeaponComponent_RecoilCurve:HorizRecoilMult": "Amount of horizontal recoil, multiplied with the curve vector result.",
    "FortMovementLeans:SettlePercentage": "Amount of lean to remove when settling (i.e. 0.35 will result in a final lean weight of 0.65)",
    "AthenaDynamicRestedXpProgression:Accumulated": "Amount of rest XP the user has accumulated",
    "FortGameModeAthena:ScoreForSubsequentRevives": "Amount of score gained for additional revives performed on a team mate (if mode allows it), up to MaxAdditionalRevivesToScore times; must be kept in sync with MCP Java code!",
    "FortGameModeAthena:ScorePerScaledTeamKill": "Amount of score gained for how many kills a player's team has, but scaled on team size; must be kept in sync with MCP Java code!",
    "FortGameModeAthena:ScoreForFirstRevive": "Amount of score gained for the first revive performed on a team mate (if mode allows it); must be kept in sync with MCP Java code!",
    "FortAIPawnStats:ScoreValue": "Amount of score points this AI is worth",
    "ScorePlacementTable:Solo": "Amount of score that each placement is worth",
    "FortGameModeAthena:ScorePerMinuteAlive": "Amount of score you earn per minute (up until MaxMinutesAliveForScore minutes); must be kept in sync with MCP Java code!",
    "FortAthenaMutator_Wax:TimeConsideredRecentForUI": "Amount of seconds ago that define the period of \"recently fired\".",
    "FortScoutDrone:LifespanAfterDeath": "Amount of seconds before drone destruction when out of health",
    "FortAnimInput_TurnInPlace:EmoteYawOffsetSofteningOutputRange": "Amount of softening to apply at the yaw offset ranges defined by EmoteYawOffsetSofteningInputRange. A value of 1.0f means the character turns one-to-one with the camera. Higher values\nmean the character will only partially turn with the camera.",
    "VehicleRuntimeModifiers:MaxTimeZeroHealth": "Amount of the the vehicle can remain at zero health before getting destroyed",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:DelayForStormCapDamage": "Amount of time (in seconds) after the hold phase starts to start delivering damage to players",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:DelayForStormCapWarning": "Amount of time (in seconds) after the shrink phase starts to display a storm cap warning",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:TimeBetweenStormCapDamage": "Amount of time (in seconds) between damage delivery",
    "ThreatCloud:ActiveTransitionTime": "Amount of time (in seconds) that it takes the minimap icons to change from inactive to active (or vice-versa).",
    "ControlPointInstanceData:BonusPointAccrualTime": "Amount of time accumulating bonus points since last point accrual",
    "ControlPointInstanceData:PointAccrualTime": "Amount of time accumulating points since last point accrual",
    "FortControllerComponent_Interaction:ClearActorPendingNonInteractionTime": "Amount of time after a pending non-interaction actor is set before it is cleared.\n     This timer allow an item we thought was already picked up to be interacted with again if the item still exists after this time",
    "FortLobbyBeaconPlayerState:LobbyTimeRemaining": "Amount of time all players have left in the lobby",
    "BuildingTrap:DelayBeforeDestroyAfterDurabilityExpired": "Amount of time before destroying this trap when out of durability",
    "DynamicTapDelayInfo:DelayLength": "Amount of time before this echo is heard in milliseconds.",
    "ExitCraftInfo:SpawnDestructionDelayBetweenPieces": "Amount of time between each broken piece before the next piece gets broken (helps performance)",
    "VehicleRuntimeModifiers:MaxTimeSelfDestructCleanup": "Amount of time between self destruction and vehicle cleanup",
    "VehicleRuntimeModifiers:MaxTimeExplosion": "Amount of time between vehicle reaching zero health and vehicle exploding",
    "FortAthenaMutator_Heist:BlingCarryingEnemiesVisibleTime": "Amount of time enemies that are carrying the bling will show up on a player's map and compass",
    "FOBSaveFileBuildingInstructionsHandler:BuildingPieceConstructionTime": "Amount of time for building pieces to spend constructing",
    "CreativeAFKDetectionParameters:TimeUntilRemainedAFK": "Amount of time in seconds after the player is confirmed AFK before they're moved to \"remained\" AFK status (used to trigger \"second tier\" of penalties)",
    "CreativeAFKDetectionParameters:TimeUntilConfirmedAFK": "Amount of time in seconds to wait before confirming the player AFK (used to trigger penalties)",
    "OstrichWeapon_RetainedData:RocketsCooldownElapsed": "Amount of time into the rocket cooldown",
    "FortGamepadSettings:GamepadLookScaleDownsightsDecayTime": "Amount of time it takes for downsights look stick scaling to lerp back to standard look scale when exiting aim downsights",
    "FortRangedWeaponStats:AutofireAcquisitionRechargeTime": "Amount of time it takes for the AutofireAcquisitionDelay to recharge to the full time",
    "ExitCraftInfo:ExitCraftTimeToHoverLocation": "Amount of time it takes for the exit craft to move from the ground to its eventual idle location in the sky",
    "ExitCraftInfo:ExitCraftTimeToHoverRotation": "Amount of time it takes for the exit craft to rotate upright when moving from the ground to its eventual idle location in the sky",
    "VehicleRuntimeModifiers:SelfDestructTime": "Amount of time it takes for the vehicle to self destruct",
    "ExitCraftInfo:ExitTime": "Amount of time it will take for the exit craft to reach final height and destroy",
    "FortSafeZonePhaseInfo:StormCampingInitialDelayTime": "Amount of time player must be outside the safe zone before storm camping damage is applied",
    "FortGameModeZone:SpectateAfterDeath_DelayFirst": "Amount of time post-death before the camera switches to spectator mode",
    "FortAthenaMutator_Heist:MinTimeAllowedBetweenAcquiredEnemyMessages": "Amount of time that needs to go by before the enemy acquired jewel message comes back (beginning to beginning)",
    "ActiveGameplayStateData:BeginStateDelay": "Amount of time the new state should separate the InitializeState and BeginState function calls when triggering this state",
    "FortAthenaMutator_Ashton:PromoteNextVillainLeaderDelay": "Amount of time to delay before spawning the next villain leader after the previous one was killed",
    "GameplayStateMachineItem:BeginStateDelay": "Amount of time to delay between the InitalizeState and the BeginState",
    "ExitCraftInfo:ExitCraftSpawnDelay": "Amount of time to delay between when the \"spawner\" has spawned and when the \"exit craft\" will spawn",
    "FortAthenaMutator_Ashton:GameOverDelay": "Amount of time to delay when the last stone is captured and we want to trigger the game over",
    "FortAthenaMutator_SpawningPolicyBase:SpawnFailureLockoutTime": "Amount of time to lockout spawn attempts after a failure",
    "FortAthenaMutator_SupplyDrop:SpawnFailureLockoutTime": "Amount of time to lockout supply drop spawn attempts after a failure",
    "ExitCraftInfo:SpawnDestructionInitialDelay": "Amount of time to wait after the \"spawner\" is created to explode all player build objects from the area",
    "FortGameSession:BulkUnregisterTimerDelay": "Amount of time to wait before doing a bulk unregister",
    "ReplicatedSpawnInfo:MinTimeForCameraFadeTransition": "Amount of time to wait before fading the camera to black on a transition",
    "FortAIDirector:NightEncounterFailureBreatherTime": "Amount of time to wait before starting the default night encounter in Seconds",
    "FortSafeZonePhaseInfo:StormCampingIncrementTimeAfterDelay": "Amount of time until the storm camping damage is incremented",
    "FortPickup:DespawnTime": "Amount of time until this pickup will despawn after being spawned",
    "FortPickup:StormDespawnTime": "Amount of time until this pickup will despawn after being spawned if it is in the storm",
    "GameplayStateTransition:BeginStateDelay": "Amount of time, in seconds, that we want between the initialization of the next state and when it activates (or calls BeginState)",
    "FortAthenaMutator_Wax:TokensToWin": "Amount of tokens a player should collect in order to win the mode.",
    "FortAthenaMutator_Wax:BigTokenAmountForSingleElim": "Amount of tokens in a single elim to count as \"big\"",
    "FortAthenaMutator_Wax:MediumTokenAmountForSingleElim": "Amount of tokens in a single elim to count as \"medium\"",
    "FortGameModePickup_Wax:AmountOfTokens": "Amount of tokens this pickup represents.",
    "WaxPlayerDataEntry:CurrentTeamTokens": "Amount of tokens this team actually has",
    "FortAthena_WaxToken:PayloadCount": "Amount of tokens.",
    "CustomCharacterPartModifier_TripleScoopBackpack_Common:RollingPeriod": "Amount of updates to average together - not strictly frames.",
    "FortWeaponComponent_RecoilCurve:VertRecoilMult": "Amount of vertical recoil, multiplied with the curve vector result.",
    "ECatalogSaleType.AmountOff": "Amount off",
    "FortDepositedResources:Quantity": "Amount that has been deposited",
    "FortTouchAimAssistSettings:AutofireTargetSizeReduction": "Amount that target bounds are shrunk for autofire targets.",
    "UtilityData:PenaltyFallOffRate": "Amount the Recently Selected Penalty reduces per second",
    "FortQuestObjectiveCompletion:Count": "Amount to change count by",
    "InteractionImpulseData:DamageImpulseScale": "Amount to weight the incoming damage when applying the modifier to the impulsemagnitude",
    "FortSubmixAnalyzerData:ScalarParameters": "Amplitude parameters to map analysis data to (float)",
    "BuildingProp_DamageProxy": "An ABuildingProp that sends damage events it receives to its owning ABuildingActor.\n    This allows the owning ABuildingActor to use this ABuildingProp's health and hitbox for damage.\n    It also allows for an ABuildingActor to indirectly exploit ABuildingProp features (example: pickaxe weakpoints.)",
    "EAirCraftBehavior.OpposingAirCraftForEachTeam": "An Aircraft is created for each team coming from opposing directions.",
    "FortCharacterCustomization:AnimBPClassOverride": "An Anim BP that will completely replace the one the player currently has",
    "FortMissionRecord:ObjectiveRecords": "An Array that holds all of the Objective Records",
    "EncounterVariableSelections": "An Encounter variable selections is used as a base class for an instanced struct for random variables chosen for an encounter\nEach variable has a name and an associated data table used to make a random weighted choice from all valid entries (after checking requirements and conditions)",
    "CreativeOptionCategoryData:CategoryTag": "An FName used to determine what category this is for comparing in code, etc.",
    "ELoginResult.ConnectionFailed": "An HTTP request failed, possibly due to an uplink disconnect",
    "PropertyOverrideRepl:PropertyId": "An ID for the scoped property, composed of the scoped name hash and data hash",
    "VerseFortniteUIFrameworkSliderValue:ClientID": "An ID to ensure that when this info is replicated to the client we can know if it is still relevant: it could be the result of a change sent by the client to the server,\nand more recent changes could be on their way. The goal of that is to avoid the client slider to change back to a value it had in the past, resulting in jump when using auto repeat.",
    "VerseFortniteUIFrameworkSliderValue:ServerID": "An ID to ensure that when this info is send back to the server, we can know if it is still relevant: if it was send by an outdated client,\nwe will ignore it to avoid overriding a value set from server Verse UI code.",
    "ConversationGiftTypeDefinition": "An Interaction Gift Config, details some beneficial effect(s) which can be rewarded\nto a participant when interacting with a given NPC for the first time in a given match.\nGifts themselves may also have requirements which must be satisfied in order for it to be\nan eligible choice (e.g. a gift of health is only useful if the player has some health missing etc)",
    "FortHeroGameplayPiece": "An ability gameplay 'piece'.  Used to grant hero abilities based on simple requirements.",
    "FortSpecializationSlot": "An ability specialization slot. Used to grant hero abilities within a specialization once their requirements are met.",
    "PrototypeCraftingOutput:UtilityFloat": "An abitrary value that users can use for whatever they want.",
    "FortAutoMarkableActorComponent": "An actor component for actors that implement or otherwise use IFortMarkableActorInterface.\n    When added to a IFortMarkableActorInterface this class will automatically add/remove player markers on clients when a player pawn enters/exits the collision set using SetAutoMarkCollisionComponent().\n    This makes it quick and easy to implement showing markers based on player overlap.\n    Currently ONLY supports client side markers. Players will still be able to manually mark the owning actor which will add markers on the server which are handled separate from markers added on the client via this component.",
    "EFortAthenaLivingWorldEventRuntimeDeactivationReason.ActorDescDoesntMatchAnySpawnerData": "An actor description tag query matches at least one LWP and one normal actor and that isn't supported.",
    "WeaponModManagerMeshActor": "An actor in the world that is spawned to hold the instanced static mesh components.\nThe actor itself is essentially invisible. But the components have instances that are moved to weapon mod locations.",
    "FortWeapon:LockOnTargetCandidate": "An actor which could be used as a lock on target",
    "EFortQuestRewardType.BasicPlusSingleChoice": "An additional single reward is selected from the additional rewards upon completion",
    "FortAthenaMutator_SpecialEvent:AdditionalViewpoint": "An additional viewpoint we can place in the world to start streaming",
    "EFortSocialPlatformTagDisplayRule": "An alias to EPlatformIconDisplayRule summarized from the general usage of various widgets.",
    "FortWeapon:ReticleAltOuterImage": "An alt outer reticle image for use in addition to the center reticle",
    "FortWeapon:ReticleAltCenterImage": "An alt reticle center image",
    "PhysicsConstantForceData:DragAreaApproximation": "An approximation of the surface area of the object for the applied drag",
    "ReplicatedStreamingProperties:StreamingDevices": "An array containing all registered device",
    "FortGameModeAthena:TeamAlivePlayers": "An array in which we are able to store teams that are still alive.\nThe size of this array is setup to be equal to the number of possible teams in the game mode.\nThis size is calculated and set in the AFortGameModeAthena::InitializeTeams() function based on the playlist values.",
    "FortAIDirector:RegisteredAISpawners": "An array of AI spawners in the world. This is used in creative to prioritize building navigation around these actors first.",
    "FortScriptedActionManager:PendingAvailableScriptedActions": "An array of actions that will soon be moved to Available, after the current event queue is finished",
    "FortMissionManager:MissionUIActors": "An array of actors that mission information is associated with",
    "FortAthenaMutator_AthenaLoadouts:Loadouts": "An array of all of our loadout assets",
    "FortAthenaMutator_TeamPlacement:TeamsInfo": "An array of all of the teams data. Not sorted",
    "FortObjectiveBlock:ObjectiveEntries": "An array of all the entries used to define an Objective and it's loot",
    "FortMissionManager:Missions": "An array of all the missions",
    "DaySequenceBindingReferenceArray": "An array of binding references",
    "UserOptionDefinitionClassSlotMetaData:ClassTypeEntries": "An array of class type entries mapped to their display names.\n@note This data is synced from the class type enum and filtered against ClassTypesToShow and ClassTypesToHide, so should be set there.",
    "FortClientAnnouncementManager:ClientAnnouncements": "An array of client announcements",
    "FortScriptedActionManager:ActiveScriptedActions": "An array of currently alive action actors",
    "FortScriptedActionManager:AvailableScriptedActions": "An array of currently registered actions that could potentially be triggered",
    "FortMissionTimerComponent:DisplayData": "An array of display data",
    "SpecialRelevancyMultiSquadControllerGroupsContainer:ControllerGroups": "An array of groups of controllers that should, combined, contain all of a FSpecialRelevancyGroup's Controllers",
    "FortAthenaMutator_Wax:NoStormZones": "An array of locations where we don't want the storm to end",
    "PlayerAugmentsPersistenceData:carry_over_player_augments": "An array of player augments carried over from a previous match.",
    "SpecialRelevancyGroup:Controllers": "An array of players that are relevant to each other",
    "FortAthenaMutator_RoundHelper:RoundInfos": "An array of round infos",
    "FortMcpQuestObjectiveInfo:InlineObjectiveStats": "An array of stats which provide progress toward this objective. Each stat accumulates toward the Count proportionally.\nFor example, a single damage done event (one bullet) that does 50 damage increases completion the same amount as 50 emote events,\nwhich each increase the \"number of emotes done\" stat by 1.",
    "UserOptionDefinitionTeamIndexMetaData:TeamTypeEntries": "An array of team type entries mapped to their display names.\n@note This data is synced from the team type enum and filtered against TeamTypesToShow and TeamTypesToHide, so should be set there.",
    "FortAthenaMutator_AI_SignificanceBasedUpdate:SignificanceBasedMovementUpdateManagedComponents": "An array of the movement components that this mutator is managing. Components are also tracked in SignificanceBasedMovementUpdateBuckets.",
    "FortItemEntry:StateValues": "An array of transient State Values pertaining to this item entry",
    "UserOptionDefinitionAssetReferenceMetaData:ValueEntries": "An array of values mapped to their display names.",
    "UserOptionDefinitionClassReferenceMetaData:ValueEntries": "An array of values mapped to their display names.",
    "UserOptionDefinitionColorMetaData:ValueEntries": "An array of values mapped to their display names.",
    "UserOptionDefinitionIconMetaData:ValueEntries": "An array of values mapped to their display names.",
    "UserOptionDefinitionEnumMetaData:ValueEntries": "An array of values mapped to their display names.\n@note This data is synced from the entries within the linked enum type, so should be set there.",
    "UserOptionDefinitionFloatMetaData:ValueEntries": "An array of values mapped to their display names.\nIf bRestrictSliderValues is false, then these will act as optional overrides for the display names within the specified range.\nIf bRestrictSliderValues is true, then these will act as the defined list of available values for this option.",
    "UserOptionDefinitionIntMetaData:ValueEntries": "An array of values mapped to their display names.\nIf bRestrictSliderValues is false, then these will act as optional overrides for the display names within the specified range.\nIf bRestrictSliderValues is true, then these will act as the defined list of available values for this option.",
    "FortAudioToMPCComponent:TempFFTDataArray": "An array used to get the FFT data from a single audio component without requiring allocations every frame. Separate from\nFFTDataArray because TempFFTDataArray will be reset every time it is used in UAudioComponent::GetCookedFFTDataForAllPlayingSounds\n(which could be multiple times per frame), while FFTDataArray contains a running aggregate of FFT data for all tracked components.",
    "BuildingProp_BountyBoard:PlayersGrantedBounty": "An array version of PlayersGrantedBountySet. Used to efficiently replicate player states to all clients.",
    "FortAthenaMutator_TeamPartSwapper:SwapData": "An array, per team, of what parts to swap in and out. Make sure to set bGameplayRelevantCosmeticPart to true on the part!! See Cody Haskell for details",
    "HUDNavArrow": "An arrow that attaches to the camera and points to the destination of a DestinationComponent",
    "NavArrow": "An arrow that points to the destination of a DestinationComponent, and may implement custom animations",
    "FortDynamicBuildingDeconstructor:SortedBuildingActors": "An arrya of sorted building instructions",
    "EValkyrieValidationErrorCode.UnsupportedCustomVersion": "An asset contained a custom version that was newer than what this content worker could use",
    "EValkyrieValidationErrorCode.UnsupportedEngineVersion": "An asset contained an engine version that was newer than what this content worker could use",
    "FortAIDirector:ActiveDummyDebugEncounter": "An empty dummy encounter used to hold debug spawned AI",
    "FortAIDirector:DummyDebugEncounter": "An empty encounter used to hold AI Spawned through cheats",
    "CobaltPlayerPortraitIndexInfo": "An encapsulated array so that we can express a nested container in blueprints",
    "AthenaCarPlayerSlot:bIsOccupantEnclosed": "An enclosed occupant won't be an obstacle to pawns walking on the vehicle",
    "GGCenterDisplayEntry": "An entry for the GG center display.",
    "PlayerAugmentAbilitySetHandlesStackEntry": "An entry in the stack of AbilitySet handles. AbilitySet can have application stack if configured on the PAID.",
    "PlayerAugmentGameplayEffectHandlesStackEntry": "An entry in the stack of GE handles. GEs can have application stack if configured on the PAID.",
    "EFortMtxOfferDisplaySize": "An enumeration to specify size requirements to UI.\nThis enumeration should only be used for UI display styling purposes.",
    "EventObjectiveFilterCache": "An event cache is how event processors actually process registered events.\n* For example, when an event is registered, an event cache is created and registered with\n* the correct corresponding processor. Complex systems like quests register each filter\n* of each objective as a cache. NOTE: Objectives that have multiple filters of the same\n* type will be registered under the same cache - since they will be in the same processor\n* and hook into the same callbacks by default.",
    "FortMantisPawnComponent:OnTechniqueMetadataReady": "An event fired on the client and server after a technique is started when the metadata for the technique has been set.",
    "FortClientEvent": "An event that is sent between UMG widgets or client side blueprints",
    "PegasusTimelineEvent": "An event that occurred in the game. At its basics it has a Tag to describe the event that happened at a high level, a time stamp, and a category.\n* An additional set of tags can be added to add more detail to an event.",
    "ItemCollectorOverrideItemRow:ItemPrimaryAssetId": "An explicit item definition to spawn",
    "BuildingActor:OverridePrimitivesToExcludeFoliage": "An explicit set of primitives to use for bounds calculations when removing foliage",
    "FortRangedWeaponStats:SpreadExponent": "An exponent applied when computing the random bullet direction in order to create a normal distribution of shots",
    "EValkyrieValidationErrorCode.DisallowedObjectType": "An export was discovered in the package that was not in the allow-list",
    "DaySequenceBindingReference": "An external reference to a DaySequence object, resolvable through an arbitrary context.\n\nBindings consist of an optional package name, and the path to the object within that package.\nWhere package name is empty, the reference is a relative path from a specific outer (the context).\nCurrently, the package name should only ever be empty for component references, which must remain relative bindings to work correctly with spawnables and reinstanced actors.",
    "FortDialogDescription:AdditionalContent": "An extra widget to display in the dialog",
    "FortClientAnnouncementData_Basic:Icon": "An icon that represents this announcement",
    "FortDialogDescription:Icon": "An icon to display",
    "FortDialogDescription_NUI:Icon": "An icon to display",
    "DestroyActorsAndComponentsMutator_ActorDefinition:Tags": "An identifier used for locating an instance of this struct, in order to enable/disable it on the fly",
    "QuickBar": "An individual quick bar",
    "FortAthenaMutator_Chrome:GameMsg_ChromeInfoMessage": "An info message shown about Chrome and its rules/objectives at race start.",
    "FortAthenaMutator_Chrome:GameMsg_FinishPointReached": "An info message shown when the player reaches a finish point.",
    "FortSprayDecalInstance": "An instance of a cosmetic spray/tag placed in the world",
    "FortAthenaMutator_InventoryOverride_Bucket": "An inventory override mutator that provides Cobalt-specific round-based loadout mechanics.\nLoadouts are organized into buckets\nEach round, a loadout is randomly selected for each bucket, which will be used by all players assigned to that bucket.\nAs long as there are at least as many buckets as players-per-team, no two players on the same team be assigned to the same bucket in a given round.\nPlayer-bucket assignments are rotated each round so that as long as there are at least as many buckets as rounds, no player should get the same bucket twice.\nEvery team in given round has the same set of loadouts.",
    "FortAthenaMutator_InventoryOverride_TeamBucket": "An inventory override mutator that provides team-specific randomized loadout mechanics.",
    "EFortQuestObjectiveStatEvent.HasItem": "An item already exists in the player's inventory when the objective becomes active.",
    "FortGameplayEffectDeliveryActor:AssociatedItemDef": "An item definition associated to the delivery actor; Useful for static backing data look-up w/o relying on a transient actor",
    "GasEventHistoryItem": "An item in an ASC's GAS event history",
    "EFortItemType.MultiItem": "An item that can transform between various Weapon and Gadget items.  For example, the Unstable Bow",
    "CatalogOffer": "An item that is offered for sale in the store",
    "FortControllerComponent_DynamicRollPlayerComponent": "An object responsible for updating dynamic weights based on in game events for a given player/bot.\nThis only stores the data necessary for a given player, most data is queried from the table manager to avoid unnecessary duplication.\nThis component also handles binding to events relevant for a specific player, to prevent the table manager from having to bind to all player events and manage those event subscriptions.\n\nThis class is intended to be generic and not tied to player augments.",
    "FortControllerComponent_MarkActorsInRadius:IndicatorOffset": "An offset from the AI's root that the indicator will be placed at",
    "MeshBeaconClient": "An online beacon that helps manage connecting to Mesh Networks, and replicating\nmetadata about the Mesh Network.\n\nThis Actor will exist on All Mesh Nodes, and multiple MeshBeaconClient Actors may exist on non-Client Nodes,\none for each connected Mesh Client.",
    "MeshBeaconHost": "An online beacon that helps manage connecting to Mesh Networks, and replicating\nmetadata about the Mesh Network.\n\nThis Actor will only exist on the Root, Inner, and Edge nodes (any node that can\nhave children).",
    "UrgentQuestData:AlertIconBrushSize": "An optional brush size that changes size of the icon brush so that larger icons can be used, but still displayed without breaking the bounds of the alert icon background\n     If AlertIconSize equals FVector2D::ZeroVector, AlertIcon will use the brush texture's size by default",
    "UrgentQuestSettings:AlertIconBrushSize": "An optional brush size that changes size of the icon brush so that larger icons can be used, but still displayed without breaking the bounds of the alert icon background\n     If AlertIconSize equals FVector2D::ZeroVector, AlertIcon will use the brush texture's size by default",
    "UrgentQuestData:AlertIconBorderColor": "An optional color style that changes the color of the border of the alert icon diamond.\n     Default value matches color of M_UI_UrgentAlert",
    "UrgentQuestSettings:AlertIconBorderColor": "An optional color style that changes the color of the border of the alert icon diamond.\n     Default value matches color of M_UI_UrgentAlert",
    "FortAthenaVehicle:VehicleInteractionOverrideComponent": "An optional component that can override a vehicle's normal player interaction behavior.",
    "UserOptionDefinitionClassSlotMetaData:ClassSlotDisplayPattern": "An optional format pattern used to add text around the class slot display value.\n\nThe pattern takes one argument:\n - {0} - The number that should be displayed, and can be used for plural form branching",
    "UserOptionDefinitionFloatMetaData:DisplayPattern": "An optional format pattern used to add text around the option display value.\n@note Does not apply to values with overridden display names.\n\nThe pattern takes two arguments:\n - {0} - The preformatted number that should be displayed (as FText).\n - {1} - The real number to use for plural form branching: eg) \"{0} {1}|plural(one=Second, other=Seconds)\"",
    "UserOptionDefinitionIntMetaData:DisplayPattern": "An optional format pattern used to add text around the option display value.\n@note Does not apply to values with overridden display names.\n\nThe pattern takes two arguments:\n - {0} - The preformatted number that should be displayed (as FText).\n - {1} - The real number to use for plural form branching: eg) \"{0} {1}|plural(one=Second, other=Seconds)\"",
    "UserOptionDefinitionTeamIndexMetaData:TeamIndexDisplayPattern": "An optional format pattern used to add text around the team index display value.\n\nThe pattern takes one argument:\n - {0} - The number that should be displayed, and can be used for plural form branching",
    "UrgentQuestData:AlertIcon": "An optional icon to show in the yellow alert diamond instead of a bang, can be a UTexture or UMaterialInterface or an object implementing the AtlasedTextureInterface.",
    "UrgentQuestSettings:AlertIcon": "An optional icon to show in the yellow alert diamond instead of a bang, can be a UTexture or UMaterialInterface or an object implementing the AtlasedTextureInterface.",
    "CosmeticMetaTagCondition:SpecificItem": "An optional item required in the specified category. If no item is specified then the condition will check for\nmeta tags on any item in the category.",
    "FortWeapon:WeaponHandSocketPartOverrides": "An optional list of character parts the weapon should attach to;\nthe first character part that contains the attach socket will be used.",
    "FortProjectileBase:AutoKillDistanceSquaredOverride": "An optional override of the default auto kill distance. If this value is 0, 2x the net cull distance is used.",
    "VehicleModBuildingGameplayActorAttachmentData:ToggleablePhysicsShapeNames": "An optional physics body to enable while the BGA is alive.",
    "ImGuiDPIScaleInfo:Scale": "An optional scale to apply on top or instead of the curve-based scale.",
    "VehicleModBuildingGameplayActorAttachmentData:OverrideScale": "An optional scale value applied to the spawned BGA.",
    "FortPlayerPawn:AttachmentMeshComponent": "An optional skeletal mesh attached to this Character (optional sub-object).",
    "FortAISpawnGroupUpgradeData:EncounterTagRequirementsQuery": "An optional tag query that can be run on all of the tags on the encounter to see if this upgrade is valid",
    "UpdatedQuestObjectiveData:ManagerParticipantSubsetID": "An optional unique participant subset within the scope of the handling manager\nthat this updated quest objective data is relevant to.\ne.g. a Party/Squad ID used by the Party/Squad manager.",
    "DaySequenceModifierComponent:UserDaySequence": "An optional user-provided Day Sequence - used instead of our procedurally generated one if set",
    "DaySequenceModifierComponent:AdditionalNamedDaySequences": "An optional user-provided map of named Day Sequences - used in addition to\nUserDaySequence/ProceduralDaySequence. AdditionalNamedDaySequences default to inactive\nand are intended to be manually activated via MuteNamedSequence.",
    "SafeZoneOrderOptimizeMutatorRouteOrder": "An ordered list of SafeZone route IDs",
    "FortTooltipDisplayInfo:TooltipStatsList": "An ordered list of stats to return information about",
    "FortWeapon:ReticleOuterImage": "An outer reticle image for use in addition to the center reticle",
    "CatalogRedeemRealMoneyPurchasesInfo:ReceiptRefactorVersionOverride": "An override of ReceiptRefactorVersion for forcing a migration for the player",
    "CatalogRedeemRealMoneyPurchasesInfo:VerifierModeOverride": "An override of VerifierMode to send for certain players based on the configs",
    "ECaptureState.Decapturing": "An uncaptured zone's capture progress is winding back down to zero",
    "EMatchmakingCompleteResult.UpdateNeeded": "An update is needed",
    "EEpicLeaderboardUpdateFunction.Sum": "An update is summed into the existing value (e.g., total kills)",
    "DynamicXpCalibrationResult": "Analytical trigger events are sent for each player, that data is analyzed in an external system. The results of that calibration\nused to determine amount of XP (if any) can be awarded for each trigger.",
    "AthenaServerStartAircraftStats": "Analytics",
    "SidecarFileInfo:CheckoutGuid": "Analytics GUID for tracking the checkout/checkin",
    "FortGameAnalyticsSessionResponse": "Analytics Session Result, exists for JSON",
    "FortEndBattleRoyaleGameAnalytics": "Analytics are to be used to track down why EndBattleRotyaleGame is on rare occasions being called twice.  This\n data will help determine that.",
    "FortAthenaMapInfo:AircraftDeviationAngle": "Angle (+/-) used to randomly offset the path of the aircraft.",
    "RidableControlParams:TurnInPlaceStartAngle": "Angle at which we start a turn in place",
    "RidableControlParams:HalfDeadzone": "Angle from 0, -1 on the input where we don't change movement direction",
    "RidableControlParams:BackwardsHalfDeadzone": "Angle from 0, -1 on the input where we keep moving backwards",
    "FortProjectilePetrol:GroundSlopeAngleThreshold": "Angle in degrees representing max floor steepness (0 = can only land on a perfectly flat floor.  90 = can land on any surface as steep as vertical wall.)",
    "FortBaseWeaponStats:KnockbackZAngle": "Angle of Knockback. 90d == up, 0d == forward.",
    "FortGameplayEffectContext:KnockbackZAngle": "Angle of Knockback. 90d == up, 0d == forward.",
    "FortProjectileMovementComponent:StickyImpactAngle": "Angle of incidence below which the projectile will stick to a surface rather than sliding or bouncing. If 0, this feature is disabled.",
    "FortWindIntensityAndDirection:WindHeading": "Angle of the wind in degrees.  0 means along the +X axis.  It rotates around the Z axis, so 180 is -X.",
    "FortGameModePickup_Wax:RandomTossAngleTowardsCenter": "Angle the pickup will be randomly tossed within (0 is directly towards center of the circle) in degrees.",
    "FortCreativeLinearMoverComponent:RotationAngle": "Angle to rotate to.",
    "WaterControlParams:AngledSpeedCosAngle": "Angled multiplier is applied when dot product of velocity and acceleration is < this.",
    "TempestTornadoForcesComponent:AngularDampingOverride": "Angular damping to apply to physics objects while they are in the tornado (will only be applied if value is >= 0)\nThe original angular damping will return upon exit",
    "FortMantisWeaponComponent:ReplayAnimInstanceInfo": "Anim Instance Info replicated by the owning client so it can be saved for replays. This is necessary because AnimInstanceInfo does not replicate to owning clients.",
    "FortPlayerPawn:UnableToPerformActionMontage": "Anim Montage to play when player is unable to perform an action",
    "HeroSpecializationDesignerData:FrontendAnimClass": "Anim class for front end",
    "GameplayAbilityRepSharedAnim:AnimMontage": "AnimMontage ref; used to set up timers",
    "GameplayAbilityRepSharedAnim_Index:MontageIndex": "AnimMontage ref; used to set up timers",
    "FortPlayerPawn:BluePrintPlaceAnimation": "AnimMontage to play Blueprint Place",
    "FortPlayerPawn:BluePrintEditAnimation": "AnimMontage to play Blueprint edit",
    "FortWeaponRanged:CockingAnimation": "AnimMontage to play Cocking Animation",
    "FortWeaponRangedDual:LeftCockingAnimation": "AnimMontage to play Cocking Animation",
    "FortWeapon:EquipAnimation": "AnimMontage to play Equip Animation",
    "FortWeaponRanged:FireAnimation": "AnimMontage to play Firing Animation",
    "FortWeaponRanged:FireDownsightsAnimation": "AnimMontage to play Firing Downsights Animation",
    "FortWeaponRangedDual:LeftHandFireDownsightsAnimation": "AnimMontage to play Firing Downsights Animation with left hand",
    "FortWeapon:ReloadAnimation": "AnimMontage to play Reload Animation",
    "FortCharacterVehicle_Ostrich:DriverToGunnerTransition": "AnimMontage to play driver goes to gunner",
    "FortWeapon:PrimaryAbilityAnimation": "AnimMontage to play for primary ability. When this is played, WeaponPrimaryAbilityMontage will play if it's specified.",
    "FortWeapon:SecondaryAbilityAnimation": "AnimMontage to play for secondary ability. When this is played, WeaponSecondaryAbilityMontage will play if it's specified.",
    "FortCharacterVehicle_Ostrich:GunnerToDriverTransition": "AnimMontage to play gunner goes to driver",
    "FortWeaponRangedDual:LeftHandFireAnimation": "AnimMontage to play left hand Firing Animation",
    "FortWeaponRanged:OverheatedAnimation": "AnimMontage to play on the Player when the weapon reaches the overheated state",
    "FortWeaponRanged:WeaponOverheatedAnimation": "AnimMontage to play on the weapon and blend to the Player when the weapon reaches the overheated state",
    "FortWeaponRanged_Ostrich:RocketChargingLoop": "AnimMontage to play when charging rockets",
    "FortWeaponRanged_Ostrich:RocketFullyChargedLoop": "AnimMontage to play when charging rockets",
    "FortWeaponRanged_Ostrich:RocketFireSettle": "AnimMontage to play when done firing rockets",
    "FortWeaponRanged_Ostrich:RocketFire": "AnimMontage to play when firing rockets",
    "FortWeaponRanged_Ostrich:RocketCooldownReady": "AnimMontage to play when rockets are ready again after cooldown",
    "FortWeaponRanged_Ostrich:RocketCooldownLoop": "AnimMontage to play when rockets go on cooldown",
    "MinigamePostGameAnimationSettings:ColorSet": "Animation Color",
    "FortAthenaMutator_Encounter:AnimationSharingSetup": "Animation Sharing setup to be used for this playlist, only used if bUsesAnimationSharing = true",
    "MinigamePostGameAnimationSettings:Style": "Animation Style",
    "FortCreativeInteractVisualizationComponent:FloatCurve": "Animation curve for the visual mesh component (the collision component does not animate).",
    "WeaponModAnimData": "Animation data for weapon mods",
    "FortWeaponRangedDual:LeftWeaponFireMontage": "Animation for when left weapon fires",
    "FortWeaponRangedDual:LeftWeaponFireDownsightsMontage": "Animation for when left weapon fires down sights",
    "FortWeaponRangedDual:LeftWeaponCockingMontage": "Animation for when left weapon is cocking",
    "FortWeaponRangedDual:LeftWeaponReloadMontage": "Animation for when left weapon is reloading",
    "AnimNode_PlayBeatSyncedAnim": "Animation graph node that will sync an animation sequence to the beat of the song.",
    "AthenaCarPlayerSlot:AnimInstanceOverride": "Animation instance override for player entering this slot",
    "FortAthenaMutator_PreloadAssets:AnimBlueprints": "Animation instances to preload",
    "FortWeapon:WeaponPawnAnimLayerOverlayClass": "Animation layer overlay to apply when using this weapon. This will override specific parts of the main player animbp. This can be null if the weapon doesn't need custom player animation logic.",
    "AthenaCarPlayerSlot:AnimLayerOverride": "Animation overlay layer override for player entering this slot",
    "FortAthenaVehicle:AnimSet": "Animation references specific to this vehicle. This only needs to be set if an animbp (e.g. the driver animbp) requires it.",
    "FortWeapon:WeaponPawnAnimsetOverride": "Animset to use as override. If not NULL it will take priority over WeaponPawnAnimSet",
    "FortClientAnnouncement_Conversation": "Announcement for when a conversation sequence is to occur",
    "FortClientAnnouncement_ZoneModifiers": "Announcement for when a conversation sequence is to occur",
    "FortClientAnnouncement_TutorialConversation": "Announcement for when a conversation sequence is to occur and requires tutorial functionality",
    "FortGameState:AnnouncementManager": "Announcement manager pointer",
    "FortClientAnnouncement_Keybinding": "Announcement that displays text with game play actions, choosing an appropriate text to show based on client game pad settings.",
    "FortClientAnnouncementManager:LocalClientAnnouncements": "Announcements that only exist on the client",
    "FortClientAnnouncementManager:CancelledAnnouncements": "Announcements that were explicitly cancelled on the server",
    "GameplayMutatorObjectData:ObjectId": "Another way to identify an object",
    "FortGameUserSettings:FortAntiAliasingMethod": "Anti-aliasing settings exposed in fortnite",
    "EffectRequestContext:EffectReceivingActor": "Any Actor (pawn or otherwise) representing the intended recipient of an effect",
    "ControllerRequirementTestContext:TestSubjectActor": "Any Actor (pawn or otherwise) representing the subject of a requirement test",
    "EFortNativeCurieFXCueResponse.OverrideCue": "Any Curie state cue should be ignored and instead a specified cue should be played",
    "FallbackAIPawnCustomizationMapper:RequiredTag": "Any FortAIPawnCustomizationDefinition that have a gameplay tag that matches the RequiredTags will try to use this as fallback.",
    "FallbackCharacterPartsMapper:RequiredTag": "Any FortPlayerPawnAthena that have a CID's gameplay tags that matches the RequiredTags will try to use this as fallback (or avoid the CID's one if enforced).",
    "FortObjectiveFilter_DistanceTraveled:AllowedTravelModes": "Any Travel modes added in here will allow progression\nNOTE: To allow all travel modes you must add EDistanceTravelMode::Any to this list",
    "EncounterManagerComponent:PermanentActors": "Any actors in this array will not be cleaned up with the encounter when it is finished",
    "FortDeliveryInfoRequirementsFilter:BuildingActorSpecification": "Any additional specification for building actors (e.g. player built)",
    "EValkyrieReadOnlyAssetsPermission.None": "Any asset that supports read only mode can be opened",
    "KatanaTargetingComponent:DashBlockingBuildingTags": "Any building actor that has a matching tag will block the dash, even if it would be destroyed.",
    "KatanaTargetingComponent:DashBlockingBuildingClasses": "Any building actor whose class is in this list will block the dash, even if it would be destroyed.",
    "CharacterFallbackPreloadBlock:FallbackTag": "Any character part matching this tag will be preloaded; check the values in the used GameDataCosmetics::FallbackCharacterParts (ex. DefaultGameDataCosmetics.uasset).",
    "EffectRequestContext:EffectReceivingController": "Any controller representing the intended recipient of an effect (may be nullptr if target actor is not a pawn)",
    "ControllerRequirementTestContext:TestSubjectController": "Any controller representing the subject of a requirement test (may be nullptr if target actor is not a pawn)",
    "McpLootEntry:Attributes": "Any custom attributes this entry got",
    "FortObjectiveFilter_GainShields:ShieldsGainedOverFullAmount": "Any excess shield gain past the point of full shields",
    "BuildingFoundationStreamingData:GameplayTags": "Any gameplay tags associated with the foundations's location (retrieved through POIManager)",
    "FortPlayerDeathReport:Tags": "Any gameplay tags associated with the players death.",
    "ETypeOfBuildingActor.Anything": "Any kind of Building actor would be handled",
    "FortItemPreviewOnPawnActor:LoadingFXPosition": "Any loading FX will be spawned at this position",
    "ECinematicSequenceEnabledOnPhase.Always": "Any minigame state",
    "FortWorldSettings:MinCullDistance": "Any object closer than this distance should never be culled no matter what",
    "TornadoConfigEntry:MaxAllowedPhysicsObjectSize": "Any objects larger than this size will not be picked up.  They will instead be treated as static objects.\nCannot be smaller than MinAllowedPhysicsObjectSize",
    "TornadoConfigEntry:MinAllowedPhysicsObjectSize": "Any objects smaller than this size will not be picked up.  They will instead be treated as static objects.",
    "TagDrivenVariantDef:ExcludedConditions": "Any of these conditions being fulfilled will prevent application of this variant",
    "TagDrivenVariantDef:RequiredConditions": "Any of these conditions must be fulfilled to apply this variant",
    "StyleSequenceElement:CustomDurationOverride": "Any optional custom duration. If <= 0.f will be ignored in favour of default",
    "EOrbSpawnerConfigCategory.Duos": "Any playlists with the Athena.Playlist.Duo GameplayTag.",
    "EOrbSpawnerConfigCategory.Solo": "Any playlists with the Athena.Playlist.Solo GameplayTag.",
    "EOrbSpawnerConfigCategory.Squads": "Any playlists with the Athena.Playlist.Squad GameplayTag.",
    "EOrbSpawnerConfigCategory.Trios": "Any playlists with the Athena.Playlist.Trios GameplayTag.",
    "ActiveStyleInfo:PreviousStyle": "Any previous style being transitioned from (may be nullptr on first ever active style)",
    "SlipperySlopeParams:MaxInhibitingSlopeAngle": "Any slope angle greater than this will apply the maximum speed reduction",
    "FortAthenaMutator_Uranium:POIParentGameplayTags": "Any tags that are under these parent tags will be considered POI locations, used to determine the POI of a camera/spline that registered with the mutator",
    "CosmeticBackendLoadout:UserTags": "Any tags the user may have assigned to this loadout, to help with identifying it later",
    "EEpicLeaderboardUpdateFunction.MostRecent": "Any update wins (not sure when you'd really want to use this, maybe a timed event that you can keep trying but risk your previous score on?)",
    "EMutualFriendsPrivacyPolicy.All": "Anyone can see their mutual friends with you.",
    "EFortQuestObjectiveStatEvent.TeamInteract": "Anyone on team interacts with an object.  I.E. Search, use, etc. Target is the focus object of our teams interact.",
    "FortWorldSettings:MaxCullObjectSize": "Anything equal to or larger than this size will be culled at the MaxCullDistance",
    "EFortRpcCategory.SocialActions": "Anything involving friends or parties or stuff like that",
    "FortWorldSettings:MinCullObjectSize": "Anything lesser than or equal to this size will be culled at the MinCullDistance",
    "EFortRpcCategory.UICommands": "Anything related to UI navigation",
    "EFortRpcCategory.PilotCommands": "Anything that changes the behavior of Client Pilots on the fly",
    "PickupManagementSettings:ImportantPickupThreshold": "Anything that is this rarity and higher will be considered \"Important\". Set to EFortRarity::Unattainable for nothing to be considered \"Important\" just on rarity.",
    "PickupManagementSettings:NotJunkPickupThreshold": "Anything that is this rarity and higher will be considered \"Normal\".  Anything below will be considered \"Junk\".",
    "FortAILODSetting_GenericTickingObject:TickMultiplier": "Anything that will use this settings will multiply their ticking rate by this value: higher values means better performances.",
    "FortFollowCam_Settings:HorizonPullHalfTime": "Apart from the dampening, how long in seconds does it take to pull the camera half way to the horizon?",
    "AthenaCarPlayerSlot:VehicleApexZ": "Apex of the fall",
    "CatalogItemPrice:AppStoreId": "App store price is offered by, only relevant to real money purchases",
    "CatalogOffer:AppStoreId": "App store specific ID that should be used to purchase this offer (only relevant for RealMoney offers)\nEpic: This is the catalog OfferId (should be a guid)\nSony: This is the end of the SKU for the service entitlement product \"<licenseeId>-<titleId>-<what-you-want>-<SKU>\" (ex. \"ENTXXX0000000000\")\nMicrosoft: This is the Microsoft Store ID (alphanumeric string ex. \"BNW0XYZ3A21B\", found in Microsoft Partner Center)",
    "EFortGameplayTagContainerUpdateType.Append": "Append any tags from the new container",
    "DigestedVehicleDriving:AppendToPath": "Append-to-path",
    "VehicleDriving:AppendToPath": "Append-to-path",
    "EUIExtensionSlot.UnderneathTeammateStatusList": "Appends widgets to the vertical box list in AthenaSquadInfo, starting underneath the teammate status entry list",
    "EFortProximityBasedGEApplicationType.ApplyOnProximityExit": "Application occurs only when the target exits the actor's touch component and will never be automatically removed.",
    "EFortProximityBasedGEApplicationType.ApplyOnlyDuringProximityTouch": "Application occurs only when the target touches the actor's touch component and will be automatically removed when the actor leaves the touch or the building becomes inactive",
    "EFortProximityBasedGEApplicationType.ApplyOnProximityTouch": "Application occurs only when the target touches the actor's touch component and will never be automatically removed",
    "EFortProximityBasedGEApplicationType.ApplyOnProximityPrePulse": "Application pulses every ProximityPulseInterval - ProximityPrePulseTime seconds and will never be automatically removed.",
    "EFortProximityBasedGEApplicationType.ApplyOnProximityPulse": "Application pulses every ProximityPulseInterval seconds and will never be automatically removed",
    "FortPlayerControllerGameplay:AppliedInGameModifierAbilitySetHandles": "Applied in game modifier ability set for a gadget item. Set and used on the server only right now.",
    "ESpecialEventPhaseComponentNetModeType.Client": "Applied to or removed from all players on the client.",
    "ESpecialEventPhaseComponentNetModeType.DedicatedServer": "Applied to or removed from all players on the server.",
    "ESpecialEventPhaseComponentNetModeType.ClientControlled": "Applied to or removed from the locally controlled player on the client.",
    "FortGameplayEffectVolumeComponent": "Applies Gameplay Effects (and/or tags) to actors that overlap with any child Primitives.\nNeeds at least 1 child Primitive.\nOnly runs on the server.",
    "EFortTextureDataType.InnerWall": "Applies to the inside edge of a wall",
    "FortAIPawn:bOnlySkipAbilitySystemComponentWithFastAbilityReplication": "Applies when doing fast ability replication (Athena). When true only the ability system component will be skipped and not replicated during subobject replication; when false all will be skipped (other than special cases including AI LOD Component)",
    "LinearWindField": "Applies wind FX forces over a set range of time",
    "RadialWindField": "Applies wind FX forces over a set range of time",
    "TornadoRadialForce": "Applies wind FX forces over a set range of time",
    "WindField": "Applies wind FX forces over a set range of time",
    "EFortMantisTechniqueRootMotionType.HoldPosition": "Apply a zero root motion source regardless of what is authored.",
    "ECreativeVideoPlayerFullscreenEffects.NoCollisionAndNoDamage": "Apply both No Collision and No Damage",
    "FortPhysicsBall:DragVelocityThreshold": "Apply drag if velocity is > this magnitude.",
    "EFortPawnMaterialOverrideFlags.ApplyToEmoteProps": "Apply material override to any emote props",
    "EFortPawnMaterialOverrideFlags.ApplyToWeapon": "Apply material override to the pawn's held weapon",
    "ECreativeVideoPlayerFullscreenEffects.None": "Apply no Gameplay Effects",
    "FortAthenaMutator_PlayerDamage:HeightRatio": "Apply specific damage multiplier if detected hit is higher than a ratio of the character height",
    "CharacterPartsExtraSpecial:CharacterPartsForExtraSpecial": "Apply these body parts when the skin is tagged as special (like need to full swap).",
    "FortWeaponComponent_Swinging:TargetingDenyListedActorTag": "Apply this tag to any specific actors or components that should be excluded from swing targeting.",
    "ApplyChromeComponent": "ApplyChromeComponent is an actor component that appies chrome visuals.",
    "ELevelSaveRecordVersion.UsingActorFNameForEditorSpawning": "Applying Actor FName in Valkyrie ES to reduce name instability",
    "FortQuestPoolStats_PerPool:NextRefresh": "Approx next refresh - precise meaning depends on pool refresh mechanism",
    "FortPicklePortal:ZeroPointPosition": "Approximate position of the zero point in the world.",
    "FortActorRecord:ActorData": "Arbitrary data that depends on state",
    "FortMissionManagerRecord:MissionManagerData": "Arbitrary data that depends on state",
    "FortMissionRecord:MissionData": "Arbitrary data that depends on state",
    "FortObjectiveRecord:ObjectiveData": "Arbitrary data that depends on state",
    "EStoreCurrencyType.GameItem": "Arbitrary item. Use CurrencySubType to specify a templateId to use.",
    "FortObjectiveFilterType_NearbyPlayers:ExpectedPlayerCount": "Arbitrary max cap for perf reasons, should fine tune",
    "EventDependentTag:RelatedTag": "Arbitrary tag related to an Event Flag. The Event Flag being active implies the Related Tag should be active too.",
    "FortCurieFXSettings:ElectricityArcColorScaleFirstIteration": "Arc color scale to use for arcs on their first iteration",
    "FortCurieFXSettings:ElectricityArcColorScaleSubsequentIteration": "Arc color scale to use for arcs on their subsequent iterations",
    "FortCurieFXSettings:ElectricityArcSplineWidthFirstIteration": "Arc spline width to use for arcs on their first iteration",
    "FortCurieFXSettings:ElectricityArcSplineWidthSubsequentIteration": "Arc spline width to use for arcs on their subsequent iterations",
    "FortCreativeMoveTool:bDoesRequireCreatePermission": "Are create permissions required to use this move tool?",
    "FortAthenaLivingWorldVehiclePointProvider:ForceModsAllowed": "Are forced mods allowed? We need a way to hotfix things like this off.",
    "FortMission:MissionAudibility": "Are mission status changes audible?",
    "FortGameStateZone:bDBNODeathEnabled": "Are players allowed to fully die and respawn while DBNOed",
    "FortMission:bAreNonpublicMatchesLeecherExempt": "Are private matches exempt from Leecher penalties",
    "FortAthenaMutator_SpawningPolicyBase:bAllowedDespawnToMaintainItemCount": "Are we allowed to despawn to maintain the Count",
    "AthenaBarrierObjective:bAllowDamage": "Are we allowing damage or not?",
    "RidableControlRuntimeData:bAscending": "Are we ascending",
    "FortPlayerPet:bIsFrontEndPreview": "Are we being displayed in the front end?",
    "FortCowVehicle:bIsSquashing": "Are we currenlty squashing?",
    "FortGravityGunHolder:bAimingDownSights": "Are we currently aiming down sights.",
    "FortAthenaVehicle:bBoosting": "Are we currently boosting?",
    "PartyMemberPackedState:bDownloadOnDemandActive": "Are we currently downloading data?",
    "FortDecoHelper:bInFallbackPosition": "Are we currently in the fallback position?",
    "FortControllerComponent_SpatialSampler:bIsSampling": "Are we currently sampling locations",
    "InfiltrationCarryObjectSpawnPoint:IsSpawnPointEnabledFloat": "Are we enabled? Are we able to be picked?",
    "BuildingSMActor:bAllowCustomMaterial": "Are we exempted from TextureData material optimization, allows usage of a material besides the default of the mesh",
    "FortMission:bIsMissionVisibleOverride": "Are we forcing the Mission to be visible, even though it might have non-hidden objectives?",
    "FortFeedbackEvent:bOverriddenQueuing": "Are we manually overriding the queuing",
    "RidableControlRuntimeData:bMovingBackwards": "Are we moving backwards right now",
    "FortPlayerControllerAthenaXPComponent:bRegisteredWithQuestManager": "Are we registered, on the server, with the quest manager?",
    "CreativeRoyalePlayspaceComponent_LevelReset:bSpawnFromGameplay": "Are we spawning from Gameplay?",
    "CreativeRoyalePlayspaceComponent_RemoveItems:bSpawnFromGameplay": "Are we spawning from Gameplay?",
    "FortSafeZonePhaseInfo:UsePOIStormCenter": "Are we using a POI as a storm center. Default is no",
    "ZiplinePawnState:bIsZiplining": "Are we zipling",
    "BuildingActor:AreaClass": "Area type this actor projects to navigation data if it's bIsNavigationModifier == true",
    "EEventTournamentRound.Arena": "Arena (ongoing multi-division tournaments)",
    "ValkyrieEditorConfig:AdditionalCommandLineArguments": "Arguments passed to regular launcher when starting game client",
    "FortNavPathRendererComponent:AllPathsPoints": "Array containing ALL the list of points that will be replicated to client to be rendered.X,Y,Z is the world location and W is the status of the path points",
    "EarnedBadgeEntryArray:Items": "Array entries",
    "FortBadgeCountArray:Badges": "Array entries",
    "FortClientObservedStatArray:ObservedStats": "Array entries",
    "FortControllerComponent_TransientQuests:ActiveUrgentQuests": "Array for all active urgent quests.",
    "FortCreativeClassInstanceTracker:ParentClassesAtLimit": "Array of (base / parent) classes that are currently being limited",
    "FortCreativeClassInstanceTracker:ChildClassesAtLimit": "Array of (child classes) retrieved from ParentToChildLimitClasses whenever we hit the limit for one of the parent classes",
    "BuildingContainersFoundEntry:BuildingContainers": "Array of Building Containers with this Gameplay Tag",
    "FortMinigame:BuildingsWithCurieFXToDestroy": "Array of Buildings needing to be destroyed to remove all Curie FX",
    "GlobalRepGraphActorClassSettings:ClassSettings": "Array of Custom Settings for Specific Classes",
    "AdHocSquad_InviteDataArray:Entries": "Array of FAdHocSquad_InviteDatas that we replicate.",
    "FortAssignedObjectiveData:AssignedSquadDataArray": "Array of FFortAssignedObjectiveSquadData containing data about the squads assigned to this objective",
    "FortTimeOfDayManager:EnabledGlobalInhibitors": "Array of FInhibitorData registered through EnableGlobalInhibitors",
    "FortTimeOfDayManager:EnabledVolumeInhibitors": "Array of FInhibitorData registered through EnableVolumeInhibitors",
    "GameplayAbilityEventKeyArrayAndHandle:EventKeys": "Array of FName Keys used to reference events that are using this Gameplay Ability",
    "GameplayEffectEventKeyArrayAndHandle:EventKeys": "Array of FName Keys used to reference events that are using this Gameplay Effect",
    "WindSplineComponent:FXComponents": "Array of FX components",
    "FortPlayerStateComponent_CustomFeedMessage:CustomFeedMessageConfigs": "Array of Feed message Configs to be processed and async loaded on begin play",
    "FortMinigame:FireVolumeArray": "Array of Fire Volumes created before activating Curie",
    "FortCameraPrototype:ModeOverrides": "Array of FortCameraMode overrides",
    "GunGameGunEntries": "Array of GunGameEntry (for nesting in TMap)",
    "FortAthenaMutator_HideHUDElements:HUDElementsToHideDataArray": "Array of HUD element tags to hide/show at the specified game and/or safe zone phases",
    "FortLocalizationService:TranslationsReadyToSendToTheClient": "Array of JsonLocalizationDocument representation used for replication",
    "EncounterMobInstance:CurrentPointProviders": "Array of LWM point providers already casted as IFortAthenaLivingWorldPointProviderInterface - useful for LWM functionality.",
    "FortPawn:AnimUpdateRateVisibleMaxDistanceFactor": "Array of MaxDistanceFactor to use for AnimUpdateRate when mesh is visible (rendered).\nMaxDistanceFactor is size on screen, as used by LODs\nExample:\n            AnimUpdateRateVisibleMaxDistanceFactor.Add(0.4f)\n            AnimUpdateRateVisibleMaxDistanceFactor.Add(0.2f)\nmeans:\n            0 frame skip, MaxDistanceFactor > 0.4f\n            1 frame skip, MaxDistanceFactor > 0.2f\n            2 frame skip, MaxDistanceFactor > 0.0f",
    "FortGameStateAthena:MutatorObjectDataArray": "Array of Object data used by mutators to replicate whatever",
    "FortDamageNumbersActor:PercentDamageThresholds": "Array of Percent Damage Thresholds where the value of each threshold entry represents the upper value of a damage range.\n     Percent Damage is considered as being in a specific Tier so long as the damage is <= the threshold value, otherwise we check the next tier,\n     thus each threshold should be greater than the previous one. The number of thresholds should be one less than the number of PercentDamageColors\n     so that any damage that exceeds the last threshold can be represented by the final color in PercentDamageColors.\n     These thresholds can be overwritten by mutators via FortGameStateAthena_ApplyMutatorOverridesToPercentDamageThresholds.",
    "GlobalRepGraphActorClassSettings:TemplateSettings": "Array of Settings Templates that can be used for multiple different Classes in ClassSettings via MapToTemplate",
    "FortGameStateComponent_AffiliationManager:AffiliationComponentsToRegister": "Array of UFortActorComponent_Affiliation that could not be registered because the playlist wasn't loaded yet. To be registered after the playlist is loaded",
    "FortValidationData:Validators": "Array of Validators",
    "FortCreativeOptionDestructiveAction:ButtonInputActions": "Array of actions to display.",
    "FortAthenaLivingWorldManager:ActorClassToPreloadOnClient": "Array of actor class to preload on the client.",
    "FlashCountedActorInfo:Actors": "Array of actor info.",
    "FortControllerComponent_IndicatedActorManagement:DeferredIndicatedActorList": "Array of actors that we've deferred because of stepping.",
    "FortControllerComponent_IndicatedActorManagement:DeferredStenciledActorList": "Array of actors that we've deferred because of stepping.",
    "FortControllerComponent_IndicatedActorManagement:StenciledActorList": "Array of actors to be focused with stencil.",
    "FortControllerComponent_IndicatedActorManagement:IndicatedActorList": "Array of actors to be focused with the indicator layer.",
    "FortPlayerControllerGameplay:AdditionalModeratorFlyingModifiers": "Array of additional flight modifiers used for moderators.",
    "FortPlayerStateComponent_Quests:GrantedQuestAbilitySets": "Array of all Quest Ability Sets that have been granted to this participant",
    "BuildingGameplayActorSentry:TargetActorsInRange": "Array of all actors within range of this sentry. Has to be updated manually by a child class.\n     Would be great if this were ReadOnly, but targeting still happens in blueprints.",
    "FortGameStateComponent_AssignedObjective:AssignedObjectives": "Array of all assigned objectives. Only valid on the SERVER",
    "FortWeapon:EquippedWeaponModSlots": "Array of all currently equipped weapon mod slots on this weapon.\n              This is to be used to diff against WeaponModSlots to ensure the\n              weapon has reflected the array with what is actually equipped.\n              NOTE: This will only be populated on the server.",
    "FortSquadStart:PlayerStarts": "Array of all of the player start components. These are used to calculate the spawn transforms.",
    "FortVerbMessage_PlacementUpdate:AlivePlayersArray": "Array of all players / bots still alive on the server when this message is sent.",
    "FortGameStateComponent_RealitySapling:SpawnedSaplings": "Array of all spawned saplings (persistent and planted)",
    "RatingBoardDisplayData:AgeRatings": "Array of all the possible age ratings for this rating board",
    "RatingBoardDisplayData:Descriptors": "Array of all the possible descriptors for this rating board",
    "VoteBroadcasterComponent:VoteSessionSettingsList": "Array of all the session settings this component is managing",
    "AlterationSlotsLoadout:AlterationSlots": "Array of alteration slots for this loadout.",
    "BuildingTrap:AppliedAlterations": "Array of alterations that have been applied to this weapon",
    "DeployableBasePlot:OutstandingAssociatedPickups": "Array of associated pickups that are still outstanding in the world",
    "PlayerClampInfo:AttributeClamps": "Array of attributes to clamp and how to clamp them.",
    "ConditionalBenefitsConfig:LevelBasedConditionalBenefits": "Array of benefit 'levels' which can be obtained by testing requirements linearly\nMust be organized in order of lowest level -> max level",
    "UefnPlaytimeBonusGoalData:BonusGoalsToProgressWhenCompleted": "Array of bonus goal quests that should progress when this quest is completed",
    "ThreatCloud:LightningSourceAreas": "Array of box components which will be used to find the start locations for lightning bolts.  Any location on the TOP of the box can be used as the start of the lightning.",
    "FortPlacementActorFinderInfo:BuildingData": "Array of building types to spawn. Size of array is equal to number of spawned buildings.",
    "FMDeviceCable:CableSplineMeshArray": "Array of cable splines used for the full cable",
    "FortGameMode:StarvedActorClassList": "Array of class names used to separate out into their own actor starved histogram. It's a Config for hotfixing.",
    "UserOptionDefinitionClassSlotMetaData:ClassTypesToHide": "Array of class types that are hidden for this option.",
    "UserOptionDefinitionClassSlotMetaData:ClassTypesToShow": "Array of class types that are shown for this option, or empty to show all class types.",
    "FortAthenaLivingWorldStaticPointProvider:PreviewClasses": "Array of classes that matches in size to SpawnPoints and is used to display a preview mesh on the spawnpoint.",
    "FortDamageNumbersActor:PercentDamageColors": "Array of color used to display Percent Damage when it is at a given damage tier.\n     Each entry in the array corresponds to a damage range defined by PercentDamageThresholds.\n     There should always be 1 more PercentDamageColor than PercentDamageThresholds as the last\n     color is used whenever damage exceeds the last threshold value.",
    "FortTierProgression:ProgressionInfo": "Array of completed tier progress per layout",
    "LivingWorldCalendarEventConditions:Conditions": "Array of condition that must be met for the conditions to return true.",
    "FortCalendarEventInventoryTransformData:ConversionRecipesToRunAfterEvent": "Array of conversion recipes to run after the event completes but before this transform removes items",
    "FortCalendarEventInventoryTransformData:ConversionRecipesToRunOnEventStart": "Array of conversion recipes to run after the event completes but before this transform removes items",
    "FortGameMode:CumulativeFrameTimeWithoutSleepLimits": "Array of cumulative frame time limits above a specific threshold that is allowed before an unplayable analytics event is sent. Should be in shortest to longest order. It's a Config for hotfixing.",
    "FortMission:ActiveObjectives": "Array of current active objectives",
    "FortVehicleFuelComponent:CustomFuelUI": "Array of custom UI to enable if UsesVehicleFuelSystem. (Array since we may want 1 widget for the driver and another for the passengers, etc).\nIf UsesVehicleFuelSystem is true, these will be combined with the vehicle's CustomUI at runtime.",
    "CosmeticBackendLoadoutSlot:CustomizationInfo": "Array of customization options the player has chosen for the cosmetic equipped in this slot",
    "FortAthenaMutator_Skyfire:SquadDataArray": "Array of data about a squad's remaining time in the mothership and earned loot level.",
    "FortAthenaMutator_SpecialEventTODM:PhaseDataArray": "Array of data describing when and how to alter TODM during each special event phase.\nDoes NOT have to match the order or count of the SpecialEventScript's PhaseInfoArray.",
    "RidableComponent:PrimaryFireMontageAnimCoreTypeOverrides": "Array of data structures that should override primary fire anim montages for the specified anim core type, those overrides are searched after the tag specific overrides",
    "RidableComponent:PrimaryFireMontageTagOverrides": "Array of data structures that should override primary fire anim montages for the specified tag, those overrides are searched before the anim core type overrides",
    "DeployableBaseArray:DeployableBases": "Array of deployable base instances/plots",
    "FortDeployableBaseManager:DeployableBaseArray": "Array of deployable base plots; Plots could be unoccupied",
    "ValkyrieFortniteEditorSettings:DocumentationRedirects": "Array of documentation redirects used whenever restrictive mode is enabled",
    "ProximityBasedGEDeliveryInfo:EffectsToApply": "Array of effects to apply",
    "ProximityBasedGEDeliveryInfoHard:EffectsToApply": "Array of effects to apply",
    "FortAthenaLivingWorldCategory:Encounters": "Array of encounter that will belong to this category.",
    "FortPlayerControllerGameplay:FlyingModifiers": "Array of flight modifiers, rather than setting the modifier to a float directly, we do it via this array so we can loop through different levels easily.",
    "FortGameMode:FrameTimeWithoutSleepHistogramBucketsMs": "Array of frame times used for server frame time histogram bucketing. It's a Config for hotfixing.",
    "FortGameMode:DemoNetDriverTickFlushTimeHistogramBucketsMs": "Array of frame times used for server replication (to clients) histogram bucketing. It's a Config for hotfixing.",
    "FortGameMode:GameNetDriverTickFlushCostPerClientBucketsMicroSec": "Array of frame times used for server replication (to clients) histogram bucketing. It's a Config for hotfixing.",
    "FortAIPawn:FailedAbilityQueryTags": "Array of gameplay tag containers that have failed an ability lookup. Store these to check against to keep from spamming the logs",
    "FortMissionAlertRegionData:RegionUniqueIds": "Array of ids into the theater data's regions UniqueIds.",
    "FortValidationData:ValidationObjects": "Array of independent objects to validate",
    "FortTheaterMapRegionData:TileIndices": "Array of indices into the theater data's tiles",
    "FortSafeZoneIndicator:SafeZonePhases": "Array of information for each phase this safe zone can go through.\nOnce started the safe zone will automatically increment through each of these phases\nReplicated for non-shipping builds for debugging, NOT replicated on shipping builds because it could be exploited.",
    "FortDaySequenceActor:DayPhaseInfo": "Array of information regarding day phases",
    "FortAthenaMutator_InventoryOverride:InventoryLoadouts": "Array of inventory loadouts to give the players",
    "FortAthenaMutator_Skyfire:ItemsTypesToKeepOnAbduction": "Array of item types that are NOT removed from the player during the inventory swap on abduction. (Eg, ammo, resources, the edit tool - items that it won't matter if the player has in skyfire)",
    "FortItemFilterDefinition:ItemTypeFilters": "Array of item types that this filter expects to handle.",
    "QuickBarSlotData:AcceptedItemTypes": "Array of item types this quick bar slot can take",
    "SkyfireItemsAndAbilitySet:Items": "Array of items given to the player",
    "QuickBarData:QuickbarSlots": "Array of items this quick bar slot can take",
    "LocationPOIList:List": "Array of location POIs",
    "RufusWeeklyMapUpdater:WeeklyMapTextureInfo": "Array of map textures to use on a week by week basis, if these are not set then it is expected that consumers of this actor will call the set function that takes the textures as parameters directly",
    "FortGameStateZone:PlayerSharedMaxTrapAttributes": "Array of maximum values of player shared trap attributes; Attribute mapping is preserved in TrapAttributeToArrayIdx map",
    "FortWindManager:WindImpulseCylinderDeltas": "Array of modifiers to apply.  Apply one modifier at a time, then remove it when done and move on to the next.\nEach modifier should apply its own sections one at a time.",
    "FortGameplayAbilityMontageInfo:CharacterPartMontages": "Array of montages to play on character parts",
    "FortCurieMaterialDefinition:ElementDecayMultipliers": "Array of multipliers to decay, allows for a generic implementation instead of per-element",
    "FortAthenaMutator_MusicEvents:GamePhaseStepEvents": "Array of music events to trigger at Game Phase Step changes.  If multiple events are keyed to the same phase, the first one on the list will be used.",
    "FortAthenaMutator_MusicEvents:GamePhaseEvents": "Array of music events to trigger at Game Phase changes.  If multiple events are keyed to the same phase, the first one on the list will be used.",
    "AlterationNamedExclusions:ExclusionNames": "Array of names on a host item that will block certain alterations.",
    "AlterationWeightData:ExclusionNames": "Array of names that will block availability of this alteration.",
    "UserOptionDefinitionContainer:Definitions": "Array of option definitions, sorted in the order they should appear in-game.",
    "FortControllerComponent_RealitySapling:OwnedSaplings": "Array of owned saplings that are spawned in the world. (A sapling may fail to spawn due to crowding or be destroyed during a match.)",
    "FortGameStateComponent_RealitySapling:SaplingSpawnEnvQueryParams": "Array of params that are passed to the sapling spawn query",
    "FortAthenaPatrolPath:PathLeashArray": "Array of patrol leashes (tube/sausage form) to keep the NPC from going too far from the PatrolPath even in combat",
    "FortAthenaNpcGalileoComponent:PatrolPath": "Array of patrol points",
    "FortPawn:IncomingPickups": "Array of pickups during fly-in animation. Authority only.",
    "KeepItemContainer:SearchedBy": "Array of players that have searched this container since last reset",
    "FortAthenaMutator_Skyfire:PlayersReadyToTeleportFromFirstPrisonToPlayspace": "Array of players who have completed their MinPrisonTime and are ready to teleport.",
    "FortCurieInteractionComponent:ExecutionEntries": "Array of potential elements that can be executed - includes rules for when they are executed. *",
    "FortLootPackageData:PotentialNamedWeights": "Array of potential weights that this loot package can be influenced by.",
    "LiquidRibbonManager:Projectiles_Native": "Array of projectiles that make up the spline (_Native since BP also has a Projectiles array that holds versions cast to BP)",
    "ItemPromotionCosts:PromotionCosts": "Array of promotion costs.",
    "FortDeployableBaseManager:EnvironmentActorsRequiringRestoration": "Array of records representing environment actors that need restoration",
    "CurieManager:CurieManagerComponents": "Array of registered curie manager components",
    "QueuedItemsToDropViaPickup:ItemsToDrop": "Array of remaining items to be dropped",
    "LiquidRibbonManager:Detachments": "Array of ribbon detachments",
    "FortAthenaMutator_Chrome:Routes": "Array of routes for the race",
    "FortGameStateAthena:AthenaGameDataResetRows": "Array of row names that will be reset at the end of every game. Here to avoid overwriting the AthenaGameData with playlist\n              specific data until we can replace AthenaGameData with a data registry. Don't edit default values in BP as they may get\n              overwritten when the configs are loaded.",
    "EncounterMobManagerComponent:SpawnedMobs": "Array of runtime Mobs managed by this component",
    "FortGameStateComponent_RealitySapling:SaplingDataToSpawn": "Array of sapling data used in spawning the saplings",
    "FortControllerComponent_PlayerAugmentPersistence:ReplicatedSharedPlayerAugments": "Array of shared augments definitions to the squad members who shared them.",
    "RepGraphMutatorSpatializationZoneArray:Zones": "Array of spatialization zone data",
    "EncounterMobManagerComponent:MobEncounterSpawnData": "Array of spawn data for all mob s this encounter will manage. Meant as data to only be modified in editor.\n              DO NOT modify at runtime, you risk creating dangling references in FEncounterMob instances.",
    "WindSplineComponent:MeshDataArray": "Array of spline mesh segments",
    "FortAICloudVortex:SplineMeshesBody": "Array of spline meshes that make up the body of the tornado. Each spline mesh will slowly wiggle back and forth over time.",
    "LiquidRibbonManager:SegmentLengths": "Array of spline segment lengths",
    "LiquidRibbonManager:SplineSegments": "Array of spline segments that make up the spline",
    "SkyfireControllerComponent:SquadMemberStatusData": "Array of squad member data relevant to the game mode that each squad member should know about the other players in their squad",
    "FortDagwoodVehicle:RoadAndExhaustSurfaceTypeArrayForFX": "Array of surface types to read from for fx, so it'll index the way we want.",
    "FortMotorcycleVehicle:RoadAndExhaustSurfaceTypeArrayForFX": "Array of surface types to read from for fx, so it'll index the way we want.",
    "TaggedPOIList:List": "Array of tagged POIs",
    "UserOptionDefinitionTeamIndexMetaData:TeamTypesToHide": "Array of team types that are hidden for this option.",
    "UserOptionDefinitionTeamIndexMetaData:TeamTypesToShow": "Array of team types that are shown for this option, or empty to show all team types.",
    "FortCosmeticLockerSlots:Items": "Array of template ids of slotted items",
    "AccountIdAndMatchEndData:UsedCosmetics": "Array of templateIds for the cosmetics the user used this match",
    "FortPlayerMappableKeySettings:WidgetDisplayTexts": "Array of texts to be display in the widget, one line per element. If left empty will use the DisplayName",
    "FortCharacterCustomization:CharacterPartOverrides": "Array of the character parts to override",
    "FortGameMode:ActorsStarvedByClassTimeHistogramBuckets": "Array of times for actor starvation histograms (time between replications per channel). It's a Config for hotfixing.",
    "FortDeployableBaseManager:PendingUsers": "Array of users who are in some form of initialization/registration and still need a base plot, record, etc.",
    "FortGameModeAthena:AthenaVehicleOverrides": "Array of vehicle class overrides currently in effect",
    "FortVisibilityManagerComponent:VisibilityInfoArray": "Array of visibility infos.",
    "FortCosmeticLockerSlots:ActiveVariants": "Array parallel with Items providing optional active variants info",
    "FortWeapon:AllWeaponMeshes": "Array that holds the WeaponMesh (above) as well as aAny additional weapon meshes belonging to the weapon,\nsuch as the second mesh when using dual-wield pickaxes.",
    "FortScoutDroneControllingComponent:InputTriggerableEvents": "Array used to automatically trigger gameplay events when inputs are pressed",
    "FMDanceSynchronizerComponent:EmoteSoundIds": "ArrayOfAnimNotifySoundIdsWeHaveMuted",
    "FortInventory:RecentlyAdded": "Arrays of recently added and removed items, used by the UI notifications",
    "FortExhibitActor:CameraArrowComponent": "Arrow component that shows direction which the camera will be facing",
    "FortExhibitActor:ArrowComponent": "Arrow component that shows direction which the spawned exhibit will be facing",
    "PlayspaceSpawnActor:ArrowComponent": "Arrow component to indicate forward direction of the spawning location",
    "BattleLabDeviceGameplayActor_VendingMachine:SpawnLootTransformArrow": "Arrow used as a world transform to spawn loot from",
    "VkFoundMatchingArtifact:Filter": "Artifact's own filter that the user-provided filter matched",
    "VkArtifactOption:ArtifactId": "ArtifactID to use for binary resolution if the client matches Role and Filter",
    "AircraftFlightConstructionInfo:LastStepPushCenterLine_Magnitude": "As the last step in aircraft path selection (via bUseCustomAircraftPathSelection), offset the paths by this much\nOnly applies with valid AircraftPathMidpointSelectionRadiusMin - if <= 0 or bigger than the drop zone, it won't apply",
    "AircraftFlightConstructionInfo:LastStepPushCenterLine_Direction": "As the last step in aircraft path selection (via bUseCustomAircraftPathSelection), offset the paths in this direction\nOnly applies with valid AircraftPathMidpointSelectionRadiusMin - if <= 0 or bigger than the drop zone, it won't apply",
    "FortEndBattleRoyaleGameAnalytics:CallStack": "As this is passed down to the EndBattleRoyaleGame, add to the stack to easier track where call came from.",
    "FlyingRidableControlParams:AscendingAcceleration": "Ascending Acceleration",
    "DynamicUIAspectRatio:AspectRatio": "Aspect ratio used to limit the virtual alignment box the widget align to. (Custom aspect ratio can be used with the format: Width / Height)",
    "SkyfireBackpackComponent:TimeParameterMinutes": "Asset Names",
    "SkyfireBackpackComponentInitializerAssetNamesStruct": "Asset Names",
    "EContentChanges.VerseContentService": "Asset changes (always need to be pushed to the content service)",
    "ValkyrieFortniteAssetCollectionSettings:DisallowForImportCollection": "Asset collection to check against when importing islands into UEFN - contained assets will be filtered out",
    "ValkyrieFortniteAssetCollectionSettings:UntestedCollection": "Asset collection to check against when loading aliases for devices that should be visible to creators but still pending QA testing",
    "ValkyrieFortniteAssetCollectionSettings:LegacyCollection": "Asset collection to check against when loading aliases for legacy PIDs in the content browser.",
    "ValkyrieFortniteAssetCollectionSettings:BaseCollection": "Asset collection to check against when loading aliases for the content browser.",
    "ValkyrieFortniteAssetCollectionSettings:UnreleasedCollection": "Asset collection to check against when loading aliases for unreleased PIDs in the content browser.",
    "FortNonPlayerConversationParticipantComponent:ConditionalBenefitsConfigCollection": "Asset containing a map of conditional benefit 'ID' tags to values containing details about those conditional benefits\ne.g. Asset: NPCReputationLevelBenefits -> Key: \"Tandem.Reputation.Benefits.Peely\" -> FConditionalBenefitsConfig containing\nreputation levels that may be achieved with Peely, how they are achieved (e.g. quests/tokens/gold count etc), and the\nconferred 'conditional benefit tags' achieved at those levels. Checked automatically as part if IsServiceSupported against service\n'additional requirement tags' if assigned. We could support multiple of these configs in future (e.g. reputation, faction standing, etc)",
    "FortNonPlayerConversationParticipantComponent:GiftTypeDefinitions": "Asset containing a map of gift 'type' tag e.g. \"Athena.Quests.TandemGift.Item\" to the actual configuration data which details\nwhat that logic should actually execute when that gift is given to a recipient\nThis is set to override the defaults that are in AthenaSeasonItemDefinition.",
    "FortMission:BotLogicClass": "Asset containing mission logic for server bots",
    "PFWExample_ServiceWrapper_ServiceSettings": "Asset defining the factory settings for UPFWExample_ServiceWrapper, service wrapper",
    "UserOptionDefinitionAssetReferenceMetaData:AssetType": "Asset filtering rules and metadata parsed from the underlying property.",
    "EFortStartupPhase.GameStartupFinished": "Asset manager has finished initial load, ready for Frontend/Gameplay",
    "EFortStartupPhase.GameStartupLoading": "Asset manager has started it's initial load",
    "QuestItemDefinitionDesignerData:ConversationNamePrefix": "Asset name prefix that will be used for the generated assets",
    "ValkyrieFortniteEditorSettings:AssetNameSubstitutions": "Asset name substitutions (applied on name segments separated by underscore) used when converting an asset name to a display name",
    "FortEmporiumItemData:Namespace": "Asset namespace",
    "HomebaseBannerIconData:LargeImage": "Asset pointer to the large image representation of the icon",
    "HomebaseBannerIconData:SmallImage": "Asset pointer to the small image representation of the icon",
    "FortProjectEditComponent_CreativeRoyale:CreativeRoyaleEditPlotDefinition": "Asset reference to the CreativeRoyale edit plot item definition. Used to determine if a plot is for Creative Royale",
    "FortVehicleAudioOneshotGate:Sound": "Asset to play",
    "FortLayeredAudioOneshotGate:Sound": "Asset to play when tripped",
    "AbandonedCampsitePlacedSpawner:AbandonedTentAsset": "Asset to spawn at the locations of the tent spawn point components.",
    "EDataAssetDirectoryUpdateStatus.SuccessNoChange": "Asset update check succeeded, but there were no changes applied",
    "EFortExposedAssetExposureType.Deprecated": "Asset used to be exposed, but is no longer. The asset must be kept around for legacy projects.",
    "EFortExposedAssetExposureType.ForceDelete": "Asset will be removed from the exposed asset list when saved. Do not use this unless the asset is now exposed under a different rule. When using ForceDelete, you may also need to add the asset to ExcludedPaths to avoid it re-appearing.",
    "EFortExposedAssetExposureType.PublicAlias": "Asset will generate an alias publicly viewable in UEFN for users to select",
    "EFortExposedAssetExposureType.InternalOnly": "Asset will pass validation if referenced, but is not publicly available to UEFN users",
    "EAssetDataUtilityToolFilterResult.AssetFail": "AssetData should not pass the filter",
    "EAssetDataUtilityToolFilterResult.AssetPass": "AssetData should pass the filter",
    "FortSplineWaterAudioComponent:InsideSplineSound": "Assets",
    "EDataAssetDirectoryUpdateStatus.Success": "Assets updated successfully",
    "FortCreativeBudgetTracker:AssetLastInstances": "Assets with only 1 instance, client need it to predict the removal cost",
    "EFortQuestObjectiveItemEvent.AssignWorker": "Assign a worker to a squad.",
    "EFortQuestObjectiveStatEvent.AssignWorker": "Assign a worker to a squad.",
    "FortPartySquadAssignment:AbsoluteMemberIdx": "Assigned squad index of this member as an absolute (i.e. relative to the max party size)",
    "SpecialEventInputHelperComponent:Priority": "Assigned to the spawned UInputComponent's Priority upon creation.\n\"The priority of this input component when pushed in to the stack.\"\nComponents are processed from highest to lowest Priority.  Higher int wins over lower.",
    "FortPickup:LandedSoundOverride": "Assigned when the pickup is dropped, if the item def has one specified",
    "PositioningEQS:QueryTemplate": "Associated EQS to the Tag Container",
    "VkProjectDoc:LiveLink": "Associated link (LIVE). For per-user playtest link, query VkContentService",
    "FortGamestateComponent_DynamicRollTableManager:DataRegistryType_WeightModifiers": "Associates this with a data registry that provides the roll weight modifiers. Subclass systems should override.",
    "FortGamestateComponent_DynamicRollTableManager:DataRegistryType_BaseWeights": "Associates this with a data registry that provides the roll weights. Subclass systems should override.",
    "FortGameStateComponent_MilestoneQuests:DataRegistryType_SeasonalMilestoneQuests": "Associates this with a data registry that provides the set of quests for the active season",
    "FortGameStateComponent_ServerRollQuests:DataRegistryType_ServerRollQuests": "Associates this with a data registry that provides the set of quests for the active season",
    "ELoginResult.ExternalAuth_MissingAuthAssociation": "Association between external auth and backend has not been made with these credentials",
    "ERealEstateOffsetType.CustomOffsetFromCorner": "Assumes the level is in the upper right corner",
    "FortGameState:bSkipTeamReplication": "At an extreme amount of teams, replication of arrays breaks down",
    "EFortPointsFromNavGraphGoalPathDistanceFilterOperator.AnyGoalInRange": "At least one goal must be in range",
    "WaterControlParams:MinImmersionDepth": "At or above this depth (measured at feet level), stop swimming with these params when the surface below is not walkable.",
    "WaterControlParams:WaterVelocityDepthForMax": "At or above this depth, use max velocity. Interps down to WaterVelocityMinMultiplier at wading depth (where player can start swimming)",
    "FortAthenaMapInfo:SkydivingScanForImpactWorldZ": "At or below this Z location (in the world), start scanning for impact to auto-deploy parachute.",
    "WaterControlParams:TargetImmersionDepth": "At or below this depth (measured at feet level), start swimming with these params",
    "WaterControlParams:CancelCrouchImmersionDepth": "At or below this depth, cancel and disallow crouching.",
    "WaterControlParams:DBNOSwimImmersionDepth": "At or below this depth, start swimming in DBNO",
    "FortPersistenceFrameworkContainerLocation_InventoryService": "At save and restore time, this location data is sent to the\ncontainer save and restore function, as the \"place\" to where to save and\nrestore from.",
    "FortPersistenceFrameworkContainerLocation_MCP": "At save and restore time, this location data is sent to the\ncontainer save and restore function, as the \"place\" to where to save and\nrestore from.",
    "PFWExample_ServiceWrapper_ContainerLocation": "At save and restore time, this location data is sent to the\ncontainer save and restore function, as the \"place\" to where to save and\nrestore from.",
    "FortAthenaMutator_ReplicationGraph:MutatorZonesMap": "At startup, override the UReplicationGraph spacialization zone settings with this.\nIf empty, this is ignored.\nSee hard-coded values in UFortReplicationGraph::InitDynamicSpatializationSettings().",
    "FortCharacterMovementMutatorComponent:BuffetBubblesInitialFollowBoxOffsetPercent": "At the beginning of BuffetBubbles, move toward a location within the follow box, using the specified percents of the box dimensions",
    "FortAthenaMutator_Uranium:EarlyEndGame_BlowOutRoundNumberMin": "At the end of each round with this index or higher the game will check if there is a blowout and will end early if a blowout is detected",
    "LiquidRibbonManager:NumPointsToTaperDownSplineEndSize": "At the end of the spline, the size is tapered down. This is how many points the taper down should consist of.",
    "EFortReplenishmentType.Add": "At the start of a new zone you always give the player this item at the specified quantity.",
    "FortActiveSubscription:WillAutoRenew": "At the time of query, whether auto-renew was enabled.\nWill be deprecated. Please use AutoRenewState instead.",
    "FortActiveSubscription:IsRetryingRenewal": "At the time of query, whether vendor was retrying payment for this subscription (NextRenewalRewardDate will be in the past!)",
    "FortAthenaMutator_Uranium:StartMovingRespawnCheckPointPct_DefenderTeam": "At this percent progress towards next checkpoint, START moving the DEFENDER team's respawn locations in relation to the pushcart's progress",
    "FortAthenaMutator_Uranium:StartMovingRespawnCheckPointPct_PusherTeam": "At this percent progress towards next checkpoint, START moving the PUSHER team's respawn locations in relation to the pushcart's progress",
    "FortAthenaMutator_Uranium:StopMovingRespawnCheckPointPct_DefenderTeam": "At this percent progress towards next checkpoint, STOP moving the DEFENDER team's respawn locations in relation to the pushcart's progress",
    "FortAthenaMutator_Uranium:StopMovingRespawnCheckPointPct_PusherTeam": "At this percent progress towards next checkpoint, STOP moving the PUSHER team's respawn locations in relation to the pushcart's progress",
    "FortAthenaMutator_Barrier:HealthToWarnAboutRespawnsAt": "At what level (75, 50, 25, 10) should we warn players about their impending inability to respawn?\nSet to an invalid value (or 0) to skip/don't warn",
    "RespawnAndSpectatePlayerComponent:RespawnFailSafeTime": "At what server time the player will be forced to respawn",
    "FortClientAnnouncement:ClientDeliveryStatus": "At what stage in the delivery process, on the client, is this announcement",
    "FortPlayerStateAthena:TimeOfPawnCreation": "At what time was the pawn last created.",
    "TeamPerformanceMessageData:StatThreshold": "At what value of TrackingStat will this message trigger.",
    "CrashpadStaticParams:MovingWithHeldObjectThreshold": "At what velocity is an actor with a held object considered to be moving",
    "EUIExtensionSlot.AthenaDashboardWidgetOverlay": "Athena Dashboard Widget general overlay",
    "EFortFrontendInventoryFilter.AthenaCharacter": "Athena Filter catagories",
    "NavMeshDetectedInfo:NavMesh": "Athena NavMesh that is being watched",
    "EFortQuestType.AthenaEvent": "Athena event quest",
    "EFortUIFeature.ShowAthenaFavoriting": "Athena features",
    "EFortItemType.AthenaPickaxe": "Athena harvesting tool / melee weapon",
    "AthenaAITestSpawnSet:AthenaSpawnInfoContainer": "Athena version of what to spawn",
    "EFortQuestObjectiveStatEvent.AthenaMarker": "AthenaMarkerComponent calls this when we mark something with an ItemDefinition with Tags. Target is the FortPickup or BuildingContainer that was marked.",
    "AttachedBuildingActorGuids:AttachedBuildingActorGuids": "Attached Building Actor Guids",
    "EFortPlayerFeedbackFlags": "Attached to Categories - meant to be as catch all modifiers for any weird requests from design. SubCategories inherit parent flags. See: UFortPlayerFeedbackModal::GetFlags",
    "EBuildingAttachmentSide.Back": "Attached to the bottom / back side of a building",
    "EBuildingAttachmentSide.Front": "Attached to the front / top side of a building",
    "EAthenaPetAttachRule.AttachToBackpack": "Attaches the pet to the backpack.",
    "EAthenaPetAttachRule.AttachToBody": "Attaches the pet to the body.",
    "EBuildingAttachmentType.ATTACH_Corner": "Attaches to 2 walls",
    "EBuildingAttachmentType.ATTACH_Ceiling": "Attaches to a ceiling",
    "EBuildingAttachmentType.ATTACH_Floor": "Attaches to a floor",
    "EBuildingAttachmentType.ATTACH_Wall": "Attaches to a wall",
    "EBuildingAttachmentType.ATTACH_All": "Attaches to any valid slot",
    "EBuildingAttachmentType.ATTACH_CeilingAndStairs": "Attaches to ceiling or underside of stairs and sloped roofs",
    "EBuildingAttachmentType.ATTACH_FloorAndStairs": "Attaches to floors or top side of stairs and sloped roofs",
    "FortHeldObjectComponent:PlayerAttachmentScaleRule": "Attachment rule for scale on pickup.",
    "FortGameplayCueAttachInfo": "Attachment settings used to spawn effects",
    "FortDecoPreview:FallbackAttachmentType": "Attachment type used in the event that actual placement actor cannot provide an attachment type",
    "FortAthenaMutator_Infiltration": "Attacker State",
    "InfiltrationTeamInfo": "Attacker State",
    "EBuildingGameplayActorSentry_State.Aggro": "Attacking a target",
    "EDeployableTurretState.Attacking": "Attacking a target",
    "AthenaAIController:bAutoAttackOnMovedHit": "Attempt to auto attack the building or vehicle on collision if enabled.  Default is enabled",
    "FortBuildingActorSpawner:bSpawnAtPreviewPositionNoQuery": "Attempt to spawn the actor as closely as possibly to the preview actor position. Ignores the results from the query",
    "FortBuildingActorSpawner:bSpawnAtPreviewRotation": "Attempt to spawn the actor as closely as possibly to the preview actor rotation",
    "EFortMissionStatus.Failed": "Attempted but failed",
    "EFortObjectiveStatus.Failed": "Attempted but failed",
    "EFortSessionHelperJoinState.AttemptingJoin": "Attempting to join the session",
    "EBuildingAttachmentType.ATTACH_WallThenFloor": "Attempts to attach to a wall; If a wall is not found, attempts to attach to floors",
    "FortPawn:FrontEndEmoteAudioAttenuation": "Attenuation to use when emoting in the front-end",
    "HeroSpecializationDesignerData:AttributeInitKey": "Attribute Init Key",
    "HomebaseSquadSlot:SlottingBonuses": "Attribute bonuses for slotting a worker in this slot",
    "FortGameplayAttributeData:Minimum": "Attribute clamping\n        // The minimum value that this attribute is allowed to be",
    "FortCharacterVehicle:AttributeInitKey": "Attribute initialization key for look-up in global spreadsheet of attribute defaults",
    "FortGameFeatureAction_PlayerAttributesToAdd:AttributeInitKey": "Attribute initialization key for look-up in global spreadsheet of attribute defaults",
    "FortRemoteControlledPawnAthena:AttributeInitKey": "Attribute initialization key for look-up in global spreadsheet of attribute defaults",
    "FortScoutDrone:AttributeInitKey": "Attribute initialization key for look-up in global spreadsheet of attribute defaults",
    "FortTooltipDisplayStatInfo:Attribute": "Attribute passed to the tooltip to fill in the values. Only one of the attribute or token should be set.",
    "FortSpecializationSlot:AttributeRequirements": "Attribute requirements that must be met for this specialization slot to be active",
    "FortScoutDrone:EnergySet": "Attribute set corresponding to the Drone's energy",
    "FortScoutDrone:HealthSet": "Attribute set corresponding to the Drone's health",
    "FortGameFeatureAction_PlayerAttributesToAdd:AttributeSet": "Attribute set to add to the player",
    "TokenAttributePair:Attribute": "Attribute to return",
    "FortGameplayCueNotifyAthena_FallDamageImmunity:FortLayeredAudioComponent": "Audio Component that that plays sound based on the player's Z speed.",
    "FortMutatorMusicEventPlayInstance:AudioComponent": "Audio Component to play this instance's sound on.",
    "ESettingType.MasterVolume": "Audio Tab Settings",
    "FortPawnComponent_Convert:ConvertInteractionSound": "Audio asset vars for convert interaction",
    "FortPlayerPawnAthena:OnReviveSound": "Audio asset vars for reviving",
    "FortCurieActiveAmbientAudio:AudioComponent": "Audio component actively playing ambient audio",
    "GameplayCueNotify_Jetpack_Hovering:AccelAudioComp": "Audio component spawned and set by blueprint",
    "GameplayCueNotify_Jetpack_Hovering:IdleAudioComp": "Audio component spawned and set by blueprint",
    "GameplayCueNotify_Jetpack_Hovering:OutOfFuelAudioComp": "Audio component spawned and set by blueprint",
    "FortAthenaMutator_Wax:GameEndMusicAudioComponent": "Audio component that runs the GameEndMusic\n     Used to fade out the game end audio when the game fully ends.",
    "FortGameplayCueNotify_Looping:AudioComponent": "Audio component that will be active while the cue is active",
    "BulletWhipTrackerSystemData:WhipAudioComponent": "Audio component to potentially be created if we determine we need to trigger a whip",
    "FortCowVehicle:PhysicsAudioComponent": "Audio component.",
    "FortGameplayCueAudioInfo_Looping:LoopingSoundFadeOutDuration": "Audio cue fade out duration for the LoopingSoundCue during removal",
    "TurretCosmeticData:AudioFadeinDuration": "Audio fadein duration",
    "TurretCosmeticData:AudioFadeoutDuration": "Audio fadeout duration",
    "FortCowVehicle:AudioParamSpeedName": "Audio float parameter name for the speed.",
    "FortCowVehicle:AudioParamInWaterName": "Audio float parameter name for when we're in the water.",
    "FortCowVehicle:AudioParamOnGroundName": "Audio float parameter name for when we're on the ground.",
    "EFortNotifyAudioParamsStoreSource.Pawn": "Audio param data will live on the pawn itself.\nUseful for emote/GameplayCue effects, or CCPM particles",
    "EFortNotifyAudioParamsStoreSource.Controller": "Audio param data will live on the pawn's controller.\n... ???",
    "EFortNotifyAudioParamsStoreSource.Weapon": "Audio param data will live on the weapon itself.\nuseful for fire/impact effects, or weapon idles",
    "MilkshakeControllerComponent:CameraShakeAudioParam": "Audio param that corresponds to the camera shake intensity",
    "BuildingSMActorClassData:WindAudio": "Audio played by this actor based on wind intensity.",
    "SparksMusicPlayspace:MetasoundMixer": "AudioComponent that holds the MetasoundMixer (for applying track mute and mixing to final output)",
    "SparksMusicPlayspace:MetasoundPlayer": "AudioComponent that holds the MetasoundPlayer (for triggering pause/seek/end)",
    "FortBotAugmentsDataTableRow:AugmentItemDefinition": "Augment item definition",
    "FortAugmentBaseWeightTableRow": "Augment specific implementation of base weight table rows.\nThis is used instead of the base row in case augments need to add specific data not related to the base roll system.",
    "FortAugmentWeightModificationDataRow": "Augment specific implementation of weight modification table rows.\nThis is used instead of the base row in case augments need to add specific data not related to the base roll system.",
    "FortBotAugmentsDataTableRow:Weight": "Augment weight for selection (Set to 0 to remove it from supported augments)",
    "ELoginResult.AuthFailed": "Auth failed",
    "ELoginResult.PlatformNotAllowed": "Auth succeeded but account is not allowed to play on this platform",
    "ELoginResult.ServiceUnavailable": "Auth succeeded but service is currently unavailable for play",
    "ELoginResult.NotEntitled": "Auth succeeded but user is not entitled to play",
    "ELoginResult.Console_NotEntitled": "Auth succeeded, but user is not entitled to play on this platform",
    "FortLobbyBeaconPlayerState:TrustedPlatformType": "Auth token authoritative platform declaration, may not be set early in login flow, needs to talk to backend to verify",
    "FortPlayerState:TrustedPlatformType": "Auth token authoritative platform declaration, may not be set early in login flow, needs to talk to backend to verify",
    "SavedCredentials:Token": "Auth token for account",
    "VkTeamPublicProperties:EmailDomains": "Authorized email domains",
    "CollisionReactionConfiguration:bAutoRun": "Auto Activate the Reaction Component if true.",
    "FortPlayerController:bAutoChangeMaterial": "Auto change material means we'll change to another material when you run out of the currently selected material as you're building.",
    "EFortQuestSubtype.Autofill": "Auto fill quest",
    "FortAthenaMutator_AutoPickup:AutoPickupDefaultItems": "Auto pickup for all other items.",
    "FortAthenaMutator_AutoPickup:AutoPickupAmmoItems": "Auto pickup for ammo items.",
    "FortAthenaMutator_AutoPickup:AutoPickupConsumableItems": "Auto pickup for consumable items.",
    "FortAthenaMutator_AutoPickup:AutoPickupGadgetItems": "Auto pickup for gadget items.",
    "FortAthenaMutator_AutoPickup:AutoPickupTrapItems": "Auto pickup for trap items.",
    "FortAthenaMutator_AutoPickup:AutoPickupWeaponItems": "Auto pickup for weapon items.",
    "FortAthenaMutator_AutoPickup:AutoPickupWorldResourceItems": "Auto pickup for world resource items.",
    "FortWeapon:bExitTargetingWhenPrimaryIsFired": "Automatically exit targeting mode when the weapon is fired.\n     This is good for weapons that have a long cooldown between shots where it doesn't make sense for the player to be able to aim the weapon during that time.\n     Some weapons will act this way regardless of this flag's setting because firing the weapon will cause the player to enter a different movement mode which will cause the player to exit targeting mode.",
    "FortCurieInteractionComponent": "Automatically handles executing Curie elemental Applications and Interactions to components that hit/overlap a specified collider *",
    "ValetRaisinComponent": "Automatically handles the response and networking of a music source.",
    "FortProjectileBase:bAutoKillAtDistanceFromInitialLocation": "Automatically kill the projectile when it has travelled past a threshold (typically the net cull distance).",
    "ValkyrieEditorConfig:bAutoUndoOnFailedCheckout": "Automatically undo operations on assets that cannot be checked out",
    "FortAthenaMutator_GG:ScoreToWin": "Automatically updated to match the curve data.",
    "EAutoplayOptions": "Autoplay options, stored as bitflags",
    "EAuxIndicatorStates.AIS_Active": "Auxiliary component has been touched by the user",
    "EAuxIndicatorStates.AIS_Inactive": "Auxiliary component is inactive and hasn't been touched by the user",
    "EAuxIndicatorStates.AIS_GuidingArrow": "Auxiliary component is providing a directional arrow to a valid move the user can make",
    "EAuxIndicatorStates.AIS_ConfirmedArrow": "Auxiliary component is showing a directional arrow of a confirmed move the user already made",
    "AuxiliaryEditTileMeshData": "Auxiliary data for setting tile meshes directly during valid roof configurations",
    "FortAttributeInfo:bNegativeValuesShouldBeDisplayedPositively": "Auxiliary information for displaying the attribute.\nIf false - values greater than 0 will be displayed as positive and less than 0 as negative; if true - the other way around.",
    "EPersistenceFrameworkStorageEnvironment": "Available environments for storage",
    "FortCrewTemporaryItemsState:AvailableItems": "Available temporary items for crew subscribers",
    "AvailableTierLayout:AvailableTiers": "Available tiers from within the layout asset based upon player progression",
    "FortCreativeBudgetComponentSimulationCost:SimulationCost": "Average Simulation Cost",
    "DynamicXpAggregatedStats:MeanSessionLengthMinutes": "Average length of a session to help calculate XP",
    "FortAssignedObjectiveSquadData:CachedSquadAvgLocation": "Average location of members in a squad.\nCalculated as part of assigned objective matchmaking and cached for use in the EQS",
    "BuildingProp:bDoNotBlockMarkerTraceWhenOverlappingPlayer": "Avoid blocking Ping trace when player is pinging from inside/overlapping\nEnable for bush, cornfields where player can ping outside while standing inside the Actor",
    "FortHoagieVehicle:bEngineAudioDisabled": "Avoid engine audio update when we are out of fuel on entry to vehicle",
    "DigestedVehicleDriving:bAvoidanceEnabled": "Avoidance enabled",
    "VehicleDriving:bAvoidanceEnabled": "Avoidance enabled",
    "DigestedVehicleDriving:AvoidanceTagQuery": "Avoidance tag query",
    "VehicleDriving:AvoidanceTagQuery": "Avoidance tag query",
    "EFortQueuedActionUserStatus.WaitingForProfileSave": "Awaiting a cloud request to return",
    "EFortEncounterState.Active": "Awaiting activation by timer or manual activation request",
    "FortPhysicsObjectComponent:PhysicsObjectAwakeState": "Awake State Flag",
    "EFortRewardType.Default": "Awards that were granted for success",
    "EFortRewardType.Missed": "Awards that were possible but were not granted",
    "EFortCreativeLinearMoverRotationAxis": "Axis to rotate on when in rotation mode",
    "FortAnimInput_FerretVehicle:bWasUp": "BEGIN a set of properties for preventing player orientation flickering when the plane is straight up/down",
    "FortVehicleModInstanceDataComponent:SpawnedBGAs": "BGAs spawned by the associated mod config with the mod tag. Useful to prevent unnecessary respawning of attached BGAs.",
    "CreativeDeviceInfo": "BP accessible device data used in the device browser",
    "ESpecialEventGameUserSettingsResult": "BP execution paths for USpecialEventGameUserSettingsControllerComponent::GetData()",
    "EFortQuestType.AthenaChallengeBundleQuest": "BR Challenge Bundle Quest (e.g., battle pass weekly quest)",
    "EPlayerReportReasons.CommunicationsAbuse": "BR Reasons:",
    "EFortQuestType.AthenaLooseQuest": "BR quest that doesn't belong to any bundle or schedule - typically given by NPCs and will generally have a short life time",
    "AthenaDynamicRestedXpProgression:DynamicRestMult": "BR rest XP multiplier",
    "ButterCakeUnstuckComponent:BTTaskSamples": "BTTask Samples History",
    "FortPickupsParent": "B_Pickups_Parent BeginPlay needs nativization",
    "EFortConnectivityCubeFace.Back": "Back wall cube face",
    "FortScriptedActionParams:SourceName": "Backend name for objective that triggered this",
    "QuestCompletionNode:Objective": "BackendName for the objective this is associated with",
    "EMMSRulePreset.Off": "Backfill server, respect team requirements, split parties",
    "FortCreativeHeatmapCellDrawData:Icon": "Background and Icon",
    "FortHabaneroTier:BackgroundIcon": "Background icon to visually identify this tier on Habanero display cards",
    "EFortItemType.AthenaBackpack": "Backpack",
    "FortAthenaVehicle:PlayerSlotsBackup": "Backup in case something goes wrong w/ PostLoad. After the vehicles cook I'll remove this",
    "ScriptedObjectMovement_StaticPathStepData:bIsSkipStep": "Bad steps are skipped, but need to be present for other reason (like affecting the landscape)",
    "AccountIdAndMatchEndData:EarnedBadgeData": "Badges earned during the mission",
    "EndZoneScoreAndAwards:EarnedBadgeData": "Badges earned during the mission",
    "EFortReplicatedStat.BadgesScore": "Badges score. KEEP THIS BETWEEN MAX AND SCORE!",
    "FortMovementComp_Character:BalloonControlParams": "Balloon params",
    "FortWeapon:HitNotifyAudioBank": "Bank of 2d hit notification sounds that are played when receiving or sending bullet impacts",
    "AthenaSeasonBannerLevelSchedule:Levels": "Banner table",
    "FortPlayerCameraBase:Base3PClass": "Base (not targeting) camera in third person",
    "FlyingRidableControlParams:BaseAcceleration": "Base Acceleration",
    "RepGraphActorSettingsBase": "Base Actor Setting Used for FRepGraphActorClassSettings and FRepGraphActorTemplateSettings",
    "FabricButtonComponentBase": "Base Blueprint class all Fabric button components inherit from.",
    "FabricButtonBase": "Base Blueprint class all Fabric buttons inherit from.",
    "FortConditionalCalendarEvent": "Base Class for Calendar Event controller actors so we can interface to them from C++ code.",
    "FortGameModeAthena": "Base GameMode for Battle Royal",
    "DeviceTrackingPageBase": "Base Page Struct containing a replicated variable PageRequestCounter.  PageRequestCounter should be incremented on the Server each time a page request comes in.\nThis way we will always be able to replicate back to the client and hit it's OnRep to complete the request even if nothing changed on the page",
    "FortPersistentProp:BaseLifetime": "Base Properties",
    "FlyingRidableControlParams:BaseAccelerationBoost": "Base acceleration boost when flying straight forward",
    "FortItemPlacementActor": "Base actor class for 3D preview actors in the frontend",
    "FortEarnScoreNotification:BaseXPEarned": "Base amount of XP earned",
    "FortExperienceDelta:BaseXPEarned": "Base amount of XP earned",
    "FortBaseWeaponStats:DiceCritChance": "Base chance for the weapon to \"dice\" crit (crit not dependent upon hit area of a target)",
    "MMRSpawningBracketBaseDataTableRow": "Base class data row matching MatchMakingRating (MMR)",
    "BuildingGameplayActorBalloon": "Base class for Balloon BGA",
    "BuildingGameplayActorBalloonRope": "Base class for Balloon Rope BGA",
    "BuildingGameplayActorC4": "Base class for C4 BGA",
    "BuildingGameplayActorChaser": "Base class for Chaser BGA",
    "BuildingGameplayActorFlopperSpawn": "Base class for FlopperSpawn BGA",
    "FortEventName": "Base class for Mission and Client event names. This is used internal to the widget, use subclasses in gameplay code",
    "FortAthenaPartyRiftPortal": "Base class for PartyRift portal objects that allow creation of ad-hoc social parties",
    "CcaCsvCosmeticPropertiesData": "Base class for QA to use for creating structs that will convert CSV files to Data Tables.",
    "AthenaSuperDingo": "Base class for Super Dingo BGA",
    "FortCurieToggleComponent": "Base class for a component whose activation is driven by the application of Curie elements;\nUseful for making puzzles, etc. with actors that need to be hit by certain elements;\nRequires owning actor to also have a Curie material component",
    "FortGameCueNotifyLoop_Cloak": "Base class for a gameplay cue that cloaks the player making them semi-transparent.\n    The class has controls for deciding how the player's visibility is affected by movement and blueprint defined modifiers.",
    "FortAthenaMutator_ShowPlacard": "Base class for a helper mutator whose job is to show all players a non-interactable UI when ShowScreen() is called.\n After a set amount of time the screen will go away and OnShowPlacard_Finished will be broadcasts",
    "FortScriptedObjectMovement_MovableObjectBase": "Base class for a object element in a object structure.\n        todo: matt.stone consider making an interface for the functionality so we can have any object be an interface; whle providing this as an implementation of interface.\nIt is extremely unfortunate that ABuildingActor implements IFortCurieInterface -- as that is from a plugin -- which causes linker errors here unless we add curie as a dependency for SOM plugin.",
    "RockVehicleAbility_Physics": "Base class for a vehicle ability that affects the vehicle's physics",
    "FortAthenaMutator": "Base class for all Athena Mutators",
    "FortProjectileSniperAthena": "Base class for all Sniper projectiles.",
    "BaseSample": "Base class for all unicorn game samples. Used to build up a stateless picture of the world",
    "BuildingGameplayActorSentry": "Base class for automatic sentry turret.",
    "BuildingGameplayActor": "Base class for building actors that are used for abilities or activities that do not require their instigator to function.\nUse this class if your object should have health, should take damage, should persist in save games, and/or should execute its own abilities.\nThese actors are not statically placed in levels, but instead spawned at runtime.\nFor example, this should be used for the propane tank or a turret.",
    "BuildingGameplayActorConsumable": "Base class for building gameplay actors which act as in-world consumables, applying a specified gameplay effect to the user that consumes them",
    "FortAthenaZiplineBase": "Base class for common zipline features",
    "SpecialEventAudioAnalysisBaseComponent": "Base class for components used to drive behavior from audio with AudioSynesthesiaNRT assets",
    "BuildingGameplayActorBlade": "Base class for consumable blade (Infinity Blade)",
    "BuildingGameplayActorLockOnConsumable": "Base class for consumable that have lock-on interaction with the pawn. (e.g. blade pulled from the stone, chests that the pawn opens with his hands, etc. )",
    "BuildingGameplayActorCrashpad": "Base class for crash pad BGA (a prop that launchs overlapping pawns and building actors relative upward.)",
    "BaseUrlContext": "Base class for our UrlContext parameters",
    "BuildingGameplayActorPlayerPropAttachment": "Base class for prop attached to player (used in prop hunt game modes).",
    "FortPlayerControllerGameplay": "Base class for replays and zones which have gameplay elements.",
    "BuildingGameplayActorCloneMachine": "Base class for resurrection clone machine",
    "BuildingGameplayActorSpawnChip": "Base class for resurrection respawn chip",
    "BuildingGameplayActorSpawnMachine": "Base class for resurrection respawn machine",
    "BuildingGameplayActorSandMound": "Base class for sand mound BGA",
    "FortAIComponent_Telemetry": "Base class for telemetry components for AIs",
    "BuildingProp_LockDevice": "Base class for the Lock Component Device",
    "RadioTowerTerminal": "Base class for the Radio Tower mid match objective terminal screen",
    "FortPlayerCharm": "Base class for the charm cosmetic (used both in game and in the front end preview)",
    "FortPlayerParachute": "Base class for the glider/umbrella/parachute cosmetic (used both in game and in the front end preview)",
    "BattleBusCosmeticInstanceBase": "Base class for the in-flight version of the battle bus",
    "FortPlayerPet": "Base class for the pet cosmetic (used both in game and in the front end preview)",
    "FortGameplayCueNotify_Actor": "Base class of BurstLatent and Loop, generally should not be directly blueprinted",
    "CampsiteImprovementComponent": "Base component for spawning campsite improvements.",
    "FortEmporiumItemData:BaseCurrency": "Base currency for price",
    "EFortBaseWeaponDamage.Environmental": "Base damage for striking a combat entity (usually a character or a pawn, but could be something like an explosive projectile, etc.)",
    "EDeployableBaseUseType.PvECombat": "Base deployed for PvE combat",
    "FortGameFeatureInstallBundleURLData:BasePluginDirectory": "Base directory that the Required and Optional GameFeaturePlugins should be located in.\nShould be relative to the ProjectDir (IE: Plugins\\GameFeatures\\InstallBundles\\GameplayCreative )",
    "FortAthenaVehicle:DragCoefficient": "Base friction applied (doesn't use typical wind resistance v^2 formula)",
    "FortGyroV2Settings:GyroV2Sensitivity": "Base gyro sensitivity.",
    "ValkyrieTemplateMapInfo:BaseInfo": "Base info",
    "FortKeepItemGroup:BaseLevel": "Base level of item to drop",
    "FortDecoPreview:PreviewPlacementMaterial": "Base material to use for MIDs for previews",
    "FortHeldObjectComponent:PreviewMaterial": "Base material to use for MIDs for previews",
    "FortPhysicsObjectComponent:PreviewMaterial": "Base material to use for MIDs for previews",
    "FortPhysicsReplicatedTargetGhost:PreviewMaterial": "Base material to use for MIDs for previews",
    "FortWeap_BuildingTool:BlueprintPaperMaterial": "Base material to use for the blueprint paper",
    "FortDaySequenceActor:OutlinePostProcessMaterial": "Base material to use to create the outline post process MID",
    "FortTimeOfDayManager:BasePostProcessMaterial": "Base material to use to create the post-process MID that code modifies",
    "FortPlayerFoleyContextSettings:EventName": "Base name for this event.  The detected surface type will be appended if bUseSurfaceType is true.",
    "FortPawnComponent_GrindRail": "Base pawn component for controlling grind rail behavior of the owner pawn",
    "FortEmporiumItemData:Price": "Base price",
    "FortAthenaMutator_DeimosSurvival:AdjustSafezoneCentersQuery": "Base query run at the game start to produce result locations that can be accessed with a generator for other queries executed from the mutator",
    "FortAthenaMutator_SpawningPolicyEQS:BasePlacementQuery": "Base query run at the game start to produce result locations that can be accessed with a generator for other queries executed from the mutator",
    "FortAthenaMutator_SupplyDrop:BasePlacementQuery": "Base query run at the game start to produce result locations that can be accessed with a generator for other queries executed from the mutator",
    "VehiclePontoonBuoyancyDataExtended:BaseRadiusBeforeScale": "Base radius before scaling.",
    "FortBulletPatternEntryData:RelativeRotation": "Base relative rotation from the central fire line. Only pitch and yaw are used, roll is ignored.",
    "MMRSpawningBaseRuntimeInfo": "Base runtime spawning info for a given MMR bracket row",
    "FortRangedWeaponStats:Spread": "Base spread of the weapon",
    "GameplayAbilityRepSharedAnim_Base": "Base struct for SharedAnim data that contains no UObject*",
    "FortTaggedUnlockBase": "Base struct for all tag-based unlocks",
    "SpecialEventRewindComponentFrame": "Base struct for data to store per frame of the recording.\nA derived struct should be made for a corresponding derived USpecialEventRewindComponent and FSpecialEventRewindComponentRecording.\nA FFastArraySerializer struct should be made to contain an array of this struct,\nwith NetDeltaSerliaze() implemented, and WithNetDeltaSerializer = true.",
    "TieredCollectionProgressionDataBase": "Base struct for tiered collections that must be selected from",
    "CurieElementDefinitionBase": "Base struct representing the definition of a Curie element entity",
    "CurieEntityStateDefinitionBase": "Base struct representing the definition of a Curie entity state class",
    "CurieMaterialDefinitionBase": "Base struct representing the definition of a Curie material entity",
    "SaveStructFile": "Base struct save file for future work to save any struct the user gives the system.",
    "FortGameFeatureStatusBase": "Base struct that holds shared info between our Required and Optional GameFeatureStatus structs",
    "PhaseLevelEntryBase": "Base struct to allow a SpecialEventScript to load/unload levels and change their visibility",
    "ObjectiveExtensionData": "Base struct type for any objective extension data",
    "CurieContainerHandle": "Base struct used to represent a curie container handle",
    "CurieStateHandle": "Base struct used to represent a state handle",
    "CurieElementHandle": "Base struct used to represent an element handle",
    "CurieInteractHandle": "Base struct used to represent an interaction handle",
    "FortPlayerSurveyCMSData": "Base structure for incoming CMS data, for use with FJsonObjectConverter::JsonObjectToUStruct",
    "FortPlayerSurveyAnalyticsData": "Base structure for outgoing Analytics data",
    "FortGameSessionDedicated:DataAssetDirectoryUpdateCheckTimer": "Base time before a check for asset updates is made",
    "FortGameSessionDedicated:HotfixCheckTimer": "Base time before a check for hotfixes is made",
    "FortGameSession:DisconnectedReservationTimeout": "Base time before idle server is reset",
    "MilkshakeControllerComponent:CameraShakeRotOscillationBaseValues": "Base values for the Camera Shake's Rot Oscillation.",
    "BasicDeviceTrackingInfosPage": "Basic Device Tracking Info Page\nCan be used on Clients to view Basic Tracking Info for Devices in an Overall Device Viewer UI Displaying All Devices",
    "FortClientAnnouncementData_Basic": "Basic announcement data",
    "VkLinkCodePublicModules": "Basic info about a link code and its public modules",
    "RadialOptionData": "Basic properties describing a radial picker option",
    "FortClientAnnouncement_Tutorial": "Basic tutorial announcement that updates text, displays a light box and advances the tutorial along. All tutorial announcements should implement the tutorial interface.",
    "PersistenceFrameworkSaveData_ContainerVersion": "Basic versions info that is can be stored with each container if needed.",
    "FortPlayerConversationUIComponent:SpectatorConversationScenes": "Basically the same as the conversation screen DialogWidgetSoftClass refers to but for spectators",
    "FortPlayerConversationUIComponent:SpectatorMobileConversationScenes": "Basically the same as the conversation screen MobileDialogWidgetSoftClass refers to but for spectators",
    "UIStateRelay:ClaimedBatons": "Batons that have already been claimed",
    "EFrontEndCamera.BattlePass": "Battle Pass Camera",
    "EFortBangType.BattlePassTab": "Battle Pass Tab",
    "CosmeticLoadoutPartyReplState:BattlePassLevel": "Battle level, 0 if doesn't own battle pass",
    "EAthenaAIServicePOIList.MainBusDrop": "BattleBusTagQueryPOIList",
    "EFortItemType.BattleLabDevice": "BattleLab Devices used in \"my island\"",
    "FortPlayerController:BattleMapSpectatorClass": "BattleMap for live (non-replay)",
    "FortGameSession:ReservationBeaconHost": "Beacon controlling access to this game",
    "FortGameSession:DisconnectedPlayerReservations": "Beacon listening for incoming lobby requests",
    "FortGameSession:LobbyBeaconHost": "Beacon listening for incoming lobby requests",
    "FortGameSession:SpectatorBeaconHost": "Beacon listening for incoming spectator requests",
    "ContentBeaconClientV2": "Beacon used to communicate with an incoming client that it needs to download content before joining the server.",
    "ContentBeaconHostObjectV2": "Beacon used to communicate with an incoming client that it needs to download content before joining the server.",
    "FortContentBeaconClientV2": "Beacon used to communicate with an incoming client that it needs to download content before joining the server.",
    "FortContentBeaconHostObjectV2": "Beacon used to communicate with an incoming client that it needs to download content before joining the server.",
    "MusicLength:Beat": "Beat",
    "OldMusicTempometerComponent:MeasureBeatParameterName": "Beat from the beginning of the measure.",
    "ApparelCustomizableItemReference": "Because a TSoftObjectPtr<UCustomizableObject> is not a suitable handle to represent everything which is an Apparel\nas a single Apparel",
    "FortAthenaMapInfo:CachedPlayableBoundsForClients": "Because we don't load the SafeZoneVolumeDefinitions on clients, we need to save this in the editor",
    "EMusicClipSyncOptions.TimeAuthority": "Become the emitter's Time Authority. Time Followers on that emitter will follow me.",
    "FortMinigame:PreGameStartCameraFadeoutTime": "Before a minigame starts during countdown the screen fades out. This time determines how long before the minigame is done with pregame\nto start that fadeout. Defaults to 3, e.g. the fade out happens 3 seconds before pregame finishes.",
    "FortAthenaMutator_Rounds:NextRoundFadeOutDuration": "Before setting up the next round, fade out the screen over this duration",
    "FortSafeZoneIndicator:SafeZoneStartShrinkTime": "Before this world time, our radius/center will be PreviousRadius/PreviousCenter.\nAfter this world time, we will gradually shift from PreviousRadius/PreviousCenter\ntoward NextRadius/NextCenter, until we reach SafeZoneFinishShrinkTime.",
    "FortVisibilityComponent:bCheckFacing": "Behavior Agnostic - After radius check passes the observer needs to be facing you.",
    "FortVisibilityComponent:bCheckLOS": "Behavior Agnostic - After radius check passes the observer needs to have LOS to you.",
    "FortVisibilityComponent:Radius": "Behavior Agnostic - Visible radius from the observer.",
    "CurieEntityStateDefinitionBase:StateBehaviorClass": "Behavior class the defines the behavior of the state when applied",
    "FortAthenaMutator_InventoryOverride:InventoryUpdateOverride": "Behavior for overriding inventory",
    "EFortCreativeLinearMoverCollisionBehavior": "Behavior to perform on collision.",
    "EFortCreativeLinearMoverMovementCompleteBehavior": "Behavior to perform when movement is complete.",
    "FortCreativeLinearMoverComponent:RotationCompleteBehavior": "Behavior to perform when rotation is complete.",
    "FortCreativeLinearMoverComponent:TranslationCompleteBehavior": "Behavior to perform when translation is complete.",
    "EDynamicUIUnallowedBehavior": "Behavior to use on a widget that is unallowed.\n   When multiple scenes targets the same widget with different behavior, the strongest will be used.\nBehaviors are listed in ascending order of strength in the enum.",
    "DynamicUIUnallowed:Behavior": "Behavior to use on the widget.",
    "SkyfireBotPlayerPawnComponent:PreviousBehaviorTree": "Behavior tree used before going inside the mothership, reapplied when leaving mothership",
    "EUIExtensionSlot.BehindMobileLocalPlayerInfo": "Behind mobile Local Player Health/Shields",
    "EUIExtensionSlot.UnderLocalPlayerInfo": "Below Local Player Health/Shields",
    "FortGameModeOutpost:bEnableUnsupportedStructureDisassembly": "Below is a system for culling unsupported / floating Outpost structures for use at the end of world initialization / zone entry",
    "FortGameModeOutpost:bEnableLargeScaleDisassemblyForcedSaves": "Below is large scale disassembly tracking system",
    "EncounterGoalSelectionTableEntry": "Below was created starting from struct FGoalSelectionQueryInfo in AssignmentSettings, and should ultimately replace it.",
    "ConditionalBenefitLevel:PreviousBenefitsRemoved": "Benefits(s) that the potential recipient will no longer receieve if obtaining this benefit level (allows benefits to be 'replaced' with improved versions)",
    "ConditionalBenefitLevel:BenefitsGained": "Benefits(s) that the potential recipient will receive if obtaining this benefit level",
    "ReplicatedAttachParams:NarrowPlacementAgainstVelocityThreshold": "Between 0.f and 1.f  If this is greater than 0.f, we'll try and find a point on side of the bone facing opposite\nthe projectiles velocity.  0.0 allows up to 90 degree variance.  1.0 means an offset exactly opposite the velocity.",
    "AttachedInfo:NarrowPlacementAgainstVelocityThreshold": "Between 0.f and 1.f  If this is greater than 0.f, we'll try and find a point on side of the bone facing opposite the projectiles velocity.  0.0 allows up to 90 degree variance.  1.0 means an offset exactly opposite the velocity.",
    "PhysicsMagneticForceData:FallOffBias": "Bias for distance based falloff calculation",
    "WaxRespawnLogicData:SpawnBehindTeammateBias": "Bias to use when averaging results between spawning behind teammates and spawning away from leaders (if both are active).\nShould be > 0. Numbers lower than 1 will move closer to spawning away from leaders, higher than 1 will spawn closer to teammates.",
    "VkResolvedModule:Binaries": "Binaries representing this module",
    "ESpecialEventInputActionBindType.Bind": "Bind to the input.  Base behavior is overridden by SpecialEventInputPressDelegate.",
    "DestroyOnSafeZonePhaseComponent:OnDestroyDelayStarted": "Bind to this to get a signal when the destruction is imminent but not yet started. Does not fire if there is no delay.",
    "AthenaBismuthSpawner": "Bismuth spawners are used to setup the spawn locations of the AI Bots in Bismuth LTM.",
    "EGameModePauseWarmupMaskId": "Bit flags for marking what system is pausing the warm up phase. This allows multiple systems to attempt to pause/unpause warmup without overriding each other.",
    "LatentRepPlayerData:PawnStateMask": "Bit masked integer containing pertinent information for displaying status UI above teammates' heads\nMasked using EFortPawnState enum in FortPlayerStateAthena.h",
    "FortWindMaterialData:MaterialParameterPairIndices": "Bit-field: Which material parameter pairs need to be set for this MID?",
    "BotPOIExcludedZone:UsagesToExclude": "BitMask of \"Usages\" discarded by this Excluded Zone",
    "FortBotPOIExcludedZoneDataTableRow:UsagesToExclude": "BitMask of \"Usages\" discarded by this Excluded Zone",
    "FortWindResponder:MaterialParameterPairIndices": "Bitfield holding all indices of material parameter pairs that should be set.",
    "LatentRepPlayerData:CurieStateBitfield": "Bitfield tracking current Curie states affecting the associated player state's pawn, if any. Used for displaying\nCurie-related information to teammates. Not using the prev/cur variable pattern as in the rest of this class as the\nplayer state itself has the other value and is directly queried for local & authoritative call sites.",
    "FortControllerComponent_AIDebugger:EnabledVisualizers": "Bitfields containing the enabled visualizers",
    "FortControllerComponent_AIDebugger:DefaultEnabledVisualizers": "Bitfields containing the visualizers enabled by default",
    "EFortGameFeatureActionAddComponentMode": "Bitflag enum to control when this AddComponents action should actually run during program lifecycle",
    "AthenaSpecialActorComponent:RenderOnMapDuringPhases": "Bitmask of phases where the Icon should be rendered on the map.",
    "SpecialActorRepData:RenderOnMapDuringPhases": "Bitmask of phases where the Icon should be rendered on the map.",
    "EFortEmporiumItemPriceFilter": "Bitwise enum for the various price filters",
    "SkyfireBotPlayerPawnComponent:InGameplayKeyName": "Blackboard key name for when bot is in gameplay",
    "SkyfireBotPlayerPawnComponent:InLootRoomKeyName": "Blackboard key name for when bot is in loot room",
    "SkyfireBotPlayerPawnComponent:InPrisonKeyName": "Blackboard key name for when bot is in prison",
    "BuildingOutpostStorageVault": "Blank class as we transition the outpost from AOutpostStructureBase to AFortOutpostBuilding",
    "BuildingOutpostStormshieldCore": "Blank class as we transition the outpost from AOutpostStructureBase to AFortOutpostBuilding",
    "BuildingOutpostStormshieldUpgrade": "Blank class as we transition the outpost from AOutpostStructureBase to AFortOutpostBuilding",
    "FortPlayerPawn:ParachuteDeployVelocityBlend": "Blend [0..1] between Velocity direction and down direction when tracing for landing. 0 = fully downward, 0.5 = average, 1 = fully in Velocity direction.",
    "EDaySequenceModifierBlendMode.Distance": "Blend the modifier in based on the distance within the volume. Only functional when EnableDistanceVolumeBlends is called.",
    "FortCharacterVehicle_Ostrich:BlockDriverDashImmersionPercent": "Block driver's dash ability if the driver is immersed to at least this amount",
    "FortCharacterVehicle_Ostrich:BlockDriverStompImmersionPercent": "Block driver's stomp ability if the driver is immersed to at least this amount",
    "FortPickupCreative:CostComponent": "Block interactions if the player doesn't have enough resources",
    "FortCharacterVehicle_Ostrich:BlockDriverJumpImmersionPercent": "Block the drivers's charge jump if the driver is immersed to at least this amount",
    "FortCharacterVehicle_Ostrich:BlockGunnerMissilesImmersionPercent": "Block the gunner's missile attack if the gunner is immersed to at least this amount",
    "FortCharacterVehicle_Ostrich:BlockGunnerShotgunImmersionPercent": "Block the gunner's shotgun attack if the gunner is immersed to at least this amount",
    "EObstacleType.BlockingSmashable": "Blocking smashable actor while navigating from path following comp",
    "EFortReplicatedStat.BluGloActivity": "Blu-Glo Activity",
    "ButterCakeUnstuckComponent:OnBlocked": "Blueprint Event fired when we are stuck",
    "FortWeapon:FireModeData_Override": "Blueprint Override Fire Mode data (if any is set) that should be active currently.  This mode overrides any HipFire or AimDownSight fire data modes.",
    "FortGameModeZone:OnHandleMatchHasStarted": "Blueprint assignable delegate called when the match has started",
    "FortPawn:OnWeaponEquippedDelegate": "Blueprint assignable delegate fired when a new weapon is attached",
    "FortAIPawn:OnInteraction": "Blueprint assignable delegate fired when a player controller interacts with this AI.",
    "FortPawn:OnWeaponUnEquippedDelegate": "Blueprint assignable delegate fired when a weapon unequips",
    "FortPawn:OnWeaponAttachmentChangedDelegate": "Blueprint assignable delegate fired when weapon attachment changes",
    "FortPlayerStateAthena:OnSquadIdChangedDelegate": "Blueprint assignable delegate that is triggered when the player changes squads.\n     parameters are: (AFortPlayerStateAthena*, const uint8)\n     AFortPlayerStateAthena* is the player who changed squads, uint8 is the previous squad index.",
    "FortPlayerStateAthena:OnTeamIndexChangedDelegate": "Blueprint assignable delegate that is triggered when the player's team changes.",
    "GasEventHistoryItem:BlueprintCallStack": "Blueprint call stack at the time // we can't replicate call stacks directly, they're too big",
    "FortPlayerController:OnBlueprintReadyCheckCompleted": "Blueprint callback from ready check with result of vote",
    "FortPlayerController:OnSetFirstPersonCamera": "Blueprint callback from ready check with result of vote",
    "LacklusterData:ChromeSubsystemClass": "Blueprint chrome subsystem type",
    "LacklusterData:TieredChestParentClass": "Blueprint class for tiered chest parent",
    "LacklusterData:TieredChestClass": "Blueprint class for tiered chests",
    "FortPlayerPawn:OnPossessedProp": "Blueprint event fired when our PossessedProp changes",
    "FortPawn:OnAbilityDecisionWindowStackUpdated": "Blueprint event fired when the ability DecisionWindowStack has been changed",
    "FortTimeOfDayWeatherComponent:OnWeatherChanged": "Blueprint event for tracking weather changes",
    "FortTimeOfDayManager:OnWeatherComponentSet": "Blueprint event for tracking weather component replication",
    "FortComponent_Energy:OnEnergyRechargeBegun": "Blueprint event for tracking when this energy component begins to recharge.",
    "FortComponent_Energy:OnEnergyRechargeComplete": "Blueprint event for tracking when this energy component completes recharging.",
    "FortComponent_Energy:OnEnergyReachedMinForUsing": "Blueprint event for tracking when this energy component gains enough energy to be used again.",
    "FortComponent_Energy:OnEnergyRechargeInterrupted": "Blueprint event for tracking when this energy component has recharge interrupted.",
    "FortComponent_Energy:OnEnergyCompletelyDrained": "Blueprint event for tracking when this energy component is completely drained of energy.",
    "FortComponent_Energy:OnEnergyReachedMax": "Blueprint event for tracking when this energy component reaches max energy (if it had less before).",
    "FortComponent_Energy:OnCurrentEnergyChanged": "Blueprint event for tracking when this energy component's CurrentEnergy has changed.",
    "FortPlayspaceComponent:OnMeshNetworkEventBurst_BP": "Blueprint event that triggers when a burst event fires from the mesh network (if bSubscribeToMeshNetwork is set to true)",
    "FortPlayspaceComponent:OnMeshNetworkReady_BP": "Blueprint event that triggers when a burst event fires from the mesh network (if bSubscribeToMeshNetwork is set to true)",
    "FortPlayspaceComponent:OnMeshNetworkEventChange_BP": "Blueprint event that triggers when a mesh network event has been started (if bSubscribeToMeshNetwork is set to true)",
    "FortPlayspaceComponent:OnMeshNetworkEventStart_BP": "Blueprint event that triggers when a mesh network event has been started (if bSubscribeToMeshNetwork is set to true)",
    "FortPlayspaceComponent:OnMeshNetworkEventEnd_BP": "Blueprint event that triggers when a mesh network event has ended (if bSubscribeToMeshNetwork is set to true)",
    "DaySequenceModifierComponent:OnPostReinitializeSubSequences": "Blueprint exposed delegate invoked after the component's subsequences are reinitialized.",
    "DaySequenceModifierComponent:OnVolumeBlendTargetOverlapBegin": "Blueprint exposed delegate invoked after the current blend target enters a volume and was not already in a volume.\nOnly broadcasts when owning actor does not have network authority.",
    "DaySequenceModifierComponent:OnVolumeBlendTargetOverlapEnd": "Blueprint exposed delegate invoked after the current blend target has exited all volumes.\nOnly broadcasts when owning actor does not have network authority.",
    "DaySequenceModifierComponent:OnPostEnableModifier": "Blueprint exposed delegate invoked after the modifier component is enabled.",
    "DaySequenceActor:OnTimeOfDayPreviewChanged": "Blueprint exposed delegate invoked when the TimeOfDayPreview property\nis changed.\n@param new preview time in hours.",
    "FortCreativeMoveTool:OnSelectionPropertyChanged": "Blueprint for informing UI and the move tool that a selection property has changed.",
    "EFortDecoPlacementQueryResults.BlueprintFailure": "Blueprint function returned a custom failure reason",
    "EFakeKillRelevancyPlayerKillStep.BlueprintNotified": "Blueprint has been informed, but has not yet visually killed the player",
    "EFakeKillRelevancyPlayerKillStep.VisualsPerformed": "Blueprint has called OnKillEffectsPlayed() to inform us that the player has been visually killed, and should now be considered \"dead\" by UI, etc.",
    "FortPlacementActorFinderEntry:BuildingToSpawn": "Blueprint of actor to spawn in location defined by chosen PlacementActor/BuildingSMActor. Only used if this is a mission.",
    "EItemShopCurrency": "Blueprint readable enum for currency unlike EStoreCurrencyType",
    "LacklusterData:ShadowProxyMeshComponentClass": "Blueprint shadow proxy mesh type",
    "FortPickup:PickupEffectBlueprint": "Blueprint that holds the effect for pickups",
    "FortMediaImageDataExt": "Blueprint versions",
    "FortGameplayCueNotifyLoop_SpookyMist:InteractVisibility": "Blueprint will update this from a timeline.",
    "GasDebugReplicatableCallStack:BlueprintCallStack": "Blueprint-based call stack as string",
    "AvailableTierLayout": "Blueprint-facing struct representing tiers that are available for selection",
    "ECosmeticBudgetingMode": "BlueprintType// TODO: Determine whether we need to expose this to blueprint at all.",
    "DestroyOnSafeZonePhaseComponent:OnBeforeDestroy": "Blueprints can bind to this to do any cleaning up before we call this actor's Destroy() function",
    "FortAthenaMutator_PreloadAssets:ActorBlueprints": "Blueprints of actors to preload",
    "WaterControlParams:BobbingMaxForce": "Bobbing:",
    "WaterControlParams:BobbingIdealDepthTolerance": "Bobbing: Slow down strongly when within this tolerance of the ideal immersion depth. Normally we apply drag only when going away from the ideal depth, this allows some slowdown when approaching it.",
    "WaterControlParams:BobbingFrictionDown": "Bobbing: friction/drag opposed to downward velocity, linear multiplier per second",
    "WaterControlParams:BobbingFrictionDownSubmerged": "Bobbing: friction/drag opposed to downward velocity, linear multiplier per second. Only used when fully submerged (replaces other value).",
    "WaterControlParams:BobbingExpDragDown": "Bobbing: friction/drag opposed to downward velocity, squared with velocity per second. Ramps up faster with higher speeds, less effect at low speeds.",
    "WaterControlParams:BobbingFrictionUp": "Bobbing: friction/drag opposed to upward velocity, linear multiplier per second",
    "WaterControlParams:BobbingExpDragDownSubmerged": "Bobbing: friction/drag opposed to upward velocity, squared with velocity per second. Ramps up faster with higher speeds, less effect at low speeds.",
    "WaterControlParams:BobbingExpDragUp": "Bobbing: friction/drag opposed to upward velocity, squared with velocity per second. Ramps up faster with higher speeds, less effect at low speeds.",
    "WaterControlParams:BoostDragMultiplier": "Bobbing: multiplier when in sprint boost to keep from popping up and out as much.",
    "FortAthenaMutator_SpecialEvent:SpecialEventOverrideParts": "Body parts that are overridden when we say so.",
    "AdHocSquad_InviteDataArray": "Boilerplate setup to use fast array replication. This struct contains a TArray of FAdHocSquad_InviteData. This array is expected to be replicated.",
    "FortControllerMiniMapComponentVisibilitiesArray": "Boilerplate setup to use fast array replication. This struct contains a TArray of the a copy of FortControllerMiniMapComponentVisibilitiesMap. This array is expected to be replicated.",
    "ThrowingToyDataArray": "Boilerplate setup to use fast array replication. This struct contains a TArray of the throwing toy data. This array is expected to be replicated.",
    "BonePlayerDamageMultiplier:BoneName": "Bone name to hit to apply multiplier",
    "FortAthenaMutator_Wax:TokenSpawnBoneName": "Bone name to spawn the tokens from. If the skeleton doesn't have this bone, will default to base actor location.",
    "SkeletalAudioBoneConfig:BoneName": "Bone to track",
    "FortAnimNode_Flap:TargetBone": "Bone to use as controller input",
    "SourceDriver:SourceBone": "Bone to use as controller input",
    "FortPawn:DamageZones": "Bones that make up each damage zone for this pawn",
    "FortEarnScoreNotification:BonusXPEarned": "Bonus amount of XP earned",
    "FortExperienceDelta:BonusXPEarned": "Bonus amount of XP earned",
    "FortPlayerPawn:LastHitWeakSpotResourceBonus": "Bonus applied if the last hit to the building is a weakspot hit",
    "FortPlayerPawn:ConsecutiveWeakSpotResourceBonus": "Bonus applied to resource generation based on the # of consecutive weakspot hits",
    "FortAvailableMissionData:BonusMissionRewards": "Bonus rewards offered for completing this mission IF THE PLAYER HAS BONUS MISSION REWARDS UNLOCKED",
    "FortAvailableMissionAlertData:MissionAlertRewards": "Bonus rewards offered for completing this mission alert",
    "AthenaSuperChargedBonusQuestLevel:PercentOfGoldenPath": "BonusQuest will be granted if (player xp this season / golden path xp) < this value",
    "AthenaSuperChargedBonusQuestLevel:MinimumDaysSinceSeasonStart": "BonusQuest will not be granted until this many days since the start of the season, regardless of PercentOfGoldenPath",
    "EncounterVariable_Boolean": "Bool EncounterVariable",
    "FortAthenaMutator_Mash:bFinalBossEncounterSpawned": "Bool that is set to true when the final boss encounter has been spawned.",
    "BuildingGameplayActorLaserGrid:bEnabled": "Bool that tracks if the laser actor grid is enabled. Only holds valid information on the server.",
    "FortLevelStreamComponent:bGarbageCollectionClusteringEnabled": "Bool to allow garbage collection clustering or not.",
    "FortAIPawn:bIsSleeping": "Bool to indicate that the pawn is in cheap sleeping mode",
    "FortBotBuildingContainerBlacklistDataTableRow:bIsBlacklisted": "Bool to set if item is blacklisted",
    "FortPhysicsObjectComponent:bHasComponentActivated": "Bool to track the physics object component activation state",
    "FortCheckPointCosmeticActor:bIsEndPoint": "Bool to whether or not this Checkpoint is at the end of the path\n if bIsEndPoint == false the checkpoint is assumed to be a mid-point somewhere in the middle of the path\n This info is needed to provide unique cosmetics between checkpoints in the middle of the path and the checkpoint at the very end of the path",
    "FortLevelStreamComponent:bEnableSynchronousLoading": "Bool to which Enables this component to perform synchronous loads instead of async ones.",
    "FortLevelStreamComponent:bWaitForClientsInSessionBeforeConsideringComplete": "Bool used to determine how this level stream component should inform its callers that it is complete.\n              false: Does not wait for clients before firing complete events. Clients will complete on their own time,\n              true: Waits for clients to complete before firing the final complete event on the server.",
    "EncounterVariableSelections_Boolean": "Boolean Encounter Variable Selections",
    "EncounterVarRow_Boolean": "Boolean Encounter Variable row",
    "FortAthenaMutator_Cobalt:bIsCobaltFinished": "Boolean indicating whether we've completed the final round",
    "FortControllerComponent_CreativeDebugger:InvincibilityEnabledByDataRegistry": "Boolean that controls whether (Invincibility) God Mode is enabled in the Data Registry (Debug Menu Settings)",
    "FortControllerComponent_CreativeDebugger:NavigationMeshEnabledByDataRegistry": "Boolean that controls whether AI Navigation Mesh visualization is enabled in the Data Registry (Debug Menu Settings)",
    "FortControllerComponent_CreativeDebugger:NavigationPathsEnabledByDataRegistry": "Boolean that controls whether AI Navigation Paths visualization is enabled in the Data Registry (Debug Menu Settings)",
    "FortControllerComponent_CreativeDebugger:DebuggerEnabledByDataRegistry": "Boolean that controls whether Creative Debugger is enabled in the Data Registry (Debug Menu Settings)",
    "FortControllerComponent_CreativeDebugger:VerseDebugDrawEnabledByDataRegistry": "Boolean that controls whether Debug Draw is enabled in the Data Registry (Debug Menu Settings)",
    "FortControllerComponent_CreativeDebugger:FastIterationEnabledByDataRegistry": "Boolean that controls whether Fast Iteration mode is enabled in the Data Registry (Debug Menu Settings)",
    "FortControllerComponent_CreativeDebugger:GhostModeEnabledByDataRegistry": "Boolean that controls whether Ghost Mode is enabled in the Data Registry (Debug Menu Settings)",
    "AthenaHoldingArea:bHoldingAreaActive": "Boolean tracks if the Holding Area is active (visible and with collision).",
    "FortWeaponRangedChronoAncient:BoomerangEmissiveOnCooldownEndedCurve": "Boomerang On Cooldown Ended",
    "FortWeaponRangedChronoAncient:BoomerangEmissiveOnEquipCurve": "Boomerang On Equip",
    "FortAthenaJackalVehicle:BoostTimers": "Boost action timers. Keep this array size to 1, change the active number we have during play by editing NumBoostTimers.",
    "FortEarnScoreNotification:BoostXPEarned": "Boost amount of XP earned",
    "FortExperienceDelta:BoostXPEarned": "Boost amount of XP earned",
    "FortEarnScoreNotification:BoostXPMissed": "Boost amount of XP that could have been earned if the player had more boost",
    "FortExperienceDelta:BoostXPMissed": "Boost amount of XP that could have been earned if the player had more boost",
    "FortGamepadAdvancedOptions:bInstantBoostWhenBuilding": "Boost speed kicks in instantly when the stick is fully deflected.",
    "EFortTileEdgeType.Border_4": "Border edge",
    "MashBossHealthShieldData:CurrentHealth": "BossPawn's current health value",
    "MashBossHealthShieldData:CurrentShield": "BossPawn's current shield value",
    "MashBossHealthShieldData:TotalHealth": "BossPawn's total health value",
    "MashBossHealthShieldData:TotalShield": "BossPawn's total shield value",
    "FortAIBotDebugActor:BotDebugMiniMapIndicator": "Bot Debug MiniMap Indicator",
    "BotDebugInfo": "Bot Debug info",
    "BotDebugInfo:BotID": "Bot ID",
    "FortAthenaAIBotController:BotIDSuffix": "Bot ID Prefix to use",
    "BotDebugInfo:Location": "Bot Location",
    "FortAthenaAIBotNameDataTableRow:UniqueID": "Bot Name Account ID",
    "EFreeFallingMode.Idle": "Bot just drops without moving",
    "FortAthenaAIBotNameDataTableRow:Name": "Bot name",
    "FortAthenaAIBotController:BotPlayerName": "Bot player name used for display",
    "FortAthenaAIBotController:BotPlayerNameWithSkillRating": "Bot player name with (BOT {SKILL RATING})",
    "EEventTournamentType.Test": "Bot test, should not track stats",
    "EFreeFallingMode.PatrolPath": "Bot tries to go back to its current patrol path destination (use random destination inside leash as a fallback)",
    "EFreeFallingMode.TowardNearestAlly": "Bot tries to go toward an ally",
    "FortAthenaAIBotController:BotData": "BotData used to spawn this controller",
    "BotPOI": "BotPOI : Struct used to represent the BotPOI created in a dynamic way",
    "FortAIBotPOIDebugActor:BotPOIDebugMiniMapIndicator": "BotPOI Debug MiniMap Indicator",
    "BotPOIDebugInfo": "BotPOI Debug info",
    "BotPOIExcludedZonesDebugInfo": "BotPOI Excluded Zones Debug Info",
    "FailedToReachPOI:BotPOIID": "BotPOI ID",
    "EBotPOIType": "BotPOI Type",
    "EFortCreativeDiscoveryPlayHistoryType.RecentlyPlayedAndFavorites": "Both recently played and favorite links are shown, sorted by interaction date.",
    "EFortTextureDataType.Ceiling": "Bottom of floor/roof texture",
    "FortMission:LeecherMinMultiplier": "Bottom range of leecher scaling multiplier. Range: 0 to 1. Use if we just want to cap the floor.",
    "EHUDMessagePlacement.BottomCenter": "Bottom vertically, center horizontally",
    "FortBounceData:DeformationCenter": "Bounce Center for the material",
    "FortBounceData:Radius": "Bounce Radius",
    "CrashpadStaticParams:CrashpadBounceScales": "Bounce scale for successive crashpad-on-crashpad bounces",
    "FortGravityGunHolder:TrajectorySplineBounciness": "Bounciness when calculating the trajectory spline using CalculateProjectileTrajectorySplineWithHit.",
    "FortPlayerMannequin:MannequinBoundsScale": "Bounds scale to apply to all character parts and weapon skeletal mesh.",
    "IceGroundPath:BoxColliderArray": "Box colliders generated for spline mesh collision",
    "FortAthenaMapInfo:AircraftDropZone": "Box representing the area in which players can eject from the aircraft.\n      Must be <= the spawn zone.  Units are relative to the map center.\n      Not used if AircraftDropVolume is set.",
    "FortAthenaMapInfo:AircraftSpawnZone": "Box representing the area in which the aircraft will spawn and fly.\n      Units are relative to the map center.",
    "BotPOIExcludedZone:Box": "Box representing the position and size of the Excluded Zone",
    "BotPOIExcludedZonesDebugInfo:Box": "Box representing the position and size of the Excluded Zone",
    "BotPOI:Box": "Box representing the position and size of the POI volume",
    "BotPOIDebugInfo:Box": "Box representing the position and size of the POI volume",
    "FortNPCConversationParticipantComponent:ConversationInteractionBoxExtent": "Box size use to overlap with the player interaction component",
    "FortPawnComponent_PassiveHealer:PassiveHealerInteractionBoxExtent": "Box size use to overlap with the player interaction component",
    "FortNPCConversationParticipantComponent:InteractCollisionComponent": "Box use to overlap with the player interaction component",
    "FortPawnComponent_PassiveHealer:InteractCollisionComponent": "Box use to overlap with the player interaction component",
    "WaterControlParams:BrakingDeceleration": "Braking deceleration (decel when letting go of input)",
    "SlipperySlopeParams:BrakingDecelerationFactorOnSlope": "Braking deceleration multiplier while traveling up a slope",
    "SlipperySlopeParams:BrakingDecelerationInWater": "Braking deceleration when in water and over max speed.",
    "FortAnimInput_StandingPawnAnimAsset:IdleNoise": "Breathing/idle motion, applied while standing",
    "ESettingType.GammaValue": "Brightness Tab Settings",
    "FortCustomTickComponent:OnCustomTick": "Broadcast each tick",
    "FortAthenaNpcPatrollingComponent:OnStartPatrollingEvent": "Broadcast event when the NPC enter in patrolling",
    "FortAthenaNpcPatrollingComponent:OnStopPatrollingEvent": "Broadcast event when the NPC exit from patrolling",
    "FortAthenaBeaconComponent:OnConsumeEvent": "Broadcast event when the beacon is consumed",
    "FortAthenaVehicle:OnRechargeableFuelAboveThreshold": "Broadcast to BP when fuel goes above the threshold.",
    "FortAthenaVehicle:OnRechargeableFuelBelowThreshold": "Broadcast to BP when fuel goes below the threshold.",
    "FortAthenaVehicle:OnNotOutOfRechargeableFuel": "Broadcast to BP when fuel is no longer out.",
    "FortAthenaVehicle:OnOutOfRechargeableFuel": "Broadcast to BP when fuel is out.",
    "FortImpulseHandlerComponent:ImpulseChangedEvent": "Broadcast to BPs when FFortAthenaImpulseChangedEvent is triggered.",
    "FortPlayerPawn:OnPreInvalidateAbilitySystemComponent": "Broadcast when InvalidateAbilitySystemComponent is called before the ability system component is invalidated to allow for cleanup. Server and Client",
    "FortPawn:OnPawnJumped": "Broadcast when Pawn begins a jump.  (Exposes the same event as the native OnJumped event for other blueprints to bind to).",
    "FortMinigame:OnPlayerSpawnOverrideDevicesUpdated": "Broadcast when PlayerSpawnOverrideDevices is modified.",
    "FortGameModeAthena:OnAIPawnKilled": "Broadcast when a AFortAIPawn is killed. (Please note that Player Bots and many NPCs use PlayerPawns and their deaths are processed in OnPawnDeath instead.)\n     Note: Or consider using the new AthenaPopulationTracker's OnAISpawned/OnAIKilled which fires for both.",
    "FortPawn:OnPawnCrouchChanged": "Broadcast when a Pawns crouch state changes.",
    "BuildingActor:OnOutOfHealthNotDestroyed": "Broadcast when a building actor has ran out of health, but is not being destroyed (eg has entered a \"death\" state) [Server only]\nThis is currently not broadcast by the BuildingActor class, but setup here so child classes can broadcast when needed.\n(eg, broadcast by BuildingRealitySapling in its overridden HandleOutOfHealth when the sapling enters its ghost state)",
    "FortAthenaVehicle:OnModAppliedOnClientDelegate": "Broadcast when a mod is applied.",
    "FortPlayerPawn:OnPartChanged": "Broadcast when any character part is changed",
    "SpecialEventInputHelperComponent:AnyKeyPressedDelegate": "Broadcast when any key is pressed, except for those listed in IgnoredAnyKeyEventKeyNames",
    "SpecialEventCursorPawnComponent:OnDesiredVisibilityChanged": "Broadcast when bEnabled, bAllowOnNonOwningClients, or the cursor mode changes.\nThe widget can bind to it, so that it knows when to transition to visible/hidden.",
    "FortPlayerPawn:OnFinishedCharacterCustomization": "Broadcast when character customization has finished. Called at the end of UpdateCharacterCustomization_PostLoad",
    "FortAthenaVehicle:OnCurrentGearChangedDelegate": "Broadcast when our gear changes.",
    "FortControllerComponent_AugmentGrantingSystem:OnCanSelectAugmentChanged": "Broadcast when player can select an augment so things like UI can update their visual representation.",
    "FortOvershieldDelegateContainer:OnOvershieldedDamage": "Broadcast when receiving the Event.Damage.Overshielded gameplay event.",
    "FortHealthShieldRegen_ShieldDelegateContainer:OnShieldedDamage": "Broadcast when receiving the Event.Damage.Shielded gameplay event.",
    "FortOvershieldDelegateContainer:OnShieldedDamage": "Broadcast when receiving the Event.Damage.Shielded gameplay event.",
    "FortOvershieldDelegateContainer:OnOvershieldChanged": "Broadcast when the CurrentOvershield attribute is modified.",
    "FortHealthShieldRegen_ShieldDelegateContainer:OnShieldChanged": "Broadcast when the CurrentShield attribute is modified.",
    "FortPawn:OnDBNOStateChanged": "Broadcast when the DBNO state changes part is changed",
    "FortHealthShieldRegen_HealthDelegateContainer:OnHealthChanged": "Broadcast when the Health attribute is modified.",
    "LevelInstanceGameplayVolume:OnLevelInstanceGuidChanged": "Broadcast when the LSR save actor guid has changed",
    "LevelInstanceGameplayVolume:OnLevelInstanceResolved": "Broadcast when the LSR save actor has been located",
    "LevelInstanceGameplayVolume:OnLevelInstanceNameChanged": "Broadcast when the LSR save actor name has changed",
    "FortControllerComponent_AugmentGrantingSystem:OnAvailableAugmentsForGrantingUpdated": "Broadcast when the available augment choices have been updated on the autoproxy client and server.",
    "BuildingActor:OnDied": "Broadcast when the building actor has died [Server only]",
    "BuildingActor:OnDeathPlayEffectsDelegate": "Broadcast when the building actor is playing death effects. [Client only]",
    "BuildingActor:OnDamaged": "Broadcast when the building actor takes damage [Server only]",
    "SpecialEventCursorWeaponComponent:OnCursorPawnComponentSet": "Broadcast when the cursor component value is set.\n     Called on both the server and client.",
    "SpecialEventCursorPawnComponent:OnCursorModeChanged": "Broadcast when the cursor mode changes",
    "SpecialEventCursorPawnComponent:OnViewportLocationChanged": "Broadcast when the cursor viewport location changes",
    "FortControllerComponent_AugmentGrantingSystem:OnAuthorityRequestAugmentChoices": "Broadcast when the granting component needs choices to start the granting flow.",
    "LevelInstanceGameplayVolume:OnLevelInstanceContentCollectionChanged": "Broadcast when the level instance changes content collection",
    "LevelInstanceGameplayVolume:OnLevelInstanceSizeChanged": "Broadcast when the level instance changes size",
    "FortControllerComponent_AugmentGrantingSystem:OnReplicateNumPendingAugmentsToGrant": "Broadcast when the number of pending augments is replicated, indicating the player has 0 or more augments they can select.",
    "FortPawn:OnDidDamage": "Broadcast when the pawn does damage to another pawn [Server only]",
    "FortPawn:OnDeathEffects": "Broadcast when the pawn has died [Server and Client]",
    "FortPawn:OnDied": "Broadcast when the pawn has died [Server only]",
    "FortPawn:OnPawnLanded": "Broadcast when the pawn lands on the ground [Server and client]",
    "FortPawn:OnDamaged": "Broadcast when the pawn takes damage [Server only]",
    "StreamingRadioPlayerComponent:OnReplicatedStateChangedDelegate": "Broadcast when the replicated radio source data state changes.",
    "FortTankVehicle:OnTankRepairedDelegate": "Broadcast when the tank interaction completes to repair the tank.",
    "FortAthenaVehicle:OnGainedFuelDelegate": "Broadcast when the vehicle has gained fuel.",
    "FortAthenaVehicle:OnLowFuelDelegate": "Broadcast when the vehicle is low fuel.",
    "FortAthenaVehicle:OnOutOfFuelDelegate": "Broadcast when the vehicle is out of fuel.",
    "FortPlayerPawn:OnManagedPartVisibilityChanged": "Broadcast when the visibility of a character part is changed via SetCharacterPartVisibility",
    "FortLevelInstanceSaveActor:OnLevelInstanceAddedToSave": "Broadcast when this actor has been added to a Level Save Record",
    "FortLevelInstanceSaveActor:OnLevelInstanceContentCollectionChanged": "Broadcast when this level instance content collection has changed",
    "FortLevelInstanceSaveActor:OnLevelInstanceSaveContentChanged": "Broadcast when this level instance has had its LSR changed",
    "FortLevelInstanceSaveActor:OnLevelInstanceSaveNameChanged": "Broadcast when this level instance has had its LSR's name changed",
    "FortLevelInstanceSaveActor:OnLevelInstanceBeingDestroyed": "Broadcast when this level instance is going to be destroyed",
    "FortLevelInstanceSaveActor:OnLevelInstanceSizeChanged": "Broadcast when this level instance size has changed",
    "FortPawn:OnHitPawn": "Broadcast when this pawn hits another pawn",
    "FortPawn:OnHolsteredEvent": "Broadcast when this player begins holstering",
    "FortPlayerPawn:OnBeginParachuteMovementEvent": "Broadcast when this player begins parachute movement",
    "FortPlayerPawn:OnBeginSkydivingEvent": "Broadcast when this player begins skydiving",
    "FortPlayerPawn:OnBallooningGravityCeilingChanged": "Broadcast when this player changes to ballooning below (-1), within (0), or above (+1) the \"gravity ceiling\". Below may be triggered when no longer ballooning.",
    "FortPawn:OnUnholsteredEvent": "Broadcast when this player ends holstering",
    "FortPlayerPawn:OnEndParachuteMovementEvent": "Broadcast when this player ends parachute movement",
    "FortPlayerPawn:OnEndSkydivingEvent": "Broadcast when this player ends skydiving",
    "FortPlayerPawn:OnParachuteSpawned": "Broadcast when this player's parachute has fully loaded and is spawned the first time. Parachute movement\ncan have already started when this event is broadcast. Will be rebroadcast when the player's glider changes\nand respawns.\n\n@note this is not the same as parachute being deployed - this is to handle the case where the player changes\nto parachute movement, but the glider is still loading.",
    "FortAthenaVehicle:OnScrapingSidesOrTopChangedDelegate": "Broadcast when we are scraping sides or top.",
    "FortAthenaVehicle:OnExplode": "Broadcast when we explode.",
    "FortAthenaVehicle:VehicleCosmeticsFinishedDelegate": "Broadcast when we finish applying vehicle cosmetics. This allows us to tell plugins to start doing things.",
    "FortControllerComponent_AugmentGrantingSystem:OnSelectedAugmentForGrant": "Broadcast when we have selected an augment. Useful letting UI change in response.",
    "FortAthenaVehicle:OnStartCriticalHealth": "Broadcast when we reach critical health.",
    "FortAthenaVehicle:VehicleCosmeticsStartedDelegate": "Broadcast when we start applying vehicle cosmetics. This allows us to tell plugins to start doing things.",
    "FortDagwoodVehicle:OnStartHandBrakeCatchupForceDelegate": "Broadcast when we start handbrake catch up force.",
    "FortDagwoodVehicle:OnStartHandbrakeDelegate": "Broadcast when we start handbrake.",
    "FortDagwoodVehicle:OnStopHandbrakeDelegate": "Broadcast when we start handbrake.",
    "FortHealthShieldRegen_HealthDelegateContainer:OnDamageReceived": "Broadcast with the GameplayEventData when receiving the Event.Damage.Received gameplay event.",
    "FortHealthShieldRegen_ShieldDelegateContainer:OnDamageReceived": "Broadcast with the GameplayEventData when receiving the Event.Damage.Received gameplay event.",
    "FortOvershieldDelegateContainer:OnDamageReceived": "Broadcast with the GameplayEventData when receiving the Event.Damage.Received gameplay event.",
    "FortOvershieldDelegateContainer:OnOvershieldDestroyed": "Broadcast with the instigator when receiving the Event.Overshield.Destroyed gameplay event.",
    "FortHealthShieldRegen_ShieldDelegateContainer:OnShieldDestroyed": "Broadcast with the instigator when receiving the Event.Shield.Destroyed gameplay event.",
    "FortOvershieldDelegateContainer:OnShieldDestroyed": "Broadcast with the instigator when receiving the Event.Shield.Destroyed gameplay event.",
    "FortAttachableProjectileComponent:OnProjectileAttached": "Broadcasted on server and client after projectile has attached to an actor",
    "FortAttachableProjectileComponent:OnProjectileDetached": "Broadcasted on server and client after projectile has detached from previously attached actor",
    "FortScoutDrone:OnTeamIndexChanged": "Broadcasted when Drone Team Changes",
    "FortWeaponRangedOctopusTowhook:OnTargetUpdated": "Broadcasted when towhook target location changes",
    "FortPoiSwapManager:OnPrePlayspaceContentUnloadDelegate": "Broadcasts directly before a PoiSwapPlayspace unloads it's spawned actors\nCan be used to remove references to spawned actors before they get destroyed",
    "FortPoiSwapPlayspace:OnPreContentUnloadDelegate": "Broadcasts directly before the spawned content gets unloaded",
    "FortInGameMapManager:OnMapExplorationThresholdReached": "Broadcasts each time the map exploration percentage reaches a new threshold.  Thresholds are a constant distance apart, based on the Map Exploration Threshold Percentage value.  Outputs the 0-based index of the threshold reached.",
    "FortAutoMarkableActorComponent:OnAutoMarkableActorComponentMarked": "Broadcasts on clients when a UFortAutoMarkableActorComponent marks an actor based on a player entering the UFortAutoMarkableActorComponent's AutoMarkCollisionComponent.",
    "FortAutoMarkableActorComponent:OnAutoMarkableActorComponentUnmarked": "Broadcasts on clients when a UFortAutoMarkableActorComponent unmarks an actor based on a player exiting the UFortAutoMarkableActorComponent's AutoMarkCollisionComponent.",
    "FortSafeZoneIndicator:OnSafeZonePhaseChanged": "Broadcasts on server after the safe zone phase has been changed\nBroadcasts on client when CurrentPhase is replicated",
    "FortVolumeManager:OnClientEnterVolume": "Broadcasts on the client for only that client when they ENTER the Volume",
    "FortVolumeManager:OnClientExitVolume": "Broadcasts on the client for only that client when they LEAVE the Volume",
    "FortVolumeManager:OnClientVolumeUGCViewableStateChanged": "Broadcasts on the client when we initially receive a player with parental controls.\n              This event _does not_ affect the specific volumes value for AFortVolume::GetUserGeneratedContentRestricted, that is set after the server handshake via replicated values.",
    "FortAthenaMutator_Knockback:OnPlayerKnockbackDataChanged": "Broadcasts on the client whenever AllPlayersKnockbackData is modified. Note that this will not broadcast if bStorePlayerKnockbackData or bReplicatePlayerKnockbackData are false.",
    "FortAthenaMutator_SpecialEvent:OnHandleLogout": "Broadcasts on the server and client whenever a player disconnects from the event.",
    "FortVolumeManager:OnServerVolumeUGCViewableStateChanged": "Broadcasts on the server once the server has received information from the client that a player has Parental restrictions.",
    "FortMissionTimerComponent:OnMissionTimerComponentUpdated": "Broadcasts to let the UI know that the timer has updated. Does not broadcast on dedicated servers",
    "FortMissionTimerComponent:OnMissionTimerTimeAddedOrRemoved": "Broadcasts to let the UI know that time has been added or removed from the timer (outside of normal time counting down.)",
    "FortGameStateAthena:ActiveTeamArrayBuiltEvent": "Broadcasts when AFortGameStateAthena::BuildActiveTeamArray built ActiveTeamNums",
    "FortGameStateZone:OnNumSurvivorsRescuedChangedDelegate": "Broadcasts when NumSurvivorsRescued changes.",
    "FortPoiSwapManager:OnPlayspaceUnloadedContentDelegate": "Broadcasts when a PoiSwapPlayspace has despawned user content actors",
    "FortPoiSwapManager:OnPlayspaceLoadedContentDelegate": "Broadcasts when a PoiSwapPlayspace has spawned user content actors",
    "FortPlayerPawn:OnNewPlayerState": "Broadcasts when a new valid player state has been replicated down.",
    "BuildingGameplayActor:OnDeliverableAbilityInfoAppliedToTouchingActor": "Broadcasts when an actor enters the overlap region AND gameplay effects are applied",
    "BuildingGameplayActor:OnDeliverableAbilityInfoChangedForExitingTouchActor": "Broadcasts when an actor exits the overlap region and gameplay effects are removed or added",
    "FortVolume:OnActorEnter": "Broadcasts when an actor is added to the volume.",
    "FortVolume:OnActorExit": "Broadcasts when an actor is removed from the volume",
    "FortPoiSwapPlayspace:OnContentStateChangedDelegate": "Broadcasts when the POI's user content's loading state changes",
    "FortPlayerControllerAthena:OnPreviewScreenshotCameraActivated": "Broadcasts when the PreviewScreenshot camera has changed , on client, when received the confirmation from the server via client RPC",
    "FortPlayerController:OnVehicleAbilitiesRemoved": "Broadcasts when the in-vehicle abilities are removed from the player pawn",
    "FortInGameMapManager:OnMapFullyExplored": "Broadcasts when the map is 'completely' explored (i.e. the exploration percentage has reached or exceeded MaxPercentageMapExplored; NormalizedPercentageMapExplored is 1.0.",
    "FortMinigameVolumeComponent:OnMinigameSetup": "Broadcasts when the minigame is setup on the server or client.",
    "FortMinigameVolumeComponent:OnMinigameSettingsMachineChanged": "Broadcasts when the minigame settings machine is updated.",
    "FortMissionManager:OnMissionsUpdated": "Broadcasts when the missions array changes. Does not broadcast on dedicated servers",
    "BuildingGameplayActor:OnProximityEffectsAppliedDelegate": "Broadcasts when the proximity effects for a bucket have been applied.",
    "BuildingGameplayActor:OnProximityPulseDelegate": "Broadcasts when the proximity pulse starts.",
    "BuildingGameplayActor:OnProximityPrePulseDelegate": "Broadcasts when the proximity pulse will start in FBuildingGameplayActorAbilityDeliveryInfo::ProximityPrePulseTime time.",
    "FortGameStateAthena:WinningScoreDetermined": "Broadcasts when the winning score has been determined",
    "FortPlayerPawn:OnRevivedFromDBNODelegate": "Broadcasts when this pawn is revived",
    "FortPlayerPawn:OnRevivePlayerFromDBNODelegate": "Broadcasts when this pawn revives another pawn",
    "FortHookGunRope:OnEndReel": "Broadcasts when we turn off the ticking of this actor.",
    "FortAthenaMutator_Cobalt:OnPlaylistTimerValueUpdated": "Broadcasts whenever the clients storm shield timer is updated",
    "FortSafeZoneIndicator:SafezoneStateChangedDelegate": "Broadcasts whenever the safe zone state changes. Broadcasts on both server and client.\n     A non-static version of AFortSafeZoneIndicator::SafezoneStateChanged that can also be used in blueprint.",
    "FortAthenaMutator_Cobalt:OnStormShieldArrayUpdated": "Broadcasts whenever the storm shield array has been updated",
    "FortAthenaMutator_Cobalt:OnHideVsDisplay": "Broadcasts whenever the versus display should be hidden",
    "FortAthenaMutator_Cobalt:OnShowVsDisplay": "Broadcasts whenever the versus display should be shown",
    "FortAthenaMutator_Cobalt:OnUpdatePreRoundDisplayVisibility": "Broadcasts whenever there should be an update to the pre round display visibility",
    "CosmeticDeveloperSettings:CharacterPartsToDeny": "Broken/platform-exclusive character parts (these are treated as 'illegal' and placeholders are shown in the front end / used in game)",
    "CosmeticDeveloperSettings:CosmeticItemsToDeny": "Broken/platform-exclusive cosmetic items (these are treated as 'illegal' and placeholders are shown in the front end / used in game)",
    "FortMultiSizeBrush:Brush_L": "Brush - large",
    "FortMultiSizeFont:Font_L": "Brush - large",
    "FortMultiSizeMargin:Margin_L": "Brush - large",
    "FortMultiSizeBrush:Brush_M": "Brush - medium",
    "FortMultiSizeFont:Font_M": "Brush - medium",
    "FortMultiSizeMargin:Margin_M": "Brush - medium",
    "FortMultiSizeBrush:Brush_S": "Brush - small",
    "FortMultiSizeFont:Font_S": "Brush - small",
    "FortMultiSizeMargin:Margin_S": "Brush - small",
    "FortMultiSizeBrush:Brush_XL": "Brush - very large",
    "FortMultiSizeFont:Font_XL": "Brush - very large",
    "FortMultiSizeMargin:Margin_XL": "Brush - very large",
    "FortMultiSizeBrush:Brush_XS": "Brush - very small",
    "FortMultiSizeFont:Font_XS": "Brush - very small",
    "FortMultiSizeMargin:Margin_XS": "Brush - very small",
    "FortMultiSizeBrush:Brush_XXS": "Brush - very very small",
    "FortMultiSizeFont:Font_XXS": "Brush - very very small",
    "FortMultiSizeMargin:Margin_XXS": "Brush - very very small",
    "FortSpecialActorReplicationInfo:BrushScales": "Brush Scales used by all special actors. Many actors typically share the same brush scales, so we replicate unique copies in this separate array",
    "FortAIPawn:CachedUpgradeUIDataUpgradeIconBrush": "Brush created from data replicated by UpgradeUIData",
    "AthenaSpecialActorComponent:SeasonItemInteractedBrush": "Brush override to use once the player profile reports Interacted for the SeasonItemTag that is set.",
    "SpecialActorRepData:SeasonItemInteractedBrush": "Brush override to use once the player profile reports Interacted for the SeasonItemTag that is set.",
    "TrapItemDefintionDesignerData:MiniMapIconBrushImage": "Brush settings for minimap icon",
    "FortAthenaMutator_Heist:EnemyCarrierBrush": "Brush to use for friendly bling carriers",
    "FortAthenaMutator_Heist:FriendlyCarrierBrush": "Brush to use for friendly bling carriers",
    "FortAthenaMutator_Heist:CompassEnemyCarrierBrush": "Brush to use for friendly bling carriers on the compass",
    "FortAthenaMutator_Heist:CompassFriendlyCarrierBrush": "Brush to use for friendly bling carriers on the compass",
    "AthenaCapturePoint:IndicatorBrush": "Brush to use for the HUD indicator",
    "FortSeasonItemMapData:InteractedIconBrush": "Brush to use if the player has interacted with the actor",
    "FortAthenaMutator_Wax:SquadmateCompassBrushesByPlace": "Brush to use when the a squadmate in place X is drawn on the compass - feel free to adjust size\n     CompassBrushes are order based on placement with 0 being 1st place, 1 being 2nd place, 2 being 3rd place, etc, etc.",
    "FortAthenaMutator_Wax:CompassBrushesByPlace": "Brush to use when the player in place X is drawn on the compass - feel free to adjust size\n     CompassBrushes are order based on placement with 0 being 1st place, 1 being 2nd place, 2 being 3rd place, etc, etc.",
    "FortAthenaMutator_Wax:MapBrushesByPlace": "Brush to use when the player in place X is drawn on the map - feel free to adjust size\n     CompassBrushes are order based on placement with 0 being 1st place, 1 being 2nd place, 2 being 3rd place, etc, etc.",
    "FortAthenaMutator_Wax:SquadmateMapBrushesByPlace": "Brush to use when the squadmate in place X is drawn on the map - feel free to adjust size\n     CompassBrushes are order based on placement with 0 being 1st place, 1 being 2nd place, 2 being 3rd place, etc, etc.",
    "AthenaCapturePoint:CompassIconBrush": "Brush used for displaying the control point in the compass",
    "AthenaCapturePoint:MapIconBrush": "Brush used for displaying the control point in the map",
    "FortAthenaMutator_Ashton:MapEnemyBrush": "Brush used to display the enemy on the map when they run out of respawns",
    "WaxVisibilityModifiers:CompassIndicator": "Brush used to draw onto the compass. Adjust ImageSize as needed.",
    "WaxVisibilityModifiers:MinimapIndicator": "Brush used to draw onto the compass. Adjust ImageSize as needed.",
    "AthenaQuickChatLeafEntry:Brush": "Brush used to illustrate the picker option",
    "RadialOptionData:Brush": "Brush used to illustrate the picker option",
    "SquadComsNPCCommandEntry:Brush": "Brush used to illustrate the picker option",
    "SquadComsQuickChatEntry:Brush": "Brush used to illustrate the picker option",
    "FortPawn:UroShiftBucket": "Bucket to use when shifting update rates to separate different classes of components",
    "FortAthenaMutator_InventoryOverride_Bucket:LoadoutBuckets": "Buckets (groups) of loadouts. No two players on a team will have loadouts from the same bucket in a given round.\nThe actual loadouts are selected randomly from the buckets each round, and are the same for all players in a given round with the same bucket.\nEach player should only roll each bucket once per match, unless there are more rounds than buckets",
    "FortCreativeGridCellBudget:CellBudgetEditMargin": "Budget margin given to the player when editing, when over CellBudget but within CellBudget+CellBudgetEditMargin, island can be edited. When over CellBudget, island cannot be published.",
    "PlayspaceComponent_ActorMemoryTracker": "Budget tracker Playspace component\n\nThis component assesses a Playspace budget based on the actors added to it. It uses FFortBudgetGrid to estimate a\nspatial cost based on each actor's influence distance and asset dependencies.",
    "PlayspaceComponent_CreativeBudgetTracker": "Budget tracker Playspace component\n\nThis component assesses a Playspace budget based on the actors added to it. It uses FFortBudgetGrid to estimate a\nspatial cost based on each actor's influence distance and asset dependencies.",
    "EMutatorMovementMode.BuffetBubbles": "Buffet event - bubbles phase.  Air controls within a box that is locked to a follow actor.",
    "EMutatorMovementMode.BuffetFlyingRicochet": "Buffet event - llama phase.  The flying character bounced off of collision.  Rotates toward new Velocity, no controls.",
    "EMutatorMovementMode.BuffetFlying": "Buffet event - llama phase.  Yaw and pitch steering, no gravity.  Collisions trigger BuffetFlyingRicochet mode.",
    "EMutatorMovementMode.BuffetBubblesIntro": "Buffet event - transition from reflect to bubbles phase, moving toward a target location",
    "EFortAthenaTutorialSubstep.ScreenLookForChest": "Build",
    "FortControllerComponent_SmartBuild:SmartBuildItemDefinitions": "Build item definitions for smart build",
    "FortControllerComponent_SmartBuild:BuildItemDefinitions": "Build item definitions for standard building",
    "FortAthenaMutator_SpecialRelevancy:MultiSquadControllerGroupsContainers": "BuildMultiSquadControllerGroups() splits each RelevancyGroup's Controllers array into sub-arrays of max size MaxSquadSize",
    "EPerceptionSoundType.Building": "Building",
    "EFortStructuralGridQueryResults.BuildingAtRequirementsDisabled": "Building AT Layout Requirements is disabled",
    "FortLevelRecord:BoundActorGuid": "Building Actor we are bound to, inside ParentLevel",
    "FortCreativeLinearMoverComponent:PreviousTargetCellIndexForUpdates": "Building Cell Index for tracking where to update a moving wall",
    "DeployableBasePlot:ConstructionTimeEffect": "Building Construction Time Effect",
    "FortPlayerController:EditBuildingActor": "Building actor currently being edited; Only valid locally",
    "FortPawnComponent_Phasing:TargetedBuilding": "Building actor currently being targeted, nullptr if none",
    "EFortBuildingPersistentState.Constructed": "Building actor has finished being constructed",
    "EFortBuildingPersistentState.New": "Building actor is being spawned for the first time in a world",
    "EFortBuildingPersistentState.Default": "Building actor is the same as it was",
    "FortCurieUpdraftActor": "Building actor providing an updraft; Used within Curie system where updrafts should spawn as a result of chemical interactions",
    "BuildingSMActor": "Building actor that has a replicated static mesh component",
    "BuildingItemWeaponUpgradeActor:BuildingActorAttachedTo": "Building actor this is attached to. If it is destroyed, we destroy our actor.",
    "BuildingPlayerPrimitivePreview": "Building actor used exclusively as a preview while attempting to place buildings.  Also used as a base class for\nABuildingLayoutRequirement.",
    "BuildingAutoNav": "Building actor with automatic navigation properties",
    "FortPlayerController:HighlightedPrimaryBuildings": "Building actors highlighted by building interactions",
    "FortPlayerController:HighlightedInteractionBuildings": "Building actors highlighted by interact trace interactions",
    "BuildingSMActor:BuildingActorsAttachedTo": "Building actors this piece is attached to. Maintained only on the server",
    "CollisionReactionConfiguration:BuildingActorBlacklistTags": "Building actors with one of those tags will not get any kind of reaction (note that this will NOT stop reaction a building actors with the physics object component).",
    "ItemCategoryOptionData:BuildingAttachmentType": "Building attachment type for this item (for traps)",
    "EBuildingReplacementType.BRT_Upgrade": "Building came into existence as a building upgrade operation",
    "EBuildingReplacementType.BRT_Edited": "Building came into existence as an edit operation",
    "BuildingOptionData:ClassSuffix": "Building class name suffix used to activate option",
    "MilkshakeControllerComponent:BuildingDamageFXMagnitudeParamName": "Building damage fx param name that corrsponds to the earthquake magnitude",
    "EFortContextualReticleTypes.FCR_Edit": "Building edit case",
    "TInteractionType.IT_BuildingEdit": "Building edit mode",
    "FortWorldSettings:BuildingFoundationStreamingData": "Building foundation streaming data",
    "FortDamageNumbersActor:CriticalHitBuildingColor": "Building hit, critical.",
    "FortDamageNumbersActor:HitBuildingColor": "Building hit, not critical.",
    "EBuildingReplacementType.BRT_None": "Building is as was initially placed; No conversion applied",
    "EFortContextualReticleTypes.FCR_InProgress": "Building is in construction/progress and preventing further operations",
    "EFortContextualReticleTypes.FCR_Locked": "Building locked",
    "BuildingProp": "Building piece that is interactive and standalone",
    "EFortContextualReticleTypes.FCR_Placement": "Building placement",
    "BuildingActor:BRMaxDrawDistance": "Building prop forced battle royale override to max draw distance",
    "BuildingActor:BRMinDrawDistance": "Building prop forced battle royale override to min draw distance",
    "BuildingActor:StWMaxDrawDistance": "Building prop forced saved the world override to max draw distance",
    "BuildingActor:StWMinDrawDistance": "Building prop forced saved the world override to min draw distance",
    "FortGameStateZone:bAllowBuildingAtLayoutRequirements": "Building properties",
    "EFortContextualReticleTypes.FCR_Repair": "Building repair",
    "BuildingSMActor:ReplacementDestructionReason": "Building replacement destruction reason. SERVER-ONLY",
    "BuildingSMActor:BuildingReplacementType": "Building replacement type for handling initialization effects, etc.",
    "EFortReplicatedStat.BuildingScore": "Building score. KEEP THIS BETWEEN MAX AND SCORE!",
    "TrapItemDefintionDesignerData:AllowedShapes": "Building shape this trap can be placed on",
    "FortPlayerController:TargetedBuilding": "Building targeted by the player, if any",
    "AthenaFortAIBotDigestedWeightedBuildingList:BuildDescriptors": "Building to build if this entry is chosen.",
    "BuildingCategoryOptionData:BuildingType": "Building type used to activate the building category if it is chosen on its own (with no building options)",
    "EFortContextualReticleTypes.FCR_Upgrade": "Building upgrade",
    "TInteractionType.IT_BuildingImprovement": "Building upgrade mode",
    "DecoPlacementState:CurrentBuildingActorAttachment": "BuildingActor it would attach to in this spot",
    "FortGameModePvE:BuildingContainersThatRequireSearching": "BuildingContainer class types that are exempt from starting already searched if bBuildingContainersStartAlreadySearched is set to true",
    "EContentRequestInstallState.ManifestsBuilt": "BuildingManifests,  in the process of building manifests, NOTREQUESTABLE STATE",
    "BuildingSMOverridesComponent": "BuildingSMOverridesComponent is an actor component used to replicate overrides from the BuildingSMActor.",
    "AthenaFortAIBotWeightedBuildingList:BuildDescriptors": "Buildings to build if this entry is chosen.",
    "EFortPlayspaceUserAcceptanceType.CustomLogic": "Built-in logic from source code or script",
    "FortRangedWeaponStats:SweepRadius": "Bullet traces sweep spheres (radius 0 implies line trace)",
    "FortProjectileBase:BulletWhipTrackerComponentClass": "BulletWhipTrackerComponent class",
    "FortTracerBase:BulletWhipTrackerComponentClass": "BulletWhipTrackerComponent class",
    "ELevelSaveRecordVersion.SeasionTwentyTwoRelease": "Bumping Version for seasion 22.00",
    "EFortItemType.Playset": "Bundle of creative items",
    "FortWaterInteractionComponent:BuoyancyFactor": "Buoyancy factor compared to gravity. Examples:\n0 = not buoyant at all, will just sink.\n1 = neutral, will slow down to rest somewhere in water. Usually you want greater than 1 to make it float.\n2 = double force of gravity, floats up fairly quickly but limited by drag.",
    "MilkshakeControllerComponent:BuildingDamageSoundCueByResourceType": "By building resource type, sounds cues that will play when a building of that type has a damage fx spawned on it",
    "BuildingTrap:bTargetWithAttachedTo": "By default traps use their attached actor when targeted.  Set true to target distictly. *",
    "FortAIController:bAlwaysNotifyBumpWall": "By default, OnBumpWall() notifications only occur for movement not using navmesh.  If true, get OnBumpWall() event when using NavMesh.",
    "ValkyrieAllowedClass:Deny": "By default, any AllowedClass is allowed. Deny may need to be set in order to specifically disallow something that was allowed by a parent class rule.",
    "SubmixEffectDynamicReverbSettings:bBypassEarlyReflections": "Bypasses early reflections",
    "SubmixEffectDynamicReverbSettings:bBypassLateReflections": "Bypasses late reflections.",
    "SubmixEffectDynamicReverbSettings:bBypass": "Bypasses reverb",
    "CinematicSequenceDeviceBase:InstigatingTeam": "Byte that represents the team that initiated playback of this device, 255 if irrelevant",
    "EAIPingCommandType": "CAISC Ping Commands",
    "FortAvailableScriptedAction:ActionDefaults": "CDO of action, in this form for fast access to triggers",
    "ConsolidatedQuestComponent:OnQuestNotReady": "CLIENT ONLY",
    "ConsolidatedQuestComponent:OnQuestReady": "CLIENT ONLY",
    "FortAthenaQuestActor:OnObjectiveActiveDelegate": "CLIENT ONLY",
    "FortAthenaQuestActor:OnObjectiveDormantDelegate": "CLIENT ONLY",
    "QuestInteractableComponent:ClientQuestDisabled": "CLIENT ONLY -",
    "QuestInteractableComponent:ClientQuestEnabled": "CLIENT ONLY -",
    "QuestInteractableComponent:ClientQuestObjectiveComplete": "CLIENT ONLY -",
    "QuestInteractableComponent:ClientQuestVisualCreated": "CLIENT ONLY -",
    "CraftingObjectComponent:OnFormulaCraftableChanged": "CLIENT ONLY: This delegate will be triggered when a formulas status changes, becoming craftable or uncraftable",
    "FortControllerComponent_Interaction:ActorPendingNonInteraction": "CLIENT USE ONLY\n     Holds a pointer to an actor that we should NOT allow interaction with\n     because this player finished interacting with the object on the client and is waiting for the server to destroy the object or make it non-interactable",
    "ActorTemplateRecord:DataHash": "CRC32 of the ActorData (excluding the header)",
    "ActorComponentRecord:DataHash": "CRC32 of the ComponentData (excluding the header)",
    "CatalogOfferSource:TabDataTransfer": "CSV Import helper",
    "FMDeviceCableManagerComponent:CableConnections": "Cable connections owned by this component",
    "FortCurieCableSocketComponent:CableSockets": "Cable socket information",
    "FortCurieCableSocketComponent:CableSocketRadius": "Cable socket radius of influence",
    "EDeviceCableInteractionType.StaticOutput": "Cables are created as needed to connect to ports",
    "FortActorComponent_Affiliation:CachedAIPerceptionComponent": "Cache AI perception component",
    "FortAthenaAIBotController:CacheWeaponUsedToCalculateType": "Cache Weapon we calculated type with",
    "FortActorComponent_Affiliation:CachedAffiliationManager": "Cache affiliation manager",
    "FortActorComponent_Affiliation:CachedBotController": "Cache controller for owners that are bots",
    "FortAthenaAIBotController:DefaultAlertLevelInfo": "Cache default alert level config",
    "FortBotInventoryInfo:MultiItemDefinitionCache": "Cache for multiitem definition",
    "RigUnit_BoneGroundTrace:WorkData": "Cache for the sphere trace",
    "RigUnit_UpdateAllGroundTraces:WorkData": "Cache for the sphere trace",
    "RigUnit_UpdateSomeGroundTraces:WorkData": "Cache for the sphere trace",
    "FortScoutDronePickupManager:PreviouslyAttachedTargets": "Cache for the targets so we can revert collision values when dropping",
    "FortBotInventoryInfo:WeaponDefinitionCache": "Cache for weapon definition",
    "FortGameStateComponent_AffiliationManager:CachedFactionData": "Cache of FactionData including active plugins",
    "FortAthenaAIBotController:CacheAimingDigestedSkillSet": "Cache of aiming skillset pointer",
    "FortAthenaMutator_GameModeBase:FortSquadStartActors": "Cache of all AFortSquadStart actors in the world.",
    "FortAthenaAIBotController:CacheAttackingSkillSet": "Cache of attacking skillset pointer",
    "FortGameModeOutpost:CurrentCoreInfo": "Cache of current core info, not necessarily the same as on the mcp",
    "FortGameStateComponent_AffiliationManager:CachedFactionTags": "Cache of faction tags including active plugins",
    "FortAthenaAIBotController:CacheHarvestDigestedSkillSet": "Cache of harvesting skillset pointer",
    "FortAthenaAIBotController:CacheInventoryDigestedSkillSet": "Cache of inventory skillset pointer",
    "FortAthenaAIBotController:CacheLootingSkillSet": "Cache of looting skillset pointer",
    "FortAthenaAIBotController:CacheMovementSkillSet": "Cache of movement skillset pointer",
    "FortAthenaAIBotController:CachePerceptionDigestedSkillSet": "Cache of perception skillset pointer",
    "FortAthenaAIBotController:CachePlayStyleSkillSet": "Cache of play style skillset pointer",
    "FortAthenaAIBotController:CacheRangeAttackSkillSet": "Cache of range Attack skillset pointer",
    "FortAthenaLivingWorldManager:SpawnActionCache": "Cache of spawn action to avoid reallocating new uobject.",
    "FortWidgetComponent:PreClampedLocalPosition": "Cache of the local position before performing a clamp.",
    "FortPlayspace:EventRouter": "Cache of the owned Routter Component",
    "FortScoutDroneControllingComponent:OriginalDroneOwner": "Cache of the previous owner of the Drone, used to revert ownership back to it when we stop controlling the drone",
    "FortAthenaAIBotController:CacheUnstuckSkillSet": "Cache of unstuck skillset pointer",
    "FortAthenaAIBotController:CacheVehicleSkillSet": "Cache of vehicle skillset pointer",
    "FortQuestIconComponent:CachedOwnerInteractInterface": "Cache script interface for interaction checks",
    "MaterialCacheSettings:PlatformMaxCount": "Cache size with per-platform override",
    "SkyfireBackpackComponent:CurrentRarity": "Cached",
    "FortMantisRootMotionWarpInfo:LastValidWarpTargetLocation": "Cached & replicated value of the last valid warp target location. If a warp target location was set directly, it will be stored\n              here. If the warp target is an actor, their last known location will be stored here to handle edge cases like pawn having\n              been set but not replicated yet, pawn died/GC'd, etc.",
    "FortMaterialStyleComponent:DefaultStyleRequest": "Cached 'default' state request structure used to request the default state when no other state is active",
    "FortPathFollowingComponent:MyAI": "Cached AI controller, most common owner",
    "FortPathFollowingComponentBase:AIController": "Cached AI controller, most common owner",
    "FortSpicySakeGameplayCueNotifyLoop_Alive:TargetAIPawn_Native": "Cached AI pawn target",
    "FortBotDisablePOIRequest:CachedAIServicePlayerBots": "Cached AIServicePlayerBots so we don't need to call it again in CancelRequest.",
    "ButterCakeUnstuckComponent:CachedAbilityComponent": "Cached AbilityComponent",
    "FortAthenaAIBotController:CachedAffiliationComponent": "Cached Affiliation Component of the currently possessed pawn",
    "FortAIController:CachedAffiliationManager": "Cached Affiliation Manager",
    "FortAthenaAIBotController:CachedAffiliationManager": "Cached Affiliation Manager",
    "FortPawn:CachedAffiliationManager": "Cached Affiliation Manager",
    "FortNPCConversationParticipantComponent:AffiliationManager": "Cached AffiliationManager",
    "FortPawnComponent_Disguise:AffiliationManager": "Cached AffiliationManager",
    "FortPawnComponent_PassiveHealer:AffiliationManager": "Cached AffiliationManager",
    "AthenaPathFollowingComponent:AthenaAIController": "Cached Athena AI Controller",
    "FortAthenaAIBotPathFollowingComponent:BotController": "Cached Bot controller, most common owner",
    "FortNPCConversationParticipantComponent:BotControllerOwner": "Cached BotController Owner",
    "DeployableBasePlot:BuildableAreasArray": "Cached Box Components that represent buildable/savable spaces",
    "PatrolPathSegmentDetails:End": "Cached End patrol point",
    "ButterCakeUnstuckComponent:CachedOwner": "Cached FortAIPawn Owner",
    "FortWeaponPickaxeDualWieldAthena:PrimaryFireAbilityOverrideClass": "Cached GameplayAbility class for the current PrimaryFireAbility if we've overridden it through a variant scripted action swap.\nSpecifically needed so we can play the correct swing ability for front end item previews",
    "FortPawnComponent_SpeechBubble:CachedGroupComponent": "Cached GroupComponent",
    "FortPlayerControllerZone:HUDTargetUnderReticle": "Cached HUD target currently under the reticle",
    "FortGameStateOutpost:IronCityDifficultyInfo": "Cached Iron City Difficulty Info",
    "CreativeRoyalePlayspaceComponent_LevelReset:CachedLevelSaveRecord": "Cached Level Save Record",
    "CreativeMiniMapComponent:LoadedMIDs": "Cached MIDs in case the creator cycles through the icons a lot.",
    "AthenaCobaltStormShield:CachedMutator": "Cached Mutator so that values can be looked up when needed and call back functions can be invoked when necessary",
    "FortAICombatTokenConsumerComponent:CachedOwnerBotController": "Cached OwnerBotController",
    "FortNPCConversationParticipantComponent:PlayerPawnOwner": "Cached PlayerPawn Owner",
    "InfiltrationCarryObjectSpawnPoint:CachedIntelActor": "Cached Reference to the Intel Actor",
    "PatrolPathSegmentDetails:Start": "Cached Start patrol point",
    "DeployableBasePlot:BuildableAreasStructuralSupportBoxesArray": "Cached Structural Grid Boxes Array",
    "FortAthenaAIBotController:CachedWeaponUsedToCalculateProjectileData": "Cached Weapon we used to calculate if bot is using an arced projectile weapon",
    "FortAthenaAIBotController:CachedWorldItem": "Cached World Item used by evaluator to interface with the inventory system (instead of creating everytime an Object)",
    "BuildingSMActor:ActorIndexInFoundation": "Cached actor index in the foundation, set when the foundation streams this actor in",
    "FortGameStateComponent_RealitySapling:SaplingSpawnEnvQueryActorsToAvoidByBounds": "Cached array of actors generated from SaplingSpawnEnvQueryActorClassesToAvoidByBounds that the SaplingSpawnEnvQuery should avoid by their bounds.\nThis is used by eqs context and cached here for performance sake as the SaplingSpawnEnvQuery is run for each persistent sapling spawned.",
    "FortAthenaAIBotController:bCachedIsUsingArcedProjectileWeapon": "Cached bool for whether we are using an arced projectile weapon",
    "FortQuickBars:CachedCeilingTraps": "Cached ceiling traps in player's inventory",
    "FortCharacterMovementMutatorComponent:CharacterOwner": "Cached character owner",
    "CurieManager:CurieComponentClass": "Cached class to use for dynamically created Curie components",
    "FortAthenaVehicle:bMoveStickAcceleratesVehicles": "Cached client settings value for if we have the option on/off for accelerating using the gamepad stick.\nWe need to cache and replicate this so our predictive movement on the server and sim proxy know what the value is.",
    "FortSkyTube:CachedSkyTubeConfig": "Cached config values",
    "FortAthenaVehicle:bCachedSquadRestrictionEnabled": "Cached configs value for if this vehicle cares about squad restriction.\nIf restricted, the current passenger's squad owns the vehicle and others can't use it.",
    "FortAthenaVehicle:bEnforceTeamRestriction": "Cached configs value for if this vehicle cares about team restriction. BP can also set this value on the server.\nIf restricted, the current passenger's team owns the vehicle and others can't use it.",
    "FortMinigameManager:OwningController": "Cached controller that is part of a minigame and the owner of this component",
    "SpecialEventStatArrayEntry:StatDefinitionCopy": "Cached copy of our definition from USpecialEventStatComponent::StatDefinitions, for easy BP access",
    "FortScriptedAction:CachedParams": "Cached copy of the params that spawned this action",
    "FortPickupCreative:CachedInstigatorData": "Cached data dictated to us by out pickup instigator",
    "ESkyfireBackpackComponentCachedExec.Success": "Cached data has been set",
    "ESkyfireBackpackComponentCachedExec.Cached": "Cached data is still valid",
    "PickupInstigator:InstigatorData": "Cached data, generally referenced by spawned items/pickups to alter behavior/appearance",
    "FortMinigame:PlayerSpawnOverrideDevices": "Cached devices for overriding player spawn locations.",
    "FortMinigame:bAllowPartyMemberJoinInProgress": "Cached devices for overriding player spawn locations.",
    "FortQuickBars:CachedFloorTraps": "Cached floor traps in player's inventory",
    "FortPawn:CachedNavFloor": "Cached floor's primitive component for navmesh walking mode",
    "FortVehiclePhysicsCollisionDamageComponent:CachedOwnerVehicle": "Cached for multiple usage.",
    "FortVehiclePhysicsCollisionDamageComponent:CachedVehicleConfigs": "Cached for multiple usage.",
    "FortAthenaVehicle:PontoonsComponent": "Cached for multiple usage.\nNOTE: We shouldn't be creating this in code. Those classes that are will be cleaned up. When that happens, we can remove the EditDefaultsOnly.",
    "FortAthenaMutator_Infiltration:CachedRoundHelper": "Cached for quicker access",
    "BuildingSMActor:Foundation": "Cached foundation actor, set when the foundation streams this actor in",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:AirCraftBehavior": "Cached from the playlist.",
    "FortGravityGunHolder:CachedHoldForwardDistance": "Cached from the scalable float on load but tweakable by BP.",
    "FortGravityGunHolder:CachedHoldUpDistance": "Cached from the scalable float on load but tweakable by BP.",
    "FortGravityGunHolder:CachedHoldUpDistanceWhileADS": "Cached from the scalable float on load but tweakable by BP.",
    "FortGravityGunHolder:CachedTargetRotationTorqueDeltaTimeScalar": "Cached from the scalable float on load but tweakable by BP.",
    "FortMotorcycleVehicle:CachedNiagaraComponentRoadAndExhaust": "Cached fx component for road/exhaust.",
    "FortTankVehicle:CachedNiagaraComponentRoadAndExhaust": "Cached fx component for road/exhaust.",
    "FortControllerComponent_CreativeMatchmaking:CachedGameActivity": "Cached game activity that is created from the Island Manager in response to an In game ready check.",
    "FortControllerComponent_RealitySapling:OwnedIndicators": "Cached indicators that may not correspond to any owned saplings anymore. Required for cleanup.",
    "BuildingSMActor:CachedDestructionInstigator": "Cached instigator that destroyed this building actor",
    "FortPlayerController:InteractionComponent": "Cached interaction component, to avoid finding and looping in multiple places.",
    "FortPlayerController:InventoryNetworkManagementComponent": "Cached inventory management component.",
    "FortItemExhibitActor:ItemInstanceId": "Cached item instance id",
    "CreativeItemTemplate:TemplateData": "Cached item template data, generally referenced by spawned item template objects",
    "FortAthenaMutator_MatchConditionManager:MatchConditionMutators": "Cached list of all MatchCondition mutators",
    "QuickBar:EquippedItemDefinitions": "Cached list of item definitions currently on the quick bar, used for asset preloading",
    "FortMotorcycleVehicle:PassengerADSRelativeOffsets": "Cached local offset of the ADS socket location relative to the seat",
    "FortAthenaMutator_Skyfire:CachedBlockStormCenter": "Cached location of the actor representing the center of the area to block the storm in. This location is cached in InitMutator.",
    "FortAthenaNPCLoopStateComponent:RuntimeLoopSettings": "Cached loop settings used for this NPC",
    "FortTheaterMapTile:LastValidMissionData": "Cached mission data for the last valid mission, Needs to be maintained for the selected tile",
    "AIPatrolPathComponent:CachedAIAgentProperties": "Cached nav agent properties of the AI",
    "AIPatrolPathComponent:CachedNavData": "Cached nav data to calculate the paths on",
    "AIPatrolPathComponent:CachedNavSystem": "Cached nav system to calculate the paths on",
    "FortGameStateZone:UIMapManager": "Cached object that handles in-game map",
    "BuildingGameplayActorAbilityDeliveryInfo:bHasGEsToApplyOnPulseTimer": "Cached optimization",
    "BuildingGameplayActorAbilityDeliveryInfo:bHasGEsToApplyOnTouch": "Cached optimization",
    "BuildingGameplayActorAbilityDeliveryInfo:bHasPersistentEffects": "Cached optimization",
    "BuildingGameplayActorAbilityDeliveryBucket:bHasGEsToApplyOnExit": "Cached optimization on whether this bucket has to handle exit-based proximity effects.",
    "BuildingGameplayActorAbilityDeliveryBucket:bHasPersistentEffects": "Cached optimization on whether this bucket has to handle persistent effects",
    "BuildingGameplayActorAbilityDeliveryBucket:bHasGEsToApplyOnPulseTimer": "Cached optimization on whether this bucket has to handle timer-based proximity effects",
    "BuildingGameplayActorAbilityDeliveryBucket:bHasGEsToApplyOnTouch": "Cached optimization on whether this bucket has to handle touch-based proximity effects",
    "BuildingGameplayActorAbilityDeliveryInfo:bHasGEsToApplyOnExit": "Cached optimization.",
    "FortPlayerControllerOutpost:BuildingBeingUpgraded": "Cached outpost item being upgraded",
    "FortVehiclePontoonsComponent:WaterLineStartPontoonIndex": "Cached owner vehicle so we don't have to call Cast<AFortAthenaVehicle>(GetOwner()) all the time.",
    "FortCharacterMovementMutatorComponent:MovementComponent": "Cached owner's movement component",
    "FortPawnComponent_Convert:CachedAIConvertParameters": "Cached parameters with settings to use when an AI gets converted",
    "FortPawnComponent_Disguise:CachedAIDisguiseParameters": "Cached parameters with settings to use when an AI is disguised",
    "FortPawnComponent_PingCommand:PingInfo": "Cached ping info of last command issued",
    "GameplayCueNotify_Jetpack_FuelRegen:FortPlayerPawn": "Cached player pawn for this cue",
    "FortVehicleSeatComponent:PreviousPlayerSlots": "Cached player slots from the previous time they were replicated. Used to clear tags when a player is removed from a seat.",
    "FortMission:TimerComponent": "Cached pointer of a possible timer component",
    "FortMission:TimerElapsedComponent": "Cached pointer of elapsed timer component",
    "FortAthenaMutator_Chrome:FinishTraversePoint": "Cached pointer of the finish traverse point, which marks the end of the race.",
    "FortCharacterVehicle_Ostrich:FortOstrichVehicleConfigs": "Cached pointer to CDO of FortOstrichVehicleConfigsClass",
    "SkyfireBackpackComponent:SkyfireMutator": "Cached pointer to Skyfire mutator",
    "SkyfireBackpackComponent:SkyfirePlayerPawnComponent": "Cached pointer to SkyfirePlayerPawnComponent",
    "FortCreativeVolumeLinkComponent:CachedOptionDefinitionProxy": "Cached pointer to loaded option asset. Needed to keep returned pointer alive in case asset is loaded via path",
    "FortAISpawnerUtilityComponent:CachedFortSpatialGameplay": "Cached pointer to our \"volume\"",
    "SpecialEventCursorWeaponComponent:Pawn": "Cached pointer to our pawn",
    "SpecialEventCursorWeaponComponent:OwningWeapon": "Cached pointer to our weapon",
    "FortAthenaMutator_MatchCondition:MatchConditionManager": "Cached pointer to the MatchConditionManager",
    "FortAthenaMutator_Rounds:MatchConditionManager": "Cached pointer to the MatchConditionManager",
    "FortAIPawn:CachedPartsComponent": "Cached pointer to the Parts Component.",
    "SkyfireAudioManager:SkyfireMutator": "Cached pointer to the Skyfire mutator.",
    "FortControllerComponent_SpecialEvent:SpecialEventMutator": "Cached pointer to the SpecialEvent mutator",
    "FortAthenaMutator_SpecialEventTODM:SpecialEventScript": "Cached pointer to the SpecialEventScript",
    "FortAthenaMutator_Chrome:TeleportMutator": "Cached pointer to the SynchronizedTeleport mutator, which we use to teleport players to the starting area",
    "FortCreativeLinearMoverComponent:CachedNavModifierComponent": "Cached pointer to the actor's dynamic nav modifier component",
    "FortKeyframedMovementComponent:CachedNavModifierComponent": "Cached pointer to the actor's dynamic nav modifier component",
    "FortAthenaDoghouseVehicle:FortAirVehicleConfigs": "Cached pointer to the config's CDO.",
    "FortAthenaVehicle:FortPhysicsVehicleConfigs": "Cached pointer to the config's CDO.",
    "SpecialEventCursorPawnComponent:OwningController": "Cached pointer to the controller associated with the OwningPawn",
    "FortLobbyBeaconState:CachedMissionGeneratorCDO": "Cached pointer to the mission generator referenced by MissionGeneratorPath",
    "FortCharacterMovementMutatorComponent:CDOMovementComponent": "Cached pointer to the movement component of the owner's CDO",
    "SpecialEventCursorPawnComponent:OwningPawn": "Cached pointer to the pawn that owns this component",
    "BuildingActor:PhysicsObjectComponent": "Cached pointer to the physics object component",
    "FortPlayerControllerPvE:CachedPrimaryQuickBarRecord": "Cached primary quick bar record used on Server to hold data for a Batch Update",
    "XPEventArray:ParentComp": "Cached ptr to the parent comp",
    "FortPlayerController:QuickEditComponent": "Cached quick edit component",
    "CobaltPlayerComponent:CachedMutator": "Cached reference for the Cobalt Mutator.",
    "BuildingSMActor:LastRelevantBASE": "Cached reference to RelevantBASE for cleanup after it is nulled by replication",
    "FortCurieManager:CurieSettings": "Cached reference to the Curie settings",
    "LevelInstanceGameplayVolume:LevelInstanceSaveActor": "Cached reference to the actor that contains the save record",
    "FortAthenaMutator:CachedGameMode": "Cached reference to the athena game mode",
    "FortAthenaMutator:CachedGameState": "Cached reference to the athena game state",
    "FortWeap_BuildingToolBase:InstigatorBotController": "Cached reference to the instigator controller as a fort bot controller if instigator is a bot",
    "FortWeap_BuildingToolBase:InstigatorController": "Cached reference to the instigator controller as a fort player controller",
    "FortPoiSwapManager:CachedIslandOwnerProfile": "Cached reference to the island owner's MCP profile. Used for lookup of sub-plots the player owns",
    "LevelInstanceGameplayVolume:CachedMinigame": "Cached reference to the minigame",
    "FortAttachableProjectileComponent:Projectile": "Cached reference to the owner as a AFortProjectileBase\nOwner is not required to be a projectile, so this may not always be valid",
    "FortAttachableProjectileComponent:ProjectileMovementComponent": "Cached reference to the owners projectile movement component",
    "BuildingTurretComponent:OwnerASC": "Cached reference to the owning actor's ability system component",
    "FortAthenaMutator_LevelInstanceDevice:CachedGameplayVolume": "Cached reference to the owning level instance gameplay volume",
    "FortClassTrackerComponent:ParentSpatialInterface": "Cached reference to the parent spatial interface",
    "SkyfirePlayerPawnComponent:CachedSkyfireMutator": "Cached reference to the skyfire mutator.",
    "ControlPointInstanceData:CachedOwningTeamInfo": "Cached reference to the team info for the owning team",
    "FortCreativeTimerDevice:Volume": "Cached reference to the volume this timer device occupies.",
    "FortCreativeTimerObjective:Volume": "Cached reference to the volume this timer objective occupies.",
    "FortPlayerPawnAthena:ContrailsComponent": "Cached referenced to this pawn's contrail component, so we don't have to search for it every tick. Not all pawns\nwill have a contrails component",
    "CreativeEditOnlyMeshComponent:CachedOverrideMaterials": "Cached references to the loaded override materials (either the Preview Override Materials or Edit Override Materials) so they don't get GC'd.",
    "FortCurieManager:ConfigOverrides": "Cached references to the manager config overrides",
    "InfiltrationCarryObjectSpawnPoint:CachedSceneComponent": "Cached scene component to know where to spawn the intel object",
    "FortPlayerControllerAthenaXPComponent:CachedSeasonMatchXpBoost": "Cached season match xp boost percentage",
    "FortPlayerControllerPvE:CachedSecondaryQuickBarRecord": "Cached secondary quick bar record used on Server to hold data for a Batch Update",
    "PlayspaceComponent_DeviceTracking:DeviceLabels": "Cached set of actor labels corresponding to each Device in the in the DeviceInstanceInfos array.",
    "FortVolumeTimeOfDayComponent:TimeOfDayConfig": "Cached settings for TOD, replicated to clients",
    "FortTankVehicle:CachedSkeletalMeshComponent": "Cached skeletal mesh component",
    "FortPlayerController:SmartBuildComponent": "Cached smart build component",
    "FortAthenaAntelopeVehicle:BackLeanSocketPosition": "Cached socket position of passenger seat where back lean force should be applied",
    "FortAISpawnerUtilityComponent:FreeSpawnSlots": "Cached spawn locations that were returned from the Env Query",
    "DeploymentConsoleComponent:Aircrafts": "Cached spawned aircrafts.",
    "FortItemExhibitActor:ExhibitItem": "Cached spawned item pick up",
    "FortHeroExhibitActor:HeroExhibitPawn": "Cached spawned pawn of specified (through HeroType) class for this exhibit actor",
    "FortPlayerControllerGameplay:SpawnedVehicleComponent": "Cached spawned vehicle component.",
    "FortPhysicsPawnObject:CachedSpeed": "Cached speed of the PhysicsObject, calculated from GetPreviousLinearVelocity()",
    "FortAthenaVehicle:CachedSpeed": "Cached speed of the vehicle, calculated from GetPreviousLinearVelocity()",
    "FortPlayerControllerAthenaXPComponent:CachedLevelInfo": "Cached starting level info",
    "FortPlayerControllerAthenaXPComponent:CachedSeasonDef": "Cached starting level info",
    "FortPlayerControllerGameplay:SwingingComponent": "Cached swinging component.",
    "FortAthenaMutator_Skyfire:TeleportMutator": "Cached synchronized teleport mutator",
    "FortGameplayCueNotify_Actor:ExecutionTarget": "Cached target at time of execution",
    "FortAthenaAIBotController:FortControllerComponent_Telemetry": "Cached telemetry component.",
    "FortPlayerController:FortControllerComponent_Telemetry": "Cached telemetry component.",
    "FortAIController:MyFortPawn": "Cached to avoid casting in nearly every function.",
    "FortPlayerController:MyFortPawn": "Cached to avoid casting in nearly every function.",
    "FortSaveFileBuildingInstructionsHandler:OperationUserId": "Cached user id of the user performing operations on this handler; Used to distinguish separate i/o requests from other handlers",
    "FortAthenaMutator_Disco:LastRespawnableSafeZoneIndex": "Cached value for the last respawnable safezone",
    "FortAthenaMutator_Disco:LastSafeZoneIndex": "Cached value for the last safezone",
    "ControlPointInstanceData:CachedSafeZonePhaseWhenToSpawn": "Cached value for what safe zone this control point spawned",
    "ControlPointInstanceData:CachedBonusPointAccrualValue": "Cached value from the spawn data for how many points a bonus second is worth",
    "ControlPointInstanceData:CachedPointAccrualValue": "Cached value from the spawn data for how many points a second is worth",
    "FortAthenaSupplyDrop:CachedInStormDespawnTimeInSeconds": "Cached value pulled out of InStormDespawnTimeInSeconds",
    "FortVolumeTimeOfDayConfig:bShouldOverrideTimeOfDay": "Cached value to determine if our local TOD manager should override the global instance",
    "FortAbilityDecoTool:CachedSpawnParameters": "Cached values for ServerSpawnDeco since we can't handle payloads very well to ability triggers",
    "AthenaCapturePoint:CachedPercentIncreasePerPlayerCaptor": "Cached values for the increase and decrease values for capturing",
    "FortAthenaSKMotorVehicle:SpringCompressionLeft": "Cached values for updating spring compression related FX / audio params",
    "FortTankVehicle:CachedVehicleAudioController": "Cached vehicle audio controller",
    "FortCreativeVkPalette_ProjectInfo": "Cached versions of all public modules retrieved from a link code (only the link version gets serialized)",
    "FortMinigameSettingsBuilding:SettingsVolume": "Cached volume this actor is within. This is the volume the settings machine applies its data to",
    "FortQuickBars:CachedWallTraps": "Cached wall traps in player's inventory",
    "FortMissionStormShield:CurrentPhase": "Cached/replicated current phase/safe zone index.",
    "FortMissionStormShield:NumPhases": "Cached/replicated number of phases/safe zones",
    "FortPlayerControllerZone:PurchaseCatalogEntryData": "Caches off PurchaseCatalogEntry data to be used when the server is ready to make the request",
    "FortAthenaVehicle:CachedFuelComponent": "Caching for multiple usage.",
    "FortAthenaVehicle:CachedVehiclePhysicsCollisionDamageComponent": "Caching for multiple usage.",
    "EFortMinigameTimeAliveStartPoint.PawnCreated": "Calculate the time alive stat from the time the pawn was created",
    "EFortMinigameTimeAliveStartPoint.RoundStart": "Calculate the time alive stat from the time the round started",
    "BuildingRift:DistToTarget": "Calculated by AIDirector when picking rifts for spawning.",
    "FortMovementComp_Character:FallingSlopeSafeSlideAngleCached": "Calculated from FallingSlopeSafeSlideAngleScalable.",
    "FortMovementComp_Character:FallingSlopeSafeSlideNormalZ": "Calculated from FallingSlopeSafeSlideAngleScalable.",
    "FortTimeOfDayManager:TransitionFromPhase": "Calculated locally based on CurrentDayNightPhase and TimeOfDay, etc.",
    "FortTimeOfDayManager:TransitionToPhase": "Calculated locally based on CurrentDayNightPhase and TimeOfDay, etc.",
    "DynamicXpProfileStats:BoosterXpMult": "Calculated to help player gain more XP if in the last timespan they did not gain enough.",
    "FortDecoHelper:FallbackTinyScale": "Calculated when the mesh comes in so every preview is roughly the same size",
    "BuildingSMActor:MaxResourcesToSpawn": "Calculated, cached value of the maximum amount of resources this building is allowed to spawn",
    "EFortAthenaLivingWorldEventRuntimeDeactivationReason.MatchedPrefabAndNormalActor": "Calendar event condition are not met",
    "CachedRealitySaplingData:last_weeding_time": "Calendar time when this sapling was last weeded.",
    "RealitySaplingPersistentData:LastWeedingTime": "Calendar time when this sapling was last weeded.",
    "CachedRealitySaplingData:planting_time": "Calendar time when this sapling was planted.",
    "RealitySaplingPersistentData:PlantingTime": "Calendar time when this sapling was planted.",
    "OwnedRealitySaplingData:NextWeedingTime": "Calendar time when this sapling will need weeding next.",
    "ESynchronizedTeleportHealthAndShieldResetType.EvaluateHealthAndShieldMutators": "Call AFortGameStateAthena::EvaluateHealthAndShieldMutators() to use the settings from our HealthAndShield mutator",
    "GasDebuggerMenu:CurrentlyRequestingCallStacks": "Call stack requests still awaiting a server response, stored as history item IDs",
    "GasDebuggerMenu:ReceivedCallStacks": "Call stacks received from the server, stored on the client for lookup purposes",
    "FortPlayerController:OnUiChoiceCompleted": "Callback from SFortChoiceWidget containing result of choice",
    "FortAthenaMutator_SpecialEvent:OnInitController": "Called ON THE SERVER when we init a new player controller",
    "SpecialEventGameUserSettingsControllerComponent:OnLoaded": "Called after the data is initially loaded, and after a cheat alters the data.\nUseful for notifying objects that should update their state to match the new data.",
    "FortPlayerPawn:OnVehicleStateChangedEvent": "Called both on the server and the clients: can be used to get notified when the Pawn has changed its vehicle state.",
    "CreativeDeviceInfo:CalledFunctions": "Called functions from FCreativeDeviceInstanceInfo",
    "CaptureComponent:OnCaptureProgressUpdate": "Called just after CaptureState changed and/or was replicated",
    "CaptureComponent:OnCaptureStateChanged": "Called just after CaptureState changed and/or was replicated",
    "FortAthenaMutator_CustomStormMovement:OnSafeZoneRouteChanged": "Called on server and client when the SafeZoneRouteIndex changes",
    "FortAthenaMutator_Rounds:OnRoundAdvanced": "Called on server and client when the round advances",
    "FortAthenaMutator_Rounds:OnPhaseChanged": "Called on server and client when the round phase changes",
    "FortActorOptionsComponent:OnPreAnyPropertyChanged": "Called right before OnPropertiesLoaded and OnAnyPropertyChanged",
    "FortAttachableProjectileComponent:OnFinalizeAttachment": "Called to allow adjustment of calculated attachment parameters.\n     NOTE: To actually override the attachment parameters, call\n     OverrideFinalizedAttachmentParams on this component.",
    "FortLOSComponent:OnHasBeenFound": "Called to allow the for the chance of handling this event",
    "EFortQuestObjectiveStatEvent.PlacementUpdate": "Called we TeamLeft in the match has changed due to the death of a player or bot. Use Athena.TeamPlacement when evaluating quest & xp row conditions. Target is empty.",
    "FortPawn:OnSkyTubeChanged": "Called when CurrentSkyTube changes",
    "FortGameStateAthena:MutatorGameplayEvent": "Called when a gameplay mutator wants to communicate an event to clients (like an rpc)",
    "FortGameStateAthena:MutatorGenericIntegerUpdated": "Called when a generic integer has been updated for the mutators to use to communicate replicated data to clients",
    "FortMediaCMSEventsComponent:MediaEndedEvent": "Called when a media event becomes invalid",
    "FortMediaCMSEventsComponent:MediaStartedEvent": "Called when a media event becomes valid",
    "FortVolume:OnShowHUDMessage": "Called when a message wants to be shown on the HUD.",
    "FortAthenaMutator_Payback:OnPaybackKill": "Called when a payback occurs",
    "FortAthenaMutator_SpyRumble:GameMsg_SupplyDropOpened_Friendly": "Called when a player opens a supply drop",
    "FortAthenaCollisionReactionComponent:OnReaction": "Called when a reaction happens on an actor:\n- HitActor: the actor we are reacting with\n- bFromAsyncSweepBox: if true this reaction comes from a sweep box, otherwise it's from a physics collision\n- CollisionReactionType: the type of reaction the component is doing\n- bIsFirstContinuousReactionOnDelayableActor: will be valid only if the type of reaction has a set delay (ex. PawnReactionDelayPerActor)\n  If valid will be false if the actor has been reacted to during the last check, otherwise will be true if during the last check the actor was not colliding with component\n  Can be used to avoid spamming client feedbacks (ex. audio) on reaction",
    "FortAthenaMutator_Uranium:OnUraniumChangeRoundEndVisibility": "Called when a round end visibility is supposed to change",
    "FortAthenaMutator_Uranium:OnRoundCompleted": "Called when a round is completed",
    "FortGameStateAthena:ContextTutorialGameModeMessageRequest": "Called when a system want the game mode message UI to display a message (Specifically the context tutorial)",
    "FortGameStateAthena:GameModeMessageRequest": "Called when a system want the game mode message UI to display a message (typically used by LTMs to explain special events)",
    "FortGameStateAthena:HideGameModeMessageRequest": "Called when a system want the game mode message UI to stop displaying a message early (typically used by LTMs to explain special events)",
    "AthenaCapturePoint:OnCaptureLockEvent": "Called when a team has captured and locked the capture point and can now earn points from it",
    "PartyDisplayManager:OnClickedPartyPlayer": "Called when a team member's character has been clicked.",
    "AthenaCapturePoint:OnCaptureLockBrokenEvent": "Called when a team's lock has been broken",
    "VoteListenerComponent:OnVoteEndEvent": "Called when a vote has ended.\n- WinningVoteSelectionId: depending on the type of vote session scenario, this will either be the selection\n  that won the most votes (in the case of a survey) or the correct answer (in the case of a trivia question)",
    "VoteListenerComponent:OnVoteSetupEvent": "Called when a vote is about to begin.",
    "VoteListenerComponent:OnVoteChangeEvent": "Called when a vote selection total has changed",
    "VoteListenerComponent:OnVoteStartEvent": "Called when a vote starts.",
    "VoteListenerComponent:OnVoteSessionCompleteEvent": "Called when a voting session has completed.",
    "VoteListenerComponent:OnVoteSessionShutdownEvent": "Called when a voting session is shutting down.",
    "FMInWorldKnobOptionsComponent:OnAllKnobsLoaded": "Called when all Child Actor Components implementing IInWorldKnobptionsComponent or FabricInteractable are not null",
    "CreativeFunctionalTest:OnTestConditionSatisfied": "Called when all registered condition components have been satisfied",
    "FortAthenaMutator_SpecialEvent:OnResumeGame": "Called when an explicit resume has occurred (client+server)",
    "FortPlayerControllerAthena:OnItemDropSpawnedDelegate": "Called when an item is dropped and a pick up is spawned.\n     Mutable so listeners can be gotten and registered with through const functions.",
    "FortPlayerControllerAthena:OnItemDroppedDueToOverflow": "Called when an item is dropped because there is not enough room in the player's inventory for a newly picked up item.",
    "FortAthenaMutator_GG:OnOtherPlayerAwardedWeapon": "Called when any other player gets a new weapon.",
    "PartyDisplayManager:OnItemDisplayReady": "Called when currently displayed item visuals finish setup",
    "FortFXCustomizationComponent:OnFXCustomizationApplied": "Called when fx customization is applied to an fx component, allowing additional customizations to be applied in code or blueprint.",
    "FortGameStateZone:OnScoreTotalsChanged": "Called when one of the score totals changes",
    "FortGameStateAthena:ShowMarkerGameMode": "Called when playing the marker in the game mode message",
    "FortProjectileMovementComponent:OnProjectileVelocityReplicated": "Called when projectile velocity is changed on both client and server, passes in the new velocity.",
    "FortGameStateAthena:HideMarkerGameMode": "Called when removing the marker in the game mode message",
    "FortAthenaMutator_Uranium:OnUraniumChangeRoundProgressVisibility": "Called when round progress visibility is supposed to change",
    "FortGameStateAthena:HideGameModeMessage": "Called when something wants to display a message in the game mode message",
    "FortGameStateAthena:ShowGameModeMessage": "Called when something wants to display a message in the game mode message",
    "FortAthenaMutator_Uranium:OnTeamsRolesChanged": "Called when team roles (i.e. pushing or defending) change",
    "FortNonPlayerConversationParticipantComponent:OnEnterConversationStateDelegate": "Called when the AI enters the conversation state. If the AI starts conversing with multiple actors, this will be called only the first time.",
    "FortNonPlayerConversationParticipantComponent:OnConversationEnded": "Called when the AI exits the conversation state. If the AI exits a conversation but is still conversing with another actor, this will NOT be called.",
    "FortAIPawn:OnDowned": "Called when the AI is downed (but not out!).",
    "FortAthenaNpcGalileoComponent:OnPatrollingStart": "Called when the NPC enter in patrolling mode",
    "FortAthenaNpcGalileoComponent:OnPatrollingStop": "Called when the NPC exit from patrolling mode",
    "FortPlayerStartupController:OnPlayerStartupControllerRegistered": "Called when the PlayerStartupController has successfully registered with the FortGameModeZone authority.",
    "FortPlayerStartupController:OnPlayerStartupControllerCreated": "Called when the PlayerStartupController is constructed.",
    "FortPlayerStartupController:OnAllInCountdownInitiated": "Called when the PlayerStartupController is told by the FortGameModeZone that all participating Players have begun play and the ContainmentTimer is dropped to the AllInCountdownTime.",
    "FortPlayerStartupController:OnResetContainmentTimer": "Called when the PlayerStartupController's ContainmentTimer is reset due to player count dropping back to 0.",
    "FortPlayerStartupController:OnPlayerStartupControllerDestroyed": "Called when the PlayerStartupController's ContainmentTimer reaches 0.0.",
    "FortPlayerStateZone:OnAccumulatedItemsChanged": "Called when the accumulated items change",
    "PartyDisplayManager:OnPrefabForCurrentlyDisplayedItemChanged": "Called when the active prefab has changed.",
    "BuildingActor:OnInteract": "Called when the actor has been interacted with",
    "FortHoagieVehicle:OnAltimeterTraceUpdated": "Called when the altimeter trace is updated",
    "FortSimpleWidgetAnimations:OnAnimationsFinished": "Called when the animations have all finish playing",
    "FortHoagieVehicle:OnBoostStateChanged": "Called when the boost state change",
    "AthenaCapturePoint:OnCapturePointStateChanged": "Called when the capture point state changes",
    "FortSurfaceTrackingComponent:OnSurfaceTypeChanged": "Called when the component detects a change in surface type",
    "FortEventResponderComponent:OnMeshNetEvent": "Called when the component has been activated by a proper Mesh Network Event based on the MeshEventNames, and playspace info properly handled\n       - FGameplayTag EventTag - The gameplay tag used for this mesh event activation\n       - bool bPersistentOnOff - High level bool that is true for all \" ON PersistentEvent Types - JIP, Start, Change\" and false for the \"off EventType PersistentEventEnd\"\n       - EEventResponderEventType EventType - Enum for the specific mesh event type that is triggered, switch on this for specific handling of JIP, Update, Burst - use bPersistentOnOff for simple on/off stately behavior\n       - FString EventParameters - A string passed by the caller and handled as desired by the actor, calls have the format of \"params=XYZ\" where the string we will receive here is \"XYZ\"",
    "FortPlayerStateZone:OnCurrentPawnChanged": "Called when the current pawn is changed.",
    "LevelInstanceGameplayVolume:OnDisabledStateChanged": "Called when the disabled state changes",
    "FortAthenaMutator_Uranium:OnOvertimeChanged": "Called when the game enters/exits overtime",
    "FortAthenaMutator_Cobalt:OnTeleportComplete": "Called when the group teleport completes.",
    "FortAthenaMutator_Uranium:OnTeleportOutComplete": "Called when the group teleport completes.",
    "FortAIPawn:OnInventoryInitialized": "Called when the inventory is initialized on the server",
    "FortAIPawn:OnInventoryUpdated": "Called when the inventory is updated",
    "FortAthenaMutator_GG:OnLocalPlayerAwardedWeapon": "Called when the locally viewed player gets a new weapon.",
    "FortGameStateAthena:RepositionGameModeMessage": "Called when the messaging window needs to move, to show something that is under it",
    "FortControllerComponent_GameplayCinematic:BP_OnStartGameplayOutro": "Called when the outro is ready to start",
    "FortAthenaMutator_Cobalt:OnRoundAdvanced": "Called when the round advances. Client only",
    "FortAthenaMutator_Cobalt:OnRoundCompleteUIFinished": "Called when the round complete UI is finished displaying",
    "FortAthenaMutator_Cobalt:OnRoundComplete": "Called when the round completes.",
    "FortAthenaMutator_Uranium:OnRoundDataUpdated": "Called when the round data changes (at the start of a new round)",
    "VoteListenerComponent:OnVoteSessionVotingEvent": "Called when the setup phase of the session is complete and the first vote is incoming. (triggered by the first VoteSetup of this session)",
    "AthenaCapturePoint:OnTeamOwningPointChanges": "Called when the team owning the point changes",
    "FortPlayerController:OnViewTargetChanged": "Called when the view target of the player controller changes.\n     Called on both server and client.",
    "FortPlayerController:OnOpenVoteDialog": "Called when the vote dialog is requested",
    "FortGameStateAthena:OnWinConditionMetCN": "Called when the win condition for a Chinese win condition is met (for special last man standing rules)",
    "FortTrackMovementComponent:OnOutOfTrack": "Called when there is no more track to follow. A common response is to call FlipDirection.",
    "FortMissionStormSafeZone:OnSafeZoneInStormStateChanged": "Called when this safe zone is within the radius of the storm shield (is in the shield) or is not (is in the storm)",
    "FortAthenaMutator_Uranium:OnShowRoundIntro": "Called when we want to show the round intro",
    "FortProjectileMoveComp_Chase:OnChaseTargetReached": "Called when within target distance of chase target.",
    "FortTrackMovementComponent:OnLostTrack": "Called when you are no longer on track. This often happens because the track is destroyed under you.",
    "FortAthenaMutator_SpecialEvent:OnPawnLoaded": "Called whenever a new pawn is loaded",
    "FortAthenaMutator_Pow:TimeRemainingUpdated": "Called with the amount of time in seconds before respawning turns off.",
    "EFortItemType.AthenaCallingCard": "Calling card displayed when you win/lose a match (theoretical)",
    "POIRoundInfo:CameraActor": "Camera Actor used during the Round Intro when this POI is next in line to be played)",
    "FortExhibitActor:CameraFOV": "Camera FOV to use for this actor",
    "FortGameplayCueCameraLensEffectInfo:Falloff": "Camera Lens Effect falloff - if either radius > 0, lens effect will trigger for characters other than the target of the GC.\nLens effect intensity is determined by distance to GC locations (DISABLED FOR NOW, anything inside of either radius gets full effect!):\n   if distance < InnerRadius, full effect\n   if distance > OuterRadius, no effect\n   if distance between the two, linear falloff",
    "FortGameplayCueCameraLensEffectInfo:CameraLensEffect": "Camera Lens Effect to apply",
    "FortGameplayCueNotify_Loop:LoopingCameraLensEffect": "Camera Lens Effect to be played for the entire duration of the gameplay cue. This should be looping! Falloff/AOE parameters are not enabled on this camera lens effect.",
    "FortBurstEffectData:BurstCameraLensEffect": "Camera Lens Effect to be played on GC execution. Should never be looping effects!",
    "FortScoutDroneControllingComponent:FirstPersonCameraModeOverride": "Camera Mode Overrides used to test First and Third Person perspective.",
    "FortPlayerController:CameraPrototypeName": "Camera Prototype currently in used",
    "FortGameplayCueNotify_Loop:LoopingCameraShake": "Camera Shake to be played for the entire duration of the gameplay cue. This should be looping!",
    "FortBurstEffectData:BurstCameraShake": "Camera Shake to be played on GC execution. Should never be looping effects!",
    "FortStormShieldCameraActor": "Camera actor that is made to be attached to a storm shield (or any other actor/component that moves around the world without a specific rotation.)",
    "FortMotorcycleVehicle:PassengerCameraModeClass": "Camera mode class for passenger",
    "FortMotorcycleVehicle:PassengerCameraModeClassADS": "Camera mode class for passenger ADSing",
    "FortHeldObjectComponent:CameraModeClass": "Camera mode class we could use when holding this object",
    "FortMotorcycleVehicle:InventoryCameraModeClass": "Camera mode class when in inventory mode",
    "FortMotorcycleVehicle:InventoryCameraModeClassADS": "Camera mode class when in inventory mode ADSing",
    "FortCustomCameraController:CustomCameraModeClass": "Camera mode to use for the custom camera mode",
    "FortAthenaMutator_RespawnAndSpectateSelect:CameraModeOverrideForNonPlayers": "Camera mode to use when the player is spectating a non-player respawn target",
    "FortExhibitActor:CameraOffset": "Camera offset relative to this actor.",
    "FortGameplayCueCameraShakeInfo:Falloff": "Camera shake falloff - if either radius > 0, shake will trigger for characters other than the target of the GC.\nShake intensity is determined by distance to GC locations:\n   if distance < InnerRadius, full effect\n   if distance > OuterRadius, no effect\n   if distance between the two, linear falloff",
    "FortGameplayCueCameraShakeInfo:Scale": "Camera shake scale",
    "FortGameplayCueCameraShakeInfo:Shake": "Camera shake to play",
    "FortWeapon:ImpactCameraShake": "Camera shake to play for weapon impacts",
    "FortPlayerPawnAthena:DamageCameraShakeClass": "Camera shake to play when we take damage.",
    "ESpectatorCameraType.Gameplay": "Camera used by main game",
    "FortPawnComponent_NightNight:CameraModeOverrideClass": "CameraMode class to use when OverrideCameraMode() is called by AFortPlayerCameraBase::DetermineBestCameraClass()",
    "CampsiteAccountData:camp_spawn_locations": "Camp locations. Recorded to mcp as FJsonNode, so properties can be freely changed without having to also update java (but do consider any potential versioning issues)",
    "FortMinigameStatQuery:bAnyMatch": "Can any team or player satify the query (true) or must all teams or players match (false)?",
    "FortMeatballVehicle:CacheAudioWakeTurn": "Can be NULL on Mobile platforms",
    "GasEventHistoryComponent": "Can be added to an ability system component or an object with an ability system component to provide the GAS event history\n\nYour ability system component still needs to write events to the event history itself for it to show anything. See FGasEventHistory for information.\n\nYou can alternatively ditch this component entirely, by implementing IGasEventHistoryProvider directly into your AbilitySystemComponent",
    "CreativePowerBarComponent": "Can be added to the player controller in creative to have a power bar calculation that can be accessed from anywhere.\nIf the Creative.PowerBar.Show tag is added to the player, a power bar HUD will be displayed that shows the current power\nof this component.",
    "ThrowingToyTrackerComponent": "Can be added to the player controller in creative to track the throwing toy that was thrown by the player",
    "GasDebuggerCommandComponent": "Can be added to the player controller, player state, or player pawn to enable the GAS debugger console command.\n\nThis is a simple networked implementation of IMTDebugCommands, potentially the easiest way to get it running.\n\nYou can alternatively ditch this component entirely, by implementing IMTDebugCommands directly into your player controller, player state or player pawn, or one of their components",
    "FortWeaponRangedMountedCannon:bCanFireNormalProjectile": "Can be changed at runtime to block/allow normal fire based on e.g. playlist",
    "GasDebuggerMenu:NextSection": "Can be manually overridden to force the user to another section",
    "NPCGiftItemInventoryRow:OverrideNumDrops": "Can be set to override the number of drops, or set to -1 if not desired",
    "EObjectTypeUsability.Allowed": "Can be used",
    "FortAthenaHandleSoftDisableStateTreeTaskInstanceData:OutState": "Can be used by other states to change the behaviour of this task.",
    "PlayspaceControllerComponent_DeviceTracking:BasicDeviceTrackingInfosPage": "Can be used on Clients to view Basic Tracking Info for Devices in an Overall Device Viewer UI Displaying All Devices",
    "FortAthenaToggleAllowInteractStateTreeTaskTreeTask": "Can be used to add or remove an actor from the list of allowed actors for interaction on an interactable actor (currently supports only the BuildingActor type).",
    "GameplayTagActorHasMatchingGameplayContainerTagCondition": "Can be used to check if the provided Actor (which must implement 'IGameplayTagAssetInterface') has any or all of the provided TagContainerToCheck gameplay tags.",
    "GameplayTagActorHasMatchingGameplayTagCondition": "Can be used to check if the provided Actor (which must implement 'IGameplayTagAssetInterface') has the provided TagToCheck gameplay tag.",
    "OverriddenSupportedAgentsByReleaseVersion": "Can be used to configure specific Supported Agents Mask by the Fortnite Release Version.",
    "FortAthenaPatrolPathPointProvider:SpawnLimiter": "Can be used to control how many actors are spawned through this point provider. Overrides the Max Concurrent Usage of the patrol path.",
    "FortAthenaPointAroundPlayerProvider:SpawnLimiter": "Can be used to control how many actors are spawned through this point provider. Overrides the Max Concurrent Usage of the patrol path.",
    "FortAthenaLivingWorldPointProvidersEnabler:OnCompletedEvaluationDelegate": "Can be used to get notified when the evaluation has been completed.",
    "FortAthenaMutator_TeamPlacement": "Can be used to get the sorted score of all teams. Used by TeamPlacementWidget.\nTo modify what determines placement, the UpdateTeams and FTeamPlacementData can be overridden to change what TeamsInfo holds.\nBy default, TeamsInfo will be determined using GameState->GetAllTeamInfo() and updates on AFortGameModeAthena::OnTeamScoreUpdated (and when players are removed from the game)\nMake sure AFortGameModeAthena::CheckWinConditionScoringBased is being called if the default score tracking is being used.\nIf a mutator is controlling the score, make sure UpdateTeams gets called when a team's score changes.",
    "FortAthenaLivingWorldEvent:MaxActorDensityOverride": "Can be used to lower the max actor density where an event can be spawned. It will be clamped to the global MaxActorDensity defined in the LivingWorldConfig.",
    "FortAIPawn:UsedCustomization": "Can either be equal to CustomizationsToLoad, or a different value if we are using a fallback.",
    "FactionData:bMembersCanResetSpecificRelation": "Can member from this faction reset their specific relations based on conditions (only valid when specific relations are applied to member and not the entire faction)",
    "FortFactionInfo:bMembersCanResetSpecificRelation": "Can member from this faction reset their specific relations based on conditions (only valid when specific relations are applied to member and not the entire faction)",
    "ECreateAccountResult.Console_DuplicateAuthAssociation": "Can not use console account to associate auth due to already being associated with a different Epic account",
    "ELoginResult.Console_DuplicateAuthAssociation": "Can not use console account to associate auth due to already being associated with a different Epic account",
    "ELoginResult.Console_MissingAuthAssociation": "Can not use console account to login due to missing auth",
    "LoadoutVariantDef:bRequireItemToBeCurrent": "Can really only apply to emote montage variants as they're dependent on the pawn anyway!\nAlso only relevant for pickaxes!",
    "FortCosmeticLockerSlotInformation:bCanBeBlank": "Can slots of this item type be left blank?",
    "FortGameStateAthena:bCanSpawnLoot": "Can spawn loot",
    "FortAIPawn:bCanBeMarked": "Can the AI be marked or not",
    "FortAIPawnStats:bAlertCanHearFriendly": "Can the AI hear friendly actor when alert.",
    "FortAIPawnStats:bDormantCanHearFriendly": "Can the AI hear friendly actor when dormant.",
    "FortAIPawnStats:bAlertCanHearHostile": "Can the AI hear hostile actor when alert.",
    "FortAIPawnStats:bDormantCanHearHostile": "Can the AI hear hostile actor when dormant.",
    "FortAIPawnStats:bAlertCanHearNeutral": "Can the AI hear neutral actor when alert.",
    "FortAIPawnStats:bDormantCanHearNeutral": "Can the AI hear neutral actor when dormant.",
    "MidMatchRiftPoiManagerActor:bCanBeMarked": "Can the actor be marked or not.\n     To set use SetCanBeMarked().",
    "MidmatchRiftPoiSpawnIndicator:bCanBeMarked": "Can the actor be marked or not.\n     To set use SetCanBeMarked().",
    "FortExposedActorReferences:bIsCacheSafe": "Can the data within this instance safely be cached on an Blueprint asset?\nThis should only be set to true as long as there are only direct (eg, no indirect or inherited) references from the class this instance was built from.",
    "FMInWorldKnobActorBase:bKnobEnabled": "Can the knob be interacted with at all?",
    "AthenaCarPlayerSlot:bIsSelectable": "Can the player cycle into this slot via regular seat-switching",
    "BuildingSMActor:bSupportsRepairing": "Can this building be repaired? Something is defined as repairable if a player can build it or if this flag is true",
    "FortDecoHelper:CanPlaceState": "Can this object be placed in this spot, and if not why?",
    "QuestInstanceParticipantConfiguration:bContributes": "Can this participant progress its associated quest instance",
    "FortPawnComponent_Convert:CanBeConverted": "Can this pawn be converted by other pawns",
    "FortPawnComponent_Convert:CanBeConvertedFromDBNO": "Can this pawn be converted by other pawns from DBNO",
    "FortPawn:bAllowBuildingActorTeleport": "Can this pawn be pushed / teleported by Building Actors if the Building Actor is built inside this Pawn?",
    "FortPawnComponent_Convert:CanConvert": "Can this pawn convert other pawns",
    "FortPlayerStateOutpost:bHasPermissionToEditOutpost": "Can this player edit Outpost? (Outpost owner ignores this)",
    "FortPlayerController:bCanSpectateBot": "Can this player spectate bot or not",
    "FMDeviceCablePortComponent:OverrideAllowMultipleConnections": "Can this port be connected to multiple other ports?",
    "FMDeviceCablePortComponent:OverrideAllowSiblingConnections": "Can this port have sibling ports?\nSibling ports are other ports connected to the same port as this.\nIn this example, A and B are sibling ports.\nA ----┐\n      |-C\nB ----┘",
    "DigestedVehicleDriving:bCanTurnInPlace": "Can turn-in-place",
    "VehicleDriving:bCanTurnInPlace": "Can turn-in-place",
    "EBotPOIUsageBitmask.BotJumpOffBus": "Can use this POI to Jump from bus",
    "EBotPOIUsageBitmask.BotNavigation": "Can use this POI to Navigate during the game",
    "GameplayStatMetadataTableRow:bPublish": "Can we display this stat in the frontend yet?",
    "GameplayStatMetadataTableRow:bShowInFrontEnd": "Can we display this stat in the frontend yet?",
    "DecoPlacementState:CanPlaceState": "Can we place at this query? If not why",
    "CatalogOfferDefinition:GiftConfiguration": "Can we purchase this offer as a gift",
    "EFortDecoPlacementQueryResults.BeingModified": "Can't place because someone else is modifying it",
    "EFortDecoPlacementQueryResults.WrongTeam": "Can't place on another team's buildings",
    "EFortDecoPlacementQueryResults.WrongShape": "Can't place on this shape of building actor",
    "EFortDecoPlacementQueryResults.WrongType": "Can't place on this type of building actor",
    "EFortSessionHelperJoinState.CanceledJoin": "Canceled while we are attempting to join the reserved session",
    "EFortCraftFailCause.Unknown": "Cannot craft but not sure why",
    "ELockOnState.COUNT": "Cannot lock on to a target for a while",
    "EFortAthenaAISpawnerDataComponentTriBool.No": "Cant use True/False because it seems to confuse UHT and block compilation",
    "EImGuiCanvasSizeType.Viewport": "Canvas will always have the same width and height as the viewport.",
    "EImGuiCanvasSizeType.Custom": "Canvas will have a custom width and height.",
    "EImGuiCanvasSizeType.Desktop": "Canvas will have the same width and height as the desktop.",
    "FortCharacterMovementMutatorComponent:BuffetBubblesMaxRelativeX": "Cap the X location (backward) relative to the follow actor",
    "FortCharacterMovementMutatorComponent:BuffetBubblesMinRelativeX": "Cap the X location (forward) relative to the follow actor",
    "FortCharacterMovementMutatorComponent:BuffetBubblesMinRelativeY": "Cap the Y location (left) relative to the follow actor",
    "FortCharacterMovementMutatorComponent:BuffetBubblesMaxRelativeY": "Cap the Y location (right) relative to the follow actor",
    "FortCharacterMovementMutatorComponent:BuffetBubblesMinRelativeZ": "Cap the Z location (down) relative to the follow actor",
    "FortCharacterMovementMutatorComponent:BuffetBubblesMaxRelativeZ": "Cap the Z location (up) relative to the follow actor",
    "FortSupplyDropSubPhaseData:SupplyDropCap": "Caps of SupplyDrops that can spawn across all timer intervals (0 = no cap)",
    "FortAISpawnGroupUpgradeData:SpawnGroupCapsCategories": "Caps that can be used to control the number of upgraded groups",
    "FortTankVehicle:BarrelCollision": "Capsule collision component which will be used for detecting players colliding with barrel",
    "FortCurieUpdraftActor:CapsuleComponent": "Capsule component used for detecting entities entering and exiting the updraft",
    "RiderComponent:RidingCapsuleHalfHeight": "Capsule half height when we ride",
    "RiderComponent:RidingCapsuleRadius": "Capsule radius when we ride",
    "DiscoCaptureIconData:CapturePoint": "Capture point this icon is drawing",
    "DiscoCaptureUIData:CapturePoint": "Capture point this is drawing",
    "DiscoCaptureUIData:CurrPawn": "Capture point this is drawing",
    "EFortAIUtility.MAX": "CaptureCarry UMETA(DisplayName = \"Capture Carrier\"),",
    "HoagieDeathEffectInfo": "Capturing the death info so we can send it to the client BP to play effects.",
    "FortCreativeItemListCategoryData:CardSize": "Card size for the items in this category",
    "FortAnimWorldStriderComponent:LocomotionCardinalDirection": "Cardinal direction of movement",
    "FortVFXMarshaller": "Cascade <-> Niagara interoperability helper class.\nProvides a designer-friendly wrapper around UFortNiagaraGameplayLibrary\nand adds functionality to make the underlying choice (new or old) more invisible to scripting.\n\nShould only load assets for components which'll be instantiated - support for Many-To-One\nreplacements where cascade particles are rolled into a single Niagara system based on tags\nand the fact that assets are only loaded once determined to spawn should keep it lighter.",
    "FortGameMode:FortGameSession": "Cast version of GameSession",
    "FortGameModeEmptyDedicated:FortGameSessionDedicated": "Cast version of GameSession",
    "FortHealthBarComponent:BuildingActorOwner": "Cast version of the parent Building Actor",
    "FortNotificationPurchaseCatalogEntry": "Catalog Purchase notifications",
    "EFortQuestObjectiveStatEvent.Custom": "Catch-all type for less common objectives, e.g. find an NPC's dog. Target is chosen by caller.",
    "FortEmporiumFilterCategory:ID": "Category ID",
    "FortMissionAlertRuntimeData:MissionAlertCategoryName": "Category Row Name of mission alerts this data applies to",
    "FortLootPackageData:LootPackageCategory": "Category assigned to this loot package. My be used to distinguish quality/rarity/etc.",
    "LootPackageRow:LootPackageCategory": "Category assigned to this loot package. My be used to distinguish quality/rarity/etc.",
    "ItemCategoryMappingData:CategoryType": "Category enum type",
    "ItemCategory:CategoryBrush": "Category icon",
    "FortProjectileBase:ProjectileThrownStatCategoryNames": "Category names to use when updating the projectile thrown stat for this projectile",
    "CosmeticMetaTagCondition:ItemCategory": "Category of the item to search for meta tags",
    "PlaylistAccess:CategoryIndex": "Category or grouping of playlists for display (the row index for the current UI) [0, 1, etc.].",
    "PlaylistFrontEndData:CategoryIndex": "Category or grouping of playlists for display (the row index for the current UI) [0, 1, etc.].",
    "HomebaseBannerColorData:CategoryRowName": "Category row name to associate with the color",
    "HomebaseBannerIconData:CategoryRowName": "Category row name to associate with the icon",
    "FortLevelSpawnActor:SpecialActorCategoryTag": "Category tag of this actor for the special actor system",
    "FortAthenaMutator_Wax:LeaderSpecialActorCategoryTag": "Category tag used for leaders in the special actor system",
    "UserOptionCategoryTagPreset:CategoryTags": "Category tags to grant when an option is assigned to this subcategory.",
    "CatalogOffer:Categories": "Category tags used for filtering on marketplace and price engine. E.x. assets, assets/environments, projects/completeprojects",
    "FortReplicatedStatMapping:StatCategory": "Category the stat resolves to",
    "FortCreativeItemListCategoryData:Category": "Category to sort the item into tabs",
    "LootTierDataRow:GlobalNamedWeightCategory": "Category to use for looking up game-wide global named weights. If a game utilizes these categories, matching named weights will be injected into backend rolls for the tier group",
    "EncounterManagerComponent:PostEncounterLWMCategory": "Category to use for mobs after the encounter shuts down *",
    "FortMinigameSettingsBuilding:bKeepPlayerBuiltStructuresBetweenRounds": "Causes player built structures to be kept between rounds.",
    "VehicleModBuildingGameplayActorAttachmentData:bOverrideScale": "Causes scale vector to be applied to the BGA",
    "BuildingActorEditorSettings:bRotateBuildingActorsAroundCell": "Causes the pivot for BuildingActors to be the center of their grid cell instead of actor location",
    "FortPlayerController:bReleaseBuildingContextOnPlace": "Causes us to release the forced BuildingContextInfo when we've successfully placed a new building. We may still force it again later.",
    "FortMinigameSettingsBuilding:bShowIslandCodeWatermark": "Causes your name and published island code to appear in place of the compass.",
    "FortAthenaLeashComponent:LeashCenter": "Center Location of the leash",
    "BagelObjectiveAreaInstanceData:Location": "Center location of the area",
    "MashObjectiveAreaInstanceData:Location": "Center location of the area",
    "EFabricCloneTransformBehavior.SteppedExponential": "Center the pivot location for rotational transformations across clones.",
    "EHUDMessagePlacement.CenterRight": "Center vertically, right horizontally",
    "EUIExtensionSlot.Reticle": "Centered around the reticle",
    "ReplicatedMontageMap": "Central shared map on GameState used for replicating montages->index mapping for use in FastShared replication (which cannot replicate UObject* directly)",
    "PurchaseFailureLogSubmitOptions:LogSubmitChance": "Chance between 0.0 and 1.0 to submit logs, if logs are enabled",
    "VoiceChatLogUploadRule:LogSubmitChance": "Chance between 0.00 and 1.00 to submit logs",
    "KairosSubmitLogOptions:LogSubmitChance": "Chance between 0.00 and 1.00 to submit logs, if logs are enabled",
    "PartyFailureLogSubmitReason:LogSubmitChance": "Chance between 0.00 and 1.00 to submit logs, if logs are enabled",
    "FortAthenaLivingWorldEvent:RandomActivationChance": "Chance of the event to be activated at the beginning of the match. Deactivated Event wont spawn for the duration of the match. Between 0.f and 100.f.",
    "RandomUpgradeData:ChanceToApplyPerContainer": "Chance of this upgrade applying.",
    "AbandonedTentSpawnPointComponent:SpawnChance": "Chance that a tent will be spawned at the location of this spawn point.",
    "LocationPOIList:ChanceToApply": "Chance this list has to apply at any given point where it is used.",
    "TaggedPOIList:ChanceToApply": "Chance this list has to apply at any given point where it is used.",
    "WeaponAccuracy:ShouldAimAtTargetsFeet": "Chance to aim at the feet of the target instead of the center of body. Curve is evaluated by skill level, not based on distance. Range is 0-1",
    "FortRangedWeaponStats:VertRecoilDownChance": "Chance to apply vertical recoil downward, instead of upward",
    "FortGameplayCueSpawnCondition:ChanceToPlay": "Chance to play the effect. 1.0 = always play. 0.0 = never played",
    "RandomDayphaseFX:ChanceToSpawnFX": "Chance to spawn this FX",
    "ESocialTagsChangeReason.Service": "Change comes from MCP Tags service",
    "ESocialTagsChangeReason.Editor": "Change comes from the Social Tags editor",
    "QuickHealPrioritySpecifier:Priority": "Change from default value (0) to insert tags before or after tags from other plugins.",
    "FortGameUserSettings:LatencyTweak2": "Change to Use Nvidia Frame Rate Limiter once the NVAPI update ships\n0 = off, 1 = on, 2 = on w/ boost",
    "FortGameUserSettings:bLatencyTweak1": "Change to Use Nvidia Latency Markers once the NVAPI update ships",
    "FortGameUserSettings:bLatencyFlash": "Change to UseNvidiaTriggerFlash once the NVAPI update ships",
    "FortAthenaFocusAtStateTreeTask": "Changes an Actor's focus actor or focus point/location based on the provided parameters.\n\nNote: this task won't finish if bSetBackOnExit is set to true, in which case it will require a transition to be completed.",
    "FortControllerComponent_SmartBuild:TurboFirstInterval": "Changes the time before the first turbo build tries to place after the users presses the trigger when smart build is active.",
    "FortPlayerController:TurboBuildFirstInterval": "Changes the time before the first turbo build tries to place after the users presses the trigger.",
    "FortPlayerController:TurboDeleteFirstInterval": "Changes the time before the first turbo delete tries to place after the users presses the trigger.",
    "FortPlayerController:TurboPlaceFirstInterval": "Changes the time before the first turbo placement tries to place after the users presses the trigger in creative mode with the Move Tool.",
    "DaySequenceModifierComponent:BlendMode": "Changes the way this modifier blends in and out",
    "DaySequenceModifierComponent:DayNightCycle": "Changes the way this modifier controls the day/night cycle time",
    "BuildingTrap:bShouldAffectAllPawnsInMinigames": "Changes trap's team at game start to 101 so that it will affect all players and monsters",
    "FortVolume:MaxActiveAI": "Changing this value will change player experience and performance. This value corresponds to the amount of alive AI that can be in a volume at once. Currently 21 (MaxAI (350) / NumActiveIslands (16))",
    "FortQuestPoolTableRow:PrerequisiteEventChannel": "Channel of calendar event used for activation or scheduling",
    "MoggChannel:Pan": "Channel pan",
    "AudioWorldizationSettings:TraceChannel": "Channel representing the object - eg pawn, vehicle",
    "MoggChannel:Vol": "Channel volume, in decibels relative to full scale (dBFS)",
    "FortMusicManager:Voices": "Channels for music to play on",
    "FortWeapon:FireAudioChannels": "Channels for the gunfire to play on",
    "EFortCustomCharmType": "Character Charm Type enum for character customization purposes.",
    "FortAthenaMutator_CosmeticLoadoutOverride:CosmeticOverrides": "Character Customization settings",
    "FortAthenaMutator_CustomCharacterParts:PartOverrideCustomizations": "Character Customization settings",
    "FortAthenaMutator_OperationsCustomCharacterParts:FactionCustomizations_Alter": "Character Customization settings for the Alter Faction",
    "FortAthenaMutator_OperationsCustomCharacterParts:FactionCustomizations_Ego": "Character Customization settings for the Ego Faction",
    "EFortCustomPartType": "Character Part Type enum for character customization purposes.",
    "FortPlayerState:CharacterColorSwatches": "Character color swatches",
    "FortPlayerState:LocalCharacterColorSwatches": "Character color swatches",
    "FortPlayerMannequin:ColorSwatches": "Character color swatches, i.e. skin and hair.  NOTE: These are override values.  If they are null, the mannequin will use the\ndefault skin and hair color swatches (if any are specified) from its head.",
    "FortBaseWeaponStats:DmgMaxRange": "Character damage at ineffective max range",
    "FortBaseWeaponStats:ImpactDmgMaxRange": "Character damage at ineffective max range",
    "FortBaseWeaponStats:DmgLong": "Character damage at long range",
    "FortBaseWeaponStats:DmgMid": "Character damage at mid range",
    "FortBaseWeaponStats:DmgPB": "Character damage at point-blank range",
    "EFortPlayspaceUserAcceptanceType.VolumeBased": "Character entering a GameplayVolume",
    "FortBaseWeaponStats:ImpactDmgLong": "Character impact damage at long range",
    "FortBaseWeaponStats:ImpactDmgMid": "Character impact damage at mid range",
    "FortBaseWeaponStats:ImpactDmgPB": "Character impact damage at point-blank range",
    "FortCharacterPartMontageInfo:CharacterPart": "Character part to play the montage on",
    "HeroSpecializationDesignerData:CharacterPartsTierOne": "Character parts for tier one",
    "HeroSpecializationDesignerData:CharacterPartsTierThree": "Character parts for tier three",
    "HeroSpecializationDesignerData:CharacterPartsTierTwo": "Character parts for tier two",
    "TeamBucketPartOverrideData:PartsToAddIfSpecialTags": "Character parts used if the player's current cosmetic loadout is marked with any SpecialTags",
    "EFortItemType.AthenaCharacter": "Character skin",
    "AthenaCarPlayerSlot:bUseVehicleIsOnGround": "Characters in this seat will use vehicle OnGround to drive their anim OnGround flag.",
    "FortGameplayEffectContainer:ChargeMagnitudeOverrideValue": "Charge Magnitude you want to use as the override (in case damage execution is called) @note Currently only supported by the GameplayDeliverActor",
    "FortGameplayEffectContainerSpec:ChargeMagnitudeOverrideValue": "Charge Magnitude you want to use as the override (incase damage execution is called) @note Currently only supported by the GameplayDeliverActor",
    "EFortWeaponChargeStateForFireFX.Full": "Charging but not full yet.",
    "EIndicatorStateImage.FIRST_CHAT_MESSAGE": "Chat Icons",
    "PluginCheatMenuEntry": "Cheat menu entry data, UFortGameCheatsRegistry will look for this data to setup the cheat menu",
    "CollisionReactionConfiguration:AheadCollisionLaunchVelocityMultiplier": "Check AheadCollisionLaunchVelocityMultiplier.",
    "CollisionReactionConfiguration:AboveSweepThresholdForLaunchVelocityMultiplier": "Check LaunchVelocityMultiplierWhenAboveSweep. This value will be removed from the sweep box's top Z location, needed otherwise that would never be true since the collision would never happen.",
    "CollisionReactionConfiguration:LaunchVelocityMultiplierAtMaximumMovementVelocity": "Check MinimumMovementVelocityForLaunchVelocityMultiplier.",
    "CollisionReactionConfiguration:LaunchVelocityMultiplierAtMinimumMovementVelocity": "Check MinimumMovementVelocityForLaunchVelocityMultiplier.",
    "CollisionReactionConfiguration:MaximumMovementVelocityForLaunchVelocityMultiplier": "Check MinimumMovementVelocityForLaunchVelocityMultiplier.",
    "FortObjectiveFilter_SetMarker:MarkedTarget": "Check against tags that will be on the marked target if it is valid",
    "FortObjectiveFilter_SetMarker:MarkerTags": "Check against the single tag a marker has if it is valid",
    "BuildingContainer:bRegenerateLoot": "Check this box in order to make loot regenerate (and the container become \"unsearched\" after a delay.",
    "FortTimeOfDayManager:bUsePerDayPhaseSkylightCubemaps": "Check this to allow specifying cubemaps for the skylight in every day phase.  Uncheck it to clear them and use the sky light component's cubemap throughout instead.",
    "FortEntitlementNameAndTag:ComponentTag": "Checked against UFortEntitlementComponent::ComponentTags to see if the entitlement should be included/queired in that instance.",
    "ECheckoutType.Receiptless": "Checkout operation is performed with no additional receipt request, doesn't return receipts.",
    "ECheckoutType.ReceiptRequested": "Checkout operation requests and / or returns the receipt information",
    "FortMinigamePlayerStartComponent:bIsCheckpoint": "Checkpoints require a checkpoint value to be considered as a player start location",
    "FortDynamicBuilder:bDestroyMatchingPiece": "Checks for a piece in the same building grid spot (matches grid cell as well as floor, wall side, etc.)",
    "EFortCurveRule.CheckIfMonotonicallyDecreasing": "Checks if each value on the curve is <= the previous value",
    "EFortCurveRule.CheckIfMonotonicallyIncreasing": "Checks if each value on the curve is >= the previous value",
    "EFortNumericRule.CheckIfNonZero": "Checks if the Number != 0",
    "EFortNumericRule.CheckIfNegative": "Checks if the Number < 0",
    "EFortNumericRule.CheckIfNonPositive": "Checks if the Number <= 0",
    "EFortNumericRule.CheckIfZero": "Checks if the Number == 0",
    "EFortNumericRule.CheckIfPositive": "Checks if the Number > 0",
    "EFortNumericRule.CheckIfNonNegative": "Checks if the Number >= 0",
    "EFortNumericComparisonRule.CheckIfEqual": "Checks if the each number is equal to the next",
    "EFortNumericComparisonRule.CheckIfGreaterOrEqual": "Checks if the each number is greater or equal to the next",
    "EFortNumericComparisonRule.CheckIfGreater": "Checks if the each number is greater than the next",
    "EFortNumericComparisonRule.CheckIfLesserOrEqual": "Checks if the each number is lesser or equal to the next",
    "EFortNumericComparisonRule.CheckIfLesser": "Checks if the each number is lesser than the next",
    "EFortNumericComparisonRule.CheckIfNotEqual": "Checks if the each number is not equal to the next",
    "FortTargetFilter:bUseTrapsOwningPawnAsInstigator": "Checks if the source actor is a trap an uses its owning pawn as the instigator (if it exists)",
    "EFortCosmeticHabaneroProgressionType.CurrentProgress": "Checks the current progress for each track when determining overall progress",
    "EFortCosmeticHabaneroProgressionType.HighestProgress": "Checks the highest progress achieved for each track when determining overall progress",
    "EFortAthenaTutorialSubstep.ScreenLootChest": "Chest",
    "SkyfireTeleportSquadPoint": "Child class of FortSquadStart that is used as a teleport point for when players are teleported into the mothership for Skyfire.\n(Skyfire is the experience that occurs when players are beamed up into the Mothership in s17)",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:GE_OutsideSafeZoneCN": "China specific Gameplay effect to apply when the player is outer the safe zone",
    "GameFeatureSmartObjectActivityInfo:TargetPawn": "Choose a pawn to add this activity",
    "EGateType.Verb": "Choose a verb and setup a filter that will open or close the gate when the filter passes",
    "VariantSwapMontageData:PartRequirements": "Choose this montage section if any character parts requirements here are met",
    "VariantSwapMontageData:SwapRequirements": "Choose this montage section if any swaps requirements here are met",
    "FortGameplayAbilityMontageInfo:MontageSectionToPlay": "Choose whether to use the specified OverrideSection (below), a random section, or a random section that has been tested for hits.",
    "EFortGameplayAbilityMontageSectionToPlay.TestedRandomSection": "Chooses a random section but tests only the minimum sections required to check different distances for ability to hit.",
    "ContextualMessageConfig:DefaultMessage": "Chosen if no conditional options satisfied",
    "FortPawnComponent_Phasing:TargetedPhaseableComponent": "Chrome component on building actor currently being targeted, nullptr if none",
    "LacklusterData:BuildingChromeApplied": "Chrome has already been applied to these buildings",
    "LacklusterData:ChromeMaterialOverrides": "Chrome material with which to override the original material by actor and chrome types",
    "RootMotionSource_ChromeForce": "ChromeForce is just MoveToForce with a couple of extra features:",
    "ChromeSoundComponentBase": "ChromeSoundComponentBase is the native base class for the blueprint ChromeSoundComponent, which handles chrome audio.",
    "LacklusterData:BuildingSMActorNonPropChromedSound": "Chromed sound for BuildingSMActors that are not props",
    "LacklusterData:BuildingSMActorPropChromedSound": "Chromed sound for BuildingSMActors that are props",
    "DynamicXpCircuitBreaker": "Circuit Breaker for Dynamic XP will limit amount of XP a player gets if we detect an excess of XP being granted.",
    "EPersistenceFrameworkExecutionOption.RemoveAllActionsOnFinish": "Claers all the actions in a action queue, once it finises executing. Without this, a action queue can be run multiple times",
    "EFortAthenaTutorialSubstep.ScreenReachClamber": "Clamber",
    "FortQuartzGunfireComponent:VariationCount": "Clamped to 1 to avoid division by 0",
    "FortDaySequenceActor:bUseSunDivergence": "Clamps the directional light angle to 'Sun Light Horizon Clamp' while continuing to animate the sun in the sky based on the 'Sun Angle' property.  This is to prevent long shadows causing performance issues.",
    "ProjectileMovementDrunkConfig:TurnAngleClamp": "Clamps the minimum turn angle to this percent of the max.",
    "DigestedBotModScoreInfo": "Class containing digested info for a skill level for scoring weapon mods used when prioritizing weapons when looting",
    "BotWeaponModScoreInfo": "Class containing info for scoring weapon mods used when prioritizing weapons when looting",
    "FortLightweightProjectileConfig": "Class containing the setup data for lightweight projectiles, to be used as the projectile template.",
    "FortPlayerController:ContextualConversionClass": "Class contextually being used for a building conversion",
    "FortLinkedAnimGraphComponent:MovementModeInterface": "Class data for various linked anim layer interfaces",
    "FortAttachableProjectileDeprecated": "Class extending projectile base to support projectiles that can attach to physics mesh/bones or another actor\n(right now fort pawns). This is deprecated in favor of the UFortAttachableProjectileComponent for new code.",
    "UserOptionDefinitionClassReferenceMetaData:ClassType": "Class filtering rules and metadata parsed from the underlying property.",
    "FortCosmeticReactivePreview": "Class for driving reactive behavior outside of a game context.\n\nIn most cases, simply proving entry points for ReactivePreviewSupportInterface is sufficient.\nWhen a reactive needs special attention, we can derive from this class to provide the required logic.",
    "FortCosmeticReactivePreview_InterfaceWrapper": "Class for driving reactive behavior outside of a game context.\n\nThis version of the class simply calls into the interface where appropriate.\n\nUse case Scratch (S11 SuperLevel): Implement on the CCPM\nStartPreviewReactiveResponse start a progressive update from 100 - 350.\nPreviewReactiveSteppedUpdate would set the material's CurrentLevel param\nStopPreviewReactiveResponse cancels the timer and sets CurrentLevel back to 0.\n\nUse case Bundles: Implement on the AnimBP\nStartPreviewReactiveResponse would start a stepped update from 0 ~ 4\nPreviewReactiveSteppedUpdate would update based on the input value, likely a map to trigger the damaged other vs took damage reactions...\nStopPreviewReactiveResponse cancels the timer and cleans up the reactive blends",
    "FortDecoPreview_StaticMesh": "Class for generic preview representation of a building Gameplay Actor",
    "FortDecoPreview_GenericBuildingSMActor": "Class for generic preview representation of a building SMActor",
    "FortDecoPreview_MeshHarvester": "Class for generic preview representation of a building actor via harvesting all visible mesh (static & skeletal) components in the source actor",
    "FortAthenaMutator_OverrideValetVehicleParameters": "Class for overriding initial parameters, such as starting fuel, on valet vehicles\nNote: This mutator will not do anything in PIE, it will only work in builds. Valet spawns and initialized vehicles in a completely different way in PIE that is much harder to override.",
    "FortControllerComponent_CreativeMatchmaking:IslandModal": "Class for the Activity Details display which allows players to unlock an island.\nTODO: Rename from island Modal to something better",
    "HeaderDescriptionHUDComponent": "Class for the description HUD component responsible for creating and displaying HUD elements related to portals.",
    "FortAIPawnVariantDefinition:PawnClass": "Class for this variant definition.",
    "GlobalRepGraphActorClassSettings": "Class holds all the Custom Actor Class Settings and Templates Used in UFortReplicationGraph::InitGlobalActorClassSettings",
    "FortAthenaMutator_PartyRiftEmotes": "Class implements additional control for the Party Rift feature.\nParty Rift allows the creation of ad-hoc social parties by means of an emote.\nIf the feature is disabled or attempted in a prohibited zone, we disable the emote which in turn prevents the feature from being activated.",
    "FortAthenaMutator_CreativePartyRiftEmotes": "Class implements creative-specific controls for the Party Rift feature.\nParty Rift allows the creation of ad-hoc social parties by means of an emote.\nIf the feature is disabled or attempted in a prohibited zone, we disable the emote which in turn prevents the feature from being activated.",
    "FortAthenaMutator_CreativePartyRiftIslandSettings": "Class implements creative-specific controls for the Party Rift feature.\nParty Rift allows the creation of ad-hoc social parties by means of an emote.\nThis mutator will be owned by a specific creative volume, either an island or the hub.\nIsland volumes are owned by the player that owns the island.",
    "FortCreativeVkPalette": "Class listing Vk projects with content available for placing in island\nShould eventually be replaced by a more comprehensive Vk palette type",
    "SpawnBuildingActorParameters:SpawnClass": "Class of Actor to spawn",
    "EAbilityHistoryClassType": "Class of GAS event - the type of item that had a thing happen. Currently just 'Ability' and 'Effect'",
    "PFWExtensionToAdd:ClassOfExtension": "Class of Persistence Framework Subsystem Extension",
    "EnvironmentBuildingRestorationRecord:ActorClass": "Class of actor to spawn",
    "XboxDedicatedServerSessionCreationParams": "Class of all parameters required to create an Xbox Live multiplayer session",
    "FortGameSession:ReservationBeaconHostClass": "Class of beacon to be used for managing reservations/setup",
    "FortGameSession:SpectatorBeaconHostClass": "Class of beacon to be used for managing spectators",
    "FortGameMode:MissionManagerClass": "Class of mission manager to spawn",
    "PendingSpawnInfo:PawnClassToSpawn": "Class of pawn to spawn",
    "WeightedAIPerk:PerkClass": "Class of the Perk: can be used by the code/BP to know if the perk is active or not and provide the necessary data to perform the expected behavior",
    "GasEventHistoryItem:Class": "Class of the ability or effect involved",
    "FortAthenaMutator_Skyfire:BlockStormCenterActorClass": "Class of the actor that represents the center of the area we want to block the storm in.",
    "FortDecoHelper:PlacementActorClass": "Class of the actor that would be spawned with a valid placement",
    "FortActorRecord:ActorClass": "Class of the actor, needed for spawning",
    "FortDeployableBaseManager:DeployableBasePlotClass": "Class of the deployable base plot to spawn",
    "CreativeDeviceInstanceInfo:Class": "Class of the device actor (to find information about its Gameplay Event/Function properties)",
    "BuildingFlagSpawn:CarriedObjectClass": "Class of the object to spawn at this point, if any",
    "EncounterMobSpawnInfo:PointProviderVolumeClass": "Class of the point provider volume that will by dynamically spawned at the anchor point for this mob",
    "FortAthenaMutator_Cobalt:StormEyeActorClass": "Class of the storm eye actor. Used to spawn the storm eye at runtime on clients",
    "HeroSpecializationDesignerData:HeroClass": "Class of this hero",
    "MissionVehicleSpawnSet:VehicleClass": "Class of vehicle to spawn",
    "DeployableBasePlot": "Class representing a plot where a deployable base can be loaded in and maintained",
    "FortAbilityCameraOverrideSettings:AbilitySpecifiedCameraClass": "Class set at run-time by executing player abilities; If specified, will be highly prioritized toward being used as best camera class",
    "FortWeaponFxComponent_ChargeAimLocation": "Class that allows us to update a damage start and aim variable as accurately as possible while we are charging a weapon.\nUsed when we have some charging fx tied to aim location that we want to feel responsive (ex. a targeting laser).",
    "Playspace": "Class that contains everything required to run and manage a single game in the PlayspaceFramework",
    "FortMissionManagerRecord": "Class that holds the serialized data of the Mission Manager",
    "TrapItemDefintionDesignerData:BlueprintClass": "Class that is placed in the world. The Actor representing the trap",
    "FortSaveFileBuildingInstructionsHandler": "Class that manages saving/reading building instructions to/from the cloud file",
    "FortPrefabSpawner:PrefabListSourceClass": "Class that we will grab the list of possible prefabs from. Note: If we decide we want to identify Spawn Helpers, we'd have to change this to directly search for the asset that matches the ID(Tag)",
    "FortFallTeleportSpawnerComponent:PlayerPawnReceiverClass": "Class that will receive FortFallTeleportComponentBase",
    "GameplayVolume": "Class that, in its most basic form, represents a basic volume that notifies when players enter and exit it.\nThis class will typically get subclassed and add game specific features, preferably through components.",
    "FortScoutDrone:PawnOverrideComponentClass": "Class to add to the controlling pawn when deployed which is removed when dismissed",
    "QuestEntryVisualData:EntryClass": "Class to allocate for list items of this type",
    "FortGameStateComponent_HeistDisplayCaseItemManager": "Class to handle providing items to heist display cases.",
    "FortBotBuildingContainerBlacklistDataTableRow:BlacklistedActorClass": "Class to identify BuildingContainer",
    "FortEQSPrevisActor": "Class to provide spawners with visualization for EQS placement. To use, make this a base class of your spawner,\nimplement the PrepForPrevis event, and in that event call SetQueryTemplate with your spawner's EQS template.",
    "FortAIComponent_Voice": "Class to provide the voice of an AI",
    "FortEntitlementComponent": "Class to query and store entitlements for a system.",
    "FlowAnalyticsImpressionSectionContent": "Class to send analytics for flows between & inside menus.\n\nIt will automatically add extra context (ie: previous menu & sub-menu) to events\nwhen provided with a new menu or a widget interacted with. Users should focus on\nproviding any new menus pushed on screen or any widget interacted with.",
    "InfiltrationCarryObjectSpawnPoint:IntelClassToSpawn": "Class to spawn for the intel object",
    "FortGameState:FortAmbientAudioControllerClass": "Class to use for Fort Ambient Audio.",
    "BuildingSMActor:EditModeSupportClass": "Class to use for additional edit mode support, if any",
    "FortMissionConfigDataBucket:ConfigDataClass": "Class to use for configuration data",
    "FortMissionInstancedConfigDataBucket:ConfigData": "Class to use for configuration data",
    "FortHeldObjectComponent:PlacementPreviewClass": "Class to use for previewing the placement of this deco",
    "MilkshakeControllerComponent:CameraShakeClass": "Class to use for the camera shake. Code assumes (and will ensure if not) that this CameraShakeClass is single instance (bSingleInstance is true)\n    If this is not the case, the code will need to be adjusted to handle restarting the shake properly.",
    "FortProceduralLayeringWeaponData:ItemChooserDataClass": "Class to use if this item needs specific values for chooser logic",
    "FortGlobalEnvironmentAbilityActor": "Class used as a global actor capable of performing operations which require an ability component. Used to cause all forms of environmental damage (falling, etc.)",
    "FortGlobalAbilityTargetingActor": "Class used as a global actor for performing custom targeting for abilities",
    "FortAIDirector:BaseEncounterClass": "Class used as the base encounter by the AI Director. Settings are overridden at mission generation",
    "FortMinigame:CareerMapWidgetClass": "Class used for career scoreboard map widget",
    "FortAudioAnalysisSettings:DebugWidgetClass": "Class used for debug widgets",
    "FortMinigame:ScoreboardMapWidgetClass": "Class used for scoreboard map widget",
    "DynamicUIDirectorData:DirectorClass": "Class used to create the director.",
    "BattleMapNode": "Class used to handle most of the battle map nodes, we should create inherited classes only when there are a lot of changes (ex. the ground move node).",
    "GameplayStateSettings:StateClass": "Class used to instance a GameplayState",
    "BuildingLayoutRequirement": "Class used to mark what building SMActor a player must build (for a mission or quest objective).  Used to display\n      that information to the player, and also to force other UX, such as disabling placing the wrong type (with messaging)\n      or disabling editing the piece once placed (for requirements that last beyond initial placement).",
    "FortMusicPackPreviewActor": "Class used to represent and preview music packs in the front end",
    "FortPlayerPetRepState": "Class used to share replicated state for pets (this is never subclassed)",
    "FortCostValidatorOverride:Class": "Class we are overriding to ignore",
    "UserOptionAssetTypeMetaData:AssetClass": "Class-type of the property; used for asset filtering.",
    "UserOptionClassTypeMetaData:MetaClass": "Class-type of the property; used for class filtering.",
    "FortWorldSettings:AdditionalSimpleDestructiblePropClasses": "Classes that are picked up by the WorldPartitionPropGroupsBuilder when it's executed",
    "LevelInstanceGameplayVolume:BlacklistedClasses": "Classes that we shouldn't track as part of the level instance",
    "EMatchmakingState.NoMatchesAvailable": "Cleaning after no matches available, but not done matchmaking",
    "ELevelSaveRollback.Reload": "Cleanup any actors/resources that might leak into a new level and then reload the level.\nThis may take multiple frames to execute.",
    "ELevelSaveRollback.Cleanup": "Cleanup any actors/resources that might leak into a new level but do not reload the existing level.\nThis is expected to be complete by the time the function returns.",
    "EStateTransitionPauseRequestHandleClearType.ClearWhenAllHandlesAreRemoved": "Clear the request only after all handles for the request have been cleared",
    "EStateTransitionPauseRequestHandleClearType.ClearRightAway": "Clear the request right away, even if other handles are active (useful if other copies might exist)",
    "HurdleInputConfig:Phase3_ForwardCastDistance": "Clearance distance for the top of the hurdle obstacle",
    "HurdleInputConfigCache:Phase3_ForwardCastDistance": "Clearance distance for the top of the hurdle obstacle",
    "FortAthenaMutator_Skyfire:SkyfireAudioManager": "Client ONLY: The audio manager actor spawned on the client to handle playing audio/sounds for the skyfire game feature.",
    "FortPlayerControllerComponent_RespawnOnDeath:DroneManager": "Client Only, the drone manager being used to show the respawn drone sequence on the client.",
    "SkyfirePlayerPawnComponent:OnPlayerEnteredLootRoom": "Client Only. Delegate called when the player enters the loot room.",
    "FortControllerComponent_AdHocSquads:DelegateSquadInviteInitiationFailed": "Client Only. Delegate that is broadcast when a player attempts to initiate a squad invite, but is prevented for some reason.",
    "FortControllerComponent_AdHocSquads:DelegateOwningPlayerJoinedSquad": "Client Only. Delegate that is broadcast when a player joins a squad.\nPlayerState is the player who's squad the the owning player is joining.",
    "FortControllerComponent_AdHocSquads:DelegateOtherPlayerJoinedSquad": "Client Only. Delegate that is broadcast when a player joins the owning player's ad hoc squad (this will ONLY run if the player is already in an ad hoc squad with 1 or more other players.)\n     PlayerState is the player that has joined the squad.",
    "FortControllerComponent_AdHocSquads:DelegateOtherPlayerLeftSquad": "Client Only. Delegate that is broadcast when a squad member has left the player's ad hoc squad.",
    "FortControllerComponent_AdHocSquads:DelegatePlayerHasNearedSquadInvitingPlayer": "Client Only. Delegate that is broadcast when the local player becomes near a player from another squad who is doing the squad invite emote.",
    "FortControllerComponent_AdHocSquads:DelegatePlayerEndedSquadInvite": "Client Only. Delegate that is broadcast when the local player ends an ad hoc squad invite.",
    "FortControllerComponent_AdHocSquads:DelegatePlayerInitiatedSquadInvite": "Client Only. Delegate that is broadcast when the local player initiates an ad hoc squad invite.",
    "FortControllerComponent_AdHocSquads:DelegatePlayerIsNoLongerNearSquadInvitingPlayer": "Client Only. Delegate that is broadcast when the local player stops being near a player from another squad who is doing the squad invite emote.",
    "FortControllerComponent_AdHocSquads:DelegateFailedToJoinSquad": "Client Only. Delegate that is broadcast when the owning player fails to join an ad hoc squad.",
    "FortControllerComponent_AdHocSquads:DelegateOwningPlayerLeftSquad": "Client Only. Delegate that is broadcast when the owning player leaves an ad hoc squad.",
    "SkyfireControllerComponent:CachedSkyfireMutator": "Client and Server. Cached reference to the skyfire mutator.",
    "FortNavPathRendererComponent:NavPathPoints": "Client array used to fill the VFX and avoid stack memory allocation",
    "FortNavPathRendererComponent:NavPathPointsStatus": "Client array used to fill the VFX and avoid stack memory allocation",
    "EFortBudgetCategory.Audio": "Client audio cost",
    "EFortQuestObjectiveStatEvent.Client": "Client authoritative custom objective. Target is chosen by caller.",
    "ERichPresenceStateChange.Idle": "Client became idle",
    "EFortEventNameType.Client": "Client events, valid on clients",
    "ClientIdRestrictions:ClientId": "Client id that has restrictions",
    "ContentBeaconError:ClientId": "Client id will be valid if this error is associated with a specific client\nthis is useful if the error handler wants to disconnect the client",
    "ERichPresenceStateChange.Active": "Client is active again",
    "PublicDynamicXpStats": "Client object that describes dynamic XP stats for a creative island",
    "FortActorOptionsComponent:OnPropertiesReadyForLocalization": "Client only - Called when the properties override is complete on the client after first loaded",
    "FortControllerComponent_CreativeMatchmaking": "Client only controller component that automatically responds to In game matchmaking calls to display UI that\ncan manage the queued activity, IARC, and readying up.",
    "FortAthenaMutator_AdHocSquads:LocalClientInviteDataArray": "Client only copy of InviteDataArray.Entries. Is used when new InviteDataArray replicates to the client to keep track of the pre-replicated values of the invite data.",
    "BuildingContainer:OnContainerSearchedStateChangedClient": "Client only delegate, fires whenever the container's searched state changes.\n     Note: Building containers can go from a state of unsearched to searched and also from searched to unsearched.",
    "FortPlayersLeftChangedEvent": "Client only event fired when the players left changes on the client",
    "FortAthenaMutator_SpecialEvent:SpecialEventMannequins": "Client only, contains the special event mannequins that are currently in the world.",
    "FortAthenaMutator_SpecialEvent:OnClientInitialLoadingFinished": "Client only, fire delegate when the initial loading is complete.\n     This is when the mutator decides that it is safe to remove the loading screen for the local player.",
    "FortControllerComponent_MiniMapDiscoverable:OnSquadAlliesSharedMiniMapVisibility": "Client only. Broadcast when minimap icons are shared through ShareMiniMapVisibilityWithSquadAllies() and NOT through normal team based sharing\n     (i.e. such as when an ally wanders to the north while you stay still and your ally finds a new minimap icon that you both gain visibility for).",
    "SkyfireControllerComponent:CachedTODOverrideActor": "Client only. Cached Skyfire TOD Override actor",
    "SkyfirePlayerPawnComponent:OnEarnedLootRarityChanged": "Client only. Delegate broadcast when EarnedLootRarity has changed.",
    "SkyfirePlayerPawnComponent:OnExitInitialPrisonTimeChanged": "Client only. Delegate broadcast when ExitInitialPrisonTime has changed.",
    "SkyfirePlayerPawnComponent:OnExitLootRoomTimeChanged": "Client only. Delegate broadcast when ExitLootRoomTime has changed.",
    "SkyfirePlayerPawnComponent:OnTeleportToLootRoomTimeChanged": "Client only. Delegate broadcast when TeleportToLootRoomTime has changed.",
    "SkyfireControllerComponent:OnSquadMemberMothershipStatusChanged": "Client only. Delegate broadcast when a squad member enters or exits the mothership.",
    "SkyfirePlayerPawnComponent:OnTimeUntilTeleportToLootRoomReachedCap": "Client only. Delegate broadcast when this player's time until teleport to loot room was capped due to MaxTimeBeforeLootRoomTeleport.\n(A time orb was picked up, but the full amount could not be granted due to the cap)",
    "SkyfireBackpackComponent:OnTimeToUpdate": "Client only. Delegate broadcast when time to update",
    "FortControllerComponent_AdHocSquads:NearbySquadInvitingPlayers": "Client only. Keeps track of nearby players who are performing relevant squad invites near the owning player.\n     Relevant squad invites are invites that the owning player could potentially accept (i.e. the owning player is on a different, not-full squad.",
    "FortControllerComponent_AdHocSquads:ClosestNearbySquadInvitingPlayerState": "Client only. Reference to the closest nearby inviting player state.",
    "FortControllerComponent_MiniMapDiscoverable:OnClientVisibilitiesMapUpdated": "Client only. Used to broadcast when the FortControllerMiniMapComponentVisibilitiesMap updates.\n     In other words, the client has received the latest visibility information of the various mini map icons (FortMiniMapComponent_Discoverable).",
    "EFortBudgetCategory.Rendering": "Client render cost (draw call )",
    "FortNavPathRendererComponent:CurrentPathColorIndex": "Client replicated facing color index",
    "ERichPresenceStateChange.NotBusy": "Client returned to doing not important things",
    "FortAthenaMutator_Ashton:CachedStoneList": "Client side cached list to mimic StoneList so we know what has replicated",
    "FortControllerComponent_SpyTechPerkSystem:RoundStartCache": "Client side round start data to predict level up and rewards",
    "ERichPresenceStateChange.Busy": "Client started doing something important, do not disturb",
    "FortVehicleAimingWeaponComp:AnimatedMuzzleLocation": "Client's muzzle location set on the server via rpc. We do this if bUseClientMuzzleLocationAuthority == true because the location is animated.",
    "FortAthenaMutator_Wax:PlayerLeadersInOrder": "Client-only, sorted one tick after any change.",
    "SkyfireAudioManager": "Client-side manager for playing audio cues for the Skyfire game feature.",
    "FortAthenaMutator_Ashton:AutoEquipController": "Client-side player controller for determining whether the local player needs to check for auto-equipping their map",
    "AthenaCobaltStormShield:ClientShrinkTimerHandle": "Client-side shadow of the ShrinkTimerHandle",
    "FortTimeOfDayWeatherComponent:LocalWeatherEventIndex": "Client-side weather event index, set when WeatherEventEndTime is set, but cleared when blend out completes",
    "FortCreativeTimerDevice:ClientCurrentTime": "Client-side*, track this client's current display time",
    "FortCreativeTimerDevice:bClientShowOnHud": "Client-side, determine HUD visibility",
    "FortCreativeTimerDevice:ClientCurrentSecondaryText": "Client-side, determine the HUD label text from the secondary text",
    "FortCreativeTimerDevice:ClientTimerTextStyle": "Client-side, determine the HUD text style",
    "FortCreativeTimerDevice:ClientCurrentState": "Client-side, track this client's timer state",
    "FortPickup:PrimaryPickupDummyItem": "Client-side, transient representation of the primary pickup entry for UI purposes",
    "BuildingWall:ClimbLink": "Climb link data",
    "EFabricCloneTransformBehavior.Stepped": "Clones are affected by the same transformation.",
    "EFabricCloneTransformBehavior.SteppedCentered": "Clones transformations are accumulated.",
    "FortChaseCameraHelper:MinCameraToPivot": "Closest",
    "ECloudFileState.Idle": "Cloud file has been initialized, neither saving nor loading",
    "ECloudFileState.Unitialized": "Cloud file has never been retrieved",
    "PendingDeployableBaseUser:LoadingCloudRequestHandle": "Cloud request handle representing the cloud load for the user",
    "FortSaveFileBuildingInstructionsHandler:SaveFileName": "Cloud save file name",
    "DeployableBasePlot:OccupantNextCloudSaveInfo": "Cloud save info for the occupant's next cloud save of this file",
    "ClusterLoot": "Cluster loot generated by density, can be use to generate systemic botPOI",
    "ClusterLoot:ClusterBox": "Cluster volume",
    "ClusterLoot:Weight": "Cluster weight",
    "PartyMemberPackedState:Location": "Coarse location of this party member in the game",
    "EFortPartyMemberLocation": "Coarse location tracking of a player in the FN game loop.\nOrder is important!",
    "VkLaunchData_Link:LinkCode": "Code of project to launch",
    "FlightParams:RotationalDampingCoefficient": "Coefficient determining the angular damping torque",
    "FlightParams:HeadingMatchRate": "Coefficient in the equation for determining the angular velocity required to\n              smoothly match (with exponentially decreasing velocity) the target heading.\n              A higher number will result in harsher but more nimble movement.",
    "FlightParams:RollMatchRate": "Coefficient in the equation for determining the angular velocity required to\n              smoothly match (with exponentially decreasing velocity) the target roll.\n              A higher number will result in harsher but more nimble movement.",
    "FortGravityGunHolder:StabilizationCoefficientWhileADS": "Coefficient multiplied by the current velocity and subtracted from the velocity toward the goal to slow it down as it gets closer.\nDetermines how quickly the object \"stabilizes\" while ADS.",
    "FortGravityGunHolder:StabilizationCoefficient": "Coefficient multiplied by the current velocity and subtracted from the velocity toward the goal to slow it down as it gets closer.\nDetermines how quickly the object \"stabilizes\".",
    "SphericalDriveParams:DragCoefficient": "Coefficient of linear motion. Units are percent velocity per second...\n              more stable than an actual drag force, trust me",
    "EFortQuestObjectiveStatEvent.CollectSuccessfulExpedition": "Collect a successful expedition.",
    "EFortQuestObjectiveStatEvent.CollectExpedition": "Collect an expedition.",
    "EFortQuestObjectiveItemEvent.Collect": "Collect an item in zone for the first time, does not count for gifted items",
    "EAthenaScoringEvent.CollectedCoinBronze": "Collected a bronze coin",
    "EAthenaScoringEvent.CollectedCoinGold": "Collected a gold coin",
    "EAthenaScoringEvent.CollectedCoinSilver": "Collected a silver coin",
    "EFortCollectedState.Collected": "Collected and seen by player",
    "FortCollectedResourceNotification:Loot": "Collected resources awarded",
    "EFortCollectedState.NewlyCollected": "Collected, state not yet seen by player",
    "FortCollectionDataMapping:Collection": "Collection associated with this tag.",
    "FortTierCollectionLayoutOutput:SpawnCollectionName": "Collection name to use for spawn waves",
    "FortPlayerController:LoopingUIFeedbackComponents": "Collection of components that play looping UI sounds",
    "TieredWaveSetCollection:CollectionData": "Collection of data sets",
    "FortScriptedObjectMovementPhaseData:Structures": "Collection of individual structures that will be created/tore down during a scripted movement event.",
    "FortDecoPreview:PreviewMIDs": "Collection of preview MIDs made by this actor",
    "FortAthenaMutator_CustomStormMovement:SafeZoneRoutes": "Collection of routes we'll be using.  Replicated, because invalid routes are removed, and the list is shuffled.",
    "EditorOnlyBuildingInstanceMaterialParameters:ScalarParams": "Collection of scalar instance parameters",
    "CosmeticBackendLoadout:Slots": "Collection of slots stored in the user's loadout",
    "FortScoutDroneControllingComponent:InterruptingPlayerTags": "Collection of tags that will be monitored in flight, and will interrupt flying if they ever get added. This is not the same\nas adding the tag as a trigger for the Dismiss Ability, as these are only monitored while the drone is activated.\nNote: These tags won't trigger anything if the player already had them when drone is being deployed.\nFor that use the UFortGameplayAbility_ScoutDrone_Activate's Activation Blocked Tags.",
    "EditorOnlyBuildingInstanceMaterialParameters:TextureParams": "Collection of texture instance parameters",
    "EditorOnlyBuildingInstanceMaterialParameters:VectorParams": "Collection of vector instance parameters",
    "FortInteriorAudioComponent_BuildingGrid:TraceCollisionChannel": "Collision channel to use for async line traces (if enabled via cvar)",
    "FortLiquidGunProjectile:BroadSphereOverlapTraceChannel": "Collision channel to use for the broad sphere overlap test",
    "FortTankVehicle:UnderVehicleCollision": "Collision component for area under vehicle - should only exist on server instances",
    "FortFlag:CollisionComp": "Collision component for the Flag",
    "FortPicklePortal:RangeCollisionComponent": "Collision component that covers the range of the portal effect",
    "FortEvenlySizedSegment:CapsuleComponent": "Collision for this section of the spline.",
    "FortLiquidGunProjectile:CapsuleTraceProfileName": "Collision profile to use for capsule traces",
    "FortCollisionResponseSwapperComponent:NewCollisionResponse": "Collision response to be set for the visibility channel",
    "FortNPCConversationParticipantComponent:ConversationInteractionCollisionProfile": "CollisionProfile use to overlap with the player interaction component",
    "FortPawnComponent_PassiveHealer:PassiveHealerInteractionCollisionProfile": "CollisionProfile use to overlap with the player interaction component",
    "FortCosmeticModification:ColorAlteration": "Color alteration to apply",
    "FortMiniMapIndicatorTextProperties:DisplayTextColor": "Color for display text",
    "AthenaTeamDisplayInfo:PedestalColor": "Color for the pedestal tints when multiple squads are populated",
    "AthenaTeamDisplayInfo:TextColor": "Color for the squad name's text",
    "FabricMeshProviderMeshReferenceParams:ColorParams": "Color material parameters to apply to mesh",
    "ThreatCloud:InActiveTint": "Color of the cloud minimap icons when the clouds are completely inactive.",
    "ThreatCloud:ActiveTint": "Color of the cloud minimap icons when the clouds are fully active.",
    "EFortSourDropperColorType": "Color shades for the Sour Dropper UI widget",
    "FortNavPathRendererComponent:PathColors": "Color that will be used iteratively for each path and feeded to the VFX as \"PathColor\" parameter",
    "FortPawn:TeamBeaconTextColor": "Color to draw any text in the beacon",
    "CreativeMiniMapComponentIconData:IconColor": "Color to use on the icon",
    "FortCurieCableSocketComponent:EditorSelectedCableSocketColor": "Color used for selected cable sockets",
    "FortAthenaTeamHUDInfo:Color": "Color used for this team in the UI",
    "SurvivorPresigeData:TextColor": "Color used for tier number",
    "FortCurieCableSocketComponent:EditorUnselectedCableSocketColor": "Color used for unselected cable sockets",
    "SurvivorPresigeData:Color1": "Color used in post match for animation elements",
    "SurvivorPresigeData:Color2": "Color used in post match for animation elements",
    "FortMaterialProgressBarSectionStyle:BarColorOne": "Color value of the bar section's first color",
    "FortMaterialProgressBarSectionStyle:BarColorTwo": "Color value of the bar section's second color",
    "UrgentQuestData:OverriddenWidgetPrimaryColor": "Color you want to override for some elements in entry",
    "UrgentQuestSettings:OverriddenWidgetPrimaryColor": "Color you want to override for some elements in entry",
    "AthenaTeamDisplayInfo:Ribbon": "Color-schemed ribbon to signify squad with little space",
    "SkyfireBackpackComponent:CurrentRarityColor": "Colors",
    "SkyfireBackpackComponentInitializerColorsStruct": "Colors",
    "EFortRichColorConflictResolutionRules.NoConflictsAllowed": "Colors cannot be the exact same value",
    "FortHighlightColorsContainer:InvalidHighlight": "Colors for an invalid highlight",
    "FortHighlightColorsContainer:ValidHighlight": "Colors for valid highlight",
    "EFortRichColorConflictResolutionRules.MinimumDistanceBlackOrWhite": "Colors must be at least some amount different from each other or not be black or white(same as original elastic model, but larger tolerance)",
    "EFortRichColorConflictResolutionRules.MinimumContrast": "Colors must have a minimum contrast ratio",
    "EFortRichColorConflictResolutionRules.MinimumContrastOrHueSaturationShift": "Colors must have a minimum contrast ratio, hue shift, or saturation shift",
    "EAccessoryColorName": "Colors specific to a particular part, like primary/secondary clothing or accessory colors.",
    "ECharacterColorSwatchType": "Colors specific to a particular part, like primary/secondary clothing or accessory colors.",
    "EClothingColorName": "Colors specific to a particular part, like primary/secondary clothing or accessory colors.",
    "TrapItemDefintionDesignerData:LootLevelColumnName": "Column Name for loot level data",
    "FortAthenaMutator_Cobalt:CombatStormShieldArray": "Combat Storm Shield Array holds relative/specific information for all combat storm shields in play - This array is replicated so clients can use these details",
    "EFortCombatEvents": "Combat events for the manager to track // HACK!  This needs to be changed to be data-driven so it can be made to work with data changes without constantly\n// changing code.  Perhaps we could use a data-enum instead?  For example, we should not have to add a new code\n// enum for every type of AI \"following\"!  It's already far behind the number of types we have, and that will only\n// get worse as we make more AI types.  Also, having \"Atlas\" events is bad since many missions will have something\n// OTHER than the ATLAS that may need to be tracked.",
    "CombatManagerComponentSTW:Factors": "Combat factors data",
    "EFortCombatFactors": "Combat factors derived from combat events",
    "CombatManagerComponentSTW:Events": "Combat heat data",
    "EFortReplicatedStat.CombatScore": "Combat score. KEEP THIS BETWEEN MAX AND SCORE!",
    "CombatManagerComponentSTW:Thresholds": "Combat threshold data",
    "ECombinedADSFireMode": "Combined aiming and shooting behaviour with the look + fire button on touch devices",
    "FortAIPawn:bReplicateGameplayCuesWithFastAbilityReplication": "Combined with global cvar setting to determine if gameplay cues replicate when using fast ability replication",
    "FortAIPawn:bReplicateGrantedTagsWithFastAbilityReplication": "Combined with global cvar setting to determine if granted tags replicate when using fast ability replication",
    "EAthenaGameMsgType.CommCriticalMessage": "Comm critical/important message",
    "EAthenaGameMsgType.CommIntro": "Comm intro message",
    "EAthenaGameMsgType.CommMessage": "Comm normal message",
    "EmoteOptionData:EmoteCommand": "Command used to initiate the emote for this option",
    "AthenaDeveloperSettings:CheatsToRunOnPlayerPawnPossession": "Commands that will be run on the player controller after the pawn is possessed in PIE",
    "STWDeveloperSettings:CheatsToRunOnPlayerPawnPossession": "Commands that will be run on the player controller after the pawn is possessed in PIE",
    "BuildingTimeOfDayLights": "Common actor base to perform all the necessary construction/begin play time of day lighting setup",
    "MatchmakingParams": "Common matchmaking parameters fed into the system",
    "FortGameStateOutpost:PrepTimeErrorOffset": "Compensate for error in server time seen by client so they don't try to start a defense after the prep time",
    "CatalogDynamicBundle:BundleItems": "Compiled list of bundle items in this bundle",
    "FortGameplayMessageDispatcherComponent:KnownReceivers": "Complete set of known receivers (including pending), regardless of whether they have a channel ID set",
    "EFortQuestObjectiveStatEvent.Complete": "Complete the specified number of missions. Target is the mission completion tags.",
    "EFortQuestObjectiveItemEvent.QuestComplete": "Complete the specified number of quests",
    "EFortQuestObjectiveStatEvent.QuestComplete": "Complete the specified number of quests",
    "EFortAthenaTutorialSubstep.ScreenCompleted": "Completed",
    "ETimerDeviceState.Completed": "Completed and awaiting reset/restart",
    "ELoginResult.Console_AddedAuthAssociation": "Completed linking auth association from console to Epic account successfully",
    "EDBNOPlayStyle.Passive": "Completely ignore DBNO",
    "EFortUIFeatureState.Invalid": "Completely invalid state, player may still be logging in",
    "FortMaterialProgressBarSectionInfo:Percent": "Completion percent of the bar section",
    "FortRewardActivity:ActivityCompletionResult": "Completion result of the activity, if applicable",
    "EFortCompletionResult": "Completion result options for missions, game modes, etc.",
    "FortCreativeBudgetComponentSimulationCost:ComponentClass": "Component Class",
    "AutoAimWeaponPawnComponent": "Component added to Fort Player Pawns by auto-aim weapons.",
    "FortSupplyDropRadioAttachActorComponent": "Component added to actors that are attached to the supply drop.\nCan be used to handle additional desired/required behavior of these attached actors, such as manipulating net cull distances.",
    "MilkshakeControllerComponent": "Component applied to all player controllers (including spectate/replay) when the Milkshake (s19 earthquakes) plugin is active.\nThis component handles client side earthquake effects such as damage effects on buildings, camera shake, and force feedback.",
    "FortWeaponTraceIgnoreActorsComponent": "Component associated with AFortAthenaMutator_WeaponTraceIgnoreActors.\nCan be added to a weapon, pawn (to affect ALL of a pawn's weapons), or the mutator actor (to affect ALL weapons).\nAllows us to provide additional actors to ignore in a weapon's trace.\nThe mutator function is called on both the server (for anticheat, not in PIE) and the owning client.\nWe don't replicate the ingore actors/classes, so the user is responsible for keeping the lists in sync on server/client.",
    "FortCurieFireParticleActorData:AssociatedComponent": "Component associated with the fire particle data",
    "ObjectInteractionBehavior": "Component class for Describe Object Interaction behavior. In regards to the move tool, these are called Creative Interactions.",
    "BuildingGameplayActor:RegisteredTouchComponent": "Component currently registered to handle ability touch events. Only valid if bUseSimpleActorTouchSetupForAbilityBuckets is false",
    "RandomDayphaseFXState:SpawnedComponent": "Component currently showing the FX configured in this struct",
    "FortPlayerControllerComponent_RespawnOnDeath": "Component for AFortPlayerControllerAthena that works in conjunction with the UFortGlobals::GameplayTags().GrantedItemExtraLife to allow a player to respawn even in games where respawning is normally not allowed.\n    This component handles the respawn location, timing, and cosmetics. The actual number of times the player can respawn is controlled by UFortGlobals::GameplayTags().GrantedItemExtraLife.\n    NOTE: Use of this component requires that a DroneManagerClass be used during the respawn sequence. It is possible that we will want to remove this requirement in the future, but right now it works since all users of this component want to show the respawn drone.",
    "MannequinAnalyticsComponent": "Component for allowing Creative Mannequins to make a pass-through call to Fort Analytics without making a globally callable function.",
    "FortControllerComponent_QuestGameplayEventListener": "Component for controlling Gameplay Event Listeners for Player Received Gameplay Event Verb processing",
    "DespawnExpiredPawnComponent": "Component for despawning of expired pawns. Handles creation of VFX rift, storing potential rifts for other components use.\n      Triggers pawn despawn FX, triggers pawn destruction.",
    "SynchronizedTeleportPlayerComponent": "Component for handling per player controller logic and replication for the AFortAthenaMutator_SynchronizedTeleport class",
    "CreativeDataChannelTarget": "Component for picking up custom events in an Electra Player Channel, and triggering creative channel events in response.\nShould only function on the server.",
    "CreativeDataChannelTargetFN": "Component for picking up custom events in an Electra Player Channel, and triggering creative channel events in response.\nShould only function on the server.",
    "CreativeDataChannelTargetRL": "Component for picking up custom events in an Electra Player Channel, and triggering creative channel events in response.\nShould only function on the server.",
    "FortObjectMoverInputComponent": "Component for storing custom input overrides for the Object mover.",
    "FortPlaysetGrenadeInputComponent": "Component for storing custom input overrides for the playset grenade.",
    "FortRiftBubblePossessedPropInputComponent": "Component for storing custom input overrides for when props are possessed in a rift bubble in BR",
    "FortDataDrivenPossessedPropInputComponent": "Component for storing custom input overrides for when props are possessed via NPC services in BR",
    "FortPossessedPropInputComponent": "Component for storing custom input overrides for when props are possessed with the prop selector.",
    "MusicalTimespanSequencerComponent": "Component for testing separate project addition of custom Component",
    "NPCConversationIndicatorMessage:NPCConversationComponent": "Component for the NPC we're changing an indicator for.",
    "FortControllerComponent_MarkActorsInRadius": "Component handling the marking of Vendetta AIs with HUD indicators",
    "FortVehicleSeatWeaponComponent:DynamicReticleWidgetComponent": "Component hosting dynamic reticle widget.",
    "FortPlayspaceComponent_IslandLocalizationPublish": "Component in charge of the publishing of the localization document",
    "PapayaAnalyticsComponent": "Component in the Playspace that manages the analytics in Papaya",
    "PapayaLiveEventComponent": "Component in the Playspace that manages the live events run in Papaya",
    "PapayaServerMigrationComponent": "Component in the Playspace that manages the migration from one server to another",
    "PlayspaceComponent_CreativeServerExpiration": "Component in the playspace that manages the server expiration",
    "PlayspaceComponent_EditServerExpiration": "Component in the playspace that manages the server expiration",
    "PlayspaceComponent_PlayServerExpiration": "Component in the playspace that manages the server expiration",
    "PlayspaceComponent_ServerExpiration": "Component in the playspace that manages the server expiration",
    "FortControllerComponent_InventoryService:bBoundToRegisteredPlayerInfo": "Component is bound to the player state's registered player info",
    "FortAthenaCollisionReactionComponent": "Component is to be used only on authoritative side.\n\nThe actor using this will be able to react to collisions or overlap of specific primitive components in specific ways.",
    "FortAthenaAILODComponent": "Component is to be used only on authoritative side.\n      The AI LOD Level is replicated on clients if the component is set to replicate (currently only happening for FortAIPawn).",
    "MilkshakeFieldSystemActor:OperatorFieldMultiplyComponent": "Component is used to compute a multiplication operation between two input fields.",
    "RemoveFoliageBoxComponent": "Component is used to remove foliage within the component's bounds.",
    "EncounterManagerComponent": "Component meant to handle communication between the EncounterItem and the sublevel.",
    "QuestItemDefComponentEditorRow:EditorObjectiveExtensionClass": "Component objective extenstion property editor",
    "FortWeaponComponent_Subweapon": "Component placed on base weapon to associate it with an attached subweapon.",
    "QuestItemDefComponentEditorRow:EditorClass": "Component property Editor",
    "FortUserCloudHelperComponent": "Component providing a Fortnite-specific wrapper around the cloud file API",
    "StateTreeManagerComponent": "Component responsible for creating, running, and possibly replicating StateTrees on Actors\nThere will only be one of these components on an Actor and will handle any/all StateTrees requested to run on the Actor\n\n                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                                         | StateTreeManagerComponent |\n                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n               Single component attached to an Actor that will run all StateTrees for said Actor\n                                                      |\n                                                      |\n                     -------------------------------- |---------------------------------\n                     |                                |                                |\n          ~~~~~~~~~~~~~~~~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~~~\n            | FStateTreeRuntimeData |        | FStateTreeRuntimeData |        | FStateTreeRuntimeData |\n          ~~~~~~~~~~~~~~~~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~~~\nStructures containing the runtime data required to run a UStateTreeExecutionContext (brains of the state machine)\n                         and optionally replicate the state transitions to clients\n                     |                                |                                |\n                     |                                |                                |\n                        \\                             |                             /\n                           \\                          |                          /\n                              \\                       |                       /\n                                 \\                    |                    /\n                                    \\                 |                 /\n                                       \\              |              /\n                                          \\           |           /\n                                             \\        |        /\n                                                \\     |     /\n                                                   \\  |  /\n                                                     \\|/\n                                           ~~~~~~~~~~~~~~~~~~~~~~~\n                                          | FStateChangeDataArray |\n                                           ~~~~~~~~~~~~~~~~~~~~~~~\n     Single FastArray replicating all state changes/transitions for all StateTrees that want to replicate.\n  These StateChanges will be put into their respective client-side simulation and sorted in transition order.\n                                                      |\n                                                     /|\\\n                                                   /  |  \\\n                                                /     |     \\\n                                             /        |        \\\n                                          /           |           \\\n                                       /              |              \\\n                                    /                 |                 \\\n                                 /                    |                    \\\n                              /                       |                       \\\n                           /                          |                          \\\n                        /                             |                             \\\n                     |                                |                                |\n  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n | FStateTreeClientSimulationData |   | FStateTreeClientSimulationData |   | FStateTreeClientSimulationData |\n  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nEach FStateTreeRuntimeData that wants to replicate to clients will have a matching FStateTreeClientSimulationData.\nThe FStateChangeDataArray communicates the transitions from the FStateTreeRuntimeData to the respective\nFStateTreeClientSimulationData. These transitions are queued up, wait for the associated UStateTreeTaskObjects to\nreplicate, and simulates the transition in the same order it happened in the FStateTreeRuntimeData's StateTree.\n\nNOTE: UStateTreeTaskObjects is where the gameplay logic lives and are separately replicated subobjects who\nthemselves likely have replicated variables. These subobjects are referenced in the FStateChangeData and can't\nbe assumed to arrive at the same time that the transition made its way through this system; hence the queuing system.\n\nNOTE: UStateTreeTaskObjects may never make their way to the client if the server began and ended the state it's\nassociated with before it could replicate to the client. In this situation, this replicated transition system will\nskip that transition altogether and move forward to the next transition.",
    "FortAthenaAIRuntimeParametersComponent": "Component responsible to manage all the AIRuntimeParameters by extracting them from registered providers and keeping the result for further retrievals",
    "FortEventResponderComponent": "Component that allows actors to respond to specific Mesh Network Events in Papaya, manages the binding and handling of the different events to simplify the usage in blueprint",
    "FortControllerComponent_AugmentUIEvents": "Component that assist with forwarding events from the game module to the ui modules.\nPrimarily needed for events from abilities since they are not easily accessible.\n.",
    "FortNearbyActorsPerceptionComponent": "Component that can be added on any Actor to easily find nearby actors (check EFortNearbyActorsTypes for what is supported right now)\nIt does require a FortAIDirector enabled",
    "MeshNetworkComponent": "Component that can be added to Actors in order to allow them to Receive properties from the Mesh Network\nand to Send RPCs to the Mesh Network.\n\nWhen added to an Actor, all of the Actors replicated properties will be replicated through the Mesh.\nHowever, any RPCs on the Actor will behave as if no mesh was present (Server only goes to the Game Server,\nClient only goes to the specific client, and Multicast only goes to clients connected to the Game\nserver).\n\nProperties on the MeshNetworkComponet will be replicated alongside Actor Properties, just like standard replication.\nBut, MeshNetworkComponents only support Server and Multicast RPCs. Server RPCs go up through the Mesh\n(and may be aggregated) and Multicast RPCs go down through the mesh to all clients. There is no notion\nof (single) Client RPCs on the MeshNetworkComponent.",
    "SpecialRelevancyHealthComponent": "Component that can be placed on an ABuildingActor to track health/damage separately per special relevancy group.\nCould be used for other actor types in the future, if ForwardDamage() is modified to accept AActor (not ABuildingActor)\nand is called from an appropriate spot for the new type.  Also, GetMaxHealth() needs to be implemented per actor class,\nas there is no common health interface.",
    "FortGameplayDataTrackerComponent": "Component that can tracks gameplay events with a numerical value. Provides callbacks based events or data from accumulations of events",
    "FortGameplayDataTrackerComponentManager": "Component that can tracks gameplay events with a numerical value. Provides callbacks based events or data from accumulations of events",
    "FortAthenaCreativePortal:OverlapComponent": "Component that defines the bounds of this actor. Also used for pawn overlap events to record when a pawn enters or exits this volume.",
    "GameplayVolume:BoundsComponent": "Component that defines the bounds of this actor. Also used for pawn overlap events to record when a pawn enters or exits this volume.",
    "FortCreativeAFKComponent": "Component that determines whether or not a player is Away From Keyboard during a creative game.\n\nThere are four \"AFK States\" that a player might be in:\n - Not AFK: The player is interacting with the game frequently enough that they are not considered AFK.\n - Suspected AFK: The player hasn't interacted with the game for a short time, so we start watching for signs that will prove they're not AFK.\n - Confirmed AFK: The player hasn't interacted with the game for a long time, so they are considered AFK.\n - Remained AFK: The player has been confirmed AFK for some time.\n\nInteracting with the game in some detectable way will reset the state to \"Not AFK.\"",
    "FortPlayerControllerAthena:XPComponent": "Component that handles all the XP replication between the server and client",
    "FortAIInjectedBehaviorComponent": "Component that handles the runtime data of injected behaviors for a specific AI",
    "FortCharacterVehicle_Ostrich:WorldStriderComponent": "Component that handles world striding (big steps)",
    "FortPickupComponent_ItemAttachedActor": "Component that is attached to AFortPickup actor; works in tandem with UFortControllerComponent_ItemAttachedActor.\nThis component allows an actor of any type to act as if it is attached to the primary item definition of this pick-up.\nWhen the player picks up the pickup that owns this component the AttachedActor will become attached to the player through UFortControllerComponent_ItemAttachedActor.\nThis is useful in cases where we want an item definition to act like an actor when it is in a player's inventory or is stored in a pickup. The attached actor can do persistent things like show a map icon or act as an AI target.\nThis class does NOT replicate so all functions/variables are server only.",
    "FortControllerComponent_ItemAttachedActor": "Component that is attached to Fort Player Controller; works in tandem with UFortPickupComponent_ItemAttachedActor.\nThis component allows an actor of any type to act as if it is attached to an item definition the player is carrying.\nWhen the player drops a pickup with a matching item definition that is associated with an attached actor the attached actor will become attached to the newly spawned pickup through the pickup's UFortPickupComponent_ItemAttachedActor.\nThis is useful in cases where we want an item definition to act like an actor when it is in a player's inventory or is stored in a pickup. The attached actor can do persistent things like show a map icon or act as an AI target.\nThis class does NOT replicate so all functions/variables are server only.",
    "FortAIPawn:WeaponCollisionComponent": "Component that is used for AIs that use collision capsules for weapons",
    "FortHomerComponent": "Component that is used for automatically generating a composite clip from game clips created from significant player events.\n\nA Homer session is started/stopped either through an explicit action or implicitly via a specific event that occurs.\nThe component will correlate the clips created during the session and create a single composite clip with the associated clips and\nvarious metadata.",
    "FortMinigameSpawnerComponent": "Component that let's you spawn pickups (and eventually arbitrary white-listed actor types). The logic is still in Blueprint Minigame_Spawner_Component.\n  Not marked BlueprintSpawnableComponent or BlueprintType for this reason.",
    "DestroyOnSafeZonePhaseComponent": "Component that listens for safe zone phase changes to destroy the associated actor",
    "FortPlayerPawn:AffiliationComponent": "Component that manages affiliation/faction logic",
    "FortWorldManager:CloudHelper": "Component that manages all cloud save-related operations; Allocated on demand",
    "FortPlayerPawn:ConvertComponent": "Component that manages convert logic",
    "FortControllerComponent_CosmeticLoadout": "Component that stores and replicates a player's loadout. Interfaces with the Cosmetic Loadout Subsystem to retrieve\nthe equipped loadout from the backend, and then resolves it",
    "FortFallTeleportSpawnerComponent:ComponentToAddClass": "Component that will be added to all instances of PlayerPawnReceiverClass",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic": "Component that wraps all the game phase logic for battle royale\nTemporarily marked NotBlueprintable to limit exposure",
    "FortPawnComponent_NightNight": "Component to add to a pawn in the front end night night mode",
    "FortWorldMultiItemInfo:ComponentClassForXPLogic": "Component to add to the weapon/gadget that has the blueprint logic for handling granting XP which will ultimately\npower up the MultiItem to its next level.",
    "FortCreativeSplineModificationComponent": "Component to assist in handling in-game spline modification via phone tool operations for spline-based props. Works\nwith AFortCreativeSplineControlPoints to interface with the spline's points. Handles relevant data replication, but\ndoes not serialize the saved spline points itself because UEFN does not allow for components to save data, so the\nserialized array of spline points must be stored on the owning device\n\nA visualization of how data is communicated across UEFN Live Edit can be found here:\nhttps://docs.google.com/drawings/d/15nF6hTz-vFHvgd1rm2qgsTTDl0F_1XFCcMwBsDViu4w/edit",
    "FortAICustomTargetingComponent": "Component to be used to define specific offsets on an AI that can be used for movement or melee/ranged targeting by other AIs.",
    "FortPlayerControllerComponent_TacticalSprint": "Component to control player's tactical sprint as needed.",
    "FortControllerComponent_TriggerHaptics": "Component to control trigger haptic feedback on platforms that support it.\n    Covers multiple fort gameplay scenarios to apply the correct haptic effect for the situation.",
    "FortControllerComponent_MinimapAthena": "Component to deal with minimap interactions in Athena.\nExtracted from FortPlayerControllerAthena in 24.20",
    "FortControllerComponent_MinimapFrontEnd": "Component to deal with minimap interactions while in the frontend.\nExtracted from FortPlayerControllerFrontend in 24.20",
    "FortControllerComponent_MinimapSpectateAFriend": "Component to deal with minimap interactions while spectating a friend.\nExtracted from FortSpectateAFriendController in 24.20",
    "FortControllerComponent_MinimapSpectating": "Component to deal with minimap interactions while spectating.\nExtracted from FortPlayerControllerSpectating in 24.20",
    "FortControllerComponent_Minimap": "Component to deal with minimap interactions.\nExtracted from FortPlayerController in 24.20\n.",
    "BuildingSMActor:WeakPointComponent": "Component to generate weakpoints on the buildingsmactor rather than internally when enabled",
    "NavArrow:DestinationTrackerComponent": "Component to get distance and heading information from",
    "FortMaterialStyleComponent": "Component to handle management of active material style and pending style requests for the owning actor.",
    "FortAIManagerMinigameComponent": "Component to help manage AI spawn counts in a minigame",
    "FortHexMapMarkerBase:SkelMeshComponent": "Component to store the animating mesh",
    "FortTheaterMapTile:StaticMeshComponent": "Component to store the mesh",
    "BuildingProp_CreaturePlacer:CreatureSkeletalMeshComponent": "Component to store the non-animating state. This is not exposed because it conflicts with some actor properties",
    "BuildingSMActor:StaticMeshComponent": "Component to store the non-animating state. This is not exposed because it conflicts with some actor properties",
    "SpecialEventAudioHapticsComponent": "Component to trigger haptic responses from audio.\nThe AudioSynesthesiaNRT asset on this component must be a LoudnessNRT.",
    "FortAthenaMutator_Skyfire:SkyfireBotPlayerPawnComponentClass": "Component to use for bots player pawn playing skyfire mode",
    "BuildingActor:RuntimeAddedComponentTypesWhitelistedForReplication": "Component types that have been specifically allowlisted for replication during runtime in situations where sub-object replication is disabled",
    "BuildingActor:ComponentTypesWhitelistedForReplication": "Component types that have been specifically allowlisted for replication in situations where sub-object replication is disabled",
    "PlayspaceSpawnActor:SceneComponent": "Component used as the root for location in the world",
    "BuildingTrap:StimSourceComponent": "Component used by AI to detect trap",
    "FortBuildingAddStructuralSupportMarkerComponent": "Component used by BuildingSMActor's that use UFortBuildingAddStructuralSupportComponent.\n    This component marks where the UFortBuildingAddStructuralSupportComponent should place a single intangible building piece and what class to use for that building piece\n    To use this component on an ABuildingSMActor add 1 UFortBuildingAddStructuralSupportComponent and one or more UFortBuildingAddStructuralSupportMarkerComponents to the ABuildingSMActor. Place the UFortBuildingAddStructuralSupportMarkerComponents where you want the added buildings to be placed and set the BuildingClass values in each UFortBuildingAddStructuralSupportMarkerComponents.\n    Multiple UFortBuildingAddStructuralSupportMarkerComponents can be used with one UFortBuildingAddStructuralSupportComponent.",
    "AthenaAIPerceptionStimuliSourceComponent": "Component used by FN object to register into perception system and manages if AI sees them or not",
    "AthenaPhysicsAIPerceptionStimuliSourceComponent": "Component used by FN physics object to register into perception system and manages if AI sees them or not",
    "AthenaTrapAIPerceptionStimuliSourceComponent": "Component used by FN trap to register into perception system and manages if AI sees them or not",
    "FortAthenaAIBotController:MarkerComponent": "Component used by the player bot to use ping system like real players",
    "FortPhysicsConstantForceComponent": "Component used for applying constant forces to physics objects on the physics thread",
    "FortPhysicsMagneticForceComponent": "Component used for applying magnetic forces to physics objects on the physics thread",
    "BGAConsumableSpawner:QueryVisualizationComponent": "Component used for editor visualization",
    "FortEQSPrevisActor:QueryVisualizationComponent": "Component used for editor visualization",
    "BuildingTurretComponent:TargetingOverlapComponent": "Component used for overlap tests",
    "AbandonedTentSpawnPointComponent": "Component used for placement of individual tents inside the AbandonedCampsitePlacedSpawners. Allows\n      exact placement of individual tents with their own individual spawn chances.\n      Inherits from UStaticMeshComponent to have the mesh available as a preview in the editor for placement.",
    "FortControllerComponent_FakeKillRelevancy": "Component used for replicating data relevant only to a given player in FakeKillRelevancy",
    "FortSoundLibraryPlaybackSettings:AttachToComponent": "Component used for spawning attached sounds.  If not specified, will fall back to the actor's default attach component.",
    "FortDagwoodVehicle:SplatterSourceComp": "Component used for tracking previous spewed projectiles and splatter BGAs so that we bind them, so that we can create trails or splines between them. Used with fuel leak projectiles",
    "FortVehicleNavModifierComponent": "Component used on Fortnite Athena vehicle to know when physic is going to sleep or to\nwake up to adjust its relevancy for navigation. It also has threshold to not constantly\ndirty navigation when vehicle is slowly moving.",
    "FortPhysicsObjectNavigationComponent": "Component used on UFortPhysicsObjectComponent to know when physic is going to sleep or\nwake up to adjust its relevancy for navigation. It also has threshold to not constantly\ndirty navigation when prop is slowly moving.",
    "FortNavModifierComponent": "Component used on actors to not constantly\ndirty navigation when actor is slowly moving.",
    "VKEditPlayspace:NaniteSettingsOverrideComponent": "Component used to adopt the world nanite settings from levels loaded via ProjectPlayComponent.",
    "CreativeRoyaleIslandPlayspace:WorldTimeOfDayOverrideComponent": "Component used to adopt the world time of day from levels loaded via ProjectPlayComponent",
    "VKEditPlayspace:WorldTimeOfDayOverrideComponent": "Component used to adopt the world time of day from levels loaded via ProjectPlayComponent.",
    "FortControllerComponent_AugmentGrantingSystem:PrimaryInputComponentBuildMode": "Component used to bring up augment selection in build mode.",
    "FortControllerComponent_AugmentGrantingSystem:PrimaryInputComponentWeaponMode": "Component used to bring up augment selection.",
    "FortWeaponComponent_TargetModeSelector:TargetModeInputComponent": "Component used to bring up augment selection.",
    "ButterCakeUnstuckComponent": "Component used to detected if ButterCake is blocked/stuck to log some info to debug and trigger event to try to unstuck him.",
    "VKEditPlayspace:PlayerPawnOverridesComponent": "Component used to enable/disable specific functionality on player pawns spawned within the playspace",
    "VKEditPlayspace:ProjectEditComponent": "Component used to facilitate content downloads and pull out experience data.",
    "VKEditPlayspace:CreativeToolsPermission": "Component used to grant and remove creative tools permission based on player eligibility. Removes privs when players leave the playspace.",
    "PapayaPlayerSpawningComponent": "Component used to handle special spawning rules in Papaya",
    "GameHubPlayerSpawningComponent": "Component used to handle special spawning rules in the GameHub",
    "CreativeRoyaleIslandPlayspace:ProjectEditComponent": "Component used to load selected user island from content beacon",
    "VKEditPlayspace:FortCreativeDynamicXp": "Component used to manage grants from the Accolade Device",
    "CreativeRoyaleIslandPlayspace:PlayStopPauseManager": "Component used to manage new \"Devices\" that are created via the PlayStopPause interface",
    "VKEditPlayspace:EditConnectionManager": "Component used to manage new \"Devices\" that are created via the PlayStopPause interface.",
    "VKEditPlayspace:PlayStopPauseManager": "Component used to manage new \"Devices\" that are created via the PlayStopPause interface.",
    "CreativeRoyaleIslandPlayspace:CreativeLoadingStateProxy": "Component used to manage some legacy creative features related to the \"state\" of an island loading",
    "VKEditPlayspace:CreativeLoadingStateProxy": "Component used to manage some legacy creative features related to the \"state\" of an island loading.",
    "VKEditPlayspace:LiveEditComponent": "Component used to manage toggling live edit features.",
    "FortNavModifierComponent:PrimCompAffectingNavMesh": "Component used to sample the speed and orientation to determine if the prop busted the thresholds for navigation relevancy",
    "VKEditPlayspace:LevelStreamComponent": "Component used to stream in Levels. From downloaded content packages.",
    "CosmeticDataComponent": "Component used to track individual cosmetic properties of an arbitrary type based on the actor's equipped cosmetics.\n\nProperties are broken up into buckets based on the slot tag (for instance, a character could have a\nCosmeticSlot.Backpack and CosmeticSlot.Outfit) and have property tags (such as CosmeticProperty.BackpackColor1\nand CosmeticProperty.OutfitColor2).\n\nProperties can be of any type that is derived from FCosmeticPropertyBase so plugins can easily inject new properties.\n\nOnly one property with a given type or tag can be present in a bucket at a time. If a new property with matching\ntype and tag is added, that property will override the existing value.\n\n-- This is very experimental, and could change significantly as we add more concrete use cases. Use only if you're\nokay with that! --",
    "BuildingFoundation:EditorVisualizationComponent": "Component used to visually display the building foundation in editor views",
    "FortPhysicsBall:RotatedComponent": "Component we optionally rotate as we move.",
    "FortAthenaVehicle:OverlapComponent": "Component we use for generating overlaps (bounce pads etc... need this)",
    "FortPhysicsOverlapComponent:OverlapComponent": "Component we use for generating overlaps with Physics Objects.",
    "FortAthenaVehicle:WaterOverlapComponent": "Component we use for generating water overlaps",
    "FortPlayerControllerAthena:HabaneroComponent": "Component which handles clientside ranked progression",
    "FortPlayerControllerAthena:SkydiveFeedback": "Component which handles clientside skydive feedback",
    "FortPlayerControllerAthena:DiscoverabilityComponent": "Component which tracks the discovered POIs (or at leasts acts as an interface for this information).",
    "FortPlayerControllerFrontEnd:DiscoverabilityComponent": "Component which tracks the discovered POIs (or at leasts acts as an interface for this information).",
    "FortConversationMemoryComponent": "Component which wraps up a conversation memory structure and can be housed and shared between different actors as required e.g.\nOn NPC pawn/Actor - conversation memory (e.g. item sale stock + counts) recreated + reset whenever pawn respawns. Stock shared between all interacting players.\nOn NPC controller - conversation memory (e.g. item sale stock + counts) PRESERVED across pawn respawns.  Stock shared between all interacting players.\nOn interacting player - conversation memory (e.g. item sale stock + counts) PRESERVED across pawn respawns.  Stock counts are UNIQUE to each interacting players.",
    "EnvironmentLightingActor:SkyAtmosphereComponent": "Components",
    "FortSplineWaterAudioComponent:WaterBodyOwner": "Components",
    "SkyfireBackpackComponent:BackpackVFX": "Components",
    "FortCreativeMoveTool:ComponentsToReclaimMIDsFrom": "Components (either recently hovered or selected) that might have MIDs assigned that we need to\n          expire after a period of time.  Maps each component to the game time that it was last used.",
    "CurieToggleComponentGroup:GroupComponents": "Components currently making up the group",
    "FortBotTargetInfo:AlternateTargetingActor": "Computed an alternate targeting destroyable building actor the threat might be hiding behind",
    "HomebaseNodeGameplayEffectDataTableRow:AssociatedGEIdx": "Computed and cached value of which gameplay effect index this synthesized bonus applies to",
    "HomebaseNodeGameplayEffectDataTableRow:AssociatedModifierIdx": "Computed and cached value of which gameplay effect modifier index this synthesized bonus applies to",
    "FortGameStateZone:GameDifficulty": "Computed difficulty of the game",
    "EAthenaQuickChatFilteringType.FacingPickup": "Concerned with a pickup in front of the player, hide option if no pickups are present in front of the player",
    "EAthenaQuickChatFilteringType.ActiveMaterial": "Concerned with the active building material type, hide option if not in building mode",
    "EAthenaQuickChatFilteringType.ActiveHotbarItem": "Concerned with the active hotbar item, hide option if in building mode or the harvesting tool is active",
    "EAthenaQuickChatFilteringType.ActiveHotbarItemAmmo": "Concerned with the active hotbar item, hide option if in building mode or the harvesting tool is active, or if the active item doesn't use ammo",
    "FortGameplayCueSpawnCondition:SourceCondition": "Condition about source of this that must be true",
    "CreativeFunctionalTestConditionComponent_CheckInventory": "Condition component that is satisfied once a message is a received on a particualr channel",
    "CreativeFunctionalTestConditionComponent_ReceiveOnChannel": "Condition component that is satisfied once a message is a received on a particualr channel",
    "FortPlayerSurveyCMSCondition": "Condition data structured for use with CMS",
    "FortPlayerSurveyCMSConditionGroup": "Condition group data structured for use with CMS",
    "FortAthenaMutator_MatchCondition_ConnectedTeams:MinConnectedTeams": "Condition is satisfied when there are <= this many connected teams remaining",
    "FortAthenaLivingWorldDespawnCondition:DespawnWorldCondition": "Condition that must be true to start the despawn sequence of the Actor.",
    "FortGameplayCueAudioInfo:Condition": "Condition to check before spawning",
    "FortGameplayCueDecalInfo:Condition": "Condition to check before spawning",
    "FortGameplayCueParticleInfo:Condition": "Condition to check before spawning",
    "FortConditionalIncludeTags": "Conditional tags to add for the ability system. If it matches the source tags, add the new tags",
    "EFortCustomTickComponentCondition": "Conditions to evaluate when computing UFortCustomTickComponent's update rate",
    "FortMeleeWeaponStats:BuildingConeAnglePitch": "Cone Angle to use against buildings (vertical).",
    "FortMeleeWeaponStats:BuildingConeAngle": "Cone Angle to use against buildings.",
    "AthenaCarPlayerSlot:ShootingCone": "Cone constraints for shooting/visibility",
    "BuildingRift:LootDropConeHalfAngle": "Cone half angle for tossing loot",
    "FortAIPawn:LootDropConeHalfAngle": "Cone half angle for tossing loot",
    "FortLocomotionAnimSet:EnableAdditiveLeans": "Config",
    "FortMotorcycleVehicle:FortMotorcycleVehicleConfigs": "Config cached CDO ptr",
    "FortTreadVehicle:FortTreadVehicleConfigs": "Config cached CDO ptr",
    "FortTreadVehicle:ConfigsClass": "Config class",
    "LockedQuestRuntimeData:ConfigData": "Config data from the source asset.",
    "FortGameModeZone:bDisableVoiceChat": "Config property to disable voice chat",
    "LockedQuestConfigData:OverrideData": "Config-driven overrides.\nNote this can be used by a parent source generating locked quest widgets, even if bShowLockedQuestWidgets is false on this asset.",
    "PlayspaceComponent_CreativeToolsPermission:bAllowUnrestrictedPhoneControls": "Configurable setting that allows this permissions component to enable unrestricted edit mode.\n              Note: At the time of writing this, all that enables is unlimited scaling on the CreativeMoveTool.",
    "PlayspaceComponent_CreativeToolsPermission:bShouldRestrictMoveToolToInteractionCollection": "Configurable setting that allows this permissions component to limit move tool interaction to the MoveToolInteractionCollection.",
    "PlayspaceComponent_CreativeToolsPermission:bSkipPermissionsRequirement": "Configurable setting that allows this permissions component to skip requiring permissions when granting Creative tool access.",
    "FortSoundCueTemplateSettings": "Configurable settings for the FortSoundCueTemplate plugin",
    "SkyfireBackpackComponent:bShouldChangeTimeBackgroundColor": "Configuration",
    "SkyfireBackpackComponentInitializerConfigStruct": "Configuration",
    "LockedQuestConfigData": "Configuration data used to generate locked quest widgets.\nThis is intentionally ambivalent to it's source as it can be generated from bundles, schedules, or individual quests.",
    "SpawnMachineEnabledConfig": "Configuration determining for which players a Reboot Van should be enabled. With default values, it will be enabled for all players.",
    "QuestInstanceParticipantConfiguration": "Configuration for a participant on their role for a particular quest\nTypically defined broadly on a per-manager basis but can be overwritten for a more per-participant basis",
    "FortCurieExecutionEntry:ExecutionParameters": "Configuration for the element that is applied to the interacting object *",
    "PlaylistAccessOverride:OverrideAccess": "Configuration for this override",
    "FortKatanaPrimaryAttackVariationInfo": "Configuration info about how a primary attack variation should behave.",
    "FortMissionConfigDataParams:ConfigParams": "Configuration parameter buckets",
    "ClientAILODSettings:MovementCompOptimizationConfiguration": "Configure custom movement comp optimization configuration related to frame skipping and simulated data optimization.",
    "FortAICustomTargetingComponent:Configurations": "Configure here the offsets you want to add to this AI.",
    "FortAthenaCollisionReactionComponent:CollisionReactionConfiguration": "Configure how this AI will handle collision with other actors.",
    "BuildingWeakSpotData:HitCount": "Consecutive Hit Count",
    "DigestedWeaponAccuracy:bConsiderProjectileTravelTime": "Consider projectile travel time when aiming",
    "WeaponAccuracy:ConsiderProjectileTravelTime": "Consider projectile travel time when aiming",
    "FortGameplayCueNotify_Loop:TickGroup": "Consider using TG_DuringPhysics so it can run in parallel with physics",
    "FortLobbyBeaconPlayerState:ConsoleUniqueNetId": "Console Net ID for this party member",
    "CreativeFunctionalTest:ExpectedConsoleVariablesForTest": "Console variables that will be forced in at the start of the test, we revert them to their old values after the test is over",
    "FortCurieManager": "Consolidated manager for Fortnite-specific implementations of Curie sub-managers, etc. that should be tracked per the lifespan of a level and\naren't as appropriate for tracking in CurieGlobals",
    "CurieManager": "Consolidated manager for things that should be tracked per the lifespan of a level and\naren't as appropriate for tracking in CurieGlobals",
    "FabricSequencerSustainComponent:SustainInstanceYLocation": "Constant value for the instance's Y Location (How far out the grid it appears)",
    "FabricSequencerSustainComponent:SustainInstanceYScale": "Constant value for the instance's Y scale value",
    "FabricSequencerSustainComponent:SustainInstanceZScale": "Constant value for the instance's Z scale value",
    "RootMotionSource_ConstantWindForce": "ConstantWindForce applies a fixed force to the target",
    "EHeroStatProfile": "Constructor: Balanced, health, shield\nNinja: Balanced, shield, ability\nOutlander: Ability, balanced, shield\nSoldier: balanced, health, ability",
    "EFortItemType.ConsumableAccountItem": "Consumable account items",
    "EAthenaScoringEvent.ForagedItemConsumed": "Consumed a foraged item (apple, mushroom, etc.)",
    "OctopusInPersistent:CachedContactPoints": "Contact points used to calculate the primary contact for the simulation",
    "FortPlayerAnimAssets": "Container class will all the anim asset types",
    "TeamBucketCosmeticLoadoutContainer": "Container for a cosmetic loadout.",
    "EFortItemType.PrerollData": "Container for a prerolled offer",
    "RepGraphMutatorSpatializationZoneArray": "Container for an array of FRepGraphMutatorSpatializationZone.  Necessary, because we can't have a TMap<..., TArray<>>.",
    "FortAthenaMutator_GamePhaseMessageData": "Container for messages to send when a game phase is reached",
    "EUIExtensionSlot.UnderMinimapMessageContainer": "Container for messages under the minimap",
    "FortPlayerZoneSettingsComponent": "Container for mutator settings targeting a specific \"zone\"",
    "FortPlayerClassSettingsComponent": "Container for mutator settings targeting a specific player-class index",
    "FortPlayerTeamSettingsComponent": "Container for mutator settings targeting a specific team index",
    "FortSourDropperColorData": "Container for the Type Colors map",
    "TileGroupInfo": "Container for tilegroup references. Contains metadata for them",
    "CurieMaterialDefinitionBase:ElementsAllowedWhenCannotBeDamaged": "Container of element identifier tags that are allowed to interact with this material if its owning actor is immune to damage",
    "CurieElementDefinitionBase:ElementalImmunities": "Container of element identifier tags that this element is immune to",
    "CurieMaterialDefinitionBase:ElementalImmunities": "Container of element identifier tags that this material is immune to",
    "CurieMaterialDefinitionBase:ElementAttachmentImmunities": "Container of element identifier tags that this material is immune to for attachment purposes",
    "Playspace:GameplayTags": "Container of gameplay tags associated with this Playspace (this includes any tags that will identify this Playspace)",
    "MyFortCategoryData:ModifiedTagContainer": "Container of gameplay tags that define application category",
    "CurieMaterialDefinitionBase:MaterialProperties": "Container of material properties that this material has",
    "FortEventResponderComponent:FilteredEventTypes": "Container of tags that allow for filtering events based on \"tag types\" or \"situations\". If empty, the events will trigger under all circumstances.\nFor example, you can specify an event to only trigger when the actor this component is attached to is withing a specific Playspace.",
    "VoteListenerComponent:RequestedVoteIds": "Container of tags that represent the VoteIds this component is listening for and will fire events for.\nNOTE: If empty, this component will listen for all VoteIds",
    "VoteListenerComponent:RequestedVoteSelectionIds": "Container of tags that represent the VoteSelectionIds this component is listening for and will fire events for.\nNOTE: If empty, this component will listen for all VoteSelectionIds",
    "VoteListenerComponent:RequestedVoteSessionIds": "Container of tags that represent the VoteSessionIds this component is listening for and will fire events for.\nNOTE: If empty, this component will listen for all VoteSessionIds",
    "FortAthenaLivingWorldDespawnCondition:DeathTagContainer": "Container of tags to be pass to the pawn when it dies. Does nothing for non pawn actor.",
    "DynamicRollModifiersActivatedByPlayerTagContainer": "Container of the modifiers that come from player tag changes. This mostly exists to avoid nesting arrays in TMaps since that is problematic in some situations.",
    "PickupManagementSettings": "Container to make it easy to pass all the settings",
    "FortAIPawn:SimulatedProxyGameplayCues": "Container which replicates GameplayCues for simulated clients only",
    "FortBuildingSMActorRepProxyComponent:SimulatedProxyActiveGameplayCues": "Container which replicates the ActiveGameplayCues from the AbilitySysetemComponent",
    "BuildingProp_CaptureArea:InventoryChangedHandlesMap": "Contains PlayerControllers and Delegate Handles from OnInventoryChangedEvent delegates",
    "FortBotVisitedPOI": "Contains a POI that has been visited by a bot and how many times it has been completed",
    "FortSplineGroundPath:ReppedLastServerIndexToReppedPointIndices": "Contains a ReppedPointIdx",
    "FortAthenaMutator_SpawningPolicySafezone:ItemSpawningMutatorPerSafeZonePhase": "Contains a SpawningPolicyData per safe zone phase",
    "PlayerAbilitiesOnGamePhaseAbilityList": "Contains a list of abilities to add and a list of abilities to remove from players.",
    "FortAthenaMutator_SpawningPolicyBase:SpecialActorIDList": "Contains a list of the Special Actors spawned for the mini-map",
    "CatalogOffer:ItemGrants": "Contains all explicit item grants given by this offer. DOES NOT INCLUDE ANY LOOT PACKAGES or SIDE-EFFECTs, ETC",
    "FortTeamMemberInfo": "Contains all of the information about a team member that is available to the UI",
    "FortAthenaMutator_DrawTaggedPlayerIndicators:DrawingDataArray": "Contains all of the rules for which icons to draw, which tags they are associated with, and when they should be drawn.",
    "ELinkEntryQueryResult": "Contains all possible link entry query error code results",
    "EFortServerBrowserAction": "Contains all the Actions that we can have on Server Browser\nUsed to link them to action implementations",
    "PreviewUnlockData": "Contains all the data needed for the preview screen",
    "VehicleModBuildingGameplayActorAttachmentData": "Contains all the data used to spawn and attach a BGA from a vehicle mod.",
    "FabricMeshProviderMeshReferenceParamInfo:MaterialParameterInfo": "Contains all the identifying information for a property within a material",
    "FabricMeshProviderMeshReferenceParamInfo_Color:Color": "Contains all the identifying information for a property within a material",
    "FabricMeshProviderMeshReferenceParamInfo_Scalar:Scalar": "Contains all the identifying information for a property within a material",
    "RatingDescriptorDisplayData": "Contains all useful display data for a rating board descriptor. Descriptors are used to denote specific elements that contribute to a given rating (e.g. violence, drugs)",
    "AgeRatingDisplayData": "Contains all useful display data for a single rating board age rating.",
    "InteractiveElementDisplayData": "Contains all useful display data for an InteractiveElement",
    "RatingBoardDisplayData": "Contains all useful display data for an entire rating board (e.g. GRAC, IARC, ESRB)",
    "CustomCharacterPartsByKillOverrideData": "Contains an array of character customization parts used by AFortAthenaMutator_CustomCharacterPartsByKills that can be applied to player's character\n    Also contains the criteria used to decide if a player should be set to use these parts.",
    "BuildingGameplayActorLaserGrid:LocalLaserGridConnections": "Contains client information about all currently displayed laser connections.\n     Used to optimize updating the laser connections when LaserGridConnections replicates.\n     This array is NOT an exact copy of the last LaserGridConnections, it is only the previous grid connections that were rendered.\n     This array is indexed to each laser connection's instanced static mesh index in HISMComponentLaser.\n     Being indexed to HISMComponentLaser allows us to know which laser connection is drawn using which index and to minimize updates to only what has changed.",
    "CosmeticsToApplyOnItemPickupData": "Contains cosmetic definitions to apply to a player when picking up certain items",
    "OrbSpawnPoint": "Contains data about a spawn point for vault orbs.",
    "ProfileGoRequest": "Contains data about the current profilego request",
    "FortDestroyedActorRecord": "Contains data for serializing one building actor",
    "FortBuildingInstruction": "Contains data for serializing out a single building actor",
    "FortBuildingActorArray": "Contains data for serializing out an array of building actors",
    "FortQuestToolTemplatesRowDataPair": "Contains data table RowName and its associated FFortQuestToolTemplatesRow RowData",
    "OrbCountLimit": "Contains data that will be used to limit the maximum number of active orbs allowed on the mothership at any time.",
    "DanceMontagePlayInfo": "Contains data to synchronize a montage",
    "FMontageBeatSyncInfo": "Contains data to synchronize a montage",
    "MashPlayerDataEntry": "Contains data tracking each Mash's player's performance.",
    "DrawTaggedPlayerIndicatorsData": "Contains data used by AFortAthenaMutator_DrawTaggedPlayerIndicators to specify how and when to draw indicators on actors with a specified player tag.",
    "AIDirectorDebugInfo": "Contains debug info for ai director graphs",
    "FortAthenaMutator_CustomCharacterPartsByKills:PartOverrideByKillsCustomizations": "Contains each character part overrides that are available and how many kills it takes to unlock each.",
    "FortUIInfoComponent": "Contains generic UI information for the actor it is attached to",
    "RespawnAndSpectateTargetData": "Contains info about a possible Respawn target option that will be selectable when the Respawn Screen shows up",
    "AircraftFlightConstructionInfo": "Contains info used to construct an aircrafts flight path\nCan be constructed with Game State Athena to use the game mode's defaults\n     or can be set manually to create a custom flight path\nUsed in InitializeFlightPath and CalcAircraftFlightPath",
    "FortControllerMiniMapComponentVisibility": "Contains information about an individual player's ability to see a specific UFortMiniMapComponent_Discoverable.",
    "VolumePerformanceMetrics": "Contains information about performance status for this Volume, computed on the server and replicated\n      to clients",
    "FortExperienceDelta": "Contains information about the earned experience at a given cash out moment\nAll values are in -real- experience",
    "FortKatanaDashTargetingInfo": "Contains information about the katana's dash attack target.",
    "EQSActorSpawnerClassToSpawnData": "Contains information about what class to spawn when a safe zone based spawn is triggered\n    Also contains a weight so which class to spawn can be randomly selected using weights.",
    "GroundSplineLocationData": "Contains information about where the owning object relative to a given spline.\n    Used to replicate the location of the object and ensure that it stays in sync",
    "VehicleWeaponReticle3DConfig": "Contains information on how to position a dynamic 3d reticle.",
    "SkyfireSquadMemberStatusData": "Contains information relevant to the game mode that\n    need to be shared between squad members.",
    "FortAthenaMutator_EQSActorSpawner:ActorSpawningDatas": "Contains information used by a single ActorSpawner to know what to spawn and when/where/how to spawn it.\n     1 or entries MUST be set up otherwise this mutator will be functionless.",
    "EQSActorSpawnerData": "Contains information vital to defining how an EQS Actor Spawner will spawn actors",
    "FortHabaneroModeList": "Contains list of tiers for a game mode",
    "BuildingProp_CaptureArea:CaptureAreaTeamsInfo": "Contains players' controllers organized by teams",
    "FortGameMode:DeveloperPlaylistOptions": "Contains property overrides to apply relative to the CurrentPlaylistName",
    "CharacterPartAttachmentParams": "Contains settings to attach something to a predefined location on a character part",
    "CenterSafeZoneOnPOIInfo": "Contains shared information on how to determine the location\n   of a safe zone based on a POI (either a named POI or a specific location).",
    "FortGameStateAthena:StormShields": "Contains storm shields that are spawned in the world without being within a volume.",
    "FortUIStyleDefinition": "Contains styles used for various purposes in the Fortnite UI.",
    "BuildingGameplayActorChaser:ValidTargetQuery": "Contains tags for determining the validity of a potential target",
    "DBNOSettingsByActor": "Contains the DBNO settings and the actor with those settings",
    "LivingWorldSpawnAroundPlayerConfiguration": "Contains the configuration of the GS Component.",
    "FortControllerComponent_Interaction:InteractResponse": "Contains the current interaction context info",
    "FortControllerComponent_Interaction:PossibleInteractContextInfo": "Contains the current interaction context info",
    "HUDMessageData": "Contains the data need to show text message on the HUD.",
    "ScriptedObjectMovement_StaticPathStepData": "Contains the data needed to make a step from point A to point B in a static path.",
    "FortRailPointSnapData": "Contains the data needed to snap to a certain point from a different rail",
    "BuildingGameplayActorSupplyDropRadio:WaterHitResult": "Contains the hit result information when this actor lands on water.",
    "AudioClusterOneShotInfo": "Contains the info required to perform clustering behavior for a one shot event",
    "AudioClusterActorInfo": "Contains the info required to perform clustering behavior for a tracked actor",
    "SpawnGroupInstanceInfo": "Contains the info to track a current instance of a spawn group",
    "FortAthenaAIBotController:InteractContextInfo": "Contains the latest interaction context info",
    "CreativeMiniMapComponent:IconList": "Contains the list of Icons to show on the HUD. Within the Icons are the actual material and size of the thing to draw.",
    "FortAthenaPickRandomMontageStateTreeTaskInstanceData:PossibleMontages": "Contains the list of possible montages to pick from, with their weight.",
    "FortPlayerController:SpawnLoc": "Contains the location the player is currently trying to spawn in or the location of the last successful spawn",
    "PartSwapData": "Contains the parts we want to swap into the pawn",
    "FortAthenaLivingWorldPointProvidersEnabler:AvailableLinkedPointProviders": "Contains the point providers that are available to be enabled.",
    "FortLootQuotaData": "Contains the quota parameters and the information needed to pick the correct set of parameters.",
    "FortPlayerSurveyMcpDataRoot": "Contains the root of the survey stat data in Mcp.",
    "FortPlayerSurveyMcpDataSurveyMetadata": "Contains the root of the survey stat data in Mcp.",
    "IslandFileToProcessByCommandlet": "Contains the state of a Island file that is being processed (or it will be processed)",
    "FortTokenContextInfo": "Contains the text to use for replacing a token and optionally includes context tags that must match",
    "CreativeMiniMapComponent:IndicatorTextProperties": "Contains the text, font, text color, and text offset of the map marker.",
    "ThrowingToyData": "Contains the toy object reference along with its associated world item guid\nUsed to create a struct array that is replicated to the client.",
    "FortObjectiveFilter_PawnDied:DeathTags": "Contains things like vehicle tags if the killed player was in a vehicle when they died",
    "VkModuleVersionWithArtifacts": "Content definition at a specific version including all possible platforms",
    "EContentInstallState.Unknown": "Content has been installed",
    "EFortPoiSwapUserContentState.Unloading": "Content has fully loaded",
    "EContentInstallState.Pending": "Content has not been installed",
    "EContentInstallState.Error": "Content install state is unknown",
    "EContentInstallState.Installed": "Content installation is pending or chunk is being installed",
    "EFortPoiSwapUserContentState.Loaded": "Content is in the process of loading",
    "EFortActivityIsLockedReason.None": "Content is not locked.",
    "EGameModePauseWarmupMaskId.DownloadOnDemand": "Content is still being downloaded.",
    "VkContentPackage": "Content package created based on server request. These are usually output by a call to GenerateContentPackage but can be synthesized locally for debug workflows.\nGeneric content package covers artifacts for all possible platforms and has not been resolved to a build",
    "DownloadOnDemandComponent:ShelvedContents": "Content we don't have an owner project for yet. Maybe the project hasn't retrieved its metadata yet, or we haven't received the link code for the project yet.",
    "EFortQuestObjectiveStatEvent.MinigameDynamicEvent": "Context specific minigame event",
    "FortTokenContextInfo:RequiredContextTags": "Context tags required",
    "UserOptionDefinitionAssetValueEntry:GrantedContextTags": "Context tags to grant when the option is set to this asset value.",
    "UserOptionDefinitionClassReferenceValueEntry:GrantedContextTags": "Context tags to grant when the option is set to this asset value.",
    "PlaylistUserOptionClassTypeEntry:GrantedContextTags": "Context tags to grant when the option is set to this class type",
    "UserOptionDefinitionClassTypeEntry:GrantedContextTags": "Context tags to grant when the option is set to this class type.",
    "UserOptionDefinitionColorValueEntry:GrantedContextTags": "Context tags to grant when the option is set to this color value.",
    "UserOptionDefinitionEnumValueEntry:GrantedContextTags": "Context tags to grant when the option is set to this enum value.",
    "UserOptionDefinitionFloatValueEntry:GrantedContextTags": "Context tags to grant when the option is set to this float value.",
    "UserOptionDefinitionIconValueEntry:GrantedContextTags": "Context tags to grant when the option is set to this icon value.",
    "UserOptionDefinitionIntValueEntry:GrantedContextTags": "Context tags to grant when the option is set to this integer value.",
    "PlaylistUserOptionTeamTypeEntry:GrantedContextTags": "Context tags to grant when the option is set to this team type",
    "UserOptionDefinitionTeamTypeEntry:GrantedContextTags": "Context tags to grant when the option is set to this team type.",
    "DAD_MediaItemUserOption:GrantedContextTags": "Context tags to grant when the option is set to this value",
    "PlaylistOptionValue:GrantedContextTags": "Context tags to grant when the option is set to this value",
    "UserOptionDefinitionBoolMetaData:GrantedContextTagsWhenFalse": "Context tags to grant when the option value is False.",
    "UserOptionDefinitionBoolMetaData:GrantedContextTagsWhenTrue": "Context tags to grant when the option value is True.",
    "UserOptionDefinitionStringMetaData:GrantedContextTagsIfNotEmpty": "Context tags to grant when the option value is not empty",
    "UserOptionDefinition:GrantedContextTagsWhenNotOverriden": "Context tags to grant when {PropertyName}_Override is False (if applicable).",
    "CreativeRoyalePlayspaceComponent_LoadingScreen:MinigameResetContext": "Context to return when the minigame is resetting.",
    "CreativeRoyalePlayspaceComponent_LoadingScreen:PlotNotFinishedLoadingContext": "Context to return when the plot is still loading.",
    "EFortRequestedGameplayAction.ContinuePlaying": "Continue playing as now",
    "EPointLightDeviceModes.Constant": "Continuous color",
    "EFabricFloatProviderType.Instantaneous": "Continuous float providers will message their float every time it changes",
    "FortFallTeleportComponentBase:ContinuousTeleportUpdateEnabled": "Continuously updates teleport locations and checks against ForceTeleportZHeight value if this is set to 1.0",
    "EFortContrailsState.AwaitingLoad": "Contrail activation should have occurred (the delay expired or there was none to begin with), but our contrail\nassets are still loading",
    "EFortContrailsState.NotActive": "Contrails are currently blocked from being displayed or are awaiting a refresh of visibility",
    "EFortContrailsState.ActivationPending": "Contrails can be displayed and visibility was refreshed, but there is a set activation delay",
    "EFortContrailsState.Active": "Contrails have been spawned and activated. Note that we will remain in the active state even if the player's\nloadout changed or our override FX changed, so that there is a seamless transition when the new asset loads.",
    "EFortControlRecoveryBehavior.ChainControl": "Control Resist does not recover during stagger/stun/KB, allowing further impacts to continually \"juggle\" the pawn.",
    "EFortControlRecoveryBehavior.LimitedControl": "Control Resist recovers to full as soon as the pawn enters stagger/stun/KB state AND the pawn is immune to further impact until it exits the state.",
    "EFortControlRecoveryBehavior.DefaultControl": "Control Resist recovers to full as soon as the pawn enters stagger/stun/KB state. Impact is suffered as usual while in that state, and additional stagger/stun/KB can occur if the control resist is depleted again.",
    "FortValetAudioController:NormalizedSpeed_Native": "Control category",
    "AthenaPathFollowingComponent:FocusDirectionMethod": "Control how the character aligns itself during movement. This is ignored when the AIController wants to strafe (bAllowStrafe).",
    "AggregatedFunctionConfig:bAggregationEnabled": "Control if function will be aggregated at all.",
    "LoadoutVariantDef:bItemExpectedInLoadout": "Control if we expect to find the item in the loadout or not in order to apply any of the modifications.  When false, the LoadoutItem must *not* be in the loadout in order to apply the variant",
    "FortAthenaMutator_Disco:SpawnedControlPoints": "Control points that have been spawned in the mode",
    "GameplayCueNotify_Jetpack_Hovering:bPlayedFuelWarning": "Control to play warning sound once per activation",
    "LoadoutVariantDef:LocationToInsert": "Control where this variant should be applied at",
    "SpecialEventRewindComponentFrame_PlayerPawn:CompressedControlRotationPitch": "ControlRotation pitch, compressed using FRotator::CompressAxisToByte()",
    "FortControllerComponent_RealitySapling": "Controller Component for managing Reality Saplings (s21 persistent trees that players can plant and nourish)\n\nHolds reference to which saplings are owned by this player, and is in charge of getting the MCP profile data and passing that off to the game state component to spawn the persistent saplings at match start.",
    "FortControllerComponent_QuickbarRestore": "Controller Component that works with AFortAthenaMutator_QuickbarRestore to allow a client player's quickbar's order to be restored upon respawning.\nThis is necessary because spectating can trash a the quickbar order.",
    "FortPickupInteractOverrideComponent_Augments": "Controller component class that helps override the pickup interaction context info when interacting with an augment pickup.\n    Used to help augment pickups display a special interaction prompt widget.",
    "SkyfireControllerComponent": "Controller component for Skyfire-related gameplay.\nUsed for hiding storm effects while on the mothership.",
    "FortControllerComponent_Swinging": "Controller component for managing swinging character movement modes",
    "FortControllerComponent_VictoryCrowns": "Controller component for tracking and granting player's victory crowns",
    "FortUIManagerComponent_VictoryCrowns": "Controller component for tracking and granting player's victory crowns",
    "BuildingTrapFloor_Launch:ForceFeedbackClass": "Controller force feedback to play when this trap is triggered successfully",
    "FortDamageSource:InstigatorController": "Controller instigating the damage",
    "FortAthenaMutator_Ashton:VillainLeaderPC": "Controller of the player that is currently the villain leader",
    "TeamChangeRequest:RequestingController": "Controller requesting the team change",
    "FortReplayMovableSpotLightPilotController:OriginalControllerRef": "Controller that was active before this was spawned",
    "FortHostSessionParams:ControllerId": "ControllerId of player initiating session",
    "FortTeamInfo:TeamMembers": "Controllers on this team; Only valid on the server",
    "FortDaySequenceActor:SkyLightCubeMapBlend": "Controls Cube map blending on low end platforms",
    "SubmixEffectDynamicQuadDelaySettings:Pan": "Controls Rotation of the taps",
    "FortMapIconDefinition:MapIcon": "Controls Which Icon is on the MiniMap/Map",
    "EFortFrontEndFeature.STWArmory_CollectionBook": "Controls access to the collection book screen, which is accessible from the STW armory tab",
    "EFortFrontEndFeature.STWArmory_Transform": "Controls access to the transform screen, which is accessible from the STW armory tab",
    "DynamicTapDelayInfo:LowPass": "Controls brightness of tap",
    "FortAthenaMutator_Wax:RespawnSettings": "Controls for custom spawning logic",
    "EFortItemViewRotationMode": "Controls how an item is rotated when being viewed in the UI. This is really more UI-related, but since it is specified by the item, needs to exist in the same module.",
    "HoverDroneMovementComponent:FullAirFrictionVelocity": "Controls how much Deceleration to apply based on velocity. At this velocity, air friction will be 100% of Deceleration. Uncapped.",
    "FortGameplayCueSpawnCondition:Significance": "Controls how soon this effect is distance culled (low is culled first)",
    "FortniteUserInterfaceSettings:HeightScaleCurve": "Controls how the UI is scaled at different resolutions based on the DPI Scale Rule",
    "FortniteUserInterfaceSettings:WidthScaleCurve": "Controls how the UI is scaled at different resolutions based on the DPI Scale Rule",
    "FortAIDirector:bAsyncProcessUpdateAliveAIs": "Controls if we should use the async processing scheme for update alive AIs (should be more laggy but less cpu intensive)",
    "FortAIDirector:bAllowProcessPlayerTargeting": "Controls if we should use the player targeting queries in UpdateLODPlayerTargeting",
    "DynamicXpCircuitBreaker:FrequencyThresholdMult": "Controls limits on the number of times an Accolade can trigger for a player in a single game session to avoid 'glitches'.",
    "FortWeapon:NDCImpactFX": "Controls spawning of impact FX via Niagara Data Channels.",
    "FortDaySequenceActor:SunAngle": "Controls the angle of the sun if 'Use Sun Angle' is true",
    "SavedSpectatorCameraState:FocusSettings": "Controls the camera's focus.",
    "FortAthenaVehicle:FuelCharge": "Controls the fuel for the vehicle.",
    "FortControllerComponent_SmartBuild:TurboInterval": "Controls the interval for the timer loop as it tries to build another piece when smart build is active.",
    "FortPlayerController:TurboBuildInterval": "Controls the interval for the timer loop as it tries to build another piece.",
    "FortPlayerController:TurboDeleteInterval": "Controls the interval for the timer loop as it tries to delete another piece.",
    "FortPlayerController:TurboPlaceInterval": "Controls the interval for the timer loop as it tries to place another actor in creative mode with the Move Tool.",
    "FortPlayerController:TurboBuildRequestFailedInterval": "Controls the interval for the timer loop if a sent building request failed (doesn't not affect TB timer when it is currently running).",
    "PropertyOverrideData:OverrideMode": "Controls the method in which property overrides are applied against the target object",
    "FortAthenaMutator_DadBro:RespawnLogicData": "Controls the parameters used to respawn the player, WITH THE EXCEPTION OF DIRECTION DEVIATION (ignored)!",
    "FortCreativeStormShield:ClockTickingAudioVolumeCurve": "Controls volume/pitch of the clock ticking audio right before the shield shrinks.",
    "FortSafeZoneIndicator:ClockTickingAudioVolumeCurve": "Controls volume/pitch of the clock ticking audio right before the shield shrinks.",
    "FortAthenaMutator_Skyfire:bShouldSkyfireSquadMemberUIBeEnabled": "Controls whether or not the skyfire squad member UI should be enabled (i.e. if the mutator should send squad\n    member data to SkyfireControllerComponents in UpdateSkyfireSquadMemberMothershipStatus for the SquadMemberStatusWidget to display).",
    "FortFirstPersonModifier:bEnabled": "Controls whether or not this FortFirstPersonModifier can be activated.",
    "FortControllerComponent_MapDiscoverability:bFlipYInput": "Controls whether the Y needs to be flipped for material input.",
    "FortEditorToolsSettings:bEditorFlashlightEnabled": "Controls whether the editor flashlight is enabled. Set by hitting the toggle button on the level editor toolbar",
    "PlayspaceComponent_SpatialActorTracker:bAlwaysBroadcastPerActorAdded": "Controls whether this component fires separate events for Initial scan compared to adding individual actors.\nReceiving only individual actors is easier to implement against, but is considered less performant.\nSome legacy creative systems require AlwaysBroadcastPerActorAdded to be true.",
    "CreativeFunctionalTestConditionComponent_CheckInventory:ExpectedInventory": "Controls which items are expected at the end of the test",
    "CreativeFunctionalTestConditionComponent_ReceiveOnChannel:ChannelIds": "Controls which message channel we need to receive on in order for our condition to be satisfied",
    "FortCurieBGA": "Convenience class of a BGA already pre-configured to have a Curie element component",
    "SkyfireItemsAndAbilitySet": "Convenience struct for pairing items and an ability set that are given at the same time",
    "PoseDeformationQueryResults_Arms": "Convenience structure for accessing the deformation query results in Blueprint.",
    "FortNPCConversationParticipantComponent": "Conversation Component use by NPCs",
    "FortNonPlayerConversationParticipantComponent": "Conversation Component use by non player conversation participant, aka static objects, billboards, etc.",
    "FortPlayerConversationUIComponent:DialogWidgetSoftClass": "Conversation Dialog Screen",
    "NPCConversationIndicatorMessage": "Conversation Indicator Message used for adding and removing indicators for NPCs.",
    "FortPlayerConversationUIComponent:DialogMarkerSoftClass": "Conversation Indicator Widget",
    "FortPlayerConversationUIComponent:MobileDialogWidgetSoftClass": "Conversation Indicator Widget",
    "FortNPCConversationParticipantComponent:ConversationRuntimeParameters": "Conversation RuntimeParameters",
    "EFortAnnouncementChannel.Tutorial": "Conversation announcement, affects talking head UI. Merge this channel with primary to stop them from happening simultaneously",
    "EFortCostInfoTypes.Conversion": "Conversion cost",
    "FortMissionStormShield:MapWorldScale": "Conversion scale for when translating Radius from stormshield to Radius on main map in UI",
    "PickupTagConvertInfo:ConvertDamage": "Convert damage that should be dealt to the AI Pawn when picking up a pickup with any matching tag in PickupTags",
    "FortPhysicsBall:LiftFactor": "Convert this fraction of current horizontal velocity to upward velocity per second.",
    "EFortQuestObjectiveItemEvent.Convert": "Convert/Evolve an item into a new item",
    "EFortQuestObjectiveStatEvent.Convert": "Convert/Evolve an item into a new item",
    "ELevelSaveRecordVersion.TimestampConversion": "Converted Timestamps to linearly increasing event indices.",
    "EConvertedType": "Converted Type",
    "FortPawnComponent_Convert:ConvertedType": "Converted Type for this component",
    "ConvertedComponentInfo": "ConvertedComponentInfo : contains the converted pawn component list for a type",
    "VkFileSizes:FileSizeMap": "Cooked filename mapped to its file size info",
    "ValkyrieProjectSizeStats:CookedSize": "Cooked size stats that should be reported (does not include dependencies)",
    "AIRuntimeParametersSmartObjectActivity:Cooldown": "Cooldown after which we allow to re-use this activity",
    "AIRuntimeParametersSmartObjectActivityConfig:ActivityCooldownOnFinished": "Cooldown after which we allow to re-use this activity when the AI finished it, in seconds",
    "FortAthenaAISmartObjectActivityConfig:ActivityCooldownOnFinished": "Cooldown after which we allow to re-use this activity when the AI finished it, in seconds",
    "AIRuntimeParametersSmartObjectActivityConfig:ActivityCooldownOnInterrupted": "Cooldown after which we allow to re-use this activity when the AI was interrupted, in seconds",
    "FortAthenaAISmartObjectActivityConfig:ActivityCooldownOnInterrupted": "Cooldown after which we allow to re-use this activity when the AI was interrupted, in seconds",
    "SKPushVehicleInPersistent:bPedalForceCooldown": "Cooldown before the pedal force can be applied.",
    "FortRangedWeaponStats:AutofireCooldown": "Cooldown between autofire trigger pulls. Only affects non-automatic weapons.",
    "FortKeepAmmoStash:Cooldown1": "Cooldown on pickup spawn in 1 player game",
    "FortKeepAmmoStash:Cooldown2": "Cooldown on pickup spawn in 2 player game",
    "FortKeepAmmoStash:Cooldown3": "Cooldown on pickup spawn in 3 player game",
    "FortKeepAmmoStash:Cooldown4": "Cooldown on pickup spawn in 4 player game",
    "MilkshakeControllerComponent:BuildingDamageFXCooldown": "Cooldown per building before building damage FX can be spawned on that building again",
    "FortPlayerPawnAthena:LandFXCoolDownTime": "Cooldown time between each dust land FX draw",
    "FortAthenaMutator_Mash": "Cooperative LTM mutator where players fight against waves of NPC enemies.\nMode ends with a boss monster fight.",
    "EPhaseCommit.One": "Coordinator will simply commit the change without participant acknowledgement",
    "EPhaseCommit.Two": "Coordinator will wait for Participant acknowledgment\nCoordinator will send the Participant an acknowledgment confirmation",
    "EPhaseCommit.Three": "Coordinator will wait for all Participants acknowledgments\nCoordinator will notify all Participants when all Participants have sent acknowledgments\nCoordinator will wait for \"ReadyToCommit\" from all Participants before committing\nWill automatically downgrade to a Two-Phase Commit if there is only a single Participant",
    "FortPrefabSpawner:CompatiblePrefabs": "Copy of all the prefabs that can be used based on our requirement tags, can be visualized in BP so that we know what indexes map to",
    "PersistenceFrameworkSaveData_Quest": "Copy of quest's data that needs to persist.\n\nCurrent version.",
    "PersistenceFrameworkSaveData_QuestObjective": "Copy of quest's objectives data that needs to persist.",
    "FortAthenaMutator_SafeZoneOrderOptimize:Routes": "Copy of routes that were provided to GenerateRouteOrder().\nReplicated for debug purposes only.",
    "FortCharacterVehicle_Ostrich:CachedWeaponState": "Copy of the previous state of the weapon",
    "FortVehicleSeatWeaponComponent:CachedWeaponState": "Copy of the previous state of the weapon",
    "EFortWeaponCoreAnimation": "Core Animation Poses for base weapon types",
    "FortWeapon:WeaponCoreAnimation": "Core Animation to use for this weapon",
    "CreativeRoyaleIslandPlayspace": "Core Creative Royale playspace that encompasses the entire map\nOwns components needed to run Creative. Spawned by the Creative Royale Island Volume\nwhich owns the remaining components for Creative logic.",
    "FortControllerComponent_VictoryCrowns:VictoryCrownAccountData": "Core VictoryCrown account data state. Cached from profile VictoryCrown account item whenever updated. Contains data to be persisted to profile on end of match",
    "FortControllerComponent_CampsiteAccountItem:CampsiteAccountData": "Core campsite account data state. Cached from profile Campsite account item whenever updated. Contains data to be persisted to profile on end of match",
    "SpecialEventRewindComponent_PlayerPawn:ReplicatedRecording": "Core data for the server's recording",
    "FortGameStateAthena": "Core game state class for Athena",
    "FortControllerComponent_RealitySapling:StoredRealitySaplings": "Core sapling account data state. Cached from profile sapling account item whenever updated. Contains data to be persisted to profile on end of match",
    "FortAthenaAIBotController:Skill": "Core skill rating, matching column in the curve",
    "EAthenaGameMsgType.CornerCriticalMessage": "Corner critical/important message",
    "EAthenaGameMsgType.CornerIntro": "Corner intro message",
    "EFortBuildingType.Corner": "Corner mesh that connects walls",
    "EAthenaGameMsgType.CornerMessage": "Corner normal message",
    "BuildingCorner:PrimaryWall": "Corners are attached to two walls",
    "ManagedGameplayTagDataTableItem:DataTable": "Corresponding DataTable. Currently the user must create this manually and hook it up into the auto populated list in UGameplayTagTableManager.",
    "QuickHealPriorityExtension:QuickhealPriorityGroupTag": "Corresponding Quickheal priority group to map this extension to.",
    "FortGameplayDataTrackerActorStateConfig:EventTag": "Corresponding event tag to use for the accumulated total of tracked actors in this state",
    "FortEmporiumItemLicenseData:License": "Corresponding licence enum",
    "FortEmporiumSortEntry:Mode": "Corresponding sort enum",
    "FortMcpCollectionsBulkUpdateEntry": "Corresponds to BulkUpdateCollections.Entry",
    "FortMcpCollectedItemProperties": "Corresponds to CollectionItem.CollectedItemProperties",
    "DeleteActorRecord:ActorID": "Corresponds to an object in the base level or NewObjectRecord",
    "TrackedObjective:IndicatorPresetIndex": "Corresponds to an preset for displaying the objective in the HUD",
    "FortPlacedBuilding": "Corresponds to structures in OutpostManager.java",
    "CorruptionCalendarEventData:StartPercent": "Corruption spread is defined on a raneg of [0, 1] for the entire map. Events causing corruption after the initial spread will start some value on that range.\n              For example, and event that starts at 20% corruption should have a value of 0.2. This allows corruption to be hand tweaked to better fit movement.",
    "CorruptionPauseEvent:PercentDurationToPause": "Corruption spread is on range [0,1]. This pauses some portion of that range.\n              eg pause 0.2 that happens at spread 0.1 means corruption will not not spread after 0.1, until 0.3 is reached",
    "CosmeticFlowData": "Cosmetic Flow Data is a simple utility class designed to hold data between executions of cosmetic steps or substeps.\n\nData is stored based on a provided name key, but is also validated for type if requested.",
    "FortGameplayCueNotifyAthena_FallDamageImmunity": "Cosmetic Gameplay Cue that shows that a player has fall damage immunity.",
    "FortConditionalCosmeticModification:CosmeticModification": "Cosmetic changes to apply",
    "ECharacterCosmeticType.CharacterItemDefinition": "Cosmetic is defined by a CID",
    "ECharacterCosmeticType.CharacterBlueprint": "Cosmetic is defined by the components inside this Character Blueprint",
    "EFortItemType.Apparel": "Cosmetic item which represents subcustomization for a larger item (eg, Outfits, Glider)",
    "FortLobbyBeaconPlayerState:CosmeticLoadout": "Cosmetic that can be displayed in the lobby for remote players",
    "SoundEffectVariantDef": "Cosmetic variant used for apply sound effects",
    "TagDrivenVariantDef": "Cosmetic variant where different variants are injected into the loadout based on meta tag conditions",
    "EFortBangType.CosmeticsTab": "Cosmetics",
    "EFortGameFeature.PredownloadedCosmetics": "Cosmetics that are installed instead of downloaded on demand",
    "FortAbilityCost": "Cost for activating an ability, lists a source and a vale",
    "FortCreativeCostComponent:ItemCosts": "Cost of item in resources",
    "BuildingValueRules:DistanceFromObjectiveWeight": "Cost per % max distance from the attacker.  Percentage is calculated based on max grid distance.",
    "HomebaseNodeLevel:Cost": "Cost to purchase the level",
    "EAdHocSquads_SquadUpResult.Failure_Custom": "Could NOT join squad  for some reason defined in a derived class.\n     This applies to any value at or above Failure_Custom.",
    "EAdHocSquads_SquadUpResult.Failure_Unknown": "Could NOT join squad for some unknown reason.",
    "EAdHocSquads_SquadUpResult.Failure_BothPlayersAreAlreadyInTheSameAdHocSquad": "Could NOT join squad, both players are already in the same ad hoc squad.",
    "EAdHocSquads_SquadUpResult.Failure_BothPlayersAreInAdHocSquads": "Could NOT join squad, both players were already in ad hoc squads.",
    "EAdHocSquads_SquadUpResult.Failure_CouldNotCreateAdHocSquad": "Could NOT join squad, could not find an empty squad to use",
    "EAdHocSquads_SquadUpResult.Failure_OneOrMorePlayersWereNull": "Could NOT join squad, one or both players were nullptr",
    "EAdHocSquads_SquadUpResult.Failure_MutatorIsDisabled": "Could NOT join squad, the ad hoc squad mutator is currently disabled.",
    "EAdHocSquads_SquadUpResult.Failure_TooManyPlayersToMergeSquads": "Could NOT join squad, the combined number of players on both squads is too big to all join a single squad.",
    "EAdHocSquads_SquadUpResult.Failure_CalledOnClient": "Could NOT join squad, the function was called on the client, it ONLY works if called on the server",
    "EAdHocSquads_SquadUpResult.Failure_SquadIsAlreadyFull": "Could NOT join squad, the squad you tried to join was already full.",
    "FortAnalyticsEventDenylistEntry:PlaylistKey": "Could be a PlaylistName or a PlaylistType (EFortGameType), or Empty (for Type=All) depending on the Type.",
    "ELoginResult.Console_AuthFailed": "Could not auth using console account",
    "ECraftingIngredientReqError.NotEnough": "Could not find an item that matches the requirement",
    "FortPickupsParent:bIsLootGiftForOthers": "Could not find anyone setting this by default, even though SetupBaseMIDs consumes it before SetupStretchMIDs would ever set it",
    "ECreateAccountResult.Console_LoginFailed": "Could not login to console online account",
    "ELoginResult.Console_LoginFailed": "Could not login to console online account",
    "FailedToReachPOI": "Count how many times a SquadMember failed to reach a POI",
    "MidiMusicInfo:CountIn": "Count in, in measures. How much of the authored audio content is part of a count in.\n(Note: this setting will be ignored if a countin is specified in the midi file)",
    "MoggMusicInfo:CountIn": "Count in, in measures. How much of the authored audio content is part of a count in. (Note: this setting will be ignored if a countin is specified in the midi file)",
    "BotPOIDebugInfo:NavMeshLocationsCount": "Count of NavMesh locations generated by EQS",
    "CachedItemData:item_loaded_ammo": "Count of any ammo currently loaded",
    "CachedItemData:item_phantom_ammo": "Count of any ammo currently stored as phantom ammo",
    "FortActorComponent_MultiInteract:InteractingPlayerCount": "Count of players currently interacting",
    "FortControllerAIBotComponentTelemetryData_PassiveHealer:InteractionCount": "Count of players interaction (to be heal) with this NPC",
    "VoteData:NumVotersWithMaxVotes": "Count of players that have reached max number of vote changes",
    "FortQuestObjectiveStatXPTableRow:CountThreshhold": "Count threshhold for triggering - must cross this threshhold of stat event count to activate.  Once the stat fires, it will not be reset or fired again during the match.",
    "EFortMinigameState.Warmup": "Countdown",
    "FortCountdownSounds": "Countdown Sound entry.  Play the given sound in a certain time window, then fade it out when we reach the end of the window",
    "FortAthenaMutator_Chrome:CountdownDuration": "Countdown duration before the race begins",
    "FortWeapon:BurstFireCounter": "Counter tracking the number of cartridges fired since the last trigger press",
    "FortAthenaMutator_Crucible:CourseData": "Course data",
    "EFortCraftFailCause.CraftingQueueFull": "Crafting Queue is full",
    "EKeepContainerType.Storeroom": "Crafting ingredients",
    "ECraftingObjectState.OverCrafting": "Crafting object has finished crafting, item ready for pickup",
    "ECraftingObjectState.Resetting": "Crafting object has over crafted the ready object because it wasn't picked up (optional state)",
    "ECraftingObjectState.CraftingPaused": "Crafting object is currently crafting something",
    "ECraftingObjectState.CraftingPausedDecaying": "Crafting object is currently crafting, but the timer is paused",
    "ECraftingObjectState.Ready": "Crafting object is currently crafting, but the timer is paused, and is slowly rewinding",
    "ECraftingObjectState.TotalStates": "Crafting object is currently resetting back to idle (cannot craft during this time)",
    "ECraftingObjectState.Crafting": "Crafting object is sitting waiting to start crafting",
    "CraftingMultiKey": "Crafting objects can (optionally) craft different things at the same time. This ID separates them.\nIt's intentionally ambiguous, so games can identify crafts differently (e.g by recipe, or by instigator, or both).\nFor simple crafting objects that just craft one thing at a time, the key can be ignored.",
    "TrapItemDefintionDesignerData:CraftingRecipeForm": "Crafting requirements data table",
    "EBuildingActorComponentCreationPolicy.Lazy": "Create a component when it is first accessed. Client-side access of the ability system component before it is created and replicated will return nullptr.",
    "EFortQuestObjectiveStatEvent.AthenaCraft": "Create a specific item using Crafting in BR. Target is the item that was crafted.",
    "EFortQuestObjectiveItemEvent.Craft": "Create a specific item using the Crafting skill",
    "EFortQuestObjectiveStatEvent.Craft": "Create a specific item using the Crafting skill. Target is the tags of the schematic item definition that was crafted.",
    "EFortAbilityTargetDataPolicy.SimulateOnServer": "Create target data directly on server (more resistant to exploits, use for presets like \"affects owner\")",
    "EFortAbilityTargetDataPolicy.ReplicateToServer": "Create target data on client and replicate to server (more forgiving detection, use for aiming)",
    "EFortBuildingInitializationReason.Spawned": "Created at runtime",
    "FortGameStateAthena:AircraftPathBrush": "Created from",
    "FortGameStateAthena:MinimapBackgroundMID": "Created from MiniMapBackgroundDrawingMaterial",
    "FortGameStateAthena:FullMapCircleMID": "Created from MiniMapCircleDrawingMaterial",
    "FortGameStateAthena:MinimapCircleMID": "Created from MiniMapCircleDrawingMaterial",
    "FortGameStateAthena:MinimapNextCircleMID": "Created from MiniMapCircleDrawingMaterial",
    "FortGameStateAthena:FullMapNextCircleMID": "Created from MiniMapCircleDrawingMaterial\nThis is used when a tag is set to allow players to see one step closer to the final circle",
    "FortRelevancyZoneIndicator:MinimapNetRelevancyCircleMID": "Created from MiniMapNetRelevancyCircleMaterial",
    "FortRelevancyZoneIndicator:MinimapNetRelevancyOverlayMID": "Created from MiniMapNetRelevancyOverlayMaterial",
    "FortGameStateAthena:MinimapSafeZoneBrush": "Created from MinimapBackgroundImage/MinimapBackgroundMID",
    "FortGameStateAthena:MinimapCircleBrush": "Created from MinimapCircleImage/MinimapCircleMID",
    "FortGameStateAthena:MinimapNextCircleBrush": "Created from MinimapCircleImage/MinimapCircleMID",
    "FortGameStateAthena:FullMapCircleBrush": "Created from MinimapCircleImage/MinimapCircleMID\nHas extra parameters set for the full map view",
    "FortGameStateAthena:FullMapNextCircleBrush": "Created from MinimapCircleImage/MinimapCircleMID\nThis is used when a tag is set to allow players to see one step closer to the final circle",
    "FortRelevancyZoneIndicator:MinimapNetRelevancyCircleBrush": "Created from MinimapNetRelevancyCircleMID",
    "FortRelevancyZoneIndicator:MinimapNetRelevancyOverlayBrush": "Created from MinimapNetRelevancyOverlayMID",
    "ELevelManagementTerrainType.Terrain": "Created using the Level Instance Device.",
    "FabricSequencerSustainComponent": "Creates instanced static meshes to visualize sustains on grid squares - on a Note Sequencer Device.",
    "FortNavGraphGoal": "Creates new flow field on navigation graph",
    "EFortWorldManagerState.WMS_CreatingNewWorld": "Creating a new world due to a load failure",
    "OnlineAccountTexts:CreateDeviceAuth": "Creating device auth",
    "FortTransientQuestGrant:CreationTime": "Creation time for this quest",
    "EFortPlaylistType.Creative_LTM": "Creative",
    "FortEmporiumItemData:LicenseType": "Creative Commons, Commercial, Free, etc",
    "PlayspaceComponent_GlobalCurrencyOverride": "Creative Global Currency Playspace component\n\nThis component stores a currency resource to override existing currency resource",
    "FortCreativeMoveTool:DeleteObjectsInteractionBehavior": "Creative Interaction for deleting objects. Thin wrapper to provide hooks for Blueprint, and leverages allowed/denied actors.",
    "FortCreativeMoveTool:PlaysetPreviewInteractionBehavior": "Creative Interaction for designating a place for a the selected playset to spawn.",
    "FortAthenaVehicle:bEnforceMinigameClassRestriction": "Creative Only - If this is true, only members with the same class ID as the vehicle will be able to enter the vehicle - client and server",
    "FortAthenaVehicle:bEnforceTeamRestrictionForMiniGame": "Creative Only - If this is true, only members with the same team ID will be able to drive the vehicle - minigame client only",
    "FortAthenaVehicle:MinigameClassID": "Creative Only - The class associated with this vehicle - client and server. Value of -1 will accept any player with any class other than None",
    "FortCreativeMoveTool:WantedAlwaysMoveFreely": "Creative Option variable for hooking into UI and persistent settings.",
    "FortCreativeMoveTool:WantedCameraSpacePositioning": "Creative Option variable for hooking into UI and persistent settings.",
    "FortCreativeMoveTool:WantedHitTraceRule": "Creative Option variable for hooking into UI and persistent settings.",
    "FortCreativeMoveTool:WantedIgnoreRecentlyPlacedTime": "Creative Option variable for hooking into UI and persistent settings.",
    "FortCreativeMoveTool:WantsGravityOnPlace": "Creative Option variable for hooking into UI and persistent settings.",
    "FortCreativeMoveTool:WantsPrecisionGridSnapping": "Creative Option variable for hooking into UI and persistent settings.",
    "EMinigameGameEndPostGameType": "Creative Royale custom post game type",
    "EMinigameGameEndCustomPostGameAnimationColorSet": "Creative Royale custom postgame animation styles",
    "EMinigameGameEndCustomPostGameAnimationStyle": "Creative Royale custom postgame animation styles",
    "FortCreativeStatManagerComponent": "Creative Stat Manager component handles player defined stat integration with FortMinigameStatsComponent.",
    "EFortItemType.CreativeUserPrefab": "Creative User Prefab",
    "FortCreativeAccoladesComponent": "Creative accolades component handles granting accolades to a player.",
    "FortPlayerControllerAthena:ClientRespawnText": "Creative mode HUD notification texts.",
    "FortGameState:CreativeQuestManager": "Creative quest manager pointer",
    "CreativeRoyalePlayspaceComponent_LoadingScreen": "Creative royale playspace component that allows creative royale to insert loading screens during plot load, start of game spawning and returning to island",
    "CreativeRoyalePlayspaceLoadWaitComponent": "Creative royale playspace component that allows creative royale to insert loading screens during plot load, start of game spawning and returning to island",
    "EFortItemType.CreativePlot": "Creative save slot",
    "FortCreativeTag:Category": "Creative tag category (row name within the creative tag categories data table). // @todo: Add details customization to easily select category.",
    "FortCreativeTagCategory:Icon": "Creative tag category icon.",
    "FortCreativeTag:Icon": "Creative tag icon.",
    "FortCreativeTagsHelper:CreativeTags": "Creative tags.",
    "FortAthenaMutator_PlayerSettingsBase:GameResourcesCreativeTag": "CreativeTag to search for on ItemDefinitions when processing for DropAllGameResourcesOverride",
    "VkLinkCodeInfo:CreatorName": "Creator name",
    "BuildingProp_CreatureManager:AITypeOptions": "Creature Type options. These soft object pointers will be loaded when the minigame starts",
    "EVehicleTrickType.StuckLanding": "Credit given here.",
    "EFortDamageZone.Critical": "Critical damage zone e.g. headshot or weak spot should apply > 1.0 damage",
    "EFortTheaterMapTileType.CriticalMission": "Critical mission tile, always active with special ramifications for matchmaking",
    "FortAthenaMutator_MusicEvents:CrossfadeTime": "Crossfade time across music events.  This will likely be shorter than the normal fade time for a given event.",
    "FortCreativeStormShield:MovementAudioCrossfadeCurve": "Crossfades between \"stationary\" and \"moving\" audio loops.",
    "FortSafeZoneIndicator:MovementAudioCrossfadeCurve": "Crossfades between \"stationary\" and \"moving\" audio loops.",
    "FortAthenaStateTreeCrouchTaskInstanceData:Actor": "Crouch Actor",
    "FortPawnStats:SpeedCrouchedRun": "Crouched running speed for the pawn",
    "FortPawnStats:SpeedCrouchedSprint": "Crouched sprinting speed for the pawn",
    "ItemsToDropOnDeath:ItemToDrop": "Ctor",
    "ItemsToGive:ItemToDrop": "Ctor",
    "ItemsToGiveAtPhase:ItemToDrop": "Ctor",
    "ItemsToSpawn:ItemToDrop": "Ctor",
    "RelevantPawnArray:PlayerPawns": "Ctor",
    "FortKeyframedMovementKeyframeData:CubicBezierEasingParameters": "Cubic-bezier easing parameters for this keyframe. These should match the CSS\nstandard form {X1, Y1, X2, Y2} (where X0=Y0=0 and X3=Y3=0 implicitly)\nX1 and X2 must be in [0, 1].",
    "TempestTornadoForcesComponent:PawnInCue": "Cue added to a pawn when they are in the tornado",
    "TempestTornadoForcesComponent:PlayerNearCue": "Cue added to a player when they are near but not in the tornado",
    "TempestTornadoForcesComponent:TornadoActiveCue": "Cue added to the base of the tornado once it touches down",
    "FortProjectileCues:InAirLooping": "Cue that is added when the projectile is spawned and loops until it hits or explodes.",
    "FortProjectileCues:Bounce": "Cue that is spawned when the projectile bounces.",
    "FortProjectileCues:UnderwaterExplosion": "Cue that is spawned when the projectile explodes underwater. This keeps us from moving the GC to the water surface.",
    "FortProjectileCues:Explosion": "Cue that is spawned when the projectile explodes.",
    "FortProjectileCues:HitPawn": "Cue that is spawned when the projectile hits a pawn.",
    "FortProjectileCues:HitWorld": "Cue that is spawned when the projectile hits the world.",
    "FortProjectileCues:HitWater": "Cue that is spawned when the projectile hits water.",
    "FortProjectileCues:Spawn": "Cue that plays when the projectile is spawned.",
    "FortCurieGlowFadeRequest:CurieComponent": "Curie component having the glow applied",
    "FortCuriePendingElectricityArcRequest:RequestingComponent": "Curie component making the request",
    "BuildingActor:CurieEntityIdentifier": "Curie entity identifier for the building. Required to be specified for building actors wishing to participate in Curie.",
    "GlobalCurrencyTrackedData:TotalCurrencyEarnedInMatch": "Currency earned during the match",
    "BattlePassOfferData:CurrencyId": "Currency needed to purchase the battle pass offer",
    "CatalogDynamicBundle:CurrencyType": "Currency type this bundle is in",
    "FortAIPawnVariantDefinition:CurrentWeight": "Current (cached) weight.  Not valid outside of UFortAIPawnVariant::PickPawnClass.",
    "BagelDifficultySettings:AIEffectMultiplier": "Current AI effect chance multiplier",
    "MashDifficultySettings:AIEffectMultiplier": "Current AI effect chance multiplier",
    "FortAIPawn:CurrentAIRotationRate": "Current AI rotation rate",
    "BotDebugInfo:AlertLevel": "Current Alert Level",
    "FortGameplayCueNotifyAthena_AIAlertState:CurrentAlertStateComponent": "Current Alert State component used to display state. Can be nullptr if AlertState '?' is not required",
    "SparksMusicPlayspaceAudioState:CurrentTempo": "Current BPM",
    "BotDebugInfo:BTActiveTasks": "Current BehaviorTree Task",
    "FortWindImpulseRadius:CurrentBlendTime": "Current BlendTime remaining (starts at BlendTime and then decrements to reach it.",
    "FortWindImpulseCylinderDelta:SectionCurrentBlendTime": "Current BlendTime remaining for this section (starts at BlendTime and then decrements to reach it).",
    "CaptureComponent:CaptureState": "Current CaptureState that will be updated when SetCaptureState is called",
    "CaptureComponent:PreviousCaptureState": "Current CaptureState that will be updated when SetCaptureState is called",
    "FortEncounterSettings:DifficultyIndex": "Current Difficulty settings",
    "FortPartyMemberRepData:DownloadOnDemandProgress": "Current Download Progress for valkyrie modes",
    "FortAthenaMutator_Heist:SpawnedExitCraftList": "Current ExitCraft being used in the mode",
    "FortGameplayCueNotifyAthena_AIAlertState:CurrentGameplayEffectLevel": "Current GE level. 0 = Alerted but not in combat (? filling icon). 1 = In Combat (! icon)",
    "FortAthenaMutator_GliderRedeploy:bGliderRedeploy": "Current Glider Redeploy override",
    "AthenaAIServiceGroupInfo:GroupLeader": "Current Group Leader",
    "FortPawnComponent_AIGroup:GroupID": "Current GroupID, -1 is invalid",
    "FortAthenaStateTreeLookAroundTaskInstanceData:LookAtDuration": "Current LookAt Duration",
    "FortHexMapMarkerBase:CurrentMIDs": "Current MID - new MID created whenever SetMesh() is called",
    "FortAthenaPatrolPath:Mode": "Current Patrolling Mode (BackAndForth, Loop)",
    "BuildingTrapFloor_Turret:Target": "Current Pawn target of the turret",
    "FortAthenaMutator_Bagel:CurrentPhase": "Current Phase of the LTM",
    "FortAthenaMutator_Mash:CurrentPhase": "Current Phase of the LTM",
    "FortAICombatTokenConsumerComponent:CurrentTargetTokenProvider": "Current TargetTokenProvider",
    "CaptureComponent:CaptureTimeCurrent": "Current Time to be reseted or updated when Capturing",
    "FortAthenaStateTreeInteractTaskInstanceData:Timer": "Current Timer",
    "FortAthenaStateTreeLookAroundTaskInstanceData:Timer": "Current Timer",
    "FortEncounterSettings:ZoneIndex": "Current Zone index",
    "FortPlayerController:ActorUnderReticle": "Current actor under the reticle",
    "FortAthenaPatrolPath:CurrentConcurrentUsage": "Current actors count assigned to this patrol path.",
    "FortWindImpulseRadius:CurrentRadius": "Current actual Radius, which will change over BlendTime to Radius.  Should never be set directly.",
    "FortWindImpulseRadius:CurrentMagnitude": "Current actual magnitude, which will change over BlendTime to Magnitude.  Should never be set directly.",
    "FortCreativeMoveTool:RotationOffset": "Current actual rotation offset, which interpolates toward the target rotation offset",
    "FortWeapon:CurrentAdjustedAimDirection": "Current aim direction for this weapon, adjusted based on whether the damage start location is the camera or muzzle",
    "LevelInstanceListElement:CurrentMemory": "Current amount of memory the level uses.",
    "FortAxisSmoothing:Samples": "Current average axis movement/sample",
    "MusicEmitterComponent:mBar": "Current bar",
    "MusicEmitterComponent:mBeat": "Current beat",
    "PlayspaceManagerComponent:UnhandledEnterEvents": "Current begin overlap events that are waiting processing. These will help give context to concentric volumes which could give multiple enter events at one time.",
    "ActiveFortCamera:BlendWeight": "Current blend weight in blend stack",
    "FortPlayerController:CurrentResourceLevel": "Current buildable resource level",
    "FortPlayerController:CurrentResourceType": "Current buildable resource type",
    "BuildingSMActor:CurBuildingAnimType": "Current building animation type being played locally on the actor, if any",
    "FortPlayerControllerSpectating:CurrentCameraType": "Current camera mode",
    "DiscoCaptureIconData:CurrCapturePercent": "Current capture progress value (0.0f - 1.0f)",
    "FortLobbyBeaconPlayerState:CurrentCharXP": "Current character XP",
    "EditModeState:EditClass": "Current class represented by the edit",
    "FortUIZone:CurrentContextualReticleColor": "Current contextual reticle color",
    "FortUIZone:CurrentContextualReticleIconType": "Current contextual reticle icon type",
    "FortPawnComponent_Convert:ConverterPlayerInfo": "Current converter player info",
    "ConverterPlayerInfo:ConverterPlayerState": "Current converter's player state",
    "FortWeapon:WeaponCoreAnimationOverride": "Current core Animation override",
    "FortPlayerController:CurrentCostInfoType": "Current cost info type to display",
    "FortAthenaMutator_Skyfire:SecurityOrbCount": "Current count of Security Orbs in the playspace",
    "FortAthenaMutator_Skyfire:TimeOrbCount": "Current count of Time Orbs in the playspace",
    "FortPlayerControllerAthena:OwnedPortal": "Current creative mode design assigns you a specific portal in the creative hub",
    "FortWeapon:CurrentDamageStartLocation": "Current damage start location for this weapon",
    "FortWeaponRanged:CurrentDamageStart": "Current damage start location type being used by this weapon",
    "DynamicXpProfileStats:CurrentDay": "Current day that we are tracking total Xp",
    "FortAthenaMutator_Bagel:CurrentDifficulty": "Current difficulty for the game",
    "FortAthenaMutator_Bagel:LootTierOverrides": "Current difficulty for the game",
    "FortAthenaMutator_Mash:CurrentDifficulty": "Current difficulty for the game",
    "FortAthenaMutator_Mash:LootTierOverrides": "Current difficulty for the game",
    "FortDecoPreview:DirectionChange": "Current directional change based on movement of the actor",
    "FortDecoPreview:WorldSpacePivot": "Current directional change based on movement of the actor",
    "GasDebuggerMenu:Section": "Current display section",
    "FortProjectileMoveComp_Drunk:DrunkHomingTargetPosition": "Current drunken homing target position.",
    "FabricButtonBase:bEnabled": "Current enable state. //BlueprintReadWrite,",
    "FabricButtonComponentBase:bEnabled": "Current enable state. //BlueprintReadWrite,",
    "FortAthenaMutator_Bagel:CurrentEncounter": "Current encounter used to spawn AIs",
    "FortAthenaMutator_Encounter:CurrentEncounter": "Current encounter used to spawn AIs",
    "FortAthenaMutator_Mash:CurrentEncounter": "Current encounter used to spawn AIs",
    "PlayspaceManagerComponent:UnhandledExitEvents": "Current end overlap events that are waiting processing. These will help give context to concentric volumes which could give multiple exit events at one time.",
    "FortPlayerMannequin:OverrideVariants": "Current format with \"body\" rather than separate \"legs\" and \"torso\"",
    "CachedRealitySaplingData:fruit_states": "Current fruit states.",
    "RealitySaplingPersistentData:FruitStates": "Current fruit states.",
    "FortVehicleFuelComponent:ServerFuel": "Current fuel",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:GamePhase": "Current game phase",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:GamePhaseStep": "Current game phase step",
    "FortLobbyBeaconPlayerState:CharacterGender": "Current gender of the player character",
    "FortAIController:GoalActor": "Current goal for AI.",
    "FortAthenaMutator_Disco:GameMsg_CapturePointsDisabled": "Current group of control points disabling",
    "FabricButtonBase:bHovered": "Current hover state.",
    "FabricButtonComponentBase:bHovered": "Current hover state.",
    "FortPlayerControllerGameplay:FlyingModifierIndex": "Current index into our Flying Modifiers array, which holds the values we want to multiply our flight speed by.",
    "FortPlayerControllerGameplay:UIMetricsDisplayIndex": "Current index into our thermometer display indexes array, which holds the values we want to display with.",
    "FortAthenaMutator_Heist:CurrExitCraftIndexToSpawn": "Current index of the exit craft spawned",
    "LatentRepTeamDataArray:CurrPlayerUpdateIndex": "Current index of the player in PlayerData that is to get update (1 per frame)",
    "FortAthenaMutator_Heist:CurrBlingSupplyDropIndexHandled": "Current index of the special bling supply drop this mutator has handled the spawning of",
    "GameplayCueNotify_Jetpack_Hovering:FuelVolumeMultiplier": "Current interpolated Fuel Volume",
    "GameplayCueNotify_Jetpack_Hovering:UpwardVelocity": "Current interpolated Z velocity",
    "WaxPlayerDataEntry:CurrentKills": "Current kills the player has.",
    "FortPawn:CurrentWeaponAnimLayerOverlayClass": "Current layer animbp that's overriding parts of the main animbp to play custom weapon specific animations.",
    "FortPlayerPawn:CurrentVehicleAnimLayerOverlayClass": "Current layer animbp that's overriding parts of the main animbp to play driver or passenger animations.",
    "FortPlayerPawn:CurrentSwimmingAnimLayerOverlayClass": "Current layer animbp that's overriding parts of the main animbp to play swimming logic on",
    "FortMovementLeans:LeanDirection": "Current lean direction",
    "SpecialActorRepData:CurrentLocation": "Current lerped/simulated location of the actor (uses LastRepLocation as destination)",
    "LatentRepPlayerData:CurrentLocation": "Current lerped/simulated location of the pawn (uses LastRepLocation as destination)",
    "SpecialActorRepData:CurrentYaw": "Current lerped/simulated yaw rotation of the actor (uses LastRepYaw as destination)",
    "LatentRepPlayerData:CurrentYaw": "Current lerped/simulated yaw rotation of the pawn (uses LastRepYaw as destination)",
    "FortPhysicsBall:LiftDuration": "Current lift duration. Set to 0 to reset.",
    "FortLevelSaveComponent:PaletteLinkCodes": "Current link codes for the loaded LevelRecord.\nShould be updated and maintained as required to correctly implement the IValkyriePaletteProvider interface.\nClient UI needs the correct link codes for this level save component",
    "FortPlayerController:LocationUnderReticle": "Current location under the reticle",
    "FortAthenaAIBotController:CurrentLootActor": "Current loot the bot wants to get to",
    "FortWindImpulseCylinderRadial:Magnitude": "Current magnitude if !bChanging.  (If bChanging, this will actually be the desired magnitude which we are trying to reach.",
    "FortPartyCampaignInfo:MatchmakingState": "Current matchmaking state",
    "FortTracerBase:CurrentScale": "Current mesh scale",
    "PartyMemberPackedState:GameMode": "Current mode the InGame party member is playing",
    "ChaserPatrolTurnData:PatrolMoveSpeed": "Current movement speed",
    "FortAIPawn:MovementUrgency": "Current movement urgency (used to determine Movement Style for animation as well as movement speed).",
    "FabricSteppedPreviewFXComponent:NoteStyle": "Current note style of the steps",
    "FortPlayerControllerGameplay:ServerNumNPCs": "Current number of NPCs on the server. Only valid in non shipping builds",
    "FortWeaponRanged:CurrentNumBullets": "Current number of bullets fired from this weapon",
    "FortAIDirector:NumActiveAlive": "Current number of pawns alive.",
    "AIPatrolPathComponent:PatrolPathEditorComponent": "Current patrol path editor component. Will only get created/assigned when in Editor.",
    "DynamicXpPlayerSessionTransient:AfkRewardMult": "Current penalty for being AFK.",
    "FortObjectiveFilter_VehicleBase:VehicleFuelPercent": "Current percent of vehicle fuel 0-100",
    "FortObjectiveFilter_VehicleBase:VehicleHealthPercent": "Current percent of vehicle health 0-100",
    "FortVolumeObjectTrackingComponent:VolumePerformanceMetrics": "Current performance metrics data for this Volume.  Replicated to clients.  Subscribe to the\n              OnVolumePerformanceMetricsUpdated event to find out when this changes (on either the client or server.)",
    "FabricButtonBase:bPressed": "Current press state.",
    "FabricButtonComponentBase:bPressed": "Current press state.",
    "FortMissionStormSafeZone:SafeZoneRadius": "Current radius of safe zone",
    "FortPlayerPawn:CurrentPawnVelXYRot": "Current rotation of Pawn velocity in XY plane",
    "FortSplineGroundPath:FrontEndCurrentScale": "Current scale at the front of the spline",
    "DiscoTeamScoreData:CurrScore": "Current score progress value",
    "DiscoTeamScoreData:CurrScorePercent": "Current score progress value",
    "TDMTeamScoreData:CurrScore": "Current score progress value",
    "TDMTeamScoreData:CurrScorePercent": "Current score progress value",
    "FortSearchPassState:BestSessionIdx": "Current search result choice to join",
    "MMAttemptState:BestSessionIdx": "Current search result in process",
    "QualitativePerfMetricSettings:SemanticVersion": "Current semantic version number of the system (Major.Minor.Patch).\nBump the major version for any large features changes.\nBump the minor version for any changes to how a metric is calculated.\nBump the patch version for any metric profile adjusted (eg. changing thresholds).",
    "SavedPosition:Time": "Current server world time when this position was updated.",
    "BuildingTrapFloor_Turret:ShootLocation": "Current shooting location. Used for spawning visual effects.",
    "FortVehicleAudioController:CurrentSignificance": "Current significance LOD of the vehicle.",
    "AthenaCapturePoint:CurrHUDIndicatorSize": "Current size the HUD indicator is drawing",
    "FortSoundIndicatorComponent:SoundBeingPlayed": "Current sound the sound indicator is displayed for (will be used to determine the max distance at which the SI is visible)",
    "BagelDifficultySettings:SpawnCountMultiplier": "Current spawn count multiplier",
    "MashDifficultySettings:SpawnCountMultiplier": "Current spawn count multiplier",
    "FortPlayerPawn:CurrentPawnSquaredSpeed": "Current speed of Pawn (squared)",
    "FortPlayerPawn:CurrentPawnSquaredSpeedXY": "Current speed of Pawn in XY plane (squared)",
    "FortPawnVocalChord:CurrentSpokenLine": "Current spoken line",
    "FortPlayerPawn:RootMotionInterruptNotifyStack": "Current stack of root motion interrupt anim notifies",
    "FortPlayerFoleyContextSettings:Stance": "Current stance",
    "SpecialEventRewindComponentStateData:State": "Current state",
    "DynamicXpCalibrationResult:Result": "Current state of calibration the game is in.",
    "PublicDynamicXpStats:CalibrationPhase": "Current state of calibration the game is in.",
    "FortInviteSessionParams": "Current state of joining a single session by invite/presence",
    "AshtonStoneState:StoneState": "Current state of the Stone",
    "DiscoCaptureIconData:CurrIconState": "Current state of the capture point icon",
    "DiscoCaptureUIData:CurrDisplayState": "Current state of the capture point icon",
    "EFortSessionHelperJoinState": "Current state of the helper while reserving / joining a session",
    "FortGameUserSettings:InitialBenchmarkState": "Current state of the initial benchmark\n -1: Not run yet\n  0: Started, but not completed\n  1: Completed",
    "DiscoCaptureIconData:CurrProgressState": "Current state of the progress UI",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:StormCapState": "Current state of the storm cap system",
    "CosmeticMetaTagStack:CurrentState": "Current state of the tag stack. This is all the tags added by the outfit and active variants.",
    "AntelopeInPersistent:NaturalSlideState": "Current state of the vehicle sliding due to physics",
    "FortAthenaAntelopeVehicle:NaturalSlideState": "Current state of the vehicle sliding due to physics. Made a UPROPOERTY for sync marshaling",
    "FortActiveTheaterInfo": "Current state of the world according to MCP",
    "FortWorldManager:WorldManagerState": "Current state of the world manager",
    "FortLevelStreamingInfo:LevelState": "Current state of this level",
    "FortAthena_WaxToken:CurrentState": "Current state of this token along its travel path",
    "GrindRailStatus": "Current status for grind rail, used for network replication",
    "FortGameplayCueNotifyAthena_AIAlertState:CurrentStealthMeterPctFilled": "Current stealth meter fill progress",
    "BagelPlayerDataEntry:StreakScoreLevel": "Current streak level for that player",
    "MashPlayerDataEntry:StreakScoreLevel": "Current streak level for that player.",
    "DiscoTeamScoreData:CurrScoreText": "Current string being displayed",
    "TDMTeamScoreData:CurrScoreText": "Current string being displayed",
    "BuildingSMActor:CurAnimSubObjectNum": "Current subobject number for the active animation as a floored int",
    "BuildingSMActor:CurAnimSubObjectTargetNum": "Current subobject target number for the active animation",
    "FortPlayerScoreReport:ExperienceInfoDelta": "Current sum total delta for experience since the InitialExperienceAmount IN DISPLAY XP",
    "BuildingTurretComponent:CurrentTarget": "Current target of the turret",
    "FortAthenaMutator_Bagel:TeamScoreMultiplier": "Current team score multiplier",
    "FortAthenaMutator_Mash:TeamScoreMultiplier": "Current team score multiplier",
    "OldMusicTempometerComponent:TempoParameterName": "Current tempo (beats per minute).",
    "FortCreativeInteractVisualizationComponent:CurrentTime": "Current time (seconds) of the transition animation. Clamped to [0.f, TransitionInterval].",
    "FortReplayPlaybackState:TimeNow": "Current time at play marker",
    "FortBounceData:BounceValue": "Current time into bounce",
    "OldMusicTempometerComponent:TimeSignatureDenominatorParameterName": "Current time signature denominator (scale from note duration to beat).",
    "OldMusicTempometerComponent:TimeSignatureNumeratorParameterName": "Current time signature numerator (beats per measure).",
    "FortAICombatTokenConsumerComponent:CurrentTokenTagQuery": "Current token tag query",
    "FortGameplayDataTrackerEventValue:Value": "Current value for the event",
    "LatentRepPlayerData:CurrPawnStateMask": "Current value of PawnStateMask on the server awaiting replication to PawnStateMask for\nwhen this PlayerData gets its turn to replicate",
    "PFWExample_SubGameObject_PersistentInfo": "Current version save/restore struct of sub game objects persistence variables. Version 0. There is no older version if this struct yet\n // <<= ** The structs that are written and read from services HAVE to be USTRUCTS for the underlying services. They iterate the properties and write them\n// Lets say UPFWExample_SubGameObject does not yet have older states, so this is the only back end data version",
    "FortGameStateEndless:WaveNumber": "Current wave number for Endless mode (starts at 1).  Currently used to indicate the wave the player died on in Endless missions.",
    "FortPlayerController:WeakspotUnderReticle": "Current weakspot actor under the reticle",
    "FortWeaponRanged:CurrentMuzzleBlockedLocation": "Current world location where the weapon's muzzle is being blocked from being able to hit the crosshair target",
    "ELevelSaveRecordVersion": "Currently \"Live\" version of the data, older data will be fixed up.\n0: Reboot with move to CloudSaveInfo",
    "FortAIEncounterPIDController:DerivativeGain": "Currently NOT used",
    "FortAIEncounterPIDControllerSettings:DerivativeGain": "Currently NOT used. Response is a percentage of the max spawn points possible at the current difficulty level",
    "EFortAIDirectorEvent.PlayerAmmoEnergy": "Currently STW only (but could be made generic)",
    "EFortAIDirectorEvent.PlayerAmmoHeavy": "Currently STW only (but could be made generic)",
    "EFortAIDirectorEvent.PlayerAmmoLight": "Currently STW only (but could be made generic)",
    "EFortAIDirectorEvent.PlayerAmmoMedium": "Currently STW only (but could be made generic)",
    "EFortAIDirectorEvent.PlayerAmmoShells": "Currently STW only (but could be made generic)",
    "EFortAIDirectorEvent.PlayerAINear": "Currently STW only (only knows about STW enemy types)",
    "FortMovementComp_Character:GrindInputParams": "Currently X is lean forward, Y is lean right, Z is speed along the spline",
    "FortAIDirector:ActiveDefaultEncounter": "Currently active default encounter, overridden by any specific encounters",
    "FortAIDirector:ActiveEncounters": "Currently active encounters",
    "FortAIDirector:PendingDespawns": "Currently active set of pending despawns",
    "FortAIDirector:PendingSpawns": "Currently active set of pending spawns",
    "FortMaterialStyleComponent:ActiveStyleInfo": "Currently active style",
    "FortLobbyBeaconState:MatchmakingLevel": "Currently advertised matchmaking level",
    "EBuildingGameplayActorSentry_State.Tracking": "Currently aiming at a player, not currently attacking that player.",
    "FortPhysicsBall:bApplyingBackspin": "Currently applying backspin? Replicated since server is authority on what is a hit (that could stop this).",
    "FortPhysicsBall:bApplyingLift": "Currently applying lift? Replicated since server is authority on what is a hit, and this is important since it affects simulation.",
    "GunGamePlayerData:CurrentlyAssignedWeapons": "Currently assigned weapons for this player (kept on death, removed on upgrade).",
    "RichColorVariant:bVariantPickerShouldShowHSV": "Currently disabled: unsupported at this time.",
    "EFortGameFeatureState.DownloadingPaused": "Currently downloading, but downloading is paused by the user or cellular data usage settings",
    "EFortGameFeatureState.Downloading": "Currently downloading, will transition to Unavailable or Available",
    "SkyfirePlayerPawnComponent:EarnedLootRarity": "Currently earned loot rarity for this player (and their squad). Starts at AFortAthenaMutator_Skyfire::InitialLootRarity and goes to MaxLootRarity.\nThis is updated from the skyfire mutator.",
    "SkyfireSquadDataEntry:EarnedLootRarity": "Currently earned loot rarity for this squad. Starts at AFortAthenaMutator_Skyfire::InitialLootRarity and goes to MaxLootRarity",
    "FortOffhandComponent:CurrentEquippedOffhandWeapon": "Currently equipped offhand weapon",
    "ENaturalSlideState.Exiting": "Currently in power slide",
    "EPowerSlideState.Exiting": "Currently in power slide",
    "FortAIDirector:InactiveEncounters": "Currently inactive encounters",
    "FortLinkedAnimGraphComponent:CurrentFullBodyAdditiveClass": "Currently linked full body additive anim instance. This represents the logical state of the last linking decision taken. This means it will be null while the unlink timer is running before the layer is actually unlinked",
    "FortLinkedAnimGraphComponent:CurrentFullBodyStateClass": "Currently linked full body state anim instance. This represents the logical state of the last linking decision taken. This means it will be null while the unlink timer is running before the layer is actually unlinked",
    "FortLinkedAnimGraphComponent:MovementModeLayerStack": "Currently linked movement mode layer",
    "VehicleWeapon_RetainedData:AmmoInClip": "Currently loaded ammo in the clip",
    "OstrichWeapon_RetainedData:LoadedShotgunAmmo": "Currently loaded shotgun ammo",
    "ComponentRecordRedirect:OldComponentName": "Currently not hooked up",
    "ReplayTeamFlightEventInfo": "Currently not serialized but created on runtime with replicated data, the serialization is implemented and can be used anyway",
    "EFortWorldManagerState.WMS_QueryingWorld": "Currently querying the state of the world",
    "CreativeDataChannelTarget:Events": "Currently relevant events. This changing may trigger us to fire messages on the volume's channels.",
    "BuildingProp_CreaturePlacer:SelectedSpawnGroup": "Currently selected spawn group option",
    "BuildingProp_DeimosSpawner:SelectedSpawnGroup": "Currently selected spawn group option",
    "BuildingProp_DeimosSpawner:SelectedPawnNumberCap": "Currently selected spawn number option",
    "FortActorComponent_StateDriven:SlottedItemEntry": "Currently slotted item entry (used to recreate item)",
    "BuildingProp_AISpawner:DespawnRangeOverride": "Currently stored despawn range option. If the player chose to despawn based on distance to AI, it will use that distance. If they chose to despawn based on distance to spawner, it will use that distance",
    "BuildingProp_AISpawner:ActivationRangeLevel": "Currently stored range option. This will be passed to the rift as the level to set the scalable float for its activation radius",
    "FortAIDirector:AINonPlayerBotControllersForBVTree": "Currently this is only enabled for Athena",
    "FortAIDirector:AINonPlayerBotPawnsForBVTree": "Currently this is only enabled for Athena",
    "FortAIDirector:AIPlayerBotControllersForBVTree": "Currently this is only enabled for Athena",
    "FortAIDirector:AIPlayerBotPawnsForBVTree": "Currently this is only enabled for Athena",
    "EFortMatchmakingType.Session": "Currently unused",
    "FortAIAssignmentSettings:bIsEnemyAssignment": "Currently used to label assignments which can be searched for enemies before dynamically creating an enemy assignment.",
    "EUIExtensionSlot.PlaylistUIExtensionMobile": "Currently, the same as the killfeed slot for mobile, but this is mobile only.",
    "FortPlayerPawn:ZiplineJumpDampening": "Curve Table Row Handle for the Zipline Jump Dampening Value",
    "FortPlayerPawn:ZiplineJumpStrength": "Curve Table Row Handle for the Zipline Jump Strength Value",
    "FortGliderLayeredAudioFloatParam:Curve": "Curve asset to use if InterpType is set to CustomCurve",
    "FortLayeredAudioFloatParam:Curve": "Curve asset to use if InterpType is set to CustomCurve",
    "FortAIEncounterPawnDifficultyLevelModifier:DifficultyLevelModifierCurve": "Curve defining the game pawn difficulty modifier. Looked up by the encounter's difficulty level",
    "FortPicklePortal:OpenCurve": "Curve defining the open percentage based on player range/angle to portal",
    "FortTieredWaveData:TieredWavesDefenseReqTable": "Curve determining the tiered waves base defense requirement (time length/num kills/etc)",
    "CrashpadStaticParams:LaunchAngleWeight": "Curve for launch angle weight",
    "CrashpadStaticParams:LaunchCurve": "Curve for launch velocity",
    "FortSimpleWidgetAnimation:Alpha": "Curve for the alpha animation sequence",
    "FortSimpleWidgetAnimation:Scale": "Curve for the scale animation sequence",
    "FortSimpleWidgetAnimation:Translation": "Curve for the translation animation sequence",
    "ImGuiDPIScaleInfo:DPICurve": "Curve mapping resolution height to scale.",
    "FortAthenaMutator_Infiltration:DilationCurve": "Curve table defining the Dilation curve",
    "FortMissionGenerationElementCostAndAvailabilityRow:AvailabilityCurveTable": "Curve table that defines when this option becomes available",
    "FortAIPawnVariantDefinition:VariantWeightCurve": "Curve table that describes weights of this variant definition vs. difficulty level.  If not set than the weight will default to 1.",
    "FortBaseWeaponStats:DmgScaleTable": "Curve table to use for scaling combat damage, based on level.  If not set we will use the default DmgScale.",
    "FortBaseWeaponStats:DmgScaleTableRow": "Curve table to use for scaling combat damage, based on level.  If not set we will use the default DmgScale.",
    "FortBaseWeaponStats:EnvDmgScaleTable": "Curve table to use for scaling environmental damage, based on level.  If not set we will use the default EnvDmgScale.",
    "FortBaseWeaponStats:EnvDmgScaleTableRow": "Curve table to use for scaling environmental damage, based on level.  If not set we will use the default EnvDmgScale.",
    "FortBaseWeaponStats:ImpactDmgScaleTable": "Curve table to use for scaling impact damage, based on level.  If not set we will use the default EnvDmgScale.",
    "FortBaseWeaponStats:ImpactDmgScaleTableRow": "Curve table to use for scaling impact damage, based on level.  If not set we will use the default EnvDmgScale.",
    "FortAIPawnStats:ControlResistanceScalingTable": "Curve table to use to compute AI control resistance scaling with difficulty",
    "FortAIPawnStats:HealthScalingTable": "Curve table to use to compute AI health scaling with difficulty",
    "FortAIPawnStats:DifficultyRatingTable": "Curve table to use to compute AI rating with difficulty",
    "FortIntensityCurve:IntensityCurveTable": "Curve table to use to compute Desired Intensity",
    "FortSpawnPointsPercentageCurve:SpawnPointsPercentageCurveTable": "Curve table to use to compute Desired Intensity",
    "FortPawnStats:VehicleEjectDamageTable": "Curve table to use to compute being ejected from a vehicle at speed damage",
    "FortPawnStats:FallingDamageTable": "Curve table to use to compute falling damage",
    "TrackingOffsetModifiers:InAirHeightCurve": "Curve that affect tracking height modifier when target is in various \"in air\" condition (glide / dive / high Z velocity)",
    "FortSpectatorCameraComponent:ScreenFringeFOVCurve": "Curve that controls screen fringe intensity as a function of fov. X is intensity, Y is saturation",
    "FortWeaponComponent_RecoilCurve:RecoilVectorCurves": "Curve that controls the camera movement/recoil of the weapon.",
    "FortTouchInputSettings:MovementCurve": "Curve that converts raw move input into character movement values.",
    "FortCurieUpdraftActor:ProjectileGlanceCurve": "Curve that defines projectile glancing behavior. Input is from 0 to 1, inclusive, signifying percentage of radial distance away\nfrom the updraft's origin; Output is scalar multiplier for additive velocity against the direction away from the origin toward the\nvelocity vector intersection point of the \"middle\" of the updraft where it pierced",
    "FortWeap_BuildingTool:BlueprintPaperPulseCurve": "Curve that dictates the blueprint paper pulse",
    "FortGamepadSettings:GamepadLookSensitivityCurve": "Curve that maps gamepad sensitivity settings [0.0,1.0] to a multiplier to scale to apply to gamepad look curves",
    "DigestedFiringPattern:FiringPatternCurve": "Curve that represents the firing pattern",
    "BuildingSMActorClassData:WindPannerSpeedCurve": "Curve that specifies the lerping of values for wind panner speed.",
    "BuildingSMActorClassData:WindSpeedCurve": "Curve that specifies the lerping of values for wind speed.",
    "FortGameStateComponent_TimeDilation:EndGameTimeDilationCurve": "Curve that the end game time dilation should follow.",
    "FortDecoPreview:MotionBounceCurve": "Curve to use defining bounce motion",
    "LiquidRibbonManager:TimeSinceDetachmentCurlCurve": "Curve used in curling calculation at a detachment.\nTakes a normalized time since detachment as an input and outputs a multiplier to be used when curling points for that detachment",
    "GameplayCueNotify_Jetpack_Hovering:OutOfFuelAudioCurve": "Curve used to control volume based on fuel percent",
    "FortTouchInputSettings:LookSensitivityCurve": "Curve used to convert the user sensitivity setting (0.0 - 1.0) into the look sensitivity.",
    "BelongTreatyProjectileMovementComponent:EaseInCurve": "Curve used to ease in from the current velocity to a target velocity",
    "FortScoutDroneDiveTransitionData:Curve": "Curve used to ease in from the current velocity to a target velocity",
    "SourceDriver:DrivingCurve": "Curve used to map from the source attribute to the driven attributes if present (otherwise the Multiplier will be used)",
    "FortGamepadSettings:GamepadLookCurve": "Curve used to remap look stick input.",
    "FortTouchInputSettings:LookVelocityScaleCurve": "Curve used to scale look sensitivity based on the velocity of the touch input.",
    "ETrackingOffsetModifierCurve.CombatStart": "Curve used when combat against threat just started",
    "EPerceptionSoundType.Default": "Curve used when no other curve is used",
    "ETrackingOffsetModifierCurve.Default": "Curve used when no other curve is used",
    "ETrackingOffsetModifierCurve.TargetLowHealth": "Curve used when target is under a specific health threshold",
    "FortVehicleAudioVoice:PitchParam": "Curve/attack/release values for pitch modulation",
    "FortVehicleAudioVoice:VolumeParam": "Curve/attack/release values for volume modulation",
    "FortAnimWorldStriderComponent:StartStateData": "CurveName RootRotation\nMax Yaw: 180.f\nCharacter Mesh Yaw: 0.f\nCurve Multiplier: -1.f\nEnable Debug: false",
    "FortAnimWorldStriderComponent:PivotTurnCorrection": "CurveName: DistanceCurve",
    "FortAnimWorldStriderComponent:PlayRateSpeedWarpAlpha": "CurveName: PlayRateSpeedWarpAlpha",
    "FortAnimWorldStriderComponent:PlayRateSpeedWarpAlphaCurve": "CurveName: RootRotation\nMax Yaw: 180.f\nCharacter Mesh Yaw: 0.f\nCurve Multiplier: -1.f\nEnable Debug: false",
    "FortGameStateAthena:AthenaGameDataTable": "CurveTable of Athena game data used for editing values.",
    "FortGameStateAthena:ResetAthenaGameDataTable": "CurveTable of Athena game data used for editing values.",
    "TrackingOffsetModifiers:DistanceCurves": "Curves that affect tracking distance modifier",
    "TrackingOffsetModifiers:Curves": "Curves that affect tracking offset modifier",
    "FortAIEncounterSpawnPointsProfile:MaxSpawnPointsPerPlayerCount": "Curves that provide the maximum number of spawn points per player count",
    "FortAIEncounterSpawnPointsProfile:MinSpawnPointsPerPlayerCount": "Curves that provide the minimum number of spawn points per player count",
    "ELookAtType": "Curves to modify look at parameters",
    "EPerceptionSoundType": "Curves used to modify tracking offset when aiming at targets",
    "ETrackingOffsetModifierCurve": "Curves used to modify tracking offset when aiming at targets",
    "RepGraphActorSettingsBase:ClassRepInfo": "Custom ClassRepInfo to use for Class.  bUseCustomClassRepInfo needs to be true for this to be used",
    "FortAthenaMutator_Leave:CustomReviveIndicator": "Custom DBNO revive indicator",
    "FortAthenaMutator_Leave:CustomDBNOWidget": "Custom DBNO widget",
    "MinigamePostGameSettings:DefeatAnimationSettings": "Custom Defeat animation settings",
    "FortAthenaAIBotRunTimeCustomizationData:PredefinedCosmeticSetTag": "Custom Flag to be passed if you get your customization at runtime",
    "FortGrindRail:CustomSplitIndex": "Custom Index that we will use to break the spline",
    "FortCustomRepNodeClassMapping:NodeClass": "Custom Node Class",
    "SafeZoneRoute:POINameOverride": "Custom POI Name to use instead of name from the tag. Only used if bUsePOINameOverride is set to true",
    "SavedPosition:CustomMovementMode": "Custom Pawn movement mode when MovementMode was MOVE_Custom when this position was recorded.",
    "FabricSequencerSustainComponent:CPDDeviceEnabled": "Custom Primitive Data Index for the device enabled state",
    "FabricSteppedPreviewFXComponent:CPDDeviceEnabled": "Custom Primitive Data Index for the device enabled state",
    "FabricSteppedPreviewFXComponent:CPDNumSteps": "Custom Primitive Data Index for the number of current steps",
    "MinigamePostGameSettings:TieAnimationSettings": "Custom Tie animation settings",
    "MinigamePostGameSettings:VictoryAnimationSettings": "Custom Victory animation settings",
    "DynamicUIAspectRatio:CustomAspectRatio": "Custom aspect ratio. (Format: Width / Height)",
    "EFortQuestObjectiveStatEvent.AthenaAccumulatedItem": "Custom athena verb for accumulating items. This is processed on the server instead of MCP. Target is empty.",
    "EFortQuestObjectiveStatEvent.AthenaAcquire": "Custom athena verb for acquiring an item. This is processed on the server instead of MCP. Target is empty.",
    "EmporiumSettings:CustomAuthToken": "Custom authentication token passed to the frontend",
    "EFortAbilityTargetingSource.Custom": "Custom blueprint-specified source location",
    "ImGuiCanvasSizeInfo:Height": "Custom canvas height.",
    "ImGuiCanvasSizeInfo:Width": "Custom canvas width.",
    "FortAthenaAIBotController:CustomCharacterPartOverridesBC": "Custom character parts used by the BotController",
    "FortSkyTube:ExitGravity": "Custom gravity to apply to playerpawns which don't want to be magnetized",
    "EventItemOverride:CustomItemTexture": "Custom icon override to use",
    "EventItemOverride:CustomItemTextureMobile": "Custom icon override to use (mobile / Switch). If null, falls back to CustomItemTexture.",
    "TouchInteractionIconOverride:IconOverride": "Custom icon override. Value of nullptr will fall back to the key icon.",
    "CustomMessageQuestData:CustomMessage": "Custom message to display",
    "EMutatorMovementMode": "Custom mutator movement modes.\nContinues where EFortCustomMovement leaves off, so it can be utilized for UCharacterMovementComponent::CustomMovementMode.",
    "PropertyToShowData:PropertyNameOverride": "Custom names can be set within the custom property view for a given PropertyName",
    "UrgentQuestData:EventDescriptionOverrides": "Custom overrides associated with a tag for descriptions. Will only be used if set via SetUrgentQuestDescriptionOverride on the transient quest component.",
    "UrgentQuestSettings:EventDescriptionOverrides": "Custom overrides associated with a tag for descriptions. Will only be used if set via SetUrgentQuestDescriptionOverride on the transient quest component.",
    "AntelopeInPersistent:FortAntelopeVehicleConfigs": "Custom parameters for the Antelope vehicle",
    "GoaFInPersistent:FortGoatVehicleConfigs": "Custom parameters for the Goat vehicle",
    "JackalInPersistent:FortJackalVehicleConfigs": "Custom parameters for the Jackal vehicle",
    "CreativeBetaPermissionConfig:CustomPrimaryAssetId": "Custom primary asset id. Use this for primary asset ids that are generated at runtime and do not exist in the editor.",
    "FortCurieFXSettings:CharredEffectPrimitiveDataIdx": "Custom primitive data index for Curie charred effect",
    "FortCurieFXSettings:GlowElementIdxPrimitiveDataIdx": "Custom primitive data index for Curie glow element index",
    "FortCurieFXSettings:GlowLerpDataIdx": "Custom primitive data index for Curie glow lerp value",
    "FortCurieFXSettings:ElectricityArcColorScalePrimitiveDataIdx": "Custom primitive data index for arc color scale",
    "FortCurieFXSettings:ElectricityArcDurationBeforeFadeoutPrimitiveDataIdx": "Custom primitive data index for arc fadeout timestamp",
    "FortCurieFXSettings:ElectricityArcJumpDurationPrimitiveDataIdx": "Custom primitive data index for arc jump duration",
    "FortCurieFXSettings:ElectricityArcSplineWidthPrimitiveDataIdx": "Custom primitive data index for arc spline width",
    "FortCurieFXSettings:ElectricityArcStartTimestampPrimitiveDataIdx": "Custom primitive data index for arc start timestamp",
    "FortCurieFXSettings:ElectricityArcTilingDivisorPrimitiveDataIdx": "Custom primitive data index for arc texture tiling",
    "FortCurieFXSettings:ElectricityArcWPONoiseWorldTileScalePrimitiveDataIdx": "Custom primitive data index for arc tiling scale of WPO noise of spline",
    "FortCurieFXSettings:ElectricityArcWPONoisePrimitiveDataIdx": "Custom primitive data index for arc world position offset noise",
    "FortCurieFXSettings:ElectricityArcWPONoiseScalePrimitiveDataIdx": "Custom primitive data index for intensity/scale of arc distortion",
    "TouchInteractionIconOverride:IconScale": "Custom scale for the icon. Values of < 0 will fallback to the defaults.",
    "AIHotSpot:CustomNavmeshSearchExtent": "Custom search extent for navmesh projection",
    "FortMinigame:DefeatAudioIndex": "Custom sound for victory screen",
    "FortMinigame:DrawAudioIndex": "Custom sound for victory screen",
    "FortMinigame:VictoryAudioIndex": "Custom sound for victory screen",
    "FortAthenaAIBotRunTimeCustomizationData:CustomSquadId": "Custom squad id used when bHasCustomSquadId is true",
    "BuildingActor:CustomState": "Custom state string for blueprints",
    "FortMarkActor:MarkString": "Custom string attached to this mark",
    "FortPlayerSurveyAnalyticsTextReplacementEvaluation": "Custom text replacement data structured for use with Analytics",
    "FortPlayerSurveyCMSCustomTextReplacement": "Custom text replacement data structured for use with CMS",
    "FortDecoHelper:CustomPlacementText": "Custom text to describe the placement state",
    "PartyMemberScratchEntry:V": "Custom value for this entry.",
    "ClientAILODMovementCompOptimizationConfiguration": "Custom version of FFortMovementCompOptimizationConfiguration that contains hotfixable configuration.",
    "DynamicUIAllowed:CustomZOrder": "Custom z order used to draw this widget. (Higher numbered z order widget are drawn in front of lower numbered one)",
    "BuildingProp_CreaturePlacer:SpawnGroupVisuals": "Customization Options",
    "FortPersistentProp:bApplyCosmeticVariants": "Customization Properties",
    "FortAthenaAIBotController:StartupInventory": "Customization of the startup inventory",
    "ValkyrieEditorPermissionSettings_Editor:AllowedInputCommands": "Customize permissions for input commands",
    "VkProjectInfoSlim": "Cut down VK project info supplied by search results",
    "VkProjectSearchResultSlim:Info": "Cut-down version of project doc",
    "FortMission:LeecherCutoff": "Cutoff point in percent of expected score contribution. Range: 0 to 1. Adjust this if we have too many false negatives or false positives. 0 means No leecher scaling.",
    "FortControllerAIBotComponentTelemetryData_Damage:DamageDistanceBuckets": "Cutoffs for damage distance buckets",
    "FortControllerAIBotComponentTelemetryData_Damage:IdleDetectionBucketsCutoffs": "Cutoffs for idle detection buckets",
    "FortPawnStats:SpeedDBNO": "DBNO crawl speed for the pawn",
    "FortPawnStats:SpeedClassicDBNO": "DBNO crawl speed for the pawn when improved DBNO is set to false",
    "EDBNOType.NotWhenRespawning": "DBNO will only happen when respawning is not on",
    "FortGameStateZone:SpawnPointsCap": "DEBUG USE ONLY - The SP cap of the encounter being debugged",
    "FortGameStateZone:SpawnPointsAllocated": "DEBUG USE ONLY - The SP currently allocated in the encounter being debugged",
    "EFortTemplateAccess.Trusted": "DEPRECATED",
    "FortRangedWeaponStats:MaxSpareAmmo": "DEPRECATED",
    "FortAthenaLivingWorldEvent:DespawnCondition": "DEPRECATED - If and How an actor can be despawned by the living world manager. Despawned actor are still considered in the max spawned count.",
    "FortPartyMemberRepData:SpectateInfo": "DEPRECATED - Session Id and key for member's game when spectating is available.",
    "FortGameFeatureStatusList:ProgressSummary": "DEPRECATED but still required for KairosWeb compatibility.  This is per-feature now",
    "FortGameUserSettings:MouseSensitivity": "DEPRECATED | Holds the mouse sensitivity",
    "FortGameUserSettings:UnlockConsoleFPS": "DEPRECATED | Is console syncinterval uncapped, current setting state",
    "FortWeapon:bRemoveAbilitiesWhenRemovedFromInventory": "DEPRECATED; Avoiding using _DEPRECATED for now to avoid potential issues",
    "EFrontEndCamera.DM_Customization": "DM Stub",
    "EFortItemType.Max_None": "DO NOT ADD NEW WORLD OR ACCOUNT ITEMS HERE",
    "EFortAlteration": "DO NOT CHANGE THESE TYPES UNLESS YOU KNOW WHAT YOU'RE DOING. They're used on the back end.",
    "AthenaAIController:SecondaryGoalActor": "DO NOT use directly, use GetSecondaryGoalActor instead (additional checks are involved)",
    "EFortQuestType.AthenaDailyQuest": "Daily athena quests",
    "BuildingProp_CreatureManager:SelectedOverrideDamage": "Damage Override Option",
    "FortGameplayEffectContext:DamageSourceObject": "Damage Source object. Passed as a UObject to avoid cast problems. NOT replicated currently",
    "FortConstructorBASE:DamageStats": "Damage Stat row for Electrified Floors : Gadget Scaling holds damage for Containment Unit (reflect damage)",
    "FortControllerAIBotComponentTelemetryData_Damage": "Damage TelemetryData",
    "FortAthenaVehicle:VehicleMaxHorSpeedDamage": "Damage applied to vehicle when colliding at max speed",
    "FortAthenaVehicle:VehicleMinHorSpeedDamage": "Damage applied to vehicle when colliding at min speed",
    "BuildingTrap:DamageComponents": "Damage box component",
    "FortPlayerDeathReport:DamageCauser": "Damage causing actor",
    "BonePlayerDamageMultiplier:DamageMultiplier": "Damage multiplier applied if that bone is hit (< 0.0 = Instant death)",
    "FortAthenaMutator_Knockback:ConvertToKnockbackDamageMultiplier": "Damage multiplier applied to raw damage to convert it to knockback percentage",
    "FortBaseWeaponStats:DamageZone_Critical": "Damage multiplier for the critical zone",
    "FortBaseWeaponStats:DamageZone_Invulnerability": "Damage multiplier for the invulnerable zone",
    "FortBaseWeaponStats:DamageZone_Light": "Damage multiplier for the light zone",
    "FortBaseWeaponStats:DamageZone_Normal": "Damage multiplier for the normal zone",
    "FortBaseWeaponStats:DamageZone_Vulnerability": "Damage multiplier for the vulnerable zone",
    "FortBaseWeaponStats:DiceCritDamageMultiplier": "Damage multiplier to apply to base damage on \"dice\" crit",
    "DeltaVelocityDamageHandlerData:MassMultiplierBuckets": "Damage multiplier to be dealt if the mass of an object exceeds some threshold",
    "VelocityDamageHandlerData:MassMultiplierBuckets": "Damage multiplier to be dealt if the mass of an object exceeds some threshold",
    "FortDamageNumbersActor:DamageNumberColorInfos": "Damage number colors associated to certain tags that are on the damaged actor.",
    "FortDamageNumbersActor:MoveToCameraParameterName": "Damage numbers by default are given a depth close to the camera in the material to make sure they are never occluded. This can be toggled off here, should only be 0/1.",
    "FortLabradorComponent_Telemetry:DamageReceivedFromPlayers": "Damage received from players",
    "FortGlobalEnvironmentAbilityActor:DamageSet": "Damage set so that the actor is capable of dealing damage",
    "BuildingGameplayActor:DamageStatHandle": "Damage stats for the building gameplay actor",
    "FortPlayerPawnAthena:DamageTagsExcludedFromCameraShake": "Damage tags that are excluded from camera shake.",
    "PlaystyleSwitchToAggressiveData:DamageThresholdToSwitchToAggressive": "Damage threshold from this target after which you turn aggressive, negative values are deactivated",
    "PlaystyleSwitchToAggressiveDataDigested:DamageThresholdToSwitchToAggressive": "Damage threshold from this target after which you turn aggressive, negative values are deactivated",
    "DeltaVelocityDamageHandlerData:DamageBuckets": "Damage to be dealt if the given delta velocity bucket is reached",
    "DeltaVelocityDamageHandlerData:MassBuckets": "Damage to be dealt if the given delta velocity bucket is reached",
    "VelocityDamageHandlerData:DamageBuckets": "Damage to be dealt if the given delta velocity bucket is reached",
    "VelocityDamageHandlerData:MassBuckets": "Damage to be dealt if the given pure velocity bucket is reached",
    "FortGravityGunHolder:TargetRotationTorqueDampening": "Dampening when calculating rotation torque using ComputeTorqueForTargetRotation.",
    "FlightParams:ControlFrameRollUpDamping": "Damping factor for the angular motion of the roll up vector.",
    "DynamicUIPlayerData:ActiveDirectors": "Data",
    "BuildingWeakSpotData": "Data about a weak spot, used to spawn the weak spot actors",
    "FortAthenaMutator_Mash:AISpecialEncounterOptionsMap": "Data about all potential AI special  encounters that could trigger.",
    "NPCChosenItemData": "Data about an item we wish to grant to a controller.",
    "FortCharacterPartsRepMontageInfo": "Data about character montages that is replicated to simulated clients",
    "GameplayAbilityRepSharedAnim": "Data about shared animations that is replicated to simulated clients. This is the \"real\" version that the rest of the code uses. Cannot be replicated in FastShared paths",
    "SafeZoneRoundData": "Data about the current match passed to the blueprint in TryDynamicStormCircleModification",
    "FortAthenaMutator_PerkSystemMutator:MutatorData": "Data about the mode and what tags it uses",
    "FortAthenaVehicle:WaterSurfaceDataCache": "Data about the vehicle's location/relationship to a body of water they are currently in/on.",
    "FortPlayerControllerAthena:CreativePlotSessionData": "Data accumulated over the course of an island session; sent off and reset on return to the Creative Hub",
    "FortActorTemplatesComponent:TemplateResources": "Data asset that stores associations between soft-referenced assets and tags granted by the currently selected options",
    "FortAthenaMutator_PreloadAssets:DataAssets": "Data assets to preload",
    "DynamicUIPlayerData": "Data assigned to a player",
    "PlayerAugmentTrackedData": "Data associated for a given player augment. Each augment a player is given, will have some tracked data associated with it for cleaning up.",
    "BuildingPropMusicPlayer:PlayingSongData": "Data associated w/ the song to play",
    "BulletWhipTrackerSystemData:WhipTrackerData": "Data associated with a given projectile/bullet",
    "CreativeAttenuationVizData": "Data associated with creative attenuation visualisation",
    "FortAthenaMutator_MatchCondition:TeamDataArray": "Data associated with each team participating in the match",
    "MatchConditionMutatorTeamData": "Data associated with each team, for use with the MatchCondition mutator",
    "CreativeAudioPlayerData": "Data associated with playing audio on players.",
    "NPCSpecializationDataRow:ServiceData": "Data associated with the PricingKey",
    "NPCServiceDataRow:ServiceData": "Data associated with the tags",
    "FortUserCloudRequestPayload:DataBuffer": "Data buffer to use during the request",
    "BattleLabDeviceGameplayActor:BattleLabDeviceItemData": "Data class associated with this Gameplay Actor",
    "FortGameplayDataTrackerEventConfiguration": "Data configuration for an even to track",
    "FortAthenaLivingWorldEventDataEntry:EventData": "Data configuration of this entry",
    "SkyTubeSplineData": "Data container for data that is expensive to calculate and shared between tube functions.",
    "CreativeDataChannelTargetFN:PlayerInfoTracker": "Data contains list of player names in match\nExtraData contains number of players in match",
    "CreativeDataChannelTargetFN:ArenaPointLeaderBoardTracker": "Data contains player/region\nExtraData contains points",
    "HolsterRequestData": "Data defining a request to holster the pawns weapon",
    "SpecialEventCursorMode": "Data defining the behavior of a USpecialEventCursorPawnComponent cursor mode",
    "FortTheaterMapRegionData": "Data delimiting a region within the theater backend data",
    "FortCloudSaveRecordInfo": "Data describing a single record inside a cloud save",
    "BuildingSMActor:BounceData": "Data describing the current way that this actor is bouncing",
    "IndicatedActorData": "Data detailing how to mark indicated actors (i.e. actors that we want to display a floating icon on.)",
    "FortAIComponent_Telemetry:AnalyticRuntimeParameters": "Data dictating the behavior of the analytic component",
    "FortPlayerFoleyContextSettings:ContextTags": "Data driven tags for use in the context",
    "FortHabaneroTier": "Data entry for a single tier within a game mode's list",
    "AthenaFeatTimelineDisplayData": "Data for FeatTimelineListEntry widget that displays history of Feats achieved",
    "FortCreativeTimerObjective:HUDData": "Data for IFortTimeWidgetInterface.",
    "VehicleAttachment": "Data for a basic attachment",
    "CombatThresholdData": "Data for a combat threshold, used to determine what level of combat heat we are in",
    "FortMapIconDefinition:ElevationArrowData": "Data for an elevation arrow on the MiniMap",
    "GunGamePlayerData": "Data for an individual player in GunGame",
    "GunGameGunEntry": "Data for an individual weapon in GunGame",
    "CombatEventData": "Data for combat event",
    "CombatFactorData": "Data for combat factor",
    "FortAIDirectorFactorData": "Data for combat factor",
    "FortAthenaMutator_Ashton:StoneSpawnDataList": "Data for determining how the Stones should spawn",
    "FortAICombatTokenProviderComponent:TokenTypes": "Data for different types of tokens",
    "AthenaSpecialActorComponent:ElevationArrowData": "Data for displaying an elevation arrow relative to the local player.",
    "BuffetBubblesDebugData": "Data for drawing debug lines in DebugBuffetBubbles()",
    "FortAthenaMutator_Heist:HeistExitCraftSpawnData": "Data for each ExitCraft that determines how it should spawn",
    "DynamicUISceneData": "Data for each active scene.",
    "FortAthenaMutator_Disco:ControlPointSpawnData": "Data for each control point that determines how it should spawn",
    "DynamicUIDirectorData": "Data for each individual director currently active.",
    "FortClientAnnouncementData_Keybinding": "Data for gamepad key display announcement",
    "FortSurvivorSquadSlottingFeedbackData": "Data for providing feedback to the user when they slot an item via the survivor squad management screen.",
    "FortQuestAchievementTableRow": "Data for quests that trigger achievements",
    "FortAthenaMutator_Heist:HeistBlingDropSpawnData": "Data for spawning the bling supply drops (size of this array is the number of drop spawns this array will override from normal random zone spawning)",
    "FortSpecialActorReplicationInfo": "Data for special actors that aren't always relevant but must be accessible at all times",
    "IndicatedActorInfoEntry:Data": "Data for the indicated actor.",
    "StenciledActorInfoEntry:Data": "Data for the indicated actor.",
    "FortClientAnnouncementData_Tutorial": "Data for the tutorial notifications",
    "TeamPerformanceMessageData": "Data for tracking and displaying Team Performance Messages.\n    Each message will be broadcast to clients once its criteria has been met by a team on the server.\n    Different teams can trigger the same message (depending on the exact settings) but each team can ONLY trigger a message once.",
    "ProjectileMovementDrunkConfig": "Data for tuning \"drunk\" projectiles.",
    "SkyTubeConfig": "Data from the SkyTube actor that is needed by force calculations, for use on the async physics thread.\nInterchangeable for an actual SkyTube actor when passed to SkyTube template functions.",
    "SkyTubeAsyncInPersistent:SplineComponentData": "Data from the current skytube's spline, used for force calculations. (auto-marshaled)",
    "SkyTubeSplineComponentData": "Data from the spline component that is needed by force calculations, for use on the async physics thread.\nInterchangeable for an actual spline component when passed to the SkyTube template functions.",
    "SkyTubeAsyncOutContinuous:DebugData": "Data from velocity calculations, used for debug drawing.",
    "ValkyrieTemplateMapInfo": "Data model for map templates that wraps the base engine template info and exposes extra information specific to Valkyrie",
    "CreativeMiniMapComponent:IconData": "Data needed at the same time to accurately render the right icon on the HUD.",
    "FortSeasonItemMapData": "Data needed to render an an individual season item in the frontend",
    "FortAthenaMutator_SupplyDrop:SafeZoneMutatorData": "Data of how to change the supply drops for each safe zone",
    "SpeedScaledAxisOffsetData": "Data pertaining to an offset on a single axis that will be scaled by the player's speed.",
    "FortGameStateAthena:CurrentPlaylistInfo": "Data reference to the current playlist",
    "PersistenceFrameworkSettings:PersistenceFrameworkTagToServiceRegistry": "Data registry service settings",
    "FortAthenaMutator_FakeKillRelevancy:RelevancyPhaseDataArray": "Data related to RelevancyGroups that were relevant to each other at the start of a phase, and how they will be split up by the end of the phase.\n   Only replicated for debug purposes.",
    "FakeKillRelevancyPlayerDataArray:Entries": "Data related to players that a client should fake kill",
    "RidableComponent:PettingData": "Data related to the petting of this creature",
    "RidingPettingData": "Data related to the petting of this creature",
    "FortWeapon:ModRuntimeDataCache": "Data related to weapon mods that has been cached so that we do not need to walk the array of mods each time a query is needed.",
    "FortPartyMemberRepData:CampaignInfo": "Data relevant to STW Campaign",
    "FortSTWLootData": "Data representing STW loot tiers and packages",
    "TieredModifierSetData": "Data representing a modifier selection for a tiered wave",
    "TieredWaveSetData": "Data representing a tiered wave",
    "CollectionLootSetData": "Data representing the loot given to players on tier start and wave completion",
    "TieredWaveCollectionLootSetData": "Data representing the starting and wave completion loot pulls",
    "WinConditionScoreData": "Data required for determining the scoring and win conditions of games based on a score",
    "FortPlayerStateAthena:RespawnData": "Data required for handling situations where we want to respawn and have the game pre-load the level, textures, etc. to prepare for the spawn",
    "OstrichWeapon_RetainedData": "Data retained from the ostrich's weapon while stowed.",
    "VehicleWeapon_RetainedData": "Data retained from the vehicle's weapon after the user exits",
    "MMRSpawningBracketBotDataTableRow": "Data row matching MatchMakingRating to the types of bot to spawn",
    "HomebaseBannerColorData": "Data row struct representing all of the data for a specific homebase banner color swatch",
    "HomebaseBannerIconData": "Data row struct representing all of the data for a specific homebase banner icon item",
    "HomebaseBannerCategoryData": "Data row struct representing available category data for homebase banner icons/colors/etc.",
    "FakeKillRelevancyTestParameters": "Data set by TestFakeKillAlgorithm() to override the normal algorithm behavior",
    "EliminationFeedMessageRingBuffer": "Data structure for containing replicated elimination feed device messages.\nWIll act as a ring buffer, so only up to EliminationFeedCVars::MessageQueueBatchSize number of messages will be replicated at one time.",
    "EliminationFeedMessage": "Data structure for queuing up which device sent a message and who instigated. *",
    "EliminationFeedMessageRepl": "Data structure for replicated elimination feed device messages using the FastArraySerializer. *",
    "FortBotPOIExcludedZoneDataTableRow": "Data structure representing an exclusion zone for BotPOI",
    "CurvePoint": "Data structure that stores a point on the curve",
    "CurvePoints": "Data structure wrapper for an array of CurvePoints",
    "FortTieredWaveData:WaveSetCollectionData": "Data table containing collections of wave sets",
    "FortQuestPackInfo": "Data table containing each day's reward in order. Uses FFortLoginReward as row type\nUPROPERTY(EditAnywhere)\nUDataTable* Rewards;\n};",
    "FortSTWLootData:LootPackageData": "Data table containing loot package data",
    "FortSTWLootData:LootTierData": "Data table containing loot tier data",
    "FortTieredWaveData:WaveSetCollectionLootData": "Data table containing sets of loot data for the entire collection",
    "FortTieredWaveData:ModifierSetData": "Data table containing sets of modifier data",
    "FortTieredWaveData:WaveSetData": "Data table containing sets of wave data",
    "KeepItemContainer:ContainerDataTable": "Data table governing this container",
    "CreativeToolObjectInteractionRow": "Data table information for determining which classes get which treatments.\nAlso to allow certain objects to be hot fixable turned on/off",
    "WeaponModMagnitudeCalculationData:WeaponModDataTable": "Data table of FortWeaponModDataRows.",
    "PossessPropClasses": "Data table row for listing allowed selectable prop classes for Rift Bubble version of PossessProp ability",
    "MusicTrackData": "Data table row for songs",
    "ScoreMultiplierRow": "Data table row for stat score multiplier data",
    "RidableComponent:PlaylistTagBlacklistRowHandle": "Data table row representing playlist tags that should block riding",
    "RiderComponent:PlaylistTagDenylistRowHandle": "Data table row representing playlist tags that should block riding",
    "CurieManagerComponentEntry": "Data table row struct to manage Curie manager component and their configs",
    "FortProceduralCatalogCostPriceFactor": "Data table structure representing a multiplication against a procedural catalog cost",
    "FortScriptedActionParams:SourceData": "Data table that granted this action, usually a quest objective handle",
    "FortMapQuestMapMarkerData:FailedMapMarkerActorPositions": "Data table that has a list of gameplay tag names that we expected to find during map marker commandlet run but they were not found",
    "FortMapQuestMapMarkerData:MapMarkerActorPositions": "Data table that has all map marker world map positions mapped to a gameplay tag name",
    "FortAthenaAIBotNameRegionData:NameDataTable": "Data table with all names associated to RegionId",
    "ScriptedObjectMovement_StaticPath:SplineData": "Data that affects spline generation.\nIndices in this array correspond to input keys in the master spline path.\nTo find a splines input key, click a point in the spline, click the master spline path component in the details panel,\nand look under selected points.",
    "PendingSpawnInfo:LootDropData": "Data that defines potential loot drop chances and tier groups",
    "FortAthenaMutator_DestroyActorsAndComponents:ActorDefinitions": "Data that defines which actor classes or components to destroy",
    "FortMantisPawnComponent:MontageDataMap": "Data that has been extracted from the montages in the mantis data asset.",
    "RockVehicleAbilityOutContinuous": "Data that the async thread gives to the game thread every frame.",
    "RockVehicleAbilityOutPersistent": "Data that the async thread gives to the game thread that does not change often.",
    "RockVehicleAbilityInContinuous": "Data that the game thread gives to the async thread every frame.",
    "RockVehicleAbilityInPersistent": "Data that the game thread gives to the async thread that does not change often.",
    "BulletWhipTrackerSystemData": "Data that would have been on the component, but now is restructured so it can be organized in the System via id->data in the map",
    "AthenaScoreData": "Data the describes an event that can contribute to the score of a player for playlists that use scoring to determine the win condition",
    "RealitySaplingPersistentData": "Data the sapling needs in order to initialize to the proper state at match start.",
    "CreativeMiniMapComponentIconData": "Data to replicate at the same time.",
    "QuestProductData": "Data to represent the quests within a product",
    "FortCreativeEntitlementComponent": "Data to track various access rights to UI elements in Creative.",
    "GameplayStatMetadataTableRow:DataType": "Data type of the stat",
    "SupplyDropSpawnData:ItemDeliveryData": "Data unique to the ItemDelivery type of supply drops",
    "SupplyDropSpawnData:ZoneBasedData": "Data unique to the ZoneBased type of supply drops",
    "AdHocSquad_InviteData": "Data used as part of FAdHocSquad_InviteDataArray to keep track of which players are performing the squad invite emote, or why their last squad invite emote ended.",
    "FortAthenaAIBotRunTimeCustomizationData": "Data used at runtime to spawn a bot",
    "BracketDefinition": "Data used by MMS on arena playlists to control point spread of matches",
    "FillRateTable": "Data used by MMS to control the number of humans per match, and how long to wait before filling with bots",
    "PlayerRatingBrackets": "Data used by MMS to set the default skill brackets used during bucket startup",
    "SpecialEventCursorStackEntry": "Data used for pushing/popping a cursor onto/from the stack",
    "TeamPerformanceMessageReplication": "Data used for replication to force all clients to show a FTeamPerformanceMessageData message.",
    "MashAIPawnLootDropOverride": "Data used to apply a loot drop override to an AI with a specific gameplay tag.",
    "FortAthenaMutator_Ashton:RespawnLogicData": "Data used to calculate how to respawn the player",
    "FortAthenaMutator_Barrier:RespawnLogicData": "Data used to calculate how to respawn the player",
    "FortAthenaMutator_BasicLimitedLives:RespawnLogicData": "Data used to calculate how to respawn the player",
    "FortAthenaMutator_Cobalt:RespawnLogicData": "Data used to calculate how to respawn the player",
    "FortAthenaMutator_Disco:RespawnLogicData": "Data used to calculate how to respawn the player",
    "FortAthenaMutator_TDM:RespawnLogicData": "Data used to calculate how to respawn the player",
    "FortAthenaMutator_TimedRespawnHelper:RespawnLogicData": "Data used to calculate how to respawn the player",
    "FortAthenaMutator_JoinInProgressSpawnLocation:SpawnLogicData": "Data used to calculate how to spawn the player",
    "FortAthenaMutator_SpawnInAir:InitialSpawnLogicData": "Data used to calculate how to spawn the player",
    "FortCreateItemDetail": "Data used to create an item on mcp",
    "DynamicXpAfkPenalty": "Data used to determine penalties when a player goes AFK",
    "RadiusTrackingInitializer": "Data used to initialize a Radius Tracker. Mostly contains parameters for how the Radius Indicator should act.\n    This data also lives in FRadiusTrackingInfo (the struct that runs a living Radius Tracker) as mostly const data that rarely changes.",
    "FortAthenaMutator_Bagel:AreaSpecialActorData": "Data used to register an area as a special actor",
    "FortAthenaMutator_Mash:AreaSpecialActorData": "Data used to register an area as a special actor",
    "BuildingPoolHarvestResourceSpawnsData:AttemptSpawnResourcesParams": "Data used to track the desired harvest resource spawns for the building.\n     This data will eventually be used to call ABuildingSMActor::AttemptSpawnResources() when it is time to spawn the pooled harvest resources.",
    "VkPersistenceVersion:Version": "Data version used to determine whether migrations need to run\n\nSee FVkMigrationChain constructor comment for more information",
    "FortAthenaLivingWorldCategory:EventTable": "DataTable of all the Events in this category.",
    "FortAthenaLivingWorldCategoryTableData:CategoryTable": "DataTable of the categories.",
    "OutpostUpgradeAndPrestigeBuildingData:DefaultOutpostBuildingUpgradeData": "DataTable that keeps track of all upgrades for all outpost buildings\nDefault data used when no appropriate per theater data was found",
    "OutpostUpgradesPerTheaterData:OutpostUpgradesData": "DataTable that keeps track of all upgrades for all outpost items for the specified theater",
    "FortBotClusterLootWeightDataTableRow": "DataTableRow used to setup specific weight on loot",
    "FortSearchPassParams:BestDatacenterId": "Datacenter to search within",
    "MatchmakingParams:DatacenterId": "Datacenter to use",
    "FortDailyLoginRewardStat:LastClaimDate": "Date of last log-in to ensure max of one claim per day",
    "FortActiveSubscription:SubscriptionEndDate": "Date this subscription is expected to either expire or be renewed.\nCould be different from NextRenewalRewardDate if eg. 3 or 6 month subscriptions are offered",
    "FortCrewTemporaryItemsState:AvailableItemsEnd": "Date when available temporary items will expire",
    "DaySequenceEditorSettings": "DaySequence Editor settings.",
    "RandomDayphaseFX:RequiredDayphases": "Dayphases in which this FX should be shown.",
    "EFortCurieToggleComponentDeactivationBehavior.TimedDeactivationNoRefresh": "Deactivate the component after DeactivationTime seconds, not allowing it to be refreshed by subsequent applications",
    "EFortCurieToggleComponentDeactivationBehavior.TimedDeactivationAllowRefresh": "Deactivate the component after DeactivationTime seconds, refreshing the timer if a new application comes in",
    "EDeployableTurretState.Deactivated": "Deactivated, such as by EMP",
    "FortCurieToggleComponent:DeactivationBehavior": "Deactivation behavior for the component",
    "FortGyroV2Settings:GyroV2DeadZone": "DeadZone for gyro aiming input",
    "FortGameMode:DeathPenaltyData": "Death penalty specifics for a GameMode",
    "FortPlayerControllerZone:PlayerDeathReport": "Death report of the player from their last pawn death; Set directly on the server and RPC'd to the client for timing purposes",
    "LacklusterData:BuildingSMActorNonPropDeathSound": "Death sound for BuildingSMActors that are not props",
    "LacklusterData:BuildingSMActorPropDeathSound": "Death sound for BuildingSMActors that are props",
    "EFortReplicatedStat.Deaths": "Deaths",
    "FortPlayerAnimationComponent:DebugManager": "Debug",
    "DebugMinimapData": "Debug Minimap Information (Icon, Scale, etc.)",
    "FortAthenaAIBotController:DebugMinimapData": "Debug Minimap Information (Icon, Scale, etc.)",
    "FortPrefabSpawner:CurrentPreviewerActor": "Debug actor used by this spawner to preview prefabs.",
    "EDynamicUIDebugDisplayMode": "Debug display mode",
    "DebugNativeActionInfo": "Debug info for debug native action display.",
    "EIndexObjectRegisterLogType": "Debug logging type for the Index Object Register.",
    "BuildingContainerDebugInfo": "Debug only. Using to debug draw location info for building containers.",
    "FortGameState:AmmoBoxInfos": "Debug only. Using to debug draw location info for building containers.",
    "FortGameState:TreasureChestInfos": "Debug only. Using to debug draw location info for building containers.",
    "BotPOIDebugInfo:DebugInfo": "Debug string used to add information from other systems",
    "FortAthenaMutator_Mash:DebugPoiRouteName": "Debugging only variable used to force the Mash game to use a specific route listed in PoiRoutesDataTable. NOTE: There is also a CVar for defining the debug POI route which takes priority over this value.",
    "FortGameplayCueDecalInfo:Decal": "Decal actor class to spawn",
    "FortCosmeticModification:DecalColourAlterationEnd": "Decal end colour alteration to apply",
    "FortCosmeticModification:DecalColourAlterationStart": "Decal start colour alteration to apply",
    "FortBurstEffectData:BurstDecal": "Decal to be spawned on GC execution. Actor should have fade out time or override should be set so it will clean up properly",
    "SubmixEffectDynamicReverbSettings:DecayHFRatio": "Decay High Frequency Ratio - 0.1 < 0.83 < 2.0 - how much quicker or slower the high frequencies decay relative to the lower frequencies.",
    "SubmixEffectDynamicReverbSettings:DecayTime": "Decay Time - 0.1 < 1.49 < 20.0 Seconds - larger is more reverb",
    "FortSkyTube:InnerMagnetDecel": "Decel applied when slowing player's velocity relative to the inner ring.",
    "FortCharacterMovementMutatorComponent:BuffetBubblesRelativeDeceleration": "Decelerate the relative velocity each frame toward zero",
    "WindSplineComponent:InwardForceInnerRadiusDeceleration": "Deceleration applied when slowing velocity relative to the inner ring.",
    "WindSplineForceModifiers:InwardForceInnerRadiusDecelerationMultiplier": "Deceleration applied when slowing velocity relative to the inner ring.",
    "FortPawnStats:BrakingDecelerationFlying": "Deceleration when flying and not applying acceleration. @see UCharacterMovementComponent::BrakingDecelerationFlying",
    "FortPawnStats:BrakingDecelerationWalking": "Deceleration when walking and not applying acceleration. @see UCharacterMovementComponent::BrakingDecelerationWalking",
    "FortAthenaMutator_CreativeEnvironmentalDamage:AllowedToEditFilter": "Decide whether to allow damage to environment",
    "FortAthenaMutator_EnvironmentalDamage:EnvironmentDamageFilter": "Decide whether to allow damage to environment",
    "EChallengeListSection": "Declared here since a UENUM alone isn't enough to get a generated.h (used by the challenge list items)",
    "FortDecoPreview_GenericTrap": "Deco preview for generic traps",
    "EFortItemType.AthenaVehicleCosmetic": "Decorative item attached to a vehicle (theoretical)",
    "EFortBuildingType.Prop": "Decorative piece that can be destroyed",
    "EFortItemType.AthenaPetCosmetic": "Decorative skin for a pet (theoretical)",
    "EFortItemType.AthenaItemWrap": "Decorative skin for one or more weapons or vehicles",
    "EFortHitPointModificationReason.DamageOverTime": "Decreased due to damage over time effect",
    "EFortHitPointModificationReason.DamageReceived": "Decreased due to distinct event (i.e. hit by enemy)",
    "FortGameModeEmptyDedicated": "Dedicated server \"empty shell\" for advertising a resource to be configured as PvP or PvE at user's request",
    "EFortWeaponReduceMeshWorkSetting.DontReduceWork": "Default",
    "EPostpartyClippingState.Unset": "Default",
    "EWidgetInterfaceTimerStatus.Active": "Default",
    "EWinConditionParentType.Desktop": "Default",
    "FortVisibilityComponent:bDistanceCheck2D": "Default (true), Determines if the radius check uses 2D distance or 3D distance.",
    "InteriorAudioDictionaryEntry:DefaultEvaluation": "Default Evaluation",
    "SettingsHUDVisibilityAndText:DefaultHUDVisibility": "Default HUD visibility value.",
    "FortTimeOfDayManager:DefaultSkydomeMaterial": "Default Material stored once created to use it later when all inhibitors are removed and we set default settings",
    "ESocialTutorialType.None": "Default No Type Association",
    "OutpostUpgradeAndPrestigeBuildingData:DefaultPOSTData": "Default P.O.S.T. setup, applied when no data for specific theater is defined.",
    "FortAudioAnalysisSettings:AnalysisSubmix": "Default Submix used for audio analysis",
    "FortAthenaMutator_SpecialEvent:BlockedNativeActions": "Default action tags to always block.  Can be modified by AddTo/RemoveFrom/ClearBlockedNativeActions().",
    "HUDNavArrow:DefaultDepartRadius": "Default adius at which to fade in",
    "WeaponItemDefinitionDesignerData:BaseAlteration": "Default alteration to use as the base for abilities",
    "FortGameplayCueNotify_Actor:DefaultAttachment": "Default attachment rule that applies for all spawns unless overridden",
    "FortGameplayCueNotify_Loop:DefaultLoopingAttachment": "Default attachment rules for LOOPING effects. Looping effects always play with no condition check!",
    "FortFactionInfo:DefaultAttitude": "Default attitude for this faction",
    "FactionData:DefaultAttitude": "Default attitude this faction has against other factions",
    "HeroSpecializationDesignerData:CombinedStatGEs": "Default attributes for hero",
    "FortPawnComponent_GrindRail:BaseMaxSpeed": "Default base max speed, will be overriden by rail actors.",
    "FortPlayerAnimationComponent:DefaultFullBodyToUpperBodyInMotionBlendTime": "Default blend time when blending between FullBody and UpperBodyInMotion slot, used when not overridden by FortMontageSlotBlendMetaData",
    "FortSeasonItemMapData:FullScreenMapIconBrush": "Default brush to use",
    "FortSaveFileBuildingInstructionsHandler:DefaultBuildingInstructions": "Default building instructions that will be spawned if cloud file is not found",
    "TrapItemDefintionDesignerData:Placement": "Default building type this trap attaches to",
    "EDBNOPlayStyle.DefaultButPassiveOnPlayers": "Default but passive on human players",
    "FortVehicleAimingWeaponComp:bShouldResetCameraHorizontallyToBarrelWhenEntered": "Default can be overridden using GetShouldResetCameraToBarrelWhenEntered in vehicle.",
    "EFortRpcCategory.Unknown": "Default category",
    "FortWorldManager:DefaultLootQuotaCategory": "Default category of loot quotas for tiles in this level. If we are not in a tiled level the whole level will calculate the quota using this category as if it was a single tile.",
    "PartOverrideData:DefaultParts": "Default character head part used if the player's cosmetic loadout is marked with a Cosmetics_MetaTags_Trait_Headless tag",
    "FortGameplayCueNotify_Actor:DefaultCondition": "Default condition to check before spawning anything, also used for all spawns if not overridden",
    "FortAthenaAIBotController:CosmeticLoadoutBC": "Default cosmetic loadout use by the BotController",
    "EAthenaGameMsgType.DefaultCriticalMessage": "Default critical/important message",
    "FortCreativeDeviceButtonComponent:EditWidget": "Default edit widget to use for the device button component in the customize panel",
    "FortAIDirector:DefaultNightEncounter": "Default encounter to use at night if no other objectives are active",
    "FortAIPawn:DefaultEyeBrightness": "Default eye brightness for this Husk blueprint",
    "FortAIPawn:DefaultEyeColor": "Default eye color for this Husk blueprint",
    "FortActorComponent_Affiliation:bHasPerceptionUpdateRequest": "Default factions this actor belongs to",
    "FortActorComponent_Affiliation:DefaultFactionTags": "Default factions this actor belongs to. For AIs, use affiliation spawner data component to set the default factions, this is mostly used for non-AIs actors that might require a faction to have valid relationship against players/AIs",
    "FortPickup:DefaultFlyTime": "Default fly time used when a splinecurve isn't provided or its forced to be used",
    "EAthenaPathFollowingFocus.TowardsNextPathPoint": "Default focus direction. While moving, the character will align towards its current path point",
    "EAirCraftBehavior.Default": "Default game behavior.  One aircraft coming from a random direction.",
    "FortPawn:HealthRegenDelayGameplayEffect": "Default gameplay effect that prevents health regeneration after taking damage",
    "FortPawn:ShieldRegenDelayGameplayEffect": "Default gameplay effect that prevents shield regeneration after taking damage",
    "FortPawn:HealthRegenGameplayEffect": "Default gameplay effect that restores health after taking damage",
    "FortPawn:ShieldRegenGameplayEffect": "Default gameplay effect that restores shields after taking damage",
    "EAthenaGameMsgType.DefaultMessage": "Default generic message",
    "EAthenaGameMsgType.DefaultIntro": "Default intro letting everyone know the goal",
    "FortPawnComponent_GrindRail:MaxBaseAcceleration": "Default max base acceleration, will be overriden by rail actors.",
    "FortPawnComponent_GrindRail:MaxSpeedIncreaseFromDownwardSlope": "Default max speed increase from downward slope, will be overriden by rail actors.",
    "FortMissionStormSafeZone:SafeZoneMesh": "Default mesh to use for this safe zone",
    "FortWeap_BuildingTool:DefaultMetadata": "Default metadata pattern to equip upon equipping the building tool",
    "FortPawnComponent_GrindRail:MinBaseAcceleration": "Default min base acceleration, will be overriden by rail actors.",
    "FortMinigame:MinigameDefaultAutostartTimeout": "Default minigame autostart timeout. This is seperate from the User Option for auto start timer, but can be valuable to configure\nif we decide to host minigames in non creative modes, etc.\nThis seems to only be used for CreativeLTM flow.\nNote: It looks like the code for GMA->UnPauseWarmup(EGameModePauseWarmupMaskId::Minigame); may clobber this value.",
    "FortAIPawn:MinimapDefaultIconColor": "Default minimap icon color",
    "MinimapZoomBounds:MinZoomMobile": "Default minimum zoom level (specifically on mobile), used when dynamic zoom is disabled",
    "MinimapZoomBounds:MinZoom": "Default minimum zoom level, used when dynamic zoom is disabled",
    "ValkyrieEditorConfig:DefaultProjectName": "Default name for a new project",
    "FortAthenaAIBotController:NameSettingsBC": "Default name settings used by the BotController",
    "GameDifficultyInfo:DefaultPlayerLives": "Default number of player lives.",
    "ERichPresenceStateChange.AutoUpdate": "Default option to just update current state basics like status and session",
    "FortAthenaAIBotController:PlayerToSpectateOnDeath": "Default pawn to spectate when dead",
    "VkTeamAuthorizedEmailDomain:Access": "Default permissions for users who self-join this team via this authorized domain",
    "TrapItemDefintionDesignerData:FrontendPreviewMeshOffset": "Default position for trap in frontend",
    "OutpostUpgradeAndPrestigeBuildingData:DefaultPrestigeData": "Default prestige setup, applied when no data for specific theater is defined.",
    "EFortQuestType.Task": "Default quest type, this blocks progression",
    "AudioWorldizationDefaultSettings": "Default settings for the audio worldization system",
    "FortAIPawn:DefaultSkinColor": "Default skin color for this pawn",
    "FortAIPawn:DefaultSkinGlow": "Default skin color for this pawn",
    "FortPickupEffect:PickupByNearbyPawnSound": "Default sound used when this object is picked up by a nearby teammate or enemy",
    "FortPawnComponent_GrindRail:SprintingAcceleration": "Default sprinting acceleration, will be overriden by rail actors.",
    "FortPawnComponent_GrindRail:SprintingMaxSpeed": "Default sprinting max speed, will be overriden by rail actors.",
    "FortWeapon:ReticleDefaultPrimaryStrikeAngle": "Default strike angle to use for melee reticle primary attack",
    "FortWeapon:ReticleDefaultSecondaryStrikeAngle": "Default strike angle to use for melee reticle primary attack",
    "FortScoutDrone:DefaultTags": "Default tags on this actor (NOT editable per instance)",
    "FortActorComponent_MultiInteract:GradualCounterMultiplier": "Default to 0.0 value by default makes the countdown reset instantly on loose focus; or else timer fills up gradually, multiplier would be sampled from level 0 on curve",
    "FortActorComponent_MultiInteract:MultiInteractMultiplier": "Default to 1.0 if no curve provided; else multiplier would be sampled at different level on curve",
    "GroundTrailsMap:DefaultTrails": "Default trails to play when driving over unknown terrain",
    "FortPlayerPawn:DBNOHorizontalTetherMultiplier": "Default value 0.0 Interrupts interaction with a DBNO player on any movement,\nor else the player can move during this interaction.\nThis value multiplies DBNOInteractionBoxExtent X and Y values if above 0.0",
    "FortPlayerPawn:DBNOVerticalTetherMultiplier": "Default value 0.0 Interrupts interaction with a DBNO player on any movement,\nor else the player can move during this interaction.\nThis value multiplies DBNOInteractionBoxExtent Z value if above 0.0",
    "BuildingGameplayActorSpawnMachine:ResurrectionHorizontalTetherMultiplier": "Default value 0.0 Interrupts interaction with the reboot van on any movement,\nor else the player can move during this interaction.\nThis value multiplies InteractionBox X and Y values if above 0.0",
    "BuildingGameplayActorSpawnMachine:ResurrectionVerticalTetherMultiplier": "Default value 0.0 Interrupts interaction with the reboot van on any movement,\nor else the player can move during this interaction.\nThis value multiplies InteractionBox Z value if above 0.0",
    "FortPawnComponent_GrindRail:SpeedHardCap": "Default value for speed hard limit, will be overriden by rail actors.",
    "FortLayeredAudioFloatParam:Value": "Default value of parameter, to be set on construction",
    "EDynamicUIZOrder": "Default values for the various z order commonly used. // int32 to match Slate",
    "ValkyrieEditorConfig:DefaultProjectVersionSuffix": "Default version suffix for a new project",
    "EFortAnnouncerTeamVocalChords.Team2": "Default vocal chords in PvE and human team 1 in PvP",
    "EFMDeviceCablePortComponentAllowMultipleConnections.ForceMultiple": "Default, will use the default logic defined in the Device Cable Port Component to decide",
    "CharacterFallbackPreloadBlock:bShouldGoInNPCBudget": "Defaulted to true as this is currently only used for AIs",
    "CharacterPreloadBlock:bShouldGoInNPCBudget": "Defaulted to true as this is currently only used for AIs",
    "FortAIPawn:NetUpdateFrequency_Min": "Defaults for NetUpdateFrequency values for each Fort AI LOD level.  Higher is less expensive computationally.",
    "FMDeviceCableManagerComponent:DefaultConnectionOutputs": "Defaults that are passed to device cable connections",
    "FortAthenaVehicle:bStencilEnabled": "Defaults to true, but becomes false if the vehicle dies or in other cases where the stencil needs to remain disabled.",
    "FortPawnComponent_Convert:bCanShowMarker": "Defaults to true.  If false then the marker cannot be shown",
    "ActiveGameplayModifierArray:DeferredGameplayModifiers": "Deferred modifiers",
    "DeferredActorData:BuildingActor": "Deferred spawned actor waiting for finish spawn call",
    "IndicatedActorData:StepTime": "Defers the adding of each subsequent actor to the list by this time.",
    "StenciledActorData:StepTime": "Defers the adding of each subsequent actor to the list by this time.",
    "CatalogOfferDefinition": "Define a game catalog entry in the editor",
    "ImGuiSettings:ToggleInput": "Define a shortcut key to 'ImGui.ToggleInput' command. Binding is only set if the key field is valid.\nNote that modifier key properties can be set to one of the three values: undetermined means that state of the given\nmodifier is not important, checked means that it needs to be pressed and unchecked means that it cannot be pressed.\n\nThis binding is using Player Input's DebugExecBindings which only works in non-shipment builds.",
    "ObjectiveEntry_Gate:AdvancedGateLogic": "Define advanced relationships between gates\n       * Note: Advanced gate logic allows gates to work as logic gates\n       * AND, OR, NOR, and XOR gates are all possible to configure easily",
    "FortLockerCategorySlotInfo": "Define details for a specific slot in a category",
    "AICustomTargetConfiguration:ValidRequestTypes": "Define here what kind of use this offset has.",
    "FortAthenaMutator_BasicLimitedLives:DefaultData": "Define how lives are distributed and the maximum number (by default, unless there is an entry for the team in the map).",
    "ELeashReturnLocationMode": "Define how we will choose the location to return in the leash",
    "EObjectTypeUsability": "Define if an ObjectType is usable, or if it's blocked for a specific reason\nMaybe change to a tag based solution or something else, but this was good for now\nOrganized by sort order",
    "FortAthenaLivingWorldDespawnCondition:bUseCustomDeathTag": "Define if we use custom death tags when this condition is responsible for the destruction of a pawn. If set to false, it'll use the Suicide call which set the death tag to InstantDeath. Does nothing for non pawn actor.",
    "PerkAvailabilityContainer:DesiredPerkCount": "Define the amount of perks we want the agent to have (-1 means all the available ones)",
    "CollisionReactionConfiguration:PawnReactionDelayPerActor": "Define the delay between reactions on single pawn. Set to 0 to have no delay.",
    "CollisionReactionConfiguration:PhysicsObjectReactionDelayPerActor": "Define the delay between reactions on single physics object. Set to 0 to have no delay.",
    "CollisionReactionConfiguration:VehicleReactionDelayPerActor": "Define the delay between reactions on single vehicle. Set to 0 to have no delay.",
    "FortAthenaLivingWorldCondition_TrackedPlayerPresence:MinDistanceToPlayer": "Define the exclusion range : No player should be within this radius",
    "FortAthenaLivingWorldCondition_TrackedPlayerPresence:MaxDistanceToPlayer": "Define the inclusion range : At least 1 player should be within this radius",
    "FortCreativeDiscoveryContentPanel:MetricInterval": "Define the interval of data that is loaded to make a selection.",
    "FortCreativeDiscoveryContentPanel:MetricName": "Define the metric name that drives the selected content.",
    "FortAthenaLivingWorldNavigationInvokerComponent:GenerationRadius": "Define the radius around the actor location to generate navmesh",
    "FortCreativeDiscoveryContentPanel:CuratedListOfLinkCodes": "Define the sequential list of curated link codes to display.",
    "FortAthena_WaxToken:EntrySpline": "Define the shape of the path the token will take on spawn. First point is where the token starts (from the victim)",
    "FortAthena_WaxToken:ExitSpline": "Define the shape of the path the token will take on spawn. Last point is where the token ends (at the token target)",
    "EFortAthenaStateTreeTaskFeatureExecutionMode": "Define when a Task's feature should be executed.",
    "FortAthenaAIObjectTrackerQuerySimplified:PickOrder": "Defined how to pick the winner; not used when finding all objects fulfilling this query.",
    "FortMapIconDefinition": "Defines Icon properties used when showing an icon on the map/minimap",
    "FortMiniMapIndicatorTextProperties": "Defines Indicator Text data",
    "FortMiniMapData": "Defines Mini-Map data",
    "FortObjectiveConversation": "Defines a conversation and maximum number of plays for it",
    "FortObjectiveAvailableConversation": "Defines a conversation that can be played and the number of remaining plays",
    "FortCreativeDiscoverySplicedEntry": "Defines a curated entry that is spliced into an otherwise metric based result set.\nThe visibility of this entry is determined by this entry's determinism level.",
    "DaySequenceModifierComponent:CustomVolumeBlendWeight": "Defines a custom blend weight. The final blend weight is the minimum between the Distance blend weight and CustomVolumeBlendWeight.",
    "DAD_Island": "Defines a named island reference.\nThese islands may point to different link codes over time.",
    "FortCreativeDiscoveryContentPanel": "Defines a panel where selected content is sequentially displayed.",
    "PickupInstigatorData:OverridePickupClass": "Defines a pickup class to be used by \"dropped\" ItemEntries generated from this pickup or related item entries",
    "FortCosmeticRestrictionDefinition": "Defines a single restriction, that prevents a specific cosmetic from being used with another character. Currently,\nthis only allows characters to restrict other items from being used",
    "FortUIStyleWindowButtons": "Defines a structure that contains styles for the buttons in the title bar\n(upper-right corner of the window).",
    "FortCreativeDiscoveryContentPanel:EntrySkippingMethod": "Defines a way to \"skim\" the top entries from a result set before the final selection process.",
    "AbilityActivatedByInputData": "Defines a way to map an ability to required and ignore tags.\n      This will be used to allow ability activation depending on current tags.",
    "TransientOverride": "Defines a way to override \"transience\" for a specific property on an object; generally intended for usage with core engine types where property specifiers can't be changed",
    "HelperGameplayTagToAmmoCountMultiplier": "Defines a weapon's multiplier override to the spawn count",
    "SourceToAmmoMultiplierOverrideData": "Defines a weapon's multiplier override to the spawn count",
    "WeaponPickupAmmoMultiplierOverrideData": "Defines a weapon's multiplier override to the spawn count",
    "FortAthenaMutator_ReroutePlayerEvent:RerouteDefinitions": "Defines additional gameplay events to trigger when the specified filters are matched for incoming gameplay events",
    "FortCurieExecutionFilter": "Defines additional rules for when a Curie application/interaction can be executed *",
    "FortCurieExecutionEntry:ExecutionFilter": "Defines additional rules for when the specified element can be applied to the interacting object *",
    "AssetAdapterInfo": "Defines an \"adapter\" for an asset - a specific actor to spawn and assign the asset as a property on.",
    "ReroutePlayerEventDefinition": "Defines an additional event to trigger when an incoming event is received and specified filter tags are matched",
    "FortScriptedObjectMovementPhaseData": "Defines an entire phase.",
    "FortGameSessionDedicatedAthena:SaveFrameworkConfig": "Defines behavior related to the Save Data callback bound to the Save Framework",
    "FortCreativeDiscoveryContentPanel:SplicedEntries": "Defines curated entries which are spliced into a panel.",
    "EFortActionSourceControlCheckoutSuccessCriteria": "Defines different types of source control checkout action success criteria",
    "EItemWrapSectionNames": "Defines friendly names for sections (used when limiting which section a wrap is applied to)",
    "NyxGlassWeaponComponent_Swinging:GasOrthogonalPowerWhileAttacking": "Defines gas force while in the attacking state.",
    "NyxGlassWeaponComponent_Swinging:GasOrthogonalPowerWhileSwinging": "Defines gas force while in the swinging state.",
    "EFortCreativeDiscoveryPanelOrdering": "Defines how a content panel may be re-ordered relative to other panels.",
    "GameplayFeedbackEventInfo": "Defines how a given feedback event should be handled",
    "PickaxeFXAttachmentRules": "Defines how an FX component is attached to a pickaxe. Similar to FAttachmentTransformRules but exposed to BP",
    "FortAIDirector:UtilityContributionData": "Defines how combat factors influence utility selection",
    "FortCreativeDiscoveryContentPanel:PanelType": "Defines how content for this panel is selected.",
    "NyxGlassWeaponComponent_Swinging:CameraDistScale": "Defines how far away from the player's camera the overlap sphere query should start.",
    "ObjectiveExtension_Gate:GateCheckType": "Defines how gate logic should be processed\n       * Require All - Every gate on this filter has to be in an open state for an objective to progress\n       * Require Any - If any gate on this filter is in an opened state the objective can progress\n       * Require Sequential Order - Will not allow gates to open unless the previous gate in the array is already opened,\n       *         Will only check the logical open state on the final gate in the array for objective progression",
    "MutableObjectiveExtension_Gate:GateCheckType": "Defines how gate logic should be processed\n       * Require All - every gate ahs to be in an open state for an objective to progress\n       * Require Any - If any gate on this filter is in an opened state the objective can progress\n       * Require Sequential Order - Will not allow gates to open unless the previous gate in the array is already opened,\n       *         Will only check the logical open state on the final gate in the array for objective progression",
    "NyxGlassWeaponComponent_Swinging:LeapingBack_OverrideTimer": "Defines how long (in sec) the leaping back overrides should be set.",
    "NyxGlassWeaponComponent_Swinging:InitialAccelerationTime": "Defines how long acceleration should initially occur.",
    "NyxGlassWeaponComponent_Swinging:FullHoverRechargeTime": "Defines how long it should take before the player can hover again.",
    "NyxGlassWeaponComponent_Swinging:SlashLockTime": "Defines how long the player is held in place during the slashing state.",
    "NyxGlassWeaponComponent_Swinging:SlashLeapBackTime": "Defines how long the player should leap backwards after the slash has occurred.",
    "FortMinigame:TeamRotationSetting": "Defines how many rounds should be played before a team switch occurs\n0 = Disabled, 1 = Every round, 2 = Every other round, ect.",
    "FortCreativeRoundSettings:RestockAmmoAmounts": "Defines how much ammo to give when restocking weapons.",
    "FortMinigame:RestockAmmoAmounts": "Defines how much ammo to give when restocking weapons.",
    "FortGameplayCueAudioInfo:Attachment": "Defines how the ParticleSystem will attach to its target",
    "FortGameplayCueDecalInfo:Attachment": "Defines how the ParticleSystem will attach to its target",
    "FortGameplayCueParticleInfo:Attachment": "Defines how the ParticleSystem will attach to its target",
    "GameplayFeedbackEventInfo:MsgType": "Defines how the message should be displayed; None means kill feed",
    "FortSphericalVehicle:BaseSphericalDriveParams": "Defines how the vehicle drives.",
    "FortCreativeDiscoveryContentPanel:PanelOrdering": "Defines how this panel may be re-ordered.",
    "SpecialEventTODMSubphaseData": "Defines how to modify the TimeOfDayManager at a specific time during a special event phase",
    "SpecialEventTODMPhaseData": "Defines how to modify the TimeOfDayManager throughout a special event's phases",
    "FortPortalComponent:bWindowLockedStartsLocked": "Defines if WindowLockMode calls RefreshLockStatus on Minigame Start, causing it to Lock",
    "InhibitorData:bIsVolumeInhibitor": "Defines if this is an inhibitor that's using a Volume",
    "UserOptionDefinition:DestructiveAction": "Defines if this option is destructive and what the dialog displays if the value is a destructive value.",
    "FortWorldSettings:bFixUpAllActorsAndFoundations": "Defines if we want to run the navigation asset fix up on most assets or just the one that are loaded with the world (force enabled in Athena)",
    "FortWorldSettings:bGenerateNavGraph": "Defines if we will generate a NavGraph (force disabled in Athena)",
    "DestroyActorsAndComponentsMutator_ActorDefinition": "Defines information for determining whether to destroy a class of actor, or to destroy some of its components",
    "DestroyActorsAndComponentsMutator_ComponentDefinition": "Defines information for determining whether to destroy a component, and how to destroy it",
    "DanceBeatInfo": "Defines information for emote's animation in musical terms",
    "FortMiniMapIconMaterialParameterData": "Defines material parameter data",
    "FortCustomTickComponent:QualitySettingsMap": "Defines multiple groups of quality settings, looked up by tag",
    "FortCreativeItemDropParams": "Defines parameters for controlling how a particular item drop should be handled",
    "ScriptedObjectMovement_StaticPath": "Defines path in the world for objects to follow.\nDesigners define the broad path and use the editor buttons to generate detailed paths between spline nodes\nIntended to be subclassed by specific plugins to customize path generation.",
    "FortAIGoalManager:PawnGoalSelectionTable": "Defines pawn goal selection criteria (including world and enemy goal queries as well as related properties) per pawn using Gameplay tags to identify which goal selection criteria apply to which pawns.",
    "EFortCreativeItemDropAmount": "Defines rule presets for determining the amount of an item to be removed from an inventory",
    "FortCreativeDiscoveryContentPanel:SkippedEntriesPercent": "Defines the [0, 1] percentage of top entries to skip.",
    "NyxGlassWeaponComponent_Swinging:SlashLeapBackHeightModifier": "Defines the added height to be used when calculating the normalized leaping back velocity.",
    "WeaponPickupAmmoCountData": "Defines the ammo and how many to spawn in a pickup",
    "NyxGlassWeaponComponent_Swinging:SpeedSoftCapDragWhenHovering": "Defines the base speed drag while hovering.",
    "NyxGlassWeaponComponent_Swinging:SpeedSoftCapDrag": "Defines the base speed drag while swinging.",
    "NyxGlassWeaponComponent_Swinging:BaseSwingSpeed": "Defines the base swing speed.",
    "NyxGlassWeaponComponent_Swinging:SlashLeapBackSpeed": "Defines the based speed of the player when leaping back after the slash attack.",
    "FortSaveFrameworkConfig:ActionOnSaveDataFailed": "Defines the behavior on save data failure.",
    "FortMovingPlatformComponent": "Defines the behaviors of other actors while they are \"basing\" on a moving platform",
    "DaySequenceModifierComponent:BlendAmount": "Defines the blend range based on BlendMode. When BlendMode == Distance, this is interpreted as world units",
    "EFortCustomPartType.Body": "Defines the body of the character, sometimes this is the only part (and this type is required).",
    "NyxGlassWeaponComponent_Swinging:SphereOverlapTargetingCollisionChannel": "Defines the collision channel used for the overlap sphere physics query.",
    "NyxGlassWeaponComponent_Swinging:RayTraceTargetingCollisionChannel": "Defines the collision channel used for the targeting raycast.",
    "CinematicSequenceDeviceBase:Visibility": "Defines the context(s) in which this device will play back",
    "NyxGlassWeaponComponent_Swinging:AttachedDeaccelerationMultiplier": "Defines the deceleration mulitplier while attached to the swing target.",
    "NyxGlassWeaponComponent_Swinging:UnattachedDeaccelerationMultiplier": "Defines the deceleration multiplier while unattached from the swing target.",
    "FortCreativeRoundSettings:DefaultRestockAmmoAmount": "Defines the default amount of ammo to give when restocking weapons that aren't specified by RestockAmmoAmounts.",
    "FortMinigame:DefaultRestockAmmoAmount": "Defines the default amount of ammo to give when restocking weapons that aren't specified by RestockAmmoAmounts.",
    "EPropertyOverrideTargetType": "Defines the different types of property override behaviors",
    "NyxGlassWeaponComponent_Swinging:SwingTargetRaycastDist": "Defines the distance for the direct raycast query to find swinging targets.",
    "NyxGlassWeaponComponent_Swinging:AttackTargetRaycastDist": "Defines the distance for the direct raycast query to find targets to attack.",
    "NyxGlassWeaponComponent_Swinging:GasReelInPowerAttacking": "Defines the gas reel in force while attacking.",
    "NyxGlassWeaponComponent_Swinging:GasReelInPowerSwinging": "Defines the gas reel in force while swinging.",
    "EFortCustomPartType.Head": "Defines the head, usually including the hair and face. Supports other parts applying specific morph targets to this part.",
    "NyxGlassWeaponComponent_Swinging:DesiredHoverZSpeed": "Defines the hover Z speed goal.",
    "NyxGlassWeaponComponent_Swinging:HoverZMultiplier": "Defines the hover Z speed multiplier when weapon is actively equipped.",
    "NyxGlassWeaponComponent_Swinging:HoverZMultiplierWhileUnequipped": "Defines the hover Z speed multiplier when weapon is not equipped.",
    "AutoApplyWeaponModData:WeightedNumModsToRoll": "Defines the individual weight that X number of mods can be applied to the weapon.\nThe length of the array corresponds to the max number of mods that can be applied.",
    "NyxGlassWeaponComponent_Swinging:InitialAccelerationStartSpeed": "Defines the initial acceleration speed.",
    "NyxGlassWeaponComponent_Swinging:AttackStartSpeed": "Defines the initial speed when the attack is initiated.",
    "NyxGlassWeaponComponent_Swinging:GasForceInterpSpeed": "Defines the interpolation speed for the gas force calculations.",
    "EItemWrapMaterialType": "Defines the kind of material needed for the wrap being applied",
    "EFortCreativeDiscoveryDeterminism": "Defines the level of determinism when calculating probability.",
    "NyxGlassWeaponComponent_Swinging:MaxAttachPointActorExtent": "Defines the max extent of a potential attach point Actor before closest point calculations need to be made.",
    "NyxGlassWeaponComponent_Swinging:HoverTimeWhileUnequipped": "Defines the max range for hovering while unequipped.",
    "NyxGlassWeaponComponent_Swinging:MaxAttachPointActorBoundsSize": "Defines the max size of an attach point Actor; used to filter out large geometry from valid targeting data.",
    "NyxGlassWeaponComponent_Swinging:MaxSpeedDecreaseFromUpwardAngle": "Defines the max speed decrease that can occur if swinging from an upward angle.",
    "NyxGlassWeaponComponent_Swinging:MaxAcceleration": "Defines the maximum acceleration that can occur during swinging.",
    "NyxGlassWeaponComponent_Swinging:TimeAttachedForMaxSpeed": "Defines the maximum amount of time needed before max speed should be reached.",
    "NyxGlassWeaponComponent_Swinging:MaxHoverTime": "Defines the maximum amount of time that can be spent hovering, in seconds.",
    "NyxGlassWeaponComponent_Swinging:MaxAttachedSpeedMultiplier": "Defines the maximum attached speed multiplier.",
    "NyxGlassWeaponComponent_Swinging:AttackMaxSpeed": "Defines the maximum attack speed.",
    "FortSaveFrameworkConfig:MaxConsecutiveErrors": "Defines the maximum number of consecutive errors allowed before performing the action above",
    "NyxGlassWeaponComponent_Swinging:MaxSpeedMultiplier": "Defines the maximum speed multiplier.",
    "NyxGlassWeaponComponent_Swinging:MaxHoverSpeed": "Defines the maximum swing speed during the hover state.",
    "NyxGlassWeaponComponent_Swinging:SpeedHardCapFailsafe": "Defines the maximum swing speed value that can be calculated.",
    "EFortCreativeDiscoverySkippedEntries": "Defines the method by which entries are skipped over in the result set.",
    "NyxGlassWeaponComponent_Swinging:TimeAttachedBeforeSpeedStartsIncreasing": "Defines the minimum amount of time before swing acceleration should occur.",
    "NyxGlassWeaponComponent_Swinging:MinAttachPointAngleInRad": "Defines the minimum angle between the potential attach point and the player's general aim direction.",
    "NyxGlassWeaponComponent_Swinging:MinAttachedSpeedMultiplier": "Defines the minimum attached speed multiplier.",
    "NyxGlassWeaponComponent_Swinging:MinAttachPointDistFromCamera": "Defines the minimum distance an attach point should be from the player camera's location.",
    "NyxGlassWeaponComponent_Swinging:SwingingAutoDetachDist": "Defines the minimum distance from the swing attach target before detachment should occur.",
    "NyxGlassWeaponComponent_Swinging:AttackStartSlashDist": "Defines the minimum distance from the swing attach target before the slashing state machine should start.",
    "NyxGlassWeaponComponent_Swinging:MinSlashDistToTarget": "Defines the minimum distance needed before the slash attack can occur.",
    "NyxGlassWeaponComponent_Swinging:SlashLockDistance": "Defines the minimum distance to the slash target before the player is held in place.",
    "NyxGlassWeaponComponent_Swinging:MinUnattachedSpeedMultiplier": "Defines the minimum unattached speed multiplier.",
    "FortAthenaMutator_PlayerClassSettings:NumClassSlots": "Defines the number of player-class slots the mutator can support",
    "FortCreativeDiscoveryContentPanel:SkippedEntriesCount": "Defines the number of top entries to skip.",
    "FortCreativeDiscoverySurfaceRevision": "Defines the party's revision of a specific creative discovery surface.",
    "ScriptedObjectMovement_StaticPath:MasterSplinePath": "Defines the path at a highlevel that an object should follow. This controls procedural generation.",
    "FortWeaponRanged:BulletPattern": "Defines the pattern of multiple bullets. Each bullet originates from a specified muzzle socket and optional relative rotation from\n    the central fire line which can vary between some min and max values. The weapon will still obey BulletsPerCartridge and if the\n    BulletPattern is longer than BulletsPerCartridge, extra entries are ignored, but if it's shorter, the pattern loops back to the start.\n\nNOTE: This pattern will overridden by OverrideBulletPattern in the corresponding FortRangedWeaponStats row for this weapon if it has a non-zero length.",
    "FortRangedWeaponStats:OverrideBulletPattern": "Defines the pattern of multiple bullets. Each bullet originates from a specified muzzle socket and optional relative rotation from\nthe central fire line which can vary between some min and max values. The weapon will still obey BulletsPerCartridge and if the\nOverrideBulletPattern is longer than BulletsPerCartridge, extra entries are ignored, but if it's shorter, the pattern loops back to the start.\n\nNOTE: If this pattern has a non-zero length, it will override the BulletPattern in the FortWeaponRanged BP asset.",
    "FortPawnStats:ControlRecoveryBehavior": "Defines the pawn's behavior while already in the staggered state",
    "ESpecialEventTODMModifyType": "Defines the possible methods of modifying TimeOfDayManagers during a special event",
    "FortAbilityTargetSelection:ConeMinRadius": "Defines the radius of a sweep check required for cone targeting",
    "RockBoxSpringSetup:MaxDisplacement": "Defines the size of the box that the point mass is restricted to.\nThe point mass cannot go outside of the box.",
    "NyxGlassWeaponComponent_Swinging:TargetingSphereRadius": "Defines the size of the overlap sphere query.",
    "EFortCreativeDiscoveryPanelType": "Defines the source of the content in this panel that is presented.",
    "NyxGlassWeaponComponent_Swinging:SpeedSoftCapDragWhenAttacking": "Defines the speed drag when in the attack state.",
    "SafeZoneOrderOptimizeMutatorRouteDefinition": "Defines the start and end locations of a single SafeZone route",
    "FortWeaponModOverrideDataRow:ModMeshData": "Defines the static mesh of the mod that should be spawned on the weapon",
    "NyxGlassWeaponComponent_Swinging:SlashSpeed": "Defines the swing speed when in the slashing state.",
    "MeshVariant:AnimInstanceClassSwapType": "Defines the type of AnimInstance swap to execute while swapping the mesh. Only executes if the mesh swap occurs",
    "EFortCreativeDiscoveryPlayHistoryType": "Defines the type of play history to materialize for the PlayHistory data source.",
    "EFortPlayerRole": "Defines the types of client connected",
    "EFortEventNameType": "Defines the types of event names we can have",
    "EHudVisibilityState": "Defines the visibilty of the HUD when in Replays",
    "FortGamepadAdvancedOptions:LookInputCurve": "Defines type of curve used to convert stick input to look speed.",
    "GameplayEventDefinition:NetPolicy": "Defines under which network state this event should be used.",
    "FortPawnComponent_LivingWorldSpawnAroundPlayer:PerPlayerConfigurations": "Defines what is spawned per-player. Can have more than one.",
    "FortActorOptionsComponent:Internal_PlayerOptions": "Defines what properties will be overridable and exposed to the UI (i.e. the \"knobs\")\n@note If Internal_PlayerOptions is null then we'll attempt to get the data from the FUserOptionDefinitionContainer on the owner actor class",
    "FortMantisTechniqueData:ActivationTimingType": "Defines when this technique should be triggered, when the input is either pressed or released.",
    "EFortAbilityTargetingSource": "Defines where an ability starts its trace from and where it should face",
    "FortActorSpawner:SpawnerAuthority": "Defines where the actor will spawn (client or server) and who has authority over the actor.",
    "ScriptedObjectMovement_StaticPathTravelerData:TravelOrder": "Defines where this traveler should relative to other objects following on the master path.\nWhile objects may not be on the same path, an object with a 0 value will be moved before an object with a 1 value.",
    "FortPawnStats:bAllowChainStun": "Defines whether pawn can be staggered again while already in the staggered state",
    "FortVehicleAudioOneshotGate:Direction": "Defines which direction our param delta has to be heading in to trigger this sound",
    "FortGliderLayeredAudioOneshotGate:Direction": "Defines which direction our param has to be heading in to trigger this sound",
    "FortLayeredAudioOneshotGate:Direction": "Defines which direction our param has to be heading in to trigger this sound",
    "PFWExtensionToAdd": "Defines which extension class to to add",
    "AutoApplyWeaponModData:ModSlotsToWeightedMods": "Defines which mod items have better odds on being rolled, based on a given\nmod slot tag.",
    "AutoApplyWeaponModData:WeightedSlotsToRoll": "Defines which mod slots have better odds on being rolled.",
    "FortMantisTechniqueData:ActivationInputType": "Defines which player input should trigger this technique.",
    "PFWDataRegistrySourceToAdd": "Defines which source assets to add and conditions for adding",
    "FortControllerComponent_VictoryCrowns:VictoryCrownAccountItemDefinition": "Definition containing the template ID to be used to lookup the VictoryCrown account item",
    "FortControllerComponent_CampsiteAccountItem:CampsiteAccountItemDefinition": "Definition containing the template ID to be used to lookup the campsite account item",
    "FortControllerComponent_RealitySapling:RealitySaplingAccountItemDefinition": "Definition containing the template ID to be used to lookup the reality sapling account item",
    "FortAnimNode_AttackIK:HandsDefinitions": "Definition for Hands.",
    "TournamentWeaponKillStat": "Definition for a weapon kill stat.  If the weapon matches a tag in the tag list, we keep count of how many kills the player performed with it, then package it with the provided stat name.",
    "FortAnimNode_QuadrupedSlopeWarping:ArmsFeetDefinitions": "Definition for each foot in the arms/front legs.",
    "FortAnimNode_SlopeWarping:FeetDefinitions": "Definition for each foot in the legs.",
    "SeasonCurrencyMcpData:CurrencyDefinition": "Definition for the currency item",
    "FortControllerComponent_VictoryCrowns:RoyalRoyaleEmoteItemDefinition": "Definition for the emote to be added to the player's wheel when achieving a royal royale",
    "SeasonCurrencyMcpData:GiftBoxDefinition": "Definition for the gift box created when the currency is granted to the player",
    "SeasonCurrencyMcpData:FriendChestGiftBoxDefinition": "Definition for the gift box created when the currency is granted to the player via Friend Chests",
    "ConditionalBenefitLevel": "Definition of a conditional benefit level which can be achieved\nDetails any bonuses/perks conferred at this level, and any other benefits removed.",
    "AlterationSlot:SlotDefinitionRow": "Definition that determines valid alterations for this slot.",
    "FortBounceData:DeformationVector": "Deformation direction for the material",
    "TornadoConfigEntry:TangentAngleOffset": "Degrees off from the tangent to the orbit circle that the tangent acceleration is applied (positive values point away from the orbit circle)",
    "CreativeAFKDetectionParameters:MinimumCameraRotationPerSecond": "Degrees the camera must move each second to prevent the player from being considered AFK",
    "EPersistenceFrameworkState.DeInitialized": "Deinitialized. Likely to be removed/deleted",
    "FortPlayerPawn:AutoPickupDropRepickupDelay": "Delay after dropping a pickup before autopickup will consider picking it up on overlap",
    "FortRangedWeaponStats:RecoilRecoveryDelay": "Delay after firing before starting recoil auto-recovery",
    "DigestedRangedWeaponSkill:ShotDelayAfterTargeting": "Delay before being allow to fire after switching weapons",
    "RangedWeaponSkill:ShotDelayAfterTargeting": "Delay before being allow to fire after switching weapons",
    "DigestedRangedWeaponSkill:ShotDelayAfterIncomingLethality": "Delay before being allow to fire after we stopped firing because our next shot would kill the player",
    "RangedWeaponSkill:ShotDelayAfterIncomingLethality": "Delay before being allow to fire after we stopped firing because our next shot would kill the player",
    "DigestedRangedWeaponSkill:DelayBeforeFirstShot": "Delay before being allow to fire first time after switching weapons",
    "RangedWeaponSkill:DelayBeforeFirstShot": "Delay before being allow to fire first time after switching weapons",
    "FortPlayerPawn:ZiplineJumpActivateDelay": "Delay before being allowed to jump off a zipline once starting to zipline",
    "FortActorComponent_Affiliation:ResetSpecificRelationUnawareDelay": "Delay being unaware before reset (only valid for bots)",
    "FortVehicleFuelComponent:LowFuelRepeatingPingDelay": "Delay between low fuel pings",
    "FortRangedWeaponStats:AutofireAcquisitionDelay": "Delay between target acquisition and Autofire firing",
    "FortRangedWeaponStats:AutofireDBNOAcquisitionDelay": "Delay between target acquisition and Autofire firing when the target is dbno",
    "ButterCakeUnstuckComponent:LocationSampleDelay": "Delay between to Location Sample",
    "FortGameStateAthena:DelayMovementInput": "Delay character movement and jump inputs, measured in milliseconds.\n      Temporary feature for latency experiments, will be removed once complete. (max.whitehead)",
    "FortMovementLeans:SettleDelay": "Delay during which we remain at full lean before blending towards settle",
    "FortMission_ActiveThreat:StartingDelay": "Delay for starting active threat from the time the game starts or start of the relevant AthenaGamePhase",
    "FortMission_RiftSpawners:StartingDelay": "Delay for starting active threat from the time the game starts or start of the relevant AthenaGamePhase",
    "FortMinigameSettingsBuilding:ForceStartDelay": "Delay forced starts of the game by this many seconds. Ignored if the remaining auto-start countdown is less than this value.",
    "FortPawnStats:ControlResistanceRegenDelay": "Delay from last time the pawn took impact damage before starting control resistance regeneration",
    "FortPawnStats:HealthRegenDelay": "Delay from last time the player took damage before starting regeneration",
    "FortPawnStats:ShieldRegenDelay": "Delay from last time the player took damage before starting shield regeneration",
    "FortPlayerPawnStats:StaminaRegenDelay": "Delay from last usage of stamina before it begins regenerating",
    "FortCurieFXSettings:ElectricityArcImpactFXDelay": "Delay from start of playing an arc before playing an impact FX",
    "FortAthenaMutator_Skyfire:TeleportASRemovalDelay": "Delay in seconds after a player has finished exiting the mothership from the loot room before the TeleportAS is removed",
    "FortScoutDrone:OutOfEnergyDismissDelayData": "Delay information for when drone is out of energy",
    "FortScoutDrone:OutOfHealthDismissDelayData": "Delay information for when drone is out of health",
    "FortGameplayCueAudioInfo:DelayBeforePlayInSeconds": "Delay sound this long before starting. This is NOT supported on looping sounds, and when used the gameplay cue blueprint events will not receive the audio component (since it will not be created yet)",
    "FortAthenaMutator_DadBro:DelayGameOverOnDadBroWin": "Delay the victory screen after players lose. <= 0.f disables",
    "FortAthenaMutator_DadBro:DelayGameOverOnPlayerWin": "Delay the victory screen after players win. <= 0.f disables",
    "FortCurieFXSettings:ElectricityArcRetriggerDelay": "Delay to apply before playing another arc for an actor during an active electric chain",
    "ScoutDroneDeferredDestructionData:DeposessDelay": "Delay to call StopControllingDrone. 0 means no delay.",
    "ScoutDroneDeferredDestructionData:DestroyDelay": "Delay to destroy the drone after it is de-possessed. 0 means no delay.",
    "FortActorComponent_Affiliation:ResetSpecificRelationNoDamageDelay": "Delay without taking any damage to allow reseting owner's relations",
    "FortGameplayMessageComponentBase:OnChannelIdsReplicated": "Delegate allowing clients to update state when channel ids become updated",
    "FortAthenaMutator_Skyfire:OnSkyfirePhaseChanged": "Delegate broadcast on both the CLIENT and SERVER when the skyfire phase changes.",
    "FortVehicleFuelComponent:OnFuelChanged": "Delegate broadcast on the CLIENT and SERVER when the fuel amount changes",
    "FortVehicleFuelComponent:OnOutOfFuel": "Delegate broadcast on the CLIENT and SERVER when the vehicle is out of fuel.",
    "FortVehicleFuelComponent:OnRefueledFromEmpty": "Delegate broadcast on the CLIENT and SERVER when the vehicle is refueled from an empty state",
    "FortVehicleFuelComponent:OnLowFuel": "Delegate broadcast on the CLIENT and SERVER when the vehicle's fuel pass the low fuel threshold (UFortVehicleConfigs::LowFuelPercent).",
    "FortActorComponent_Affiliation:OnSpecificRelationAddedDelegate": "Delegate broadcasted when a specific relation is added",
    "SpecialEventScript:OnSpecialEventPhaseActivated": "Delegate callback triggered on server and client when a Special Event Phase has been activated.",
    "SpecialEventScript:OnSpecialEventPhaseDeactivated": "Delegate callback triggered on server and client when a Special Event Phase has been deactivated.",
    "FortWeapon:OnBeamFiredDelegate": "Delegate called when bullet tracer beam fired; This will invalidate default beam setup",
    "FortWeapon:OnPlayImpactFXDelegate": "Delegate called when impact effects are spawned",
    "FortGameStatePvE:OnMaxMatchWarningTimerComplete": "Delegate called when the MaxMatchWarning timer finishes",
    "FortAthenaLivingWorldPrefabActorSpawner:OnActorSpawnedDelegate": "Delegate called when the actor has been spawned.",
    "LootControllerNativeComponent:OnAsyncGetActorsOfClassCompleted": "Delegate called when the asynchronous call completes",
    "SkyfirePlayerPawnComponent:OnInMothershipChanged": "Delegate called when the pawn enters or exits the mothership.",
    "FortCreativeStreamingController:OnControllingStreamDeviceChanged": "Delegate called whenever the highest priority device changes",
    "FortAthenaMutator_Mash:OnScoresFinalized": "Delegate fired on clients when scores are finalized and can no longer be changed.",
    "FortPlayerControllerZone:OnPossessedPawnDied": "Delegate fired on server when the controller's pawn dies",
    "FortAthenaMutator_Mash:OnBossHealthShieldChanged": "Delegate fired on the CLIENT when the final boss' health/shield has changed (e.g. they took damage)",
    "FortAthenaMutator_Mash:OnMashInitialized": "Delegate fired on the SERVER after Mash has finished initializing.",
    "AIPatrolPathComponent:OnPatrolPointFailedToReach": "Delegate fired when AI can't reach one point of the patrol path",
    "FortAthenaPatrolPath:OnPatrolPointFailedToReach": "Delegate fired when AI can't reach one point of the patrol path",
    "AIPatrolPathComponent:OnPatrolPointReached": "Delegate fired when AI reached one point of the patrol path",
    "FortAthenaPatrolPath:OnPatrolPointReached": "Delegate fired when AI reached one point of the patrol path",
    "FortAthenaPatrolPath:OnPatrolPathActivationStatusChanged": "Delegate fired when IsEnabled flag is modified",
    "AthenaNavPresenceDetectorComponent:NavMeshPresenceDetected": "Delegate fired when NavMeshes are all detected under the owner's location",
    "AthenaNavPresenceDetectorComponent:NavMeshPresenceUndetected": "Delegate fired when a NavMesh is not detected under the owner's location",
    "FortMinigameScoreRegistry:OnScoreRecorded": "Delegate fired when a score update has been received",
    "CurieToggleComponentGroup:OnToggleGroupFullyActive": "Delegate fired when all of the group components are switched to being active",
    "CurieToggleComponentGroup:OnToggleGroupFullyInactive": "Delegate fired when all of the group components are switched to being inactive",
    "AIPatrolPathComponent:OnPatrolPathStarted": "Delegate fired when an AI started to use the patrol path",
    "FortAthenaPatrolPath:OnPatrolPathStarted": "Delegate fired when an AI started to use the patrol path",
    "AIPatrolPathComponent:OnPatrolPathStopped": "Delegate fired when an AI stopped using this patrol path",
    "FortAthenaPatrolPath:OnPatrolPathStopped": "Delegate fired when an AI stopped using this patrol path",
    "CurieToggleComponentGroup:OnToggleGroupMemberStateChange": "Delegate fired when any group member's active state changes",
    "FortMinigameScoreRegistry:OnScoreRankingsUpdated": "Delegate fired when any new scores have been replicated to the client",
    "FortPawnComponent_GrindRail:BegunGrindingDelegate": "Delegate fired when finished all begin grinding processing, and when you firstly enter or switch a rail",
    "FortPlayerControllerZone:OnEndSkydivingFromBus": "Delegate fired when landing from a skydive from the bus",
    "FortAthenaMutator_Bagel:OnPlayerDataChanged": "Delegate fired when player scores / streak multiplier change",
    "FortAthenaMutator_Mash:OnPlayerDataChanged": "Delegate fired when player scores / streak multiplier change",
    "FortAthenaMutator_Bagel:OnBagelVictory": "Delegate fired when players win the game",
    "FortAthenaMutator_Mash:OnMashVictory": "Delegate fired when players win the game",
    "FortAthenaMutator_Bagel:OnPhaseChanged": "Delegate fired when the Bagel phase changed",
    "FortAthenaMutator_SpecialEvent:TeleportAllPlayersFinished": "Delegate fired when the call to TeleportAllPlayers has finished",
    "FortGameStateAthena:CountdownFinished": "Delegate fired when the countdown timer finishes",
    "FortGameStateAthena:CountdownStopped": "Delegate fired when the countdown timer is stopped",
    "FortGameStateAthena:CountdownStarted": "Delegate fired when the countdown timer starts",
    "FortGameStateAthena:CountdownTick": "Delegate fired when the countdown timer ticks",
    "FortGameStateAthena:FinalCountdownFinished": "Delegate fired when the final countdown timer finishes",
    "FortGameStateAthena:FinalCountdownStarted": "Delegate fired when the final countdown timer starts",
    "FortGameStateAthena:FinalCountdownTick": "Delegate fired when the final countdown timer ticks",
    "FortGameStateAthena:CurrentHighScoreUpdated": "Delegate fired when the highest score in the game has changed",
    "FortAthenaMutator_Bagel:OnPlayerFriendLeaderboardUpdated": "Delegate fired when the local player friend leaderboard has been updated",
    "FortAthenaMutator_Mash:OnPlayerFriendLeaderboardUpdated": "Delegate fired when the local player friend leaderboard has been updated",
    "FortAthenaMutator_Mash:OnPhaseChanged": "Delegate fired when the mash phase changed",
    "FortAthenaMutator_Ashton:OnStoneListChanged": "Delegate fired when the stone list changes",
    "FortAthenaMutator_Bagel:OnTeamScoreMultiplierChanged": "Delegate fired when the team score multiplier changes",
    "FortAthenaMutator_Mash:OnTeamScoreMultiplierChanged": "Delegate fired when the team score multiplier changes",
    "BuildingTurretComponent:OnTurretTargetChanged": "Delegate fired when the turret target changed",
    "FortAthenaMutator_Ashton:OnVillainRespawnsRemainingChanged": "Delegate fired when the villains respawns remaining value changes",
    "FortGameStateAthena:AllWinnersAnnounced": "Delegate fired when winners are announced by the server",
    "FortGameStateAthena:WinnerInfoDisplayReadyCN": "Delegate fired when winners are ready to be displayed when using special China win condition for LMS",
    "FortCreativeMoveTool:OnMoveToolLineOfSightBlockingChanged": "Delegate for informing UI that Line Of Sight blocking has changed.",
    "FortCreativeMoveTool:OnMoveToolDropToFloorChanged": "Delegate for informing UI that drop to floor changed.",
    "FortCreativeMoveTool:OnMoveToolPrecisionChanged": "Delegate for informing UI that precision changed.",
    "FortCreativeMoveTool:OnMoveToolRotationAxisChanged": "Delegate for informing UI that rotation axis changed.",
    "FortCreativeMoveTool:OnMoveToolScaleAxisChanged": "Delegate for informing UI that rotation axis changed.",
    "FortCreativeMoveTool:OnMoveToolInteractionStarted": "Delegate for informing UI that we have started Interaction.",
    "BuildingProp_CreaturePlacer:OnCreatureVisualsLoadComplete": "Delegate for informing UI that we have stopped Interaction.",
    "FortCreativeMoveTool:OnMoveToolInteractionStopped": "Delegate for informing UI that we have stopped Interaction.",
    "FortCreativeMoveTool:OnMoveToolTransformationModeChanged": "Delegate for informing the UI that our transformation mode has changed.",
    "FortCreativeMoveTool:OnMoveToolScaleInsteadOfRotateChanged": "Delegate for informing the UI that we have switched scale mode on or off.",
    "TempestStateMachineComponent:OnTempestStateChangedDelegate": "Delegate for subscribing to state changed events",
    "FortPhysicsObjectComponent:OnVehicleHit": "Delegate for vehicle hit. Allows sleeping physics objects to handle a hit if desired",
    "FortLobbyBeaconClientRM:LocalReadiedUpStatusChanged": "Delegate for when the local player has its ready-up status changes",
    "FortAthenaAIBotController:OnPlayerPawnAISpawnedDelegate": "Delegate function called when bot pawn has been spawned and all AISpawnerDataComponent have been applied",
    "FortPlayerPawn:OnPawnEnterWater": "Delegate is broadcast when the pawn enters a water body.",
    "FortPlayerPawn:OnPawnExitWater": "Delegate is broadcast when the pawn exits a water body.",
    "FortPlayerPawn:OnPawnExitSwinging": "Delegate is broadcast when the pawn exits the swinging movement mode",
    "FortPlayerController:OnClientRefreshHUDForRespawn": "Delegate that broadcasts on respawn to alert HUD it needs to refresh elements",
    "FortAthenaMutator_RespawnAndSpectateSelect:RespawnAndSpectateSelectSetVisibility": "Delegate that broadcasts when the Respawn Selection UI should be shown/hidden",
    "FortAthenaMutator_RespawnAndSpectateSelect:RespawnAndSpectateSelectSetSpectateId": "Delegate that broadcasts when the Respawn Selection UI should highlight a specific respawn location",
    "FortAthenaMutator_RespawnAndSpectateSelect:RespawnAndSpectateSelectAvailableOptionsChanged": "Delegate that broadcasts when the Respawn Selection UI should remove a possible respawn location",
    "FortAthenaMutator_RespawnAndSpectateSelect:RespawnAndSpectateSelectRespawnBecameAvailable": "Delegate that broadcasts when the local player can respawn",
    "FortAthenaMutator_RespawnAndSpectateSelect:RespawnAndSpectateSelectPlayerRespawned": "Delegate that broadcasts when the local player has respawned",
    "FortAthenaMutator_ShowPlacard:OnShowPlacard_Finished": "Delegate that broadcasts when we finish showing the placard UI",
    "FortCreativeDeviceButtonComponent:OnButtonRefreshRequested": "Delegate that can be bound to from other widgets when you would like the attached UI to refresh",
    "FortGameState:OnPoiManagerReplicatedEvent": "Delegate that fires on rep of the PoiManager.",
    "FortVisibilityComponent:OnVisibilityChangedEvent": "Delegate that fires to BP when the visibility changes (compared against a single team)",
    "FortGameModeAthena:OnPlayerAddedToAlivePlayers": "Delegate that fires when a player is added to the list of living players.",
    "FortGameModeAthena:OnPlayerRemovedFromAlivePlayers": "Delegate that fires when a player is removed from the list of living players (could be because of death or disconnect.)",
    "FortDeployableBaseManager:OnLocalDeployablePlotInventoryChangedEvent": "Delegate that fires when a plots inventory changes on the local players client",
    "FortPoiManager:OnMinimalStateInitializedEvent": "Delegate that fires when the PoiManager is finished with InitializeMinimalState",
    "FortPlayerControllerGameplay:OnCreativeHeatmapToggledDelegate": "Delegate that fires when the creative heatmap toggles",
    "FortDeployableBaseManager:OnLocalPlayerEntersDeployablePlotEvent": "Delegate that fires when the local player enters a plot",
    "FortDeployableBaseManager:OnLocalPlayerLeavesDeployablePlotEvent": "Delegate that fires when the local player leaves a plot",
    "FortPlayerController:OnLoadoutChanged": "Delegate that fires when the player's loadout changes.",
    "FortPlayerControllerGameplay:OnCreativeModeEnabledChangedDelegate": "Delegate that fires when the state of creative mode changes.",
    "FortPlayerControllerGameplay:OnCreativeQuickbarEnabledChangedDelegate": "Delegate that fires when the state of creative quickbar changes.",
    "FortPlayerControllerGameplay:OnCreativeQuickbarComponentLoaded": "Delegate that fires when the state of creative quickbar component is loaded.",
    "FortPlayerControllerGameplay:OnCreativeFlyChangedDelegate": "Delegate that fires when the state of flying changes.",
    "FortPlayerControllerGameplay:OnCreativeGhostEnabledDelegate": "Delegate that fires when the state of ghost mode changes",
    "FortPlayerControllerGameplay:OnCreativeInvulnerableEnabledDelegate": "Delegate that fires when the state of invulnerability changes",
    "FortPlayerControllerGameplay:OnCreativeSwapPhoneAndHarvestHoldChangedDelegate": "Delegate that fires when the state of reversing the phone and harvest hold changes",
    "FortPlayerControllerGameplay:OnCreativeQuickmenuEnabledChangedDelegate": "Delegate that fires when the state of the Creative Quickbar Changes.",
    "FortPlayerControllerGameplay:OnWorldInventoryChangedDelegate": "Delegate that fires when the world inventory changes.",
    "BuildingGameplayActorLaserGrid:OnLaserGridOutletDestroyed": "Delegate that fires whenever an outlet of the laser grid actor is destroyed.\n     Fires on the server only.",
    "BuildingGameplayActorLaserGrid:OnLaserGridTriggered": "Delegate that fires whenever the laser grid is triggered.\n     Fires on the server only.",
    "FortPlayerController:OnFortPawnChangedEvent": "Delegate that is broadcast on client and server whenever the controller's pawn changes.",
    "FortMiniMapComponent_Discoverable:OnPlayerVisibilityChanged": "Delegate that is broadcast on the server when an individual player's visibility of this MiniMapComponent changes.\n     Gets called by UFortControllerComponent_MiniMapDiscoverable.",
    "FortGameModeAthena:OnPlaylistLootTablesAppliedDelegate": "Delegate that is broadcast when the loot tables have been fully loaded and applied.\n     Marks that it is now safe to use the loot tables to resolve what loot to spawn.",
    "FortAIController:OnControllerComponentAttachedEvent": "Delegate that is broadcast whenever a FortControllerComponent is attached to this AI controller.",
    "FortPlayerController:OnControllerComponentAttachedEvent": "Delegate that is broadcast whenever a FortControllerComponent is attached to this player controller.",
    "FortPawn:OnPawnComponentAttachedEvent": "Delegate that is broadcast whenever a UFortPawnComponent is attached to this pawn.",
    "FortCreativeDeviceButtonComponent:OnDeviceButtonDescriptionChangedDelegate": "Delegate that is broadcasted when the button description has changed",
    "FortCreativeDeviceButtonComponent:OnDeviceButtonClickedDelegate": "Delegate that is broadcasted when the button has been clicked",
    "FortCreativeDeviceButtonComponent:OnDeviceButtonLabelChangedDelegate": "Delegate that is broadcasted when the button label has changed",
    "FortCreativeDeviceButtonComponent:OnDeviceButtonNameChangedDelegate": "Delegate that is broadcasted when the button name has changed",
    "FortPhysicsObjectComponent:OnAwakeChanged": "Delegate that is called when the physics object wakes up.",
    "FortPlayerMannequin:OnMaterialsUpdated": "Delegate that is fired after the mannequin's character part materials are applied. Contains an array of all MIDs\non the mannequin.\n\nIntended to be used to apply material parameters once the MIDs are created (e.g. to set extra parameters for\ncinematics).",
    "FortLocalizableMessageComponent:OnMessageLocalized": "Delegate to bind to for after-localization processes",
    "FortCreativeMoveTool:OnAddedSelectedActor": "Delegate to inform UI that we have added a selected actor.",
    "FortCreativeMoveTool:OnCouldNotAddReachedSelectionLimit": "Delegate to inform UI that we have failed to add an actor because we hit our selection limit.",
    "FortCreativeMoveTool:OnRemovedSelectedActor": "Delegate to inform UI that we have removed a selected actor.",
    "FortWeapon:OnGetAimRotOverride": "Delegate to override GetAimRotOverride()",
    "FortCreativeMoveTool:OnFinishedSpawningForCut": "Delegate to use as callback for when we finish spawning actors for interacting and previewing for a cut action, so that we can hide all the original actors.",
    "FortCreativeMoveTool:OnFinishedSpawningPreviewActors": "Delegate to use as callback for when we finish spawning actors for interacting and previewing.",
    "FortCreativeMoveTool:OnMoveToolFocusChanged": "Delegate used to inform Blueprint and UI that we have changed our hover target.",
    "FortCreativeMoveTool:OnFinishedSpawningSelectedActors": "Delegate used to inform move tool and FX that we have finished spawning from our SelectedActors.",
    "FortAthenaMutator_ShowPlacard:OnShowPlacard_SetWidgetVisibility": "Delegate used to turn on/off visibility of widgets made to work with this class",
    "FortLobbyBeaconClientRM:OnUpdateLobbyPlayerPadTop": "Delegate used to update UI ready/not ready text on each player",
    "CreativePlayerHealthInfoComponent:OnBossPlayerChanged": "Delegates",
    "FortPlayerControllerSpectating:OnFollowedPlayerChanged": "Delegates",
    "BuildingGameplayActorAbilityDeliveryInfo": "Delivery info struct for ability system related items, such as buckets of proximity-based GEs, etc.",
    "FortGameplayEffectDeliveryInfo:DeliveryRequirements": "Delivery requirements for the effects",
    "FortAnimInput_VelocityImpact:DeltaVelocityThreshold": "Delta Velocity Threshold to trigger an Impact",
    "VkProjectDeltas_ProjectIndex": "Delta file for any per-project data",
    "FortProjectEditComponent:DeltasSaveHandler": "Delta file save handler",
    "FortGravityGunHolder:TargetRotationTorqueDeltaTimeScalar": "Delta time scalar used when calculating the final angular velocity while calculating rotation torque (speeds up rotation).",
    "ENavOptionFallbackDir.Invalid": "Denotes an invalid navigation, more important used to denote no specified navigation",
    "SubmixEffectDynamicReverbSettings:Density": "Density - 0.0 < 0.85 < 1.0 - Coloration of the late reverb - lower value is more grainy",
    "ValkyrieProjectSizeStats:DependencySizes": "Dependency size stats that should be reported",
    "FortAthenaCreativePortal:bForceUpdateInteraction": "Depending on if we allow interaction, do we want to force the update of this interaction?",
    "FortAthenaPartyRiftPortal:bForceUpdateInteraction": "Depending on if we allow interaction, do we want to force the update of this interaction?",
    "BuildingActor:bShowFirstInteractPrompt": "Depending on if we allow interaction, do we want to show this interaction?",
    "BuildingActor:bShowSecondInteractPrompt": "Depending on if we allow interaction, do we want to show this interaction?",
    "FortGameStateDeployableBase:DeployableBaseManager": "Deployable base manager reference",
    "PendingDeployableBaseUser:BaseRecord": "Deployable base record populated via cloud save, if possible",
    "DeployableBaseSupportSettings:TieredCollectionLayouts": "Deployable base tiered collection layouts",
    "DeployableBaseSupportSettings:SupportedUseType": "Deployable base usage type",
    "CatalogTableFilter": "Deprecated",
    "EPlayerReportReasons": "Deprecated",
    "GameplayStatTag:Tag": "Deprecated",
    "DynamicUIUnallowed": "Deprecated struct, still here to do deprecation steps.\nShould be removed when every scenes has been deprecated.",
    "FortAIPawn:DeepWaterImmersionDepth": "Depth in water from character feet to water surface that triggers OnBegin/OnEnd DeepWaterInteraction events.",
    "BuildingProp_ConversationCompatible": "Derivative of ABuildingProp which can be damaged/destroyed/wobble on impact/drop resources on hit/death\nCan also be interacted with to trigger a conversation housed body of functionality (e.g. purchase items etc)",
    "FortAthenaAIBotBuildDescriptor": "Describe a building piece with an offset that can be built by the bot.",
    "TrapItemDefintionDesignerData:Description": "Describe this trap.",
    "WeaponItemDefinitionDesignerData:Description": "Describe this weapon",
    "AggregatedFunction": "Describes a Function / RPC sent from Mesh Clients up to Mesh Servers (Edge, Inner, Root).\nInstead of bombarding top level servers with every RPC triggered from Game / Mesh Clients,\nwe can aggregate / accumulate the parameters and send updates less frequently.",
    "CosmeticMetaTagCondition": "Describes a condition that a loadout should meet based on meta tags, used in tandem with FFortCosmeticMetaTagLoadout",
    "VkPublishedLink": "Describes a published link",
    "FortDialogDescription": "Describes a simple zero-, one-, or two-button dialog",
    "FortDialogDescription_NUI": "Describes a simple zero-, one-, or two-button dialog",
    "VkBuildVersion": "Describes a valkyrie build version",
    "VkModuleDoc": "Describes a valkyrie module",
    "VkModuleVersionModerationStatus": "Describes a valkyrie module moderation status",
    "VkModuleVersionDoc": "Describes a valkyrie module version",
    "VkVersePath": "Describes a verse path",
    "VkJobOutput": "Describes a vk job",
    "VkProjectDoc": "Describes a vk project",
    "ChoiceData": "Describes all data required to open SFortChoiceWidget",
    "GameplayEventDescriptor": "Describes an event that may be broadcast.\nAn event subscription will reference a descriptor to link an event listener to an event source via data binding at runtime (see FGameplayEventSubscription).",
    "ChoiceDataEntry": "Describes data about one button shown on SFortChoiceWidget",
    "FortLevelSaveComponent:LoadedLinkData": "Describes details/metadata about the current loaded link entry",
    "EMeshNetworkNodeType": "Describes how a given UE4 isntance / Mesh Driver will interact with the Mesh Network",
    "SpecialEventAudioHapticsAction": "Describes how haptics respond to the audio loudness",
    "EMeshNetworkRelevancy": "Describes how important a certain variable, RPC, or other peice of data is\nto given Mesh Nodes. Things that are not relevant (important) won't be replicated\nthrough the mesh. (This similar to standard UE4 Networking Relevancy).",
    "BattlePassCharaterRewardTabInfo:TabCategoryCounter": "Describes how many categories this tab will contain since AthenaSeason::AdditionaSeasonlData::UAthenaSeasonItemData_CustomSkin::Categories\nis a single array.",
    "FortObjectiveBase:ObjectiveRewardBadge": "Describes the badge you will get for completing this objective",
    "EFortWaitForTimeOfDayManagerUpdatedBehavior": "Describes the behavior of the WaitForTimeOfDayManagerUpdated async action",
    "EFortPickerMode": "Describes the different modes for pickers",
    "EFortHitPointModificationReason": "Describes the different reasons why hit points were modified. Used for both health and shield.",
    "FortAthenaMutator_SpecialEvent:EventAircraftInfo": "Describes the flight path of the event aircraft",
    "EBehaviorTreeBranchesBitmask": "Describes the list of behaviors we can control (allow/block) in the NPC BT\nUsed as the Bitmask enum (can contain up to 32 entries) but can't be used as a BlueprintType\n\nIMPORTANT! Always keep in sync with EBehaviorTreeBranches.",
    "EBehaviorTreeBranches": "Describes the list of behaviors we can control (allow/block) in the NPC BT.\nUsed as the BlueprintType.\n\nIMPORTANT! Always keep in sync with EBehaviorTreeBranchesBitmask.",
    "VkVersePathTarget": "Describes the target of a verse path (output from the verse path resolution)",
    "EPlacementType": "Describes the type of placement that is used to place this object",
    "MeshNetworkComponent:MeshRelevancy": "Describes this Components relevancy in the Mesh Network.",
    "FortLobbyBeaconState:MissionGeneratorDetailsRequirement": "Describes whether there is a mission generator for the current zone instance details. Used to resolve some replication issues.",
    "CreativeDeveloperSettings:ValidPermissionTags": "Description",
    "ValkyrieTemplateMapInfo:Description": "Description",
    "VkTeamPublicProperties:Description": "Description",
    "FortPlayerInputSettings:Description": "Description describing the settings",
    "CatalogDynamicBundleItem:Description": "Description for this item",
    "FortAttributeDetailsInfo:Description": "Description for this property for tooltips etc.",
    "FortTagUIData:Description": "Description for this tag for tooltips etc.",
    "FortTheaterMapData:Description": "Description for this theater if any!",
    "CharmSoundAssetEntry:Desc": "Description name to match on",
    "GameFeatureSubmixEntry": "Description of a Submix to add when this game feature is enabled",
    "FortGameFeatureComponentEntry": "Description of a component to add to a type of actor when this game feature is enabled\n(the actor class must be game feature aware, it does not happen magically)\n@TODO: Write more documentation here about how to make an actor game feature / modular gameplay aware",
    "CosmeticFilterTagDataRow": "Description of a single cosmetic filtering tag",
    "CosmeticSetDataRow": "Description of a single cosmetic item set",
    "FortRespawnDataRow": "Description of a single cosmetic item set",
    "CosmeticMarkupTagDataRow": "Description of a single cosmetic markup tag",
    "FortCloudSaveInfo": "Description of cloud save metadata stored inside a cloud save item. Corresponds to CloudSaveInfo.java",
    "FortCameraPrototype:PrototypeDescription": "Description of prototype. Will be printed to console for background information.",
    "PerkAvailabilityContainer:Description": "Description of the container usage to simplify edition",
    "VkProjectInfoSlim:Description": "Description of the project in project source's language",
    "FortRewardActivity:DescriptionText": "Description of the reward",
    "VkResolvedVersePath:Target": "Description of the verse path target",
    "FortUITutorialData:Descriptions": "Description to display for this tutorial step.",
    "FortCollectionBookSlotSourceData:Description": "Descriptive text shown to the user for the slot source",
    "FortMcpProfileEncryptionKey:KeyDescription": "Descriptive text that identifies this key (purely aesthetic)",
    "ValkyrieProjectDescriptor": "Descriptor for VK projects. Contains all the information contained within a vkproject file.",
    "ValkyrieProjectBindingsDescriptor": "Descriptor for project bindings.",
    "FortAthenaAIBotController:DescriptorTag": "Descriptor tag used to identify this AI.",
    "FortAutoRegisterActorComponent:ActorRegistrationTags": "Design defined gameplay tags that the owner actor will be registered with when this component begins play.\n     Changes to this property past the begin play of this component will have no affect.\n     Note: this system handles multiple tags so users can have an actor tagged many different ways.",
    "DynamicTapDelayInfo:BasePan": "Designates the starting angle at which the echo should be panned.\n0 is directly in front of the listener, -90 is left, 90 is right, and 180/-180 is directly behind the listener.\nthis value will be combined with the overall modulated pan value of the effect",
    "FortAthenaMutator_Mash:OverrideBossPhaseSafeZoneRadius": "Designer setting, How big to set the safe zone radius for boss encounters.\n     -1 is to NOT override.",
    "FortAthenaMutator_Mash:BossEncounterDisplayName": "Designer setting, what display name to use for non-final phase bosses.",
    "FortAthenaMutator_Mash:FinalBossEncounterDisplayName": "Designer setting, what display name to use for the final phase boss AI.",
    "FortAthenaVehicle:CustomUI": "Designer specified custom UI for this vehicle",
    "FortCharacterVehicle_Ostrich:CustomUI": "Designer specified custom UI for this vehicle",
    "UIKitBlockTiming": "Designer-set data describing Block timings.",
    "AlterationSlotsLoadout": "Designer-set data describing a set of alteration slots",
    "AlterationGroup": "Designer-set data describing alteration availability across slot rarities",
    "AlterationSlot": "Designer-set data describing an alteration slot",
    "AlterationSlotDefinition": "Designer-set data describing how an alteration slot maps to possible alterations",
    "ItemPromotionCosts": "Designer-set data describing promotion costs",
    "AlterationWeightData": "Designer-set data describing the availability of a particular alteration",
    "AlterationWeightSet": "Designer-set data describing the availability of a set of alterations",
    "AlterationSlotRarity": "Designer-set data describing the initial chances of various alteration slot rarities",
    "FortUITutorialData": "Designer-set data describing tutorial steps.",
    "AlterationNamedExclusions": "Designer-set data listing exclusion names for restricting alteration slotting",
    "AlterationMapping": "Designer-set data translation between old and new alterations",
    "AlterationIntrinsicMapping": "Designer-set data translation between old base alteration tags and new alterations",
    "DigestedEvasiveManeuverSkillSettings:CrouchOverlayWeight": "Desire to crouch as overlay evasive maneuver. Weighted average with others overlay tactics. Between 0.0f and 1.0f ( 1.0f = desire is same among all tactics)",
    "EvasiveManeuverSkillSettings:CrouchOverlayWeight": "Desire to crouch as overlay evasive maneuver. Weighted average with others overlay tactics. Should be between 0.0f and 1.0f",
    "DigestedEvasiveManeuverSkillSettings:DodgeJumpWeight": "Desire to do a jump when doing a dodge evasive maneuver. Weighted average dodge tactics. Between 0.0f and 1.0f ( 1.0f = desire is same among all tactics)",
    "DigestedEvasiveManeuverSkillSettings:DodgeWeight": "Desire to dodge as evasive maneuver. Weighted average dodge tactics. Between 0.0f and 1.0f ( 1.0f = desire is same among all tactics)",
    "EvasiveManeuverSkillSettings:DodgeJumpWeight": "Desire to dodge as evasive maneuver. Weighted average up to 1.0. Between 0.0f and 1.0f ( 1.0f = always dodging )",
    "EvasiveManeuverSkillSettings:DodgeWeight": "Desire to dodge as evasive maneuver. Weighted average up to 1.0. Between 0.0f and 1.0f ( 1.0f = always dodging )",
    "DigestedEvasiveManeuverSkillSettings:JumpOverlayWeight": "Desire to jump as overlay evasive maneuver. Weighted average with others overlay tactics. Between 0.0f and 1.0f ( 1.0f = desire is same among all tactics)",
    "EvasiveManeuverSkillSettings:JumpOverlayWeight": "Desire to jump as overlay evasive maneuver. Weighted average with others overlay tactics. Should be between 0.0f and 1.0f",
    "EvasiveManeuverSkillSettings:NoOverlayWeight": "Desire to not do a overlay evasive maneuver. Weighted average with others overlay tactics. Should be between 0.0f and 1.0f",
    "DigestedEvasiveManeuverSkillSettings:NoOverlayWeight": "Desire to not do overlay evasive maneuver. Weighted average with others overlay tactics. Between 0.0f and 1.0f ( 1.0f = desire is same among all tactics)",
    "NPCServicePricingKeyRemapRow:KeyNameRemapped": "Desired Pricing key we want to remap to (e.g. \"HireNPC.XYZ\")",
    "FortAthenaMutator_Mash:MinNumberOfScoresToDisplay": "Desired minimum number of scores to display in the leaderboard. If there are fewer than this many friends' scores to display, placeholder names will be added to fill out the list to this minimum size.",
    "TileCompInterpData:DesiredTranslation": "Desired relative translation of the component",
    "FortCosmeticPresetSwapData:SwapState": "Desired state of the swap. If set to None, then the swap will toggle each time it is activated",
    "RidableControlRuntimeData:DesiredTurnInPlaceAngle": "Desired turn in place angle to turn to",
    "FortWindImpulseRadius:Magnitude": "Desired/Ultimate Magnitude, which will be reached after BlendTime expires from the time Magnitude is set.",
    "FortWindImpulseRadius:Radius": "Desired/Ultimate Radius, which will be reached after BlendTime expires from the time Radius is set.",
    "EFortPartyMemberLocation.ConnectingToLobby": "Destination found and attempting to join",
    "EFortPartyState.BattleRoyalePostMatchmaking": "Destination found and beyond (attempting to join, lobby, game, etc)",
    "EFortPartyState.PostMatchmaking": "Destination found and beyond (attempting to join, lobby, game, etc)",
    "DestinationTrackerPawnComponent:Destination": "Destination location in world",
    "FortSplineGroundPath:FrontEndDestScale": "Destination of the Current scale at the front of the spline",
    "EActorFilterPolicy.POL_FilterActorsWithoutVolumeReference": "Destroy actors that don't have a volume reference",
    "ESpecialEventTODMModifyType.DestroyAll": "Destroy all TODMs",
    "ESpecialEventTODMModifyType.DestroyAllButGameState": "Destroy all TODMs except the GameState's TODM",
    "DestroyActorsAndComponentsMutator_ComponentDefinition:ComponentName": "Destroy all components that have this string in the name, using NameComparisonType.  Ignored if empty.",
    "FortDynamicBuilder:bDestroyOverlapping": "Destroy anything from the existing world that overlaps.",
    "FortDynamicBuilder:bSelectiveDestruction": "Destroy as little from existing world as possible",
    "FortDynamicBuildingDeconstructor:bSelectiveDestruction": "Destroy as little from existing world as possible",
    "ESpecialEventTODMModifyType.Destroy": "Destroy the GameState's TODM",
    "EWorldItemDropBehavior.DestroyOnDrop": "Destroy the item quantities when dropped",
    "FortAthenaVehicle:bDestroyOnLastExit": "Destroy the vehicle after the last passenger leaves",
    "FortCharacterVehicle:bDestroyOnLastExit": "Destroy the vehicle after the last passenger leaves",
    "EFortWeaponListRemovalBehavior.DestroyImmediately": "Destroy the weapon actor immediately upon removal",
    "EFortWeaponListRemovalBehavior.DeferredLifespan": "Destroy the weapon actor in a deferred manner by setting its lifespan to the CVar variable WeaponListRemovalLifespan in FortPawn.cpp",
    "FortSprayDecalInstance:bDestroyOnNearbyDamageTaken": "Destroy this decal when a building actor nearby is damaged",
    "FortSprayDecalInstance:bDestroyOnNearbyDestruction": "Destroy this decal when a building actor nearby is destroyed",
    "FortSprayDecalInstance:bDestroyOnNearbyBounce": "Destroy this decal when a building actor nearby plays a bounce animation",
    "ELiquidRibbonDetachmentReason.ByAngle": "Detached due to the angle between projectiles",
    "ELiquidRibbonDetachmentReason.ByDistance": "Detached due to the distance between projectiles",
    "FortPlayerStateAthena:MetricInformation": "Detailed summary of the current metric state(s) replicated from the server to client on a set interval",
    "EFortTextureDataType.Trim": "Detailed trim piece",
    "ExternalMultiEmote": "Details a multi emote option - one slice of the emote wheel that could correspond to multiple emotes depending on\n   the current index, which is tracked by FortEmotePicker",
    "ExternalMultiEmoteCategory": "Details a set of external multiemote options",
    "AthenaCarPlayerSlot:EnvironmentExposure": "Details how exposed to the environment the slot is by default.",
    "DynamicXpAggregatedStats:CalibrationResult": "Details on how what stage this game is currently in as far as calibration. This calibration is done in a centralized service.",
    "ExternalEmoteCategory": "Details that define a set of external emotes that will appear on the Emote Picker menu UI.\n    Details what emotes will appear and how it will be presented.",
    "EPlayerDamageHeightRatioDetectionType.None": "Detection is deactivated",
    "VKEditPlayspace:PlaysetRootSpawnerComponent": "Detects when a collection playset is placed and then spawns an AFortPlaysetRoot actor and attaches all the actors in the collection to it.",
    "PlaylistFrontEndData:Visibility": "Determine how to display the playlist to the player (if at all)",
    "EShowChannelDetails": "Determine if channels should be shown or not.",
    "ECollectionSelectionMethod.Random": "Determine the selection randomly",
    "ECollectionSelectionMethod.Modulo": "Determine the selection via tier number modulo array size",
    "FortAthenaMutator_PlayerTeamSettings:bUseTeamScoreByDefault": "Determines (by default) whether the team gains stats with its players or simply uses a sum of its current players stats. This allows teams to retain their score when a player leaves the team or game.",
    "AthenaAITestSpawnInfo:AISpawnerData": "Determines AI Spawner Data to be spawned",
    "FortProjectileBase:TouchWaterBehavior": "Determines behavior when touching water.",
    "EHabaneroDisplayState": "Determines how Habanero data is displayed on Play button",
    "FortFallTeleportComponentBase:TeleportZModifier": "Determines how much higher than the ground the TeleportLocation is set to",
    "FortMinigameSettingsBuilding:TeamSize": "Determines how the players are split between teams. DYNAMIC allows devices to set team size to allow for asymmetric teams.  IMPORTANT: Combining CUSTOM teams with DYNAMIC team size will prevent the island from working with matchmaking!",
    "MinigameScoreTemplate:ScoreType": "Determines how the score will be represented",
    "EItemPreviewRestrictionMode": "Determines how to resolve cosmetic restrictions when previewing an item. (E.g. a character with a built-in cape\nprevents a player from equipping a cape)",
    "FortFeedbackManager:bUsesStWFeedbackEvents": "Determines if FeedbackEvents should be populated with StW feedback events or not.",
    "FortAthenaMutator_Bagel:DisplayOnTeamMultiplierIncreasedGameMsg": "Determines if OnTeamMultiplierIncreased game message should be displayed",
    "FortAthenaMutator_Mash:DisplayOnTeamMultiplierIncreasedGameMsg": "Determines if OnTeamMultiplierIncreased game message should be displayed",
    "FortMinigameSettingsBuilding:bOverrideRespectParties": "Determines if Players in the same party are forced to be on the same team when matchmaking into the experience.",
    "RidableComponent:UseTargetingAdditionalViewTargetSpaceViewOffsetOverride": "Determines if TargetingAdditionalViewTargetSpaceViewOffsetOverride should be used instead of the settings from the rider",
    "FortAthenaMutator_PlayerDamage:DetectionType": "Determines if a multiplier needs to be applied depending on where the hit landed based on character height",
    "BuildingActor:AbilitySystemComponentCreationPolicy": "Determines if and when the ability system component is created. You need an ability system component if this actor will be damaged/affected by gameplay effects.\nNOTE: Don't move this to sparse class data as it has a lot of cases where it is overridden.",
    "FortAthenaMutator_Bagel:DisplayIntroGameMsg": "Determines if intro game message should be displayed",
    "FortAthenaMutator_Mash:DisplayIntroGameMsg": "Determines if intro game message should be displayed",
    "FortGameStateZone:bInvitesRestricted": "Determines if the game is now restricting invites. Once this is true, we can no longer be able to invite people",
    "BuildingPropMusicPlayer:bPlayingByDefault": "Determines if the jukebox starts play immediately upon begin play (otherwise you need to hit it or interact with it)",
    "FortAthenaMutator_GameModeBase:bAutomaticallyFinishInitialization": "Determines if the mutator will automatically complete initializtion and unpause the warmup.\nIf this is set to false then the child mutator will need to call FinishMutatorInitializationAndUnpauseWarmup when it is ready to progress.",
    "SKPushVehicleInPersistent:bConstrainedRotation": "Determines if the vehicle is standing in place.",
    "FortAthenaAILODSetting:bIsValid": "Determines if these settings are used or not",
    "FortGameFeatureInstallBundleURLData:bAlwaysAllowDownloadOnCellular": "Determines if this GameFeature should always allow cellular downloads even if the user\nhas not yet explicitly allowed Cellular data downloads.\nUseful for small data sets that shouldn't require user approval.",
    "FortGameFeatureInstallBundleURLData:bShouldUninstallOptionalOnTerminate": "Determines if this GameFeaturePlugin's InstallBundle data is automatically uninstalled\nwhen the underlying Optional GameFeaturePlugin is Terminated",
    "FortGameFeatureInstallBundleURLData:bShouldUninstallRequiredOnTerminate": "Determines if this GameFeaturePlugin's InstallBundle data is automatically uninstalled\nwhen the underlying Required GameFeaturePlugin is Terminated",
    "SpyTechLevelUpgradeData:IsLevelUpgradeEnabled": "Determines if this level upgrade should be enabled",
    "PropertyToShowData:bShowName": "Determines if we should generate widget with property name",
    "PropertyToShowData:bShowValue": "Determines if we should generate widget with property value",
    "ScriptedObjectMovement_StaticPathTravelerData:LateralOffset": "Determines lateral distance from master path this object will move.",
    "FortVehicleAimingWeaponComp:MaxPitchPerSecondThreshold": "Determines max rotation speed.",
    "FortVehicleAimingWeaponComp:MaxYawPerSecondThreshold": "Determines max rotation speed.",
    "EncounterMobSpawnInfo:MobSpawnType": "Determines the LWM point provider method used to spawn AI for this mob",
    "PlayspaceComponent_ServerExpiration:PostShutdownForceRestartTimeInSeconds": "Determines the amount of time after a match is ended to ensure that the server session is fully terminated. Defaulted to 3 minutes.",
    "EValueCostCalculationMethod.Assets": "Determines the cost of the Option Value based on the assets associated directly with it through the StructAssets",
    "MtxPurchaseHistory:TokenRefreshReferenceTime": "Determines the date when the last token refresh appended or when was the last time the user had all tokens.",
    "ESpecialEventPhaseComponentNetModeType": "Determines the network mode level where the phase component is to be applied/removed.",
    "TieredWaveSetData:TargetNumPillarsToSpawn": "Determines the number of destructible pillar rifts to spawn. This only applies if the wave type is DestroyRifts. If this value is too small, zero, or negative, the minimum number possible to still beat the wave will still be spawned to avoid softlock.",
    "GameplayAbilityRepSharedAnim_Base:AnimState": "Determines the shared animation we should play",
    "FortPortalComponent:LinkCodeLockMode": "Determines the strategy by which link codes are locked on a portal",
    "FortCreativeTeleporter:Knob_TargetTeleporterGroup": "Determines the teleporter group that this device will send players to.",
    "FortMinigameSettingsBuilding:MatchmakingType": "Determines the type of matchmaking used on this island. FLEXIBLE TEAMS - Allows party members to be on any team to matchmake quickly and keep games full. OFF - Disables matchmaking on this island.",
    "FortWeaponModSetRow:BucketTag": "Determines what bucket of sets this row belongs to. All sets in the same bucket will be rolled against.",
    "FortCreativeOptionDestructiveAction:CheckedActionOperator": "Determines what operator to use when determining if the setting may be destructive. Always checked current (operator) starting value.",
    "FortMinigame:ClassResetType": "Determines what situations in which a player's class index will be reset.",
    "FortMinigameStatsComponent:TimeAliveStartPoint": "Determines what the time alive calculation uses as a starting point",
    "FortMontageInputAction:InputType": "Determines what type of input to react to",
    "FortSwipeDetector:SwipeThreshold": "Determines when motion either horizontally or vertically should be considered a swipe.\nIf the values are zero, then a swipe will not be registered for that direction.",
    "FortAIPawn:PartialPathUsage": "Determines when pawn can use partial/incomplete path to goal",
    "PlaysetLevelStreamComponent:bIgnorePlaysetVolumeLocationChecks": "Determines whether a Playset should be loaded for a Volume that is not the Volume where the player is at",
    "FortMinigame:bMinigameAllowAutoStart": "Determines whether or not minigames should auto start after a time and player threshold.\nTodo: FORT-591895 - Promote to value on FortMinigameVolumeComponent.",
    "DBNOCustomSettings:Enabled": "Determines whether players can be put into the Down But Not Out state",
    "FortMinigameSettingsBuilding:TeamFillOption": "Determines whether the Fill option is accessible to players when interacting with this island. Option is available for Team size 2-4.",
    "GasDebuggerMenu:FilterMode": "Determines whether the filter should show/hide or highlight/unhighlight results",
    "MinigameTeam:bUseTeamScore": "Determines whether the team gains stats with its players or simply uses a sum of its current players stats",
    "FortPlayerTeamSettingsComponent:bUseTeamScore": "Determines whether the team gains stats with its players or simply uses a sum of its current players stats. This allows teams to retain their score when a player leaves the team or game.",
    "FortAnalyticsEventDenylistEntry:Type": "Determines whether this entry is a denylist entry for all playlists, a PlaylistType (based on EFortGameType values) or PlaylistName. PlaylistNames are mor specific and take precendence in the denylist lookup.",
    "PropertyToShowData:bShowChildren": "Determines whether to generate property paths for children of the specified property.\nUnless specified all properties for which property path has been generated will show up on the property view",
    "PropertyToShowData:bShowPropertiesOfSameName": "Determines whether to include nested child properties with the same name when generating property paths in Unreal Engine.",
    "PropertyToShowData:bShowContainerProperty": "Determines whether to show parent property container to signify for example what struct this property belongs to if there is any",
    "FortMinigameSettingsBuilding:bShowResourceFeedOnEliminations": "Determines whether to show the larger resource feed when receiving resources by eliminating players.",
    "FortPortalComponent:LinkCodeLockStatus": "Determines whether users can set the link code on a portal",
    "VideoPlayerDeviceMediaMetadata:bOverride": "Determines whether we want to override the original playback metadata.",
    "PropertyToShowData:ColumnNumber": "Determines which column should property be placed at. Warning! By default newly placed property views have no column data setup.\nIf no properties are showing up. Check the column data.",
    "DestroyActorsAndComponentsMutator_ComponentDefinition:NameComparisonType": "Determines which of the component's name strings to compare ComponentName against, and what type of operation to perform",
    "FortObjectiveFilter_AugmentsRerolled:ReRollType": "Determines which type of augment re-roll can allow this objective to gain progress. Any, Free re-rolls, or re-rolls that bars were spent on.",
    "ERadiusTrackingGroupingType": "Determines who Tracking Info may be shared with. Only players within the group will have access to the tracking data.\n    NOTE: just because a player is within the group does NOT mean they have access to the tracking info. The player still needs to be part of FRadiusTrackingInitializer::TargetTrackerPointers for the tracking indicator to show up on their map.",
    "EFortCreativeDiscoveryDeterminism.PartyDeterministic": "Deterministically select based on the party player IDs.",
    "EFortCreativeDiscoveryDeterminism.PlayerDeterministic": "Deterministically select based on the player ID.",
    "DBNOCustomSettings:bOverrideInvincibilityTime": "Determins if we use the player specified DBNO time (DownedInvincibilityTime)",
    "FortAIDirector:IntensityInfo": "Detrimines the combat factors that contribute to the intensity calculation",
    "EColorBlindMode.Deuteranope": "Deuteranope (green weak/blind)",
    "CreativeDeveloperSettings:CuratedLinkCodes": "Dev override for featured island link codes",
    "AthenaDeveloperSettings:PlaylistConditionalFlags": "Dev override for playlist conditional flags (if set, anything coming from UFortRuntimeOptions will be replaced by this)",
    "FortMinigameSettingsBuilding:EventSystem": "Developer option to switch between different Event Systems for early testing.\nDO NOT SWITCH THE DEFAULT TO DIRECTBINDING UNTIL WE REMOVE THE ROLLBACK IN AFortMinigameSettingsBuilding::PostLevelSaveSpawnCleanup_Implementation\nWARNING: Switching away from Direct Event Binding will clear all device links on your island!",
    "DigestedPerceptionStateSettings:ForgetDistanceDeviation": "Deviation for the forget distance (in cm)",
    "PerceptionStateSettings:ForgetDistanceDeviation": "Deviation for the forget distance (in cm)",
    "DigestedPerceptionStateSettings:ForgetTimeDeviation": "Deviation for the forget time",
    "PerceptionStateSettings:ForgetTimeDeviation": "Deviation for the forget time",
    "FortRespawnLogicData:DirectionDeviation": "Deviation in degrees from the SpawnDirection to respawn the players from the center of the SafeZone",
    "FortPieSliceSpawnData:SpawnDirectionDeviation": "Deviation in degrees from the SpawnDirection to spawn the craft from the center of the SafeZone",
    "DigestedRangedWeaponSkill:TriggerHoldDeviationTime": "Deviation time applied to TriggerHoldDuration",
    "RangedWeaponSkill:TriggerHoldDeviationTime": "Deviation time applied to TriggerHoldDuration",
    "CreativeDeviceSubscription:DestinationDeviceGUID": "Device GUID for the destination device",
    "ESavedAccountType.Device": "Device auth credentials (userid) / token (device/secret)",
    "FabricMetaSoundManagerComponent:StartMetasoundLockDevice": "Device currently holding the lock over start functionality, set via stop/pause functionality",
    "FMOutgoingCableConnection:Device": "Device we want to connect our output cable into\nNOTE: There may be issues with resolving Object References on clients with User Options\nHowever, for our case only the server cares about this, as the server instigates the outgoing connection",
    "ReplicatedStreamingProperties:OverrideStreamingDevice": "Devices can force a streaming override which ignores priority order.",
    "CreativeIslandMatchmakingSettings:MmsType": "Dictates how matchmaking will split up parties, handle backfill, etc.",
    "CreativeIslandMatchmakingSettings:Override_Playlist": "Dictates how matchmaking will split up parties, handle backfill, etc.",
    "MinigameEndCondition:TeamListType": "Dictates how the end conditions team list should be used during evaluation (i.e. white-listing or black-listing)",
    "CreativeIslandMatchmakingSettings:MmsPrivacy": "Dictates if any player can use the island code or only the owner.\nPossible values are Public (anyone can use it) and Private (only owner).",
    "FortMinigameScoreRegistry:ScoreTemplate": "Dictates score sorting/format",
    "EMinigameTeamListType": "Dictates the",
    "EMutatorOverrideSource": "Dictates the data source for the mutator list should pull property overrides from",
    "EMutatorListInitState": "Dictates what state the mutators in the mutator list should be set to initially",
    "FortMutatorListComponent:InitState": "Dictates what state the mutators in the mutator list should be set to initially",
    "MinigameTeam:MaxInitTeamSize": "Dictates what the maximum team size should be during initial team assignments",
    "EDestroyActorsAndComponentsMutator_ComponentNameComparisonType": "Dictates which of the component's name strings to compare against, and what type of operation to perform",
    "EPlaysetCategory": "Dictates which tab of the creative item menu the playset goes in",
    "EStimType.MightHaveSeen": "Did not have time to recognized target, but enough to do something",
    "FortActiveSubscription:RenewedAsOverlapped": "Did the last renewal granted as \"overlapped\" renewal due to multiple active subscriptions? If so, the player would have received different rewards.",
    "ContentBeaconError:IsLocalError": "Did this error occur on the local machine",
    "DynamicXpPlayerSessionTransient:bPrevHitExcessXpCutoff": "Did user hit too much previously?",
    "FortMission:bFiredParTimeEvent": "Did we fire off the part time event",
    "FortDagwoodVehicle:bStartHandBrakeCatchupForce": "Did we just start the handbrake catch up force? Auto populated by the sim.",
    "EFortDecoPlacementQueryResults.NoLocation": "Didn't find a valid location to place it",
    "EFortBudgetType": "Different budget types",
    "EFabricContinuousInteractionDirection": "Different directions for continuous interaction",
    "EFortBudgetCategory": "Different metric categories",
    "EFortMissionType": "Different mission types",
    "EMissionGenerationCategory": "Different mission types",
    "EFortJumpStaminaCost": "Different modes for testing out stamina cost for jumps",
    "EFoundationOrdering": "Different strategies for producing an ordered list of foundations in a BR map",
    "EStoreCurrencyType": "Different types of currency that can be used to purchase an item.",
    "EFortElementalDamageType": "Different types of elemental damage",
    "EFabricInteractableType": "Different types of fabric interactables",
    "EObjectiveConversationTriggerType": "Different types of objective conversation triggers based on objective stat value",
    "EProfileCaptureType": "Different types of performance captures",
    "ESpecialRelevancyMode": "Different types of relevancy modes",
    "ESpecialActorStatType": "Different types of stats we care to track for a special actor\nNOTE: when adding/removing from this enum, please update FireEvent_SpecialActorStats",
    "EFortCreativeAdColorPreset": "Different visual color presets on creative advertisements",
    "EFortCreativeAdType": "Different visual styles on creative advertisements",
    "DifficultyCollectionProgressionData:DifficultyCollections": "Difficulty collections",
    "RewardBadgesCollectionProgressionData:BadgeCollections": "Difficulty collections",
    "FortAvailableMissionData:MissionDifficultyInfo": "Difficulty for the mission",
    "FortZoneInstanceDetails:ZoneDifficultyInfo": "Difficulty of this zone",
    "FortTierCollectionLayoutOutput:DifficultyRowName": "Difficulty row name to use for the mode",
    "FortAthenaMutator_Bagel:DifficultySettings": "Difficulty settings for the game, chance AI spawning, effect and such based on number of players and selected difficulty",
    "FortAthenaMutator_Mash:DifficultySettings": "Difficulty settings for the game, chance AI spawning, effect and such based on number of players and selected difficulty",
    "FortWeap_BuildingTool:BlueprintDiffuseTextures": "Diffuse textures for the blueprint paper, based on resource",
    "SubmixEffectDynamicReverbSettings:Diffusion": "Diffusion - 0.0 < 0.85 < 1.0 - Echo density in the reverberation decay - lower is more grainy",
    "FortPOIInjector": "Direct inject POI info into the DefaultGameDataCommon's QuestIndicatorData's ChallengeMapPoiData table\nNOTE:  This table is built up by a build process currently, which does not support multiple maps or playlists.  Ultimately this functionality may not be needed once proper support for multiple maps is available.",
    "FortGeneratedEncounterOption:EncounterOptionInstance": "Direct instance of the option. Bypass the Category option.",
    "FortStormShieldComponent:bDisabled": "Direct is this component disabled",
    "LiquidRibbonSplineSegment:DirectLength": "Direct length between start and end points for this segment",
    "ChaserPatrolTurnData:PatrolTurnStartDirection": "Direction chaser was facing when the turn started",
    "FortPieSliceSpawnData:SpawnDirection": "Direction in degrees to spawn the craft from the center of the SafeZone (0 - 360, starting at top and moving clockwise)",
    "FortSkyTube:AllowedMovementDirection": "Direction objects are allowed to move in the skytube.",
    "FortBattlePassVideoAnnotation:EntryAngle": "Direction of entry in degrees, where 0 points along the positive X (horizontal) axis.",
    "ChaseExternalForce:Direction": "Direction of the force",
    "FortCreativeLinearMoverComponent:RotationDirection": "Direction of the rotation",
    "ChaserPatrolTurnData:PatrolTurnEndDirection": "Direction the chaser will be facing when the turn finishes",
    "BuildingTrapFloor_Hoverboard:DirectionArrow": "Direction the trap will push the player",
    "DestinationTrackerPawnComponent:Direction": "Direction to destination, updated on tick",
    "EFortCreativeLinearMoverRotationDirection": "Direction to rotate when in rotation mode",
    "FortAnimNode_PredictiveStrideWarping:GravityDirAxisMode": "Direction vector for adjusting hips up and down.",
    "FortAnimNode_SpeedWarping:GravityDirAxisMode": "Direction vector for adjusting hips up and down.",
    "TimeOfDayController_BlueprintBase:DirectionalLightColor": "Directional Light Settings",
    "TimeOfDayController_BlueprintBase:bOverride_DirectionalLightColor": "Directional Light Settings",
    "WaterControlParams:BackwardsSpeedCosAngle": "Directional multiplier is applied when dot product of velocity and player facing direction is < this.",
    "WaterControlParams:BackwardsSpeedMultiplier": "Directional multiplier when moving mostly backwards",
    "FortEncounterSettings:ForbiddenSpawnDirections": "Directions we cannot use for this query.",
    "AccountIdAndMatchEndData:NumMissionPoints": "Directly controls the loot table world level.",
    "EndZoneScoreAndAwards:NumMissionPoints": "Directly controls the loot table world level.",
    "EmporiumSettings:DownloadDirectory": "Directory for downloaded assets\nThose files are not removed by default, and are listed in \"Local Assets\" for ease of access.",
    "EFortAntiAliasingMethod.Disabled": "Disable anti aliasing method",
    "EFortNavLinkPattern.Manual": "Disable auto detection for this pattern.",
    "FortStartingMissionInfo:bDisableSharedMissionLoading": "Disable loading shared missions",
    "CollisionReactionConfiguration:bEnabled": "Disable to have no collision reaction.",
    "EFortUIFeatureStateReason.Tutorial": "Disabled and Hidden reasons",
    "EFortFrontEndFeatureStateReason.NoHeroes": "Disabled and hidden states",
    "FortPlayerStateComponent_PlayerAugmentSystem:EnableAugmentsFeature": "Disables augments on a global level. Note, this applies to all game modes that use augments.\nSome game modes (creative) will use augments differently than other game modes (battle royal).\nBefore changing this, first look and see if the game modes specific usage of augments has a hotfix variable\n(eg EnableBRAugmentSystem in UFortBattleRoyalPlayerAugmentSystem)",
    "FortGameplayEffectDeliveryActor:bDisableClientOverlapEvents": "Disables bGenerateOverlapEvents on the collision component for clients. Should be used instead of testing ROLE_Authority after the overlap/touch event.",
    "EFortMantisBranchRule.Off": "Disables branching to another technique.",
    "FortWorldSettings:bDisableEditorCellSnap": "Disables code that snaps building pieces to cells. Useful when making non-gameplay levels.\nIf this is not editable, then UE's in-viewport snapping has already disabled cell snapping.",
    "FortWorldSettings:bDisableCullDistance": "Disables cull distance on building actors. Useful when making non-gameplay levels",
    "FortAthenaMutator_SafeZoneOrderOptimize:MaxPercentDeviationFromBestRoute": "Discard route orders that deviate by more than this percent from the best route order's distance",
    "CatalogDynamicBundle:DiscountedBasePrice": "Discounted base price of this bundle; this will be added to the purchase price",
    "EFrontEndCamera.DiscoveryHome": "Discovery in Lobby Camera",
    "EFortDiscoveryOptionsOverride": "Discovery options override is used when we want to enforce a specific set of options (ie: Public/Private, Fill/NoFill)\nto be shown on the sub mode select modal (Lobby and Activity Details) for a given game activity. Default behaviour (Undefined) is to\nshow Fill/NoFill options. When set to Privacy will show Public/Private options.",
    "EFortQuestSubtype.Discovery": "Discovery quest",
    "OnlineDiscoverySurfaceDevelopmentLinkCodes:SurfaceName": "Discovery surface name.",
    "FortControllerAIBotComponentTelemetryData_Disguise": "Disguise TelemetryData",
    "RiderDismountLaunchVelocity:DismountVelocityMultiplier": "Dismount velocity multiplier applied on the creature velocity",
    "FortAthenaMutator_Wax:OnPendingFlashes": "Dispatches all pending flashes.",
    "FortGameUserSettings:DisplayGamma": "Display Gamma aka Brightness",
    "POIRoundInfo:POIOverrideName": "Display Name Override of the POI, use if this POIRoundInfo does not have an Athena.Location.POI.XXXX tag",
    "FortParentalControls_DisplaySettings": "Display Settings Sub View",
    "FortMission:CurrentFocusData": "Display data for the focused mission widget",
    "AutoGoalCardData:DisplayData": "Display data for the goal card that will be generated.",
    "EAthenaQuickChatFilteringType.NoWeaponEquippedRequiringAmmo": "Display if we don't have a weapon equipped that requires ammo",
    "EAthenaQuickChatFilteringType.WeaponEquippedOfAmmoType": "Display if we have a weapon equipped, with the matching ammo tag",
    "FortAthenaMutator_RespawnAndSpectateSelect:DefaultRespawnTexture": "Display image used for the Default Respawn button\nONLY used if: bCreateDefaultSpawnLocation == true AND bShowDefaultSpawnLocation == true",
    "CatalogOffer:MetaAssetInfo": "Display meta asset info",
    "VkTeamPublicProperties:Name": "Display name",
    "VkProjectInfoSlim:Title": "Display name for the project in project source's language",
    "SurvivorPresigeData:DisplayName": "Display name for this prestige level",
    "FortReplicatedStatMapping:DisplayName": "Display name for when the stat is shown in UI",
    "HomebaseBannerCategoryData:CategoryDisplayName": "Display name of the category",
    "RadialOptionData:Label": "Display name of the picker option",
    "AthenaQuickChatLeafEntry:Label": "Display name of the picker option ({ContextObject} and {ContextValue} will be filled in appropriately)",
    "SquadComsNPCCommandEntry:Label": "Display name of the picker option ({ContextObject} and {ContextValue} will be filled in appropriately)",
    "SquadComsQuickChatEntry:Label": "Display name of the picker option ({ContextObject} and {ContextValue} will be filled in appropriately)",
    "CosmeticBackendLoadout:DisplayName": "Display name the user has assigned to this loadout, if any",
    "SpecialActorRepData:DisplayName": "Display name to use for the actor if displayed in the UI",
    "FortPlayerScoreReport:PlayerName": "Display name, used to index this report",
    "FortEmporiumPriceFilterEntry:Text": "Display text",
    "FortEmporiumSortEntry:Text": "Display text",
    "FortEmporiumItemLicenseData:Name": "Display text for license",
    "FortDeathCauseInfo:DisplayText": "Display text for this death cause.",
    "FortDeathCauseInfoVariant:DisplayText": "Display text for this death cause.",
    "SettingsHUDVisibilityAndText:DisplayText": "Display text for when the hud visibility is shown in UI settings",
    "BeginGroupTeleportParams:HudReasonText": "Display text shown to the players while teleporting",
    "FortUIInfoComponent:LabelText": "Display text that should be used for any UI labels related to the owning actor",
    "FortUIInfoComponent:DescriptionText": "Display text that should be used for any descriptions related to the owning actor",
    "FortAthenaMutator_RespawnAndSpectateSelect:DefaultRespawnLabelText": "Display text used for the Default Respawn button\nONLY used if: bCreateDefaultSpawnLocation == true AND bShowDefaultSpawnLocation == true",
    "FortAthenaMutator_Heist:GameMsg_HeistCompletedOneRemains": "Display when a heist is completed and only 1 remains",
    "FortAthenaMutator_Heist:GameMsg_HeistCompleted": "Display when a heist is completed and there are more than 1 remaining",
    "FortAthenaMutator_Heist:GameMsg_DiamondAcquiredByAlly": "Display when an ally equips a diamond",
    "FortAthenaMutator_Heist:GameMsg_DiamondAcquiredByAllyNoVans": "Display when an ally equips a diamond but vans have yet to arrive",
    "FortAthenaMutator_Heist:GameMsg_DiamondAcquiredByEnemy": "Display when an enemy equips a diamond",
    "FortAthenaMutator_DeimosSurvival:GameMsg_DownTime": "Display when explaining the break in activity",
    "FortAthenaMutator_CreativeTutorial:GameMsg_LandOnHub": "Display when explaining the goal of the Mode once the player enters creative hub",
    "FortAthenaMutator_Bagel:GameMsg_Intro": "Display when explaining the goal of the game during the intro",
    "FortAthenaMutator_DeimosSurvival:GameMsg_Intro": "Display when explaining the goal of the game during the intro",
    "FortAthenaMutator_Disco:GameMsg_Intro": "Display when explaining the goal of the game during the intro",
    "FortAthenaMutator_Heist:GameMsg_Intro": "Display when explaining the goal of the game during the intro",
    "FortAthenaMutator_Mash:GameMsg_Intro": "Display when explaining the goal of the game during the intro",
    "FortAthenaMutator_DeimosSurvival:GameMsg_CompleteObjective": "Display when explaining the objective",
    "FortAthenaMutator_CreativeTutorial:GameMsg_Permissions": "Display when explaining to the player They can modify permissions, allowing others to edit their island",
    "FortAthenaMutator_CreativeTutorial:GameMsg_ExploreFriendsIslands": "Display when explaining to the player They can visit friends islands",
    "FortAthenaMutator_CreativeTutorial:GameMsg_IslandMenu": "Display when explaining to the player how to access the Island Menu",
    "FortAthenaMutator_CreativeTutorial:GameMsg_Inventory": "Display when explaining to the player how to access the creative inventory",
    "FortAthenaMutator_CreativeTutorial:GameMsg_BackToHub": "Display when explaining to the player how to go back to the Creative Hub",
    "FortAthenaMutator_Heist:GameMsg_InitialExitCraftsIncoming": "Display when messaging that the initial exit crafts are coming",
    "FortAthenaMutator_Heist:GameMsg_InitialBlingIncoming": "Display when messaging that the initial safe supply drops are coming",
    "FortAthenaMutator_Heist:GameMsg_FinalExitCraftIncoming": "Display when messaging that the last exit craft is coming",
    "FortAthenaMutator_Heist:GameMsg_DiamondAcquiredByLocalPlayer": "Display when the local player equips a diamond",
    "FortAthenaMutator_Heist:GameMsg_DiamondAcquiredByLocalPlayerNoVans": "Display when the local player equips a diamond but vans have yet to arrive",
    "FortAthenaMutator_Bagel:GameMsg_OnTeamMultiplierIncreased": "Display when the team multiplier is increased",
    "FortAthenaMutator_Mash:GameMsg_OnTeamMultiplierIncreased": "Display when the team multiplier is increased",
    "FortAthenaMutator_CreativeTutorial:GameMsg_LandOnIsland": "Display when welcoming the player to their creative island",
    "FortEmporiumItemData:Description": "Displayable description text",
    "FortEmporiumItemData:Title": "Displayable name",
    "FortEmporiumItemData:Seller": "Displayable seller name",
    "EFrontEndCamera.LobbyCentered": "Displayed prior to the theater of war",
    "EFrontEndCamera.WorldMap": "Displayed prior to the theater of war",
    "FortTheaterMapData:ThreatDisplayName": "Displayed threat level for this theater.",
    "FortTeamMemberPedestal": "Displays 3D representation of a team member at a specific index in the current team",
    "EFortItemCountStyle.StackCount": "Displays the number of instances of the specified item definition in inventory.",
    "EFortItemCountStyle.OverrideCount": "Displays the specified number.",
    "EFortItemCountStyle.StackCountOverOverride": "Displays, as a fraction, the number of instances of the specified item definition in inventory over the specified number.",
    "FortInteriorAudioComponent_BuildingGrid:HorizontalLineTraceDistance": "Distance (in building tiles) for the horizontal line trace",
    "FortInteriorAudioComponent_BuildingGrid:HorizontalScanDistance": "Distance (in building tiles) for the horizontal scan",
    "FortInteriorAudioComponent_BuildingGrid:VerticalLineTraceDistance": "Distance (in building tiles) for the vertical line trace",
    "FortInteriorAudioComponent_BuildingGrid:VerticalScanDistance": "Distance (in building tiles) for the vertical scan",
    "FortLightweightProjectileConfig:HitscanDistance": "Distance (meters) to use hitscan logic",
    "BulletWhipTrackerData:PassByRadiusMin": "Distance < PassByRadiusMin : play the PassByCloseSound asset",
    "ExitCraftInfo:ExitCraftZOffset": "Distance above the \"spawner\" to spawn the exit craft",
    "FortAthenaLivingWorldDensityCondition:Distance": "Distance around the actor location to look at in the density grid.",
    "HurdleInputConfig:Phase3_MinTopClearanceForHurdleOn": "Distance at which even if we find a hit on top of the object, we would still allow hurdle On",
    "HurdleInputConfigCache:Phase3_MinTopClearanceForHurdleOn": "Distance at which even if we find a hit on top of the object, we would still allow hurdle On",
    "FortGameModeZone:LongRangeAutoPickupRadius": "Distance at which the player can long range auto pickup at",
    "AthenaSpecialActorComponent:RenderDistance": "Distance at which to render this special actor UI (<= 0.0f means always)",
    "SpecialActorRepData:RenderDistance": "Distance at which to render this special actor UI (<= 0.0f means always)",
    "AthenaCapturePoint:DistanceForMinHUDSize": "Distance away from HUD indicator for displaying at smallest size",
    "FortFootstepComponent:FootstepBank": "Distance away from character to play footstep sound",
    "FortFootstepComponent:MaxFootstepDistance": "Distance away from character to play footstep sound",
    "FortPawn:MaxFootstepDistance": "Distance away from character to play footstep sound",
    "FortRespawnLogicData:CameraDistance": "Distance away from player to spawn the camera when respawning",
    "FortRespawnData:RespawnCameraDistance": "Distance away from the pawn to place the camera when respawning",
    "WaxVisibilityModifiers:DistanceConsideredCloseForUI": "Distance below which to draw on map when looking for \"nearby\"",
    "FortObjectiveFilter_PlayerDowned:DownedDistance": "Distance between Downed Player and the author (Message is sent when the author downs a player) in meters.",
    "FortVerbMessage_PlayerDowned:DownedDistance": "Distance between Downed Player and the author in meters.",
    "FortPawnComponent_PassiveHealer:PassiveHealerGreetingDistance": "Distance between NPC and player to display the greeting text",
    "FortObjectiveFilter_PawnDied:Distance": "Distance between the Author and killer in Meters",
    "FortVerbMessage_PawnEliminated:Distance": "Distance between the killer and the killed player",
    "FortVerbMessage_ScoredPlayerElimination:Distance": "Distance between the killer and the killed player",
    "FortObjectiveFilter_SetMarker:RequiredDistance": "Distance between the marking actor and the marked target in meters",
    "FortAIDirector:DespawnDistance": "Distance from any player to Despawn NPC's. This is only relevant if the DespawnAIType is Distance",
    "FortAthenaMutator_SurvivalObjectiveData:SpawnDistanceFromGround": "Distance from the ground to spawn the building actor",
    "ControlPointAssetData:SpawnDistanceFromGround": "Distance from the ground to spawn the capture point",
    "FortPicklePortal:FadeRadius": "Distance from the near/far distance over which we fall off.",
    "FortPicklePortal:LocalPawns": "Distance from the near/far distance over which we fall off.",
    "AttachableWheel:WheelDistance": "Distance from the origin of the SM to the attach point",
    "FortObjectiveFilter_RevealedPawnDisguise:Distance": "Distance from the player to the revealed pawn in meters",
    "RockVehicleWheelAnimInfo:SpringToWheelOffsetZ": "Distance from the spring origin to wheel origin.",
    "FortPartyRiftPortalManager:PortalSpawnDistance": "Distance in front of player to spawn a portal",
    "TornadoConfigEntry:TargetOrbitRadius": "Distance objects will move around the tornado",
    "ExitCraftInfo:ExitCraftTargetZOffset": "Distance off the ground the exit craft will eventually idle at when ready to take passengers",
    "PlayspaceComponent_AIPerceptionModifier:ConcealmentDistance": "Distance required for something to be fully concealed by this volume",
    "DestinationTrackerPawnComponent:DistanceSquared": "Distance squared to destination, updated on tick",
    "CreativeAFKDetectionParameters:MinimumMovementPerSecond": "Distance the player must move each second to prevent them from being considered AFK",
    "TokenProviderPositioningData:DistanceForResultsInvalidation": "Distance the token provider needs to have moved to ask for new results",
    "FortAIDirector:EncounterRelevantDistanceToDefender": "Distance to a Defender where we consider an active encounter relevant.  Used for behaviors, etc.",
    "FortAIDirector:AIRelevantDistanceToPlayer": "Distance to a player where we consider an AI relevant.  Used for patrols spawning, etc.",
    "FortAIDirector:EncounterRelevantDistanceToPlayer": "Distance to a player where we consider an active encounter relevant.  Used for patrols spawning, etc.",
    "AimingCircleSettings:ExtraClampingDistance": "Distance to add when clamping the aim position to miss the target.",
    "DigestedAimingCircleSettings:ExtraClampingDistance": "Distance to add when clamping the aim position to miss the target.",
    "FortAthenaBeaconComponent:AttractionRadius": "Distance to attract a bot",
    "FortPlayerController:EditModeDistance": "Distance to check for allowing editing of a building; @EditMode todo: Make this tweakable in a gameplay blueprint/class",
    "FortPlayerStartCreative:EnemyRangeCheck": "Distance to check for enemy, if enemy is in range of a SpawnPad, then don't consider that location.",
    "FortControllerComponent_TransientQuests:TrackedHunterBountyTargetDistance": "Distance to current bounty target.",
    "FortGravityGunHolder:HoldForwardDistance": "Distance to hold the object in front of the player.",
    "FortGravityGunHolder:HoldUpDistanceWhileADS": "Distance to hold the object up in front of the player while aiming down sights.",
    "FortGravityGunHolder:HoldUpDistance": "Distance to hold the object up in front of the player.",
    "BuildingGameplayActorChaser:PatrolGroundFindDistance": "Distance to look down for the ground while patrolling",
    "FortAIPawn:FollowPlayerRange": "Distance to player for firing following event",
    "FortCreativeLinearMoverComponent:Distance": "Distance to translate to.",
    "EFortQuestObjectiveStatEvent.AthenaDistanceTraveled": "Distance traveled in BR. This only takes into account X and Y coordinate changes",
    "PlaystyleSwitchToAggressiveData:TurnToAggressiveMinimumDistance": "Distance under which a bot considers turning aggressive",
    "PlaystyleSwitchToAggressiveDataDigested:TurnToAggressiveMinimumDistanceSquared": "Distance under which a bot considers turning aggressive",
    "DigestedWeaponAccuracy:MinimumDistanceForPawnAiming": "Distance under which we will use our eyes view point instead of the muzzle transform to aim",
    "FortSplineGroundPath:MaxDistanceBetweenPathwayPoints": "Distance used for breaking up pathways that have long distances any between two points (usually from nav mesh results)",
    "FortAthenaMutator_Wax:DistanceConsideredNearbyForUI": "Distance used for state that need to compare for 'nearby'",
    "FortAthena_WaxToken:DistanceStopInterpolationAt": "Distance where the interpolation will skip finishing and instead go directly to the final spline state.",
    "FortGameModePickup_Wax:DrawOnCompassDistance": "Distance within which to draw on the compass. If we're even relevant.",
    "FortSquadStartSearchParamData:DistanceMaximum": "DistanceMaximum the maximum distance between selected squad starts, -1.0 means no maximum distance check.",
    "FortSquadStartSearchParamData:DistanceMinimum": "DistanceMinimum the minimum distance between selected squad starts, -1.0 means no minimum distance check.",
    "FortAnimInput_PlayerSkydiveAnimAsset:Dive_BS_Female": "Diving",
    "FortPawn:bSupportsDamageNumbersAtHitLocation": "Do Damage numbers use the hit location of the projectile / hit to be drawn?",
    "FortAIPawn:bAllowServerCosmeticComponentOptimizations": "Do NOT Set this variable to false without consulting with AI programmers. It's only used for special cases like Bosses and in other cases setting it will cause performance problems!\nWhen false this will skip the optimizations applied by ServerComponentOptimization::bRemoveCosmeticComponents which is used in Athena",
    "FortAIPawn:bAllowCapsuleComponentsOnServer": "Do NOT Set this variable to true without consulting with AI programmers. It's only used for special cases like Bosses and in other cases setting it will cause performance problems!\nWhen true capsule components will be updated on server, but all other components will stil respect the bAllowServerCosmeticComponentOptimizations setting.\nThis is more performant than bAllowServerCosmeticComponentOptimizations, but still has some cost.",
    "EFortBangType.Custom": "Do not activate this, it is used to flag a case where the bang will have custom management",
    "EDaySequenceModifierBlendMode.None": "Do not blend into the volume - modifier will immediately active when enabled",
    "EFortWeaponListRemovalBehavior.DoNotDestroy": "Do not destroy the weapon actor at all, just remove it from the list. Responsibility on the caller to make sure the weapon doesn't leak",
    "EAthenaLootDropOverride.ForceKeep": "Do not drop the loot when the player dies",
    "EAthenaMutatorEvaluators.NoOverride": "Do not evaluate this",
    "ESynchronizedTeleportHealthAndShieldResetType.None": "Do not execute any code for health or shield",
    "EForceKickAfterDeathMode.Disabled": "Do not kick players after team death",
    "EFortHUDElementVisibiltyOption.ShowElement": "Do not modify the existing setting",
    "FortAthenaVehicle:ExceptionsForClearFallDamageImmunityOnExitTagQuery": "Do not remove fall damage immunity on exit if this tag query is true.",
    "EFortBuildingHealthDisplayRule.Never": "Do not show the health of the building under any circumstance",
    "EFortEmporiumItemSortMode.MCP": "Do not sort; use original MCP order",
    "FortQuestMapNode:QuestItemDefinition": "Do not use this property. It should be editor only but rowstruct sizes should not change between editor and game. It is used to import objects by path and convert them to template ids",
    "EFortBuildPreviewMarkerOptionalAdjustment.None": "Do nothing, let the default placement work.",
    "CosmeticDeveloperSettings:bAllowAccessToAllEmojiVariantsForFrontEndTesting": "Do we allow access to all emojis when selecting emojis for variant purposes, or do we require the player's\nprofile to own the emojis?  (Not available in shipping builds)",
    "CosmeticDeveloperSettings:bAllowAccessToAllSprayVariantsForFrontEndTesting": "Do we allow access to all sprays when selecting sprays for variant purposes, or do we require the player's\nprofile to own the sprays?  (Not available in shipping builds)",
    "CosmeticDeveloperSettings:bAllowAccessToAllWrapVariantsForFrontEndTesting": "Do we allow access to all wraps when selecting wraps for variant purposes, or do we require the player's\nprofile to own the wraps?  (Not available in shipping builds)",
    "FortDagwoodVehicle:bHasTraction": "Do we currently have traction? Auto populated by the sim.",
    "FabricMetaSoundPatchWrapperPeakTamer:MaxSignalsToTame": "Do we have a maximum number of signals to tame?",
    "FortMissionManager:CurrentUIFocusedMission": "Do we have a mission that is occupying the central timer at the top of the screen?",
    "HomebaseBannerIconData:bFullUsageRights": "Do we have full usage rights? We can't use some banners (e.g., most influencer ones) for sprays/other representations besides the menu banner icon",
    "PhaseLevelEntryBase:bMakeVisibleOnPhaseStart": "Do we have the level visible at phase start?",
    "MontageBeatSyncComponent:bHaveTimingInfo": "Do we have valid timing info for beat syncing",
    "FortLOSComponent:bStopAfterHasBeenFound": "Do we keep doing the LOS check after the object has been found?",
    "PhaseLevelEntryBase:bLoadLevelOnScriptStart": "Do we load this level immediately when the script loads?",
    "FortQuestObjectiveStatXPTableRow:bOnceOnly": "Do we only do this xp stat event once only?",
    "FMInWorldKnobActorBase:bKnobDisplayOnly": "Do we only update the display on the knob when setting values? Could be used in conjunction with bKnobEnabled to alter visuals",
    "FortCarriedObject:bPickupOnTouch": "Do we pick this flag up on touch or interact with it?",
    "AssembledMeshUserComponent:bAssignMeshPartsOnBeginPlay": "Do we want to assign the mesh parts during BeginPlay of this component?\nThis is meant to be used with MeshParts already set up on the component.\nThis allows for quick iteration without having to set up a data driven solution that fills the MeshParts later.\nOther components could be filling the MeshParts already like the UAssembledMeshCoordinatorComponent on the player state.",
    "FortSpicySakeGameplayCueNotifyLoop_Alive:bComputeWaterDepth": "Do we want to compute water depth for VFX position accuracy",
    "FabricMetaSoundPatchWrapperPeakTamer:bUseGameplaySmoothing": "Do we want to smooth on the game thread?",
    "FabricMetaSoundPatchWrapperPeakTamer:bSortSignals": "Do we want to sort the signals before processing?",
    "FortAbilityTargetSelectionList:bStopAtFirstSuccess": "Do we want to stop after the first successful selection, or add results from all selections?",
    "FortAthenaAIBotController:bIsAffectedByMutatorHealthAndShieldModifiers": "Does Health and Shield mutators affect this AI in the mode",
    "GeneralChatReturn:bNeedsPaidAccessForGlobalChat": "Does each chat type require a paid upgrade for this player?",
    "FortGyroV2Settings:GyroV2TouchMode": "Does engaging the look region of the touch screen disable/enable gyro aiming?",
    "FortGyroV2Settings:GyroV2StickMode": "Does engaging the look stick disable/enable gyro aiming?",
    "FortGyroV2Settings:bGyroV2AimAssist": "Does gyro input trigger aim assist?",
    "MyFortCategoryData:bIsCore": "Does it contain attributes considered core",
    "BotKnockbackSettings:ShouldAllowCharacterToBeLaunched": "Does knockback be considered like a character launch in behavior?",
    "DigestedBotKnockbackSettings:bShouldAllowCharacterToBeLaunched": "Does knockback be considered like a character launch in behavior?",
    "EFortStructuralGridQueryResults.PatternNotPermittedByLayoutRequirement": "Does not match layout requirement pattern",
    "EFortStructuralGridQueryResults.ResourceTypeNotPermittedByLayoutRequirement": "Does not match layout requirement resource",
    "FortAIPawn:IsBlockingBuilding": "Does the AI blocks building?",
    "AircraftFlightInfo:bEjectPlayersAtDropZoneExit": "Does the aircraft automatically eject players once it leaves the drop zone",
    "FortGameState:bDBNOEnabledForGameMode": "Does the game mode associated with this state support DBNO?",
    "FortGameModePvE:bWaitForAircraft": "Does the game mode wait to spawn player from an aircraft?",
    "WeaponItemDefinitionDesignerData:bSchematicObeysInventorySizeLimits": "Does the schematic obey inventory size limits? It will not count towards the limit if false.",
    "CrashpadStaticParams:bDestroyByShark": "Does the shark destroy the crashpad?",
    "FortVehicleFuelComponent:InfiniteFuel": "Does the vehicle have infinite fuel",
    "FortGameplayEffectDeliveryActor:bKillOnExplode": "Does this DeliveryActor die on explode?",
    "FortGameplayEffectDeliveryActor:bKillOnMaxTargetsTouched": "Does this DeliveryActor get killed when it has touched its max targets as defined by MaxApplicationsOnTouch. Only works when IsTouchApplicationAllowed is true initially for this actor",
    "FortPhysicsPawnObject:bPlayDamageAudio": "Does this PhysicsObject play damage audio when damaged?",
    "FortPhysicsPawnObject:bShowDamageNumbers": "Does this PhysicsObject show damage number pops when damaged?",
    "FortUIFeedback:bLooping": "Does this UI feedback loop",
    "FortActorComponent_Affiliation:bIsRegisteredToAffiliationSystem": "Does this component has been registered in affiliation system?",
    "FortObjectiveBase:bAcceptsMissionEventsWhenFinished": "Does this objective accept mission events even when finished/completed",
    "FortObjectiveBase:bStartPlayingOnMissionStart": "Does this objective automatically start playing when the mission starts playing",
    "QuestInstanceParticipantConfiguration:bReceives": "Does this participant receive quest and/or objective side effects upon completion (i.e. rewards) with its associated quest instance",
    "QuestInstanceParticipantConfiguration:bObserves": "Does this participant receive visual updates about its associated quest instance",
    "PartyMemberPackedState:VoiceChatStatus": "Does this party member have voice chat enabled?",
    "PartyMemberPackedState:bShouldRecordPartyChannel": "Does this party member selected/needs to be recording",
    "FortProjectileBase:bStopSimulatingOnHit": "Does this projectile stop moving when it hits a target?",
    "PerkItemDefinitionDesignerData:bNeverPersisted": "Does this quest export to JSON?",
    "QuestItemDefinitionDesignerData:bNeverPersisted": "Does this quest export to JSON?",
    "BuildingSMActor:bAllowWeakSpots": "Does this thing have weak spots?",
    "TrapItemDefintionDesignerData:bNeverPersisted": "Does this trap export to JSON?",
    "BuildingTrap:bTriggerAbilityOnEndoverlap": "Does this trap support triggering abilities when the overlap has ended;",
    "FortAthenaVehicle:bPlayDamageAudio": "Does this vehicle play damage audio when damaged?",
    "FortAthenaVehicle:bShowDamageNumbers": "Does this vehicle show damage number pops when damaged?",
    "FortAthenaVehicle:bShowDamageNumbersAtImpactLocation": "Does this vehicle show damage number pops when damaged?",
    "FortAthenaVehicle:bShowVehicleHealthBarOnPlayerHUD": "Does this vehicle show its healthbar on the player's HUD while they are in it?",
    "FortCharacterVehicle_Ostrich:bExplodeOnDetonate": "Does this version of Ostrich need to explode on Detonate()",
    "HeroSpecializationDesignerData:bNeverPersisted": "Does this weapon export to JSON?",
    "WeaponItemDefinitionDesignerData:bNeverPersisted": "Does this weapon export to JSON?",
    "FortGyroV2Settings:bZoomScalesWinding": "Does zooming in reduce winding speed?",
    "EClassRepNodeMapping.RelevantAllConnections": "Doesn't map to any node. Used for special case actors that handled by special case nodes (UFortReplicationGraphNode_AlwaysRelevantForTeam, UFortReplicationGraphNode_PlayerStateFrequencyLimiter)",
    "MarshalledVFXAuthoredData:CascadeVFX": "Doesn't really have to be cascade, but these are processed last.\nSuccessfully spawned effects from NiagaraVFX will prevent effects here\nwith the same EffectIdTag from being instanced. This rule\napplies regardless of whether it is a Cascade or Niagara system\nin EITHER array.",
    "MarshalledVFXAuthoredData:NiagaraVFX": "Doesn't really have to be niagara, but these are processed first.\nSuccessfully spawned effects will prevent effects in CascadeVFX\nwith the same EffectIdTag from being instanced. This rule\napplies regardless of whether it is a Cascade or Niagara system\nin EITHER array.\n\nNote, that this SHOULD probably be Niagara assets.",
    "EFortGameFeature.DanceRoyale": "Doing AR dances",
    "EFortGameFeature.KairosCapture": "Doing scene captures for kairos",
    "EMatchmakingUtilityState.RunningPlaylistChecks": "Doing setup required before we can travel to the server. See: EActivePreTravelSetupStepsMask",
    "VkTeamAuthorizedEmailDomain:Domain": "Domain",
    "EFortFrontendInventoryFilter.Invisible": "Don't display in UI at all",
    "EFortInventoryFilter.Invisible": "Don't display in UI at all",
    "ECrucibleWhitelistOverride.ForceOn": "Don't override.",
    "BulletWhipTrackerData:MinimumTriggerDistance": "Don't play whiz if Distance from listener < MinimumTriggerDistance",
    "FortObjectiveFilter_Land:ExcludedSurfaces": "Don't progress on these surfaces. Empty means nothing is excluded",
    "ECollectionSelectionMethod.None": "Don't select anything at all; Implies the collection is unnecessary",
    "FortMovementComp_Character:NetworkSmoothingViewAngleThreshold": "Don't throttle characters below min LOD within this angle from the view direction.",
    "FortMovementComp_Character:NetworkSmoothingNoThrottleWithinDistanceInMeters": "Don't throttle characters smoothing within distance (in meters) from view (regardless of visibility). Visible characters are never throttled.",
    "FortMovementComp_Character:NetworkSmoothingViewAngleThresholdSmall": "Don't throttle characters within this angle from the view direction.",
    "EFortMantisTechniqueRootMotionType.None": "Don't use root motion with this technique.",
    "EFortWorldManagerState.WMS_Running": "Done with initialization, running normal ticks",
    "FortBuildingWallDoorComponent": "Door component to be spawned on ABuildingWall\nHold replicated properties for each door static mesh component",
    "EFortTestGoalActorDot.Dot2D": "Dot Product in the XY-plane, which is equivalent to the cosine of the heading or yaw angle.  Uses the Goal Actor as the start location of both direction vectors.",
    "InteriorAudioBuildingRotationConstraint:DotProductComparisons": "Dot Product values against BuildingActor basis (Forward, Right, Up) required to determine if this piece is rotated correctly to satisfy the constraint",
    "EFortGameFeatureState.DownloadFailed": "Download failed, but may be retried",
    "ValkyrieModuleDependencySizeStats:DownloadSizeBytes": "Download size (in bytes) that should be reported",
    "ValkyrieProjectSizeStats:DownloadSizeBytes": "Download size (in bytes) that should be reported (does not include dependencies)",
    "FlightParams:VerticalStabilizationDrag": "Drag coefficient horizontal to the wings. This will scale linearly\n              with forward velocity.",
    "FlightParams:HorizontalStabilizationDrag": "Drag coefficient to the left/right of the plane body. This will scale\n              linearly with forward velocity.",
    "PhysicsPawnObjectInitialParameters:OverrideAngularDampening": "Drag force to angular movement.",
    "PhysicsPawnObjectInitialParameters:OverrideLinearDampening": "Drag force to linear movement.",
    "FortWaterInteractionComponent:HorizontalDrag2": "Drag in the horizontal direction, applied to square of velocity so ramps up as speed increases. Try values < 1.",
    "FortWaterInteractionComponent:HorizontalDrag": "Drag in the horizontal direction, mostly applies at low speed",
    "FortWaterInteractionComponent:DownBuoyancyDrag2": "Drag in vertical direction when moving down, applied to square of velocity so ramps up as speed increases. Try values < 1.",
    "FortWaterInteractionComponent:DownBuoyancyDrag": "Drag in vertical direction when moving down, mostly applies at low speed",
    "FortWaterInteractionComponent:UpBuoyancyDrag2": "Drag in vertical direction when moving up, applied to square of velocity so ramps up as speed increases. Try values < 1.",
    "FortWaterInteractionComponent:UpBuoyancyDrag": "Drag in vertical direction when moving up, mostly applies at low speed",
    "FortDynamicBuilder:bDebugDrawBounds": "Draw the bounds of the Building instructions",
    "FortDynamicBuildingDeconstructor:bDebugDrawBounds": "Draw the bounds of the Building instructions",
    "StaminaAnalytics": "Driver Class for holding and running Analytic Data for Stamina Event",
    "FortMeatballVehicle:VehicleCameraNoWeaponOverride": "Driver camera mode override for weaponless Meatball",
    "OnFortScoutDroneDeployed": "Drone Deploy Event Payload",
    "OnFortScoutDroneDismissed": "Drone Dismiss Event Payload",
    "ESpectatorCameraType.BattleMap": "Drone but highly elevated with battle map visualization",
    "ESpectatorCameraType.ARDrone": "Drone but used to generate material for augmented reality",
    "ESpectatorCameraType.DroneAttach": "Drone, but locationally constrained to a character",
    "ESpectatorCameraType.DroneFollow": "Drone, but with view direction locked on to a character",
    "FortAIBaseLootDropRow:ItemDropChance": "Drop chance for items when an AI with matching tags is killed. Range 0-1",
    "ExcelImportUtil": "Drop this struct into your class as a UPROPERTY(EditAnywhere) and then call Setup()\nin your PostInitializeProperties.\n\nThis struct has a details customization which presents UI for",
    "EAthenaLootDropOverride.DropUnlessTeamSelectionUpdated": "Drop unless being respawned by a team selection device",
    "EWorldItemDropBehavior.DropAsPickupEvenWhenEmpty": "Drops the item entry as a pickup even when the stack is empty",
    "ESequencerType.SingleTrack": "DrumSequencer",
    "FortProjectileMoveComp_Drunk:DrunkConfig": "Drunk projectile data.",
    "ProjectileMovementDrunkConfig:MinPitch": "Drunk projectiles adjust their launch angle to point at least this many degrees upwards.",
    "FabricMetaSoundPatchWrapperWetDryOutputBinding:DryOutputSignalBinding": "Dry output signal binding",
    "FortWeaponRangedDualSwing": "Dual ranged weapon that is used to attach to a point in the world and swing the player from\n   that point, drawing a rope between the player's hand and the attach point.\n\nNOTE: This class is being used specifically by the items deriving from the GrappleParent\nplugin. It could not be included in that plugin because that would require exporting many\nsymbols from FortWeaponRanged and FortWeaponRangedDual to FORTNITEGAME_API, which risks\n   putting the FortniteGame .dll over the library symbol limit of 65535 symbols. The location\n   of this class should be re-evaluated when the library symbol limit is no longer an issue.",
    "SavedSpectatorCameraShot:Message": "Dumb FString version of LocalisedMessage. Currently only used by external team for Project Unicorn",
    "EFortWorldMarkerType.PingGoTo": "Dummy Value. Place any new values AFTER this",
    "EFortWorldMarkerType.SquadComsWatchArea": "Dummy Value. Place any new values AFTER this",
    "EFortWorldMarkerType.MAX": "Dummy Value. Place any new values BEFORE this",
    "EValkyrieValidationErrorCode.Warning": "Dummy error used by warning logs",
    "BGAConsumableSpawner:DummyRoot": "Dummy root component for the actor",
    "OperationSequenceData_TestInner": "Dummy struct used for testing FOperationSequenceHandle garbage collection functionality. Stored as part of the\nsequence's flow data, and holds a single dummy inner object.",
    "EFortReplicatedStat.None": "Dummy value. KEEP THIS BETWEEN MAX AND SCORE! This is just here so that if you try to insert into an array of MAX size with NONE you won't crash.",
    "FortMeleeWeaponStats:GenericSurfaceDurabilityCostMultipliers": "Durability cost multipliers against different generic surface tags.",
    "FortBaseWeaponStats:DurabilityPerUse": "Durability to expend per use",
    "FortWeaponDurabilityByRarityStats:Common": "Durability value for common-level rarity",
    "FortWeaponDurabilityByRarityStats:Epic": "Durability value for epic-level rarity",
    "FortWeaponDurabilityByRarityStats:Legendary": "Durability value for legendary-level rarity",
    "FortWeaponDurabilityByRarityStats:Mythic": "Durability value for mythic-level rarity",
    "FortWeaponDurabilityByRarityStats:Rare": "Durability value for rare-level rarity",
    "FortWeaponDurabilityByRarityStats:Transcendent": "Durability value for transcendent-level rarity",
    "FortWeaponDurabilityByRarityStats:Unattainable": "Durability value for unattainable-level rarity",
    "FortWeaponDurabilityByRarityStats:Uncommon": "Durability value for uncommon-level rarity",
    "FortMusicSection:Duration": "Duration (0 will just let the asset play as long as it can)",
    "FortAthenaMutator_DadBro:OverridePickUpDespawnTime": "Duration before Spawned PickUps despawn",
    "FortSmartObjectSlotDefinitionData:SlotCooldownOnInterrupted": "Duration before any AI can use this slot on a specific SmartObject, after one has been interrupted while using it.",
    "FortSmartObjectSlotDefinitionData:SlotCooldownOnFinished": "Duration before any AI can use this slot on a specific SmartObject, after one has successfully used it.",
    "FortPawnComponent_PassiveHealer:HealItemWaitAfterThrowDuration": "Duration before restart play emote after used the heal item",
    "AthenaAISettings:DurationReduceAggroLimits": "Duration before we switch to ReducedDeAggroRange",
    "FortPawnComponent_PassiveHealer:HealingIntervalDuration": "Duration between each heal",
    "CollisionReactionConfiguration:BuildingActorImmunityDuration": "Duration during which the building actor is immune after being impacted (0 = deactivated).",
    "FortGameStateComponent_TimeDilation:EndGameTimeDilationDuration": "Duration how long time dilation should last. If > 0, it's used instead of the curve length for more flexibility and reuse of curves.",
    "FortCurieFXSettings:ElectricityArcJumpDuration": "Duration of arc jump",
    "FortPawnComponent_PassiveHealer:PassiveHealerGreetingDuration": "Duration of greeting text display",
    "FortAthenaMutator_Rounds:RoundEndTimeDilationDuration": "Duration of round end time dilation",
    "FortMeleeWeaponStats:SwingTime": "Duration of swing animation, cooldown between subsequent attacks.",
    "FortPawnComponent_SpeechBubble:DisplayBubbleDuration": "Duration of text display",
    "FortItemPreviewOnPawnActor:EmoteFXDuration": "Duration of the VFX when an emote is restarted",
    "ProjectileMovementDrunkConfig:Duration": "Duration of the drunk behavior, after the initial delay.",
    "BelongTreatyProjectileMovementComponent:TransitionDuration": "Duration of the ease in transition represented. How fast do we want to go through that speed curve?",
    "FortPawnComponent_PassiveHealer:HealItemThrowHoldDuration": "Duration of the heal item \"cooking\"",
    "FortCreativeLinearMoverComponent:RotationDuration": "Duration of the rotation.",
    "FortScoutDroneDiveTransitionData:TransitionDuration": "Duration of the transition represented by this data. How fast do we want to go through that speed curve?",
    "RockVehicleAbility_Flip:Duration": "Duration that forces will be applied",
    "FortAthenaLivingWorldActorSpawnDescription:PostDestructionTagDensityPersistenceDuration": "Duration to keep the actor in the Tag Density grids after being destroyed (in seconds). Can be conditionally based on the Pawn DeathTags",
    "FortAthenaMutator_DadBro:DadBroDelayBeforeSpawning": "Duration to wait before actually spawning DadBro",
    "FortPawnComponent_PassiveHealer:HealItemEquipDuration": "Duration with the heal item equipped before start fire",
    "FortAthenaMutator_Uranium:PushersAbandonedCartOvertimeDuration": "During OverTime how long before the PushersAbandonedCart Overtime shrinks to its lowest possible amount of time\n For example: when overtime first starts players could have 5 seconds of abandonment, but 60 seconds later they may only have .5 seconds of abandonment allowed, and the players will always have at least .5 seconds.\n in this case PushersAbandonedCart OvertimeDuration = 60.",
    "FortAthenaMutator_Uranium:PushersAbandonedCartOvertime": "During OverTime how long the pushers can stop pushing before the match is ended\n This value scales based on how much time has passed since overtime started",
    "EFrontEndCamera.HeroSelect": "During matchmaking we ask people to pick a hero",
    "FortCharacterMovementMutatorComponent:BuffetFlyingRicochetSphereSize": "During ricochet, the character's collision capsule is temporarily changed to a sphere of this size",
    "BuildingGameplayActorSentry:LocatingDamage_OverRotation": "During the Locating Damager state, how far in degrees will the sentry will move past the location of its damager. This ensures that the player can't just the sentry and walk a small distance out of the way to avoid detection.",
    "SkyfireBackpackComponent:DMBackBling": "Dynamic Materials",
    "HarmonixAnalyzerEffectResults:DrHighEnvelope": "Dynamic Range",
    "FortControllerComponent_DynamicRollPlayerComponent:AssociatedManagerClass": "Dynamic Roll System can be used for multiple systems with different tables.\nThis is used to associate a player component with a table manager gamestate component.\nfuture systems using this should provide their own class to avoid listening to the wrong table manager.",
    "DynamicXpPlayerSessionTransient:LastVoteGuid": "Dynamic XP system allows for a voting mechanism where the last triggered voting device is the only one that is marked as triggered when reporting .",
    "FortMission:MissionCompletionTags": "Dynamic mission completion tags",
    "EFortMantisTechniqueAnimationType.DynamicMontage": "Dynamically choose a montage when this technique starts. Must set DefaultDynamicMontageName and implement UFortGameplayAbility_Mantis::GetDynamicMontageNameForTechnique.",
    "IceGroundPath": "Dynamically generates spline meshes with collision at runtime",
    "CrewPlatformTable:SubscriptionPlatform": "EAppStore::DebugStore is treated as a \"Default\" entry - if no other entry matches the current subscription platform, fall back to the TableRows for EAppStore::DebugStore",
    "CrewPlatformAndCountriesPair:SubscriptionPlatform": "EAppStore::DebugStore is treated as an \"Any\" entry - if EAppStore::DebugStore is set, only condition off the Country Codes",
    "EEpicLeaderboardDataType": "EEpicLeaderboardDataType",
    "EFortGamepadLookInputCurve": "EFortGamepadLookInputCurve",
    "EFortGamepadSensitivity": "EFortGamepadSensitivity",
    "EFortHitNotifyAudioPerspective": "EFortHitNotifyAudioPerspective: Indicates what perspective the the listener has for the hit notify event",
    "EFortHitNotifyAudioType": "EFortHitNotifyAudioType: Indicates what type of native hit notification to play.",
    "ECinematicSequenceEnabledOnPhase.GameplayOnly": "EFortMinigameState::InProgress",
    "ECinematicSequenceEnabledOnPhase.PreGameOnly": "EFortMinigameState::PreGame (island in read only state)",
    "ECinematicSequenceEnabledOnPhase.CreateOnly": "EFortMinigameState::PreGame (island is NOT in read only state)",
    "EFortSafeZoneState": "EFortSafeZoneState",
    "EInfiltrationTeam": "EInfiltrationTeam",
    "EIntelStateEnum": "EIntelStateEnum",
    "AthenaDeveloperSettings:BotsElo": "ELO of the bots to spawn. Leave -1 to use the normal flow (Average game MMR, see OverrideMMR in defaultengine.ini)",
    "ELfgState": "ELfgState - LFG state types\n\nImportant Note:\nIf we do need to change this ENUM, it will impact a BP that picks up the materials based on the index",
    "EMultiFriendAction": "EMultiFriendAction - handle multi actions on friends",
    "EMusicEventResolutionRule": "EMusicEventResolutionRule - Different ways for resolving events that are equal priority",
    "FortPlayerState:EOSProductUserId": "EOS ProductUserId for game services, verified using an ID token.",
    "EOperationsTeamFaction": "EOperationsTeamFaction",
    "FortAthenaLivingWorldManager:EQSHelper": "EQS Helper actor used to dynamically run EQS requests around generated spawn points",
    "BuildingProp_DeimosSpawner:EQSQueryOptions": "EQS Query array. These sott class pointers will be loaded when the minigame starts",
    "FortEncounterSettings:RiftSelectionQuery": "EQS Query which can choose which rift AI should spawn from.",
    "FortEncounterSettings:RiftSlotsEQSQueryOverride": "EQS Query which will override the rift's spawn slot query.",
    "TokenProviderPositioningData:QueryTemplate": "EQS for the specific tag",
    "BGAConsumableSpawner:QueryTemplate": "EQS query to run to determine spawn positions for the consumables",
    "FortBuildingActorSpawner:QueryTemplate": "EQS query to run to determine spawn positions for the consumables",
    "FortAthenaLivingWorldVolume:EnvironmentQuery": "EQS query used to generate points for the point provider.",
    "FortAICombatTokenProviderComponent:PositioningDatas": "EQS to run to provider positions for our Token Consumers",
    "EncounterMobSpawnInfo:PointProviderEQS": "EQS used by the LWM when validating mob spawns in a volume based point provider",
    "FortAIPawn:OverriddenScoreDistribution": "EScoreDistributionType::Default indicates score distribution type is not overridden",
    "EShowPlacardPhase": "EShowPlacardPhase",
    "MatchmakingParams:StormShieldDefenseType": "EStormShieldDefense setting.",
    "ELoginResult.EULACheckFailed": "EULA has not been accepted",
    "FortVehicleAudioVoice:ExplicitFloatParams": "EXPLICIT Optional curve/attack/release values for N number of float params to be passed to the sound cue",
    "FortNearbyActorsPerceptionConfiguration": "Each UObject can register one or more configuration.",
    "VisibilityInfo:TeamVisibilityFlag": "Each bit represents a team where on/off of that bit indicates visibility.",
    "FortGameStateComponent_ScriptedObjectMovementManager:WorldPhaseSites": "Each of these phases operate independently.",
    "CosmeticFilterTagDataRow:SearchQueries": "Each of those will be automatically pushed to the search query validator for the single item containing the tag \"Tag\".",
    "QuickHealPriorityExtension:QuickhealItemPrioritySpecifiers": "Each priority defined with its own insertion rule into the Quick Heal Item",
    "SubmixEffectDynamicQuadDelaySettings:Taps": "Each tap's metadata",
    "FortPlayerPawnAthena:OnFortPlayerDied": "Earlier death notification than other delegates",
    "EUraniumGameEndedReason.EarlyGameEnd_OutNumbered": "Early Game End, a team was out numbered. One team has significantly fewer players than the other team (and also lost the previous round)",
    "EUraniumGameEndedReason.EarlyGameEnd_BlowOut": "Early Game End, the game was a blowout. One of the teams scored much higher than the other team",
    "EFortGameFeature.EarlyStartup": "Early startup assets, needed for all other states",
    "EFortQuestObjectiveStatEvent.VehicleAirTime": "Earn air time from a jump while operating a vehicle. Target is the vehicle.",
    "EFortQuestObjectiveStatEvent.EarnVehicleTrickPoints": "Earn points by performing tricks while operating a vehicle. Target is the vehicle.",
    "FortMantisTechniqueCharacterSettings:ReattachCharacterRotationBlendExponent": "Ease out exponent used for blend when reattaching character rotation to the camera. Used when blending out of this technique and not branching\n              into another technique as well as when blending into this technique after branching from another technique (if bDetachCharacterRotationFromCamera is false).",
    "FortPawnStats:CurieMaterialIdentifierString": "Easier to specify format for CurieMaterialIdentifier; Parsed into gameplaytag on import",
    "FortSoundIndicatorComponent:bUseAttenuationSettingsForMaxDistance": "Edit condition to specify if we should be using attenuation settings to determine the max visibility distance",
    "EEditAutoConfirmation": "Edit confirmation mode",
    "FortGamepadSettings:EditModePullScaleFlat": "Edit mode aim assist pull multiplier applied to flat buildings (floor, stair, ceiling)",
    "BuildingSMActor:EditModeSupport": "Edit mode support helper, if necessary",
    "CosmeticGatingCondition:AgeRatingQuery": "EditAnywhere",
    "CosmeticGatingRuleData:GatingCondition": "EditAnywhere",
    "CosmeticGatingRuleData:GatingRule": "EditAnywhere",
    "AIHotSpot:bCustomNavmeshSearchExtent": "EditCondition toggle flag",
    "FortGameFeatureKeyboardMouseKeybindInfo": "Editable key mapping data for the FFortGameFeatureKeyboardMouseKeybindData array.",
    "BuildingActor:EdRenderComp": "Editor Preview",
    "FortBallSpawner:PreviewMeshComponent": "Editor Preview",
    "FortStaticMeshActor:EdRenderComp": "Editor Preview",
    "BuildingSMActor:ActorsForcedAttachToMe": "Editor Use Only: When an actor forces attachment to this actor we store it for quick reference.",
    "SpawnerDataComponentAffiliationSharedBBConfiguration": "Editor exposed struct used to define shared blackboard information between AIs in the same faction.",
    "PerPlatformMetricProfiles": "Editor only",
    "FortQuestObjectiveStat:ConditionStringGameplayTagsEditorCacheV2": "Editor only cache of the GameplayTags in the Condition string.\nThis is used for reference tracking GameplayTags in the editor, since GameplayTags in the Condition string\nare stringified so can't be found in the reference viewer.",
    "FortQuestObjectiveStatTableRow:ConditionStringGameplayTagsEditorCacheV2": "Editor only cache of the GameplayTags in the Condition string.\nThis is used for reference tracking GameplayTags in the editor, since GameplayTags in the Condition string\nare stringified so can't be found in the reference viewer.",
    "FortQuestObjectiveStatXPTableRow:ConditionStringGameplayTagsEditorCacheV2": "Editor only cache of the GameplayTags in the Condition string.\nThis is used for reference tracking GameplayTags in the editor, since GameplayTags in the Condition string\nare stringified so can't be found in the reference viewer.",
    "FortActorSpawner:PreviewActorComponent": "Editor only child actor component used to display a preview of what will spawn.",
    "FortBuildingActorSpawner:PreviewActorComponent": "Editor only child actor component used to display a preview of what will spawn.",
    "FortPluginActorSpawner:PreviewActorComponent": "Editor only child actor component used to display a preview of what will spawn.",
    "BuildingSMActor:BoxComponent": "Editor only component",
    "AthenaNavInvokerBox:BoxComponent": "Editor only component for range visualization",
    "FortReplicatedStatMapping:StatID": "Editor only data so that the stat is visible",
    "FortTheaterTileEditorData": "Editor only data used by theater details customization for tile editing",
    "FortCosmeticRestrictionDefinition:RestrictionName": "Editor only property used to identify restrictions more easily in debug messages",
    "BGAConsumableSpawner:SpriteComponent": "Editor only sprite component",
    "VkModuleVersionDoc:Checksum": "Editor-authoritative checksum generated at version upload time",
    "EQuestEditorGenerateBackendNameReason": "Editor-only\nDifferent types of Quest Objective BackendName update generation modes",
    "LaserGridEditorComponent": "Editor-only component to be able to add debug functionality for the laser grid actor.",
    "AIPatrolPathEditorComponent": "Editor-only component. Used to render a patrol path component's path in UEFN.",
    "BuildingActorEditorSettings": "Editor-only config properties used to customize level editor's handling of BuildingActors",
    "FortAthenaLivingWorldManager:EditorOnlyLagerConfigOverrides": "Editor-only, works the same as LagerConfigOverrides, but the references are not followed when cooking",
    "ValkyrieEditorPermissionSettings_EditorUtility:AllowedEditorUtilityActions": "EditorUtility action to allow in Utilities menu at top.",
    "ValkyrieEditorPermissionSettings_EditorUtility:AllowedEditorUtilityActorActions": "EditorUtility actor actions that EditorUtility will always consider during context menu creation",
    "ValkyrieEditorPermissionSettings_EditorUtility:AllowedEditorUtilityAssetActions": "EditorUtility asset actions that EditorUtility will always consider during context menu creation",
    "ValkyrieEditorPermissionSettings_EditorUtility:AllowedEditorUtilityWidgets": "EditorUtility widgets to allow in Utilities menu at top. Grouped by key. Widget path must also be manually added to LevelEditor tab allowlist.",
    "FortGameplayCueAOEInfo:InnerRadius": "Effect inner radius - if > 0, effect will trigger for characters other than the target of the GC.\nEffect intensity is determined by distance to GC locations:\n   if distance < InnerRadius, full effect\n   if distance > OuterRadius, no effect\n   if distance between the two, linear falloff",
    "FortGameplayCueAOEInfo:OuterRadius": "Effect outer radius - if > 0, effect will trigger for characters other than the target of the GC.\nEffect intensity is determined by distance to GC locations:\n   if distance < InnerRadius, full effect\n   if distance > OuterRadius, no effect\n   if distance between the two, linear falloff",
    "FlightParams:TailLength": "Effective distance of the tail's static surfaces from the COM. Used\n              to compute transverse velocities for stabilization torques.",
    "EFortCombatFactors.Max_None": "Effective vs Individual AI",
    "CustomCharacterPartModifier_TripleScoopBackpack_Common:BaseWheelSpeed": "Effective wheel speed at 1 cm/s",
    "FortMissionStormShield:SafeFromStormEnemyEffects": "Effects applied to the player when they are SAFE in the storm shield or safe zones",
    "FortMissionStormShield:SafeFromStormPlayerEffects": "Effects applied to the player when they are SAFE in the storm shield or safe zones. Now used by defenders as well",
    "FortMissionStormShield:InStormEnemyEffects": "Effects applied to the player when they are UNSAFE and in the storm",
    "FortMissionStormShield:InStormPlayerEffects": "Effects applied to the player when they are UNSAFE and in the storm. Now used by defenders as well",
    "FortConstructorBASE:BASEBuildingApplicationEffects": "Effects to apply on building actors that are within range",
    "FortConstructorBASE:BASEEnemyApplicationEffects": "Effects to apply on enemy characters that are within the BASE effect",
    "FortConstructorBASE:BASEFriendlyApplicationTrapEffects": "Effects to apply on friendly Traps that are within the BASE effect",
    "FortConstructorBASE:BASEFriendlyApplicationEffects": "Effects to apply on friendly characters that are within the BASE effect",
    "FortGameplayEffectDeliveryInfo:GameplayEffects": "Effects to deliver",
    "FortAIPawn:ImpactPhysicalSurfaceEffects": "Effects to play for attacks against specific surfaces",
    "FortCosmeticModification:ImpactPhysicalSurfaceEffects": "Effects to play for weapon attacks against specific surfaces",
    "FortWeapon:ImpactPhysicalSurfaceEffects": "Effects to play for weapon attacks against specific surfaces",
    "FortWeaponPickaxeDualWieldAthena:OffhandImpactPhysicalSurfaceEffects": "Effects to play for weapon attacks against specific surfaces",
    "ConversationGiftTypeDefinition:Effects": "Effects(s) that the potential recipient will have applied when acquiring this gift",
    "FortSoundLibraryPlaybackSettings:Location": "Either a relative offset from attach component or an absolute world position translated to a relative offset. (Depends on the value of Location Type)",
    "FortCurieBGA:CurieComponent": "Element component for the BGA",
    "ECurieEntityType.Element": "Element entities can cause state changes on materials or other elements during their application",
    "FortCurieExecutionParams:ElementIdentifier": "Element identifier to apply/interact with",
    "FortCurieMaterialElementIntensityDecayMultiplier:Element": "Element to modify the decay rate",
    "FortCurieToggleComponent:ActivationElements": "Elements which are allowed to activate this actor",
    "SpecialActorRepData:ElevationArrowData": "Elevation arrow data relative to the local player",
    "ElevationArrowData:ElevationDifferenceZ": "Elevation difference between the player and the object to trigger the arrow to display.",
    "EFortQuestObjectiveStatEvent.SlayWildlife": "Eliminated Wildlife that has the Pawn.Athena.NPC.Wildlife tag",
    "EUIExtensionSlot.LastKillerInfoStatus": "Eliminated screen status overlay",
    "PlaylistAccess:bForcePlaylistOff": "Emergency shutoff switch that will turn this playlist off period (will only ever be considered if in config, never calendar)",
    "MaterialCacheSettings:bDisable": "Emergency variable to disable material caching for this type",
    "FortWeap_BuildingTool:BlueprintEmissiveMaskTextures": "Emissive mask textures for the blueprint paper, based on resource",
    "FortBotPassiveHealerActivityDataTableRow:EmotePrimaryAssetId": "Emote played during passive healing",
    "FortPawnComponent_PassiveHealer:SelectedEmotePrimaryAssetId": "Emote played during passive healing",
    "FortSpecialEventEmoteData:Emotes": "Emotes that can be picked from when we trigger the special event emote using the BoundActions.",
    "FortAthenaMutator_SpecialEvent:SpecialEventEmoteData": "Emotes that can be picked from when we trigger the special event emote.",
    "RiderComponent:ExcludedEmoteTags": "Emotes with any of these tags are disabled when riding is active",
    "FortCharacterVehicle_Ostrich:ExcludedEmoteTags": "Emotes with any of these tags are disabled when the player is driving the mech",
    "EBotPOIUsageBitmask.None": "Empty",
    "FortObjectMoverInputComponent:EmptyInputComponent": "Empty Input Component. Used for quickly overriding all Creative Input without messing\n      around with the currently pushed input components",
    "FortObjectiveFilter_Land:AllowedSurfaces": "Empty means all surfaces are allowed",
    "AthenaDeveloperSettings:bLivingWorldEnabled": "Enable / Disable LivingWorld AIs",
    "AthenaDeveloperSettings:bBotsCustomizationEnabled": "Enable / Disable bots Customization and emotes.",
    "AthenaDeveloperSettings:bBotsEnabled": "Enable / Disable player bots spawning in playlist that supports player bots (Formerly 'Bots Enabled').",
    "AthenaDeveloperSettings:bAIPreloadingEnabled": "Enable / Disabled AI preloading. Decreases PIE loading time. Disabling this could cause late-loads and if you are hitting the memory budget, it will change what AI's customizations will be loaded on-demand.",
    "PickupManagementSettings:bDebugPickupManagement": "Enable additional debug output.",
    "FortAICloudVortex:bEnableVortexRingParticleSystem": "Enable additional swirly effects near the base of the tornado",
    "FortMovementComp_Character:NetworkSmoothingThrottleProxyUpdateForPawnLOD": "Enable bNetworkSkipProxyPredictionOnNetUpdate for Pawn significance LOD >= this. This setting is ignored if set to -1.",
    "FortPlayerController:bEnableVoiceChatPTT": "Enable disable voice chat push to talk",
    "FortAICloudVortex:bEnableVortexBaseParticleSystem": "Enable the leaves/debris swirling around the tornado",
    "FortGamepadAdvancedOptions:bUseLegacyControls": "Enable to use old controller behavior.  This setting is temporary.",
    "TemplateOption:bShouldMatchPreviousOption": "Enable validation to ensure that the assets in this option are the same as the assets in previous option",
    "ButterCakeUnstuckComponent:EventBPEnable": "Enable/Disable the BlueprintEvent OnBlocked when we are stuck",
    "ButterCakeUnstuckComponent:EnsureEnable": "Enable/Disable the ensure when we are stuck",
    "AIRuntimeParametersSmartObjectActivity:bEnabled": "Enable/Disable this SmartObject Activity",
    "GameFeatureSmartObjectActivityInfo:Enabled": "Enable/Disable this SmartObject Activity Info",
    "PlayspaceComponent_SpatialActorTracker:bEnableReScanTimer": "Enables a timer that will rescan the playspace based on your startup settings. This is an expensive operation if you have enabled SceneQueryOnStartup.",
    "FortAIPawn:bSupportsConvertSet": "Enables convert resistance functionality. The AI Pawn will be converted when it runs out of convert resistance.",
    "MinimapZoomBounds:bUseDynamicMinZoom": "Enables dynamic calculation of minimum zoom based on the aspect ratio",
    "AthenaCarPlayerSlot:bCanEmote": "Enables emoting from this seat",
    "AthenaCarPlayerSlot:bUseGroundMotion": "Enables ground animation options including turns. In the AnimmBP, it can use default turn animations and idles",
    "FortAthenaMutator_SafezoneBlacklist:HotfixBlacklistLocations": "Enables ini hotfixing off locations/radii which were not specified in the asset.\nThis is global for ALL instances of the mutator, and is less customizable.\nIf we consistently want a given POI disabled, perhaps we should add it to the asset.",
    "FortAthenaMutator_SafezoneBlacklist:HotfixBlacklistPoiTags": "Enables ini hotfixing off poi tags which were not specified in the asset.\nThis is global for ALL instances of the mutator, and is less customizable.\nIf we consistently want a given POI disabled, perhaps we should add it to the asset.",
    "AthenaCarPlayerSlot:bCanCarryDBNOPlayer": "Enables players carrying a DBNO player to sit in this seat",
    "FortGamepadBasicOptions:bUseAdvancedOptions": "Enables the advanced controller options.  Enabling this will disable the sensitivity presets.",
    "AthenaCarPlayerSlot:bUsePerSeatAnimInstanceOverride": "Enables the use of per seat anim instance and overlay class overrides.",
    "FortGameUserSettings:bRayTracing": "Enables/Disables Lumen hardware raytracing",
    "FortGameUserSettings:bUseNanite": "Enables/Disables Nanite",
    "FortGameUserSettings:bShowGrass": "Enables/Disables grass rendering",
    "FortGameUserSettings:bEnableDLSSFrameGeneration": "Enables/disables NVIDIA's DLSS-FG (frame generation).",
    "FortDailyRewardScheduleDefinition:EnablingToken": "Enabling token, null if no tokens required",
    "FortMovementLeans": "Encapsulate movement leans logic and data",
    "FortVolumeObjectTrackingComponent": "Encapsulating component for both the old and new object tracking system, allowing to switch between them",
    "EncounterFactionRow": "Encounter Faction Row",
    "FortAthenaMutator_Encounter:EncounterSettings": "Encounter Settings",
    "FortAthenaMutator_Bagel:DifficultyEncounterSettingsFinalPhase": "Encounter Settings for the final phase",
    "FortAthenaMutator_Bagel:DifficultyEncounterSettingsDynamic": "Encounter Settings for the moving zone",
    "FortAthenaMutator_Mash:DifficultyEncounterSettingsDynamic": "Encounter Settings for the moving zone",
    "FortAthenaMutator_Bagel:DifficultyEncounterSettingsStatic": "Encounter Settings for the non moving zone",
    "FortAthenaMutator_Mash:DifficultyEncounterSettingsStatic": "Encounter Settings for the non moving zone",
    "EncounterVariableSelectionsRow_ActorClass": "Encounter Variable Selections Actor Class Var Row",
    "EncounterVariableSelectionsRow_Boolean": "Encounter Variable Selections Boolean Var Row",
    "EncounterVariableSelectionsRow_Float": "Encounter Variable Selections Float Var Row",
    "EncounterVariableSelectionsRow_GameplayTag": "Encounter Variable Selections Gameplay Tag Var Row",
    "EncounterVariableSelectionsRow_Integer": "Encounter Variable Selections Integer Var Row",
    "EncounterVariableSelectionsRow_LWMEncounter": "Encounter Variable Selections LWM Encounter Var Row",
    "EncounterVariableSelectionsRow": "Encounter Variable Selections Row\n\n      This is a base class for encounter variable selection rows",
    "EncounterVariableSelectionsRow_TagQuery": "Encounter Variable Selections Tag Query Var Row",
    "EncounterVarRow": "Encounter Variable row",
    "LivingWorldEncounterPrefab:EncounterDefinition": "Encounter definitions to choose from (NOTE: World conditions do not work here, this property will go away or be modified at some point)",
    "EFortAIDirectorEvent.ObjectiveTakeDamage": "Encounter events",
    "FortAIPawn:EncounterInfo": "Encounter info that I belong to. // TO DO: Determine whether this needs to be a UPROPERTY at all.",
    "FortAIDirector:EncounterSequences": "Encounter sequences that are currently in use by missions",
    "FortEncounterSettingsFixedPace": "Encounter settings for specific pace type \"Fixed\"",
    "MashAISpecialEncounterData:DifficultyEncounterSettings": "Encounter settings for the Final Phase. If specified, AIBotSpawnerDataAssetId and AIBotSpawnLocationQuery will be ignored.",
    "PendingSpawnInfo:EncounterInfo": "Encounter this is part of",
    "FortAIDirector:PendingStoppedEncounters": "Encounters that are waiting to be stopped on the next tick",
    "FortAIDirector:InitialDynamicUtilities": "Encounters with free utility slots will initially fill those slots with the following utilities in order and give each a medium value.",
    "FortMinigameItemContainerComponent:EmptyFilterTags": "End ILevelSaveSpawnable Interface",
    "SafeZoneOrderOptimizeMutatorRouteDefinition:EndLocation": "End SafeZone location of the route",
    "EFortUIFeature.Max_None": "End Temp UI Feature States to unblock development while finding better generic solutions for ui feature states.",
    "FortLimitedAvailabilityBotCosmeticItemDataTableRow:EndDate": "End date to make this item unavailable",
    "FortLimitedAvailabilityBotCosmeticItemSetDataTableRow:EndDate": "End date to make this set unavailable",
    "EMatchConditionMutatorTimingType.MatchImmediate": "End match immediately when condition is satisfied",
    "EMatchConditionMutatorTimingType.MatchAtEndOfRound": "End match when the end of round is reached",
    "FortEmotePreviewActor:PreviewingEmote": "End of ICosmeticPreviewInterface interface",
    "FortPlayerParachute:IsCosmeticPreview": "End of ICosmeticPreviewInterface interface",
    "EFortQuestObjectiveStatEvent.NumGameplayEvents": "End of list of gameplay events, these are handled on the dedicated server",
    "VkProfileBuildResult_Duration:End": "End of sampling",
    "ReactorGradeGameplayCue_ChargeUp:FoundEndPoint": "End point found from our async trace.",
    "EMatchConditionMutatorTimingType.Round": "End round immediately when condition is satisfied",
    "ESpawnMachineState.OnCooldown": "Ended resurrection",
    "HeroSpecializationDesignerData:EndingRarity": "Ending rarity of hero",
    "WeaponItemDefinitionDesignerData:EndingRarity": "Ending rarity of weapons",
    "FortDamageNumbersActor:CriticalHitEnemyColor": "Enemy hit, critical.",
    "FortDamageNumbersActor:HitEnemyColor": "Enemy hit, not critical.",
    "FortAthenaMutator_Disco:GameMsg_EnemyAboutToWin": "Enemy is about to win",
    "TieredWaveSetData:EnemyTypeToKillMod": "Enemy to kill if using kill specific enemy wave rule",
    "EStimType.Touched": "Enemy was touched",
    "FortComponent_Energy:NewActiveEnergyChannels": "Energy channels that have just been added this frame.  They are guaranteed to last at least one frame, and won't\nbe removed until they've acted.  NOTE: Currently only EnergyChannels that are USING energy, not ADDING energy,\nare put in this array.  That's because we want to guarantee we don't add and then remove in the same frame and\nso dodge the energy use, but at the moment we're not concerned with exploits dodging the addition of energy.\nIf some use-case arises where it is an exploit to dodge adding energy, we can add those through this intermediary\nas well.",
    "FortComponent_Energy": "Energy is an actor component that can provide energy for use by any number of users.  You can also have any number of\nEnergy components with unique labels to be used as separate energy pools as well.  Currently this component only\nfully supports being on a pawn, but ideally we will change it to support being on a Weapon (or any other arbitrary\nactor) as well.",
    "EFortStartupPhase.InitializingEngine": "Engine has not fully initialized",
    "FortControllerComponent_PhotoMode:InputContextPtr": "Enhanced Input context for actions bound while PhotoMode is active",
    "ControllingRiderComponent:ControllingRidingInputContext": "Enhanced Input context for actions bound while riding is active",
    "RiderComponent:RidingInputContext": "Enhanced Input context for actions bound while riding is active",
    "FortScoutDroneControllingComponent:DroneInputContext": "Enhanced Input context for actions bound while the drone is active.",
    "FortAthenaMutator_Cobalt:POIList": "Enlist the POIs to consider when randomly selecting the possible storm shield locations to use for the match",
    "EFortReplenishmentType.ClampMin": "Ensure that at the start of a new zone you AT LEAST have the item at the specified quantity. DO NOT remove the item when it is no longer applicable.",
    "WaterFXData:PontoonSocketName": "Ensure the pontoon socket also exists on the static mesh, otherwise we will not play in the proper location. If no sockets, use None",
    "ENaturalSlideState.InProgress": "Entering power slide",
    "EPowerSlideState.InProgress": "Entering power slide",
    "EFortGameplayState.EnteringZone": "Entering zone from the lobby",
    "EFortTheaterType.PvP": "Entirely PvP theater, only available with pvp credentials",
    "ValkyrieEditorPermission:EntitlementId": "Entitlement ID associated with the role",
    "FortEmporiumItemData:EntityType": "Entity type (asset, asset_pack, etc)",
    "FortAthenaMutator_SafezoneBlacklist:BlacklistEntries": "Entries in the blacklist",
    "FortAthenaMutator_GG:AwardEntriesAtElimMap": "Entries we're awarding at each kill count.",
    "ReplicatedPlayPauseStopActor": "Entry for a replicated actor",
    "FireVolumesForMinigame": "Entry information for a FireVolume including its volume and fire option settings",
    "EAvailableSquadSlotsListEntryState.Simplified": "Entry is displayed in a simplified state with minimal information, usually used on non-primary entries to prevent clutter",
    "EAvailableSquadSlotsListEntryState.Detailed": "Entry is displayed with detailed information, usually used on the primary entry of the list at least",
    "EFortBuildingType": "Enum Indicating the type of building actor this is",
    "EFortTextureDataType": "Enum Indicating the type of texture swap this is",
    "ECustomFeedFilterParticipantNames": "Enum allowing control over the subset of participants who should have filtering applied to their name",
    "ETryExitVehicleBehavior": "Enum allowing more fine-grained control over how TryExitVehicle works.",
    "EEncounterMobSpawnType": "Enum class used to determine what LWM point provider type a mob LWM encounter will use",
    "ERequirementMatchPolicy": "Enum controlling the intended 'check requirement' behaviour desired by the end user",
    "EDataDrivenEffectRecipient": "Enum controlling the recipient of any effects (we could expand this later as required e.g .'all players' etc)",
    "EAthenaAIServicePOIList": "Enum corresponding to UAthenaAIServicePlayerBots POI lists",
    "ERepGraphMutatorSpatializationZoneType": "Enum corresponding to spatialization zone data structures found in UReplicationGraph and UFortReplicationGraph.\nThis gives BP a clean way to reference them, for AFortAthenaMutator_ReplicationGraph's TMaps and functions.",
    "EBattleRoyaleBPAugmentLogVerbosity": "Enum deciding if it should spawn due to source",
    "EFortGameplayCueSourceCondition": "Enum deciding if it should spawn due to source",
    "EPlateHawkInputEvents": "Enum deciding if it should spawn due to source",
    "EDialogMarkerInteractionState": "Enum defining current interaction state closest->farthest",
    "EAthenaStormCapState": "Enum defining the different states of the StormCap feature that kills players based on a cap at the current safe zone",
    "EFortAttributeDisplay": "Enum defining the different ways an attribute can be displayed",
    "EFortMutatorOverridePriority": "Enum defining the priority of the mutator when returning EFortMutatorReturnValue::Override. This allows us to have more control\nover which mutators are more important, instead of being subject to the order that the mutators are checked in.",
    "EFortMutatorReturnValue": "Enum defining the return value of a function that may/may not override functionality",
    "EFortMontageInputType": "Enum defining the way that a montage responds to input",
    "EFortRewardActivityType": "Enum defining the world record slots",
    "EUnableToLoadReason": "Enum defining why we were unable to load the level stream",
    "EUnableToUnloadReason": "Enum defining why we were unable to unload the level stream",
    "EUIKitBlockInstantTransitionState": "Enum describing Block states which are available for instant transitions",
    "EUIKitBlockVisualState": "Enum describing Block visual state",
    "EFortNumericComparisonRule": "Enum describing the available NumericComparisonRules",
    "EFortCurveRule": "Enum describing the available curve rules",
    "EFortNumericRule": "Enum describing the available numeric rules",
    "ERewardPlacementBonusType": "Enum describing the different placement types used when giving rewards at the end of the game",
    "ESupplyDropItemTrackType": "Enum describing the different ways ItemDeliveryManagement can be tracked",
    "ESupplyDropSpawnType": "Enum describing the different ways supply drops can spawn",
    "ERewardTimePlayedType": "Enum describing the different ways we can treat the \"time played\" XP we give at the end of a game",
    "TInteractionType": "Enum describing types of interactions",
    "EFortAmmoType": "Enum describing various ammo types",
    "EFortSpawnActorTime": "Enum describing when the actor will spawn",
    "EInteractionBeingAttempted": "Enum describing which interaction we're trying to do at the moment.\n      Since we can currently have two interactions on an object, like \"Use\" and \"Carry\".",
    "ESlotEnvironmentExposure": "Enum detailing a vehicle slot's relationship to environmental exposure (unknown, exposed, or protected).",
    "EChangeInStructDetected": "Enum determining whether a ChangeMonitoringStruct has changed",
    "EBagelScoreEvent": "Enum for all the scoring event types for Bagel LTM",
    "EMashScoreEvent": "Enum for all the scoring event types for mash LTM\n    Add new enums to the end to avoid mis-aligning the designer data in AFortAthenaMutator_Mash::ScoreEventList.",
    "EFortPickupSpawnSource": "Enum for containing more detailed information about the spawn of the Pickup.",
    "EFortContributionGraphElements": "Enum for debug graphing",
    "EDiscoScoreProgressTypes": "Enum for intensity sounds we want to play",
    "ETDMScoreProgressTypes": "Enum for intensity sounds we want to play",
    "EDiscoCaptureProgressState": "Enum for keeping track of the progress for who is capturing the capture point",
    "EDiscoCaptureIconState": "Enum for keeping track of the state of the individual capture point icons",
    "EDiscoCaptureUIState": "Enum for keeping track of the state of the individual capture point icons",
    "EStormSurgeThresholdType": "Enum for knowing how we are drawing the threshold",
    "EMusicTrackPlayback": "Enum for play back type.  To be expanded in the future",
    "EFortMatchmakingType": "Enum for possible types of matchmaking",
    "EBagelPhase": "Enum for the different phase of Bagel LTM",
    "EMashPhase": "Enum for the different phase of mash LTM",
    "EAIBotBuildingTemplate": "Enum for the different template that a bot can build",
    "EPlayerDamageHeightRatioDetectionType": "Enum for the different way to handle the height ratio detection value",
    "EFortEncounterSequenceResult": "Enum for the result of actions taken on the sequence such as trying to proceed to the next encounter index",
    "EFortEmporiumItemFilterMode": "Enum for the various filter types",
    "EFortEmporiumItemSortMode": "Enum for the various sort modes for Emporium items",
    "EFortLevelStreamingState": "Enum for the various states of loading a map",
    "EFortAbilityChargeState": "Enum for tracking ability charge-up state",
    "ETractorBeamState": "Enum for tractor beam weapon state",
    "EStatRecordingPeriod": "Enum of all possible recording periods",
    "ECreativeRegisteredPlayerGroups": "Enum of groups that can be used for functionality based on registering players",
    "EPlayspaceRootType": "Enum of that displays the different Root preference for the current Root Playspaces. Spawning playspaces under certain condition's may cause some\n play spaces to be generated automatically to better simulate the Playspace Tree. For example, spawning your first Playspace of Child of root should\n never allow that one to be root, so instead a root playspace of APlayspace is spawned, but will be destroyed upon any request to replace it.",
    "AthenaQuickChatLeafEntry:TeamCommType": "Enum of the callout this is associated with for HUD indicators",
    "EFortPerModeInputType": "Enum of the different \"input types\" when working with input settings on a \"per mode\" basis",
    "EBagelDifficulty": "Enum of the different difficulties available for Bagel LTM",
    "EMashDifficulty": "Enum of the different difficulties available for mash LTM",
    "EFortPlayspaceMatchmakingRules": "Enum of the different matchmaking rules that can be used when the user acceptance type is set to \"Matchmaking\"",
    "EVoteSessionState": "Enum of the different states a voting session can be in",
    "EHeistBlingIconState": "Enum of the different states the bling row of icons can be in",
    "EMinigameCaptureObjectiveIconState": "Enum of the different states the capture objectives can be in",
    "EMinigameCaptureObjectiveState": "Enum of the different states the capture objectives can be in",
    "EControlPointState": "Enum of the different states the control points can be in",
    "EHeistExitCraftIconState": "Enum of the different states the exit craft row of icons can be in (NOTE: keep this in synch with FortAthenaMutator_Heist::EHeistExitCraftState)",
    "EHeistExitCraftState": "Enum of the different states the exit crafts can be in (NOTE: keep this in synch with HeistWidgetBase::EHeistExitCraftIconState)",
    "ESurvivalObjectiveIconState": "Enum of the different states the objective row of icons can be in",
    "ERespawnUIState": "Enum of the different states the respawn UI can be in",
    "EHeistExitCraftUIState": "Enum of the different states the van UI can be in",
    "EVoteState": "Enum of the different sub-states you can be in when a vote is active. (i.e. EVoteSessionState is set to \"Voting\")",
    "EAshtonStoneType": "Enum of the different types of Stones this mode deals with",
    "EEventResponderEventType": "Enum of the different types of events that the event responder will broadcast",
    "EAthenaRespawnType": "Enum of the different types of respawning supported in athena",
    "EPlayspaceCreationType": "Enum of the different ways a Playspace can be added to the PlayspaceManager's Playspace tree structure",
    "EPlayspaceComponentCreationType": "Enum of the different ways a playspace component can be added to a playspace (mainly, deciding which playspace)",
    "EFortPlayspaceUserAcceptanceType": "Enum of the different ways a user can be accepted into a Playspace in Fortnite",
    "EAthenaRespawnLocation": "Enum of the different ways you can respawn if this is a respawning playlist",
    "EAthenaWinCondition": "Enum of the different winning conditions the game could use",
    "EAthenaScoringEvent": "Enum of the events used to determine a player's score for playlists that are based on reaching a certain score for victory",
    "ECreativeAudioPlayerTargetLocation": "Enum of the possible play locations. TODO - Consider registering non player actors?",
    "ECreativeAudioPlayerTargetListener": "Enum of the possible target listeners for the audio device to be heard by.",
    "EHabaneroTierType": "Enum of tier categories",
    "EAuxIndicatorStates": "Enum of valid auxiliary indicator visual states",
    "ECaptureAreaItemFilters": "Enum representing Item Filter Settings",
    "ECreativeClassType": "Enum representing a class type for Creative.",
    "ECreativeTeamType": "Enum representing a team type for Creative.",
    "EChatMessageOrigin": "Enum representing all message origin types",
    "ESqueegeeDataTypes": "Enum representing all the possible types of Squeegee data",
    "ESqueegeeText": "Enum representing all the use cases for squeegee texts that need to be used outside the plugin",
    "ESqueegeeWidgetInjection": "Enum representing all the use cases for squeegee widgets that need to be referenced/injected outside the plugin",
    "EObjectiveType": "Enum representing kind of objective this is",
    "EContentionRuleType": "Enum representing the capture points contention rules",
    "ECapturePointUnlockRules": "Enum representing the capture points unlock rules",
    "EStatCategory": "Enum representing the categories that replicated stats fall into",
    "ECapturePointState": "Enum representing the current capture point state",
    "ECaptureState": "Enum representing the current capture point state",
    "EPlayerCaptureKnobOptions": "Enum representing the player capture setting and the behavior it should have",
    "EWaveRules": "Enum representing the rules for a wave",
    "EAIVisibilityOptions": "Enum representing visibility checks that can be performed on a pawn",
    "EWarEffortFundingStationType": "Enum representing what type of funding we're doing",
    "EDaySequenceModifierBlendMode": "Enum specifying how to blend into and out of a UDaySequenceModifierComponent that is using a trigger volume",
    "EDayNightCycleMode": "Enum specifying how to control a day / night cycle from a modifier",
    "EStructuralFloorPosition": "Enum specifying valid floor positions",
    "EStructuralWallPosition": "Enum specifying valid wall positions",
    "EPostpartyClippingState": "Enum state to allow for 'unset' clipping setting",
    "EWithinBoundsEvaluationType": "Enum that allows a playspace to determine how it wants to evaluate bounds checks when\nan actor wants to know if it is within playspace bounds. Only relevant when a Gameplay Volume\nis attached to it the playspace.",
    "EFortBuildPreviewMarkerOptionalAdjustment": "Enum that allows us to do optional things to the build preview marker after we find out more information about placement.",
    "FortPlayerController:BuildPreviewMarkerOptionalAdjustment": "Enum that allows us to do optional things to the build preview marker after we find out more information about placement.",
    "EMissionReplyTypes": "Enum that defines the mission reply types",
    "EDBNOType": "Enum that defines the options for DBNO",
    "EFriendlyFireType": "Enum that defines the options for friendly fire",
    "EFortAIPawnGender": "Enum that defines the possible types of AI pawns",
    "EFortressAIType": "Enum that defines the possible types of AI pawns",
    "EFortTileEdgeType": "Enum that defines the possible types of edges for a tile. Lowest edge values must come first. For example, Grass Grass Grass Road is acceptable while Road Grass Grass Grass is not.",
    "ETaskObjectStateChangeType": "Enum that defines the various types of replicated state changes that can be delivered by the server for task objects",
    "EFortFactorContributionType": "Enum that denotes how a combat factor contributes to a utility",
    "EFortCreativeTeleporterEvent": "Enum that describes a teleporter event, used by clients to update VFX",
    "EVoteSessionNetworkType": "Enum that determines the kind of networking this voting session should use",
    "EMMSPrivacy": "Enum that dictates the privacy of a published island.",
    "EFortScoutDroneTargetStatus": "Enum that holds the potential states of a target",
    "EFuelTankState": "Enum that represents the fuel tank state of the widget",
    "ESkyfirePhase": "Enum that represents which skyfire phase we're in (eg, players are in the prison, players are in the placespace, etc)",
    "ECreativePlayerSpawnMethod": "Enum to allow expansion for types of spawn methods inside Creative Royale",
    "ESyncAnimBeatTo": "Enum to control where the animation is beat sycned",
    "EAssetDataUtilityToolFilterResult": "Enum to define how filters should treat an asset data",
    "EFortSidebarSocialInteractionArrow": "Enum to define the direction of the optional arrow in the sidebar social interaction button",
    "EActivityImageLoadingState": "Enum to define the state of an image",
    "EFortPlaylistTeamSizeType": "Enum to define the team size type for the playlist. We'll use this to help us understand the team size of the playlist we're currently using.",
    "FDynamicBuildOrder": "Enum to define which axis to sort the build instructions by",
    "ELobbyMissionGeneratorDetailsRequirement": "Enum to describe whether a mission generator is used in the ZoneInstanceDetails",
    "EBundleStyleColor": "Enum to determine when to start safezone gameplay",
    "ESafeZoneStartUp": "Enum to determine when to start safezone gameplay",
    "EHordeWaveStingerType": "Enum to indicate a particular stinger sound",
    "EDespawnAIType": "Enum to indicate how we despawn NPC's",
    "ELinkToDirection": "Enum to indicate the direction to perform a link to check",
    "EEventTournamentRound": "Enum to indicate what round of a tournament is being played.",
    "EEventTournamentType": "Enum to indicate where/how a tournament event is being played.",
    "EFortEncounterUtilityDesire": "Enum to represent a discretized setting of AI Utility importance to an encounter",
    "EFortWorldRecordState": "Enum to represent the different state of world save actions. The states are listed in order, but actions define the set of states that are executed",
    "EFortWorldRecordAction": "Enum to represent the different types of world save actions",
    "ESkyfireBackpackComponentYesNoExec": "Enum to return a Yes/No result as exec pins",
    "ESkyfireBackpackComponentCachedExec": "Enum to return the state of the cached data as exec pins",
    "EUpdateCustomDepthOptimDirtyFlags": "Enum to track different parts' custom depth status and update them when dirty and optimization is enabled",
    "EMissionStormShieldState": "Enum to track the various states of the shield",
    "EFortAllowCosmeticStreaming": "Enum tracking if CosmeticStreaming should be enabled or not. Distinguishes between if code is trying to turn the setting on/off\n      or if the user has specifically toggled the setting on/off in the UI. UserSet values can not be stomped by CodeSet values and will take\n      precedence.",
    "EPartyRiftPortalManagerValidityResult": "Enum used to branch out result from GetPartyRiftPortalManager",
    "EFortAthenaSmartObjectPriority": "Enum used to define a SmartObject's slot priority. Check FFortSmartObjectSlotDefinitionData::Priority for more information.",
    "EPlaylistAdvertisementType": "Enum used to describe some extra advertisement for itself",
    "EFortPawnState": "Enum used to describe the state(s) of the pawn this PlayerState is referencing\nThe pawn can be in multiple states at one time and is bit masked into an integer\nNOTE: This enum also represents the priority order that UI should use when presenting this info in the HUD",
    "ETournamentDisplayType": "Enum used to determine what information to display for a given tournament",
    "EFortBrushSize": "Enum used to identify correct brush of FFortMultiSizeBrush",
    "ESupervisedSettingsRestrictiveOrder": "Enum used to indicate what values are least/most restrictive for a supervised setting",
    "EFortAthenaSmartObjectUrgency": "Enum used to select the Movement Speed (Low, Normal, High) when the AI move to a SmartObject",
    "EVehicleFuelState": "Enum used when replicating VehicleFuelSystemState on vehicles using the vehicle fuel system. This enum is used instead of a bool so there can be an \"Unitialized\" state.",
    "EDecodeType": "Enumerates message segment types.",
    "EDisplayMode": "Enumerates message segment types.",
    "EWebCamMessageServiceSenderState": "Enumerates message segment types.",
    "EWebCameraMessageType": "Enumerates message segment types.",
    "EOnlineRegionSelection": "Enumerates online region selection modes.",
    "EFortErrorSeverity": "Enumeration different visual style on errors",
    "EFortMatchmakingViolatorStyle": "Enumeration different visual style on matchmaking violators",
    "EFortMatchmakingTileStyle": "Enumeration different visual style on on a matchmaking widget tiles",
    "EFortAnimSpeed": "Enumeration for controlling animation brevity.",
    "EFortLobbyType": "Enumeration for different lobbies",
    "EFortPhysicsObjectAwakeState": "Enumeration for whether the physics object is awake/asleep",
    "EFortPhysicsObjectImpactDamageType": "Enumeration for whether the type of impact damage being done by a physics object",
    "EFortMaterialProgressBarSectionOverflowBehavior": "Enumeration of behaviors for progress bar sections when the sum of the main sections overflow 1.f",
    "EContentInstallState": "Enumeration of chunk install states",
    "EFortUserCloudRequestResult": "Enumeration of cloud request results",
    "EFortAccountLinkingUIConfig": "Enumeration of configurable account linking UI states",
    "EFortMatchmakingPool": "Enumeration of matchmaking pools to filter servers for different platform users",
    "ECollectionBookPrimaryNavTarget": "Enumeration of navigation targets for collection book primary panel; Used to determine navigation when back is pressed",
    "ECollectionBookSectionNavTarget": "Enumeration of navigation targets for collection book; Used to determine navigation when back is pressed",
    "EHighResTexturesChangeReason": "Enumeration of possible High Resolution Textures Change Reason:\nUserGameSettings - changed in the game settings menu,\nQualityLevelSelectScreenSettings - activated in the Texture resolution screen,\nContentOnDemandFreedUpMemorySelection - changed in ContentOnDemand FreedUpMemorySelection screen,\nContentOnDemandDisplayOutOfMemory - changed in ContentOnDemand DisplayOutOfMemory screen,\nContentOnDemandOutOfMemoryErrorClosed - changed in ContentOnDemand OutOfMemoryErrorClosed screen",
    "EFortTeamAffiliation": "Enumeration of possible affiliations with a team",
    "EWorldItemDropBehavior": "Enumeration of possible behaviors for an item being dropped",
    "EFortUserCloudRequestType": "Enumeration of possible cloud requests",
    "EFortMatchmakingPrivacyConfiguration": "Enumeration of possible matchmaking privacy configurations",
    "EFortMaterialProgressBarSectionColorNumber": "Enumeration of progress bar section color numbers for gradient support",
    "EFortMaterialProgressBarSection": "Enumeration of progress bar sections supported",
    "ERegisteredPlayerUnregistrationStatus": "Enumeration of the various states a registered player can be in while advancing through the unregistration process",
    "EFortWeaponAbilityRemovalPolicy": "Enumeration outlining possible responses to a weapon being asked to remove its equipped/provided abilities",
    "ECurieEntityType": "Enumeration outlining the available Curie entity types",
    "EFortWeaponAbilityRemovalReason": "Enumeration outlining the possible reasons a weapon's equipped/provided abilities might be asked to be removed",
    "EAttributeInitLevelSource": "Enumeration outlining valid sources of determining the level to use for a building's attribute initialization",
    "EFortBaseWeaponDamage": "Enumeration representing the different types of base weapon damage",
    "EFortCurieExecutionType": "Enumeration representing the different types of executions when applying elements in Curie *",
    "EFortCurieApplicationEvent": "Enumeration representing the instances when an Application can be executed *",
    "EFortQueuedActionUserStatus": "Enumeration representing the status of a user tracking by an action for processing",
    "EHordeTierStartStatus": "Enumeration representing the status on whether a horde tier is ready to start or not",
    "EFortCurieNativeFXType": "Enumeration representing types with native custom VFX representations",
    "EBinaryToggleValues": "Enumeration representing valid values for binary toggle data",
    "EFortWeaponListRemovalBehavior": "Enumeration specifying the behavior the server should take when a weapon is removed from the pawn's current weapon list",
    "EFortSynchedActionEndMovementMode": "Enumeration specifying the movement mode we should switch to when we are done with the synched action",
    "ValkyrieEditorPermissionSettings_Blueprints:AllowedEnums": "Enums to allow",
    "FortSubmixAnalyzerData:AmplitudeData": "Envelope follower settings",
    "FortGameStateComponent_AssignedObjective:AssignedObjectiveLocationEnvQuery": "Environment Query used for finding assigned objective locations.",
    "FortGameStateComponent_RealitySapling:SaplingSpawnEnvQuery": "Environment Query used for spawning saplings.",
    "WebEnvUrl:Environment": "Environment to use",
    "FortBaseWeaponStats:EnvDmgMaxRange": "Environmental damage at ineffective max range",
    "FortBaseWeaponStats:EnvDmgLong": "Environmental damage at long range",
    "FortBaseWeaponStats:EnvDmgMid": "Environmental damage at mid range",
    "FortBaseWeaponStats:EnvDmgPB": "Environmental damage at point-blank range",
    "EQSActorSpawnerData:SpawnActorPlacementQuery": "Environmental query used at runtime to find valid locations to spawn the actor at.\n     This query can be optimized by setting a BasePlacementQuery AND making sure that the SpawnActorPlacementQuery uses a UFortQueryGenerator_MutatorBaseQueryResults generator.",
    "FortAthenaLivingWorldEventDataActorSpawnDescription:SpawnAroundEnvironmentQuery": "Environnement query used to determine dynamic spawn points around the event DefaultSpawnPoint.",
    "EFortCreativeDiscoveryDeterminism.EpicEmployee": "Epic Employees will always be entered into this cohort.",
    "EExternalAccountType.Epic_Erebus": "Epic account portal login for Erebus",
    "EExternalAccountType.Epic_Facebook": "Epic account portal login for Facebook",
    "EExternalAccountType.Epic_Google": "Epic account portal login for Google",
    "EExternalAccountType.Epic_PSN": "Epic account portal login for PSN",
    "EExternalAccountType.Epic_XBL": "Epic account portal login for XBL",
    "EExternalAccountType.Epic_Portal": "Epic account portal with all available login methods",
    "ESavedAccountType.Epic": "Epic account(email) / token",
    "ValkyrieProjectDescriptor:EpicApp": "Epic app that's required to work on the project; if empty (default) there's no epic app restriction",
    "EFortGiftWrapType.System": "Epic is giving a user an item as a makegood, scheduled challenge, etc",
    "EFortItemEntryState.CraftAndSlotTarget": "Equip slot to receive a Craft+Slot item upon creation",
    "FortAthenaMutator_PlayerAbilitiesOnGamePhase": "Equip/unequip player abilities to all participating players based on the current game phase.\n    This is a great way to give players abilities when the game proper starts.",
    "ELoginResult.FailedToCreateParty": "Error creating our party",
    "EFortErrorSeverity.Silent": "Error is logged but not shown to user",
    "EFortErrorSeverity.Blocking": "Error is modal and requires a player decision",
    "EFortErrorSeverity.SevereBlocking": "Error is severe",
    "EActivityImageLoadingState.Error": "Error loading image",
    "ELoginResult.GenericError": "Error occurred during login process",
    "ELoginResult.RegisterSecondaryPlayerInPrimaryPartyFailed": "Error ocurred when secondary player can't join primary player's party",
    "EValkyrieValidationErrorCode.InvalidBinaryPackageFormat": "Error processing a binary package format",
    "EValkyrieValidationErrorCode.InvalidVerseFile": "Error processing verse file",
    "EValkyrieValidationErrorCode.InvalidVerseModule": "Error processing verse module",
    "EFortErrorSeverity.Passive": "Error should be shown to user but not block input",
    "ContentBeaconError:DebugString": "ErrorMessage non localized but can show in logs",
    "EFortSessionHelperJoinResult.ReservationFailure_PartyLimitReached": "Errors possible from the beacons",
    "EFortSessionHelperJoinResult.JoinSessionFailure_SessionIsFull": "Errors possible from the session interface",
    "FortExposedContentValidatedPackage:PackageErrors": "Errors reported from validating this package",
    "FortExposedContentValidatePackagesResult:GeneralErrors": "Errors reported that aren't tied to a specific package",
    "KairosSubmitLogOptions:SubmitErrors": "Errors to whitelist submitting.  If empty then all errors are submitted",
    "FortGameFeatureSize:DownloadSize": "Estimated size of data that needs to be downloaded to install the feature",
    "FortGameFeatureSizeDetailed:DownloadSize": "Estimated size of data that needs to be downloaded to install the feature",
    "FortGameFeatureSize:InstallSize": "Estimated size on disk needed to install the feature",
    "FortGameFeatureSizeDetailed:InstallOverheadSize": "Estimated size on disk needed to install the feature",
    "FortGameFeatureSizeDetailed:InstallSize": "Estimated size on disk needed to install the feature",
    "EFortPowerRatingComparison": "EvaluateJoinRequestPowerRating() now returns more detailed information instead of a simple boolean.",
    "FortAthenaMutator_DadBro:HideSafeZoneCircles": "Evaluates to either true (non-zero) or false (zero).\nIf enabled, will prevent the safe zone circles from being drawn to the map.",
    "FortAthenaMutator_DadBro:OverrideTimeOfDay": "Evaluates to either true (non-zero) or false (zero).\nWhether the time of day should be overridden when DadBro is active.",
    "InteriorAudioDictionaryEntry:ConditionalEvaluation": "Evaluation to fall back to in the event that a constraint condition isn't met",
    "EFocusingBehavior": "Evaluator responsible to tell the bot what to look at by setting up the focus actor or focal point in the blackboard.",
    "DigestedEvasiveManeuverSkillSettingsSpecialization:EvasiveManeuverSkillSettings": "EvasiveManeuver skill settings for this specialization",
    "EvasiveManeuverSkillSettingsSpecialization:EvasiveManeuverSkillSettings": "EvasiveManeuver skill settings for this specialization",
    "FortWeapon:bUseWeaponTraceForReticle": "Even if we use the projectile trace for the weapon, we might want to use the weapon trace for the reticle (like the hook gun)",
    "SphericalDriveParams:MaxInclineDeg": "Even with traction, the drive force will cut out when trying to oppose\n              an incline steeper than this.",
    "ERespawnAndSpectateClientEventId": "Event Ids that can be used to signal to the client when a mutator client event is received",
    "EFortAthenaLivingWorldEventRuntimeDeactivationReason.CalendarEvent": "Event Random Activation chance is not 100% and the event has been disabled for this match",
    "LeaderboardEntry:LeaderboardId": "Event Service id of the leaderboard",
    "FortLivingWorldEventTableVariation:EventTableVariation": "Event Table for this variation.",
    "FortAthenaMutator_SpecialEvent:EventAircraftClass": "Event aircraft class",
    "LockedQuestRuntimeData:EventName": "Event associated with the source quest or bundle.",
    "CreativeEditOnlyMeshComponent:OnMeshAndMaterialsLoaded": "Event broadcast when the mesh and materials have been fully loaded and applied.",
    "SBMusicalTargetsTimerComponent:OnCueClearedEvent": "Event called when a cue's progress is complete (Cue's beat + ProgressOverrun)",
    "OnFortScoutDroneFinishedLongInteract": "Event called when drone finished long-interacting",
    "FortBattleRoyaleGamePhaseLogicComponentReadyEvent": "Event called when the BR game phase logic component is ready",
    "FortGamePhaseUpdatedEvent": "Event called when the game phase is updated",
    "FortCreativeStormShieldGamePhaseStepUpdatedEvent": "Event called when the game phase step is updated",
    "FortGamePhaseStepUpdatedEvent": "Event called when the game phase step is updated",
    "FortPawnPossessed": "Event called when the pawn is possessed",
    "FortPawnUnpossessed": "Event called when the pawn is unpossessed",
    "FortSafeZoneDamageUpdatedEvent": "Event called when the safe zone damage is updated",
    "FortSafeZoneIndicatorUpdatedEvent": "Event called when the safe zone indicator is updated",
    "FortSafeZonePhaseCountUpdatedEvent": "Event called when the safe zone phase count is updated",
    "FortSafeZonePhaseUpdatedEvent": "Event called when the safe zone phase is updated",
    "FortStormCapStateUpdatedEvent": "Event called when the storm cap state is updated",
    "FortStormProgressUpdatedEvent": "Event called when the storm progress is updated",
    "FortWarmupCountdownEndTimeUpdatedEvent": "Event called when the warmup countdown end time is updated",
    "BuildingLayoutRequirement:OnLayoutSatisfied": "Event called whenever LayoutRequirement is \"Activated\" and a matching BuildingSMActor is built satisfying its\ncondition (OR already exists at the moment of activation).",
    "BuildingLayoutRequirement:OnLayoutUnSatisfied": "Event called whenever an \"Activated\" LayoutRequirement that had previous been satisfied becomes \"unsatisfied\"\n(due to the satisfying building actor dying).",
    "GasDebuggerMenu:EventHistoryClassFilterFlags": "Event class type (EAbilityHistoryClassType) filter as flags where each flag is (1<<EAbilityHistoryClassType::FlagValue)",
    "FortCalendarEventInventoryTransformData:EventCurrency": "Event currency",
    "ScriptedObjectMovement_StaticPath:OrderedCalendarEventPointGroups": "Event data derived from reading the spline during gameplay.",
    "GameplayEventDefinition": "Event definition defined on the CDO/archetypes.",
    "FortGameplayTriggerMessageComponent:EventDescriptor": "Event descriptor to broadcast when sending on this channel.",
    "FortControllerComponent_VictoryCrowns:OnHasWonRoyalRoyale": "Event fired on Clients Only when this player won match as royal royale",
    "FortControllerComponent_VictoryCrowns:OnHasWonCrownInMatch": "Event fired on Clients Only when this player won match with crown",
    "FortWeapon:OnReticleColorChanged": "Event fired when the reticle color has changed",
    "FortAIController:OnPawnKilledEvent": "Event fired when this AI kills a FortPawn",
    "FabricInteractionTool:OnMetasoundGeneratorCrossfadeStarted": "Event fires when this FIT receives a message that there is a new Metasound generator created and a crossfade has started",
    "FabricInteractionTool:OnCablesDropped": "Event fires whenever any number of cables have been dropped and none are now held.",
    "FabricInteractionTool:OnCablesGrabbed": "Event fires whenever one or more cables are newly held or swapped in.",
    "FortRequirementsInfo:EventFlag": "Event flag that must be active",
    "EventDependentTag:RequiredEventFlag": "Event flag to check for. If it is not active, we ignore the related tag.",
    "FortControllerComponent_EliminationFeed:OnEliminationFeedMessageRecieved": "Event for communicating to BPs when a message is received on a client. *",
    "FortGameplayReceiverMessageComponent:EventFunction": "Event function to call when receiving on this channel.",
    "GameplayEventHandlerFunction": "Event handler function.\nReferences an function to be called when an event is received.",
    "GameplayFeedbackEventInfo:FriendlyEventMessages": "Event messages to use when the event affiliation relative to the local play is \"Friendly\"",
    "GameplayFeedbackEventInfo:HostileEventMessages": "Event messages to use when the event affiliation relative to the local play is \"Hostile\"",
    "GameplayFeedbackEventInfo:NeutralEventMessages": "Event messages to use when the event affiliation relative to the local play is \"Neutral\" (or when the event doesn't care about team affiliations)",
    "FortPawnComponent_Convert:OnHideConvertedIndicator": "Event sent on HideIndicatorMarker execution.",
    "FortPawnComponent_Convert:OnShowConvertedIndicator": "Event sent on ShowIndicatorMarker execution.",
    "FortPawnComponent_Convert:OnConvertEvent": "Event sent on converted pawn component converting another pawn.",
    "FortPawnComponent_Convert:OnUnconvertEvent": "Event sent on converted pawn component unconverting another pawn.",
    "FortPawnComponent_Convert:OnConvertedEvent": "Event sent on converted pawn component when being converted (fired client & server)",
    "FortPawnComponent_Convert:OnUnconvertedEvent": "Event sent on converted pawn component when being unconverted (fired client & server)",
    "FortPawnComponent_SpeechBubble:SpeechBubbleHide": "Event sent to request to hide the speech bubble (Managed by the UI Widget)",
    "FortPawnComponent_SpeechBubble:SpeechBubbleShow": "Event sent to request to show the speech bubble (Managed by the UI Widget)",
    "FortPawnComponent_Convert:OnPingCommandEvent": "Event sent when a ping command is sent.",
    "FortAthenaMutator_Skyfire:OnPlayerEnteredMainMap": "Event sent when player has entered the main map.",
    "FortAthenaMutator_Skyfire:OnSecurityOrbsSpawned": "Event sent when we add Security Orbs to the playspace.",
    "FortAthenaMutator_Skyfire:OnTimeOrbsSpawned": "Event sent when we add Time Orbs to the playspace.",
    "GameplayEventSubscription": "Event subscription, to be connected to the source via data binding at runtime.\nReferences an event source and the event it may emit (see FGameplayEventDescriptor).",
    "FortAthenaLivingWorldEncounterStage:EventTable": "Event table that will be use to spawn Actor during this stages.",
    "FortObjectiveFilter_PlayerRevealed:TrackingTypeTags": "Event tags that are relevant to how the marking was done, including things like the tags on the weapon that was used to do the marking.",
    "EFortMantisNotifyEvent.Branch": "Event that enables branching to any valid technique.",
    "EFortMantisNotifyEvent.EndTechnique": "Event that ends the technique.",
    "FortWeapon:OnConsumeAmmo": "Event that fires on consume ammo",
    "FortPlayerControllerGameplay:OnDBNOCarryPlayerChanged": "Event that fires when a player carryies or drops a DBNO player",
    "FortPlayerControllerGameplay:OnBalloonMovementChanged": "Event that fires when a player enters/exits balloon movement",
    "FortPlayerControllerGameplay:OnGhostModeChanged": "Event that fires when a player enters/exits ghost mode",
    "FortLinkToActorComponent:OnLinkedActorConnected": "Event that fires when an actor is linked",
    "FortLinkToActorComponent:OnLinkedActorDisconnected": "Event that fires when an actor is unlinked",
    "FortLinkToActorComponent:OnLinkedActorDestroyed": "Event that fires when the actor linked to has been destroyed",
    "FortLinkToActorComponent:OnLinkedPhysicsObjectWake": "Event that fires when the actor linked to moved",
    "FortGameStateAthena:OnClientVolumeManagerReplicated": "Event that fires when the volume manager is replicated",
    "EEventResponderEventType.OneShotEvent": "Event that is triggered in a \"fire and forget\" way",
    "EEventResponderEventType.PersistentEventJoinInProgress": "Event that is triggered when a this event is previously active before this server or client has joined, active until \"PersistentEventEnd\" occurs",
    "EEventResponderEventType.PersistentEventEnd": "Event that is triggered when ending a state that was made active by a \"PersistentEventStart\"",
    "EEventResponderEventType.PersistentEventStart": "Event that is triggered when starting a state that remains active until a \"PersistentEventEnd\" occurs",
    "TempestMovementComponent:OnTempestMovementStuck": "Event that is triggered when the owning actor's movement is stuck",
    "TempestMovementComponent:OnTempestSafeZoneStateChanged": "Event that is triggered when the owning actor's safe zone state changes",
    "FortPlayerControllerZone:OnStartedRespawn": "Event that is triggered when this player dies if that player is set-up to respawn.",
    "EEventResponderEventType.PersistentEventChange": "Event that is triggered when updating the parameters of a state that was made active by a \"PersistentEventStart\"",
    "FortWeapon:OnWeaponRateOfFireChanged": "Event to bind to when weapon rate of fire is changed by the server",
    "FortGameStateZone:OnCompletionResultEvent": "Event to fire on client when CompletionResult has been updated",
    "FortMinigame:OnPostGameResetUI": "Event to request UI cleanup when we fade after PostGame",
    "FortVolumeObjectTrackingComponent:OnVolumePerformanceMetricsUpdatedEvent": "Event to subscribe to in order to get updates when performance metrics for this Component's owner have changed",
    "FortAthenaMutator_MusicEvents:MatchEndLoseEvent": "Event to trigger if the player/team lost at match end.",
    "FortAthenaMutator_MusicEvents:MatchEndWinEvent": "Event to trigger if the player/team won at match end.",
    "EncounterManagerComponent:PostEncounterLWMEvent": "Event to use for mobs after the encounter shuts down *",
    "FortGameplayEventReference": "Event type capable of referencing event functions or descriptors",
    "EKeepPlayingTogetherAnalyticEventPhase.TimedOut": "Event was triggered because the countdown phase finished and they were automatically opted out.",
    "EKeepPlayingTogetherAnalyticEventPhase.PrePostGamePhase": "Event was triggered before post game started.",
    "EKeepPlayingTogetherAnalyticEventPhase.Countdown": "Event was triggered during the countdown phase.",
    "EKeepPlayingTogetherAnalyticEventPhase.AllSquadMembersVoted": "Event was triggered when all members voted.",
    "FortWaterInteractionComponent:OnEnterWaterEvent": "Event when an actor enters the water.",
    "FortWaterInteractionComponent:OnExitWaterEvent": "Event when an actor exits the water.",
    "EFortSwimmingAudioType.NormalDBNO": "Event when swinging pickaxe",
    "EGameplayEventNetPolicy.ClientOrServer": "Events can be bound and broadcast on both the client and server.",
    "EGameplayEventNetPolicy.ServerOnly": "Events can only be bound and broadcast on the server (determined by whether the RouterContextActor has authority).",
    "FortAthenaMutator_SynchronizedTeleport:EventsToSendOnTeleport": "Events that need to be triggered on teleport to do things like force players out of hiding",
    "LootTableSource": "Eventually this will represent the raw loot table data from a single xls source.",
    "FortPlacementActorFinderInfo:DistanceRangeMin": "Every spawned actor must be at least this far away from all other actors to spawn",
    "FortPlacementDistanceRequirements:DistanceRangeMin": "Every spawned actor must be at least this far away from all other actors to spawn",
    "FortPlacementActorFinderInfo:DistanceRangeMax": "Every spawned actor must be no farther than this far away from all other actors to spawn",
    "FortPlacementDistanceRequirements:DistanceRangeMax": "Every spawned actor must be no farther than this far away from all other actors to spawn",
    "BulletWhipTrackerData:PreviousPlaneDotProd": "Everything below doesn't need to be configured and instead can be calculated per instanced as opposed to cached.",
    "TrapItemDefintionDesignerData:ConversionRecipeForm": "Evolution recipe row name",
    "HeroSpecializationDesignerData:ConversionRecipes": "Evolution recipes",
    "CatalogDownload:Expiration": "Exact time this catalog should be considered expired",
    "FortMcpCollectedItemProperties:VariantTag": "Exact variant of collectable collected",
    "FabricStepSequencerGridComponent:SingleTrackNumItemsPerRow": "Example: DrumSequencer would have 4, in 4x4 setup",
    "FactionData:RelationExceptions": "Exception to attitude to apply between this faction and others (relations are symmetrical)",
    "FortTargetFilter:bExcludeRequester": "Exclude 'RequestedBy Actor",
    "FortTargetFilter:bExcludeInstigator": "Exclude 'RequestedBy->Instigator' Actor",
    "FortTargetFilter:bExcludeAllAttachedToRequester": "Exclude all actors attached to 'RequestedBy Actor",
    "FortTargetFilter:bExcludeAllAttachedToInstigator": "Exclude all actors attached to 'RequestedBy->Instigator' Actor",
    "FortTargetFilter:bExcludeTargetsInEditMode": "Exclude all actors in Edit Mode (covers Creative or VK)",
    "FortTargetFilter:bExcludeNonBGABuildings": "Exclude all buildings, aside from BuildingGameplayActors",
    "FortTargetFilter:bExcludePawnNeutrals": "Exclude all pawns that are considered neutral towards the instigator. Neutral pawns are considered like enemies by default since they can take damage by non-friendly actors.",
    "FortBulkFindAndReplaceAssetFilter:IgnoreClasses": "Exclude assets of any of the given classes (exact matches - i.e. assets of inherited classes will not be excluded)",
    "FortBulkFindAndReplaceAssetFilter:ExcludePathsContaining": "Exclude assets with any of these strings in any part of their path",
    "FortTargetFilter:bExcludeLandscape": "Exclude landscape from the filter",
    "FortQuestObjectiveStatXPTableRow:ExcludeSourceTags": "Exclude on SourceTag information.  All these tags MUST be MISSING in order for the stat to fire.",
    "FortQuestObjectiveStatXPTableRow:ExcludeTargetTags": "Exclude on TargetTag information.  All these tags MUST be MISSING in order for the stat to fire.",
    "FortQuestObjectiveStatXPTableRow:ExcludeContextTags": "Exclude on context information.  All these tags MUST be MISSING in order for the stat to fire.",
    "FortTargetFilter:bExcludeProjectiles": "Exclude projectiles from the filter",
    "WrapPreviewGridActor:bExcludePrototypeRangedWeapons": "Exclude weapons that have a 'Future' Release Version.",
    "FortAbilityTargetSelection:bExcludeObstructedByWorld": "Exclude when raycast in world geometry is obstructed",
    "FortTargetFilter:bExcludeWithoutNavigationCorridor": "Exclude when there is no straight line connection on navmesh",
    "FortGameplayDataTrackerActorStateGroupConfig:StateConfigs": "Exclusive states. Also used as events",
    "EPersistenceFrameworkExecutionOption": "Execution options for a action queue. Passed at the start of execution.",
    "EFortScriptedActionEnvironment.GameClient": "Exists on the client in game",
    "EFortScriptedActionEnvironment.GameServer": "Exists on the server in game",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:ExitCraftSpawnData": "Exit craft spawn data",
    "FortAthenaMutator_Heist:RemainingExitCraftSpawnIndexes": "Exit craft spawn indexes remaining for use",
    "EUIExtensionSlot.ExpMobile": "Exp stacking in the middle of the screen",
    "FortPlayerScoreReport:InitialExperienceAmount": "Exp the player started at IN DISPLAY XP from InitialLevel",
    "FortTaggedDeployableBasePlotExpansionUnlock:CellExpansionVector": "Expansion amount in terms of grid cells",
    "FBattlePassLandingPageButtonDisplayBehavior": "Expected display behavior type for this button, used for specific expected behaviours of different LandingPageButtons",
    "FortVehicleAudioVoice:ParamRange": "Expected range (clamped) of input parameter",
    "FortLayeredAudioFloatParam:ParamRange": "Expected range of parameter, defaults to normalized",
    "FortAIDirector:BaseLootDropData": "Expects rows of type FFortAIBaseLootDropRow",
    "FortAIDirector:LootDropModifiers": "Expects rows of type FFortAILootDropModifierRow",
    "FortAILootDropModifiers:LootDropModifierRows": "Expects rows of type FFortAILootDropModifierRow",
    "EFortItemType.Expedition": "Expedition account items",
    "FortPlayerPawnStats:SprintingStaminaExpenditureRate": "Expenditure rate for player stamina while sprinting",
    "FortWorldMultiItemInfo:RequiredXPForNextLevel": "Experience (\"XP\") required to evolve to the next level of this weapon.This value will be stored in the weapon's\npickup when dropped so it can be maintained.  NOTE: This value is set via blueprint, and can actually be\nanything, i.e. number of kills, damage dealt, etc.",
    "FortAvailableMissionAlertData:AvailableUntil": "Expiration time for this mission. This will generally either be NextRefresh or MAX. It can change after a refresh.",
    "FortAvailableMissionAlertData:RefreshSpreadAt": "Expiration time for this mission. This will generally either be NextRefresh or MAX. It can change after a refresh.",
    "FortAvailableMissionData:AvailableUntil": "Expiration time for this mission. This will generally either be NextRefresh or MAX. It can change after a refresh.",
    "FortTransientQuestGrant:ExpirationTime": "Expiration time for this quest",
    "GameDifficultyInfo:Difficulty": "Explicit difficulty of the zone",
    "CatalogOfferDefinition:InlineFulfillment": "Explicit items to grant when fulfilling this offer.",
    "GrantPackage:ItemGrants": "Explicit items to grant when fulfilling this package.",
    "FortMcpQuestObjectiveInfo:Stage": "Explicit stage of this quest, -1 means the objective can be completed at any time",
    "EDynamicDestructionResourceType.Unused_5": "Explicitly adding some unused entries so FX can test with new types if they want to",
    "EFortGameFeatureState.Uninstalling": "Explicitly have requested to uninstall data and it is not yet finished uninstalling",
    "EFortGameFeatureState.UninstallFailled": "Explicitly requested to uninstall data and that had an error during uninstall",
    "EFortGameFeatureState.Uninstalled": "Explicitly requested to uninstall data and that has finished",
    "EFortGameFeatureState.Unavailable": "Explicitly set to unavailable",
    "EPerceptionSoundType.Explosion": "Explosion",
    "WindSplineComponent:InwardForceSteeringReduceDecelerationPower": "Exponent applied to dot product of tangent and steer direction to reduce deceleration within inward force zone.\nLarger = steering overcomes magnet faster.",
    "FortSkyTube:SteeringReduceDecelerationPower": "Exponent applied to dot product of tangent and steer direction to reduce deceleration within magnet zone.\nLarger = steering overcomes magnet faster.",
    "WindSplineComponent:InwardForceSteeringReduceAccelerationPower": "Exponent applied to dot product of tangent and steer direction to reduce inward force acceleration.\nLarger = steering overcomes magnet faster.",
    "FortSkyTube:SteeringReduceAccelerationPower": "Exponent applied to dot product of tangent and steer direction to reduce magnet acceleration.\nLarger = steering overcomes magnet faster.",
    "PhysicsMagneticForceData:FallOffExponent": "Exponent for distance based falloff calculations",
    "FortAimAssist2D_Settings:PullLerpOutRate": "Exponential interpolation rate used to ramp down the pull strength.  Set to '0' to disable.",
    "FortAimAssist2D_Settings:SlowLerpOutRate": "Exponential interpolation rate used to ramp down the slow strength.  Set to '0' to disable.",
    "FortAimAssist2D_Settings:PullLerpInRate": "Exponential interpolation rate used to ramp up the pull strength.  Set to '0' to disable.",
    "FortAimAssist2D_Settings:SlowLerpInRate": "Exponential interpolation rate used to ramp up the slow strength.  Set to '0' to disable.",
    "FortTeamInfoAthena": "Export this class so that plugins are able to access AFortTeamInfoAthena.",
    "PropertyOverride:PropertyData": "Exported property value text; used when applying property overrides on clients",
    "PropertyOverrideMk2:DefaultPropertyData": "Exported property value text; used when applying property overrides on clients",
    "PropertyOverrideMk2:PropertyData": "Exported property value text; used when applying property overrides on clients",
    "PropertyOverrideRepl:PropertyData": "Exported property value text; used when applying property overrides on clients",
    "FortCreativePersistenceComponentBase": "Expose some basic persistence functionality to blueprint.\nThis component is intended to be used with devices.\nUFortCreativePersistenceComponentBase::InitializePersistenceComponent needs to be called before using this component functionality.",
    "BattleMapPawnLive:GroundMoveNodeClass": "Exposed Data\nMovement Classes",
    "BattleMapPawnReplay:GroundMoveNodeClass": "Exposed Data\nMovement Classes",
    "BattleMapEdge:CustomMaterialsPerPlayerIndex": "Exposed Properties",
    "BattleMapNode:EdgeClass": "Exposed Properties",
    "FortExperienceSettingsComponent": "Exposes Shared Setting Override bindings for Experience Settings and associated mutators",
    "FortActorOptionsComponent": "Exposes player-tweakable knobs that can be applied against the component's owning Actor",
    "FortUserOptionContainerComponent": "Exposes user-tweakable knobs that can be applied against the component",
    "FortQuestObjectiveStat:Condition": "Expression that is checked after the tag filter. This is expensive to evaluate!",
    "FortQuestObjectiveStatTableRow:Condition": "Expression that is checked after the tag filter. This is expensive to evaluate!",
    "FortQuestObjectiveStatXPTableRow:Condition": "Expression that is checked after the tag filter. This is expensive to evaluate!",
    "FortGameFrameworkComponent_EventMode:TaggedUIExtensions": "Extend the UI in new ways for the Event Mode.",
    "FortGameFrameworkComponent_EventMode:UIExtensions": "Extend the UI in new ways for the Event Mode.",
    "FortMinigame:UIExtensions": "Extend the UI in new ways for this playlist.",
    "VkExtendedErrorInformation": "Extended error information relating to an erroring ticket id",
    "FortAthenaTrackableAIObjectVehicleComponent": "Extended version of UFortAthenaTrackableAIObjectComponent that is supposed to be added to FortAthenaVehicle.\nThis automatically detects when a vehicle is moving and removes it from the object tracker.",
    "FortAINearbyActorsPerceptionComponent": "Extended version of UFortNearbyActorsPerceptionComponent that should be used on AIs.\n\nIf a UFortAthenaAILODComponent exists on the owner of this component, it will also be used to degrade quality and improve performance based on the server LOD",
    "FortActorComponent_FortInteractExtension": "Extension component (usually added dynamically) used to extend the FortInteract users with extra features and avoid bloating those users with data that they might not need.\nNote: at the writing of this component only BuildingActor supports this extension, but it should be trivial to add support to other FortInteract implementers.",
    "FortAthenaAICoverComponent:CoverBoxExtent": "Extent of the box to find cover positions",
    "FortAthenaAIBotController:LeashGameplayVolumeProjectExtent": "Extent use to project the generated point on the navmesh when using the LeashGameplayVolume.",
    "FortAthenaAILeashVolume:ProjectExtent": "Extent use to project the generated point on the navmesh.",
    "FabricSequencerSustainComponent:GridSquareExtents": "Extents of the grid square mesh",
    "ELoginResult.ExternalAuth_AddedAuthAssociation": "External auth association added to account",
    "OnlineAccountTexts:LoggingInExternalAuth": "External auth messaging",
    "FortGrindRail:HeadConnectedRail": "External rail connected at index 0",
    "FortGrindRail:TailConnectedRail": "External rail connected at the last index of this rail",
    "FortVehiclePontoonsComponent:ExtraBuoyancyData": "Extra buoyancy data to extend from the pontoons. The key should match the Pontoon Center Socket Name.",
    "DigestedFiringPattern:FiringPatternHysteresis": "Extra distance to add to a firing pattern to stick with it a little longer.",
    "FiringPattern:FiringPatternHysteresis": "Extra distance to add to a firing pattern to stick with it a little longer.",
    "FortGravityGunHolder:TrajectorySplineExtraIgnoreActors": "Extra ignore actors when calculating the trajectory spline using CalculateProjectileTrajectorySplineWithHit.",
    "FortNevadaVehicle:TractorBeamExtraLengthForExtents": "Extra length to account for large objects",
    "FortAICloudVortex:BasePSOffset": "Extra offset for the base particle effect",
    "FortAthenaAICoverComponent:CoverOffset": "Extra offset from cover position",
    "FortScoutDronePickupManager:DBNOPawnOffset": "Extra offset to be applied to a DBNO Pawn when picked up",
    "FortScoutDronePickupManager:ItemOffset": "Extra offset to be applied to all Items when picked up",
    "BuildingActorClassData:BuildingTargetingDataOverride": "Extra options that can be overridden to tweak this building's targeting information. This includes when to display building info like health.",
    "FortGameStateZone:DifficultyIncreaseRewards": "Extra rewards for the difficulty increase tiers",
    "EFortTextureDataType.Shingle": "Extra roof texture",
    "FortItemPreviewActor:UserRotationComponent": "Extra root component to insert, so Child class logic can spin the ItemPreviewRootComponent if needed, like in MultiAngleActor,\nand the user can spin the displayed item",
    "FortAthenaMutator_Uranium:MatchTimeAddedPerCheckpoint": "Extra time (in seconds) given to the pusher team to complete their objective after hitting a check-point",
    "FortProjectileMovementComponent_FloorSnapped:CorrectionUpSpeed": "Extra up speed to apply when considered stuck",
    "EFortMantisTechniqueRootMotionType.ExtractFromMontageAndWarp": "Extract root motion from the technique montage and potentially warp it to a target actor or location.",
    "FortRootMotionSource_Montage": "Extracts root motion from animation, acting as a replacement for AnimRootMotion\nThis is very similar to FFortRootMotionSource_Mantis but uses Motion Warping plugin for warping and 'ExtractTime' is not externally controlled in Local Client and Server.\n@TODO: Eventually we should unify those two but keeping it separately from now to avoid breaking and/or having to update Mantis content\n\n@NOTE: MotionWarpingComp is not directly used because it works on ActiveRootMotionMontage. This is gonna be addressed in the Motion Warping plugin in the future",
    "AILootInfoRowEntry": "FAILootInfoRowEntry\nStruct to be used within FFortAthenaAILootInfoDataTableRow. Should it drop inventory, loot tables, etc.",
    "AIRuntimeParametersSmartObjectActivity": "FAIRuntimeParametersSmartObjectActivity\nPair of Activity Condition and Activity Config",
    "AIRuntimeParametersSmartObjectActivityCondition": "FAIRuntimeParametersSmartObjectActivityCondition\nStruct to wrap the Condition to find a ActivityConfig",
    "AIRuntimeParametersSmartObjectActivityConfig": "FAIRuntimeParametersSmartObjectActivityConfig\nDetails and configuration of SmartObject Activity",
    "AthenaAIServiceGroupInfo": "FAthenaAIServiceGroupInfo : detail of a AI Group (Member, Leader, ID)",
    "AudioAnalysisEnvelopeFollowerData": "FAudioAnalysisEnvelopeFollowerSettings - Configuration for envelope follower delegates",
    "AudioAnalysisParamHistory": "FAudioAnalysisParamHistory - Used to capture and store the analysis values for both Scalar and Vector parameters",
    "AudioAnalysisParameterBase": "FAudioAnalysisParameterBase - Used as a mechanism for routing analysis data into a parameter collection",
    "AudioAnalysisParameterScalar": "FAudioAnalysisParameterScalar",
    "AudioAnalysisParameterVector": "FAudioAnalysisParameterVector",
    "AudioAnalysisSpectralAnalysisData": "FAudioAnalysisSpectralAnalysisSettings - Configuration for spectral analysis delegates",
    "BouncyChassisSetup": "FBouncyChassisSetup_RL\nSettings for the bouncy chassis box spring and how that spring's values convert to pitch, yaw, and translation of the body.",
    "BouncyChassisState": "FBouncyChassisState_RL\nOutput of the box spring converted to the pitch, roll, and translation of the body.",
    "FortProjectPlayComponent:EstimatedGameplayBounds": "FBox that represents the approximate bounds of the experiences based on what we decide is most relevent from the project load flow.",
    "CarryOverPlayerAugmentPersistenceData": "FCarryOverPlayerAugmentPersistenceData\nA single player augment carried between matches. The source game mode is also stored to allow filtering augments\nearned in different game modes. A related struct, FCarryOverPlayerAugment, is manipulated in blueprint.",
    "ClothControllerClothParameterMap": "FClothControllerClothParameterMap\n\nWrapper for a TMap of FNames to FClothParameters. The wrapper lets us define\ndefault map elements and seems to have a lower performance cost that a plain\nTMap when used in blueprints (only tested this in PIE).",
    "ClothControllerWindParameterMap": "FClothControllerWindParameterMap\n\nWrapper for a TMap of FNames to FWindGustParameters. The wrapper lets us define\ndefault map elements and seems to have a lower performance cost that a plain\nTMap when used in blueprints (only tested this in PIE).",
    "CobaltCombatStormShieldDataEntry": "FCobaltCombatStormShieldDataEntry struct ideally holds information that could get replicated to the client for client side logic or display, especially for UI implementations.",
    "CosmeticLoadoutPartyReplState": "FCosmeticLoadoutPartyReplState is the stored representation of what cosmetic items are currently\nequipped on a party members account.\n\n@fixme: Currently only used by BR, but this should be moved to a more logically shared location\nwhen StW makes use of it.",
    "CosmeticOverrideData": "FCosmeticOverrideData",
    "HarmonixAnalyzerEffectResults:FftLevels": "FFT",
    "KnockbackMutatorDataArray": "FFastArraySerializer array of FKnockbackMutatorData",
    "FireModeData": "FFireModeData",
    "FortAIRuntimePerkInfo": "FFortAIRuntimePerkInfo\nRuntime struct that store all the information needed at runtime for a perk : cooldown, associated perk data, etc.",
    "FortAIRuntimePerkInfo_EvasiveManeuvers": "FFortAIRuntimePerkInfo\nRuntime struct that store all the information needed at runtime for a perk : cooldown, associated perk data, etc.",
    "FortAimAssist2D": "FFortAimAssist2D",
    "FortAimAssist2D_History": "FFortAimAssist2D_History",
    "FortAimAssist2D_HistorySample": "FFortAimAssist2D_HistorySample",
    "FortAimAssist2D_OwnerInfo": "FFortAimAssist2D_OwnerInfo",
    "FortAimAssist2D_Settings": "FFortAimAssist2D_Settings",
    "FortAimAssist2D_Target": "FFortAimAssist2D_Target",
    "FortAthenaAIFormationSlotRuntime": "FFortAthenaAIFormationSlotRuntime: Slot runtime info",
    "FortAthenaAILootInfoDataTableRow": "FFortAthenaAILootInfoDataTableRow\nTable row with all info about loot when an AI dies. Should it drop inventory, loot tables, etc.",
    "FortAthenaAISmartObjectActivityCondition": "FFortAthenaAISmartObjectActivityCondition\nStruct to wrap the Condition to find a ActivityConfig",
    "FortAthenaAISmartObjectActivityConfig": "FFortAthenaAISmartObjectActivityConfig\nDetails and configuration of SmartObject Activity",
    "FortBusPair": "FFortBusPair",
    "FortContinuousModulatorConfig": "FFortContinuousModulatorConfig",
    "FortFollowCam_Settings": "FFortFollowCam_Settings",
    "FortGamepadAdvancedOptions": "FFortGamepadAdvancedOptions",
    "FortGamepadBasicOptions": "FFortGamepadBasicOptions",
    "FortGamepadUserOptions": "FFortGamepadUserOptions\n - Represents controller related options that players can modify.\n - Gets cloud saved in the user's UFortClientSettingsRecord.",
    "FortMantisMontageData": "FFortMantisMontageData\n\n    Immutable data that has been extracted from a montage.",
    "FortMantisReplicatedAnimInstanceInfo": "FFortMantisReplicatedAnimInstanceInfo\n\n    Information to be replicated to all clients for use in the layer anim instance.",
    "FortMantisRootMotionWarpInfo": "FFortMantisRootMotionWarpInfo\n\nProperties for how to warp technique montage root motion, if applicable.",
    "FortMantisTargetData": "FFortMantisTargetData\n\n    Target data sent by the mantis ability from client to server.\n    Used to synchronize the technique on the server.",
    "FortMantisTechniqueBranch": "FFortMantisTechniqueBranch\n\n     Properties used to define a branch between techniques.",
    "FortPartyMemberRepData:FortCommonMatchmakingData": "FFortPartyMemberRepData is used to communicate with FFortPartyRepData by sending messages to UFortSocialParty (the coordinator for FFortCommonMatchmakingData_State)\n     Right now the coordinator accepts state change requests on a first come first serve basis\n     If this party member's request is accepted, the coordinator will broadcast the request to the other participants",
    "FortPlayerFoleyContextSettings": "FFortPlayerFoleyContextSettings",
    "FortSafeZoneDefinition": "FFortSafeZoneDefinition",
    "FortSafeZoneVolumeDefinition": "FFortSafeZoneVolumeDefinition",
    "FortSmartObjectSlotDefinitionData": "FFortSmartObjectSlotDefinitionData : Use to add some custom data on a SmartObject Slot",
    "FortSoundLibraryPlaybackSettings": "FFortSoundLibraryPlaybackSettings - Context settings that describe intended functionality for sound playback.",
    "ESquadSlotSortType": "FFortSquadSlotManagementWidgetMixin Public BP API\n\n      UFUNCTION(BlueprintCallable, Category = \"Squad Slot Management\")\n      void SetIdOfSquadSlotToManageBP(const FName& SquadId, const int32 SquadSlotIndex)\n      {\n              FFortSquadSlotManagementWidgetMixin::SetIdOfSquadSlotToManage(SquadId, SquadSlotIndex);\n      }\n\n      UFUNCTION(BlueprintCallable, BlueprintPure, Category = \"Squad Slot Management\")\n      void GetIdOfSquadSlotToManageBP(FName& OutSquadId, int32& OutSquadSlotIndex) const\n      {\n              OutSquadId = IdOfSquadToManage;\n              OutSquadSlotIndex = IndexOfSquadSlot;\n      }\n\n      UFUNCTION(BlueprintCallable, BlueprintPure, Category = \"Squad Slot Management\")\n      bool IsSquadSlotLockedBP() const\n      {\n              return FFortSquadSlotManagementWidgetMixin::IsSquadSlotLocked(GetOwningLocalPlayer());\n      }\n\n      UFUNCTION(BlueprintCallable, BlueprintPure, Category = \"Squad Slot Management\")\n      UFortItem* GetItemInSquadSlotBP(ULocalPlayer* const LocalPlayer) const\n      {\n              return FFortSquadSlotManagementWidgetMixin::GetItemInSquadSlot(GetOwningLocalPlayer(), false);\n      }",
    "FortSubmixAnalyzerData": "FFortSubmixAnalyzerData - Required data used to setup Analysis to be performed on a Submix asset",
    "FortSubmixPair": "FFortSubmixPair",
    "FortTouchAimAssist": "FFortTouchAimAssist",
    "FortTouchAimAssistSettings": "FFortTouchAimAssistSettings",
    "EListHeaderType": "FFortUserListHeaderInfo && EListHeaderType",
    "FutureTechData": "FFutureTechData - tech unlocks for a future level",
    "CosmeticSlotSelector:SourceCategory": "FGameplayTag PartTag{};",
    "GliderThrustData": "FGliderThrustData",
    "HUDLayoutData": "FHUDLayoutData",
    "HUDLayoutDataEntry": "FHUDLayoutDataEntry",
    "EFabricInteractionToolStates.HoveredValidCablePort": "FIT cursor is hovering over a control on a FABRIC device",
    "EFabricInteractionToolStates.HoveredInvalid": "FIT cursor is hovering over a port that they can connect to",
    "EFabricInteractionToolStates.ContinuousSelected": "FIT cursor is hovering over a port that they cannot connect to",
    "EFabricInteractionToolStates.MomentarySelected": "FIT has selected a continuous control, like a knob\nContinuousChanged,             FIT is changing the value of a continuous control, like a knob",
    "EFabricInteractionToolStates.CableSelected": "FIT is changing the value of momentary control, like a button",
    "EFabricInteractionToolStates.HoveredControl": "FIT is equipped on player\nHoveredDevice,                         FIT cursor is hovering over a FABRIC device",
    "EFabricInteractionToolStates.None": "FIT is holding a cable\nActivationChanged,             FIT is changing the value of the activate/deactivate button on a device",
    "IconDisplayData": "FIconDisplayData",
    "IgnoredPlayerPawnDataEntry": "FIgnoredPlayerPawnDataEntry struct reference to a pawn that ignores collision with this holding area.",
    "InfiltrationModeState": "FInfiltrationModeState",
    "InfiltrationPOIInfo": "FInfiltrationPOIInfo",
    "IntelState": "FIntelState",
    "MusicEventData": "FMusicEventData - For use in the data table asset",
    "RuntimeOptionSpectateAPartyMemberOverride:PropertyName": "FName identifier for the property",
    "CreativeAssetMetaData:NameObjectPtr": "FName of TSoftObjectPtr<UObject>. Using a TSoftObjectPtr causes content validation errors and unnecessary object references.",
    "ItemListCategoryArray:CategoryID": "FName representation of the category",
    "MaterialParamterDef:CascadeMaterialName": "FName to the cascade material, this is a work around since cascade will not let use change materials on a mesh particle unless it is done by name, THIS should go away once we switch to niagra",
    "MaterialVariants:CascadeMaterialName": "FName to the cascade material, this is a work around since cascade will not let use change materials on a mesh particle unless it is done by name, THIS should go away once we switch to niagra",
    "FOBSaveFileBuildingInstructionsHandler": "FOB-specific implementation of save file building instructions handler",
    "EventModeFocusActor:FOV": "FOV to apply to the camera when focusing this actor",
    "ObjectiveArray": "FObjectiveArray is used to put an array of objective names into the ObjectivesByMode TMap",
    "POIRoundInfo": "FPOIRoundInfo",
    "FortGameUserSettings:CurrentFpsModeString": "FPS mode string for analytics",
    "PartOverrideData": "FPartOverrideData",
    "AIPatrolPathComponent:PathSegmentDetails": "FPatrolPathSegmentDetails that manage the real path for this path component to the next",
    "PerkAccoladeInfo": "FPerkAccoladeInfo",
    "PerkAvailabilityContainer": "FPerkAvailabilityContainer\nA Perk container that links multiple perks together and define the amount of perks from the list we want to assign to an agent\nNote: it is valid to put an AvailablePerk with a none PerkClass. It can be used to define the option to assign no perk from the list",
    "PerkItemSet": "FPerkItemSet",
    "PerkMutatorData": "FPerkMutatorData",
    "PerkPipData": "FPerkPipData",
    "PhysicsImpactData": "FPhysicsImpactData",
    "PhysicsStateData": "FPhysicsStateData",
    "PlayerAugmentsPersistenceData": "FPlayerAugmentsPersistenceData\nContains a player's persistent augment data. This struct must be mirrored for MCP code in PlayerAugmentsPersistenceData.java.\nIt will be stored as json in the player profile in the \"Player Augments\" account item.",
    "PlayerStartInfo": "FPlayerStartInfo",
    "FortDisplayAttribute:Attribute": "FRED_TODO this needs to be some other uniqueish identifier. Tag maybe?",
    "RidingPlaylistBlacklistTableRow": "FRidingPlaylistBlacklistTableRow\nTable row containing tag container of all the playlists that should block riding",
    "RockBoxSpring": "FRockBoxSpring\nSimulates a point mass that is held by 3 springs in the center of a box.\nAs the box moves, the point mass jiggles around inside of the box.\nThis is uses to simulate springy physics, such as the car chassis or antennas.",
    "PenetrationAvoidanceFeeler:AdjustmentRot": "FRotator describing deviance from main ray",
    "RoundCosmeticInfo": "FRoundCosmeticInfo",
    "RoundTechDataCache": "FRoundTechDataCache",
    "ServerLongInteractInfo": "FServerLongInteractInfo stores necessary long interact information for server side to validate",
    "SimpleDestructiblePropGroupBitArray": "FSimpleDestructiblePropGroupBitArray\nManages TBitArray replication for a UInstancedStaticMeshComponent inside ASimpleDestructiblePropGroup.\nWhen an instance of a prop group is damaged / destroyed, one of the bits in this array is flipped to 0.",
    "FortSpecialActorReplicationInfo:SlateBrushes": "FSlateBrushes used by all special actors. Many actors typically share the same brush, so we replicate unique copies in this separate array",
    "SparksPlayspaceMusicPlayer": "FSparksPlayspaceInteractor",
    "FortCreativeMoveTool:PlacementLocale": "FString that is used to store the \"Placement\" locale of this move tool.",
    "TargetDataEntry": "FTargetDataEntry",
    "TeamSetupDataEntry": "FTargetDataEntry",
    "TraversePointSpawnData": "FTraversePointSpawnData",
    "NevadaAudioUpdateContext": "FValetUpdateContext - Helper struct for native update",
    "ValetUpdateContext": "FValetUpdateContext - Helper struct for native update",
    "LiquidRibbonSplineDetachment:SegmentEndPoint": "FVector of the segment end point",
    "LiquidRibbonSplineDetachment:SegmentStartPoint": "FVector of the segment start point",
    "WeightedAIPerk": "FWeightedAIPerk\nAssociate a PerkClass and a random weight for selection",
    "SkyfireBackpackComponent:SpawnedFXRelativeOffset": "FX",
    "SkyfireBackpackComponentInitializerFXStruct": "FX",
    "FortCurieManager:FXManager": "FX manager for Curie",
    "FortCurieGlowFadeRequest:FXTag": "FX tag that is being faded",
    "XPDisplayData": "FXPDisplayData",
    "XPEventArray": "FXPEventArray",
    "XPEventEntry": "FXPEventEntry",
    "FabricStepGenerator:Values": "Fabric Step Rate; Quarter notes below 4, bars 4+",
    "FabricWidgetComponent": "Fabric's version of the widget component, which automatically registers to the Widget Component Significance Subsystem",
    "EAthenaPathFollowingFocus.AlignWithSmoothedVelocity": "Face the current velocity, with some smoothing applied. Useful for characters without animation or ability support to turn smoothly (Deimos).\nHowever it can make the facing lag, cause more sliding and prevent animation from reaching the desired focus directly.",
    "EExternalAccountType.Facebook": "Facebook account login",
    "ESavedAccountType.Facebook": "Facebook auth creds",
    "PickedTurnTransitionData:FacingPrecision": "Facing threshold to stop rotation based on the MaintainRotationFlag and/or release the behavior tree based on UnlockBehavingTreeOnFacing",
    "TurnTransitionData:FacingPrecision": "Facing threshold to stop rotation based on the MaintainRotationFlag and/or release the behavior tree based on UnlockBehavingTreeOnFacing",
    "EncounterSelectLWMEncounterStateTreeTaskInstanceData:FactionRegistry": "Faction Selection table",
    "WeaponAccuracy:MaxAttackRangeFactor": "Factor of IdealAttackRange (or TargetingIdealAttackRange when targeting) to determine max attack range, if bot is farther than this distance from target it won't attack [1..X]",
    "FortSplineGroundPath:LerpScaleRate": "Factor to determine how quickly the spline's section's scale will interpolates.",
    "FortPawnStats:BrakingFrictionFactor": "Factor used to multiply actual value of friction used when braking. @see UCharacterMovementComponent::BrakingFrictionFactor",
    "FortInteriorAudioComponent_Ambient:AmbientBankFadeInTime": "Fade In time for AmbientBank entries",
    "SynchronizedTeleportFadeOutReplicationData": "Fade Out Data that when replicated to the USynchronizedTeleportPlayerComponent client will trigger a fade out.",
    "FortInteriorAudioComponent_Ambient:AmbientBankFadeOutTime": "Fade Out time for AmbientBank entries",
    "FortGameStateAthena:EliminationFadeInCurve": "Fade in curve for the elimination indicators (For World Map, Minimap & Compass only)",
    "FortGameStateAthena:EliminationFadeOutCurve": "Fade out curve for the elimination indicators (For World Map, Minimap & Compass only)",
    "MilkshakeControllerComponent:CameraShakeAudioFadeCurveType": "Fade out curve type for camera shake audio",
    "MilkshakeControllerComponent:CameraShakeAudioFadeOutDuration": "Fade out duration for camera shake audio",
    "FortCurieFXSettings:AmbientAudioFadeTime": "Fade out time for ambient audio",
    "EMusicFadeStyles": "Fade styles for music",
    "FortCountdownSounds:FadeOutTime": "Fade time after stop",
    "EAthenaRoundsMutatorPhase.FadeOutToNextRound": "Fade transition between GamePhase_Warmup or RoundEndUI and the next round's RoundSetup",
    "FortMusicSection:FadeInTime": "Fade-in duration once the asset starts",
    "FortMusicSection:FadeOutTime": "Fade-out duration once the asset completes",
    "FortWeapon:PrimaryFireSoundFadeOutTime": "Fade-out time for looping primary fire sounds",
    "FailedToReachPOI:FailCount": "Fail counter",
    "EFortWorldRecordState.Max_None": "Failed somewhere",
    "EFortSessionHelperJoinState.FailedReservation": "Failed the reservation request for some reason (end of state machine)",
    "EMatchmakingState.LockAcquistionFailure": "Failed to acquire a lock on the world, game needs to make decision",
    "ELoginResult.ExternalAuth_AssociationFailure": "Failed to associate external auth with backend",
    "EVoiceRepUploadRecordResult.EmeraldError": "Failed to communicate with the Emerald sercice",
    "ELoginResult.QueryKeychainFailed": "Failed to download the data encryption keychain",
    "ELoginResult.ProfileQueryFailed": "Failed to download this user's profile",
    "ELoginResult.ClientSettingsDownloadFailed": "Failed to download this user's saved settings",
    "ELoginResult.SupervisedSettingsDownloadFailed": "Failed to download this user's supervised settings",
    "ELoginResult.PinGrantFailure": "Failed to generate pin grant code",
    "EFortSessionHelperJoinState.FailedJoin": "Failed to join a session for some reason (end of state machine)",
    "FortLevelStreamingInfo:bFailedToLoad": "Failed to load the source level",
    "ELoginResult.Console_EntitlementCheckFailed": "Failed to query console entitlements",
    "EValkyrieValidationErrorCode.FailedToSignIOStoreContainer": "Failed to sign iostore container",
    "EValkyrieValidationErrorCode.FailedToSignPakFile": "Failed to sign pak file",
    "EDataAssetDirectoryUpdateStatus.Failed": "Failed to update assets",
    "EClientContentReadinessV2.None": "Failsafe state.",
    "ELoginResult.ExternalAuth_ConnectionTimeout": "Failure communicating with external auth provider",
    "ELoginResult.ExternalAuth_AuthFailure": "Failure to auth with external auth provider",
    "EFortGameFeatureState.PreloadingFailed": "Failure transitioning from Available to PreLoaded. Async loading or Mounting data might have failed.",
    "FortScoutDroneControllingComponent:FakeCameraAbilitySpec": "Fake Ability Spec so we can push and pop the base camera mode without needing an extra passive ability",
    "CrashpadStaticParams:FallImmunityGameplayEffect": "Fall immunity gameplay effect",
    "VideoWidgetConfig:FallbackVideoID": "Fallback ID when VideoDisplayDataID fails",
    "EGenericPinFailureReason": "Fallback PIN failure reason when no specific reason type applies",
    "FortItemPreviewOffPawnActor:DefaultPreviewActorClass": "Fallback class to use if the source item doesn't specify an actor class",
    "FortRootMotionSource_FallingBoost": "FallingBoost force - applied when falling, does an initial impulse and then controls falling rate/air control before being removed after a duration",
    "FortAthenaMutator_BasicLimitedLives:bShouldCalculateRespawnLocation": "False if this mutator should NOT CalculateRespawnData to determine where you spawn, preventing a conflict when using another respawn system",
    "FortAthenaMutator_TDM:bShouldCalculateRespawnLocation": "False if this mutator should NOT CalculateRespawnData to determine where you spawn, preventing a conflict when using another respawn system",
    "FortChaseCameraHelper:MaxCameraToPivot": "Farthest",
    "EPathTestQueryType.HierarchicalQuery": "Fast",
    "FortWorldReactionData": "Fast Array Serializer for DebugDraw since this is a server-side only system",
    "FortWorldStatData": "Fast Array Serializer for DebugDraw since this is a server-side only system",
    "ActiveGameplayModifierArray": "Fast TArray container for active gameplay modifiers",
    "MeshNetworkEventStateDataArray": "Fast TArray container for active gameplay modifiers",
    "ActiveTieredCollectionLayoutArray": "Fast TArray containing active tiered collection layouts",
    "FortBadgeCount": "Fast TArray item type representing a count of a badge",
    "FortClientObservedStat": "Fast TArray item type representing a stat that is replicated to clients",
    "EarnedBadgeEntry": "Fast TArray item type representing an earned badge while in a zone",
    "EarnedBadgeEntryArray": "Fast TArray wrapper for all badges received in a zone",
    "FortBadgeCountArray": "Fast TArray wrapper for all badges received in a zone",
    "FortClientObservedStatArray": "Fast TArray wrapper for all client observed stats",
    "ActiveGameplayModifier": "Fast TArray-item for an active gameplay modifier",
    "ActiveTieredCollectionLayout": "Fast TArray-replicated item representing active tiered collection layouts along with the highest tier unlocked based on player progress",
    "FortPlayerStateZone:Spectators": "Fast arrays don't use PushModel, and so don't need getters / setters.",
    "RepGraphClassTracking:bIncludeFastPath": "Fast path tracking is only supported for explicit class tracking, not implicit.",
    "StateTreeManagerComponent:ReplicatedStateChanges": "FastArray of replicated transitions sent to the [Client] from the [Server]\n    If the owning Actor is NOT the [Authority] or the StateTree is not marked to replicate, this list will be empty and ignored",
    "StateChangeDataArray": "FastArray responsible for replicating all the state transitions of StateTrees from the server to the client",
    "SpecialEventRewindComponentRecordingFastArray_PlayerPawn": "FastArraySerializer of recorded data for a player pawn",
    "AthenaFeatTimelineDisplayData:FeatChallengeBundleTag": "Feats come from ChallengeBundles, we'll match the tag from the bundle, the tag must be inherited from ChallengeBundle.Source Example: ChallengeBundle.Source.Season10",
    "EFortFrontEndFeatureState.Hidden": "Feature is disabled and hidden from the user",
    "EFortUIFeatureState.Hidden": "Feature is disabled and hidden from the user",
    "EFortFrontEndFeatureState.Disabled": "Feature is disabled but visible to the user",
    "EFortUIFeatureState.Disabled": "Feature is disabled but visible to the user",
    "EPostpartyClippingState.Disabled": "Feature is disabled by the user",
    "EPostpartyClippingState.Enabled": "Feature is enabled (set when Postparty is connected if previously Unset)",
    "EFortAllowDownloadHighResMipsBehavior.Enabled": "Feature is fully enabled",
    "EFortFrontEndFeatureState.Enabled": "Feature is fully enabled",
    "EFortUIFeatureState.Enabled": "Feature is fully enabled",
    "EHighlightFeatures": "Features of a Unicorn highlight clip\n* Take care in renaming - the unicorn web API expects these named values. Do no reorder",
    "FortFeedbackLine:ResponseEvents": "Feedback event(s) to trigger upon completion of this action.  One will be chosen randomly from the list.",
    "FortFeedbackManager:FeedbackEvents": "Feedback events and the actions to take when they occur.",
    "FortAnimInput_PlayerGliderAnimAsset:Default_BodyAdditive_FemaleLarge_BS": "Female Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Default_BodyAdditive_FemaleSmall_BS": "Female Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Default_TurnAdditive_FemaleLarge_BS": "Female Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Default_TurnAdditive_FemaleSmall_BS": "Female Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Into_BodyAdditive_FemaleLarge_BS": "Female Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Into_BodyAdditive_FemaleSmall_BS": "Female Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Into_TurnAdditive_FemaleLarge_BS": "Female Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Into_TurnAdditive_FemaleSmall_BS": "Female Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:LeanAdditive_Center_FemaleLarge_Pose": "Female Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:LeanAdditive_Center_FemaleSmall_Pose": "Female Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Lean_FemaleLarge_BS": "Female Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Lean_FemaleSmall_BS": "Female Medium will be used if this is blank.",
    "FortWeapon:PoseOffsetAnimSequenceFemaleOverride": "Female offset pose for consumables. If not specified, PoseOffsetAnimSequence will be used.",
    "FortUserCloudRequestPayload:Filename": "Filename for the request",
    "FortCloudSaveRecordInfo:RecordFilename": "Filename of the actual cloud save file, will alternate based on save archive number",
    "FortExposedContentValidatedPackage:PackageFilename": "Filename of the package that was validated",
    "DiscoCaptureUIData:FillAmount": "Fill amount",
    "EMMSRulePreset.KeepFull": "Fill server before game start, respect team requirements, keep parties together",
    "FortVehicleSoundComponent_Surface:Context": "Fill this out with BP data equivalents to be used in the C++ nativized logic",
    "EFortCustomGender": "Filling this in because otherwise it's auto-filled out and I'd rather have it say Invalid.  Ideally it would NOT be auto-filled!\n1, 2, and \"both\" is 3, so they can act as bit-flags for checking purposes.",
    "HarmonixAnalyzerEffectResults:FilterBankLevels": "Filter Bank",
    "PlayerBuildableClassFilter:Level": "Filter building level",
    "PlayerBuildableClassFilter:BuildingType": "Filter building type",
    "FortObjectiveFilter_KillContribution:DamageContributed": "Filter by the amount of damage contributed to the elimination event",
    "FortObjectiveFilter_KillContribution:DistanceFromEliminatedPawn": "Filter by the distance from the contributor to the eliminated pawn in meters\nIf either of the pawns is null the distance value will be 0.",
    "FortObjectiveFilter_KillContribution:PercentageOfDamageContributed": "Filter by the percent of damage contributed of the total damage from the elimination event",
    "FortObjectiveFilter_QuestUpdated:QuestState": "Filter by the quest state when the event is received\nNote: currently only sent for Active (When a quest is granted) and Completed quests",
    "FortSnapOnSurfaceComponent:NavigationFilterClass": "Filter class use to project the snap point on navmesh.",
    "CustomCosmeticModifierBase:EnteredVehicleSeatsToCareAbout": "Filter enter vehicle events to only these seats",
    "VkArtifactOption:Filter": "Filter for further refining the match. Includes Platform (optional) currently but may expand.",
    "BuildingTrap:TriggerFilter": "Filter for which actors are allowed to be hit by this trap",
    "PlayerBuildableClassFilter:EditModeMetadata": "Filter metadata shape",
    "FortAnimNode_CurveFilterSlot:FilterMode": "Filter mode (open vs closed)",
    "PlayerBuildableClassFilter:ResourceType": "Filter resource type",
    "CustomCosmeticModifierBase:CurieElementsToCareAbout": "Filter the curie events to only these elements.",
    "EFortFeedbackBroadcastFilter": "Filter the feedback for various audiences",
    "FortObjectiveFilter_DamageTaken:DamageAmount": "Filter to set min / max values of damage taken needed to allow progress for this objective.",
    "FortEmporiumFilterEntry:Mode": "Filter type",
    "FortAimAssist2D_Settings:TargetFilter": "Filter used to determine valid targets.",
    "FortEmporiumItemData:TagList": "Filterable tag list",
    "FortBotPOIExcludedZoneDataTableRow:MapPath": "Filtering by Map. Note: Accept all maps if empty.",
    "FortBotPOIExcludedZoneDataTableRow:PlaylistQuery": "Filtering by Playlists Gameplay Tags. Note: Accept all playlists if empty.",
    "FortAbilityTargetSelection:TargetFilter": "Filters down overlap results based on rules",
    "FortHttpRequestCompletedAnalyticsFilter": "Filters for HTTP completed analytics to skip sending analytics for requests that are not useful\nSet UrlSubstring to either a substring that will be searched for in the URL, or empty to apply these filters to all URLs.\nSet ErrorCodes and/or StatusCodes to the error codes and status codes that need to be filtered out.  If both of these are empty, all requests that match UrlSubstring will be filtered out.",
    "BuildingFoundation:BuildingGroupFilter": "Filters the list of building group entries to only ones that pass the specified filter (ignored if the filter is empty)",
    "FortCurieFXSettings:CharredStateFireAttachedFinalAlpha": "Final alpha for the charred state for things that have actively been on fire",
    "FortCurieFXSettings:CharredStateNearFireFinalAlpha": "Final alpha for the charred state for things that were near fire",
    "FortAthenaMutator_Bagel:FinalBoss": "Final boss to kill to win the game",
    "CrucibleCourseResults:CalculatedTotalPenalty": "Final calculated penalty score of this course run in seconds, calculated at finish of run",
    "CrucibleSegmentResults:CalculatedPenalty": "Final calculated penalty score of this segment in seconds, calculated at finish of segment",
    "CrucibleCourseResults:CalculatedScore": "Final calculated score of this course run in seconds, calculated at finish of run",
    "CrucibleSegmentResults:CalculatedScore": "Final calculated score of this segment in seconds, calculated at finish of segment",
    "FortMovementLeans:ModulatedBlendedWeight": "Final lean weight between [-1,1] after applying blend curve and directional modulation",
    "FortAthenaMutator_Bagel:FinalPhaseEncounter": "Final phase encounter used for the last objective",
    "EEventTournamentRound.Finals": "Finals (Sunday)",
    "EMatchmakingStartLocation.FindSingle": "Find a single session",
    "FortActorComponent_MultiInteract:ActorCountChangedDelegate": "Fire when interacting actor count changed",
    "FortMaterialStyleComponent:OnPrepareForNewStyleActivation": "Fired just prior to 'ApplyTo' being called on a new material style",
    "SparksMusicPlayspace:OnMidiEventDriverChanged": "Fired once the EventRouter is found (could be fired immediately).",
    "PlayspaceComponent_LipSyncAssetManager:OnLipSyncAnimChanged": "Fired once the lipsync anim has been determined.",
    "FortNonPlayerConversationParticipantComponent:OnReceivedLocalClientConversationMessage": "Fired when a local player converses with us and we receive a new message",
    "FortObjectiveFilter_MatchStarted": "Fired when a match starts for each player in the game.",
    "FortObjectiveFilter_PlayerDowned": "Fired when a player is downed.\nThis fires when a player is put into a DBNO state, including when they are killed and are the last member of a squad.\nThis also fires when a player is killed in a game mode that doesn't use DBNO.",
    "FortNonPlayerConversationParticipantComponent:OnDialogMarkerInteractionStateChanged": "Fired when local user interaction state changes",
    "FortPlayerPawnAthena:OnFortPlayerHitByVehicle": "Fired when the pawn has been launched from a vehicle",
    "FortAthenaMutator_RespawnWave:OnWaveDataChanged": "Fired whenever the wave data changes",
    "FortAthenaVehicle:OnSpringCompressionDelegate": "Fires off when a spring is considered compressed.",
    "SparksPlayspaceEvent_OnBeat": "Fires on the beat of the primary music clock",
    "SparksPlayspaceEvent_OnMeasure": "Fires on the measure of the primary music clock",
    "FortPlayerControllerGameplay:OnHUDElementVisibilityRefreshedDelegate": "Fires when HUD Element visibilities are refreshed while a minigame is in progress",
    "FortMinigameObjectiveTrackerComponent:OnTrackedObjectiveAllowedInteractionChanged": "Fires when a SetIsInteracttionAllowed and when the FTrackedObjectiveArray is replicated",
    "EFortQuestObjectiveStatEvent.MatchStarted": "Fires when a match starts (i.e. players enter the battle bus)",
    "FortPickupInstigatorRegistryComponent:OnItemTemplateDataChanged": "Fires when a particular item template has been added or changed",
    "FortPickupInstigatorRegistryComponent:OnItemTemplateDataRemoved": "Fires when a particular item template has been removed",
    "FortCreativeItemVariantNotifierComponent:OnItemTemplateDisabled": "Fires when a particular item template is disabled",
    "FortCreativeItemVariantNotifierComponent:OnItemTemplateEnabled": "Fires when a particular item template is enabled",
    "FortMinigameObjectiveTrackerComponent:OnTrackedObjectiveTeamUpdated": "Fires when a particular tracked objective Team has changed",
    "FortMinigameObjectiveTrackerComponent:OnTrackedObjectiveAdded": "Fires when a particular tracked objective has been added",
    "FortMinigameObjectiveTrackerComponent:OnTrackedObjectiveChanged": "Fires when a particular tracked objective has been added or changed",
    "FortMinigameObjectiveTrackerComponent:OnTrackedObjectiveRemoved": "Fires when a particular tracked objective has been removed",
    "FortMinigameObjectiveTrackerComponent:OnTrackedObjectiveStateChanged": "Fires when a particular tracked objective state has been changed",
    "FortPickupInstigatorRegistryComponent:OnPickupInstigatorDataChanged": "Fires when a particular tracked pickup instigator has been added or changed",
    "FortPickupInstigatorRegistryComponent:OnPickupInstigatorDataRemoved": "Fires when a particular tracked pickup instigator has been removed",
    "FortObjectiveFilter_AugmentSelected": "Fires when a player has selected an augment to be attached, will include tags from the augment selected.",
    "FortAthenaVehicle:OnDamageablePartHealthChanged": "Fires when a toggleable collision shape was toggled on or off",
    "FortAISpawnerUtilityComponent:OnEnvironmentQueryFinishedDelegate": "Fires when an environment query finishes",
    "FortAISpawnerUtilityComponent:OnUnownedPawnDiedDelegate": "Fires when an unowned pawn dies that is of the AI type that this component spawns",
    "FortCreativeItemVariantNotifierComponent:OnItemTemplateChanged": "Fires when properties on a particular item template have been modified",
    "FortAthenaVehicle:OnHealthChanged": "Fires when the health changes on server clients",
    "FortCharacterVehicle:OnHealthChanged": "Fires when the health changes on server clients",
    "FortPhysicsPawnObject:OnHealthChanged": "Fires when the health changes on server clients",
    "BuildingActor:OnActorHealthChanged": "Fires when the health changes on servers",
    "BuildingActor:OnBuildingHealthChanged": "Fires when the health changes on servers and clients",
    "FortPawn:OnPawnHealthChanged": "Fires when the health changes on servers and clients",
    "FortPawn:OnPawnMaxOvershieldChanged": "Fires when the max overshield changes on servers and clients",
    "FortPlayerPawn:OnAttemptedInstantInteractSearch": "Fires when the player interacts with a 0 duration search",
    "FortPlayerPawn:OnStartedInteractSearch": "Fires when the player starts searching",
    "FortPlayerPawn:OnEndedInteractSearch": "Fires when the player stops searching",
    "FortAthenaVehicle:OnVehicleSquadChanged": "Fires when the squad ID changes for the plane",
    "FortPhysicsPawnObject:OnSurfaceTypePhysicsObjectIsOnChangedDelegate": "Fires when the surface the PhysicsObject is on changes",
    "FortAthenaVehicle:OnSurfaceTypeVehicleIsOnChangedDelegate": "Fires when the surface the vehicle is on changes",
    "FortPlayerController:OnWeakSpotReset": "Fires when the weak spot resets (normally by timing out)",
    "BuildingGameplayActorSpawnMachine:OnSpawnMachineLinkedToRebootComponent": "Fires when this Spawn Machine is added to the GameState's Reboot component",
    "FortDagwoodVehicle:OnTireModHealthChanged": "Fires when tire-mod health changes. (Does not fire when a mod is added)",
    "FiringPattern:FiringPatternCurve": "Firing Pattern Curve",
    "BuildingTurretComponent:FiringInterval": "Firing interval of the turret, in seconds",
    "FabricInteractionTool:FiringRate": "Firing rate is used by the Fabric Interaction Tool to maintain character animation states while interacting.",
    "FortRangedWeaponStats:FiringRateDownsightsMultiplier": "Firing rate multiplier when aiming downsights. Only values <= 1.0 are currently supported.",
    "FortRangedWeaponStats:BurstFiringRate": "Firing rate of a single burst of a burst-fire weapon",
    "FortRangedWeaponStats:FiringRate": "Firing rate of the weapon",
    "DigestedRangedWeaponSkill:DelayDeviationTimeBetweenShots": "Firing rate random deviation to be added/reduced to DelayBetweenShots",
    "RangedWeaponSkill:DelayDeviationTimeBetweenShots": "Firing rate random deviation to be added/reduced to DelayBetweenShots",
    "DigestedRangedWeaponSkill:DelayBetweenShots": "Firing rate speed",
    "RangedWeaponSkill:DelayBetweenShots": "Firing rate speed",
    "FortHighlightColors:SceneModulationColor1": "First color to modulate from",
    "FortAthenaMutator_Disco:GameMsg_FirstCapturePointsEnabled": "First group of control points enabling",
    "FortActionKeyMapping:KeyBind1": "First key binded to this action",
    "TileGroupSelection": "First level container for tilegroup references. Contains a list of TileGroupInfo structs, out of which one will be selected.",
    "FortAthenaDoghouseVehicle:AirbrakeDragCoefficient": "First order additional drag coefficient when the airbrake is on (ie, the engine is off)",
    "FortPlayerAnimAssets:FirstPersonWeaponAnimAsset": "First person weapon overrides",
    "EAthenaCustomizationCategory.Pickaxe": "First real slot",
    "FortWorldManager:Y": "First tier of the 2D WorldTile array",
    "FortRangedWeaponStats:CoolX1": "First x-coordinate on spread cool-down curve",
    "FortRangedWeaponStats:HeatX1": "First x-coordinate on spread heat curve",
    "FortRangedWeaponStats:CoolY1": "First y-coordinate on spread cool-down curve",
    "FortRangedWeaponStats:HeatY1": "First y-coordinate on spread heat curve",
    "FortWeapon:PrimaryFireSound1P": "First-person primary fire sound",
    "FortWeapon:PrimaryFireStopSound1P": "First-person primary fire sound",
    "FortWeapon:ChargeFireSound1P": "First-person primary fire sound for charge weapons.",
    "FortMcpCollectedFishProperties:Weight": "Fish specifics",
    "EFortLabelOverrideForceFixUpMode": "Fix up mode to be use when force-creating unique label overrides",
    "WaterJumpParams:WaterJumpMinVelocityZ": "Fixed Velocity Z minimum applied when jumping.",
    "ECreativeMinimapComponentIconColorType": "Fixed color list to choose from. If adding more colors add them to the end, so that the new options don't break existing creator islands.",
    "FortPlayerControllerAthenaXPComponent:EventArray": "Fixed size array that keeps getting re-written with new events",
    "FortAttributeInfo:bShowInSummaries": "Flag currently used to determine whether an attribute should appear in the bonus overview in the building panel.",
    "FortAttributeInfo:bShowInDifferences": "Flag currently used to determine whether an attribute should appear in the next bonuses section of the building panel.",
    "FortAttributeInfo:bShowAsBuffInFE": "Flag currently used to determine whether an attribute should show as the final computed value or as a buff in the front end.",
    "FortMissionState:bAlreadySetTimerOnce": "Flag for checking whether or not the OnAllPlayersLoadedIn function has already been called or not through the use of a timer",
    "CreativeBetaPermissionConfig:bDisabledInCreativePlaylists": "Flag for disabling an asset in creative playlists",
    "CreativeBetaPermissionConfig:bDisabledInVKPlaylists": "Flag for disabling an asset in vk playlists",
    "FortAthenaVehicle:bExploded": "Flag for when we've actually exploded.",
    "FortPawnComponent_Convert:bOwnerPawnDied": "Flag guardING against re-entry when owner pawn already died",
    "FortPhysicsObjectComponent:bGravityOverridden": "Flag indicating gravity is overridden",
    "BuildingActor:bIsGameFrameworkComponentReceiver": "Flag indicating if this building actor should add itself as a game framework component receiver, allowing this actor to have components added from plugins.",
    "BuildingItemCollectorActor:bCallOnLocalInteract": "Flag indicating that the LocalOnAttemptInteract event should be called for this collector",
    "BuildingPhoenixRepairActor:bCallOnLocalInteract": "Flag indicating that the LocalOnAttemptInteract event should be called for this collector",
    "FortCreativeItemListCategoryData:bCollapseCardBorderPad": "Flag indicating that the cards for the items in this category should collapse the border padding",
    "FortCreativeItemListData:bIncluded": "Flag indicating that the item should be included in the item list",
    "BattlePassOfferData:bIsFreePassReward": "Flag indicating that this offer is available without purchasing the premium battle pass",
    "FortCreativeItemListCategoryData:bUseLegacyItemDetailsPanel": "Flag indicating that we should display the legacy detail info panel instead of the revised one.",
    "PlayspaceControllerComponent_PlayerSpawning:bClientReadyForSpawning": "Flag indicating the client has confirmed it is ready to spawn the player in",
    "FortPhysicsObjectComponent:bHasSetupPhysicsObject": "Flag indicating the component has setup the physics object and its simulating component",
    "LevelStreamRequestHandshakeState:bLevelStreamingCompleted": "Flag indicating the current state of a level streaming request",
    "BattlePassLevelReward:bHideFromGiftBox": "Flag indicating the reward should be hidden from the gift box screen when claimed",
    "BuildingActor:bCreatePhysicsObjectComponent": "Flag indicating this building actor should setup the Fort Physics Object Component at pre-init component time",
    "FortRemoteControlledPawnAthena:bTriggeredForDestroy": "Flag indicating this remote controlled pawn has been triggered and will be destroyed",
    "FortPhysicsObjectComponent:bDisableMovementStateUpdates": "Flag indicating we are force disabling movement state updates",
    "FortPhysicsObjectComponent:bDisableOverlapEvents": "Flag indicating we are force disabling overlap events",
    "FortPlayerController:bHoldingObject": "Flag indicating we are holding a held object",
    "FortPhysicsObjectManager:EnablePhysicsUserDataSetup": "Flag indicating we are using Physics User Data (ex: Building health and dynamic activation data) which allows physics thread interactions more cleanly.",
    "FortPhysicsObjectManager:EnableUnifiedDamageModel": "Flag indicating we are using the new damage model that is setup by the FortWorldSettings",
    "FortPlayerController:bHasInitializedHeroInventory": "Flag indicating we have initialized our hero inventory. THIS IS A HACK",
    "FortPlayerController:bHasInitializedWorldInventory": "Flag indicating we have initialized our world inventory. THIS IS A HACK",
    "FortLinkToActorComponent:bRegisterWithOwnerMovementComponent": "Flag indicating we should attempt to register w/ the owners projectile movement component to respond to stop events (i.e. Perform Implicit Linking Checks)",
    "FortLinkToActorComponent:bPerformLinkingCheckOnBeginPlay": "Flag indicating we should check on Begin Play of the component (i.e. BeginPlay of the owning Actor)",
    "FortLinkToActorComponent:bMonitorLinkedActorForChanges": "Flag indicating we should not only track for destruction but track in case it moves, so we need to detach (defaults false, has performance implications)",
    "FortLinkToActorComponent:bOverrideBoxExtentForLinkingCheck": "Flag indicating we should override the box extent used to trace during linking check to be LinkingTraceBoxExtentOverride (otherwise uses root component's bounds).\nThis is useful in cases where the root component is not a mesh/collision component (e.g spline component).",
    "FortAthenaSupplyDrop:bReplicateLongUseNotifies": "Flag indicating we should replicate the Long Use Notifies",
    "FortHeldObjectComponent:bUsePreviewMaterial": "Flag indicating we should setup the preview material on the held object",
    "FortLinkToActorComponent:bUseActorLocationForLinkingCheck": "Flag indicating we should use the owning actor's location when sorting hit results during linking check (rather than using the root components center of mass).\nThis is useful in cases where the root component is not a mesh/collision component (e.g spline component).",
    "FortLinkToActorComponent:bUseActorRotationForDirectionVectors": "Flag indicating we use the actors current orientation to find our direction vectors from",
    "FortSpawnActorComponent:bAttachSpawnedActorToOwner": "Flag indicating we want to spawn the actor unattached to the owner of the component",
    "FortDeployableBaseManager:bKeepBasesOnLogout": "Flag indicating we'll keep bases around (won't reset plots) when a player leaves the zone",
    "FortPhysicsObjectManager:EnablePropsSimulateOnBuildingDetachment": "Flag indicating when a building is destroyed, all props attached will check if they can simulate and if so, they will.",
    "AthenaCapturePoint:TeamsBarredFromCapture": "Flag indicating whether or not AIs can capture this point.",
    "BuildingProp_DeimosSpawner:bSortSlotsByBestScore": "Flag indicating whether or not the EQS query will find locations to spawn AI within the radius or on the edge.",
    "FortCustomCameraController:bIsCustomCameraModeEnabled": "Flag indicating whether or not the custom camera mode is enabled",
    "BuildingRift:bOverrideQueryMinDistance": "Flag indicating whether or not we should override the MinDisntace",
    "BuildingProp_CreaturePlacer:GameStateEnable": "Flag indicating whether the spawner will be activated on minigame start or not.",
    "BuildingProp_CreaturePlacer:bEnabledOnGameState": "Flag indicating whether the spawner will be activated on minigame start or not.",
    "BuildingProp_DeimosSpawner:bEnabledOnMinigameStart": "Flag indicating whether the spawner will be activated on minigame start or not.",
    "BuildingProp_CreaturePlacer:bDestroyPreviousOnSpawn": "Flag indicating whether the spawner will destroy the previous pawn on activation.",
    "AthenaCreativeRift:bHasLoadedSettings": "Flag indicating whether this rift has loaded its encounter override settings",
    "FortPluginActorSpawner:bWaitForPlaylistLoad": "Flag indicating whether we wait for the playlist to load or not (will only work in Athena)",
    "TempestMovementComponent:bFloatOnWater": "Flag representing whether or not the weather event should move on top of water",
    "TempestMovementComponent:bShouldIgnoreZMovement": "Flag representing whether the owning actor's z location should be modified",
    "FortStormProgressUpdatedEvent:bStormStopped": "Flag representing whether the storm progress was stopped",
    "FortDaySequenceActor:bStartInvisible": "Flag specifying whether the DaySequenceActor should start invisible *",
    "CinematicSequenceDeviceBase:bLevelSequenceActorAlwaysRelevant": "Flag specifying whether the device should always be relevant for networking. When disabled, this device's playback will only replicate to clients when it is relevant based on proximity",
    "WindSplineComponent:AutoWakeUpPhysicsObjects": "Flag specifying whether the wind spline component should automatically wake up overlapping physics objects. Can be perf intensive for large splines.",
    "FortWindImpulseCylinderDelta:bInitialized": "Flag telling whether this impulse has ever been initialized",
    "FortAthenaMutator_Knockback:bDisplayKnockbackDamageNumbersAsPercentage": "Flag that can be hotfixed on or off to control whether or not we display damage done to players as percentage damage or raw damage.\n     Note that both bStorePlayerKnockbackData and bReplicatePlayerKnockbackData must be true for this to work properly.",
    "PerkMutatorData:bShouldShowBackgroundImage": "Flag that controls whether or not to show the full screen background image behind the blur in the perk selection screen",
    "BuildingContainer:bDisableSpawnLoot": "Flag that indicates the container should not automatically drop loot. The spawn should be handled in BP.",
    "BuildingContainer:bDoNotDropLootOnDestruction": "Flag that indicates the container should not drop loot when it is destroyed",
    "FortAthenaSupplyDrop:bDisableAbilitySystemReplication": "Flag that indicates the supply drop should disable replication of the ability system.",
    "DynamicUIAllowed:bUseActionDomain": "Flag to define an action domain.",
    "FortWeapon:bEnableNativeChargeUp": "Flag to disable built-in charge-up mechanics on charge weapons. Manual charging can be implemented using SetChargePercent. Enabled by default.",
    "FortPhysicsObjectManager:EnableObjectToObjectActivation": "Flag to have a physics object simulate another physics object it hits.",
    "FortPhysicsObjectManager:EnableVehicleToObjectActivation": "Flag to have a vehicle simulate a physics object it hits.",
    "EFortPlayerFeedbackFlags.SubscreenFlow_VoiceReportSubmit": "Flag to identify the voice report category button",
    "FortAthenaExitCraft:bCorrectionMade": "Flag to indicate Van is in position waiting for players so Gravity can now be avoided",
    "FortGameStateDeployableBase:bFireEndOfDayDelegate": "Flag to indicate if the deployable base should fire the end of day delegate in the hud context",
    "FortGameStateSurvival:bFireEndOfDayDelegate": "Flag to indicate if the deployable base should fire the end of day delegate in the hud context (which will trigger the score screen at morning)",
    "FortMissionPopupWidgetData:bShowDescription": "Flag to indicate whether the mission description line should be shown on the mission popup",
    "FortPlayerController:bAccountInventoryWasUpdated": "Flag to say that account inventory was updated last frame",
    "FortPlayerController:bForceWorldInventoryUpdate": "Flag to say that we need a world inventory update next frame",
    "DynamicUIAllowed:bUseLayerOverride": "Flag to use the layer override.",
    "DynamicUIAllowed:bIsUnique": "Flag to use the unique ID system.",
    "DynamicUIUnallowed:bUseUniqueID": "Flag to use the unique ID system.",
    "DynamicUIWidgetTarget:bUseUniqueID": "Flag to use the unique ID system.",
    "FortMissionState:bAlreadyCalledOnAllPlayersLoadedIn": "Flag used for keeping track of whether not OnAllPlayersLoadedIn has been called already",
    "FortAthenaMutator_Mash:bScoringAndIntroMessageInitialized": "Flag used to mark if scoring and the intro message have been initialized.",
    "FortTimeOfDayCurve_Float:bUseCurve": "Flag used to toggle whether to use the curve or the flat value",
    "FortTimeOfDayCurve_LinearColor:bUseCurve": "Flag used to toggle whether to use the curve or the flat value",
    "FortTimeOfDayCurve_Vector:bUseCurve": "Flag used to toggle whether to use the curve or the flat value",
    "DaySequenceModifierComponent:bIsComponentEnabled": "Flag used track whether or not this component is enabled or disabled.",
    "UserOptionDefinition:GenerationFlags": "Flags describing how this user option definition was generated.\n@note Skipped when comparing two option definition structs in order to avoid the Inherited flag preventing a derived\n      class from being able to discard its user option container when it contains only inherited properties.",
    "FortTheaterMapData:bIsTestTheater": "Flags this theater as a test theater (only available in non-release branches)",
    "EAthenaGameMessageDataFlags": "Flags to allow modifications on how a message might be displayed.",
    "EAICustomTargetRequestType": "Flags used to define per-offset what kind of use this offset has\nAlso used by users of this component to query only specific offsets",
    "FortMission:LeecherPity": "Flat addition to leecher scaling multiplier. Range: -1 to 1. Use if all leecher scaling is too harsh/not harsh enough.",
    "FortCreativeItemDropParams:AmountToRemove": "Flat amount of items to drop (if AmountRule is set to FlatAmount)",
    "AircraftFlightConstructionInfo:AirCraftBehavior": "Flight behavior the aircraft paths should follow",
    "FlightParams:AntigravityDown": "Flight gravity multiplier blend for when nose pointing down",
    "FlightParams:AntigravityUp": "Flight gravity multiplier blend for when nose pointing up",
    "FlightParams": "Flight params is meant to hold every tunable variable which can\n      change the behavior of the model. If a particular vehicle wants to\n      modify particular flight params (say, increase top speed while\n      boosting), the best way is to update the model's flight params.",
    "AircraftFlightConstructionInfo:CustomAircraftOffsetFromMidLine": "Flight path offset from midline used if bUseCustomPathSelection is true",
    "FortCharacterPartsRepMontageInfo:bPlayBit": "Flipped each time a montage is played, to make sure this struct is replicated if the same montage is played multiple times in a row",
    "EncounterVariableSelections_Float": "Float Encounter Variable Selections",
    "EncounterVariable_Float": "Float EncounterVariable",
    "MilkshakeControllerComponent:PawnInAirBasedCameraShakeMultiplierLookUpCurve": "Float curve used when calculating PawnInAirBasedCameraShakeMultiplier based on how much the player is looking up",
    "FortAthenaMutator_AddBarrier:TimeToBringDownWall": "Float for time to bring down wall.",
    "EFortItemEntryState.PendingUpgradeCriteriaProgress": "Float number for upgrade criteria progress",
    "FortMovementComp_Character:FloatingControlParams": "Float params",
    "EFortItemEntryState.MultiItemXP": "Float value of the total amount of XP the Multi-Item currently has.  Used to display XP progress toward next level.",
    "CatalogDynamicBundle:FloorPrice": "Floor base price of this bundle; if the final discounted price or the final regular price gets lower than the floor price, it will be automatically set to floor price",
    "EFortBuildingType.Stairs": "Floor with height",
    "EPerceptionSoundType.ProjectileFlyBy": "Fly by projectile",
    "ESpectatorCameraType.DroneFree": "Flying hoverdrone",
    "FortPawnStats:SpeedFly": "Flying speed for the pawn",
    "FortPlayerCameraBase:FocalPointCameraClass": "Focal Point camera class",
    "EventModeFocusActor:Distance": "Focus distance inside which the focus is allowed",
    "AIHotSpot:FocusActor": "Focus of this hotspot",
    "TimeOfDayController_BlueprintBase:bOverride_FogCutoffDistance": "Fog Settings",
    "ValkyrieEditorConfig:UserDefinedProjectTemplateSearchPaths": "Folders searched by the project browser to find project templates",
    "ValkyrieEditorConfig:ProjectSearchPaths": "Folders searched by the project browser to find projects",
    "EMusicClipSyncOptions.TimeFollower": "Follow the emitter's current Time Authority. If it doesn't have one don't play.",
    "EMinigameGameEndPostGameType.Classic": "Follow the traditional Creative / Scoreboard flow.",
    "FortMiniMapIndicatorTextProperties:DisplayTextFont": "Font for display text",
    "EBarrierFoodTeam": "Food teams",
    "RigUnit_MoveFeetToGround:FootEffectorStrengthAlphaList": "Foot effector strength alpha list",
    "RigUnit_MoveFeetToGround:FootEffectorTransformList": "Foot effector transform list",
    "EFortressAIType.FAT_DebugOnly": "For AI not spawned by or controlled by the AI Director.",
    "BuildingContainer:LootSpawnLocation_Athena": "For Athena containers, loot will spawn at this offset from the container",
    "BuildingContainer:LootTossDirection_Athena": "For Athena containers, loot will toss at this angle relative to the container",
    "BuildingContainer:LootTossSpeed_Athena": "For Athena containers, loot will toss from the container at most at this maximum speed",
    "BuildingContainer:LootTossConeHalfAngle_Athena": "For Athena containers, random cone angle within which to toss loot",
    "FortTimeOfDayManager:OnDayPhaseChangeEvent": "For Building Actors, use RegisterForOnDayPhaseChangeEvent instead, as it will help avoid hitches.  (Other actors should be able to use this safely, but there are too many building actors to handle in one frame.)",
    "FortMinigame:bShowPlayersWhoQuitDuringPregameOnScoreboard": "For Competitive matches, display players who quit during pregame on the scoreboard as inactive players.",
    "FortWeaponComponent_RecoilCurve:CurveLengthInSeconds": "For EFortRecoilCurveType::WithTime, curve will be updated for this duration, when non-zero.",
    "SpecialRelevancyMultiSquadControllerGroup": "For ESpecialRelevancyMode::MultiSquad, this is a container for a group of controllers\nthat are a subset of a FSpecialRelevancyGroup's Controllers",
    "SpecialRelevancyMultiSquadControllerGroupsContainer": "For ESpecialRelevancyMode::MultiSquad, this is a container for an array of FSpecialRelevancyMultiSquadControllerGroup",
    "FortPoiManager:PoiGridPrevSizeForDebugDisplay": "For Grid Debug Display...",
    "BuildingContainer:bUseLootProperties_Athena": "For PvE containers, use _Athena loot toss properties",
    "FortExposedAssetPathCustomization:RelativeToPaths": "For RelativeTo types, this array is traversed in order to find the first entry that a relative path can be generated from. If no match can be found, only the asset name is used.",
    "NPCChosenItemData:AdditionalClips": "For Weapon Items, this contains additional ammo clips that should be given with that weapon",
    "ChromeRoute:FinishPOITags": "For a particular route, the POI with this tag is used as a possible finish point.",
    "ChromeRoute:SquadStartSearchParam": "For a particular route, the squad starts with these params are used as the starting point.",
    "DynamicXpSessionAccoladeStats": "For a player, this track how information about how much XP has been granted this session.",
    "EFortActionSourceControlCheckoutSuccessCriteria.AllAssetsCheckedOutOrLocalOnly": "For action to report successful, when execution is finished all assets must either be:\n* checked out\n* Local Only file not in source\nOtherwise action will return failure.",
    "NyxGlassWeaponComponent_Swinging:ComponentIsPreferredSwingMeshTag": "For actors marked with the tag defined in SwingTargetActorUsesPreferredMeshComponent,\n     this tag should be added to a specific mesh component to mark that component as the mesh to use for finding swinging attach points on its owning actor.",
    "EUIExtensionSlot.StaminaOverlay": "For adding a widget that fills the stamina bar",
    "EUIExtensionSlot.InventoryExtensionRow": "For adding additional rows to Inventory Panels",
    "EUIExtensionSlot.UnderDefaultLobbyDetails": "For adding additional widgets underneath all elements of LobbyDetails in the frontend",
    "EUIExtensionSlot.FullScreenMapTab": "For adding tabs to the fullscreen map",
    "EUIExtensionSlot.PostMatchScreenTab": "For adding tabs to the post match screen",
    "FortBaseWeaponStats:MaxAmmoCostPerFire": "For charge-up weapons, ammo cost for a maximum charge attack",
    "FortBaseWeaponStats:MaxChargeTime": "For charge-up weapons, base trigger-hold time before the maximum charge builds up",
    "FortBaseWeaponStats:MinChargeTime": "For charge-up weapons, base trigger-hold time before the minimum charge builds up",
    "FortBaseWeaponStats:MaxChargeDamageMultiplier": "For charge-up weapons, damage multiplier for a maximum charged attack",
    "FortBaseWeaponStats:MinChargeDamageMultiplier": "For charge-up weapons, damage multiplier for a minimum charged attack",
    "FortBaseWeaponStats:FullChargeDurabilityPerUse": "For charge-up weapons, durability to expend for a maximum charge attack. If less than DurabilityPerUse, will be ignored",
    "FortBaseWeaponStats:MaxChargeTimeUntilDischarge": "For charge-up weapons, get the max time charge will last until automatic discharge.",
    "FortBaseWeaponStats:bAutoDischarge": "For charge-up weapons, if true then we'll automatically discharge when max charge time is reached.",
    "FortRangedWeaponStats:FullChargeOverheatHeatingValue": "For charge-up weapons, the amount of heat to add (OverheatHeatingValue) when at max charge. If less than OverheatHeatingValue (eg 0), will be ignored",
    "FortWeapon:ChargeTime": "For charge-up weapons, the amount of time within the min and max charge time.\n              This value goes up for charge up and down for charge down.",
    "FortWeapon:MaxChargeGameplayCue": "For charge-up weapons, the gameplaycue to play when we reach max charge.",
    "FortWeapon:StartChargeGameplayCue": "For charge-up weapons, the gameplaycue to play when we start charge.",
    "FortWeapon:LastChargeTime": "For charge-up weapons, the last valid charge time that was incremented.\n              This value does not reset when the fire input is released.",
    "FortWeapon:AccumulatedChargeTime": "For charge-up weapons, the total amount of time since a charge was started.\n              This value does not go down like ChargeTime.",
    "FortProjectileBase:ChargeUpInitialSpeed": "For charge-up weapons, this curve table row defines the projectile's initial speed by charge percent",
    "FortBaseWeaponStats:ChargeDownTime": "For charge-up weapons, time it takes for a full charge to cool down",
    "FortMaterialParameterID:VariableName": "For confirming that the indices match as expected",
    "EFortNotificationEntryCompletionStatus.MAX": "For count.",
    "EnergyChannelingData:OptionalEnergyChannelingSource": "For debugging purposes, what is the source of this channeling (adding/using) event?",
    "EWinConditionParentType.Mobile": "For desktop and console HUDs",
    "SurvivalObjectiveText:SafezoneStateText": "For each safezone, the objective text that should be displayed per safezone phase",
    "FabricSteppedPreviewFXComponent:TestSpanLength": "For editor testing length in beats of all active notes",
    "FabricSteppedPreviewFXComponent:TestNoteLength": "For editor testing, Note length in beats",
    "FabricSteppedPreviewFXComponent:bTestNotesOn": "For editor testing, turn on the NoteOn state on all FX instances",
    "FortAthenaMutator_ContextTutorial:RayCastDistanceForNearbyEnemyCentimeter": "For enemies",
    "AthenaTrapAIPerceptionStimuliSourceComponent:TrapDiscoverabilityMap": "For every traps that we have/had sight on, whether AI rolled dice to detect it or not",
    "FortMaterialParameterID:VariableIndex": "For experimental purposes, this will be the cached index of the variable name IN the MID.",
    "EFortEmporiumItemLicense": "For explanations of the various license types, see https://certificates.creativecommons.org/cccertedu/chapter/3-3-license-types/",
    "FortAthenaLivingWorldEventDespawnCondition:TimeAsCandidateBeforeDespawn": "For how much time must all the condition be true for the actor to be despawned.",
    "FortPawnSpinParams:LocalSpin": "For in place rotation, for instance caused by the MidlandTornado",
    "FortSplineGroundPath:bMostRecentLocationHasBeenSet": "For indicating whether we've received the spline's end loc yet.",
    "FortAthenaMutator_Barrier:StartObjectiveDamageOnSpecialEvent": "For instance, on the lava floor stopping.",
    "BuildingContainer:InstancedLoot_TossDirection": "For instanced loot (currently only item caches), loot will toss at this angle relative to the container",
    "BuildingContainer:InstancedLoot_TossSpeed": "For instanced loot (currently only item caches), loot will toss from the container at most at this maximum speed",
    "BuildingContainer:InstancedLoot_TossConeHalfAngle": "For instanced loot (currently only item caches), random cone angle within which to toss loot",
    "FortAbilityCost:ItemDefinition": "For item source, the specific item to use",
    "MMRSpawningBracketNPCDataTableRow": "For now, NPC skill is the only thing that gets affected by MMR bracket",
    "EFortPawnDisplayContext.CampaignHeroLoadoutSupport": "For now, also includes ItemShop",
    "FortAthenaVehicle:EmptyDriverInputState": "For now, only the driver slot has valid, editable \"input\" when no player\n              is actually present. This is simulated on clients and server, and also\n              replicated down for synchronization. Later we may want to add these for\n              passenger slots as well for full generality, but it's unlikely that\n              we'll really need to.",
    "FortWindImpulseRadius": "For now, we'll just use wind impulse radius.  But we can retrofit this with a base class for FortWindImpulse and\nadd more subtypes later if we need other shapes.",
    "FortPortableSoftParticles": "For one-to-one mappings, usually in a one-off situation, allows all the data to be bundled.",
    "FMInWorldKnobActorBase:OptionLabels": "For options that do not link to user options, the labels to provide",
    "FMInWorldKnobActorBase:OptionValues": "For options that do not link to user options, the options to provide",
    "FortFollowCam_Settings:TurnDampeningStart": "For partial or just started stick input, this is the starting dampening multiplier.",
    "FortGameState:PawnForReplayRelevancy": "For playback of replays we have an area of relevancy centered around the player that recorded it.\n              During recording, keep track of the pawn that the local player is in possession of so that pawn\n              can be used for queries like world location during playback.",
    "FortGameStateAthena:FlightPathMidLine": "For playlists with 2 aircraft where we'll want to show a midLine e.g. 50 v 50",
    "FortProjectileBase:ChargePercent": "For projectiles from charge-up weapons, returns a float from 0 to 1, with 1.0 indicating full charge",
    "ProjectileMovementDrunkConfig:DrunkGravityScaleCurve": "For ramping drunk projectile gravity. We pull from this for the entirety of travel time, drunk movement or not.",
    "ProjectileMovementDrunkConfig:DrunkSpeedScaleCurve": "For ramping drunk projectile speed. We pull from this for the entirety of travel time, drunk movement or not.",
    "AthenaGameMessageData:TargetPlayerController": "For splitscreen, which player is this message intended?",
    "CosmeticDeveloperSettings:bAllowAccessToHeroOutfitsAndBackblingForTesting": "For testing purposes (only used in PIE, not available in shipping builds), do we allow access to all Hero Outfits and Backblings?",
    "CosmeticDeveloperSettings:bAllowAccessToAllEmotesForTesting": "For testing purposes (only used in PIE, not available in shipping builds), do we allow access to all emotes?",
    "CosmeticDeveloperSettings:bRequireEmoteOwnershipInPIE": "For testing purposes, do we require account ownership of emotes in PIE?  Turn on to test ownership verification in PIE.",
    "CosmeticDeveloperSettings:bRequireSprayOwnershipInPIE": "For testing purposes, do we require account ownership of sprays when set as override assets in PIE?  Turn on to test ownership verification in PIE.",
    "CosmeticDeveloperSettings:bHighPriorityCosmeticsCheats": "For testing purposes. Should cosmetic variant cheats have a higher priortiy than client-side variant hotfixes?",
    "EUIExtensionSlot.DiscoveredAreaTextUnderlay": "For text underlay elements on the 'discovered' display",
    "SpecialEventRewindComponent:RewindLerpTime": "For the first RewindLerpTime seconds of a rewind, we gradually shift from fully using the local recording data\nto fully using the replicated recording data.  After this time, we fully use the replicated data for the rest of the rewind.",
    "EUIExtensionSlot.LevelUpMobile": "For the level up widget at the left-side of the screen",
    "ELeaderboardDisplayType.Default": "For the new leaderboard system this means that this leaderboard is related to the score location with bIsMainWindowLeaderboard set as true,\n       * while for the old leaderboard system it means that this leaderboard is the one related to the score location with scoreMode of type \"window\".",
    "ELeaderboardDisplayType.Extra": "For the new leaderboard system this means that this leaderboard isn't the one related to the score location with bIsMainWindowLeaderboard set as true,\n       * while for the old leaderboard system it means that this leaderboard is the one related to a score location with scoreMode of type \"floating\".",
    "TierTags:TagForTier": "For this Rarity, the list of gameplay tags granted at each rarity.  Used to set unlocking requirements on variants on StW Hero Outfits and Backblings.",
    "FortActionKeyMapping:SubGameUsedIn": "For this, ESubGame::Invalid will mean that it is shared across every mode.",
    "EUIExtensionSlot.VisitedAreaDisplayUnderlay": "For underlay elements on the 'visited' or 'landmark' display",
    "RequestStyleParams:DirectStyleReference": "For use with EStyleSpecificationMethod::DirectReference. The style set containing the desired style to be applied to the material",
    "RequestStyleParams:StyleName": "For use with EStyleSpecificationMethod::StyleSetLookup. The key for the entry in the style set representing the desired style",
    "RequestStyleParams:StyleSet": "For use with EStyleSpecificationMethod::StyleSetLookup. The style set containing the desired style to be applied to the material",
    "ELacklusterTextureGroup.VertexPaint_Color": "For valet lights",
    "ECharacterColorSwatchType.ECharacterColorSwatchType_NumTypes": "For various reasons, we may not use \"Accessory\"... primarily related to the fact that accessory colors are NOT\nstored globally, they are per-character part.\nECharacterColorSwatchType_Accessory UMETA(DisplayName=\"Accessory\"),",
    "FortRangedWeaponStats:MaxDamagePerCartridge": "For weapons with more than one pellet per shot (e.g. shotguns), the maximum damage that can be dealt with a single shot. -1 for unlimited.",
    "FortMotorSimComponent_PatternPlayer:StartlineState": "For when the vehicle is not yet driving, eg race countdown",
    "MissionPerDifficultyProperties:ValidDifficulties": "For which zone difficulty(ies) should these properties be used?  If empty, it will match ALL difficulties.  (Therefore, any empty set should be the last entry in the array, as otherwise it will never match later entries.",
    "ZoneThemeDifficultyProperties:ValidDifficulties": "For which zone difficulty(ies) should these properties be used?  If empty, it will match ALL difficulties.  (Therefore, any empty set should be the last entry in the array, as otherwise it will never match later entries.",
    "FortDeveloperSettings:bForceBRCullDistances": "Force Cull Distance Overrides on Building Actors to use BR's defaults",
    "EAthenaLootDropOverride.ForceDestroy": "Force Destroy of Item",
    "ERedeemRealMoneyPurchaseRefreshType.ForceCurrent": "Force a query current platform, but active subscription platform only if auto-refresh conditions are met",
    "ERedeemRealMoneyPurchaseRefreshType.ForceAll": "Force a query of current platform and all platforms with offline access regardless of cool down",
    "AthenaSeasonPageGrid:bForceTimeLock": "Force a time lock on the page, if its false, the page will still time lock if any reward inside has an unlock delay.",
    "BuildingSMActor:ParentActorToAttachTo": "Force attach this actor to specified actor",
    "PhysicsConstantForceData:Force": "Force being applied",
    "ECrucibleWhitelistOverride.ForceOff": "Force crucible on for everyone.",
    "FortAthenaMutator_CreativePartyRiftEmotes:bForceAddEmotes": "Force emotes to be added even if the playlist does not allow them",
    "MilkshakeControllerComponent:ForceFeedbackEffects": "Force feedback effects that are chosen from based on earthquake magnitude. Higher array indicies indicate higher earthquake magnitudes",
    "FortPlayerPawnAthena:DamageForceFeedback": "Force feedback to play when we take damage.",
    "RockVehicleAbility_Jump:MinJumpSeconds": "Force jump to stay active for this amount of time (mouse button taps have significantly variable hold time)",
    "FortAthenaMutator_Uranium:bForcePerkPickerOnCheckpoint": "Force players to teleport out and pick a perk at checkpoints",
    "AntelopeInPersistent:BounceForceBack": "Force that should be applied to the back of the vehicle after passenger bounces",
    "FortAthenaAntelopeVehicle:BounceForceBack": "Force that should be applied to the back of the vehicle after passenger bounces. Made a UPROPOERTY for sync marshaling",
    "EDayNightCycleMode.FixedTime": "Force the day/night cycle to be fixed at the specified constant time",
    "FortMinigameSettingsBuilding:bForceStartAtMaxPlayers": "Force the game to start when it reaches the maximum player count",
    "EAthenaLootDropOverride.ForceDrop": "Force the loot to drop when the player dies",
    "EFortServerTickRate.Twenty": "Force the server to run at 20hz",
    "EFortServerTickRate.Thirty": "Force the server to run at 30hz",
    "EFMDeviceCablePortComponentAllowMultipleConnections.ForceSingle": "Force, multiple ports are allowed explicitly",
    "FortGameplayCueNotify_Loop:LoopingForceFeedbackEffect": "ForceFeedback Effect played for the entire duration of the gameplay cue. This should be looping!",
    "FortBurstEffectData:BurstForceFeedbackEffect": "ForceFeedback Effect to be played on GC execution. Should never be looping effects!",
    "FortGameplayCueForceFeedbackInfo:ForceFeedbackEffect": "ForceFeedback effect to apply",
    "FortGameplayCueForceFeedbackInfo:FarForceFeedbackEffect": "ForceFeedback effect to apply if outside EffectRadius but inside FarEffectRadius",
    "FortProjectile_MOBATurret:ForcedHitResults": "Forced hit results to provide in the event of explosion",
    "FortPickup:bForceDefaultFlyTime": "Forces the default fly time to get used instead of a splinecurve",
    "AthenaCarPlayerSlot:bForceCrouch": "Forces this seat to crouch when in it.",
    "CreativeFunctionalTest:ForceIgnoreErrorsAndWarnings": "Forces this test to ignore log errors and warnings unless specifically set to make it fail.\n**WARNING** Only the Finish Test node result will be used to determine the success/failure of this test.\nErrors that result from bugs in your test code will only cause the test to fail if it prevents\nthe test from completing. Recommend only turning this on when you've finished your test and it's solid.",
    "EFortMatchmakingPrivacyConfiguration.ForcePrivate": "Forcing matchmaking privacy to private",
    "EFortMatchmakingPrivacyConfiguration.ForcePublic": "Forcing matchmaking privacy to public",
    "FortHabaneroTier:ForegroundIcon": "Foreground Icon to visually identify this tier on Habanero display cards.",
    "FortGameStateComponent_VictoryCrowns:KillFeedFormat_Dropped": "Format that is used when adding a 'drop' message to the kill feed.\nMust include these format arguments: {VictimStyle}, {Victim}\nExample: <{VictimStyle}>{Victim}</> dropped a Victory Crown!",
    "FortGameStateComponent_VictoryCrowns:KillFeedFormat_PickedUp": "Format that is used when adding a 'pickup' message to the kill feed.\nMust include these format arguments: {VictimStyle}, {Victim}\nExample: <{VictimStyle}>{Victim}</> picked up a Victory Crown!",
    "FortVehicleTrick:Name": "Formatted trick name, {Degrees} if you want to show the degree in the name.",
    "EFortStatValueDisplayType": "Formatting info for displaying stats in the UI",
    "FortEnhancedInputUserSettings": "Fort Enhanced Input User Settings holds registered IMCs and profiles which contain player set mappings\nwhich override the registered IMC's mappings when Enhanced Input Subsystem Interface rebuilds control mappings.",
    "FortObjectiveFilter_PlayerEliminationBase:KilledFortPawn": "Fort Pawn that was killed in this event",
    "FortVerbMessage_ScoredPlayerElimination:KilledFortPawn": "Fort Pawn that was killed in this event",
    "FortSmartObjectComponent": "Fort version of the SmartObjectComponent with few additions, such as having customizable modifier/multipliers for the weighted randomized slot picking",
    "FortAIDirector:FortAIPawns": "FortAIPawns that have Registered with the system. This will only contain Pawns that have a Controller attached. Order is not preserved (RemoveAtSwap is used)",
    "FortControllerComponent_Inspector": "FortControllerComponenet_Inspector encapsulates inspector-specific logic to be executed on the client",
    "FortControllerComponent_SocialInspector": "FortControllerComponenet_SocialInspector allows players to inspect other players for social information (e.g. name)",
    "FortControllerComponent_IndicatedActorManagement": "FortControllerComponent_IndicatedActorManagement manages a list of actors that should be focused.\nWe are allowing the designers to tell us what actor and how it should be focused, ala indicator layer or stencil.\nThis will manage data for the focused actor and give info to other systems that need to request it.",
    "FortControllerComponent_Autofire": "FortControllerComponent_Interaction handles interact traces and processing \"use\" for actors that are hit by those traces",
    "FortControllerComponent_Interaction": "FortControllerComponent_Interaction handles interact traces and processing \"use\" for actors that are hit by those traces",
    "FortControllerComponent_QuickEdit": "FortControllerComponent_QuickEdit handles the Quick Edit building edit mode",
    "FortControllerComponent_SmartBuild": "FortControllerComponent_SmartBuild handles the Smart Build building mode",
    "XpEverywhereUIComponent:XpEverywhereHiddenElementTags": "FortHUDElements we hide when displaying the XP Bar + Level Up Widgets on the HUD",
    "FortGameplayCueNotifyAthena_FallDamageImmunity:LayeredAudioVelocityName": "FortLayeredAudioComponent parameter that should be updated based on the owning player's current Z speed.",
    "FortLevelInstanceDeviceBase:FortLevelStreamComponent": "FortLevelStreamComponent that loads streamed levels to the server and streams them to the client at runtime",
    "FortLocalizableMessageComponent": "FortLocalizableMessageComponent handles the localization of devices text variables in client\nand sets them to the corresponding properties",
    "FortMantisWeaponComponent": "FortMantisWeaponComponent",
    "NPCDynamicServiceRow:NPC": "FortNonPlayerConversationComponent will support services based off this tag, Conversation.NPC.Wildcard can be used to give the service to all",
    "FortOverrideData_CurveTableEntry": "FortOverrideData that contains information to generate a curve table entry\nNote that this currently supports single values, not the whole curve",
    "FortOverrideData_DataTableEntry": "FortOverrideData that contains information to generate a data table entry",
    "FortPawnComponent_Phasing": "FortPawnComponent_Phasing handles pawn phasing through phaseable actors.",
    "FortPhysicsChainConstraint": "FortPhysicsChainConstraint",
    "FortPhysicsChainWeaponComponent": "FortPhysicsChainWeaponComponent\n\n Attached to a weapon to allow automatic creation of chains at runtime.",
    "FortPhysicsObjectComponent": "FortPhysicsObjectComponent\n\n Component that adds physics simulation to actors.",
    "FortPhysicsOverlapComponent": "FortPhysicsOverlapComponent\n\n Component that dynamically creates a sphere overlap specifically for physics objects for a scene component\n Currently used to keep objects from sleeping when overlapping, but could be expanded for other uses in the future.",
    "CcaCsvCosmeticPropertiesData:FortReleaseVersion": "FortReleaseVersion is intended to be set during import in the OnPostImport function which is why it's optional.",
    "FortUndergroundVolume": "FortUndergroundVolume allows players to go underneath landscape without the normal penalties",
    "FortWaterBodyExclusionVolume": "FortWaterBodyExclusionVolume allows players not enter surface swimming when touching a water volume",
    "FortWeaponComponent_ScopeAnimation": "FortWeaponComponent_ScopeAnimation handles animation for a weapon scope",
    "FortWeaponComponent_Swinging": "FortWeaponComponent_Swinging handles targeting and applying effects on tick for the swinging movement mode",
    "FortWeaponComponent_TargetModeSelector": "FortWeaponComponent_TargetModeSelector handles user selectable weapon target modes, e.g. scope modes.",
    "FortWeaponComponent_TargetModeSelector_Zoom": "FortWeaponComponent_TargetModeSelector_Zoom contains nativized helper functions for perf improvements",
    "FortNavModifierVolume": "Fortnite extended version of the NavModifierVolume that supports modification of only a specific-whitelisted Navmesh Class",
    "FortPlayspace": "Fortnite specific implementation of a Playspace",
    "McpPrivacySettings": "Fortnite specific private settings to control what the user wants to opt out of",
    "FortGameUserSettings:FortniteReleaseVersion": "Fortnite specific versioning of the game user settings in the //Fortnite/Release-* stream",
    "FortPoiVolume": "Fortnite specific volume class used to mark Points of Interest",
    "FortPlayspaceComponent": "Fortnite subclass of PlayspaceComponent to allow us to add Fortnite specific functionality to all components used in Fortnite",
    "FortOnlineBeaconHost": "Fortnite version of the beacon host global object",
    "EFortInputMode": "Fortnite's UI modes",
    "FortCurieElementDefinition": "Fortnite-specific implementation of Curie element definition",
    "FortCurieEntityStateDefinition": "Fortnite-specific implementation of Curie entity state definition",
    "FortCurieMaterialDefinition": "Fortnite-specific implementation of Curie material definition",
    "FortAIPerceptionComponent": "Fortnite-specific perception component",
    "DigestedVehicleDriving:ForwardPIDController": "Forward PID Controller",
    "VehicleDriving:ForwardPIDController": "Forward PID controller",
    "FortLobbyBeaconStateOutpost": "Forward declarations",
    "FortLobbyBeaconStatePvE": "Forward declarations",
    "IceGroundPath:ForwardAxis": "Forward direction of static mesh",
    "CreativeRoyalePlayspaceComponent_LevelReset:FoundActorsDied": "Found actors that have Died",
    "CreativeRoyalePlayspaceComponent_LevelReset:FoundActorsDamaged": "Found actors that have been Damaged",
    "EAthenaSeasonMapIconState.Interacted": "Found and interacted with by the player",
    "EAthenaSeasonMapIconState.Found": "Found by the player, but not interacted with",
    "BuildingFoundation": "Foundation Actor, static mesh is hidden in game",
    "WorldTileFoundation": "Foundation Actor, static mesh is hidden in game",
    "ENavOptionFallbackDir.Left": "Four cardinal directions",
    "FortWeapon:InputQueueTimePercent": "Fraction of fire interval time to queue an early input",
    "FortRangedWeaponStats:RecoilRecoveryFraction": "Fraction of recoil applied that we should auto-recover",
    "ControlPointInstanceData:BonusPointsRemainder": "Fractional amount of bonus points remaining from previous accrual (since we only deal with integers for UI and win condition)",
    "ControlPointInstanceData:PointsRemainder": "Fractional amount of points remaining from previous accrual (since we only deal with integers for UI and win condition)",
    "FrameTimeSnapshot:FrameTimeAverageMS": "Frame time average over the course of this snapshot.",
    "CumulativeFrameTimeWithoutSleepLimits:FrameTimeWithoutSleep": "Frame time without sleep threshold",
    "SpecialEventRewindComponentRecordingFastArray_PlayerPawn:Frames": "Frames of recorded data",
    "FMDeviceCableManagerComponent:FreeDeviceCables": "Free cables owned by this component",
    "FortAthenaMutator_ButterflyEvent:PawnGatherFrequency": "Frequency in seconds for attempting to gather additional pawns after the initial batch",
    "FortAthenaMutator_Disco:PointAccrualFrequency": "Frequency of point accrual across all control points",
    "FortPlayerSurveyCMSFrequentlyAskedQuestion": "Frequently asked question data structured for use with CMS",
    "WaterControlParams:FrictionDirectionChangeMultiplier": "Friction multiplier (usually < 1) when changing direction.",
    "FlyingRidableControlParams:FluidFriction": "Friction to slow down the creature when moving through the air",
    "FlyingRidableControlParams:AirFriction": "Friction value to use when flying a ridden creature to orient the creature",
    "FortGravityGunHolder:TrajectorySplineFriction": "Friction when calculating the trajectory spline using CalculateProjectileTrajectorySplineWithHit.",
    "WaterControlParams:Friction": "Friction, ie how floaty or snappy is changing direction.",
    "WaterControlParams:FrictionSprinting": "Friction, ie how floaty or snappy is changing direction.",
    "EFortSocialFriendRequestMethod.PartyContextRewriteHelper": "Friend Request was sent using FPartyContextRewriteHelper",
    "EFortSocialFriendRequestMethod.SocialInteraction_AddFriend": "Friend Request was sent using SocialInteraction_AddFriend",
    "EFortSocialFriendRequestMethod.SocialInteraction_AddPlatformFriend": "Friend Request was sent using SocialInteraction_AddPlatformFriend",
    "EFortSocialFriendRequestMethod.MassImportPlatformFriends": "Friend Request was sent using UFortSocialToolkit::TryMassImportPlatformFriends()",
    "EFortSocialFriendRequestMethod.LobbySuggestion": "Friend Request was sent using the \"Add Friend\" button in the player's TeamMemberPedestalNameplate",
    "EFortSocialFriendRequestMethod.LobbyPlayerPanel": "Friend Request was sent using the \"Add Friend\" in the FortLobbyPlayerPanel",
    "EFortSocialFriendRequestMethod.AutoImportPlatformFriends": "Friend Request was sent while UFortSocialToolkit::bAutoImportPlatformFriends was enabled and a new platform friend user was added to the OnlyFriendsOnPlatformList",
    "FriendCode:Code": "Friend code",
    "FriendCode:CodeType": "Friend code",
    "BagelLeaderboardEntry:Rank": "Friend leaderboard rank of the entry",
    "MashLeaderboardEntry:Rank": "Friend leaderboard rank of the entry",
    "FortItemPreviewActor:ZoomLevel": "From 0 to 1. 0 = Zoomed Out camera, 1 = Zoomed In Camera, in between = Lerp",
    "FortMatchmakingMemberData:CurrentGameId": "From Game State",
    "FortMatchmakingMemberData:CurrentGameSessionId": "From Game State",
    "FortMatchmakingMemberData:CurrentGameType": "From Game State",
    "FortAthenaAIBotController:DelayedStimulus": "From Perception skill, we might have to process stimulus with a delay, so queue it up here",
    "PartyMemberVariantCache:fT": "From Transform - if the current variant cache was replicated as a result of a transformation emote",
    "EFortAbilityTargetingSource.PawnForward": "From the pawn's center, in the pawn's orientation",
    "EFortAbilityTargetingSource.PawnTowardsFocus": "From the pawn's center, oriented towards camera focus",
    "EFortAbilityTargetingSource.Camera": "From the player's camera towards camera focus",
    "EFortAbilityTargetingSource.WeaponForward": "From the weapon's muzzle or location, in the pawn's orientation",
    "EFortAbilityTargetingSource.WeaponTowardsFocus": "From the weapon's muzzle or location, towards camera focus",
    "EStructuralWallPosition.Back": "Front of the grid cell",
    "EFortConnectivityCubeFace.Front": "Front wall cube face",
    "EFortGameFeature.MinimalLobby": "Frontend Lobby menu where you can see the store and select which game to play",
    "FortFloatingPetAnimInstanceControls:BackpackTargetVectorTransformDirection": "Frontend Settings",
    "EmporiumSettings:Environment": "Frontend used by the Emporium plugin (reopen the tab to see the change)",
    "FortFrontendLevelScriptActor": "Frontend-specific level script base class.",
    "OwnedRealitySaplingData:FruitStates": "Fruit states for each fruit bud/slot on the sapling",
    "TankWeaponAimingData:AimingPitchAdjust": "Fudge number to add to the pitch to get the 3D reticle to line up with the camera center.",
    "GameplayCueNotify_Jetpack_FuelRegen:OnFuelRegenRampComponent": "Fuel Regen Ramp Component",
    "FortVehicleFuelComponent:FuelTankCapacity": "Fuel Tank capacity - how many fuel-units can this vehicle store in the tank",
    "FortWeaponRangedOctopusTowhook:TowhookFuelCost": "Fuel cost of firing",
    "CatalogGiftInfoEditor:GiftRecordIds": "FulfillmentIDs recorded as purchased by the gift GIVER (normal offer fulfillments are given to RECEIVERS)\nTypically this is just used to enforce purchase limits.\nThese IDs don't currently need to correspond to real fulfillments and nothing is actually given.",
    "RmtPurchaseHistoryEntry:FulfillmentId": "FulfillmentId for this purchase",
    "EFortWeaponChargeStateForFireFX.Over": "Full charge.",
    "GasEventHistory:Items": "Full list of GAS events",
    "ELetoDisplayMode.SingleToggle": "Fullscreen viewport for one player, but players can swap control over who's is displayed and who's is dormant",
    "ELetoDisplayMode.PrimaryOnly": "Fullscreen viewport for the primary player only, regardless of the other player's existence",
    "EFortTestGoalActorDot.Dot3D": "Fully 3D dot-product using the Goal Actor as the start location of both direction vectors.",
    "ValkyrieEditorPermissionSettings_Blueprints:AllowedFunctions": "Functions to allow",
    "FortQuestObjectiveStatTableRow:Type": "Fundamental type of objective",
    "FortQuestObjectiveStatXPTableRow:Type": "Fundamental type of objective",
    "FortQuestObjectiveStat:Type": "Fundamental type of objective - display as first property, but declared here for memory efficiency",
    "WarEffortFundingOptionData": "Funding Choice: 2 options. First to hit the target amount becomes funded.",
    "CatalogPurchaseInfo:CurrencySubType": "Further specify the currency",
    "CatalogPurchaseInfoGift:CurrencySubType": "Further specify the currency",
    "DagwoodManagedState:FutureInputs": "Future Inputs, to help more accurately predict/repredict SP clients\nFIXME: this is being repped to AP clients unnecessarilly but we cant have rep conditions on properties in structs\npulling this out into a seperate struct is an option but complicates the rest of the code. Since we expect to\nre-generalize this stuff, we will consider these problems then",
    "FortGameStateAthena:SignalInStormLostSpeed": "GAPP signal Regen speed",
    "FortGameStateAthena:SignalInStormRegenSpeed": "GAPP signal Regen speed",
    "FortGameStateAthena:StormCNDamageVulnerabilityLevel0": "GAPP storm damage buff",
    "FortGameStateAthena:StormCNDamageVulnerabilityLevel1": "GAPP storm damage buff",
    "FortGameStateAthena:StormCNDamageVulnerabilityLevel2": "GAPP storm damage buff",
    "FortGameStateAthena:StormCNDamageVulnerabilityLevel3": "GAPP storm damage buff",
    "GasDebuggerMenu": "GAS debugger actor. We use an actor so that we can track server-side data and send it to the requesting client\nIt seems we can't hide this actor entirely under WITH_IMGUI as it's a UCLASS, but we can hide its IMGUI functionality",
    "GasEventHistory": "GAS event history. This enables you to record events in your ASC, so that the debugger can show them in the Event History page. Follow these steps to implement this and enable that page:\n1. Add one of these to your AbilitySystem component as a private member (e.g. FGasEventHistory EventHistory)\n2. Implement each subclass of FGasEvent into its respective function override in your component\n              (e.g. in your NotifyAbilityFailed override, create FGasEvent_NotifyAbilityFailed at the start of the function, then call Commit() at the end.)\n3. Implement IGasEventHistoryProvider in your ASC, and return the event history in your GetGasEventHistory() override so the debugger can access it.\n              (e.g. virtual const struct FGasEventHistoryRef GetGasEventHistory() const { return EventHistory; }",
    "TempestTornadoForcesComponent:PawnInGE": "GE applied to any pawns that enter the tornado",
    "FortAthenaMutator_Skyfire:InPrisonAndPenaltyPrisonGE": "GE applied when the player is in the prison or penalty prison and removed when they leave.",
    "TempestTornadoForcesComponent:BurstDamageGE": "GE that applies a large burst of damage to some objects in the tornado",
    "TempestTornadoForcesComponent:PeriodicDamageGE": "GE that periodically applies small amounts of damage to objects in the tornado",
    "FortPawn:MaxHealthApplicationGameplayEffect": "GE to apply when this pawn is at max health",
    "TempestTornadoForcesComponent:RecentlyRemovedGE": "GE to mark Actors as recently removed - automatically applied when an actor is removed",
    "FortAthenaMutator_Skyfire:BlockInventoryActionsGE": "GE used to block inventory/interact/pickup actions during the inventory swap on abduction",
    "HeroAbilityKit:RequiredGPTags": "GPTags required for this ability to be available for player",
    "HeroItem:RequiredGPTags": "GPTags required for this item to be given",
    "BuildingActor:MyGuid": "GUID assigned at level save time, unique within a level but not globally as levels can be duplicated",
    "PlaylistOptionLevelValue:LevelInstanceGuid": "GUID for the level",
    "CreativeDeviceInfo:DeviceTrackingGUID": "GUID for this device",
    "VkResolvedModule:ModuleId": "GUID for this module",
    "FortItemEntry:ItemVariantGuid": "GUID identifying which item variant the items is referencing",
    "HarmonixPlayerComponentBase:Volume": "Gain in decibels",
    "HarmonixPlayerComponentBase:VolumeTransitionTime": "Gain in decibels",
    "EFortQuestObjectiveStatEvent.Acquire": "Gain one or more of a specific item",
    "EFortQuestObjectiveItemEvent.Acquire": "Gain one or more of a specific item, on the backend",
    "FortAthenaMutator_GG:ElimsWithFinalTierToWin": "Gain this many eliminations with the final tier to win.",
    "FortMutatorGamePhaseStepMusicEvent:Step": "Game Phase Step to trigger the music event on.",
    "FortMutatorGamePhaseMusicEvent:Phase": "Game Phase to trigger the music event on.",
    "FortAudioTODComponent": "Game State Component for registering with the Time Of Day system",
    "FortGameStateComponent_GroupQuests": "Game State Component to manage centralized granting and updating of quests to group scoped participant sets",
    "FortGameStateComponent_PartyQuests": "Game State Component to manage centralized granting and updating of quests to party scoped participant sets",
    "FortGameStateComponent_SquadQuests": "Game State Component to manage centralized granting and updating of quests to squad scoped participant sets",
    "ESettingType.RegionHeader": "Game Tab Settings",
    "FortNonPrimaryMission:ContextTagQuery": "Game context tag query that needs to be satisfied for this mission to be considered a viable possibility.  This query can check against theater, region, tile, zone theme, and mission alert category gameplay tags (and possibly others).",
    "AthenaBattlePassOffer:OfferPriceRowHandle": "Game currency cost of the reward",
    "FortMinigameSettingsBuilding:GameDescriptionData": "Game description that can be displayed to other users when starting a game.",
    "FortPIEMissionOverrideData:GameDifficulty": "Game difficulty to use for PIE, only used if MissionGenerator is specified",
    "EFortMinigameState.PostGameEnd": "Game ended naturally",
    "ValkyriePluginDescriptor:GameFeaturePluginDescriptor": "Game feature plugin part of the VK plugin descriptor.",
    "EAthenaGamePhase.Setup": "Game is setting up and no player spawning is allowed.",
    "QuestCategoryHeaderData:IncludedGameModeTags": "Game mode tags that allow this header group. If empty, all game modes will be considered allowed.",
    "QuestCategoryHeaderData:DisabledGameModeTags": "Game mode tags that disable this header group.",
    "EFortServerGameMode": "Game mode the server is currently running",
    "EmptyServerReservation:PlaylistId": "Game mode to play",
    "MatchmakingParams:PlaylistId": "Game mode to play",
    "FortGameStateComponent_AffiliationManager:GameParticipantFaction": "Game participant faction that is associated to actors not being in monster team",
    "MMRPhaseSpawningDataTableInfo:GamePhaseIndexToSpawn": "Game phase index at which this spawning info applies",
    "FortCreativeStormShield:GamePhaseStep": "Game phase step that the storm shield is currently in.",
    "FortGameSessionDedicatedCampaign": "Game sessions for STW dedicated servers",
    "ValkyrieEditorSettings:GameFeatureDataClass": "Game specific GameFeatureData class",
    "FortGameStateComponent_AssignedObjective": "Game state component for AssignedObjectives which are objectives that X number of squads are assigned to. This component is in charge of\nchoosing which squads should be assigned to which objective and finding valid locations for the objectives to spawn. Currently BP handles\nspawning the objectives and actually \"assigning\" those objectives to the squads",
    "FortGameStateComponent_ScriptedObjectMovementManager": "Game state component that coordinates the transformation of object structures.",
    "FortGameStateComponent_MidMatchObjectiveParent": "Game state component that holds shared functionality for all mid match objectives. For use as a parent of individual objective game state components (native or BP).",
    "TornadoRadialForce:StartTime": "Game time force will begin fading in",
    "WindField:StartTime": "Game time force will begin fading in",
    "TornadoRadialForce:StopTime": "Game time force will have completely faded out.  If <= 0, the force will never end.",
    "WindField:StopTime": "Game time force will have completely faded out.  If <= 0, the force will never end.",
    "LiquidRibbonSplineDetachment:TimeDetached": "Game time when the detachment occurred",
    "MinigameScoreEntry:TimeRecorded": "Game timestamp for when the score was recorded; used for temporally ordering scores of the same value",
    "EFortMinigameState.PostGameAbandon": "Game was abandoned forcefully",
    "CatalogOffer:MetaInfo": "Game-Specific Key value pairs (available to client and server)",
    "CatalogOfferDefinition:ServerMetaInfo": "Game-Specific Key value pairs that only the server can see",
    "CatalogStorefrontMatch:MetaData": "Game-Specific Meta-data which can be used to determine if this match filter is active",
    "FortGameplayAbilityTargetData_SingleTargetHit": "Game-specific additions to SingleTargetHit tracking",
    "EStoreCurrencyType.Other": "Game-specific interpretation. Use CurrencySubType to further qualify.",
    "GameHubPlayspace": "GameHub implementation of Playspace",
    "FortPlayspaceGameMode": "GameMode that that drives all Fortnite modes that will use the Playspace system and is derived from Athena (which is the \"core Fortnite tech\" that drives all future Fortnite games)",
    "FortGameModeBR": "GameMode that that drives the Battle Royale mode and is derived from Athena (which is the \"core Fortnite tech\" that drives all future Fortnite games)",
    "EAthenaRoundsMutatorPhase.GamePhase_Setup": "GamePhase is EAthenaGamePhase::Setup",
    "EAthenaRoundsMutatorPhase.GamePhase_Warmup": "GamePhase is EAthenaGamePhase::Warmup",
    "EAthenaRoundsMutatorPhase.MatchEndedPrematurely": "GamePhase jumped to EAthenaGamePhase::EndGame before we reached MatchEndUI.\nThis probably means that low-level code ended the match automatically.\nThe LTM may need to override a mutator function, alter playlist settings, etc. to prevent this.",
    "SupplyDropSubPhaseModifier:GamePhase": "GamePhase type of the subphase this modifier effects",
    "FortGameState:GameSessionId": "GameSessionID for analytics",
    "FortGameStateComponent_RealitySapling": "GameState Component for managing Reality Saplings (s21 persistent trees that players can plant and nourish)\nThis is in charge of spawning the persistent reality saplings at match start",
    "FortPlayspaceGameState": "GameState that that drives all Fortnite modes that will use the Playspace system and is derived from Athena (which is the \"core Fortnite tech\" that drives all future Fortnite games)",
    "FortGameStateBR": "GameState that that drives the Battle Royale mode and is derived from Athena (which is the \"core Fortnite tech\" that drives all future Fortnite games)",
    "FortGameStateComponent_RadiusTracker": "GameStateComponent that manages Radius Trackers for all players.\nA Radius Tracker is a map hint that draws an area on the map and mini map that gives players a general area of where an actor is",
    "ESettingType.MoveStickDeadZone": "Gamepad Config Tab Settings",
    "FortAthenaExitCraft:ExitCraftInfo": "Gameplay",
    "BuildingTrap:AbilitySet": "Gameplay Ability Set for trap-specific abilities",
    "FortAIPawn:DefaultGameplayAbilitySets": "Gameplay Ability Sets that will be applied when the AI is created.",
    "FortAttachableProjectileComponent:OnAttachCue": "Gameplay Cue that plays on attach",
    "FortAttachableProjectileComponent:OnDetachCue": "Gameplay Cue that plays on detach",
    "FortAthenaMutator_Chrome:FuelSettingGE": "Gameplay Effect for fuel setting to use on spawning vehicles.",
    "FortSpecialEventGEData:GameplayEffect": "Gameplay Effect to apply.",
    "FortAthenaMutator_SynchronizedTeleport:HidePawnGameplayEffectClass": "Gameplay Effect used to hide the pawn and make sure it stays hidden until we clear the gameplay effect\nThis gameplay effect must add a gameplay tag from the Pawn Hide category found at UFortGameplayTagData::GetPawnHideTagCategory() or else it will NOT work",
    "FortAthenaMutator_SpecialEvent:GameplayEffectsToApplyOnLogin": "Gameplay Effects that are added to all players.\n     NOTE: Do NOT use for gameplay effects that spawn passive, client-side gameplay abilities. These do NOT work because they will attempt to activate the ability on the client before the ASC on the client is fully initialized.\n     In these cases you should add abilities by adding an Ability Set to the playerlist modifier.",
    "FortPawnComponent_PassiveHealer:GameplayEffectsToApply": "Gameplay Effects to apply at spawn on this NPC",
    "FortAthenaMutator_Cobalt:RiftTeleportEventTag": "Gameplay Event used to trigger rift-in effects",
    "FortFloatingPetAnimInstanceControls:RootYawOffsetMultiplier": "Gameplay Settings",
    "EncounterVarRow_GameplayTag": "Gameplay Tag Encounter Variable row",
    "BuildingContainersFoundEntry:GameplayTag": "Gameplay Tag that identifies the type of Building Container in the BuildingContainers\n array. There will be an entry of this struct for each of these supported Gameplay Tags\n in the BuildingContainersFound array for the Loot Controller. The supported Gameplay\n Tags representing types of Loot that are available in the Loot Controller Menu.",
    "AthenaAIServiceGroupInfo:GroupTags": "Gameplay Tag to identify a specific group",
    "FortAthenaMutator_Mash:ReportQS2KillStreakMultiplier": "Gameplay Tag used to broadcast a custom verb message for kill streak multiplier to each player in QS2.",
    "FortAthenaMutator_Mash:ReportQS2TeamScoreTag": "Gameplay Tag used to broadcast a custom verb message for team scores to each player in QS2.",
    "FortAthenaLivingWorldStaticPointProvider:FiltersTags": "Gameplay Tag used to filter point providers in EventData.",
    "FortAthenaLivingWorldVolume:FiltersTags": "Gameplay Tag used to filter point providers in EventData.",
    "FortAthenaPatrolPathPointProvider:FiltersTags": "Gameplay Tag used to filter point providers in EventData.",
    "FortAthenaPointAroundPlayerProvider:FiltersTags": "Gameplay Tag used to filter point providers in EventData.",
    "FortAthenaMutator_Mash:ReportTeamScoreChangesTag": "Gameplay Tag used to report team score changes to each player's quest manager.",
    "FortAthenaMutator_Mash:ReportTeamScoreTag": "Gameplay Tag used to report team scores to each player's quest manager.",
    "FortGameMode:GameModeGameplayTags": "Gameplay Tag(s) associated with gameplay context by this game mode.",
    "FortAthenaPatrolPath:GameplayTags": "Gameplay Tags",
    "FortAthenaVehicleSpawner:GameplayTags": "Gameplay Tags",
    "FortEQSPrevisActor:GameplayTags": "Gameplay Tags",
    "FortAthenaMutator_CustomCharacterParts:SkinMetaTagsToSkip": "Gameplay Tags for character customizations we will NOT override",
    "TeamBucketCosmeticLoadoutContainer:SkinMetaTagsToSkip": "Gameplay Tags for character customizations we will NOT override",
    "BuildingContainersArrayEntry:GamePlayTags": "Gameplay Tags from the Building Container",
    "FortObjectiveFilterType_VehicleFilter:VehicleTags": "Gameplay Tags on the Vehicle",
    "CustomLootOverrideData:PlaylistContextTagsToAdd": "Gameplay Tags that will be added to the Playlist Context.\n     This is used to make sure that the correct loot is spawned when plug-ins like Primal are currently active.",
    "CustomLootOverrideData:PlaylistContextTagsToRemove": "Gameplay Tags that will be removed from the Playlist Context.\n     This is used to make sure that the correct loot is NOT spawned when plug-ins like Primal are currently active.",
    "DAD_CosmeticItemUserOption:DefaultVariants": "Gameplay Tags to determine variant data.",
    "PickedTurnTransitionData:GameplayTagsToRemoveOnFinished": "Gameplay Tags to remove once the transition is completed",
    "TurnTransitionData:GameplayTagsToRemoveOnFinished": "Gameplay Tags to remove once the transition is completed",
    "EncounterMobAnchor:FilterTags": "Gameplay Tags used to filter anchors.",
    "EncounterGameplayVolume": "Gameplay Volume with encounter specific functionality.",
    "FortControllerComponent_RealitySapling:SaplingPlantedGameplayEventTag": "Gameplay ability applied to the player pawn when sapling is planted.",
    "HomebaseNodeGameplayEffectDataTableRow:Attribute": "Gameplay attribute for the gameplay effect",
    "FortCurieEntityStateDefinition:GameplayCue": "Gameplay cue for the state. If specified, will be added to a target for the duration of the state",
    "FortAthenaMutator_SkinChangeOnWin:GameplayCueTagToApplyOnWin": "Gameplay cue to apply to winners on victory",
    "WeaponCueReplicationStruct:Parameters": "Gameplay cue to be replicated",
    "FortMantisTechniqueData:ActivationGameplayCues": "Gameplay cues to execute when this technique is activated.",
    "OutpostUpgradeAndPrestigeBuildingData:POSTBuildingGameplayEffectClass": "Gameplay effect applied to each player-built structure. Effect magnitude depends on P.O.S.T. level.",
    "FortRemoteControlledPawnAthena:ControllingPlayerEffect": "Gameplay effect applied to the pawn controlling this remote controlled pawn",
    "FortAthenaMutator_GameplayEffect:GameplayEffectClass": "Gameplay effect class that will be applied to the players affected by the mutator.",
    "MyTownWorkerSetBonusData:SetBonusEffect": "Gameplay effect given by this SetBonus",
    "WorkerSetBonusData:SetBonusEffect": "Gameplay effect given by this SetBonus",
    "PerkMutatorData:BlockRespawnGameplayEffectClass": "Gameplay effect granted to each player for when the perk select screen is blocking respawning",
    "FortAthenaMutator_Infiltration:PerkUnlockedGameplayEffectClass": "Gameplay effect granted to each player when a perk selection has been unlocked",
    "PerkMutatorData:PerkUnlockedGameplayEffectClass": "Gameplay effect granted to each player when a perk selection has been unlocked",
    "PerkMutatorData:ShowPerkSelectGameplayEffectClass": "Gameplay effect granted to each player when a the perk select screen should be shown",
    "GameplayEffectVolume:GameplayEffect": "Gameplay effect that gets applied when an actor enters the volume",
    "FortPlayerPawn:DisableSlideGameplayEffectClass": "Gameplay effect that prevents sliding",
    "ConsumeEffectData:EffectClass": "Gameplay effect to apply",
    "FortVehiclePhysicsCollisionDamageComponent:DamageGE": "Gameplay effect to apply to the hit an actor.",
    "HitBuildingDamageOverride:DamageGE": "Gameplay effect to apply to the hit an actor.",
    "BuildingGameplayActorConsumable:OnConsumeGameplayEffect": "Gameplay effect to apply to user that consumes",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:GE_OutsideSafeZone": "Gameplay effect to apply when the player is outside the safe zone",
    "FortPlayerPawn:TeammateReviveGameplayEffect": "Gameplay effect used when a teammate revives this pawn from DBNO",
    "FortPlayerPawn:SelfReviveGameplayEffect": "Gameplay effect used when this pawn self-revives from DBNO",
    "EHudVisibilityState.GameOnly": "Gameplay elements only are visible. Replay timeline, transport bar are hidden",
    "ReroutePlayerEventDefinition:IncomingEventTags": "Gameplay event tag container to bind to on each player's AbilitySystemComponent",
    "FortAthenaMutator_Skyfire:AbductionTeleportCompleteEventTag": "Gameplay event tag that indicates a player has been abducted and has finished their abduction teleport. This is listened for on all players to detect abduction on the SERVER.",
    "FortAthenaMutator_Skyfire:AbductionTeleportStartEventTag": "Gameplay event tag that indicates a player has started the abduction teleport. This is listened for by the SkyfirePlayerPawnComponent and is used to kick off recording and removing the inventory on the SERVER.",
    "ObjectiveEntry_Gate:CloseEventTag": "Gameplay event tag to listen for to close this gate",
    "ObjectiveEntry_Gate:OpenEventTag": "Gameplay event tag to listen for to open this gate",
    "EFortGameplayState.WaitingToStart": "Gameplay has not yet started, players loading in",
    "FortAIPawn:SpawnModifierDefinitions": "Gameplay modifier item definitions to be applied at spawn time",
    "FortTheaterGameplayModifier": "Gameplay modifiers and conditions for their application in the theater.",
    "FortGameStateZone:ActiveGameplayModifiers": "Gameplay modifiers that are active on the game state",
    "FortTheaterRuntimeData:GameplayModifierList": "Gameplay modifiers to apply to all missions in this theater",
    "EncounterMobSpawnData:MobIdentifier": "Gameplay tag associated with particular mob . Can be used to manually enable specific mob",
    "FortCreativeStatManagerComponent:StatTargetTag": "Gameplay tag associated with the stat manager, to help with unique identification of player defined stats",
    "HeroSpecializationDesignerData:GameplayTags": "Gameplay tag for hero: Homebase.Class.IsCommando.StaffSergeant",
    "FortCurieCableSocketIdentifier:Tag": "Gameplay tag identifying the socket",
    "HeroKeywordDisplayData:KeyWordGameplayTag": "Gameplay tag indicating a 'keyword' for the hero, such as 'Spooky'.  Each Keyword should correspond to exactly one gameplay tag.  Each hero should have at most two keywords.",
    "HeroItem:SwapTag": "Gameplay tag of the item which is to be replaced by this item",
    "GameplayFeedbackEventInfo:EventTag": "Gameplay tag representing the event type",
    "GameplayFeedbackEventParams:EventTag": "Gameplay tag representing the event type",
    "FortWeaponBoardDisplaySlot:RequiredTag": "Gameplay tag required for an item to be valid for this slot.",
    "FortAthenaMutator_Cobalt:RoundCompleteAccoladeTag": "Gameplay tag to use when a player completes a round",
    "FortAthenaMutator_Uranium:RoundCompleteAccoladeTag": "Gameplay tag to use when a player completes a round",
    "FortAthenaMutator_Cobalt:FirstEliminationAccoladeTag": "Gameplay tag to use when a player gets the first elim of the match",
    "FortAthenaMutator_Uranium:MatchWinAccoladeTag": "Gameplay tag to use when a player wins the game (if there is a tie no team gets this)",
    "FortAthenaMutator_Cobalt:RoundWinAccoladeTag": "Gameplay tag to use when a player wins the match",
    "FortAthenaMutator_Uranium:RoundWinAccoladeTag": "Gameplay tag to use when a player wins the round",
    "FortAthenaMutator_SpyRumble:SupplyDropAccoladeTag": "Gameplay tag to use when triggering the supply drop collected accolade",
    "BuildingTrapFloor_Turret:GTReload": "Gameplay tag used for activating the reloading ability",
    "BuildingTrapFloor_Turret:GTShoot": "Gameplay tag used for activating the shooting ability",
    "FortConditionalCosmeticModification:ConditionalTags": "Gameplay tags associated with this cosmetic change",
    "FortSpawnedScoreActor:GameplayTags": "Gameplay tags associated with this score actor",
    "GameplayVolume:VolumeTags": "Gameplay tags associated with this volume.",
    "FortPawn:HidingVisibilityTags": "Gameplay tags checked to define if the pawn is hiding in prop, doesn't mean it can't be seen (ex. \"visible\" when moving)",
    "FortPawn:HidingTransitionVisibilityTags": "Gameplay tags checked to define if the pawn is transitioning in and out of a hiding prop",
    "WeaponItemDefinitionDesignerData:SchematicTags": "Gameplay tags for the schematic item definition",
    "WeaponItemDefinitionDesignerData:WeaponTags": "Gameplay tags for the weapon item definition",
    "TrapItemDefintionDesignerData:GameplayTags": "Gameplay tags for trap",
    "FortAIAssignmentIdentifier:AssignmentGameplayTags": "Gameplay tags that (along with AssignmentType) uniquely identify assignments.  If no tags are specified, only assignments that have NO tags will match when searched.",
    "AthenaLTMTraversePoint:TraversePointGameplayTags": "Gameplay tags that are instance editable for traverse points. (BuildingActors only have default tags)",
    "FortGameplayTagActor:GameplayTags": "Gameplay tags that are owned by this actor.",
    "FortEncounterSequenceSettings:SequenceTags": "Gameplay tags that identify the sequence. Used to create the sequence",
    "DigestedTargetBasedAccuracyCategory:Tags": "Gameplay tags that identify this target actor category",
    "TargetBasedAccuracyCategory:Tags": "Gameplay tags that identify this target actor category",
    "VehicleDrivingCategory:Tags": "Gameplay tags that identify this vehicle category",
    "DigestedVehicleDrivingCategory:Tags": "Gameplay tags that identify this vehicle driving category",
    "DigestedWeaponAccuracyCategory:Tags": "Gameplay tags that identify this weapon accuracy category",
    "DigestedMeleeWeaponSkillCategory:Tags": "Gameplay tags that identify this weapon category",
    "DigestedRangedWeaponSkillCategory:Tags": "Gameplay tags that identify this weapon category",
    "MeleeWeaponSkillCategory:Tags": "Gameplay tags that identify this weapon category",
    "RangedWeaponSkillCategory:Tags": "Gameplay tags that identify this weapon category",
    "WeaponAccuracyCategory:Tags": "Gameplay tags that identify this weapon category",
    "DigestedSightReactionSpecialization:Tags": "Gameplay tags that target should have to apply reaction time values",
    "SightReactionSpecialization:Tags": "Gameplay tags that target should have to apply reaction time values",
    "FortPhysicsPawnObject:GameplayTags": "Gameplay-related tags associated with this PhysicsObject",
    "FortPawn:GameplayTags": "Gameplay-related tags associated with this pawn",
    "FortPawn:SoundTrackingVisibilityTags": "Gameplay-related tags associated with this pawn",
    "FortPickupAthena:StaticGameplayTags": "Gameplay-related tags associated with this pickup",
    "FortAthenaVehicle:GameplayTags": "Gameplay-related tags associated with this vehicle",
    "FortMotorcycleVehicle:DoorBashPawnLaunchGameplayCueTag": "GameplayCue tag for door bash launching a player.",
    "FortMotorcycleVehicle:DoorBashGameplayCueTag": "GameplayCue tag for door bash.",
    "FortMotorcycleVehicle:RoadAndExhaustCameraDirtGameplayCueTag": "GameplayCue tag for screen fx when kicking up dirt.",
    "FortMotorcycleVehicle:RoadAndExhaustCameraWaterGameplayCueTag": "GameplayCue tag for screen fx when kicking up water.",
    "FortProjectileBase:ProjectileGameplayCues": "GameplayCues",
    "FortAthenaMutator_SpecialEvent:GameplayEffectToApplyOnSwapToDefault": "GameplayEffect to apply when swapping back to default.",
    "FortSpecialEventOverrideParts:GameplayEffectToApplyOnSwap": "GameplayEffect to apply when swapping.",
    "FortAthenaMutator_PlayerMarker:PlayerMarkerMarkerEffectClass": "GameplayEffect used to mark a player for PlayerMarker",
    "FortAthenaMutator_Payback:PaybackMarkerEffectClass": "GameplayEffect used to mark a player for payback",
    "EncounterVariableSelections_GameplayTag": "GameplayTag Encounter Variable Selections",
    "EncounterVariable_GameplayTag": "GameplayTag EncounterVariable",
    "FortMissionDistributionCategory:CategoryTagQuery": "GameplayTag query run on mission infos that defines which missions count toward that category.  (Uses Mission Gameplay Tags to query against.)",
    "GameplayStateTransition:TransitionStateTag": "GameplayTag representing the GameplayState to transition to",
    "GameplayStateSettings:StateId": "GameplayTag used to uniquely identify this state in the state machine",
    "MeshNetworkEventStateData:EventFilters": "GameplayTagContainer that contains tags to filter events based on gameplay logic (Playspaces, game state, etc)",
    "GameplayStateTransition:TransitionConditionTags": "GameplayTagContainer which contains the tags that represent the condition to transition out of this state",
    "FireVolumesForMinigame:FireVolume": "GameplayVolume that represents the area used by the FireVolume for its funcionality",
    "FortGameStateComponent_Campsite": "Gamestate Component to manage campsite stash blacklisting of items.",
    "OutpostPrestigeEffects:EnemyPrestigeEffect": "Gampeplay effect applied to every enemy. Index represents level of prestige (level 0 - no prestige yet).",
    "EMegaStormState.GatheringActorList": "Gathering a list of building actors the storm will damage.",
    "EFortRpcCategory.ActorInfo": "Gathering information on the status of any actors.",
    "FortWeaponRangedChronoAncient:GauntletEmissiveOnCatchCurve": "Gauntlet On Catch",
    "FortWeaponRangedChronoAncient:GauntletEmissiveOnEquipCurve": "Gauntlet On Equip",
    "FortWeaponRangedChronoAncient:GauntletEmissiveOnRecallCurve": "Gauntlet On Recall",
    "FortValetAudioController:MaxGear_Native": "Gearing category",
    "FortValetAudioController:RPMResetTime_Native": "Gearing|Internal category",
    "ManagerSynergyData:GenderData": "Gender data",
    "MyTownWorkerPersonalityData:GenderData": "Gender data",
    "WorkerPersonalityData:GenderData": "Gender data",
    "HeroSpecializationDesignerData:Gender": "Gender of hero",
    "MyTownWorkerGenderData:SelectionWeight": "Gender selection weight",
    "MyTownWorkerGenderData:Gender": "Gender type",
    "WorkerGenderData:Gender": "Gender type",
    "PlaylistFrontEndSettings:PlaylistAccess": "General access and display rules for this playlist (prior to AccessOverrides having its way)",
    "FortPerformanceTrackingSettings": "General class for all performance tracking settings.",
    "FortCurieFXSettings": "General purpose settings for Curie VFX",
    "EFortRewardActivityType.General": "General rewards gained during normal gameplay",
    "EmporiumSettings:bCreateLods": "Generate LODs according to asset metadata \"lodPreset\" field or \"SmallProp\" by default\n(4 LODs, 50% reduction in number of triangles between each level)\nWarning : can slow down import for heavy models",
    "EmporiumSettings:bCreateCollision": "Generate a custom collision volume upon import (4 convex hulls, 16 vertices max)\nWarning : can slow down import for heavy models",
    "SimpleDestructiblePropGroup:OrderedInstancedStaticMeshComps": "Generated at begin play.\nOrder must match OrderedReplicatedInstanceData.\nProvides a direct / consistent way to access this actor's instanced static mesh components.",
    "ScriptedObjectMovement_StaticPathTravelerData:TravelerBounds": "Generated by calling GetStaticPathTravelingBounds on the traveler.",
    "SimpleDestructiblePropGroup:OrderedReplicatedInstanceData": "Generated during \"Build Simple Destructible Prop Group\" operation in the editor, loaded into same state on client/server.\nOrder must match OrderedInstancedStaticMeshComps.\nReplicated data for which instances exist or not.  Each bit array lets us know which instances are on/off per instanced static mesh component.",
    "FortDialogExternalLatentActionHandle:Handle": "Generated handle value",
    "FortMissionEntry:GenerationCategory": "Generation category assigned to this mission entry, specifies if this is a primary or additional generation",
    "AIHotSpot:SlotGenerator": "Generator for automatic slot creation",
    "InteriorAudioScanResults:ViewTarget": "Generic",
    "FortAthenaAIEvaluatorComponent": "Generic Evaluator Service responsible to perform processing our a UFortAthenaAIEvaluator class",
    "SpecialEventScript": "Generic base class for highly-scripted, designer-driven scenarios.",
    "EFortBuildingType.GenericCenterCellActor": "Generic center cell actor",
    "ValkyrieAllowDenyList": "Generic container for reconstructing an FNamePermissionList",
    "ValkyrieAllowedNameList": "Generic container of FNames that can be embedded in another container such as a TMap",
    "FortInGameLeaderboardPlacementData": "Generic data about the leaders of the current game",
    "FortAnimInput_CommonVehicle": "Generic data that applies to all the different vehicle types.\n   Ideally this can end up being a vehicle agnostic way to get at some data without having to know which vehicle is currently in use",
    "ImGuiDebugMenuBase": "Generic debug menu actor. We use an actor so that we can communicate between server and client.",
    "EVoiceRepUploadRecordResult.FailedUpload": "Generic error",
    "EFortContextualReticleTypes.FCR_GenericFailure": "Generic failure case",
    "FortMissionEvent:GenericFloat": "Generic float that can be passed as data with the event",
    "FortMissionEvent:GenericInt": "Generic integer that can be passed as data with the event",
    "GameplayMutatorObjectData:ObjectValue1": "Generic integer used for the object addressed by ObjectId",
    "GameplayMutatorObjectData:ObjectValue2": "Generic integer used for the object addressed by ObjectId",
    "FortSubGameLoadingScreen:Tips": "Generic loading screen tips for this game mode.",
    "FortAthenaMutator_AddBarrier": "Generic mutator to add barrier to large team LTMs.\n   If bSpawnAtMidFlightPath is false, SpawnBarrier() will need to be called from outside class.",
    "FortAthenaMutator_MusicEvents": "Generic mutator to implement various music stingers and tracks for events that happen during a BR match",
    "HUDLayoutDataEntry:Property_0": "Generic properties to be used by widgets",
    "HUDLayoutDataEntry:Property_1": "Generic properties to be used by widgets",
    "HUDLayoutDataEntry:Property_2": "Generic properties to be used by widgets",
    "HUDLayoutDataEntry:Property_3": "Generic properties to be used by widgets",
    "ReplayActorsPosition": "Generic replay event where we save position of various kind of entities, for now used to save all the chests",
    "CachedPlayerReportingMatchInfoAnalytics:GameSessionId": "Generic session data",
    "FortMissionEvent:GenericText": "Generic text that can be passed as data with the event",
    "FortAthenaIntArithmeticStateTreeTask": "Generic that can be used to do arithmetic operations on two operands, returning the result to a specific struct ref.",
    "ETwoOptionExperimentBucketType": "Generic two option Enum, can be used for general AB tests.",
    "EFortUIFeature.ShowWinterfest": "Generic, avoid using this for two events simultaneously",
    "EDeviceTrackingFilterType.Unfiltered": "Get All Devices",
    "EDeviceTrackingFilterType.WithBindings": "Get All Devices with Bindings",
    "EDeviceTrackingFilterType.WithEvents": "Get All Devices with Events",
    "EDeviceTrackingFilterType.WithOnlyEvents": "Get All Devices with Events and no Functions",
    "EDeviceTrackingFilterType.WithEventsOrFunctions": "Get All Devices with Events or Functions",
    "EDeviceTrackingFilterType.WithFunctions": "Get All Devices with Functions",
    "EDeviceTrackingFilterType.WithOnlyFunctions": "Get All Devices with Functions and no Events",
    "FortAnimInput_SocketBasedIKTarget": "Get IK target transform info from a socket on another mesh. E.g. used for IK'ing hands to a steering wheel.",
    "FortAthenaPartyRiftPortal:InteractIconPlacementCapsule": "Get interaction icon capsule",
    "FortPlayerController:OnAutoRunEnabled": "Get notifications when this player enables/disables autorun.",
    "FortPlayerController:OnPlayerChangedBuildMode": "Get notifications when this player enters/exits build mode",
    "FortRangedWeaponStats:MinHitsPerCartridge": "Get the effective number of pellet hits when a shotgun hits between 1 and MinHitsPerCartridge pellets.",
    "EDestroyActorsAndComponentsMutator_ComponentNameComparisonType.NameEquals": "GetName() ==",
    "EDestroyActorsAndComponentsMutator_ComponentNameComparisonType.NameContains": "GetName().Contains()",
    "EDestroyActorsAndComponentsMutator_ComponentNameComparisonType.NameStartsWith": "GetName().StartsWith()",
    "FortVolume:OnUserGeneratedContentRestrictionChanged": "Gets called on the client and the server. Calls on the client after the value is replicated from the server.",
    "FortVehicleSeatComponent:bHasAnyMountedWeaponSeats": "Gets set to true if the vehicle uses a mounted weapon component for any of its seats ever.",
    "CombatManagerComponentSTW:ReplicatedCombatEventHeat": "Gets set when combat events come in and replicated to clients. Avoids replicating CombatHeat changes due to cooldowns",
    "CreativeQuickbarComponent:bIsCreativeQuickbarActive": "Gets whether the quickbar is active",
    "CreativeQuickbarComponent:bIsCreativeQuickbarEquipped": "Gets whether the quickbar is equipped",
    "EMatchmakingState.FindingExistingSession": "Getting a list of available sessions",
    "EMatchmakingState.FindingEmptyServer": "Getting a list of empty servers",
    "CatalogPurchaseInfoGift:GiftWrapTemplateId": "Gift Wrap to use for the gift (blank = accept default)",
    "EFortGiftWrapType.Ungift": "Gift box which removes item(s)",
    "EFortGiftWrapType.UserFree": "Giftbox intended as an option for users to send to one another",
    "FortAthenaMutator_Bagel:RefillPlayerHealth": "Give back full health when reaching a new safezone index",
    "FortAthenaMutator_Mash:RefillPlayerHealth": "Give back full health when reaching a new safezone index",
    "FortAthenaMutator_Bagel:RefillPlayerShield": "Give back full shield when reaching a new safezone index",
    "FortAthenaMutator_Mash:RefillPlayerShield": "Give back full shield when reaching a new safezone index",
    "EFortReplenishmentType.Restricted": "Give the item once and only once. Remove it when it is no longer applicable.",
    "FortAthenaMutator_CenterSafezonesOnPOIs:CenterSafezonesOnLiteralLocation": "Give the safezone index and the location to center that safezone on.\n\nTags are preferred to locations, so any safezone index in both maps will\nnot use this value.",
    "FortAthenaMutator_CenterSafezonesOnPOIs:CenterSafezonesOnPOITag": "Give the safezone index and the poi tag to center that safezone on.\n\nTags are preferred to locations, so any safezone specified here will use the tag and not\nthe location (if duplicated).",
    "FortInputActionDetails": "Gives additional Fortnite specific details about an action mapping or key alias",
    "EFortItemType.AthenaGlider": "Glider/umbrella",
    "FortAnimInput_PlayerSkydiveAnimAsset:Glide_BS_Female": "Gliding",
    "EClamberingFailedReason.None": "Global Clambering failed reason",
    "EClamberingState.Inactive": "Global Clambering states",
    "EHurdleState.Inactive": "Global Vaulting states",
    "FortGameState:GlobalAbilityTargetingActor": "Global ability targeting actor; Handles all custom shape ability targeting queries",
    "ScoreMultiplierRow:BadgeMultiplier": "Global badge score multiplier",
    "ScoreMultiplierRow:BuildingMultiplier": "Global building score multiplier",
    "ScoreMultiplierRow:CombatMultiplier": "Global combat score multiplier",
    "PlayspaceComponent_GlobalCurrencyOverride:OverrideGlobalCurrency": "Global currency used for override",
    "FortDaySequenceActor:SunComponent": "Global directional light component",
    "FortTimeOfDayManager:DirectionalLightComponent": "Global directional light settings.  NOTE: Setting light Brightness and color won't work here.  Use the per-day-phase settings for those values instead.",
    "FortGameStateZone:GlobalEnvironmentAbilityActor": "Global environment ability actor; Handles all ability/attribute-related requests coming from environmental sources (fall damage, etc.)",
    "FortDaySequenceActor:ExponentialHeightFogComponent": "Global fog component",
    "EFortGameplayState": "Global gameplay states, the entire game can only be in one of these as a time",
    "FortGameMode:SharedMissionLists": "Global mission manager, used for missions that span a wide variety of zones.",
    "FortSplineGroundPath:PathwayPointOffset": "Global offset to apply to all pathpoints.  You can use this to lift the points off the ground slightly, etc.",
    "FortAIDirectorPerLODConfig": "Global settings for the AIDirector",
    "ScoreMultiplierRow:UtilityMultiplier": "Global utility score multiplier",
    "GameplayEventListenerHandle:Handle": "Globally unique handle identifier",
    "FortGameState:ParTime": "Goal number of days",
    "FortAthenaMutator_GameModeBase": "Going forward this should be the base class for all major mutators",
    "EExternalAccountType.Google": "Google account login",
    "ESavedAccountType.Google": "Google creds",
    "EFortMinigameEnd.EndGame": "Graceful end with UI",
    "EFortMinigameEnd.EndRound": "Graceful end with UI and start next round",
    "EFortScriptedActionSource.Token": "Granted by a Token item, which is in SourceItem",
    "FortAthenaVehicle:ActiveGameplayEffectGrantedTagsToForceRemove": "Granted tags to forcibly remove due to Gameplay Ability System Component issues when changing ownership while in mixed replication mode.",
    "AthenaMidSeasonUpdate:Grants": "Grants to award for this mid season update, if all requirements pass.  Will only be run once, based on season_update profile value",
    "FortLightweightProjectileConfig:GravityScale": "Gravitational scale of force (Default -980 cm/s) to apply. -980 for earth grav.",
    "FortCurieUpdraftActor:PlayerPawnVortexGravityFloorScalar": "Gravity floor scalar for the player pawn vortex",
    "TornadoConfigEntry:PlayerGravityFloorWidth": "Gravity floor width for the vortex.  The gravity floor will extend this far upwards.",
    "FortPhysicsObjectComponent:CustomGravityMultiplier": "Gravity multiplier to be applied when OverrideGravity is true in the Preset",
    "FortCurieUpdraftActor:ProjectileGravityMultiplier": "Gravity multiplier to enforce on projectiles in the updraft",
    "FortCurieUpdraftActor:VehicleGravityMultiplier": "Gravity multiplier to enforce on vehicles in the updraft",
    "AirControlParams:GravityScalar": "Gravity multiplier. Negative values push the player up.",
    "FortPhysicsObjectComponent:GravityOverride": "Gravity override we apply if not -1",
    "ControllableRidableComponent:JumpDownwardGravityScale": "Gravity scale applied when moving downwards while jumping",
    "ControllableRidableComponent:JumpUpwardGravityScale": "Gravity scale applied when moving upwards while jumping without holding the jump input",
    "FortAthenaMutator_Barrier:WallGravity": "Gravity that is applied to the wall when we want the wall to come down 0-1.",
    "VortexParams:GravityFloorGravityScalar": "Gravity to apply to character when within the gravity floor",
    "EFortRichColorConflictResolutionRules.MinimumContrastGrayscale": "Grayscale colors must have a minimum contrast ratio",
    "UnicornSocialMetaPayload": "Great care must be taken when renaming anything. The database backend expects a certain structure, so coordinate with the Project Pegasus team / Alistair.White",
    "FortBotPassiveHealerActivityDataTableRow:GreetingTexts": "Greeting text display when players gets close",
    "FortPawnComponent_PassiveHealer:SelectedGreetingText": "Greeting text display when players gets close",
    "MegaStormCircle:GridCenter": "Grid cell the center of the Mega-storm lies in.",
    "BuildingFoundationStreamingData:GridCoordinates": "Grid coordinates associated with the foundation's location (retrieved through POIManager)",
    "NeighboringCenterCellInfo:NeighboringCellIdx": "Grid index of the neighboring actor",
    "NeighboringFloorInfo:NeighboringCellIdx": "Grid index of the neighboring actor",
    "NeighboringWallInfo:NeighboringCellIdx": "Grid index of the neighboring actor",
    "MegaStormCircle:GridAt": "Grid offset from the center grid cell only in 1 of the 4 or 8 quadrants.",
    "MegaStormCircle:RadiusInGridCells": "Grid offset from the center grid cell only in 1 of the 8 quadrants.",
    "MegaStormCircle:XAdvanceAccumulation": "Grid offset from the center grid cell only in 1 of the 8 quadrants.",
    "FortPhysicsObjectComponent:bForceStartActiveAndAwake": "Gross flag to facilitate spawning awake on client for a cheat (see UFortCheatManager::SpawnPhysicsProp)",
    "ThreatCloud:GroundLevelUnderCloud": "Ground Level, calculated at initialization time so it can be re-used for adjusting cloud altitude as necessary.",
    "AthenaAIServiceGroupInfo:GroupID": "Group ID",
    "FortEarnScoreNotification:GroupBoostXPEarned": "Group boost amount of XP earned",
    "FortExperienceDelta:GroupBoostXPEarned": "Group boost amount of XP earned",
    "FortAthenaNpcGalileoComponent:CommunicationGroup": "Group used to notify \"friends\" about detected enemies",
    "EFortCreativeTeleporterGroup.Group_None": "Group_None must be the last enum.",
    "HomebaseBannerColorData:SubCategoryGroup": "Grouping within a category; Items will be first sorted by increasing group number and then by luminence",
    "CreativeRoyalePlayspaceComponent_LevelReset:FoundActorsDiedGuid": "Guid for found actors that have Died",
    "CreativeRoyalePlayspaceComponent_LevelReset:FoundActorsDamagedGuid": "Guid for found actors that have been Damaged",
    "McpLootEntry:ItemGuid": "Guid for the item that was created. If this is null/empty, it represents an item that was unable to be granted, but was earned. Ex. You cannot hold any more of that type of item.",
    "FortGameplayEffectContext:ItemGuid": "Guid of an item this ability is using",
    "FortTierProgressionInfo:ProgressionLayoutGuid": "Guid of the associated progression layout asset",
    "FortRewardActivity:ActivityGuid": "Guid of the specific activity, meaning depends on type",
    "FortActorRecord:ActorGuid": "Guid of this actor within a level",
    "FortAIPawn:SpawnGroupGuid": "Guid that identifies the spawn group instance this enemy belongs to",
    "FortAthenaMutator_GG": "GunGame core mutator",
    "SeatStatusType.Gunner": "Gunner seat is a passenger seat WITH a gun mount",
    "SwitchSeatType.ToGunner": "Gunner seat is a passenger seat WITH a gun mount",
    "FortGyroV2Settings:GyroV2AccelMultiplier": "Gyro acceleration multiplier",
    "EGyroAcceleration": "Gyro acceleration options",
    "EAxisDirection": "Gyro axis modes",
    "EGyroSpace": "Gyro space",
    "FortGameModeZone:bInitBeaconAtInitGame": "HACK: Used to prevent athena game mode from initializing the beacon twice (empty server game mode is not used)",
    "HUDElementsToHideData:HUDElementsToHide": "HUD element tags to hide/show at the specified phases.",
    "FortPickup:HUDLabel": "HUD element that displays a label for the pickup.",
    "FortAthenaPartyRiftPortal:MarkerDetailsPointerOrigin": "HUD pointer location",
    "FortAthenaMutator_Rounds:HUDLoadingReasonText": "HUD text displayed during round transition.  Passed to AFortPlayerControllerAthena::BroadcastInGameLoadingChanged().",
    "SettingsHUDVisibilityAndText:HUDVisibilityGameplayTag": "HUD visibility element to show in the settings menu",
    "FortAthenaMutator_AdHocSquads:HUDElementTags": "HUD widgets with these tags will be hidden while the mutator is disabled",
    "EHabaneroProgressError.MissingHabaneroComponent": "Habanero component issues",
    "FortGameplayCueNotify_Looping:bIsValid": "Hacky bool used to prevent duplication of objects of this class.",
    "DynamicXpPlayerSessionTransient:bPrevHitXpThreshold": "Had user previously hit too much XP",
    "FortBotPOIExcludedZoneDataTableRow:BoxHalfSize": "Half Size of the Excluded Zone",
    "RadioTowerTerminal:MaxInteractHalfAngle": "Half of the angle player must be within the front of the terminal to interact\nValue of 90 will allow player to interact when standing within 180 degrees of the front of the terminal",
    "AttackIKHandsDefinition:HandOnGroundCurveName": "Hand in the air curve.  0 means in the air, 1 means on the ground.",
    "EFortItemEntryState.OwnerBuildingHandle": "Handle (integer) of owner building, if any",
    "EFortItemEntryState.PickupInstigatorHandle": "Handle (integer) of the pickup instigator, if any",
    "FortCreativeDynamicXpComponent": "Handle DynamicXp for creative mode published islands.  This component is attached to a FortSpatialGameplayInterface that represent Creative Islands.\nThis system will determine if we have gathered enough data and if the data passes our tests well enough to start granting XP\nto players in an Island.",
    "GameplayEffectEventKeyArrayAndHandle:EffectHandle": "Handle for The Gameplay Effect associated with this key array",
    "FortUserCloudRequestHandle": "Handle for a cloud request",
    "PhysicsConstantForceHandle": "Handle for identifying constant forces applied by this component",
    "PhysicsMagneticForceHandle": "Handle for identifying magnetic forces applied by this component",
    "GameplayAbilityEventKeyArrayAndHandle:SpecHandle": "Handle for the GA associated with this key array",
    "FortUserCloudRequestHandle:Handle": "Handle for the cloud request",
    "FortWeaponRanged_Ostrich:ServerSideRocketCooldownTimer": "Handle for the cooldown timer so it can be queried",
    "ActiveGameplayModifier:ModifierHandle": "Handle for the modifier; Allows removal of specific modifier even if multiple modifiers use the same backing definition",
    "BuildingGameplayActorLaserGrid:LaserPatternTimerHandle": "Handle for the timers that tracks the duration of a pattern and the duration of the transition at the end of a pattern.",
    "EFortItemEntryState.RechargingWeaponServerTime": "Handle generated by Controller Recharge Weapons Component when this item is removed (used for resuming recharging on pickup)",
    "FortUserCloudHelperComponent:LastIssuedRequestHandle": "Handle generator",
    "ActiveGameplayModifierHandle:Handle": "Handle identifier for the gameplay modifier",
    "FabricMetaSoundNodeInfo:SwitcherHandle": "Handle of the Switcher attached to this node",
    "FabricMetaSoundNodeInfo:AnalyzerHandle": "Handle of the analyzer attached to this node",
    "FortUserCloudRequestQueue:FirstFrozenHandle": "Handle of the cloud request within the queue that marks the beginning of the operations that are frozen",
    "FortUserCloudRequestPayload:RequestHandle": "Handle of the cloud request; Used to uniquely identify the request",
    "EarnedBadgeEntry:Badge": "Handle of the registered strategic building",
    "FortMinigame:PendingPlayers": "Handle players pending PlayerState replication",
    "FortVolumeManager:PendingPlayers": "Handle players pending PlayerState replication",
    "GameplayEventListenerHandle": "Handle that points to a specific event listener. These are globally unique.",
    "FortAthenaLivingWorldManager:Preloader": "Handle the preloading of all the assets that can be spawned by the LWM.",
    "FortGameStateComponent_UpdateSavedPositions": "Handle ticking all controllers to ask their pawn to record and save their last positions",
    "FortGameStateComponent_TimeDilation": "Handle time dilation changes from instances like end game victory.\nThis was being handled in the blueprint but showed to have flaws with client/server sync up.",
    "TempestTornadoForcesComponent:ConfigHandle": "Handle to config data for this tornado",
    "GoalUpdateSuppressionHandle": "Handle to identify Goal Suppression requests",
    "StenciledActorInfoEntry:CustomHighlightingHandle": "Handle to identify the pushed highlighting data, used to find the correct one when popping",
    "FortPawn:PawnStatHandle": "Handle to pawn stats",
    "FortControllerComponent_VictoryCrowns:VictoryCrownPlaylistData": "Handle to playlist specific data for victory crowns.",
    "BagelPlayerDataEntry:ResetStreakScoreMultiplierTimerHandle": "Handle to reset dynamic multiplier",
    "MashPlayerDataEntry:ResetStreakScoreMultiplierTimerHandle": "Handle to reset dynamic multiplier.",
    "CraftingObjectComponent:WhileCraftingAbilitySpecHandle": "Handle to the crafting ability given by the formula to run while crafting",
    "CraftingObjectComponent:OwnerCraftingAbilitySpecHandle": "Handle to the crafting ability given to the owner of the component",
    "CraftingObjectServerStateData:InstigatorWhileCraftingAbilitySpecHandle": "Handle to the crafting ability on the instigator, given by the formula to run while crafting",
    "FortItemEntry:GameplayAbilitySpecHandle": "Handle to the gameplay ability spec if this item has an ability associated with it",
    "FortGrantedQuestAbilitySetData:GrantedAbilitySetHandle": "Handle to the granted ability set on the player. Not sure this needs to be a UPROPERTY but was in the quest manager, so keeping that for now",
    "FortObjectiveEntry:ObjectiveHandle": "Handle used to get a specific objective",
    "GameplayEventHandlerFunctions": "Handler functions defined on the CDO/archetypes.",
    "GameplayEventFunction": "Handler functions for a list of subscribed events.",
    "FortNearbyActorsHandle": "Handler used by this component to unregister previously registered listeners",
    "AIPatrolPathComponent": "Handles AI patrol path native logic for the AI Patrol Path Device\n    After being streamed in, the actor needs to tell the component to generate its path points list (through GeneratePathPoints) with its Patrol Path Group to search points for.\n    Current maximum of Paths is 128 (MAX_PATROL_PATHS).\n    Current maximum of Path Points is 128 (MAX_PATROL_POINTS)",
    "FortBattleRoyalePlayerAugmentSystem": "Handles BR specific implementation details of player augments. Player augments are a general purpose perk system.\nBR Uses them in a specific way that may not be right for other modes such as creative.\nThis component handles the BR specific seasonal implementation augments. It may change from season to season.\nThe native class is meant to offer features that a season may opt into, or opt out of. Such as timer based granting of augments.\nThis initially was done in a passive ability, but because ability activation/deactivation is tied to pawn life time, some features may need to exist external to the passive ability.",
    "BuildingProp_CaptureArea:CaptureComponent": "Handles Capture States and updates them",
    "FortPawn:PickupDirectionData": "Handles Dealing with direction data for pickups",
    "VKEditPlayspace:ActorMemoryTrackerComponent": "Handles Memory Budget Tracking through the budget grid.",
    "FortObjectiveBase:TimerComponent": "Handles all the timer stuff.",
    "FortPlayerController:IndicatorManager": "Handles all the various indicators on the screen",
    "FortAthenaMutator_CR_Respawn": "Handles any respawn logic for Creative Royale that requires a mutator.",
    "LevelInstanceGameplayVolume:ClassFilterComponent": "Handles filtering actors that can be placed in the level instance",
    "FabricMetaSoundManagerComponent:HarmonixMusicProviderNode": "Handles for nodes auto-generated when the builder is created",
    "FortMcpQuestObjectiveInfo:DynamicStatusUpdateType": "Handles how to display quest status widget updates. Determines when the quest status widget is displayed",
    "FortPoiSwapPlayspace:PlaysetLevelStreamComponent": "Handles loading island playsets",
    "FortPoiSwapPlayspace:LevelSaveComponent": "Handles loading user content",
    "SkyfireVaultOrbSpawner": "Handles logic for spawning vault orbs in the mothership. Spawns initial orbs and\nperiodically checks if a new orb needs to be spawned based on the current active\nplaylist. The max number of orbs allowed is calculated using the number of players\nin the mothership and the number of orbs those players (or their squads) have collected",
    "DeploymentConsoleComponent": "Handles logic for the Deployment Console Device that can't otherwise be managed in BP.",
    "LootControllerNativeComponent": "Handles logic for the Loot Controller Device that can't otherwise be managed in BP.\nEnable Debug Logging in non Development modes.\nAdditional Functions such as async processing will be added.",
    "PointLightNativeComponent": "Handles logic for the Point Light Device that can't otherwise be managed in BP.",
    "PropManipulationNativeComponent": "Handles logic for the Prop Manipulation Device that can't otherwise be managed in BP.",
    "StormCallerComponent": "Handles logic for the Storm Caller Device that can't otherwise be managed in BP.",
    "VolumetricRegionNativeComponent": "Handles logic for the Volumetric Region Devices that can't otherwise be managed in BP.",
    "CreativeRoyaleIslandPlayspace:SpatialGameplayComponent": "Handles mapping user adds/removes from the playspace to legacy volume enter/exit events",
    "VKEditPlayspace:SpatialGameplayComponent": "Handles mapping user adds/removes from the playspace to legacy volume enter/exit events.",
    "FortPawnComponent_Mud": "Handles mud surface changes on pawns.",
    "VKEditPlayspace:ObjectTrackingComponent": "Handles object tracking and data costs for building levels.",
    "FortAbilitySetHandle:AppliedEffectHandles": "Handles of applied gameplay effects",
    "FortAbilitySetHandle:GrantedAbilityHandles": "Handles of granted abilities",
    "BuildingGameplayActorAbilityDeliveryBucket:PersistentlyAppliedAbilitySets": "Handles of persistently applied ability sets",
    "FortControllerComponent_PlayerAugmentPersistence": "Handles player augment persistence (unlocks, carry over, etc) for FN-BR. This functionality is implemented in a\ndistinct component to allow the player augment system to be used in non-persistent contexts, like FN creative.\nThis component keeps the player augments persistence state reflecting unsaved updates from the current match.\nMutations are only permitted on the authority and then replicated to the owning client.",
    "CreativeRoyaleIslandPlayspace:LoadingScreenComponent": "Handles showing Creative Royale specific loading screens",
    "CreativeRoyaleIslandPlayspace:FortPoiSwapManager": "Handles swapping out POIs on the BR map with user generated content",
    "FortWeapon:EquippedAbilityHandles": "Handles to all abilities that were added by this weapon on equip",
    "FortWeapon:EquippedAbilitySetHandles": "Handles to all ability sets that were added by this weapon on equip",
    "BuildingTrap:AlterationAbilitySetHandles": "Handles to all alteration ability sets",
    "CreativeRoyaleIslandPlayspace:DeviceTrackerComponent": "Handles tracking all of the devices in the experience",
    "VKEditPlayspace:DeviceTrackerComponent": "Handles tracking all of the devices in the experience.",
    "EMatchmakingState.HandlingFailure": "Handling an error condition (end state machine)",
    "EncounterMobSpawnData:DevNotes": "Handy notes for a designer to quickly describe an individual mob - purely design facing and for data organization",
    "StateDrivenState:DevNotes": "Handy notes for a designer to quickly describe an individual state",
    "SpecialEventAudioHapticsComponent:HapticsActions": "Haptic actions that are triggered from this component",
    "EPlayerReportReasons.InappropriateContent": "Harassment, also in STW group above",
    "BuildingFoundation:LandIconWorldOffset": "Hard coded world offset location.\nDoes not rotate by default. See bRotateLandIconWorldOffset to rotate this offset.\nThis can be updated during runtime to preview effects.",
    "EFortAthenaTutorialSubstep.ScreenReachMarker": "Harvest",
    "EHarvestResult": "Harvest result",
    "FortAthenaAIBotDigestedTargetHeuristicSettings:ThreatLoFWeight": "Has LoF Weight",
    "FortAthenaAIBotTargetHeuristicSettings:ThreatLoFWeight": "Has LoF Weight",
    "FortAthenaMutator_Mash:bMashInitialized": "Has Mash fully initialized?",
    "EFortZoneType.SingleZone": "Has a single zone, used for test maps and instant action",
    "DetailedDeviceTrackingInfo:bServerAndClientBindingsInSync": "Has all the initial bindings been sync up to the client",
    "EFortCollectedState.NewlyCompleted": "Has been completed and not seen yet by player",
    "FortEntitlementState:State": "Has entitlement been granted to the user.",
    "FortTracerBase:bScaledUp": "Has mesh fully scaled up?",
    "FortPartyCampaignInfo:LobbyConnectionStarted": "Has the leader begun connecting to lobby",
    "DynamicXpPlayerSession:EndMatchPersistence": "Has the master copy of FDynamicXpProfileStats that we normally use.",
    "FortLOSComponent:bHasBeenFound": "Has the object been found or not?",
    "FortTheaterMapTile:bHasFinishedLoading": "Has the tile loaded",
    "FortGameUserSettings:bTimesSeenBacchusLoadTutorial": "Has the user been exposed to the first time bacchus controls tutorial on map load?",
    "BuildingActor:bDestroyed": "Has this been destroyed?",
    "FortItemEntry:bIsDirty": "Has this item entry changed recently?",
    "FortPartyBeaconClient:bHasReconnected": "Has this party beacon \"reconnected\" via the Reconnect function",
    "PartyMemberPackedState:bReadyForTravel": "Has this party member finished the flow without issues and is ready to be moved into the session",
    "FortSpectatorBeaconClient:bHasReconnected": "Has this spectator beacon \"reconnected\" via the Reconnect function",
    "WeaponAmmoCheat:HasInfiniteAmmo": "Has this weapon infinite ammo?",
    "EEQSActorSpawnerTriggerType.Manual": "Has to be manually triggered in code or blueprint",
    "EFortItemType.AthenaHat": "Hat",
    "FortPlayerState:bInvitedToConsoleSession": "Have we asked this player to join a console session yet?",
    "EndZoneScoreAndAwards:bDidLeech": "Have we leeched this match?",
    "EStimType.Seeing": "Having a LOS on the actor from sight perception",
    "AutoGoalCardData:HeaderTag": "Header tag to put the Auto Goal Card widget under\nIf unset or not found, will appear under the default header",
    "CustomMessageQuestData:HeaderTag": "Header tag to put this custom message widget under\nIf unset or not found, will appear under the default header",
    "BundleGoalCardDisplayData:HeaderColor": "Header text color",
    "FlightParams:HeadingStabilizationMaxForwardVelocityKmh": "Heading stabilization will begin to be applied when forward velocity is\nbelow* this value. This value should probably be less than the top speed.",
    "ESavedAccountType.Headless": "Headless account(userid) / token",
    "FortAthenaMutator_Bagel:HeadshotGameplayTag": "Headshot gameplay tag to identify if an AI has been killed by a headshot",
    "FortAthenaMutator_Mash:HeadshotGameplayTag": "Headshot gameplay tag to identify if an AI has been killed by a headshot",
    "EFortAthenaTutorialSubstep.ScreenCollectLoot": "Heal",
    "FortPawnComponent_PassiveHealer:FortWorldHealItem": "Heal item use to perform healing",
    "FortPawnComponent_PassiveHealer:HealItem": "Heal item use to perform healing",
    "EKeepContainerType.FirstAid": "Healing items",
    "FortPawnComponent_PassiveHealer:HealingPawns": "Healing pawns list",
    "BuildingProp_CreatureManager:SelectedOverrideHealth": "Health Override Option",
    "SpecialRelevancyHealthComponent:OwnerMaxHealthCached": "Health of our owning actor",
    "FortPlayerDeathReport:KillerHealthPercent": "Health of the pawn that killed you",
    "EStimType.Heard": "Heard noise from this actor from hearing perception",
    "FortAIPawnStats:AlertHearingThreshold": "Hearing threshold distance when alert",
    "FortAIPawnStats:DormantHearingThreshold": "Hearing threshold distance when dormant",
    "FortGameMode:MatchHeartbeatManager": "HeartbeatManager for the match, if the game mode returns true for ShouldUseMatchHeartbeatManager",
    "EFortAmmoType.Energy": "Heavy",
    "TowhookParams:TractorBeamHeightScalingForceMagnitude": "Height Scaling force multiplier",
    "FortAthenaMutator_Skyfire:ExitSkydiveHeight": "Height at which players will exit skydive from",
    "FortAthenaMapInfo:AircraftHeight": "Height at which the aircraft flies.  Units are relative to the map center.",
    "FortZiplineLinkComponent:SnapHeightOverride": "Height at which the link generation will look for a connection.",
    "FortAthenaMutator_Cobalt:RespawnTraceEnd": "Height at which to end the trace for landable objects when determining respawn height",
    "FortAimAssist2D_Settings:AssistInnerReticleHeight": "Height of aim assist inner reticle in world space.",
    "FortAimAssist2D_Settings:AssistOuterReticleHeight": "Height of aim assist outer reticle in world space.",
    "FortTouchAimAssistSettings:AssistReticleHeight": "Height of aim assist reticle in world space.",
    "FortTouchAimAssistSettings:AutoFireReticleHeight": "Height of auto fire reticle in world space.",
    "FortTouchAimAssistSettings:AutoFireTrackingReticleHeight": "Height of auto fire tracking reticle in world space.",
    "IceGroundPath:SplineColliderExtentHeight": "Height of extents for box collider placed around each spline mesh segment",
    "FortAimAssist2D_Settings:TargetingReticleHeight": "Height of targeting reticle in world space.",
    "FortTouchAimAssistSettings:TargetingReticleHeight": "Height of targeting reticle in world space.",
    "VortexParams:BoundsWidth": "Height of the gravity floor or width of the edge of the volume bounds where speed is capped",
    "ExitCraftInfo:ExitZOffset": "Height the exit craft will reach when taking off (done and destroying at this height)",
    "FortAthenaMutator_Cobalt:RespawnFallbackHeight": "Height to respawn at if a valid respawn location can't be found",
    "FortGameModePickup_Wax:HeightAboveTerrianDropPickupAt": "Height to respawn tokens at.",
    "FortRespawnLogicData:RespawnTraceHeight": "Height to start the trace when determining where to respawn",
    "FortGameModePickup_Wax:HeightAboveTerrainPickupLandAt": "Height tokens sill try to land at.",
    "DynamicXpPlayerSessionTransient:bReportedTimeSpanOutlier": "Help to make sure we only report outlier once per instance",
    "StateChangeData:Handle": "Helper ID used to order this state change instance from the unordered fast array\nThis ID allows the client to simulate/process the states in proper order",
    "LinkAcrossNumericalIndicatorActionSymbol": "Helper Struct used to bring together all the display informations regarding a Link Across Action. Symbol, Color, etc.",
    "FortAthenaLivingWorldPointProvidersEnabler": "Helper actor that can be used to link a number of Living World Point Providers,\n which will be randomly enabled based on the provided configuration",
    "FortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride": "Helper actor that sends location tags from enabled living world point providers\nto UFortGameStateComponent_MiniMapDataOverride on the server, allowing\nit to override mini map data for those locations.",
    "FortPawn:bHealthSynced": "Helper bool to track if health has synced at begin play time",
    "FortActorTemplateStats": "Helper class for actor template stats. Fields:\n\n- Path of the actor referencing the template.\n- Aggregate asset size of shared asset dependencies in bytes.\n- Aggregate asset size of exclusive (not-shared) asset dependencies in bytes.\n- Instancing size in in bytes.\n- Number of actor instances referencing this template.",
    "FortAthenaLivingWorldConditionContainer": "Helper class that manage the lifetime of a list of world condition for the living world manager.",
    "FCRP_LoopingUpdate": "Helper class to represent a self-looping interpolation from some value to some other value",
    "FortPlayerController:TrapPickerDecoHelper": "Helper for determining the target attachment surface for the trap picker",
    "FortScoutDroneControllingComponent:DismissPayloadCache": "Helper object used to pass deferred destruction data as payload via gameplay event",
    "FortAthenaMutator_EQSActorSpawner:ActorSpawners": "Helper objects that manage spawning actors based on the current SafeZone state/index\n     Should ONLY be populated on the server.",
    "FortProjectileMovementComponent_FloorSnapped:ReplicatedGravity": "Helper property used to replicate the current gravity to clients as soon as it's set. GravityScale is not replicated and the\nGravityScale variable in FortProjectileBase only replicates the initial value, so we need a consistent replication solve.",
    "PairedWeightContainer": "Helper struct because we can't otherwise nest containers.",
    "NativeCurieFXTypeSettings": "Helper struct defining per native FX type settings",
    "PersistenceFrameworkModule_NameToContainerMap": "Helper struct for defining type that can be a UPROPERTY.",
    "FortDialogExternalLatentActionHandle": "Helper struct for dialogs that are used to track unique cases of a dialog waiting for an external latent action to complete before it ends",
    "FortNativeCurieFXResponse": "Helper struct for encapsulating an interface's response to native Curie FX",
    "LastBuildableState": "Helper struct for keeping of the last buildable state for a building type",
    "TrackedEvent": "Helper struct for replicating tracked event ids.",
    "FortMissionConfigDataBucket": "Helper struct for storing configuration data assets",
    "FortMissionInstancedConfigDataBucket": "Helper struct for storing instanced configuration data assets",
    "FortInteractionExecutionInteractData": "Helper struct for storing interact handles with the index of the Execution Entry that started it *",
    "FortHUDState": "Helper struct for the HUD state",
    "FortPendingSlottedItemOperation": "Helper struct for tracking pending slotted items that are waiting for a profile update",
    "TeamChangeRequest": "Helper struct representing a request for a team change",
    "FortCurieExecutionParams": "Helper struct that holds data relevant to executing applications and interactions *",
    "FortParticleSystemParamBucket": "Helper struct to allow specification and easy application of particle system component parameters",
    "VisibilityTestPoint": "Helper struct to do visibility/obstruction tests or get HitResults from Overlapped Actors.\nDefines a single test point (location, collision component it's on).",
    "StormCapDamageThresholdInfo": "Helper struct to facilitate presenting player cap thresholds better.\nWe want to show players the delta that actually matters - so this is a unified place\nto implement the sliding comparison point.",
    "PlayerBuildableClassFilter": "Helper struct to filter the list of player buildable classes with",
    "PendingDeployableBaseUser": "Helper struct to handle a user being initialized for deployable base use",
    "FortGameFeatureInstallBundleURLData": "Helper struct to hold data about what URL should be used to access GameFeaturePlugins tied to GameFeatures *",
    "SplitStormProxyCircle": "Helper struct to organize information about the proxy circle's location and size.",
    "FortHighlightParamProfile": "Helper struct to present a unique profile of highlight-related material parameter names; Prevents having to constantly duplicate them",
    "EnvironmentBuildingRestorationRecord": "Helper struct to store information for environment actors that was destroyed and need to be restored later",
    "FortCuriePendingElectricityArcRequest": "Helper struct to track a pending electricity FX request",
    "FortCurieWorldFirePlayerSystem": "Helper struct to track a world fire niagara system for Curie fire for a player",
    "FortCurieGlowFadeRequest": "Helper struct to track active Curie glow fade requests",
    "FortCurieActiveElectricityArc": "Helper struct to track active electricity arc VFX",
    "FortCurieFireParticleGrassData": "Helper struct to track active possible fire particle data for a grass area",
    "FortCurieVoxelFireParticleGrassData": "Helper struct to track active possible fire particle data for a grass area",
    "FortCurieFireParticleActorData": "Helper struct to track active possible fire particle data for an actor",
    "AgingActorArray": "Helper struct used to keep track of aging actors and prune ones that are getting too old.",
    "TagTableManagerHelper": "Helper struct: drop in your Keyword Data structure and get some details customization/buttons to manage your table",
    "EFortEmporiumItemLicense.All": "Helper value to indicate \"any license type\"",
    "MinigameScoreEntry:bHasScore": "Helper variable for tracking when a score entry has or doesn't have a valid score",
    "FortOctopusVehicle:TowhookMaxInvalidateTargetAngleDeg": "Helps with \"brushing\" the reticle past intended targets. When the last\n              aim trace has a valid point and the current one doesn't, then the camera\n              direction is compared to the direction from the ball to the previous\n              trace hit. If the angle is less than this number, we keep aiming towards\n              that point.",
    "FortSpaghettiVehicle:TowhookMaxInvalidateTargetAngleDeg": "Helps with \"brushing\" the reticle past intended targets. When the last\n              aim trace has a valid point and the current one doesn't, then the camera\n              direction is compared to the direction from the ball to the previous\n              trace hit. If the angle is less than this number, we keep aiming towards\n              that point.",
    "EVehicleTrickType.StartedLanding": "Here a timer starts to make sure they don't bounce or wipe out.  No credit yet...",
    "McpItemIdAndQuantity": "Here because assets reference this, and type remapping didn't appear to work...",
    "FortHeroExhibitActor:HeroType": "Hero type for which this exhibit actor should be used",
    "EFortFrontendInventoryFilter.HestiaWeapons": "Hestia-specifc Filter Categories",
    "FortPlayerMannequin:bMannequinCastsHiddenShadow": "Hidden Shaddow casting to apply to all character parts and weapon skelatal mesh.",
    "FortMobileContextFilter:HiddenInContexts": "Hidden if ANY of these EXACT contexts are present",
    "WrapPreviewGridActor:LockerFilterMode": "Hide items that don't match any filter",
    "ESpecialEventTODMModifyType.Hide": "Hide the GameState's TODM, but don't remove it from the GameState",
    "EUraniumRoundPhase.HideRoundEnd": "Hide the Round End screen that displays who won",
    "EItemPreviewRestrictionMode.HideTargetCosmetic": "Hide the restricted cosmetic, even if it is the primary target for our preview. This is how in-game restrictions\nare handled. Useful in locker previews so the player sees how their loadout will appear in-game.",
    "EUraniumRoundPhase.ShowPOICamera": "Hide the round intro screen if shown and start showing the POI camera view",
    "EWrapPreviewGridLockerMode.UnsupportedWeaponsOnly": "Hide weapons that have a home in the locker (and therefore will be shown in game), showing a list of weapons that aren't wrap-ready yet",
    "FortPlayerPawn:bHideBodyOnDeathRequested": "Hide-on-death requested, will be done when pawn is actually dead.",
    "EFortPawnMaterialOverrideFlags.HideParticleSystems": "Hides particle systems when override is active",
    "FortPrioritizedWidgetData:Priority": "Higher priorities are always going do display when they want to, never get interrupted by lesser priorities.",
    "MashPlayerDataEntry:StreakMultiplierKillCountHighestThisSession": "Highest Streak Kill Count achieved this session.",
    "FortMission_RiftSpawners:MaxEncounterIndex": "Highest encounter index",
    "EAlertLevel.Threatened": "Highest level of alert, engaged in active fighting",
    "KeepItemContainer:BestAvailableRarity": "Highest rarity of items that will be given, pulled from data table - when bShowChoiceUI is false",
    "FortTierProgressionInfo:HighestDefeatedTier": "Highest tier defeated against the specified layout asset",
    "EBuildingHighlightType.AuxiliaryInterestPoint": "Highlight useful for things that need to draw attention outside the main flow of forced/interact highlights, such as world-based objectives",
    "FortAIPawn:bCanMoveThroughWalls": "Hint for path following that building interaction (attack) abilities are non destructive",
    "FortMinigame:RoundWinHistory": "History of who won what round\nValue == PlayerBucket index\nINDEX_NONE means tie (no winner)",
    "RigUnit_BoneGroundTrace:HitLocation": "Hit location in rig / global Space",
    "RigUnit_BoneGroundTrace:HitNormal": "Hit normal in rig / global Space",
    "FortAthenaVehicle:LookAheadHit": "Hit result for lookahead",
    "FortPhysicsPawnObject:LookAheadHit": "Hit result for lookahead",
    "LacklusterData:BuildingSMActorHitSound": "Hit sound for BuildingSMActors",
    "HoagieInPersistent:CurrentHoagieState": "Hoagie State",
    "TInteractionType.IT_LongPress": "Hold",
    "FortItemsConsumedInfo": "Hold Items consumed for writing to analytics.",
    "FortRevivedInfo": "Hold Revived for writing to analytics.",
    "PawnConvertedInfos": "Hold a converted pawn info to writing to analytics",
    "FortBotTeleportInfo": "Hold bot teleports for writing to analytics.",
    "FortBotNavLinkTimeoutInfo": "Hold navlink timeout for writing to analytics.",
    "PapayaPlayerSpawningComponent:BestSpawnPoints": "Hold our best spawn points at runtime help with collisions and randomness",
    "FortPlayerMappableKeySettings": "Hold setting information of an Input Action or an Action Key Mapping for setting screen and save purposes.",
    "FortObjectiveRecord": "Holder of all Objective Data",
    "FortAthenaMutator_Knockback:AllPlayersKnockbackData": "Holds KnockbackData for all players in the match. Note that this will remain empty if bStorePlayerKnockbackData is false, and will not replicate if bReplicatePlayerKnockbackData is false.",
    "FortObjectiveBlock": "Holds a collection of objectives",
    "FortNonPrimaryMission:DistributionCategoryIndicesSatisfied": "Holds a list of indices of all distribution categories that this mission satisfies.  Used while Mission Generation is in progress.",
    "FortNonPrimaryMission:RequirementIndicesSatisfied": "Holds a list of indices of all requirements that this mission satisfies.  Used while Mission Generation is in progress.",
    "FortMapData": "Holds a map name, and the tags that apply to that map",
    "FortAIDirectorDataTrackingSettings": "Holds all settings for the data tracking for the AI Director",
    "FortMissionTimerComponent:TimerData": "Holds all the Timer Data. Wrapped in a struct to make sure it all arrives in one bundle.",
    "SpecialRelevancyHealthComponent:ReplicatedDamageRecords": "Holds all the damage records",
    "SpecialEventScript:PhaseInfoArray": "Holds all the phase info",
    "FortAthenaMutator_Tag:TagTeamInfo": "Holds all the scoring info",
    "ForcedPerks": "Holds an array of forced items",
    "FortAthenaMutator_Infiltration:POIInfo": "Holds an array of info on POIS populated at runtime",
    "BarrierMountedTurretData": "Holds an array of material overrides to swap in",
    "BarrierHeadData": "Holds an array of parts to swap in",
    "OmahaCharacterVariantInfoData": "Holds an array of parts to swap in",
    "FortClientAnnouncement_Conversation:ConversationData": "Holds any run-time data needed to setup the notification",
    "FortClientAnnouncement_TutorialConversation:TutorialData": "Holds any run-time data needed to setup the notification",
    "FortClientAnnouncement_ZoneModifiers:ModifiersData": "Holds any run-time data needed to setup the notification",
    "PawnDamageZones": "Holds bone names and data for each zone",
    "ScriptedObjectMovementCalendarEventData": "Holds calendar event data. Used to hold real calendar events or mock calendar events for testing",
    "SpecialRelevancyPlayerStart:RelevancyGroups": "Holds controllers and their relevancy groups",
    "PapayaLiveEventComponent:ActiveCustomEmotes": "Holds custom emotes that have been enabled so we can know what emotes to use with ForcePlayEmoteOnPlayers",
    "SkyfireTeleportData": "Holds data about a specific teleport (eg from the prison to the playspace)",
    "CachedMarkerData": "Holds data about cached markers and whether or not they should be visible for the local player.",
    "RealitySaplingEnvQueryParam": "Holds data needed to define a hotfixable EQS query param. For use with reality sapling spawn EQS",
    "PlayerStartInfo:PlayerStartActors": "Holds found player starts",
    "NeighboringFloorInfo": "Holds info about a building floor",
    "NeighboringWallInfo": "Holds info about a building wall",
    "NeighboringCenterCellInfo": "Holds info about the center cell",
    "LiquidRibbonSplineDetachment": "Holds information about a detachment/split of a liquid ribbon spline.\nA detachment in the ribbon spline occurs in the middle of one spline segment, however the segement is not split into two\nsegment structs. It remains one segment struct, but this marks it as having a detachment, a \"gap\" in the middle of it.\nThe two ribbons IDs  are the visible spline (can be multiple segments) on either side of it.",
    "LiquidRibbonSplineSegment": "Holds information about a segment of liquid ribbon spline",
    "VehicleWheelFXSocketInfo": "Holds information about an FX socket for a wheel",
    "TempestStateInfo": "Holds information about our current state",
    "MarkerUtilitiesCompassPlacementIcon": "Holds information regarding compass icons that represent players' placement on the compass.",
    "MarkerUtilitiesMapPlacementIcon": "Holds information regarding map icons that are going to be used to depict player placement on the map.",
    "GameStateLootInfo": "Holds loot spawning info for TreasureChests and AmmoBoxes, along with GoldenPOI alternates (ported from FortAthenaMapInfo)",
    "FortQuestIconComponent:InWorldIndicator": "Holds on to our in-world indicator",
    "FortMiniMapComponent:MiniMapIndicator": "Holds on to our mini-map indicator",
    "FortPlacementLocationTagHandler": "Holds onto information so it can remove \"Used\" tags from locations once the actor spawned there dies.",
    "AthenaAISettings:NavigationSystemConfig": "Holds parameters for a AthenaNavSystem's creation. Set to Null will result\n    in NavigationSystem instance not being created for this world",
    "FortDecoHelper:PlacementInfo": "Holds placement state",
    "SkyfirePlayerAnalyticData": "Holds player specific analytic data that will be reported by SkyfirePlayerPawnComponent when they exit Skyfire.",
    "FortAthenaVehicle:RuntimeModifiedProperties": "Holds property values that can be modified at runtime",
    "FortWindMaterialData": "Holds required data for one material for a Fort Wind Responder",
    "FortPlayerControllerAthena:BuildingMatchStats": "Holds stats totaled from building analytics",
    "FortAthenaMutator_SpecialEvent:bServerHasBackfillActive": "Holds status of backfill that is replicated to clients for displaying via cheat Fort.Event.bDisplayServerBackfillStatus",
    "FortPackedTileStates:TileStates": "Holds the Tile states as a bit array packed in groups of 8 (uint8 elements)",
    "ContentOnDemandTelemetryInfo": "Holds the analytics data for a given ContentOnDemand request",
    "FortPlayerPawnAthena:CachedDBNOInvulnerableTime": "Holds the current duration that this pawn will take no damage on being DBNO",
    "EventResponderTrackingItem:EventName": "Holds the event name these responders will respond to",
    "FortTimeOfDayManager:CurrentTimeOfDayFogValues": "Holds the exponential height fog values applied or about be applied this frame based on time of day; it's reset in code every frame.",
    "SpecialEventPhaseComponentNetModeInfo": "Holds the information about the component class and the net mode\n    at which that component needs to be applied or removed.",
    "BuildingActor:LabelOverride": "Holds the label override for this actor, if any (mainly for devices)",
    "FortTimeOfDayManager:CurrentTimeOfDayDirectionalLightColor": "Holds the light color applied to the directional light for the sun or moon; it's reset in code every frame, but you can set it to override the light color changes in OnUpdateDirectionalLightForTimeOfDay.",
    "MarkerUtilitiesTeamPlacement": "Holds the placement information for a team. Used to replicate placement data since maps cannot be replicated.",
    "FortEncounterModeSettings": "Holds the settings for several of the different modes encounters can have e.g. spawn location placement mode (directional, ring, etc)",
    "FortPickupEntryData:FloatCurve": "Holds the starting and ending angles",
    "InteractionType:InteractionType": "Holds the type of interaction",
    "PartyMemberLobbyState:GameReadiness": "Holds the user's \"readiness state\", intentionally private, SetReadiness must be used!",
    "FortMission:bSuccessfullyInitializedActorsForMission": "Holds whether we successfully initialized mission placement actors*",
    "FortCarriedObject:SpawnPointActor": "Home base of this Object",
    "EFortItemType.AccountResource": "Home base resources and gold",
    "EFortItemType.HomebaseBannerColor": "Homebase banner color for account profile",
    "EFortItemType.HomebaseBannerIcon": "Homebase banner icon for account profile",
    "FortHookGunRope:HookGunRopeRepData": "Hook gun rope rep data",
    "FakeKillRelevancyPlayerDataArray:ControllerComponent": "Hook to the controller component, so we can broadcast a delegate from PostReplicatedAdd().\nNotReplicated, because we initialize on both server and client in the UFortControllerComponent_FakeKillRelevancy constructor.",
    "FortHexMapCoord:Horizontal": "Horizontal Coord",
    "TurretCosmeticData:HorizontalAimDeltaParamName": "Horizontal aim delta param name",
    "FortGyroV2Settings:GyroV2AttachedSpace": "Horizontal axis for handheld mode on Switch and mobile.",
    "FortGyroV2Settings:GyroV2DetachedSpace": "Horizontal axis for most controllers.",
    "FortPickup:SimulatingTooLongLengthInWaterVelocityThreshold": "Horizontal velocity threshold in water when selecting whether we consider the water to be moving or still.",
    "CrashpadStaticParams:NonPawnLaunchScaleXY": "Horz scale for launching non-pawns",
    "EReadyCheckState.CheckStarted": "Host initiated ready check, waiting for response",
    "FortLobbyBeaconHost": "Host object for maintaining a lobby before players actually join a server ready to receive them",
    "TurretCosmeticData:HotColor": "Hot color",
    "FortAthenaMutator_CustomCharacterParts:ShouldSwapSkins": "Hot fixable flag for if skin swapping is enabled or not",
    "TurretCosmeticData:HotThreshold": "Hot threshold",
    "BuildingPropMusicPlayer:MusicTrackTable": "Hot-fixable Data table for Music Tracks.",
    "FortAthenaMutator_Infiltration:bRoundIntroEnabled": "Hot-fixable bool variable for enabling/disabling the Round Intro UI screen/POI camera",
    "FortControllerComponent_MiniMapDiscoverable:bShareMiniMapComponentVisibilityWithAllySquadmates": "Hot-fixable value for enabling/disabling if players on the same team and the same squad share minimap visibility information.",
    "FortGameHotfixUpdateResponse": "Hotfix Update Result, exists for JSON",
    "FortPlayerController:ReturnToMainMenuTimeoutDelay": "Hotfix for controlling how long to wait for RTMM RPC processing",
    "FortPlayerController:bNoControllerLighting": "Hotfix kill switch for controller lighting",
    "FortPlayerPawn:bBuildHotfix": "Hotfix kill switch for disallowing building when under landscape\nBad name on purpose for anticheat as uproperties are exposed",
    "FortRandomPrefabData:bEnabled": "Hotfix that controls whether this prefab gets added to the pool or not",
    "FortAthenaCreativePortal:bDisallowPortalInteract": "Hotfix to turn off portal interact",
    "FortAthenaPartyRiftPortal:bPortalInteractDisabled": "Hotfix to turn off portal interact",
    "DrawTaggedPlayerIndicatorsData:bHotfixRenderEnemy": "Hotfix value, should we render this icon on enemy players with PlayerTag.",
    "DrawTaggedPlayerIndicatorsData:bHotfixRenderFriend": "Hotfix value, should we render this icon on friendly players with PlayerTag.",
    "DrawTaggedPlayerIndicatorsData:bHotfixRenderLocalPlayer": "Hotfix value, should we render this icon on the local player.",
    "DrawTaggedPlayerIndicatorsData:HotfixEnemyRenderDistance2D": "Hotfix value, within what 2D distance from the local player's camera should enemies with PlayerTag\n     have icons rendered at their location on the map. Values < 0 means the check is ignored.\n     Note: IF this value is set to 0, the map icon will NOT be rendered.",
    "DrawTaggedPlayerIndicatorsData:HotfixFriendRenderDistance2D": "Hotfix value, within what 2D distance from the local player's camera should friendly with PlayerTag\n     have icons rendered at their location on the map. Values < 0 means the check is ignored.\n     Note: IF this value is set to 0, the map icon will NOT be rendered.",
    "FortWorldManager:bClearOutpostMapStats": "Hotfix var that controls *permanent* deletion of Outpost Zone map stats in Outpost cloud save files",
    "FortPlayerControllerComponent_TacticalSprint:TacticalSprintEnabled": "Hotfixable boolean that allows disabling tactical sprint.  (Primarily used to disable tactical sprint in a\nparticular context (i.e. by creators' choice in their specific maps).)  Most likely makes bTacticalSprintEnabled\nobsolete (TODO Post-20.00: Investigate if bTacticalSprintEnabled and related functions can be removed.).",
    "FortWeaponRanged:FirstShotAccuracyMinWaitTime": "Hotfixable first shot accuracy min time to wait value.",
    "FortPlayerControllerComponent_TacticalSprint:TacticalSprintToggleGracePeriod": "Hotfixable time in seconds after pressing a toggle sprint input to start sprinting before we stop trying to\nsprint from failing to sprint.  This give a safety margin on players' input to let them start sprinting based on\nsmall margin of error of input.",
    "FortPlayerControllerFrontEnd:bEnableSTWAccoladeRedeem": "Hotfixable toggle for the StW accolade redeem. Toggling to false will break analytics, as accolade tokens will accumulate until the next client quest login.\nWe should prefer disabling the Accolade _reward tokens and export the MCP templates to disable the STW accolade system.",
    "FortAthenaMutator_ControlOnVictoryTimeDilation:bAllowEndGameTimeDilation": "Hotfixable value for enabling/disabling slow motion on victory",
    "FortWeaponRanged:bFirstShotAccuracyCheckVehicleMovement": "Hotfixable, if first shot accuracy should take vehicle movement into account.",
    "FortPlayerCameraBase:HoverboardCameraClass": "Hoverboard camera class",
    "PlaylistAccess:AdvertiseType": "How a playlist should advertise itself",
    "PlaylistFrontEndData:AdvertiseType": "How a playlist should advertise itself",
    "FortChallengeBundleScheduleEntry:UnlockType": "How are these unlocked?",
    "RecoilPart:KickVelocity": "How big the spring kick is",
    "TempestTornadoForcesComponent:PlayerNearRange": "How close a player must be to the tornado to be considered near it",
    "FortInGameLeaderboardPlacementData:PctToWin": "How close are we to winning?",
    "EFortComparisonType": "How does the current value differ from the base value",
    "FortGameCueCloakModifier:CurrentAlpha": "How faded in is this modifier, 0.0 for completely faded out, 1.0 for completed faded in.\n     When bCurrentlyEnabled == true, CurrentAlpha will increase every frame until it hits 1.0,\n     When bCurrentlyEnabled == false, CurrentAlpha will decrease every frame until it hits 0.0.",
    "FortAthenaMutator_Fill:BuildableOffset": "How far above or the lava level is structually supported",
    "AttackIKHandsDefinition:TargetBoneOffset": "How far above the surface is the Target Bone.",
    "DeploymentConsoleComponent:TeamMemberSpread": "How far apart members of the same team should be spawned during group spawn.",
    "FortAthenaMutator_Mash:SafeDetonationKillDistance": "How far away a killing player has to be from a killed AI to get the Safe Detonation Kill bonus.",
    "FortAthenaMutator_AdHocSquads:MaxDistInviteNotificationCanBeReceived": "How far away a player can be and still receive a message that a player has initiated a squad invite.\n     Should be smaller than MinimumDistInviteNotificationIsLost.",
    "FortAthenaMutator_AdHocSquads:MinimumDistInviteNotificationIsLost": "How far away a player can be before losing a squad invite notification.\n     Should be bigger than MaxDistInviteNotificationCanBeReceived.",
    "BuildingSMActor:BuildingAttachmentRadius": "How far away from the attachment point to look for something to attach to",
    "FortFallTeleportComponentBase:DistanceFromPawnToTraceLocation": "How far away from the owning pawn should we check for valid locations when tracing down",
    "FortMiniMapData:ViewableDistance": "How far away on the mini-map can it be? The mini-map covers 4000 units in every direction. If negative, the distance check is ignored.",
    "BuildingActor:CullDistance": "How far away this actor is visible from. Intentionally non-transient because OnConstruction does not get called for actors loaded in a level at runtime.",
    "FlightParams:ControlFrameDistance": "How far back from the vehicle should the control frame be? Again this\n              may not have a massive effect on the actual controls, and is primarily\n              for camera setup, if there's camera matching.",
    "MusicClipSyncConfig:maxPreRollBars": "How far back to look for held midi notes that might still be playing at the sync point. Make as short as possible.",
    "CubeMovementStaticPath:GenerationZTraceHeight": "How far below the master spline path should generation trace to find the landscape? 100000 is value used in pawn underground check.",
    "FortSurfaceTrackingComponent:SkinWidth": "How far below the pawn the ray will travel",
    "BuildingFillFloor:ZKillOffset": "How far below the top of the floor the pawn has to be before we kill them automatically",
    "FortAthenaMutator_Fill:ZKillOffset": "How far below the top of the lava the pawn has to be before we kill them automatically",
    "TowhookParams:MaxCableLength": "How far can the towhook possibly extend (cm)",
    "FortAthenaMutator_RespawnAndSpectateSelect:RespawnBaseRotationOffset": "How far forward the respawn location will be moved. Forward is relative to the base rotation of the respawn location",
    "BuildingSMActorClassData:BuildingPlacementDistance": "How far forward to place this actor when placing in game",
    "FortStormShieldCameraActor:CameraOffsetForward": "How far forward/back to offset the camera from the center of the storm (NOTE: the camera is moved along the camera's forward vector AFTER the CameraRotationOffset is applied)",
    "FortWorldManager:FriendlyPlayerSpawnExtent": "How far from a friendly can players try to spawn. Creates a box that extends this distance in both directions for each axis.",
    "FortWorldManager:PadPlayerSpawnExtent": "How far from a spawn pad can players try to spawn. Creates a box that extends this distance in both directions for each axis.",
    "FlightParams:SteerMaxHeadingDiffDegrees": "How far from the current heading can the target heading be? Values approaching\n              90deg will become extremely weird and unstable.",
    "FortAthenaMutator_Barrier:ObjectiveDistanceFromWall": "How far from the wall we should place the objectives",
    "BulletWhipTrackerData:TriggerAheadDistance": "How far in the direction of velocity to extend the \"passby plane\"",
    "EFortStartupPhase": "How far into startup loading we are, this always increases",
    "FortAthenaMutator_Uranium:AircraftOffsetFromRadius": "How far outside of the safezone the aircraft will go at the beginning and end of its path",
    "TornadoConfigEntry:EyeBufferDistance": "How far past the target orbit radius, into the tornado, an object must be to be considered in the eye",
    "VehicleWeaponReticle3DConfig:ReticleTraceDistance": "How far should the trace go out to test for geometry collisions.",
    "FortDecoHelper:DecoToolReach": "How far the deco tool can reach",
    "GroundSplineLocationData:DistanceAlongSpline": "How far the owning object is along the current spline",
    "FortSnapOnSurfaceComponent:MaxMovement": "How far the snap is allowed to move the actor.",
    "AutoAimWeaponPawnComponent:TargetToReticleDistanceNormalized": "How far the target is between the inner reticle center and the reticle edge.",
    "FortAnimNode_AttackIK:MaxCastLength": "How far to search above and below the IK bones for the ground.",
    "FlightParams:ControlFrameHeight": "How far up should the control frame be from the vehicle? Won't affect\n              much unless the control frame is being used to control the camera.\n\n              The control frame is on a \"boom\" which always points towards the plane.\n              The height and distance params determine the exact position of the\n              control frame when it is at rest.",
    "IceGroundPath:LandscapeTraceBuffer": "How far we check above and below spline mesh point for landscape to use as a normal",
    "TowhookParams:ContractSpeedKmh": "How fast does the towhook contract after it's been detached (cm/s)",
    "TowhookParams:ExtendSpeedKmh": "How fast does the towhook extend after it's been attached (cm/s)",
    "VehiclePontoonBuoyancyDataExtended:ScaleRadiusPerTick": "How fast pontoon radius reduces per tick.",
    "FortAthenaMapInfo:AircraftSpeed": "How fast the aircraft moves.",
    "GroundSplineSpeedData:Speed": "How fast the owning object should move",
    "GroundSplineSpeedData:YawSpeed": "How fast the owning object should rotate its yaw",
    "BuildingGameplayActorSentry:LocatingDamagerRotationRate": "How fast the sentry will rotate towards its last damager while in the LocatingDamager state.\n     Only set to positive numbers.",
    "BuildingGameplayActorSentry:TrackingRotationRate": "How fast the sentry will rotate towards its target while in the Targeting state.\n     Only set to positive numbers.",
    "BuildingGameplayActorSentry:ReturnToIdleRotationRate": "How fast the sentry will rotate towards the idle position while in the returning to idle state.\n     Only set to positive numbers.",
    "BuildingGameplayActorSentry:RotationRate": "How fast the sentry will rotate while in the idle state.\n     Only set to positive numbers.",
    "FortSpectatorCameraComponent:FocalLengthInterpSpeed": "How fast to interpolate focal length (for smoothness).",
    "FortChaseCameraHelper:CameraTruckRate": "How fast to truck in and out",
    "FortSpectatorCameraComponent:ZoomRate": "How fast to zoom, in degrees per sec.",
    "TankWeaponAimingData:AimRotationLerpSpeed": "How fast we interp from current rotation to camera rotation.",
    "VehiclePontoonBuoyancyDataExtended:ScaleTimeFrequency": "How frequently pontoon scale radius ticks.",
    "BuildingTrapFloor_Turret:FireRate": "How frequently the turret will fire",
    "EQSActorSpawnerData:BaseQueryingAttemptIntervalTimeSeconds": "How frequently to retry checking if navigation is NOT ready to start the base placement query",
    "FortAthenaMutator_EQSActorSpawner:MutatorBaseQueryingAttemptIntervalTimeSeconds": "How frequently to retry checking if navigation is NOT ready to start the mutator base placement query",
    "FortAthenaMutator_SpawningPolicyEQS:BaseQueryingAttemptIntervalTimeSeconds": "How frequently to retry checking if navigation is ready to start the base placement query",
    "FortAthenaMutator_SupplyDrop:BaseQueryingAttemptIntervalTimeSeconds": "How frequently to retry checking if navigation is ready to start the base placement query",
    "FortAthenaMutator_SplitStorm:ProxyUpdateFrequency": "How frequently to update the safe zone proxy's center and radius, if less than or equal to zero, updates will occur once every frame.",
    "FortSplineGroundPath:PathUpdateSecondIntervals": "How frequently updates occur",
    "TempestMovementComponent:WaterTraceZOffset": "How high above the base of the weather event we do a downwards trace for water",
    "FortPartyRiftPortalManager:MaxHeightFromPawn": "How high above the pawn's location we allow the portal to be placed.",
    "RootMotionSource_RocketRam:FloorTraceHeight": "How high above the root motion target location to trace downwards looking for ground.",
    "FortPartyRiftPortalManager:MaxHeightAboveTerrain": "How high above the terrain we allow the portal to placed. This allows the portal to slightly hover over debris and uneven terrain.",
    "TornadoConfigEntry:HeightToForceEject": "How high an object can be before it is no longer affected by the tornado",
    "FortPartyRiftPortalManager:VerticalSpawnDistance": "How high or low can we spawn a portal.",
    "FortGyroV2Settings:GyroV2ButtonX": "How is gyro behaviour in the horizontal axis modified when the gyro button is held?",
    "FortGyroV2Settings:GyroV2ButtonY": "How is gyro behaviour in the vertical axis modified when the gyro button is held?",
    "VkModuleVersionDoc:Access": "How is this module able to be accessed from outside the project",
    "VkModuleVersionModerationStatus:ModerationSource": "How is this module version has been moderated",
    "EFortObjectiveRequirement": "How is this objective required, in relation to mission completion",
    "FortAthenaMutator_AdHocSquads:MaxAdHocSquadSize": "How large can an ad hoc squad be. CanNOT exceed the game's max squad size",
    "FortGameplayTagBuildingActor:XGridCells": "How large of an area does this cover? Measured in grid squares",
    "FortGameplayTagBuildingActor:YGridCells": "How large of an area does this cover? Measured in grid squares",
    "FortGameplayTagBuildingActor:ZGridCells": "How large of an area does this cover? Measured in grid squares",
    "FortAthenaMutator_Skyfire:KnockedOutPrisonPenaltyWaitTime": "How long (in seconds) a player must wait in prison before rejoining the playspace after being knocked out\nThis value is indexed for different squad sizes, 0 - solo, 1 - duo, 2 - trio, 3 - squad",
    "FortAIController:GoalVisibilityPersistanceTime": "How long (in seconds) after losing sight of the goal before we consider it no longer visible (for purposes such\nas knowing its location based on sensing it).  NOTE: This value is irrelevant for goals which can't be seen\n(currently anything that isn't a pawn can't be seen).  In most such cases, the AI \"magically\" knows where the goal\nis regardless of sight, though that's a separate property set elsewhere.",
    "FortMinigame:ServerEndgameDelay": "How long (in seconds) to delay before switching to the end Game/Round Flow.  This should be greater than the time dilation that happens on the clients.",
    "FortMinigame:GameWinnerDisplayTime": "How long (in seconds) to display the GameWinner widget.",
    "FortMinigame:RoundWinnerDisplayTime": "How long (in seconds) to display the GameWinner widget.",
    "FortMinigame:GameScoreDisplayTime": "How long (in seconds) to display the Scoreboard at the end of the game.",
    "FortMinigame:RoundScoreDisplayTime": "How long (in seconds) to display the Scoreboard at the end of the game.",
    "FortMovingPlatformComponent:MaximumPickupAttachTime": "How long a pickup can be attached to a moving platform before it should be forcefully removed (<= 0 indicates it should never be forcefully removed)",
    "FortMovingPlatformComponent:MaximumPickupStationaryTime": "How long a pickup can be attached to a moving platform before it should be pushed off (<= 0 indicates it should never be pushed off)",
    "FortMovingPlatformComponent:PickupRelevanceTime": "How long a pickup can be attached to a moving platform before it should be pushed off (negative indicates it should never be pushed off)",
    "FortAthenaMutator_RespawnAndSpectateSelect:ForceRespawnTime": "How long a player can wait beyond the respawn timer before the game automatically picks a respawn target and forces them to respawn",
    "DaySequenceActor:DayLength": "How long a single day cycle is",
    "FortAthenaMutator_Skyfire:LootRoomTimeByRarity": "How long a squad has in each loot room before they are teleported out of the mothership to skydive back to the main map starting when they open a chest\n    or when their LootRoomPreCountdownTime expires. Each loot room (common - legendary) has a different time.",
    "FortAthenaMutator_ShowPlacard:WaitBeforeInitialFadeOutDuration": "How long after ShowScreen() is called before we start the initial screen fade out before showing the UI placard",
    "FortPlayerController:LastDamagerCreditThresholdDropElim": "How long after a damage event to give credit to the last damager in case of dropping",
    "FortPlayerController:LastDamagerCreditThresholdSelfElim": "How long after a damage event to give credit to the last damager in case of self elimination",
    "FortPlayerController:LastDamagerCreditThresholdStormElim": "How long after a damage event to give credit to the last damager in case of storm elimination",
    "EQSActorSpawnerData:DelayBeforeSpawning_BySafeZoneIndex": "How long after spawning is triggered before the first actor spawns (if indexing by safezone is enabled.)\n     Curve table values are keyed by the SafeZoneIndex",
    "EQSActorSpawnerData:DelayBeforeSpawning": "How long after spawning is triggered before the first actor spawns.",
    "BuildingGameplayActorSentry:PauseTimeBeforeIdleState": "How long after the Locating Damager or Return to Idle state finishes it's work before we enter the Idle state state.",
    "FortAthenaMutator_Cobalt:PreRoundDisplayDelay": "How long after the camera view phase is visible do we show the POI Camera UI.",
    "FortGameModeAthena:EndGameKickPlayersDelay_NoIGMM": "How long after the game ends before we kick players when In Game Match Making is DISABLED.",
    "FortGameModeAthena:EndGameKickPlayersDelay_IGMM": "How long after the game ends before we kick players when In Game Match Making is ENABLED.",
    "FortFollowCam_Settings:HorizonPullDelay": "How long after the player last directly controlled the camera can we start pulling to the horizon?",
    "MashAIEncounterWeights:SpawnDelay": "How long after the safezone phase starts before the special AI is spawned in. NOTE: if the spawn delay is longer than the length of the safezone phase the special AI will NOT spawn.",
    "FortTouchAimAssistSettings:AutoTrackDuration": "How long aim assist will continue tracking a target when input stops.",
    "FortGameStatePvE:EndMatchWarningTime": "How long before the match ends to display a timer showing how much time is left",
    "SpecialRelevancyHealthComponent:RelevancyDeathTimeLength": "How long before we shut off replication to clients that have killed this actor",
    "FortAthenaMapInfo:SafeZoneStartDelay": "How long before we start the safe zones.",
    "FortLOSComponent:TimeBetweenChecks": "How long between LOS Checks? This number will be slightly randomized between to minimize calls happening in the same frame",
    "FortDynamicBuildingDeconstructor:TimeBetweenChunks": "How long between spawns?",
    "FabricTimelineSyncComponent:SpeedSyncTimeoutLength": "How long can we go without a message from the server before we force our speed to 1.0?",
    "FortAIPawn:RecentlySeenInterval": "How long counts as \"recently seen\".  Affects CanAlmostSenseEnemy() for example.",
    "FortAthenaMutator_Cobalt:RespawnDelay": "How long do players wait before they are respawned into the game.",
    "FabricMetaSoundManagerComponent:ReplicatedReceivedSignalBufferDuration": "How long do we consider a received signal to be active (audible) before we should consider unregistering as audible\nControlled by a CVar",
    "FortAthenaMutator_Cobalt:PreRoundDisplayDuration": "How long do we show the POI Camera UI for.",
    "CatalogDownload:DailyPurchaseHrs": "How long does a user have to wait before \"daily\" purchases reset. Should be a divisor of 24 because it will be aligned to calendar day regardless",
    "DaySequenceActor:TimePerCycle": "How long does it take for a day cycle to complete in world time. If this is the same value as day duration that means real world time is used",
    "FortFollowCam_Settings:HorizonPullDampeningTime": "How long does it take to come out of dampening the pull-to-horizon?",
    "FortGyroV2Settings:FlickTime": "How long does it take to complete a flick?",
    "FortAIPawn:SecondInteractionDuration": "How long does it take to interact with this AI using second optional interaction?",
    "FortAIPawn:InteractionDuration": "How long does it take to interact with this AI?",
    "FortComicPanelTransition:Duration": "How long does the transition take?",
    "FortAthenaMutator_Cobalt:RoundDuration": "How long each round lasts when respawn is enabled",
    "FortAthenaMutator_SplitStorm:MoveToEndDuration": "How long it should take the proxy to move from the hold circle to the end circle. This mirrors the normal safe zone's ShrinkTime.",
    "FortAthenaMutator_SplitStorm:MoveToHoldDuration": "How long it should take the proxy to move from the start circle to the hold circle. This mirrors the normal safe zone's ShrinkTime.",
    "CustomItemWrapModifier_Banana_Base:FadeTime": "How long it takes for the effect to fully fade in (in seconds)",
    "BeginGroupTeleportParams:FadeTime": "How long it takes the screen to fade in and out during the teleportation",
    "AutoAimWeaponPawnComponent:LockOnTimeReticleCenter": "How long it takes to form a lock-on when the target is at the center of the reticle.",
    "AutoAimWeaponPawnComponent:LockOnTimeReticleEdge": "How long it takes to form a lock-on when the target is at the edge of the reticle.",
    "RockVehicleAbility_Jump:MaxJumpSeconds": "How long jump is allowed to stay active",
    "BotKnockbackSettings:IgnoreMoveInputDuration": "How long move inputs are ignored when receiving knockback event",
    "DigestedBotKnockbackSettings:IgnoreMoveInputDuration": "How long move inputs are ignored when receiving knockback event",
    "FortAxisSmoothing:AverageValue": "How long received axis movement has been zero.",
    "FortAthenaMutator_ShowPlacard:FadeDuration": "How long screen fades last for the placard sequence",
    "PlaystyleSwitchToAggressiveData:SwitchBackToDefensivePreventionTime": "How long should we stay in aggressive state before we are allowed to turn back to defensive playstyle",
    "PlaystyleSwitchToAggressiveDataDigested:SwitchBackToDefensivePreventionTime": "How long should we stay in aggressive state before we are allowed to turn back to defensive state",
    "FortAthenaMutator_Infiltration:GroundTimer": "How long something is on the ground before its destroyed",
    "FortGameplayCueNotifyAthena_FallDamageImmunity:LayeredAudioFadeInDuration": "How long the FortLayeredAudioComponent takes to fade in.",
    "FortGameplayCueNotifyAthena_FallDamageImmunity:LayeredAudioFadeOutDuration": "How long the FortLayeredAudioComponent takes to fade out.",
    "FortClientAnnouncement:TimeToLive": "How long the announcement has to live before it is destroyed. Negative value implies it lives forever. This allows announcements to be sent to the client on join after they were sent",
    "FortClientAnnouncementData_Basic:DisplayTime": "How long the announcement will be displayed for. A negative number implies \"Until the UI deems it is done\"",
    "FortMantisTechniqueCharacterSettings:ReattachCharacterRotationBlendTime": "How long the blend time is when reattaching character rotation to the camera. Used when blending out of this technique and not branching\n              into another technique as well as when blending into this technique after branching from another technique (if bDetachCharacterRotationFromCamera is false).",
    "FortAthenaMutator_Uranium:EndOfRoundCameraFadeInTime": "How long the camera takes to fade in during the FadeIn phase. This amount of time MUST be shorted than RoundPhaseDurations[FadeIn]",
    "FortAthenaMutator_Uranium:EndOfRoundCameraFadeOutTime": "How long the camera takes to fade out during the FadeOut phase. This amount of time MUST be shorted than RoundPhaseDurations[FadeOut]",
    "TrackingOffsetModifiers:CombatStartDuration": "How long the combat start curve is used after starting a combat",
    "FortAthenaLivingWorldDespawnCondition:TimeAsCandidateBeforeDespawn": "How long the condition must be true before the actor is despawned.",
    "UrgentQuestData:TotalEventTime": "How long the event will last.",
    "UrgentQuestSettings:TotalEventTime": "How long the event will last. If > 0.0 bQuestCompleteOnTimeExpiration will be used to determine whether completion or failure occurs on expiration\n Note that if set to 0.0, urgent quest will last indefinitely. Can be used for bespoke control (e.g. Stop X destroying the Y!)",
    "ScriptedObjectMovement_StaticPathCalendarCheatDefinitionData:DurationTimeSeconds": "How long the fake calendar event should last",
    "FortGyroV2Settings:GyroV2ButtonHoldTime": "How long the gyro modifier button needs to be hold to not also trigger its shared action",
    "FortPickupLocationData:FlyTime": "How long the pickup will take to complete it's journey",
    "FortMovementComp_CharacterAthena:JumpPenaltyResetTime": "How long the player has to wait between jumps in order for the jump penalty to reset.",
    "FortAthenaMutator_Uranium:PushersAbandonedCartDuration": "How long the pushers are allowed to abandon the cart before overtime ends",
    "FortWeaponRangedDualSwing:RopeFadeTime": "How long the rope and anchor meshes should remain visible after being detached.",
    "FortCosmeticVariantPreview:PreviewTime": "How long the rotation preview timer will sit on this stage",
    "BuildingTrapFloor_Turret:ReloadTime": "How long the turret will take to reload",
    "FortAthenaMutator_WarmupTime:WarmupTime": "How long the warm up phase should last.  0.0 uses default time < 0 will be infinite time.",
    "TieredWaveSetData:WaveLengthMod": "How long the wave should last, if timed",
    "FortConversationSentence:PostSentenceDelay": "How long to delay before moving on to playing the next sentence",
    "FortRewardActivity:RewardDisplayTime": "How long to display the reward for",
    "FortConversationSentence:DisplayDuration": "How long to display the speech bubble",
    "FortVehiclePhysicsCollisionDamageComponent:ClientIgnoreBuildingActorsTime": "How long to ignore building actors that are hit on the client if we're predicting they'll be destroyed on the server.",
    "FortGameModeZone:EndOfZoneRemainTime": "How long to keep the zone up after completion of the zone",
    "RewardPreviewInfo:CycleTimeOverride": "How long to preview the specific params. If 0 or less it uses the default time from the preview params",
    "MinigamePostGameSettings:PostGameDelay": "How long to show the postgame screen.  0 = ignore this parameter.",
    "DigestedRangedWeaponSkill:TriggerHoldDuration": "How long to simulate trigger press",
    "RangedWeaponSkill:TriggerHoldDuration": "How long to simulate trigger press",
    "BuildingGameplayActorChaser:PatrolTurnSeconds": "How long to spend turning to new direction when patrolling",
    "FabricStepSequencerGridSquareComponent:ContinuationControlInteractionDelay": "How long to wait after initial interaction before starting continuation control logic",
    "FortAthenaMutator_Cobalt:DelayBeforeRoundEndDeathAndStinger": "How long to wait after round end before killing the losing team and playing the round end stinger for winning teams",
    "FortAthenaMutator_Cobalt:DelayBeforeShowingRoundEndUI": "How long to wait after round end to show the round end UI. Used in the cobalt round complete widget",
    "FortAthenaMutator_Uranium:EndOfRoundStasisDelay": "How long to wait after the round ends before putting players into stasis",
    "FortMantisTechniqueData:InputWindowDelay": "How long to wait before input is accepted for the next technique.  Set to < 0 to disable the input window.\n              This property is ignored if there are input window notifies set in the montage.",
    "FortAthenaMutator_Skyfire:TimeToWaitBeforeStartingSkyfireWithJustBots": "How long to wait before starting the experience if only bots have been abducted. This time needs to be long enough to give the chance\nfor non-bot players to be abducted and load into skyfire.\nTypically, the prison phase on the server doesn't start until a non-bot player has loaded into the prison. This timer will start\nwhen a bot loads into the prison, and when this timer ends the prison phase will begin if it hasn't already.\nThis timer will be canceled as soon as a non-bot player loads into the prison (and thus the prison phase starts normally).",
    "FortAthenaMutator_SpecialEvent:UpdateBackfillStatusTime": "How long to wait between calls to UpdateBackfillStatus if we are not Ticking on the dedicated server, set to positive value to use",
    "FortQuickBarsAthena:ServerPrimarySlotsUpdateDelay": "How long to wait on primary slot change before sending the update to the server.",
    "FortAthenaMutator_Cobalt:POICameraViewPhaseDuration": "How long to wait on the POI Camera view before showing the perk selection screen.",
    "FortVehicleAudioOneshotGate:MinTimeSinceTrigger": "How long to wait until triggering again",
    "FortGliderLayeredAudioOneshotGate:MinTimeSinceTrigger": "How long to wait until we're able to trip this gate again",
    "FortLayeredAudioOneshotGate:MinTimeSinceTrigger": "How long to wait until we're able to trip this gate again",
    "TowhookParams:TractorBeamRestLength": "How long under the ufo the tractor beam wants to be",
    "DigestedFocusSetting:IgnoreThreatDuration": "How long we are ignoring a threat before looking again",
    "FocusSetting:IgnoreThreatDuration": "How long we are ignoring a threat before looking again",
    "FortAthenaMutator_ShowPlacard:ShowPlacardDuration": "How long we fully show the UI placard\n Does NOT include fade time, so setting the duration to 0.5, the screen would fade in, wait for 0.5 seconds, and then start to fade out",
    "FortAthenaVehicle:TimeToIdleBrake": "How long we idle before applying idle brake",
    "FortPawn:StaySpottedTime": "How long we remain spotted",
    "FortAthenaMutator_SplitStorm:MoveToEndWaitDuration": "How long we should wait before starting to move the proxy to the end circle after PhaseToSplitStorm + 1 begins. This mirrors the normal safe zone's WaitTime.",
    "FortAthenaMutator_SplitStorm:MoveToHoldWaitDuration": "How long we should wait before starting to move the proxy to the hold circle after PhaseToSplitStorm begins. This mirrors the normal safe zone's WaitTime.",
    "DigestedFocusSetting:IgnoreThreatTimeWhenNotAttacking": "How long we stick looking at a threat, before turning around and ignore it",
    "FocusSetting:IgnoreThreatTimeWhenNotAttacking": "How long we stick looking at a threat, before turning around and ignore it",
    "LookAtDigestedSetting:LookAtDuration": "How long we stick looking at, before turning switching, (Duration of 0 will turn it off)",
    "LookAtSetting:LookAtDuration": "How long we stick looking at, before turning switching, (Duration of 0 will turn it off)",
    "FillFloorPositionData:PostMoveDelay": "How long we wait once we reach the height",
    "SkyCapPositionData:WaitTime": "How long we wait once we reach the height",
    "FillFloorPositionData:MoveTime": "How long we will take to get from our current position to the height",
    "SkyCapPositionData:MoveTime": "How long we will take to get from our current position to the height",
    "IndicatedActorData:Duration": "How long will this be shown for?",
    "StenciledActorData:Duration": "How long will this be shown for?",
    "ChaseExternalForce:Duration": "How long will this force be applied?",
    "FortPlayerInputSettings:HoldInputTime": "How long you have to hold a button down for the input system to determine that you're holding a button",
    "FortPlayerInputSettings:HoldCraftAmmoTime": "How long you have to hold a button down to trigger ammo crafting",
    "FortPlayerInputSettings:HoldHudChatTime": "How long you have to hold a button down to trigger chat in HUD",
    "FortPlayerInputSettings:HoldVoteDialogTime": "How long you have to hold a button down to trigger the vote dialog in HUD",
    "FortAthenaMutator_ShowPlacard:ServerWaitsOnBlackScreenDuration": "How longer after the screen is supposed to be fully black on the client before the server does anything that could affect the client's view\n This time compensates for lag between the server and client, but MUST be the same for all players",
    "SoundPerceptionDigestedSetting:Loudness": "How loud is this sound compare to the other ones",
    "SoundPerceptionSetting:Loudness": "How loud is this sound compare to the other ones",
    "SpecialEventAudioHapticsAction:LoudnessCeiling": "How loud the audio needs to be in order to fully trigger this haptics action\n    Loudness is normalized, it's always between 0 and 1.",
    "SpecialEventAudioHapticsAction:LoudnessFloor": "How loud the audio needs to be in order to start triggering this haptics action.\n    Loudness is normalized, it's always between 0 and 1.",
    "DynamicTapDelayInfo:Gain": "How loud this echo should be, in decibels.",
    "TornadoConfigEntry:DepthToForceEject": "How low an object can be before it is no longer affected by the tornado",
    "FortControllerComponent_AIDebugger:NumNavMeshes": "How many NavMeshes the Navigation System currently has",
    "FortAthenaPatrolPath:MaxLifetimeUsage": "How many actor can be assigned this path during the game. -1 is infinite. If set, will hide the MaxConcurrentUsage.",
    "AircraftFlightConstructionInfo:AircraftCount": "How many aircrafts need flight paths",
    "SBMusicalTargetsTimerComponent:LookaheadBeats": "How many beats before do we start the cue approaching it's arrival beat.",
    "FortAthenaBeaconComponent:MaxAttractedBots": "How many bots can be attracted in the same time by this beacon",
    "FortWeapon:TraceThroughBuildingsLimit": "How many buildings can be hit with single weapon trace if trace through is enabled",
    "BuildingTrapFloor_Turret:MaxAmmo": "How many bullets should the turret fire before needing to reload",
    "FMDeviceCable:CableSectionCountAtCableHeads": "How many cable sections should we use around the cable heads?",
    "CardPackOffer:QuantityRemaining": "How many can we still buy today",
    "FortMiniMapData:ColorPulsesPerSecond": "How many color pulses are happening per second?",
    "FortScoutDroneAnalyticsComponent:NumberOfContainersInteractedWith": "How many containers the drone opened in the session",
    "TeamPerformanceMessageData:NumberOfTeamsToTriggerFor": "How many different teams can trigger this message before it becomes disabled.\n     -1 for trigger always.",
    "CatalogPurchaseInfo:PurchaseQuantity": "How many do we want to buy",
    "FortScoutDroneAnalyticsComponent:NumberOfEnemiesPassivelyMarked": "How many enemies were marked via the passive marking ability of the drone",
    "FortScoutDroneAnalyticsComponent:NumberOfEnemiesMarkedOnCaw": "How many enemies were marked via the radius mark (caw) ability",
    "FortAthenaMutator_GG:FinalTierSize": "How many entries from the end of the WeaponEntries will be considered \"final tier\" items.",
    "TargetDataEntry:NumberOfFoundationsToFind": "How many foundations should we look for?",
    "AutoAimWeaponPawnComponent:CurrentLockOnCount": "How many full lock-ons have been acquired (i.e. if we were to fire right now, how many locked-on projectiles would we spawn.",
    "FortVehicleAimingWeaponComp:RotCyclesPerFullTurnHoriz": "How many full pedal rotations it requires for one full turret rotation horizontally.",
    "FortVehicleAimingWeaponComp:RotCyclesPerFullTurnVert": "How many full pedal rotations it requires for one full turret rotation vertically.",
    "MegaStormCircle:CurrentQuadrant": "How many grid cells from the gridCenter our megastorm forms at.",
    "FortSafeZonePhaseInfo:MegaStormGridCellThickness": "How many grid cells thick the mega storm for this radius will be.  Default(0) means no mega-storm",
    "FortSafeZoneDefinition:MegaStormGridCellThickness": "How many grid cells thick the mega storm for this radius will be.  Default(0) means no mega-storm.",
    "BuildingValueRules:CellHorizontalRadius": "How many grid squares in each horizontal direction from the Objective Actor will be considered for max distance calculations and which target is best.  If zero, only the main index and actors above or below will be included.  If 1, nine actors in the box centered on the index will be considered, extending up and down as specified by CellsAbove and CellsBelow",
    "FortScoutDroneAnalyticsComponent:NumberOfItemsPickedUp": "How many items the drone picked up in the session",
    "CraftingObjectRepStateData:NumToCraft": "How many items we might need to craft",
    "TieredWaveSetData:KillPointsMod": "How many kill points are required to end the wave if using a kill points wave rule",
    "CustomCharacterPartsByKillOverrideData:KillThreshold": "How many kills a player must achieve before they will use PartOverrideData.\n     Set to 0 to make the part overrides the default part override used for players with 0 kills.\n     Set to -1 to invalidate (i.e. the overrides will NOT be used.)",
    "TieredWaveSetData:NumKillsMod": "How many kills are required to end the wave if using a kill all enemies or kill specific enemy wave rule",
    "FortWeapon:TraceThroughLandscapeLimit": "How many layers of landscape can be hit with single weapon trace if trace through is enabled",
    "FortAthenaMutator_Uranium:PushersAbandonedCartOvertimeInterval": "How many levels PushersAbandonedCart Overtime has defined in the curve table.",
    "LockedQuestConfigData:DisplayQuantity": "How many locked widgets to generate. ShowAll for every potential case, or ShowNextOnly for only the next available.",
    "FortBadgeScoringData:MissionPoints": "How many mission points this badge is worth, which is used to calculate loot.",
    "MissionGenerationInfo:NumMissionsGeneratedMatchingRequirements": "How many missions have been generated so far that match the tag requirements below.  Used to keep track for every category so we can simultaneously satisfy each category.",
    "FortAIDirector:NightCount": "How many nights have occurred",
    "PartyMemberSharedQuestInfo:Objs": "How many objectives have been completed",
    "PrototypeCraftingOutput:Quantity": "How many of the item that will be crafted.",
    "PrototypeCraftingIngredient:Quantity": "How many of the items are needed to craft this recipe.",
    "MtxPackage:BonusAmount": "How many of these (<=Total) should be reported as \"bonus\"",
    "CatalogOffer:DailyLimit": "How many of this entry can be purchased in a given day. Use a daily limit of < 0 to indicate unlimited",
    "CatalogOffer:MonthlyLimit": "How many of this entry can be purchased in a given month (as defined by the gregorian calendar). Use a monthly limit of < 0 to indicate unlimited",
    "CatalogOffer:WeeklyLimit": "How many of this entry can be purchased in a given week (sunday to sunday). Use a weekly limit of < 0 to indicate unlimited",
    "FortItemEntry:Count": "How many of this item there are. For instance, is this a stack of potions?",
    "ItemQuantity:Quantity": "How many of this item type",
    "FabricMetaSoundNodePool:NumberAdded": "How many of this patch have been added total",
    "PerDifficultyMissionGenerationInfo:MissionGenerationInfos": "How many of which missions to generate for this difficulty range.",
    "FortWeapon:TraceThroughPawnsLimit": "How many pawns can be hit with single weapon trace if trace through is enabled",
    "BuildingGameplayActorPetrol:ProjectileCount": "How many petrol projectiles does this splatter represent.",
    "FortDynamicBuildingDeconstructor:NumOfPiecesToDestroyAtOnce": "How many pieces do we spawn at once?",
    "GGCenterDisplayEntry:PlayersAtWeapon": "How many players are at this entry.",
    "ETeamPerformanceMessageTrackingStat.TeamScorePercent": "How many points a team has relative to the goal score. Threshold values should be 0 < x <= 1",
    "ETeamPerformanceMessageTrackingStat.TeamScore": "How many points a team has scored. Threshold values should be integers.",
    "UraniumSingleRoundInfo:PointsForWinning": "How many points this round is worth. This is used to decide the overall winner. Designer set in blueprint",
    "CatalogStorefrontMatch:PullCount": "How many pulls from CatalogEntries will occur every day. Use < 0 to ignore weights and include all items.",
    "MissionTimeDisplayData:ColorPulsesPerSecond": "How many pulses happen per second",
    "FortDailyQuestData:Count": "How many quests from this group are granted. This group needs at least this many quests during template export, otherwise there will be a template export error",
    "FortBattleRoyalePlayerAugmentSystem:NumRollsForUnlock": "How many rolls are needed before a new augment unlock is possible.",
    "FortBaseWeaponStats:ClipSize": "How many rounds are in a \"clip\" (i.e. reloaded at once)",
    "FortBaseWeaponStats:NumIndividualBulletsToReload": "How many rounds are loaded at once when doing invdividual reloads (ReloadType == ReloadIndividualBullets).",
    "FortAthenaMutator_Uranium:NumberOfRounds": "How many rounds should be placed",
    "FortAthenaMutator_RespawnAndSpectateSelect:DeadTargetAvailabilityTime": "How many seconds a player target can be used as a respawn option after they have died. Disabled by default",
    "FortMinigame:WarmupDuration": "How many seconds should the warmup state last?",
    "FortAthenaMutator_Skyfire:SecondsGrantedOnTimePickup": "How many seconds to grant (towards the time before the squad is teleported to the loot room) when a time pickup is picked up.\nThis value is indexed for different squad sizes, 0 - solo, 1 - duo, 2 - trio, 3 - squad",
    "FortCreativeMoveTool:MaxUnhoverAnimationTime": "How many seconds to keep MIDs applied to unhovered (or unselected) actors after they have become unhovered/unselected",
    "FortAthenaMutator_Skyfire:KnockedOutTeleportToLootRoomTimeReduction": "How many seconds to reduce this squads time before loot room teleport when a squad member is knocked out of the playspace\nThis value is indexed for different squad sizes, 0 - solo, 1 - duo, 2 - trio, 3 - squad",
    "FortMiniMapData:SizePulsesPerSecond": "How many size pulses per second?",
    "FortCosmeticLockerSlotInformation:NumSlotsOfCategory": "How many slots of this item type exist.",
    "BuildingValueRules:CellsAbove": "How many stories above the origin index (derived from the Objective Actor) should be included.  If zero, only buildings at the altitude or below will be included.",
    "BuildingValueRules:CellsBelow": "How many stories below the origin index (derived from the Objective Actor) should be included.  If zero, only buildings at the altitude or above will be included.",
    "MinigameTeam:EliminatedCount": "How many team members are currently eliminated",
    "MinigameTeam:TeamSize": "How many team members are in this team",
    "FortButterCakeComponent_Telemetry:BerserkCount": "How many times buttercake became berserk",
    "FortButterCakeComponent_Telemetry:LuredCount": "How many times buttercake became lured for loot",
    "FortButterCakeComponent_Telemetry:SneezeCount": "How many times buttercake has sneezed",
    "CrashpadDynamicParams:CrashpadsBouncedOffOf": "How many times has a collision with another crashpad occurred",
    "BuildingWeakSpot:HitCount": "How many times has this been hit so far? This always increases",
    "DynamicXpPlayerSessionTransient:TimeSpanOutliers": "How many times player was penalized because the had too much xp in a timespan window.",
    "FortButterCakeComponent_Telemetry:BlowholeUsesCount": "How many times the Blowhole has been used",
    "SmartBuildingActor:RotationIterations": "How many times the build piece should be rotated (by 90 degrees)",
    "FortButterCakeComponent_Telemetry:AIPawnAsBerserkInstigatorCount": "How many times the instigator of the Berserk Mode was a AIPawn (Wildlife, ect.)",
    "FortButterCakeComponent_Telemetry:BotAsBerserkInstigatorCount": "How many times the instigator of the Berserk Mode was a Bot (Phoebe)",
    "FortButterCakeComponent_Telemetry:NPCAsBerserkInstigatorCount": "How many times the instigator of the Berserk Mode was a NPC",
    "FortButterCakeComponent_Telemetry:PlayerAsBerserkInstigatorCount": "How many times the instigator of the Berserk Mode was a Player",
    "FortButterCakeComponent_Telemetry:UnknownAsBerserkInstigatorCount": "How many times the instigator of the Berserk Mode was unknown",
    "FortScoutDroneAnalyticsComponent:NumberOfCaws": "How many times the radius mark (caw) ability was used",
    "FortHitchhikerComponent_Telemetry:DeinfectionCount": "How many times this hitchhiker has been deinfected",
    "FortHitchhikerComponent_Telemetry:InfectionCount": "How many times this hitchhiker has been infected",
    "MashScoreTrackingData:Count": "How many times this score event has been triggered.",
    "EQSActorSpawnerData:TotalRetryAttemptsOnSpawnFailure": "How many times to re-attempt a spawn when a spawn fails.\n     < 0 is infinite.",
    "FortAIDirector:NumWorldSubdivides": "How many times we subdivide the world in 2-D squares for determining where to place the ambient threat encounters",
    "ProjectileTrajectorySplineInfo:MaxBounces": "How many trajectories preceding bounces will be calculated.\n     MaxBounces == 0 the trajectory will be calculated as if there are no bounces, the spline will go right through geo.\n     1 means that a trajectory will be calculated up til the first bounce,\n     2 means that a trajectory will be calculated for the initial shot and until the 2nd hit,\n     etc, etc.",
    "FortLevelInstancePrefab:NumberOfRandReservedValuesForBuildingInit": "How many values should we reserve for this type of prefab? This is normally the max number of prefabs of this type that we'll spawn in a session",
    "FortAthenaMutator_Uranium:EarlyEndGame_BlowOutPointSpread": "How many victories a team has to be winning by for the game to end early because of blowout rule",
    "TieredModifierSetData:ModifierDuration": "How many waves the modifiers in this last will last for; note that 0 means infinite",
    "Card:QuantityReceived": "How many we received (may be different from Item->Quantity since that could already incorporate items previously acquired in its stack)",
    "MyTownWorkerSetBonusData:RequiredWorkersCount": "How many workers this SetBonus needs to be applied",
    "WorkerSetBonusData:RequiredWorkersCount": "How many workers this SetBonus needs to be applied",
    "TeamPerformanceMessageData:ReplicationType": "How messages are replicated to all players.\n     This choice can affect how reliably the message will be delivered and how expensive it is to manage the message.",
    "MtxPurchaseHistoryEntry:TotalMtxPaid": "How much MTX was paid for this purchase (This is the amount that would be returned in the event of a refund)",
    "XPEventEntry:RemainingRestXP": "How much Rested XP Do we have left",
    "BuildingWall:SlidingDoorTargetRotationOffset": "How much SlidingDoor rotates when sliding open, ADDED to original DoorTargetRotationOffset",
    "FortCollectionBookXPData:TotalXpToGetToThisLevel": "How much XP has it taken to get to this level (sum of all previous XpToNextLevel)",
    "XPEventEntry:TotalXpEarnedInMatch": "How much XP have we gotten this match",
    "DynamicXpProfileStats:CurrentDayXp": "How much XP player has gained today using CurrentDay.",
    "FortCollectionBookSlotXPWeightData:ConstantWeight": "How much XP slotting an item will give, regardless of the items level or rarity",
    "DynamicXpPlayerSessionTransient:TotalXpGained": "How much XP was gained in this play session",
    "DynamicXpPlayerSessionTransient:TotalXpPotential": "How much XP was potentially gained if XP is active and no penalties",
    "FortCollectionBookSlotXPWeightData:ItemLevelWeight": "How much XP will be granted per item level",
    "FortCollectionBookSlotXPWeightData:ItemRatingWeight": "How much XP will be granted per item power level",
    "FortCollectionBookSlotXPWeightData:RarityWeight": "How much XP will be granted per rarity level",
    "FortItemEntry:LoadedAmmo": "How much ammo is loaded into this item",
    "FortAthenaVehicle:ForwardDrivingAntiGravityScaler": "How much anti gravity we get when the player is actually driving (1.0 ignores gravity, 0.0 feels it entirely)",
    "GearConfig:SteeringAngleMultiplier": "How much better/worse turning becomes when in this gear",
    "SMVehicleGear:SteeringAngleMultiplierHotfixable": "How much better/worse turning becomes when in this gear",
    "FortSafeZoneDamageInfo:Damage": "How much damage is dealt to a pawn outside of the safe zone.\nbPercentageBasedDamage determines whether this will be dealt as a percentage or not",
    "FortSafeZonePhaseInfo:StormCapDamagePerTick": "How much damage the storm cap deals every TimeBetweenStormCapDamage seconds",
    "OverrideMovementInputData:MinDeflectionForRunning": "How much does the stick need to be deflected for running to be permitted?",
    "OverrideMovementInputData:MinForwardForSprint": "How much does the stick need to be deflected for sprint to be permitted?",
    "CardPackOffer:Price": "How much does this cost",
    "CardPackOffer:RegularPrice": "How much does this item cost when not on sale",
    "TowhookParams:RopeBreakForce": "How much force can the rope take before breaking? 0 == infinite",
    "SphericalDriveParams:BounceForce": "How much force is applied when we want to bounce.\nThis is different from the repulsion force because we'll dampen this after each consecutive bounce.",
    "TowhookParams:RopeYankForce": "How much force is required for a constraint hit to count as a yank?",
    "FortVehicleFuelComponent:FuelPerSecondBoosting": "How much fuel is spent per second while boosting",
    "RuntimeFuelUsageInfo:FuelPerSecondBoosting": "How much fuel is spent per second while boosting",
    "FortVehicleFuelComponent:FuelPerSecondDriving": "How much fuel is spent per second while driving",
    "RuntimeFuelUsageInfo:FuelPerSecondDriving": "How much fuel is spent per second while driving",
    "FortVehicleFuelComponent:FuelPerSecondIdle": "How much fuel is spent per second while idle",
    "RuntimeFuelUsageInfo:FuelPerSecondIdle": "How much fuel is spent per second while idle",
    "FortAthenaMutator_RespawnAndSpectateSelect:RespawnHeightOffset": "How much higher than the respawn actor the player should respawn",
    "FortButterCakeComponent_Telemetry:ItemsEatenCount": "How much object buttercake ate",
    "FortButterCakeComponent_Telemetry:ItemsSneezedCount": "How much object buttercake has sneezed",
    "DynamicXpPlayerSessionTransient:LastBoostedXp": "How much of a boost did the last XP get.",
    "AthenaAIController:CheapFlyingNavPointHorizontalGridRatio": "How much of a cell grid to offset the added custom link",
    "AthenaAIController:CheapFlyingNavNavPointVerticalGridRatio": "How much of a cell grid to vertically offset the added custom link",
    "FortOrientationWarpingSettings:BodyOrientationAlpha": "How much of rotation is on whole body versus on IK Feet.",
    "TargetDataEntry:HealthPercentRequiredToMoveOn": "How much of the building do we need to destroy before it is destroyed?",
    "KairosSubmitLogOptions:LogTailKb": "How much of the log tail to submit",
    "PartyFailureLogSubmit:LogTailKb": "How much of the log tail to submit",
    "PurchaseFailureLogSubmitOptions:LogTailKb": "How much of the log tail to submit",
    "VoiceChatLogSubmitOptions:LogTailKb": "How much of the log tail to submit",
    "FortAbilityCost:CostValue": "How much of thing to spend",
    "AmmoItemState:AmmoLoadedCount": "How much of this ammo is currently \"loaded\" onto the player",
    "FortWidgetComponent:ClampPaddingBottom": "How much padding between the bottom edge of the screen and our widget when we clamp",
    "FortWidgetComponent:ClampPaddingLeft": "How much padding between the left edge of the screen and our widget when we clamp",
    "FortWidgetComponent:ClampPaddingRight": "How much padding between the right edge of the screen and our widget when we clamp",
    "FortWidgetComponent:ClampPaddingTop": "How much padding between the top edge of the screen and our widget when we clamp",
    "SphericalDriveParams:ContactRepulsionForce": "How much repulsion force is applied by contacts",
    "FortItemEntry:PhantomReserveAmmo": "How much reserve \"phantom\" ammo this item has",
    "MashScoreTrackingData:Score": "How much score was earned from this event.",
    "BuildingWall:SlidingOpenTime": "How much should the doors translate when sliding",
    "BuildingWall:SlidingTranslation": "How much should the doors translate when sliding",
    "FortTouchAimAssistSettings:PullStrengthPitchCurve": "How much target and player movement contributes to the aim assist pull based on distance from target. (0 = none, 1 = MAX)\nNOTE: The distance is scaled using the field of view in order to keep distances relative across all weapon types.\nIE: A distance of 5000 will be much larger as the field of view gets smaller.",
    "FortTouchAimAssistSettings:PullStrengthYawCurve": "How much target and player movement contributes to the aim assist pull based on distance from target. (0 = none, 1 = MAX)\nNOTE: The distance is scaled using the field of view in order to keep distances relative across all weapon types.\nIE: A distance of 5000 will be much larger as the field of view gets smaller.",
    "FortAimAssist2D_Settings:PullInnerStrengthAds": "How much target and player movement contributes to the aim assist pull when target is under the inner reticle. (0 = None, 1 = Max)",
    "FortAimAssist2D_Settings:PullInnerStrengthHip": "How much target and player movement contributes to the aim assist pull when target is under the inner reticle. (0 = None, 1 = Max)",
    "FortAimAssist2D_Settings:PullOuterStrengthAds": "How much target and player movement contributes to the aim assist pull when target is under the outer reticle. (0 = None, 1 = Max)",
    "FortAimAssist2D_Settings:PullOuterStrengthHip": "How much target and player movement contributes to the aim assist pull when target is under the outer reticle. (0 = None, 1 = Max)",
    "FortGamepadSettings:AimAssistPullStrength": "How much target and player movement contributes to the aim assist pull. (0 = none, 1 = MAX)",
    "BuildingWall:DoorTargetRotationOffset": "How much the doors rotate when sliding open",
    "IntensityContribution:MaxContribution": "How much the factor contributes when it is maxed out. Total contributions get normalized",
    "BuildingTrapFloor_Turret:DecreaseIntervalRotationSpeed": "How much the turret will decrease in speed when it next decreases",
    "BuildingTrapFloor_Turret:IncreaseIntervalRotationSpeed": "How much the turret will increase in speed when it next increases",
    "FortAthenaDoghouseVehicle:AntiGravityScalerWhenEmpty": "How much the vehicle slides sideways when empty (1 implies full anti gravity in lateral movement, 0 implies no anti gravity)",
    "FortAthenaSKMotorVehicle:AntiGravityScalerWhenEmpty": "How much the vehicle slides sideways when empty (1 implies full anti gravity in lateral movement, 0 implies no anti gravity)",
    "FortAthenaSKPushVehicle:AntiGravityScalerWhenCoasting": "How much the vehicle slides sideways when empty (1 implies full anti gravity in lateral movement, 0 implies no anti gravity)",
    "FortAthenaSKPushVehicle:AntiGravityScalerWhenEmpty": "How much the vehicle slides sideways when empty (1 implies full anti gravity in lateral movement, 0 implies no anti gravity)",
    "FlightParams:LowSpeedThrust": "How much thrust can the engine exert at 0kmh forward velocity.",
    "FlightParams:HighSpeedThrust": "How much thrust can the engine extert juuuust before max speed.",
    "FortAthenaMutator_PerkSystemMutator:MaxTimeToBlockRespawn": "How much time a must wait before being released even if a perk has been selected",
    "FortAthenaMutator_PerkSystemMutator:MaxTimeAtPerkScreen": "How much time a player is given to pick a perk",
    "FortGameModePickup:InteractionTime": "How much time does it take to interact with the object",
    "AutoAimWeaponPawnComponent:ProgressTowardNextLockOn": "How much time has been spent acquiring the next pending lock-on",
    "BuildingTrapFloor_Turret:CachedUpdateTime": "How much time has occured since the last update",
    "FortSupplyDropGamePhaseData:SupplyDropTimeInterval": "How much time is in between each supply drop.  Time starts when the first safe zone activates.",
    "FortSplineGroundPath:CleanupTime": "How much time it takes to cleanup after we fade out and destroy a path.",
    "FortProjectileMovementComponent_FloorSnapped:CorrectionDuration": "How much time to apply CorrectionUpSpeed to our velocity when considered stuck",
    "FortGameCueCloakModifier:VisibilityModifierAdditive": "How much to add to the target's visibility by when enabled and fully faded in (i.e. CurrentAlpha == 1.0.)",
    "FabricTimelineSyncComponent:SpeedAdjustFactor": "How much to adjust the timeline speed (1.0 +/- this) when we speed up or slow down to sync",
    "TieredWaveSetData:DifficultyAddMod": "How much to bump the difficulty up when we reach this wave",
    "FortPlayerControllerGameplay:FlightSprintMultiplier": "How much to multiply speed by when flight sprinting.",
    "FortCollectionBookSlotXPWeightData:PremiumTierWeight": "How much to multiply the XP by for \"Premium\" item tiers",
    "FortGameCueCloakModifier:VisibilityModifierMultiplicative": "How much to multiply the target's visibility by when enabled and fully faded in (i.e. CurrentAlpha == 1.0.)",
    "AthenaAIController:NavWalkingSearchExtentScale": "How much to scale the regular character's movement agent config search extent when in cheap flying mode",
    "HoverDroneMovementComponent:TurboHoverThrustScale": "How much to scale thrust when in turbo mode.",
    "FortCreativeMoveTool:TargetRotationOffset": "How much to yaw, pitch or roll the object.  This is the desired rotation, but might not be the current\n          actual rotation",
    "BattlePassOfferPurchaseRecord:TotalCurrencyPaid": "How much was paid for this purchase",
    "DynamicXpSessionAccoladeStats:PotentialXp": "How much we potentially could grant if calculated by system - depends on calibration of system.",
    "FortAimAssist2D_Settings:TargetWeightCurve": "How much weight the target has based on the time it has been targeted.  (0 = None, 1 = Max)",
    "FortTouchAimAssistSettings:TargetWeightCurve": "How much weight the target has based on the time it has been targeted.  (0 = none, 1 = MAX)",
    "FortAthenaAIBotDigestedTargetHeuristicSettings:DBNOWeightModifier": "How much weight to add when player is thirsty or remove when passive on target when target is DBNO",
    "FortAthenaAIBotTargetHeuristicSettings:DBNOWeightModifier": "How much weight to add when player is thirsty or remove when passive on target when target is DBNO",
    "FortAthenaAIBotDigestedTargetHeuristicSettings:GameParticipantWeightModifier": "How much weight to add when the target is a game participant (real players or other player bots)",
    "FortAthenaAIBotTargetHeuristicSettings:GameParticipantWeightModifier": "How much weight to add when the target is a game participant (real players or other player bots)",
    "FortGameModeZone:LongRangeAutoPickupInterval": "How often (in seconds) to check long range auto pickup.",
    "FortAIController:GoalInfoUpdateRate": "How often (in seconds) to update Goal information (like distance) (in some cases based on its \"perception\")",
    "FortGameModeZone:SpectateAfterDeath_DelayRepeating": "How often after first attempting to enter death-spectator mode does the system re-try entering spectator mode",
    "FortFeedbackActionBankDefined:MinReplayTimeForSpeaker": "How often an individual speaker can play this speech.",
    "FortFeedbackActionBankDefined:MinReplayTime": "How often any speaker can play this speech.",
    "FortSafeZonePhaseInfo:TimeBetweenStormCapDamage": "How often damage is applied to players affected by the storm cap",
    "FortAthenaMutator_Skyfire:ClearCachedIndicatorsInterval": "How often the ClearCachedIndicators should be called (only done on the client).",
    "CatalogDownload:RefreshIntervalHrs": "How often the catalog storefronts regenerate. Should be a divisor of 24 because it will be aligned to calendar day regardless",
    "FortStatEvent:RepeatType": "How often the event can be repeated",
    "FortStatEventSequence:RepeatType": "How often the event can be repeated",
    "GCSettingsOverride:GCFrequency": "How often the game should Garbage Collect (0 = Use game defaults)",
    "FortCreativeTimerDevice:ServerDisplayUpdateRate": "How often the timer display should reconcile with the server",
    "FortAIPawn:UpdateNearbyPickupFrequency": "How often this AI looks for nearby Pickups, in seconds.",
    "FortFallTeleportComponentBase:ZHeightThresholdCheckRate": "How often to call TeleportByConditionZHeight which checks against ForceTeleportZHeight and teleports if below that threshold",
    "FortFallTeleportComponentBase:WalkingLocationUpdateRate": "How often to call UpdateTeleportComponent which checks against ForceTeleportZHeight and updates teleport locations while walking",
    "FortMission_RiftSpawners:CalendarRecheckInterval": "How often to check for the calendar if it is not ready when trying to evaluate it",
    "FortRangedWeaponStats:BulletsPerTracer": "How often to fire tracers",
    "MilkshakeControllerComponent:PlayForceFeedbackInterval": "How often to play an instance of force feedback",
    "FortAthenaMutator_Mash:ReportTeamScoreInterval": "How often to report team score events to each player's quest manager, in seconds.",
    "MilkshakeControllerComponent:NearbyBuildingActorsUpdateInterval": "How often to update NearbyBuildingActors",
    "FortAIDirector:DebugGraphUpdateFrequency": "How often to update the debug graphs",
    "FortWeaponRangedDualSwing:RopeUpdateFrequency": "How often to update the rope's length and rotation. Less than or equal to zero means the update will occur once every frame.",
    "BelongTreatyProjectileMovementComponent:EaseInUpdateFrequency": "How often to update the speed when easing in?",
    "GameplayStatMetadataTableRow:WeeklyRefreshInterval": "How often we can refresh the weekly leaderboards",
    "FortAIPawn:MinimapIndicatorUpdateFrequency": "How often we update the minimap indicator for AIs",
    "ActorTemplateRecord:ID": "How other records will find their template.",
    "FortProjectileMoveComp_Slider:SuspensionTensionEqualizeSpeed": "How quickly 1.0 unit of tension is dissipated: tension units/seconds.",
    "FortSplineGroundPath:LerpLocationRate": "How quickly LerpedMostRecentLocation moves toward MostRecentlyAddedLocation (<= 0.f means no lerping.)",
    "FlightParams:HeadingStabilizationRate": "How quickly can the heading be auto-adjusted to turn the thing around\n              if it is moving in reverse? If this is faster than the SteerPitchRate\n              or SteerYawRate,",
    "BattleLabDeviceGameplayActor_VendingMachine:LootTossSpeed": "How quickly do we launch loot from this machine?",
    "FortStormShieldCameraActor:CameraTurnSpeed": "How quickly the camera will turn in degrees per second 0 or less for instant turns",
    "FortPlayerPushableCart:PushSpeedPercentPerPusher": "How quickly the cart will move based on how many players are pushing the cart\n This value is multiplied by BasePushSpeed",
    "FortPlayerPushableCart:BasePushSpeed": "How quickly the cart will move when pushed at 100%",
    "RockBoxSpringSetup:Damping": "How quickly the oscillation dies out.",
    "SpringSettings:Damping": "How quickly the oscillation dies out.",
    "GroundSplineSpeedData:Acceleration": "How quickly the owning object should change speed",
    "GroundSplineSpeedData:YawAcceleration": "How quickly the owning object should change yaw speed",
    "RockBoxSpringSetup:Strength": "How quickly the spring goes from compressed to uncompressed.",
    "SpringSettings:Strength": "How quickly the spring goes from compressed to uncompressed.",
    "RecoilPart:SpringDamping": "How quickly the spring motion decays.\n- 0.0: the motion never stops\n- (0.0, 1.0): the motion will stop eventually, but the spring will initially overshoot the target.\n- 1.0: the spring is critically damped--it will reach the 0 position but won't overshoot.\n- > 1.0: the spring is over-damped--it will never reach the 0 position.",
    "RecoilPart:SpringStiffness": "How quickly the spring responds to the recoil",
    "FortAICloudVortex:TwistOverTime": "How quickly the tornado spins.",
    "FortPlayerPushableCart:YawSpeed": "How quickly the vehicle can turn\n NOTE: this only affects the rotation of the vehicle itself, it does not affect the location of the vehicle, the vehicle will ALWAYS stay on it's spline",
    "FortPlayerPushableCart:Deceleration": "How quickly the vehicle will decrease speed",
    "FortPlayerPushableCart:Acceleration": "How quickly the vehicle will increase speed",
    "FortVehicleAudioOneshotGate:InterruptFadeTime": "How quickly to fade out when being interrupted by either another gate or a cancellation",
    "FortMotorSimPatternState:OnsetInterpSpeed": "How quickly to smoothly transition when this component is activated",
    "FortGyroV2Settings:GyroV2TrackballDecay": "How quickly trackball effect wears off",
    "FortGameCueNotifyLoop_Cloak:VisibilityLevelChangeRate": "How quickly visibility changes.",
    "FortFollowCam_Settings:TurnBoostRate": "How quickly we come out of dampening when the stick is above the full deflection threshold.",
    "FortFollowCam_Settings:TurnDampeningRecoveryRate": "How quickly we go back into full dampening when the stick is below the full deflection threshold.",
    "FortAthenaDoghouseVehicle:FreelookReturnAcceleration": "How quickly will freelook transition into autocorrection when player has been idle",
    "FortAthenaDoghouseVehicle:FreelookReturnDecelleration": "How quickly will freelook transition out of autocorrection when player interrupts it",
    "FortHoverDroneCameraComponent:DroneTiltInterpSpeed_Decel": "How quickly/aggressively to interp back to neutral when decelerating",
    "FortHoverDroneCameraComponent:DroneTiltInterpSpeed_Accel": "How quickly/aggressively to interp into the tilted position.",
    "EQuickWeaponToggle": "How repeated presses of Quick Weapon should behave",
    "TowhookParams:MinCableLength": "How short can the cable get when contracting (cm)",
    "CatalogDynamicBundle:DisplayType": "How should this bundle to be displayed",
    "MusicClipSyncConfig:syncOption": "How should this music synchronize with the other music on the \\\"sync emitter\\\"?\"",
    "EMusicClipSyncOptions": "How should this playing music interact with the Music Emitter as far as synchronization?\"",
    "FortAttributeInfo:DisplayMethod": "How should we display this attribute",
    "FortAIPawn:SecondInteractionType": "How something can interact with the AI (second optional interaction).",
    "FortAIPawn:InteractionType": "How something can interact with the AI.",
    "EEQSActorSpawnerTriggerType": "How spawners are activated",
    "EQSActorSpawnerData:SpawningTrigger": "How spawning is triggered.",
    "FortAthenaMutator_Uranium:CartMovementRuleOnNewRound": "How the cart is moved after a round ends",
    "LivingWorldCalendarEventCondition:RatioBehavior": "How the condition should evaluate the ratio of the calendar event.",
    "FortExposedAssetPathCustomization:Type": "How the path should be generated after the plugin and prefix are applied. Specifically, which parts of the original ObjectPath should be re-used in the final path.",
    "CatalogOffer:OfferType": "How the price / items contained in this offer are determined",
    "FortCurieExecutionEntry:ExecutionType": "How the specified element will be applied to the interacting object *",
    "FortDynamicRollWeightModifierTableRow:WeightModifierOperation": "How the weight should be effected. Add adds to the weight. Multiply multiplies against the weight existing weight. These follow the rules of gameplay effects.",
    "PlayspaceConfiguration:CreationType": "How this Playspace should be added to the manager's Playspace tree hierarchy",
    "FortExposedAsset:ExposureType": "How this asset is exposed to UEFN. PublicAlias assets should have at least 1 alias, or else they're functionally the same as InternalOnly assets.",
    "FortExposedAssetPathCustomization:DefaultExposureType": "How this asset should be exposed to UEFN by default. ExposureType can be changed per-asset after the exposed asset list is refreshed.",
    "UtilityContribution:ContributionType": "How this contributes to the utility's current desired value",
    "GameplayVolume:PlayspaceCreationType": "How this gameplay volume should create the playspace when using the PlayspaceClassTemplate",
    "ItemLoadoutTeamMap:UpdateOverrideType": "How this override should update",
    "QuestProductData:SortIndex": "How this sorts relevant to other groups\nLower values sort first",
    "AthenaBuildingFoundationObjective:MiniMapBrush": "How this thing should show up on the mini map",
    "FortWeapon:GrantedAbilityRemovalPolicy": "How this weapon should respond to possible ability removal scenarios in regards to its granted abilities",
    "CharacterPartAttachmentParams:AttachmentRules": "How to attach to the character part. Defaults to match default attachment settings",
    "FortMinigame:WinCondition": "How to determine the winner of the mini game.",
    "ECatalogSaleType": "How to display the item on sale",
    "FortPlayerController:JumpStaminaCost": "How to handle Stamina for jumps",
    "AttachToComponentParams:RotationRule": "How to handle rotation when attaching.",
    "AttachToComponentParams:ScaleRule": "How to handle scale when attaching.",
    "AttachToComponentParams:LocationRule": "How to handle translation when attaching.",
    "CursorSettings:lookAheadType": "How to measure the look ahead (or look behind).",
    "FortSupplyDropMutatorData:ItemDeliveryMutatorPerSafeZonePhase": "How to mutate the item delivery supply drop by safe zone phase index",
    "FortNativeCurieFXResponse:GameplayCueResponse": "How to respond to a native FX state also having an associated non-native gameplay cue. Default should be to ignore it, but this allows overriding or also playing it in addition/instead.",
    "FortLevelStreamComponent:LevelStreamingData": "How to tell clients which package to load and uses connected data",
    "EGyroTouchMode": "How touching the touch screen to control the camera affects gyro",
    "EGyroStickMode": "How using the stick affects gyro",
    "EWaxState": "How visible a wax player is\n    The specifics are determined by WaxStateAboveWhichLeadersDrawSpecialStyleOnUI and the curve table settings of of UI_VisibilityMode within the function ShouldBeUI_Visible().",
    "FortControllerMiniMapComponentVisibility:Visibility": "How visible the MiniMapComponent should be for the owning player.",
    "FortAIDirector:DespawnAIType": "How we despawn NPC's",
    "DeleteActorRecord:RecordID": "How we make sure that deletes happen after a new record was created in the case of reused ObjectIDs",
    "CreativeToolPersistentData:HitTraceRule": "How we want to block line of sight while doing placement with move freely.",
    "CatalogOfferSource:SourceName": "Human tag for identifying where this source comes from",
    "LootTableSource:SourceName": "Human tag for identifying where this source comes from",
    "EFortAnnouncerTeamVocalChords.Max_None": "Human team 2 in PvP",
    "GameplayFeedbackEventInfo:DisplayText": "Human-readable name for identifying the event type in the editor",
    "VkPersistenceVersion:Name": "Human-readable name of most most recent migration for debugging/logging",
    "FortAimAssist2D_InputParams": "Humanlike Aim Assist Explainer\nhttps://docs.google.com/document/d/1V44INYjCQPXuYJaR4YtctPVDEm9wo1nYOems4vDiBfU/edit?usp=sharing\n\nEven at the highest competitive level, human players have a reaction time that has a big impact on their target acquisition and tracking.\n\nAim assist (including ours, currently) typically does not model this. This gives aim assist users an inhuman advantage:\n       * They acquire targets accidentally when they happen to appear around corners\n       * They keep their aim on targets impossibly well when they appear, change movement direction, or when a closer target dies\nTherefore, this \"robotic\" aim assist keeps players' aim on targets longer, meaning they land more shots and do damage in a way that\nis impossible for players who don't use aim assist (mainly mouse, but also gyro).\n\nThis puts us in the impossible position of making aim assist weak enough that its robotic effects don't feel unfair, but strong enough\nto help players (particularly new players) enjoy the game with a controller.\n\n\"Humanlike\" aim assist (as opposed to the \"robotic\" standard) models a human reaction time very simply, letting us tune competitive fairness\n(modelled reaction time) mostly separately from player comfort (aim assist strength). Like humans do, humanlike aim assist predicts the\ntarget's current position and velocity from older information. That prediction reaction time, and the time windows over which target velocity\nand acceleration, can be tuned with the CVars:\n       AimAssist2D.ReactionTime,\n       AimAssist2D.VelocityEstimationDelta,\n       AimAssist2D.UseEstimatedAcceleration, and\n       AimAssist2D.PredictDeadTargets.\n\nThey are all inactive unless:\n       * AimAssist2D.ReactionTime > 0, and\n       * the rollback AimAssistModelsHumanReactionTime is enabled\n\nThis rollback is disabled for now but can be enabled at any time for testing.\n\nThe meat of the implementation is in GetPredictedPosition, which tracks a target's historical position and uses that to predict a current\nposition and velocity. This could also be used for beginner-friendly auto-aim systems (high reaction time = low competitiveness) and\nbots (tune reaction time for difficulty; let typical human-against-human movement strategies perform well against bots).\n=============================================================================//////////////////////////////////////////////////////////////////////////\n// FFortAimAssist2D_InputParams\n//////////////////////////////////////////////////////////////////////////",
    "FortAthenaLivingWorldNavigationInvokerComponent:DistanceToPlayerHysteresis": "Hysteresis value used when the navmesh invocation is active to prevent oscillation if the players are moving",
    "FortAthenaLivingWorldNavigationInvokerComponent:RegistrationDistanceToPlayerHysteresis": "Hysteresis value used when the point provider is registered to prevent oscillation if the players are moving",
    "HarmonixFlangerEffectSettings:Rate": "Hz or Fraction of a Beat (if Tempo Sync is enabled.)",
    "HarmonixPhaserEffectSettings:Rate": "Hz or Fraction of a Beat (if Tempo Sync is enabled.)",
    "HarmonixTremoloEffectSettings:LfoRate": "Hz or Fraction of a Beat (if Tempo Sync is enabled.)",
    "HarmonixVibeEffectSettings:LfoRate": "Hz or Fraction of a Beat (if Tempo Sync is enabled.)",
    "HarmonixWahEffectSettings:LfoRate": "Hz or Fraction of a Beat (if Tempo Sync is enabled.)",
    "ValkyrieModuleDependencySizeStats:ModuleVersionId": "ID and version of the module that these stats are for",
    "ValkyrieProjectSizeStats:RootModuleVersionId": "ID and version of the root module that these stats are for (may be set even when bIsValid is false)",
    "FortEmporiumFilterCategory:ParentID": "ID for parent category.  Empty for section headers",
    "BattlePassOfferData:OfferId": "ID for the battle pass offer",
    "VkResolvedModule:CookJobId": "ID for the specific CCCP cook job (can be used as a cache key)",
    "VkResolvedModule:ArtifactId": "ID for this set of role/platform-specific binaries",
    "GameplayFeedbackEventParams:InstigatorPlayerId": "ID of the player that instigated the feedback event",
    "VkProjectUserInfo:ProjectId": "ID of the project being described",
    "FortAthenaExitCraft:CraftSpecialActorID": "ID of the special actor data living in the special actor system for the craft",
    "FortAthenaExitCraftSpawner:SpawnerSpecialActorID": "ID of the special actor data living in the special actor system for the spawner",
    "FortSupplyDropMutatorData:SupplyDropID": "ID of the supply drop to modify. None will mutate all supply drops",
    "SupplyDropModifierData:SupplyDropID": "ID of the supplydrop type to modify",
    "GasEventHistoryItem:Id": "ID of this history event used for client-server lookup. Should be unique in 99% of use cases, but not guaranteed. 0 is Invalid.",
    "CatalogOfferRequirement:RequiredId": "ID referencing something (dictated by RequirementType)",
    "FortGameplayAbilityTargetData_SingleTargetHit:CartridgeID": "ID to allow the reuse of crit rolls across bullets in one cartridge",
    "FortGameplayEffectContext:CartridgeID": "ID to allow the reuse of crit rolls across bullets in one cartridge",
    "VkFoundMatchingArtifact:ArtifactId": "ID to use for binary resolution",
    "WeaponHudData:KeyActionId": "ID used to distinguish entries in HudData so they can be modified without tracking indexes. Use a unique ID for each key action",
    "BagelObjectiveAreaInstanceData:SpecialActorID": "ID used to identify this in the list of special actors",
    "BagelScoreMultiplierInstanceData:SpecialActorID": "ID used to identify this in the list of special actors",
    "MashObjectiveAreaInstanceData:SpecialActorID": "ID used to identify this in the list of special actors",
    "MashScoreMultiplierInstanceData:SpecialActorID": "ID used to identify this in the list of special actors",
    "FortAthenaVehicle:bSpawnedSleepLockActive": "IF set to TRUE, vehicles that are spawned asleep do NOT respond to WakeUp() calls.\n     This allows the vehicle to be kept in kinematic state until BreakSpawnedSleepLock() is called.\n     Vehicles are spawned asleep if ShouldSleepAtSpawn() is TRUE.\n     Note: This feature requires the kinematic when sleeping optimization enabled to work. IF that optimization is removed, this feature will not work until the logic is adjusted.\n     Note: Vehicles that are sleep locked cannot be interacted with by the player.",
    "SpookyEventEmotePad:bUseEmoteCategory": "IF true, EmoteCategoryToGrant is used and the emotes are granted via category which allows for them to be on a separate emote tab.\nIf false, UncategorizedEmotesToGrant are used and will appear in the emote picker like standard emotes",
    "FortAnimNode_SlopeWarping:bRequiresMovementComponentToEvaluateAsValid": "IF true, includes the check for a valid MyMovementComponent in the IsValidToEvaluate() function.",
    "FortSkeletalMeshActor:ActorTemplateID": "IFortActorMetadataInterface end",
    "FortOrientationWarpingSettings:IKFootBones": "IK Foot Bones. To be rotated if 'BodyOrientationAlpha' is less than 1.f",
    "FortOrientationWarpingSettings:IKFootRootBone": "IK Foot Root bone. To be rotated if 'BodyOrientationAlpha' is less than 1.f",
    "FortAnimNode_PredictiveStrideWarping:IKFootRootBone": "IKFoot Root Bone. *",
    "FortAnimNode_SpeedWarping:IKFootRootBone": "IKFoot Root Bone. *",
    "EFortItemShopSection.RMTItemOffer": "IMPORTANT:  Do not change the order of elements in this enum. It is used as a uint8 key in UserSettings",
    "FortPlayerControllerComponent_TacticalSprint:InputComponent": "INput component for handling input-action bindings.",
    "FortSoundIndicatorComponent:DefaultIconOverride": "Icon displayed on the sound indicator radial. If this field is left empty, the default icon associated with the selected DefaultSoundIndicatorType will be used (see B_SoundIndicator_01 uasset).",
    "FortDynamicBuildingDeconstructor:SpriteComponent": "Icon for placement. this is mostly for testin purposes.",
    "FortDynamicBuilder:SpriteComponent": "Icon for placement. this is mostly for testing purposes.",
    "FortHabaneroTier:BackgroundIconSmall": "Icon for small version of BackgroundIcon",
    "FortHabaneroTier:ForegroundIconSmall": "Icon for small version of ForegroundIcon",
    "MinigameTeam:TeamIcon": "Icon for team",
    "FortAISpawnGroupUpgradeUIData:UpgradeIconImage": "Icon image for the upgrade to display on the health bar",
    "FortAISpawnGroupUpgradeUIData:UpgradeIconTintColor": "Icon image tint for the upgrade to display on the health bar",
    "SpecialActorRepData:YawOffset": "Icon rotation offset",
    "HeistBlingIconData:IconState": "Icon state to use",
    "HeistExitCraftIconData:IconState": "Icon state to use",
    "SurvivalObjectiveIconData:IconState": "Icon state to use",
    "QuestProductData:Icon": "Icon to display for this experience",
    "FortMissionPopupWidgetData:DescriptionIcon": "Icon to display in the mission description",
    "FortLockerCategorySlotInfo:DefaultEmptyTexture": "Icon to display when category is empty or to represent this category",
    "FortMissionPopupWidgetData:UnavailableIcon": "Icon to display when the mission can NOT be played",
    "FortMissionPopupWidgetData:AvailableIcon": "Icon to display when the mission can be played",
    "FortLockerCategorySlotInfo:CategoryIcon": "Icon to represent category in labels",
    "FortAthenaMutator_Heist:IconToShowInSquadBar": "Icon to show on the squad bar if you have the diamond",
    "BundleGoalCardDisplayData:HeaderIcon": "Icon to use for the header",
    "RewardPreviewInfo:PreviewIcon": "Icon to use in the battle pass tiles when previewing this preview",
    "FortAttributeDetailsInfo:Icon": "Icon to use to represent this property in UI",
    "FortTagUIData:Icon": "Icon to use to represent this tag in UI",
    "FortAttributeInfo:AttributeDetails": "Icons and tooltip descriptions. Can be more than one element, if attribute is used conditionally (depends on tags)",
    "VkTypedId:Id": "Id",
    "VkTypedId:Type": "Id Type",
    "SavedCredentials:Id": "Id for account",
    "FortEntitlementConfig:GameDevId": "Id for the item that this entitlement is associated with on GameDev servers",
    "FortEntitlementConfig:ProdId": "Id for the item that this entitlement is associated with on Prod servers",
    "FortQuestMapNode:QuestItemDefinitionId": "Id for the quest item definition to display on the quest node",
    "VkLaunchData_JoinMatchmakingSession:SessionId": "Id of session to join",
    "FortAssignedObjectiveSquadData:SquadId": "Id of squad",
    "CastedVote:VoteSelectionId": "Id of the Selection this vote was casted for.",
    "VoteSelection:VoteSelectionId": "Id of the Selection this vote was casted for.",
    "FortSearchPassParams:ControllerId": "Id of the controller making the request",
    "MatchmakingParams:ControllerId": "Id of the controller making the request",
    "VkVersePathTarget:ProjectId": "Id of the project targeted by the verse path",
    "CastedVote:VoteSessionId": "Id of the session this vote was casted for.",
    "VoteSelection:VoteSessionId": "Id of the session this vote was casted for.",
    "CastedVote:VoteId": "Id of the vote this vote was casted for.",
    "VoteSelection:VoteId": "Id of the vote this vote was casted for.",
    "CrucibleSegmentResults:SegmentId": "Id of this segment for the course",
    "VkNamedId": "Id+DisplayName tuple",
    "DigestedWeaponAccuracy:TargetingIdealAttackRange": "Ideal attack range in cm where shouldn't have to move closer to target (using aiming down sight)",
    "WeaponAccuracy:TargetingIdealAttackRange": "Ideal attack range in cm where shouldn't have to move closer to target (using aiming down sight)",
    "DigestedWeaponAccuracy:IdealAttackRange": "Ideal attack range in cm where shouldn't have to move closer to target (using hip fire)",
    "WeaponAccuracy:IdealAttackRange": "Ideal attack range in cm where shouldn't have to move closer to target (using hip fire)",
    "MeleeWeaponSkill:IdealAttackDistance": "Ideal distance away from the target while a matching weapon is equipped",
    "FortGameStateComponent_AssignedObjective:IdealNumSquadsPerObjective": "Ideal number of squads assigned to an objective. The objective matchmaking will attempt to group this many squads per objective while also\ndistributing the squads among objectives equally and without leaving a straggler squad.\nThis value is indexed for different squad sizes, 0 - solo, 1 - duo, 2 - trio, 3 - squad",
    "AthenaAISettings:ReducedDeAggroRange": "Ideally this should probably be >= MaxFootstepHearingRange",
    "AddAction:JsonStringObjectForPropertyData": "Ideally we can convert this to an array of Tpair of FProperty and Data",
    "UpdateAction:JsonStringObjectForPropertyData": "Ideally we can convert this to an array of Tpair of FProperty and Data",
    "PulseIndicatorComponent:PlayerGroupIdentifier": "Identifier for actor filters that mark players specifically. Allows us to bulk override different aspects of the actor filter.",
    "ValkyrieEditorSettings:BaseDocsUrlId": "Identifier for the base URL used for opening Valkyrie documentation pages",
    "SBMusicalTargetsCueId:IdNumber": "Identifier for the cue in the sequence",
    "VoteSelectionResults:VoteSelectionId": "Identifier for the vote selection this structure is tracking results for",
    "VoteSelectionResults:VoteSessionId": "Identifier for the vote session this structure is tracking results for",
    "VoteSelectionResults:VoteId": "Identifier for the vote this structure is tracking results for",
    "CreativeStatOption:StatEventFilter": "Identifier of stat",
    "FortLobbyBeaconPlayerState:HeroId": "Identifier of the Hero Persistent Item that is currently in use",
    "CreativeDataChannelEvent:EventName": "Identifier string for this type of Event.",
    "EFortMantisBranchPath": "Identifier used to determine what technique to branch to.",
    "VkTypedId": "Identifier with type specifier",
    "ESocialTutorialType": "Identifiers for tracking the type of onboarding widget being used.",
    "FortPawn:ControlRecoveryBehavior": "Identifies how the pawn behaves while already in the staggered state",
    "Playspace:RequestedPlayspaceParentTag": "Identifying GameplayTag of a Playspace this Playspace wants to be the child of",
    "CustomLootOverrideData:CustomLootType": "Identifying key for what custom loot selection this data is associated with",
    "SafeZoneOrderOptimizeMutatorRouteDefinition:DebugName": "Identifying name to use for debug purposes",
    "FlyingRidableControlParams:IdleAcceleration": "Idle Acceleration",
    "VehicleDigestedTurnInPlace:IdleAngleBegin": "Idle angle begin",
    "VehicleTurnInPlace:IdleAngleBegin": "Idle angle begin",
    "VehicleDigestedTurnInPlace:IdleAngleEnd": "Idle angle end",
    "FortGameModePvE:bAnyMovementNotIdleWhilePrivate": "Idle detection considers any movement active while a user is solo or in a private match.",
    "AIVisibilityRangeSettings:IdleTime": "Idle time for a pawn to be considered invisible",
    "FlyingRidableControlParams:IdleTurnRate": "Idle turn rate",
    "FortPlayerControllerPvE:IdleWarningAnnouncement": "Idle warning message to the player, used to update the displayed message and cancel the warning if necessary.",
    "ETimerDeviceState.Enabled": "Idle, awaiting activation to start timer",
    "EBuildingGameplayActorSentry_State.ActiveIdle": "Idle, but players are near by.\n     During this state the turret will slowly pan left then right with brief pauses in between.",
    "EBuildingGameplayActorSentry_State.PassiveIdle": "Idles, no players are near by.",
    "FortAthenaMutator_SpecialEvent:DesiredQuickbarItemTypeAfterRemove": "If != Max_None, when the active quickbar item is removed we will try to switch to a quickbar slot of this type",
    "FortTimeOfDayManager:CurrentTimeOfDayEditing": "If \"Use Specific Time Of Day Editing\" (below) is unchecked, this property will set the lighting to the middle of the phase selected unless the phase is \"Invalid\".  In that case, it will use the \"Start Time Of Day In Game\" (below).  If \"Use Specific Time Of Day Editing\" IS checked, the specific time below is used instead.  Used exclusively for view purposes in editor.  Not in-game.",
    "TimeOfDayEditorViewSettings:CurrentTimeOfDayEditing": "If \"Use Specific Time Of Day Editing\" (below) is unchecked, this property will set the lighting to the middle of the phase selected unless the phase is \"Invalid\".  In that case, it will use the \"Start Time Of Day In Game\" (below).  If \"Use Specific Time Of Day Editing\" IS checked, the specific time below is used instead.  Used exclusively for view purposes in editor.  Not in-game.",
    "FortDaySequenceActor:SunLightHorizonClamp": "If 'Use Sun Angle' and 'Use Sun Divergence' are both true, this value clamps the shadow casting directional light to the specified degrees above the horizon line",
    "FortControllerComponent_InventoryService:InventoryServiceEnabled": "If 0 the inventory service will not attempt to update the backend currency values.",
    "EFortGameFeatureActionAddComponentMode.Game": "If 0, this AddComponents action is essentially disabled",
    "NotificationUISettings:DisplayTime": "If < 0, display time is deemed \"unset/default\"",
    "CollisionReactionConfiguration:OverriddenSweepBoxDelay": "If > 0 will use this for the async sweep box delay, otherwise will use the default-cvar value.",
    "SpecialEventRewindComponent:DefaultRewindPlaybackSpeed": "If > 0, and the rewind duration is unspecified, rewinds will play at this rate, unless overridden in the call to StartRewinding()",
    "FortControllerComponent_InventoryService:NumDeathsThatDropCurrency": "If > 0, drop currency the first N times this player dies.  If == 0, never drop.  If < 0, always drop.",
    "FortCharacterMovementMutatorComponent:BuffetBubblesSphereRadius": "If > 0, perform manual overlap tests of this radius against other pawns to see if we're too close and should push away",
    "FortAthenaMutator_Cobalt:bResetPlayerAbilitiesOnRoundEnd": "If > 0, resets gameplay effects and abilities when teleporting players to the next round.\nThis fixes perks such as Battle Ready, which are typically applied on respawn, not being applied when the next round starts",
    "SpecialEventRewindComponent:DefaultRewindDuration": "If > 0, rewinds will take this much time, unless overridden in the call to StartRewinding()",
    "DAD_Island:Nth": "If > 0, the metric result at the given ank will be selected.",
    "FortVehicleAimingWeaponComp:MinDistanceForCorrection": "If > 0, then if the camera trace impact location to the camera location length is less than this, we'll return the current aiming direction rotation instead of the calculated correction value.",
    "FortDailyQuestData:EmptyQuestWeight": "If > 0, this will have a chance of not rolling a quest for this group",
    "FortNearbyActorsPerceptionConfiguration:NumberOfActorsToReturn": "If > 0, will return only up to this number of actors",
    "MatchmakingParams:ChanceToHostOverride": "If > 0.f, acts as an override to the chance to host during matchmaking",
    "MatchmakingParams:ChanceToHostIncrease": "If > 0.f, after each failed attempt to host the chance to host will increase by this amount",
    "FortLobbyBeaconHost:LobbyPermissionTimeout": "If > 0.f, the amount of time to allow clients to wait for permission to proceed to the lobby before booting them out",
    "BuildingContainer:SearchBounceRadiusOverride": "If > 0.f, used as the search bounce radius on this container",
    "CollisionReactionConfiguration:TeleportPawnOnSweepBoxExtremePenetrationForSeconds": "If >0 pawns that are penetrating the sweep box by a good margin (check ExtremePenetrationThreshold) and for at least this amount of seconds, will get teleported on the sides of the sweep box.",
    "FortNonPlayerConversationParticipantComponent:MaxQuestsToSupportFromSingleProvider": "If >0 then maximum quests supported from a single provider will be restricted to this, otherwise no limit.",
    "FortNonPlayerConversationParticipantComponent:MaxQuestsToSupportForSingleFilterCategory": "If >0 then maximum quests to support for a single filter category will be restricted to this, otherwise no limit.",
    "FortNearbyActorsPerceptionConfiguration:MinimumUpdateInterval": "If >= 0 will require at least this update interval (could be lower); if lower than 0 will be ignored and a default value will be used",
    "FortQuestPoolTableRow:MaxActive": "If >= 0, Limit on number of active quests player may have at once from this pool",
    "FortAthenaMutator_Rounds:TimeUntilRoundEndUICoversScreen": "If >= 0, assume the RoundEnd UI will cover the screen.\n We wait for this much time before setting up the next round, to give the UI a chance to cover the screen.\nIf < 0, assume the RoundEnd UI will NOT cover the screen.\n We wait until the UI is complete (RoundEndUIDuration) before fading out and setting up the next round.",
    "FortQuestPoolTableRow:MaxUnclaimed": "If >= 0, auto claim or delete to satify limit on unclaimed quests",
    "FortQuestPoolTableRow:DaysToKeepClaimed": "If >= 0, keep claimed quests around after refresh for specified number of days",
    "FortQuestPoolTableRow:DaysToKeepCompleted": "If >= 0, keep completed quests around after refresh for specified number of days",
    "MarkedActorDisplayInfo:CustomTimeToLive": "If >= 0, overrides the default time to live defined for the marker type (see UFortWorldMarker::ComputeMarkerTimeToLive)",
    "FortCharacterMovementMutatorComponent:BuffetFlyingMaxSpeedOverride": "If >= 0, smooth our speed to this value during BuffetFlying.  Else, smooth back to BuffetFlyingMaxSpeed.",
    "SpecialEventCursorMode:RecenterAfterNoInputDelay": "If >= 0, the cursor will automatically begin to recenter after no input\nhas been provided for this amount of time.  If < 0, we will NOT auto-recenter.",
    "FortCharacterMovementMutatorComponent:BuffetFlyingVelocityDirectionInterpSpeedOverride": "If >= 0, use this as the VelocityDirectionInterpSpeed rather than BuffetFlyingVelocityDirectionInterpSpeed",
    "FortDamageNumberInfo:MeshMIDMoveToCameraValue": "If >= 0, use this value for each MeshMID's MoveToCameraParameterName, rather than running the default logic",
    "AthenaDeveloperSettings:OverrideAIBudgetManagerBudgetInMB": "If >= 0, will change the AI Budget Manager's memory budget in MB (estimated memory cost). Setting this to a low value (ex. 0) will load way less AI's customizations, showing Ramirez most of the time and thus decreasing loading time for those AIs.",
    "TagModificationRequest:FiniteLifetime": "If >= 0.f will treat added tags as finite duration and remove once this expires.\n0.f treated as remove after single tick.",
    "WaterVolume_Shallow:FluidFrictionOverride": "If >= 0.f, FluidFriction will be overridden with this value",
    "TagModificationRequest:Delay": "If >= 0.f, don't execute Addition/Removal of desired tags until this Delay has passed (e.g. 'apply tag X to player, next frame')\n0.f treated as add after single tick.",
    "FortAthenaMutator_MatchCondition_DeadTeams:NumTeamsToDie": "If >= 1, ShouldBeSatisfied() will return true if at least this many teams have died during the current match segment",
    "VkLaunchData_Link:Version": "If >=0, specific version of the link to load",
    "InteriorAudioBuildingRotationConstraint:XScaleFlipRotation": "If Actor Scale on the x-axis is -1, how does this actor rotate",
    "InteriorAudioBuildingRotationConstraint:YScaleFlipRotation": "If Actor Scale on the y-axis is -1, how does this actor rotate",
    "IndicatedActorInfoEntry:bWasActorValidDuringPreviousUpdate": "If Actor was valid the last time Update() ran.",
    "StenciledActorInfoEntry:bWasActorValidDuringPreviousUpdate": "If Actor was valid the last time Update() ran.",
    "FortObjectiveFilter_DistanceTraveled:Vehicle": "If Allowed Travel Modes includes Any, Driver, or passenger and the author is in a vehicle, this will contain tags from the vehicle",
    "FortLiquidGunProjectile:AttachOffset": "If AttachMeshComponent is not null, use the AttachComponent's location + this offset to represent the projectile's location for spline calculations.",
    "FortAthenaAIBotController:CurrentBlockingObstacle": "If Bot is blocked by an opened door, it will be this one",
    "BuildingFoundation:BuildingDeconstructorOrigin": "If BuildingDeconstructorExtent is non-zero, a building deconstructor will be used at this location. Relative to this actor's rotation.",
    "FortFallTeleportComponentBase:ForceTeleportZHeight": "If ContinuousTeleportUpdateEnabled and the OwningPawn is below this Z height value, it will be teleported to a safe location",
    "PlayspaceComponentConfiguration:Location": "If CreationType = ByLocation, this will provide the location for the playspace to add the component to",
    "PlayspaceComponentConfiguration:TagQuery": "If CreationType = ByTags, this will provide the tag query for which playspace to add the component to",
    "FortAbilityTargetSelection:CustomShapeComponentName": "If Custom shape is selected, name of the component of FortGlobalAbilityTargetingActor to use for targeting",
    "FortAIPawn:CustomBouncePawnOffsetForPickup": "If CustomBounceVelocityForPickup is set to a non-zero vector: will use this as an offset for the pawn's location (useful to have the pickups slide off in a specific way).",
    "FortGameMode:DefaultDeathPenaltyData": "If DeathPenaltyData is not used, use this one instead.",
    "SpecialEventCursorPawnComponent:bDefaultCursorModeAutoActivate": "If DefaultCursorModeTag is valid, automatically activate this component at startup",
    "WaterControlParams:FrictionDirectionChangeDot": "If Dot(Velocity, Acceleration) < this value, apply FrictionDirectionChangeMultiplier to friction value used. Allows lower friction when changing direction hard, which slows velocity change.",
    "FortAthenaMutator_TDM:GoalScoreGridSnapValue": "If EnableGoalScoreScaling is true OR the desired goal score is too close to a team's current score all Goal Scores will be a multiple of this value.\n     Set to 1 to effectively remove grid snapping.\n     Should be an integer greater than 0.",
    "FortAthenaMutator_TDM:GoalScoreBucketSize": "If EnableGoalScoreScaling is true, how large are the buckets that are used to adjust the score. Shouldn't go above 0.25 probably",
    "SafeZoneRoute:EndLocation": "If EndPOITag is invalid, use this for the end location",
    "AthenaLeaderboardData:PlaylistNames": "If ExcludePlaylistNames is true then the PlaylistNames array will be used as a list of playlists to exclude, else as the list of playlists to include.",
    "ReroutePlayerEventDefinition:ExcludeTags": "If ExcludeTags is specified, skip this RerouteDefinition if the incoming InstigatorTags has at least one of the ExcludeTags",
    "VideoWidgetConfig:bAllowGlobalForceGC": "If FRO bEnableGCBeforeVideoPlayback is enabled, a global setting for the movie widget,\n       * and this is enabled, this movie widget will force a GC before playback in best effort\n       * to prevent hitching during playback",
    "FortCinematicCameraActor:FinalControlRotation": "If FocusedActor is invalid, this will be the final control rotation",
    "EFortGameFeatureActionAddComponentMode.Editor": "If Game bit is set, this action will run when the game instance runs",
    "FortGameplayCueAttachInfo:OverrideLocation": "If IgnoreLocation is set, use this as the override location",
    "FortGameplayCueAttachInfo:OverrideRotation": "If IgnoreRotation is set, use this as the override rotation",
    "FortGameplayCueAttachInfo:OverrideScale": "If IgnoreScale is set, use this as the override scale",
    "ReroutePlayerEventDefinition:IncludeTags": "If IncludeTags is specified, skip this RerouteDefinition if the incoming InstigatorTags doesn't have at least one of the IncludeTags",
    "CreativeItemTemplateData:VariantHandle": "If ItemVariantGuid is default, the item template will apply to *all* items with the matching ItemDefinition.\nOtherwise, this serves as an ID for correlating item templates that should apply to specific item instances",
    "SpecialEventPhase:LevelSequenceTime": "If LevelSequence is valid, and it isn't yet playing, we'll jump to this time when this phase is activated",
    "SpecialEventTODMSubphaseData:SpawnClass": "If ModifyType == Spawn, we spawn a TODM of this class, which must implement IFortTimeOfDayManagerInterface",
    "TurnTransitionData:MontageToPlay": "If MontageToPlay is valid  and UseMontageForTurnTransition is true then the Montage specified here will be used in place of the one in the ability.",
    "SlopeModData:MontageToPlay": "If MontageToPlay is valid and chosen then the Montage specified here will be used in place of the one in the ability.",
    "AthenaNavPresenceDetectorComponent:NavMeshNameToUse": "If NAME_None, will listen to all Athena Navmeshes loaded in the Nav System",
    "FortGameModeZone:bTryToSpawnWithinStormShield": "If NO player start overrides are set, will try to spawn player within the current storm shield, if it exists. Will be ignored if no storm shield exists",
    "AIPatrolPathComponent:CachedFilterClass": "If None, will be set by FillPatrolFilterOptions, if still none will be deducted from DefaultAIPawn",
    "WorldTileFoundation:NumRotations": "If NumRotations is 255 then we do not have an appropriate rotation yet. This is a hack to work around a rotation replication issue temporarily.",
    "FortDeveloperSettings:bShowSlateGlobalInvalidationDebuggingInPIE": "If SGI is enabled in the editor, we'll also show debugging info - Currently only works in PIE New Window.",
    "FortMiniMapComponent_Discoverable:bDefaultVisibilityCanChangeAtRuntime": "If SetDefaultVisibility() can be used to change the DefaultVisibility of this component.\n     Setting to false reduces overhead since we do NOT need to keep track of player visibility settings that match the default visibility.\n     Setting to true allows the default visibility to change on the fly without wiping out all player visibility overrides.",
    "FortAthenaLivingWorldEventDataActorSpawnDescription:SpawnAroundNavigationSourceOverride": "If SpawnAroundEnvironmentQuery is set, it will use the matching navigation data during the query.",
    "FortAthenaLivingWorldEventDataActorSpawnDescription:SpawnAroundEnvironmentQueryRunMode": "If SpawnAroundEnvironmentQuery is set, it will use this type of RunMode. Note: with AllMatching a random one between all the results will be picked.",
    "FortAthenaAircraft:SpawnOffsetRadius": "If SpawnSlots if greater than 1, spawns are distributed in a circle around ExitLocation offset by this radius.\nIn extreme cases that very many players spawn in a single frame and the slots are all take,\nthe radius is increased and the slots rotate through again until exhausted, and so on until complete.",
    "BuildingGameplayActorSupplyDropRadio:bAutoOpen": "If TRUE, the supply drop opens as soon as it stops moving.",
    "CollisionReactionConfiguration:ExtraSpacingWhenTeleportingOutsideOfSweepBox": "If TeleportPawnOnSweepBoxExtremePenetration is >0, when the teleport happens this extra space will be added.",
    "FortAthenaVehicle:bAlwaysCreateNavComponent": "If True and no FortVehicleNavModifierComponent was added to this vehicle in blueprint (to customize values), a default component will get created automatically so navigation gets affected by this vehicle.",
    "FortReleaseVersionBound:bInclusive": "If True the check is inclusive of ReleaseVersion. Example will do a greater-than-equal or less-than-equal check\nif False the check is exclusive of ReleaseVersion, Example will do greater-than or less-than check",
    "FortAnimInput_PlayerAnimAsset:bShouldApplyAimOffsetFullBody": "If True, the AO will be applied later in the graph to include the hips",
    "FortAthenaLivingWorldPointProviderSpawnLimiter:bResetLimitWhenEnabling": "If True, the lifetime limit will be reset if the point provider is enabled by BP.",
    "QuickBarSlot:bIsOccupied": "If True, this slot doesn't actually have an item in it but is used by an inventory item that uses multiple slots",
    "ShadowProxyMeshComponent:bForceParentShadowOnWhenDisabled": "If True: Force the parent component to cast shadows if the shadow proxy is disabled at runtime.  Otherwise it will use the value of the parent CastShadows at begin play before the proxy overrides it.\nThis is useful if we are setting the cast shadows of the parent to false to visualize it in the editor but we still wanna test disabling proxies",
    "FortRespawnLogicData_Teams:AlsoPlaceBehindTeammates": "If TryPlaceByTeammates is on, also try to force being further from the circle center than the teammates.",
    "WaxRespawnLogicData:AlsoPlaceBehindTeammates": "If TryPlaceByTeammates is on, also try to force being further from the circle center than the teammates.",
    "FortPlayspace:MatchmakingSettings": "If UserAcceptanceType is set to \"Matchmaking\", this is the structure that defines the rules to use for matchmaking",
    "GunGameGunEntry:WeaponAssetId": "If Weapon is null, use this to specify a weapon by AssetId, which allows weapons from plugins.\n              If Weapon is valid, this is ignored.",
    "FortRangedWeaponStats:PerfectAimCooldown": "If Weapon.UseInterpolateToPerfectAim is 1, this weapon will use this cooldown value to reach perfect aim once at min spread",
    "FortPlayerController:PendingClientRestartPawn": "If a ClientRestartComplete call is pending, caches the pending NewPawn",
    "SphericalDriveParams:ContactThreshold": "If a cached contact point is closer to the surface of the sphere than this\n              value, then it will be considered as \"in contact\" by the drive calculations.\n              This helps to avoid loss of traction due to tiny bumps.",
    "LacklusterData:NoAnimChestMaterialTags": "If a chest has these tags use the ChromeNoAnimChestMaterial instead of the ChromeAnimChestMaterial",
    "FortAIPawn:SleepForTheseGoalActors": "If a goal actor for an AI passes this query, then IsAllowedToSleep for this AI would return true",
    "HeroSubclassAttributeData:HeroClassAndSubclassTags": "If a hero matches ALL of these tags, it will use this set of attribute initializers.",
    "FortPlayerControllerAthena:RespawnCamera_OffsetFromHit": "If a non-destructible raytrace fails between the respawn location and the respawn camera location\nThen the camera is pushed forward this far ahead of the blockage",
    "FortAthenaMutator_ButterflyEvent:PawnSpawnLocationX": "If a pawn didn't have a pawn at the time of the event, we need a safe place to spawn them, this is the X coordinate",
    "FortAthenaMutator_ButterflyEvent:PawnSpawnLocationY": "If a pawn didn't have a pawn at the time of the event, we need a safe place to spawn them, this is the Y coordinate",
    "FortAthenaMutator_ButterflyEvent:PawnSpawnMaxDistance": "If a pawn didn't have a pawn at the time of the event, we need a safe place to spawn them, this is the max distance from the PawnSpawnLocation",
    "FortAthenaMutator_ButterflyEvent:PawnSpawnMinDistance": "If a pawn didn't have a pawn at the time of the event, we need a safe place to spawn them, this is the min distance from the PawnSpawnLocation",
    "DynamicXpProfileStats:BankXp": "If a player gains too much XP during a timespan, it is added to the bank.  While XP is in the bank, there is a reduction in xp gained.",
    "FortQuestLivingWorldVolume:RequiredQuest": "If a player has this quest active the volume will use the Player Needs Quest Filter Tags",
    "FortWorldManager:ObjectivePlayerSpawnExclusionRadius": "If a player would spawn within this radius of a possible mission objective, try not to spawn them there. It may if there is no better option",
    "FortWorldManager:DangerPlayerSpawnExclusionRadius": "If a player would spawn within this radius of something dangerous, try not to spawn them there. It may if there is no better option",
    "NyxGlassWeaponComponent_Swinging:AllowedBuildingTypes": "If a target is of type Building Actor, defines the allowable Building Actor types for targeting.",
    "WaterControlParams:SprintJumpAirAccelAngleLimit": "If accel deviates from velocity by this angle while sprint jumping in air, stop sprint (and change anims).",
    "FortAthenaMutator_DadBro:UseLevelsForSizeModes": "If active, will use different levels for scalable float DIRECTLY DECLARED IN THIS MUTATOR (not RespawnLogicData, etc)\nfor different playlist sizes.\n0th level / First Column - Solo\n1st level - Duo\n2nd level - Squad/BigTeam\n\nIf disabled, will always pull from the first column (level 0).",
    "EFortResourceType.None": "If adding a resource, please add here and add conversion code to EFortResourceType::ToSurfaceType directly below, if needed",
    "VariantSwapMontageActiveSwapsRequirement:VariantSelections": "If all of these variant selections (both channel & active & customdata) are present in the active swaps of the PlayerPawn, this condition is satisfied.\nWhen empty, doesn't contribute in any way to the condition.\n\nIf both VariantSelections and Item have been filled in, they must both be satisfied or this requirement will not pass",
    "FortNevadaVehicle:TractorBeamDisallowedClasses": "If an actor is any of these classes it is not allowed to be tractor beamed.",
    "CatalogDynamicBundleItem:bCanOwnMultiple": "If an item is marked as CanOwnMultiple, the use will pay the DiscountedPrice even if they own this already",
    "TornadoConfigEntry:TimeToForceEject": "If an object has been in the tornado for longer than this time, it will be immediately ejected",
    "TornadoConfigEntry:DistanceToForceEject": "If an object is this far from the center of the tornado, it will be immediately ejected",
    "EPersistenceFrameworkExecutionOption.AbortIfAnyActionFails": "If any action fails, abort the remaining actions",
    "EGateCheckType.RequireAny": "If any gate on the objective is in an open state this will allow objective progression. Does not affect individual gate opening",
    "EAcquireIncrementType.UniqueItemCount": "If any item passes the filter, updates the objective by the number of unique items acquired in this event.",
    "EAcquireIncrementType.TotalItemCount": "If any item passes the filter, updates the objective by the total of all item stack sizes",
    "SpyTechLevelUpgradeData:LevelUpgradeTags": "If any of these tags are on the player the count of them will be the new weapon level",
    "FortPickupRestrictionLists:Blacklist": "If any tags are present here, the player MUST NOT have ANY. Failing this check, they'll see the PlayerDisplayedReason",
    "FortPickupRestrictionLists:Whitelist": "If any tags are present here, the player MUST have them ALL. Failing this check, they'll see the PlayerDisplayedReason",
    "FortTheaterMapTileData:DifficultyWeightOverrides": "If anything is specified, overrides the difficulty weights setup by the theater for this particular tile",
    "FortTheaterTileEditorData:DifficultyWeightOverrides": "If anything is specified, overrides the difficulty weights setup by the theater for this particular tile",
    "FortTheaterMapTileData:MissionWeightOverrides": "If anything is specified, overrides the mission weights setup by the theater for this particular tile",
    "FortTheaterTileEditorData:MissionWeightOverrides": "If anything is specified, overrides the mission weights setup by the theater for this particular tile",
    "QuestInstanceInitializationData:QuestOwner": "If applicable, object that owns this quest (for shared quests, this is the player that has the quest on their profile)",
    "UpdatedQuestObjectiveData:ContributingPlayer": "If applicable, player who assisted this objective update",
    "UpdatedQuestObjectiveData:OwningPlayer": "If applicable, player who owns the quest that was progressed",
    "FortQuestPoolStats_PerPool:RerollsRemaining": "If applicable, remaining number of quests player can replace this refresh period",
    "FortAthenaLivingWorldNavigationInvokerComponent:DistanceToPlayer": "If at least one tracked player is closer than this distance, the navmesh will be invoked.",
    "FortAthenaLivingWorldNavigationInvokerComponent:RegistrationDistanceToPlayer": "If at least one tracked player is closer than this distance, the point provider will be registered in the LWM.",
    "ortAthenaLivingWorldNavigationInvokerSettingsOverride:RegistrationDistanceToPlayer": "If at least one tracked player is closer than this distance, the point provider will be registered in the LWM.",
    "SynchronizedTeleportFadeOutReplicationData:bFadeAudio": "If audio should fade out as well.",
    "SpecialEventInputHelperComponent:MinTimeBetweenRepeatAnyKeyEvents": "If bAllowRepeatAnyKeyEvents = true, the minimum time that must pass before broadcasting the next AnyKeyPressedDelegate for a repeating key",
    "FortAthenaMutator_Payback:DefaultEffectDuration": "If bEffectLastsUntilRespawn is false, use this as the payback effect duration",
    "FortGameSessionDedicated:WaitingForMatchAssignmentRestartDelay": "If bEnableWaitingForMatchAssignmentTimeout is true, the timer is set to a random value between WaitingForMatchAssignmentRestartDelay and WaitingForMatchAssignmentRestartDelay * 2, measured in seconds",
    "FortAthenaMutator_AdHocSquads:bBreakUpSocialPartiesOnInit": "If bForceAllPlayersOntoIndividualTeams == true, this variable is used to break up social parties when assigning players to squads.\n     Unused if bForceAllPlayersOntoIndividualTeams == false.",
    "BuildingLayoutRequirement:OverrideResourceType": "If bIgnoreResourceTypeRequirements is false, then if this property is 'None', the resource type will be copied from the LayoutRequirementSMActorClass.  Otherwise, the resource type will use the value of the OverrideResourceType specified.",
    "BuildingGridActorFilter:FloorPatternsToIgnore": "If bInclude Floors is true, list of floor patterns to ignore",
    "BuildingGridActorFilter:bIncludeFloorInTop": "If bIncludeFloors is true, whether or not to include floors in the top of the cell in the filter.",
    "FortQuestIconComponent:ExplicitInteractionTypeToTest": "If bInteractiveStateRequiredForVisibility, this represents an explicit interaction type to be tested against for the purposes\nof minimap icon visibility tests. if set to TInteractionType::IT_NoInteraction, we will try to determine type automatically.\nfor building actors, interaction time will be used to infer simple/long press interact types",
    "FortEncounterSettings:bStopIfCantFindSpawnPoint": "If bMustFindSpawnPoints if false, and bStopIfCantFindSpawnPoint is true, the encounter will fail",
    "FortLinkToActorComponent:LinkingTraceBoxExtentOverride": "If bOverrideBoxExtentForLinkingCheck is true, will use this value for the box extent during linking check (rather than the root component's bounds)",
    "FortAthenaMutator_JumpPenalty:Penalties": "If bOverridePenalties is true, copy this array to the JumpPenalties of each pawn's UFortMovementComp_CharacterAthena",
    "FortAthenaMutator_JumpPenalty:ResetTime": "If bOverrideResetTime is true, copy this value to the JumpPenaltyResetTime of each pawn's UFortMovementComp_CharacterAthena",
    "CreativeEditOnlyMeshComponent:PreviewOverrideMaterials": "If bShowInPreview is true and there is at least one material in this array, these materials will be applied to the mesh while\n     it is being previewed in Edit mode. If there are zero materials in this array, the EditOverrideMaterials will be applied while\n     being previewed.",
    "CreativeEditOnlyMeshComponent:PreviewOverrideMesh": "If bShowInPreview is true and this mesh is valid, this mesh will be used when the owner actor is being in edit mode. If this\nmesh is not set, the Edit Mesh will be used while previewing instead.",
    "FortCheckPointSplineActor:SplineMeshTension": "If bSmoothSplineMesh, smooth the spline tangents with this multiplier",
    "MinimapZoomBounds:DynamicMinZoomCurveMobile": "If bUseDynamicMinZoom is true, this is the curve used to calculate the min zoom (specifically on mobile). It receives the ratio between the X and Y viewport available sizes for the map, and returns the min zoom",
    "MinimapZoomBounds:DynamicMinZoomCurve": "If bUseDynamicMinZoom is true, this is the curve used to calculate the min zoom. It receives the ratio between the X and Y viewport available sizes for the map, and returns the min zoom",
    "SpookyEventEmotePad:UncategorizedEmotesToGrant": "If bUseEmoteCategory is false, calling GrantEmotes will grant the player these emotes without specifying a category.",
    "SpookyEventEmotePad:EmoteCategoryToGrant": "If bUseEmoteCategory is true, calling GrantEmotes will grant the player emotes via this emote category. Granting via category allows the emotes to appear on a separate emote tab.\n     CategoryName                    Unique id for the emote category.\n     CategoryTitle                   Title in the emote picker.\n     CategoryTitleMultipage  Title in the emote picker if there are multiple pages. If left blank, will use CategoryTitle.\n     Emotes                                  The emotes to grant\n     bExclusive                              This will be the only category displayed by the emote picker.",
    "FortPawn:LineTestForDamageZoneBoneDetectionRadius": "If bUseLineTestForDamageZoneBoneDetection is true, this specifies the radius around the damage zone bone to allow for during the line test.",
    "SafeZoneRoute:StartLocation": "If bUsePOIStartLocation = false, use this for the start location",
    "FortGameStateComponent_RealitySapling:PerfCulledSaplingAsset": "If bUsePerfCulledSaplingAssetOnSpawnFailed is true, this is the sapling class to spawn if the sapling fails to spawn normally from persistent data (eg due to crowding).\nThis should be a mostly empty, invisible, no collision version of the sapling.",
    "FortPlayerPawn:BalloonFallDamageThresholdVelocityZ": "If ballooning and Z velocity is >= this value, reset falling height to current location to avoid fall damage. A value >= 0 disables this check (height is reset when travelling upward already).",
    "FortAthenaMapInfo:AircraftDropVolumeProjectionFailsafeExtent_X": "If both AircraftDropVolumeProjectionFailsafe extents are > 0, with a valid AircraftDropVolume, and\nProjectPathOnZoneVolume fails in CalcAircraftFlightPath,use ProjectPathOnZoneBox instead with this as the box's X extent.",
    "FortAthenaMapInfo:AircraftDropVolumeProjectionFailsafeExtent_Y": "If both AircraftDropVolumeProjectionFailsafe extents are > 0, with a valid AircraftDropVolume, and\nProjectPathOnZoneVolume fails in CalcAircraftFlightPath,use ProjectPathOnZoneBox instead with this as the box's Y extent.",
    "FortVehiclePhysicsCollisionDamageComponent:bAlignLookAheadDirectionWithVehicleZAxis": "If both this and 'bAlignLookAheadDirectionWithVehicleYAxis' are true, the vehicle will use its ForwardVector (legacy behavior.)",
    "FortVehiclePhysicsCollisionDamageComponent:bAlignLookAheadDirectionWithVehicleYAxis": "If both this and 'bAlignLookAheadDirectionWithVehicleZAxis' are true, the vehicle will use its ForwardVector (legacy behavior.)",
    "FortSimpleWidgetAnimation:bShouldAnimateAlpha": "If checked, animate the widget's alpha",
    "FortSimpleWidgetAnimation:bShouldAnimateScale": "If checked, animate the widget's scale",
    "FortSimpleWidgetAnimation:bShouldAnimateTranslation": "If checked, animate the widget's translation",
    "BuildingLayoutRequirement:bMakeSatisfyingActorIndestructibleWhileRequirementExists": "If checked, any building built where this layout requirement is will be indestructible until the requirement is removed.",
    "FortTimeOfDayManager:OverrideLightAngle": "If checked, it overrides the calculated angle of the sun/moon in the editor and PIE, leaving it locked in place in the sky.  Useful for determining the angle for sunrise/sunset and also for taking screenshots or video with a specific angle of shadow.  Used exclusively for view purposes in editor.  Not in-game.",
    "TimeOfDayEditorViewSettings:OverrideLightAngle": "If checked, it overrides the calculated angle of the sun/moon in the editor and PIE, leaving it locked in place in the sky.  Useful for determining the angle for sunrise/sunset and also for taking screenshots or video with a specific angle of shadow.  Used exclusively for view purposes in editor.  Not in-game.",
    "FortTimeOfDayManager:bPIEWithTimeFrozen": "If checked, launching PIE will launch with the \"Time of Day Speed\" set to 0, so time will not pass.  If unchecked, it will use the default Time Of Day Speed (below).  Used exclusively for view purposes in editor (PIE and Simulate).  Not in-game.",
    "TimeOfDayEditorViewSettings:bPIEWithTimeFrozen": "If checked, launching PIE will launch with the \"Time of Day Speed\" set to 0, so time will not pass.  If unchecked, it will use the default Time Of Day Speed (below).  Used exclusively for view purposes in editor (PIE and Simulate).  Not in-game.",
    "FortAnimNode_QuadrupedSlopeWarping:bOnlyAffectSkeletonRootBone": "If checked, only the skeleton root bone will be modified, and the limbs will not be affected.",
    "FortTimeOfDayManager:bUseSpecificTimeOfDayEditing": "If checked, rather than using \"Current Time Of Day Editing\" day-phase, the view will use a specific time [0-24).  Used exclusively for view purposes in editor.  Not in-game.",
    "TimeOfDayEditorViewSettings:bUseSpecificTimeOfDayEditing": "If checked, rather than using \"Current Time Of Day Editing\" day-phase, the view will use a specific time [0-24).  Used exclusively for view purposes in editor.  Not in-game.",
    "FortAnimNode_SlopeWarping:bPullPelvisDown": "If checked, the position of the limbs root bone(s) will be adjusted to avoid overextension of the limbs.",
    "FortTimeOfDayManager:bSkipNight": "If checked, time will skip from the start of night to the end of night in-game.",
    "FortAnimNode_QuadrupedSlopeWarping:bUseMovementComponentFloorInfoInsteadOfTraces": "If checked, traces will not be performed and the floor info from the movement component will be used instead for both limbs.",
    "CraftingObjectRepStateData:PausedCraftingTime": "If crafting was paused or resumed, this tracks how long we were crafting",
    "BeginGroupTeleportParams:bRespawnPlayers": "If dead players are respawned during the teleportation. If false, dead players are left alone during teleportation.\n When respawn players is true, be sure not to modify the respawn data during teleportation.",
    "FortActiveSubscription:MustRefreshAuthBy": "If defined and the game isn't on the original platform as indicated by AppStore field, show the user a prompt to play on the original platform before this date.",
    "McpEntitlementRefreshTimerInfo:MustRefreshAuthBy": "If defined and the game isn't on the original platform as indicated by AppStore field, show the user a prompt to play on the original platform before this date.",
    "EncounterVariableSelectionsRow:WorldConditionDefinition": "If defined, the condition must be true for this entry to be chosen.",
    "EncounterPrefabEntry:CanSpawnCondition": "If defined, the condition must be true for this spawner data to be allowed to spawn.",
    "DAD_Island:MetricName": "If defined, the link code this island points is based on this metric.",
    "FortAthenaLivingWorldPrefab:CanSpawnCondition": "If defined, the world condition must be true for the prefab to be allowed to spawn.",
    "MtxPurchaseHistoryEntry:DynamicBundleLinkId": "If defined, this is used for refunds and will be used to link multiple offers together",
    "MtxPurchaseHistoryEntry:RefundPrerequisite": "If defined, this purchase must be refunded before this is eligible",
    "FortAthenaLivingWorldEvent:CanSpawnCondition": "If defined, this world condition must be true for the event to be allowed to spawn.",
    "FortAthenaLivingWorldCategory:CanSpawnCondition": "If defined, this world condition must be true for this category to be active and anything in this category to spawn.",
    "SeatTransitionMontage:bUseFromSeatIndex": "If disabled, this montage will be used for transitions FROM any seat index.",
    "SeatTransitionMontage:bUseToSeatIndex": "If disabled, this montage will be used for transitions TO any seat index.",
    "FortAthenaMutator_ItemDropOnDeath:AmmoDespawnTime": "If dropping ammo, this is how long it takes to for it to despawn once dropped (<= 0 means it won't despawn)",
    "FortAthenaMutator_ItemDropOnDeath:AmmoStormDespawnTime": "If dropping ammo, this is how long it takes to for it to despawn once dropped in a storm (<= 0 means it won't despawn)",
    "FortGameplayCueParticleInfo:ParticleSystem": "If either the FXType or the NiagaraVersion aren't configured, this will be loaded and used instead.",
    "FortPortableSoftParticles:CascadeVersion": "If either the FXType or the NiagaraVersion aren't configured, this will be loaded and used instead.",
    "FortObjectiveFilter_PawnEliminated:ProhibitedKilledPawnTypes": "If empty will allow all pawn types to count for progression, otherwise it will block progression for pawn types listed here.",
    "FortObjectiveFilter_PawnEliminated:AllowedKilledPawnTypes": "If empty will allow all pawn types to count for progression, otherwise only pawn types listed here.",
    "FortPOIAmbientAudioOneShot:AllowedDayPhases": "If empty, allowed during all Day Phases",
    "PlayspaceComponent_PlayerPawnOverrides:bAllowPlayersUnderLandscape": "If enabled a player's pawn will be permitted to spawn and move under the landscape.\nIf disabled the pawn will be considered \"out of bounds\" and teleported or eliminated.",
    "CollisionReactionConfiguration:bBoxSweepEnabled": "If enabled will run a continuous async sweep which will be used as if we are overlapping with something.",
    "CollisionReactionConfiguration:bUseImpactNormal": "If enabled will use the impact normal when calculating launch velocity and extreme penetration, otherwise will use the direction from the center of the pawn to the impact point (useful to resolve internal collisions better).",
    "FortAthenaMutator_RespawnAndSpectateSelect:bShowDefaultSpawnLocation": "If enabled, a default spawn location (if made) will be shown as an option to select on the UI.\nIf disabled, the default spawn location option will be hidden and will automatically get selected if no other option is selected\nIf enabled, DefaultSpawnLocationCameraClass, DefaultRespawnLabelText, and DefaultRespawnTexture should be set to give the selectable button an icon\nONLY used if: bCreateDefaultSpawnLocation == true",
    "FortAthenaMutator_RespawnAndSpectateSelect:bCreateDefaultSpawnLocation": "If enabled, a default spawn location will be created in case there is no one to spawn on",
    "FortGameModeAthena:ForceKickAfterDeathTime": "If enabled, how long after team death that team members are allowed to spectate before being kicked",
    "FortAthenaMutator_RespawnAndSpectateSelect:bCanPlayerSelectRespawnTargetBeforeTheyCanRespawn": "If enabled, players can pick a respawn target at any time the respawn select screen is visible\n If disabled, players will ONLY be able to pick a respawn target after the respawn timer has finished and the player can respawn immediately.",
    "FortAthenaMutator_RespawnAndSpectateSelect:bShouldSetClientReadyOnRespawnPlayerFailSafe": "If enabled, players that are respawning in ActivateRespawnPlayerFailSafe will call SetClientReadyToRespawn.\n If disabled, ActivateRespawnPlayerFailSafe will operate as originally setup.",
    "FortAthenaMutator_RespawnAndSpectateSelect:bAllowRespawnOnLivingSquadmates": "If enabled, players will be given the option to respawn at the location of any of their living squadmates",
    "FortAthenaMutator_RespawnAndSpectateSelect:bAllowRespawnOnLivingTeammates": "If enabled, players will be given the option to respawn at the location of any of their living teammates",
    "FortCurieUpdraftActor:bGlanceProjectiles": "If enabled, projectiles will glance off of the updraft by having their XY velocity altered as specified by the glance curve",
    "FortAthenaMutator_BasicLimitedLives:bPreferSpectateTeammates": "If enabled, the player will continue to spectate teammates as long as teammates have respawns remaining.\nThe player will spectate an enemy if all teammates are 0 respawns left.\nIf disabled, the player will initially spectate a teammate if there is one alive,\nbut if the teammate dies the player will spectate an enemy even the teammate has more lives remaining.",
    "FortPlayerPawn:FallOnCloseParachuteRow": "If enabled, the player will fall instead of glide when they close the parachute.",
    "FortSubscriptionProgressiveFulfillmentConfig:ExpirationEnabled": "If enabled, the progressive set must be completed within 1 year after acquisition.",
    "FortAthenaMutator_BasicLimitedLives:bAlwaysShowSquadInfo": "If enabled, the squad info UI in the upper left will always show, even when solo",
    "FortGameplayCueDecalInfo:bOverrideFadeOut": "If enabled, use two parameters below to override default decal BP actor values",
    "AthenaPostMatchScreenContainerTabInfo:Order": "If enabled, will be inserted after elements of lesser order and before elements of greater order",
    "FortPhysicsBall:bEnableLiftAndDrag": "If enabled, will update lift and drag during tick.",
    "FortSkyTube:EntryVelocityAngleRequired": "If entry velocity is within this angle of the spline, use velocity as the entry direction. Otherwise use the facing direction.",
    "FortTargetFilter:bIncludeRiddenAI": "If excluding friendly AI, this potential includes back any ridden AI",
    "AttachedInfo:StickyOffsetFromBoneCenter": "If failing to attach to the physics asset, resorts to using a bone.  Will be offset from the bone's center by this amount.",
    "ReplicatedAttachParams:StickyOffsetFromBoneCenter": "If failing to attach to the physics asset, resorts to using a bone.  Will be offset from the bone's center by this amount.",
    "FortFallTeleportSpawnerComponent:TeleportEnabled": "If false (0.0) the teleportation component will not be added to pawns",
    "FortAudioToMPCComponent:bPushDataToMPC": "If false then no data will be pushed to the MPC during the tick",
    "FortAthenaMutator_GameplayEffect:bEnableMutator": "If false then the gameplay effect will not be applied.",
    "FortAthenaMutator_ConditionalSounds:bShouldPlayDeathSoundEffects": "If false this it will reproduce the death animations without any sound.",
    "ClientAILODMovementCompOptimizationConfiguration:bEnableSimulationDataOptimizations": "If false will disable calculation of simulation data in the movement component (which is required to have LOD-based frame skipping!).",
    "ObjectiveSubjectTags_Progressible:bCanGainProgressForThisObjective": "If false will not progress the objective for this subject.",
    "FortObjectiveFilter_Visit:bIncrementProgressByEveryMatchingLocationTag": "If false will only update progress by 1 regardless of how many location tags come through with this message.\nOtherwise will increment by the number location tags received that the filter is looking for.\nExample: if true and a quest is setup to look for two location tags, and four come through in a message,\nincrement count will be 2 for the two matches.",
    "FortObjectiveFilter_DiscoverPOI:bIncrementProgressByEveryNewPOITag": "If false will only update progress by 1 regardless of how many poi tags come through with this message.\nOtherwise will increment by the number of newly discovered tags received that the filter is looking for.\nExample: if true and  a quest is setup to look for two poi tags, and four come through in a message,\nincrement count will be 2 for the two matches.",
    "FortAthenaVehicle:bPlayInstantDeathEffects": "If false, OnDeathPlayEffects is not called and no death effects are played on the client. Otherwise, death effects are played as normal on the client.",
    "GatherAndCollectQuestData:bCreateDroppedQuestItem": "If false, disables dropped quest item creation altogether, even if there is no existing asset.",
    "QuestItemDefinitionDesignerData:bCreateMissionInfo": "If false, disables mission info creation altogether, even if there is no existing asset.",
    "QuestItemDefinitionDesignerData:bCreateQuestBlueprint": "If false, disables quest blueprint creation altogether, even if there is no existing asset.",
    "QuestItemDefinitionDesignerData:bCreateQuestItemDefinition": "If false, disables quest item definition creation altogether, even if there is no existing asset.",
    "FetchQuestData:bCreateQuestProp": "If false, disables quest prop creation altogether, even if there is no existing asset.",
    "FortPawnComponent_NightNight:bAllowUIViewTarget": "If false, don't allow the UICameraManagerComponent to have a view target.\nCan be changed on the fly with SetAllowUIViewTarget().",
    "ItemLoadoutBucket:bEnabled": "If false, don't allow this loadout bucket to be used",
    "TeamBucketDefinition:bEnabled": "If false, don't allow this loadout bucket to be used",
    "ItemLoadoutContainer:bEnabled": "If false, don't allow this loadout to be used",
    "TeamBucketCosmeticLoadoutContainer:bEnabled": "If false, don't allow this loadout to be used",
    "CreativeDeveloperSettings:bUseCuratedCalendar": "If false, ignore the curated islands and hubs in the creative calendar.",
    "FortAthenaLivingWorldPrefab:bShouldSpawnerBeAllowedToSpawn": "If false, prefab in the level instance will wait a call to AllowSpawnerToSpawn to spawn their actors.",
    "FortLevelSaveComponent:bLoadPlaysetFromPlot": "If false, prevent loading the playset specified in the plot definition.",
    "FortAthenaMutator_SpecialEvent:bAllowFullScreenMap": "If false, prevent the full-screen map, by returning false from FortGameStateAthena_AllowFullScreenMap()",
    "DBNOCustomSettings:bAlertTeam": "If false, the DBNO start sound will not be played",
    "FortMissionStormShield:UseGrowthRateDirectly": "If false, the behavior is to use the growth rate to determine a time when the radius change will be complete\nThis assumes the growth rate is going to be constant during that time.\nIf true, the GrowthRate is applied directly, each second the radius will change by the amount dictated\nby the rate and the amount of time that has passed since the last update.",
    "FortAthenaMutator_Skyfire:bShowWarpTunnelInsteadOfPenaltyPrison": "If false, the player is teleported to the penalty prison when knocked out and will wait out the KnockedOutPrisonPenaltyWaitTime there.\nIf true, instead of going to the prison to wait out the knocked out penalty, the warp tunnel screen is shown to the player for the duration of the penalty wait time.",
    "DBNOCustomSettings:bClassAffectsAllButSelected": "If false, the settings will be applied to the selected class. If true, the settings will be applied to all other\nclasses except the selected class",
    "DBNOCustomSettings:bTeamAffectsAllButSelected": "If false, the settings will be applied to the selected team. If true, the settings will be applied to all other\nteams except the selected team",
    "FortMissionPlacementActorItem:bShouldReserveLocations": "If false, this item will build a list of actors as locations at which to place items in the future WITHOUT marking any of the locations as 'used'.  This should only ever be checked if the purpose is to create a list of actors for use in subsequent item EQS queries (within the same mission).  For example, this could generate a list of location actors that are then further filtered by multiple later item entries in the same mission; that allows us to more efficiently set up queries.  For the same reason, it's the only case where having ActorToPlace be null is valid.  If you have questions, talk to Daniel Broder.",
    "CreativeEditOnlyMeshComponent:bLoadOnServer": "If false, this mesh will never be loaded on the server.",
    "BuildingActor:bAllowTeamDamage": "If false, we don't allow teammates to damage this building",
    "FortDagwoodVehicle:bClientUsesSelfDestructTimer": "If false, we self-destruct immediately, no timer.",
    "FortAthenaMutator_MatchCondition:bEnabled": "If false, we will Destroy() ourself in BeginPlay()",
    "FortRemoteControlledPawnAthena:bAllowSetPawnCosmeticLoadout": "If false, we will not call Super::SetPawnCosmeticLoadout(), so that we don't load and apply the default player pawn mesh",
    "FortGravityGunHolder:bAllowRotation": "If false, we won't update rotation on the held object.",
    "FortGeneratedDifficultyOptions:MinDifficultyOptionPointsToUse": "If fewer than this many difficulty option points are used to generate the mission difficulty options, a warning will be output to the logs",
    "FortAthenaMutator_RespawnWave:MinRespawnWindowTimeReamining": "If greater than 0 we will check if there is still enough time remaining in the current wave waiting to respawn for the player,  Otherwise they will be placed in the next wave.",
    "FortEncounterSettings:PreSpawnRequeryTime": "If greater than 0, the amount of time before the next spawn interval at which the encounter will requery for rifts. When larger than the time between spawns it will requery immediatly after queueing spawns",
    "FortMinigame:AutoStartDelay": "If greater than 0, the amount of time to wait before starting the mini-game",
    "ValkyrieEditorPermissionSettings_Audio:MaxSoundWaveImportLengthSeconds": "If greater than zero, specifies the max allowed length of an importable audio asset (< 0 == unlimited)",
    "FortAIPawn:MaxTimeAllowedOutsideTether": "If greater than zero, the amount of time we're allowed to be outside our tether before we call OnOutsideOfTetherBeyondMaxTimeAllowed.  This is gated by a limited update frequency.",
    "FortAthenaLivingWorldEventDespawnCondition:MinDistanceToPlayer": "If greater then 0, the min distance the actor must be from a player to be considered for despawning.",
    "FortAthenaLivingWorldActorSpawnDescription:DensityComputationRangeOverride": "If greater then 0, used instead of the net relevancy range when computing density for the actor.",
    "AthenaNavMesh:MaximumTilesToProcessForWaterPerFrame": "If higher than 0 then only this number of tiles will be post-processed per frame, otherwise everytime there is a request all of them gets processed in the same frame.",
    "FortPlayerController:bUseHoldToSwapPickup": "If holding use will swap pickup with current weapon",
    "FortGameplayEffectDeliveryActor:bIgnoreVehicleAndAttachedActors": "If ignoring instigator collision, do we also ignore collision attached to the vehicle?",
    "HeistExitCraftIconData:SecondsUntilIncoming": "If in the incoming state, this is how many seconds until it spawns",
    "RemoteViewRotSnapshotManager:TimeBeforeDormant": "If it takes longer than this amount to receive an updated view rotation, the player will be deemed to have stopped moving.",
    "FortHitNotifyContextSettings:HitPerspective": "If left Invalid, will be determined GatherRuntimeData",
    "FortHitNotifyContextSettings:HitType": "If left Invalid, will be determined in GatherRuntimeData",
    "FortMutatorAudioStinger:LoopTimeBeforeFade": "If looping is enabled in soundcue, how long should it loop before ending.",
    "FortMutatorMusicEvent:LoopTime": "If looping sound, how long should it loop before ending.",
    "FortMutatorAudioStinger:FadeTime": "If looping sound, the duration it takes to fade once looping time is up.",
    "FortMutatorMusicEvent:FadeTime": "If looping sound, the duration it takes to fade once looping time is up.",
    "BGAConsumableSpawner:AssociatedBuildingActor": "If manually specified via the editor, will silently destroy the actor if the spawner ends up not spawning anything at all",
    "FortFactionInfo:ResetSpecificRelationNoDamageDelay": "If members can reset their relations, force it to happen happen only after not taking damage for a certain time",
    "FactionData:ResetSpecificRelationNoDamageDelay": "If members can reset their relations, force it to happen only after not taking damage for a certain time",
    "FactionData:ResetSpecificRelationUnawareDelay": "If members can reset their relations, force it to happen only when going unaware for a certain time (< 0.0f = deactivated) (only valid for bots)",
    "FortFactionInfo:ResetSpecificRelationUnawareDelay": "If members can reset their relations, force it to happen only when going unaware for a certain time (< 0.0f = deactivated) (only valid for bots)",
    "FortGameModeOutpost:MaxContinuousOneHitResourcesDistributedBeforeForcedSave": "If more than this number of one hit resource events occur in sequence, even though the sequence may be ongoing, an Outpost save is triggered to prevent potential timing exploits.",
    "FortGameModeOutpost:MinTotalContinuousOneHitResourcesDistributedForForcedSave": "If more than this number of one hit resource events occur without at least this number of frames between any of them, an Outpost save is triggered to prevent potential timing exploits",
    "FortPlayerConversationComponent:bMoveShouldAbortConversation": "If movement should abort current conversation, default to true",
    "SavedSpectatorCameraState:NamePlatesFilter": "If namesPlates are enabled, only show nameplates for the following players. if not set, do not apply any filter to nameplate viewing",
    "FortAthenaMutator_Bagel:StreakScoreMultiplierResetTime": "If no AI is killed for this long, streak multiplier is reset",
    "FortAthenaMutator_Mash:StreakScoreMultiplierResetTime": "If no AI is killed for this long, streak multiplier is reset",
    "SkyLightValues:Cubemap": "If no Cubemap is specified, it will leave the cubemap as it was in the previous day phase or as it is in the skylight component if no cubemap is specified in ANY day phase.",
    "FortMissionPlacementActorItem:ActorToPlace": "If no actor is specified, this will reserve a location for the mission.  The mission can then use that location later to handle spawning itself for cases where the actor needs to be spawned later for performance or gameplay reasons.",
    "FortPlayerSpawnPadPlacementData:ActorToPlace": "If no actor is specified, this will reserve a location for the player to spawn.  Normally this should be the class for the player spawn pad.",
    "AnimNode_PlayBeatSyncedAnim:PreviewBPM": "If no music clock/player is provided, this BPM will be used for the tempo.",
    "FortCreativeDiscoveryContentPanel:PanelLinkCodeWhitelist": "If non-empty, only these link codes may ever show up in this panel's result set.",
    "FortGameSessionDedicatedAthena:DisabledPlaylistsDuringGracefulShutdown": "If non-empty, only these playlists will disable MMS backfill during graceful shutdown.",
    "ServerRollQuestTableRow:PlaylistQuery": "If non-empty, the quest can only be rolled if the query matches the current playlist context tags",
    "ItemAndCount:ItemVariantGuid": "If non-empty, this is used to correlate with a specific item variant",
    "ItemVariantHandle:ItemVariantGuid": "If non-empty, this is used to correlate with a specific item variant",
    "FortEncounterSettings:BurstSpawnThreatVisualsEndDelayOverride": "If non-negative, this overrides the default delay time before threat visuals fade for a burst encounter. NOTE only impacts burst encounters and applies to rifts even when DisplayThreatVisuals is set to false",
    "FortGameStateAthena:MiniMapRadiusTrackerCircleDrawingMaterial": "If non-null, a MID of this will be created and use to draw circles on the map/minimap for radius trackers such as\nthe \"Player Hunt\" bounties.\nParameters:\n- CircleColor (the color that should be used to draw the circle)\n- CircleCenterAndRadius (x,y,radius of the current circle, normalized to the scale of the map)",
    "FortGameStateAthena:MiniMapBackgroundDrawingMaterial": "If non-null, a MID of this will be created and use to draw the map / minimap background\nParameters:\n- MapTexture (the texture from the world settings)\n- CurrentCircle (x,y,radius of the current circle, normalized to the scale of the map)\n- NextCircle (x,y,radius of the next safe circle, normalized to the scale of the map)",
    "FortSkyTube:SpiralAccelerationPhysics": "If non-zero, applies a spiral force to physics objects in the tube.",
    "FortSkyTube:SpiralAccelerationProjectiles": "If non-zero, applies a spiral force to projectiles in the tube.",
    "FortGameplayEffectDeliveryActor:TouchingActorsEffectApplicationUpdateTime": "If non-zero, how often we will apply the our gameplay effect to any touching actors.",
    "FortWaterInteractionComponent:WaterVelocityShoreBias": "If non-zero, the amount of water velocity to also apply toward the shore.",
    "FortAthenaMutator_Wax:UseLiteralTokenAward": "If nonzero, use TokensAwardedPerEliminationOnKill as a constant rather than a coefficient.\nEg - 5th kill still only awards 1 token.",
    "ETryExitVehicleBehavior.DoNotForce": "If normal checking fails, do not force.",
    "FortDynamicBuilder:OverrideOwnerPersistentId": "If not INDEX_NONE, will be used as the owner persistent id of spawned buildings, regardless of instigator",
    "FortTheaterMapData:bHideLikeTestTheater": "If not a test theater, set this to true to hide as though it was a test theater (visible in dev/test configuration, hidden in shipping).\nPrimarily used to hide the perfmem test theater even though it is cooked into the build we push to prod (so it cannot be test).",
    "PickupInstigatorData:TargetAttitude": "If not assigned to the Spectator team, this dictates what teams are allowed to interact",
    "AILootInfoRowEntry:OptionalTagQuery": "If not empty or if OptionalTagQuery is valid, this row entry will be picked. Otherwise, it tries to pick the next one in LootDroppingBehaviors array.",
    "FortWorldManager:OverrideBackupPlayerSpawnTags": "If not empty overrides the tags used to determine the valid places a player can spawn during action, overrides the tags from campaign",
    "FortWorldManager:OverrideInitialPlayerSpawnTags": "If not empty overrides the tags used to determine the valid places a player can spawn initially, overrides the tags from campaign",
    "FortPoiVolume:EventsEnabledDuring": "If not empty, any of these events should be active at match start for the Poi volume to be enabled.",
    "GlobalWeatherData:RequiredCalendarEvent": "If not empty, calendar flag must be present in server events for this weather to be active",
    "FortAthenaLivingWorldEvent:RequirePlaylistTags": "If not empty, require the playlist to have these tags to be active",
    "DigestedEvasiveManeuverSkillSettingsSpecialization:WeaponTagQuery": "If not empty, the equipped weapon needs to match this query to allow these evasive maneuver skills to be used.",
    "EvasiveManeuverSkillSettingsSpecialization:WeaponTagQuery": "If not empty, the equipped weapon needs to match this query to allow these evasive maneuver skills to be used.",
    "FortNearbyActorsPerceptionConfiguration:RequiredAttitudes": "If not empty, will filter out actors that do not have one of provided attitudes",
    "WaterFXData:bLinkToPontoonBySocket": "If not linked to a socket, we will spawn attached to the owning actor\nWe only support one non-linked socket",
    "FortAthenaAIObjectTrackerQuerySimplified:RequiredToBeInPlayspace": "If not nullptr will exclude any object that are not within the provided playspace (using the object's origin and possibly bounds as a test).",
    "FortMissionPlacementActorItem:NumLocationsToFind": "If one, find and spawn exactly one actor (or reserve one location).  If 0, find as many locations as possible.  Other values should try to spawn exactly the number specified.",
    "FortMissionPlacementFoundationItem:NumLocationsToFind": "If one, find and stream in exactly one building foundation (or reserve one location).  If 0, spawn at or reserve as many locations as possible.  Other values should try to spawn exactly the number specified.",
    "FortAIPawn:DistanceToOtherPlayersToShowHealthBar": "If other players than our Player Manager are within this range of distance, we will show the health bar",
    "FortAIPawn:DistanceToPlayerManagerToShowHealthBar": "If our Player Manager is within this range of distance, we will show the health bar",
    "FortCachedWeaponOverheatData:OverheatValue": "If overheatValue is updated and on the carrier after the weapon is unequipped, it should placed here before restoring it to the weapon.  Otherwise, leave a -1.f (invalid) and this will be ignored.",
    "FortAthenaMutator_Chrome:OverridingSpawnTransforms": "If overriding spawn transforms are considerd, the locations specified in this array would be used instead of the Squad Start actors based on the selected route.",
    "ControllableRidableComponent:IgnoreGravityJumpTagQuery": "If owner has any matching tags, will apply default gravity scale instead of gravity jump scales.",
    "FortControllerComponent_VictoryCrowns:bWonRoyalRoyale": "If owning player controller has won a royal royale in this match",
    "FortControllerComponent_VictoryCrowns:bWonCrownInMatch": "If owning player controller has won crown in this match",
    "BuildingItemWeaponUpgradeActor:BuildingAttachmentType": "If placed, what can this attach to?",
    "FortDynamicRollBaseWeightTableRow:bOwningItemZerosWeight": "If player has this item, then it cannot be rerolled.",
    "FortSkyTube:ActiveForwardSteeringAngle": "If player is steering within this angle of camera forward, use the active movement params.",
    "DynamicXpPlayerSessionTransient:bWasAfk": "If player was AFK during timespan, then they can't get boosted XP",
    "BeginGroupTeleportParams:bAutoReleaseFromStasis": "If players are automatically released from stasis after teleporting. If false players are left in stasis after teleportation and some other system will have to return the players to normal manually",
    "MinigamePostGameAnimationSettings:Text": "If present, a short piece of text that will be displayed instead of the placement information",
    "FortEncounterSettings:RiftClassOverride": "If set and the encounter is set to spawn rifts, the encounter rift manager will spawn rifts of this class.",
    "FortAthenaLivingWorldVolume:EQSRefreshInterval": "If set greater then 0, the EQS will be run every x seconds while the point provider is enabled.",
    "FortAthenaFocusAtStateTreeTaskInstanceData:FocusActor": "If set the focus will be on this actor (note we also support FocusActor + FocusActorOffset).",
    "ExternalEmoteCategory:OverlayWidgetClass": "If set then the emote wheel will instantiate an instance of this overlay widget on top of itself for additional UI",
    "ExternalMultiEmoteCategory:OverlayWidgetClass": "If set then the emote wheel will instantiate an instance of this overlay widget on top of itself for additional UI",
    "FortFallTeleportComponentBase:TeleportEnabled": "If set to 0.0 all the component is destroyed on BeginPlay",
    "FortMovementComp_AIChar:CustomRVOAvoidanceRadius": "If set to > 0 will be used as RVO Avoidance Radius, instead of the actor's capsule radius.",
    "PlaylistFrontEndData:LinkId": "If set to a Link code, will override the creative hub",
    "PlaylistFrontEndData:EndDateUTC": "If set to a future time, a count down timer will be displayed",
    "FortAIPawn:CustomBounceVelocityForPickup": "If set to a non-zero vector: pickups colliding with this pawn will have a bounce velocity equal to this vector, with XY multiplied by the normalized 2D direction from the center of the pawn.",
    "ClientAILODSettings:PreloadingPriorityOverride": "If set to a value >= 0.f, then this will be used as Priority, instead of the ScoreMultiplier, to decide how important this Pawn is for preloading calculations.",
    "FortGameplayMutator_AIEncounterModifierTags:RequiredEncounterAssociatedMissionType": "If set to anything other than \"None\" this mutator will only apply and replace tags to\nencounters from missions of this type",
    "FortObjectiveFilter_QuestUpdated:QuestType": "If set to anything other than ALL will only allow progress for quest of the specified type",
    "FortObjectiveFilter_QuestUpdated:QuestSubtype": "If set to anything other than None will only allow progress for quest of the specified sub type",
    "ClientAILODMovementCompOptimizationConfiguration:bEnable": "If set to false all the settings within this configuration will not get applied and the default values will be used instead.",
    "FortCreativeDeviceProp:bSuppressPlayTimeSimpleInteractionWidgetForTouch": "If set to false, overrides default behavior of SuppressSimpleInteractionWidgetForTouch while a creative game is active.",
    "ClientAILODMovementCompOptimizationConfiguration:MinDistanceToApplyFrameSkippingWhenVisible": "If set to something > 0, will not apply LOD1+ frame skipping, when visible, if the AI is with this range from the local player.",
    "CinematicSequenceDeviceBase:FinishCompletionStateOverride": "If set to something other than none, when a sequence ends, the completion mode of any track sections still active will be overridden\n       * by the chosen value, either keep state or restore state. Otherwise, completion mode will be determined by each track section.\n       * Note that any track sections that finish before the end of a sequence will have their completion mode determined by the section settings rather than this override.",
    "FortGameMode:bDisableCloudStorage": "If set to true don't use cloud storage for world records",
    "FortAthenaAIBotController:bEnableBotPerception": "If set to true the controller will not listen to stimuli from perception.",
    "FortAIPawn:bCanUnloadCustomization": "If set to true then this AI might become invisible (for memory budget reasons) and not load, or unload, any customization while using managed mode budgetting.",
    "BuildingActor:bIsNavigationModifier": "If set to true this actor will be handled differently.  Instead of punching holes in the nav-mesh, it will\napply a cost-modifying area (such as for floors, roofs, and stairs).  For other obstacles, this may be set,\nbut additionally \"Dynamic Obstacle\" should be set on the static meshes involved or the Navigation Obstacle\nOverride should be set to enabled.  Still, Navigation Relevancy mechanism applies, and an Actor needs to be\nrelevant to be considered at all.",
    "FortObjectiveFilter_KillContribution:bUseDamageContributed": "If set to true will allow filtering by the amount of damage contributed",
    "FortObjectiveFilter_KillContribution:bUseDistanceFromEliminatedPawn": "If set to true will allow filtering by the distance between the contributor and the eliminated pawn",
    "FortObjectiveFilter_KillContribution:bUseDamageContributedPercent": "If set to true will allow filtering by the percent of total damage contributed",
    "ClientAILODMovementCompOptimizationConfiguration:bForceInvisibleValueWhenNotRenderedForThreshold": "If set to true will forcibly use 'FrameSkippingInvisible' as optim. value when the pawn has not been rendered for a while, even if close to the local player and in the visibility frustum.",
    "BuildingProp_BountyBoard:bAllowBountiesOnFriendlies": "If set to true, bounties may be granted that target friendly Players",
    "FortGameModeZone:bUseAllSocketsInSpawnPad": "If set to true, the players try to use all sockets in the spawn pad actor static mesh as spawn points instead of just the one allocated to them.",
    "FortChallengeBundleQuestEntry:bAutoPinOnCreation": "If set to true, this quest will auto pin when it is created on MCP. NOTE: This will only happen if the user has not already explicitly pinned another quest.",
    "ClientAILODMovementCompOptimizationConfiguration:bRequireHittingPawnThresholdForLOD1": "If set to true, to apply LOD1 optim. will require the threshold of relevant AI pawns or player pawns or sum of both to be hit (ex. 33 pawns relevant).",
    "ClientAILODMovementCompOptimizationConfiguration:bRequireHittingPawnThresholdForLOD2": "If set to true, to apply LOD2 optim. will require the threshold of relevant AI pawns or player pawns or sum of both to be hit (ex. 33 pawns relevant).",
    "FortSmartObjectComponent:bDisableForeverWhenMovedOrRotated": "If set to true, will disable this object forever if it ever moves or rotates.",
    "FortPlayerController:bShowDamageNumbersOfConvertedNPC": "If set to true, will show the Damage numbers in the UI for AIs damaging actors, with the AI being converted by this controller/player.",
    "FortAthenaAIObjectTrackerQuerySimplified:bMustBeUsable": "If set to true: will return objects that can be used (ex. can be reserved).",
    "FortEncounterSettings:ScriptedSpawnPoints": "If set we will spawn enemies at the points specified.  We will randomly select from each point.",
    "FortMovementComp_AIChar:CustomRVOAvoidanceOriginOffset": "If set will append this offset (rotated via the actor's rotation) to the actor's feet as RVO Avoidance origin.",
    "FortAthenaHandleSoftDisableStateTreeTaskInstanceData:ActorsToCleanup": "If set will cleanup this actor's Contextual Anim on exit (might add more cleanups in the future).",
    "FortWeapon:bShouldFullyApplyVariantsOnEquip": "If set, ApplyWeaponCosmeticVariantsOnEquip will not filter to only the dynamically spawned components.",
    "FortWorldSettings:bDisableGlobalWeatherEvents": "If set, all global time of day weather events will be be disabled",
    "FortWorldSettings:bDisableAllTimeOfDayManagers": "If set, all time of day managers will be destroyed and disabled",
    "FortPlayerCameraBase:OverrideCameraClass": "If set, always uses this camera",
    "FortQuestPoolTableRow:bDeleteActiveOnRefresh": "If set, any incomplete quests previously granted by this pool will be summarily deleted every refresh",
    "FortWorldSettings:bDeferPhysicsObjectSetup": "If set, defer physics object setup to activation. Do not set up during building actor creation.",
    "FortPickupEffect:bDoNotTickSkeletalMeshComponents": "If set, do not allow skeletal mesh components to tick/animate when this item is created",
    "FortPickupEffect:bDoNotShowSpawnParticles": "If set, do not spawn particles when this item is created",
    "AthenaAIController:CheapFlyingNavSmashableAbilityTag": "If set, execute this ability application tag when the AI is currently cheap flying (will not be using hotspot while in air)",
    "FortMontageInputAction:TriggerAbilityTag": "If set, execute this ability application tag when the input is received",
    "EQSActorSpawnerClassToSpawnData:SharedAssetID": "If set, identifies this Data as being logically the same as data in another phase in terms of bSpawnDataExhausted.\n This only affects anything if FSafeZoneStateBasedActorSpawnerData::bAvoidRepeatClassSpawning is true.",
    "BuildingSMActor:bUseSingleMeshCullDistance": "If set, ignore extra mesh components when applying client cull distance",
    "FortVolume:bAdjustNavInvokerSizeToVolume": "If set, it will create a NavInvokerComponent matching the size of the FortVolume",
    "FortVolume:bCreateNavOctreeInclusionBound": "If set, it will create a NavOctreeInclusionBound matching the size of the FortVolume",
    "FortMontageInputAction:NextSection": "If set, montage section to go to when input is received. Default means continue to the next section",
    "BuildingFoundation:bOverrideNavigationGraphCells": "If set, navigation graph will not generate cells within foundation bounds",
    "FortMissionPlacementActorItem:bDontCreateSpawnRiftsNearby": "If set, no spawn rifts will open in 4x4 tile area around Actor (any encounter, overrides rift placement query)",
    "FortGameModeZone:ZoneLootNamedWeightsMapOverride": "If set, overrides any Named Weights used for picking in-zone loot",
    "FortWorldManager:GameDifficultyRowPIEOverride": "If set, overrides values from Game Data's GameDifficultyRowPIEOverride.  Otherwise, default PIE settings come from that property.",
    "FortQuestPoolTableRow:bGlobalPull": "If set, quests will be globally pre-rolled every interval, one roll per prerequisite quest",
    "FortQuestPoolTableRow:bRollOnActivation": "If set, roll the pool as soon as it's activated. Otherwise wait for first specified refresh",
    "FortAthenaMutator_GG:bShareSquadKills": "If set, share kills between all members of a squad",
    "FortWorldSettings:bSpawnAsyncObjectManager": "If set, spawns a async object manager",
    "FortWorldSettings:bSpawnPhysicsObjectManager": "If set, spawns a physics object manager",
    "FortWorldSettings:bSpawnTimeOfDayManager": "If set, spawns a time of day manager, will use the one set or default if null",
    "FortWorldSettings:bSpawnVehicleManager": "If set, spawns a vehicle manager",
    "FortTracerBase:bScaleSpeed": "If set, speed will be scaled based on distance to target",
    "FortAbilityTargetSelectionList:bKeepCheckingListOnIndestructibleHit": "If set, target selection will continue to next selection mode on List when single hit is an indestructible actor",
    "FortNonPlayerConversationParticipantComponent:bDialogMarkerBoundsAdjustmentEnabled": "If set, the dialog marker will be adjusted to the top of the owning actor's bounds automatically, before any relative offset\nis applied. if false, no bounds adjustment will be applied, and relative offset adjustments will be applied from the actor root.",
    "FortNonPlayerConversationParticipantComponent:bOverrideRelativeLocation": "If set, the dialog marker will be offset by 'RelativeLocationOverride', rather than the widget default",
    "FortNonPlayerConversationParticipantComponent:bOverrideMaxDrawDistance": "If set, the dialog marker will have a max draw distance controlled by 'MaxDrawDistanceOverride', rather than the widget default",
    "FortSquadStartSearchParamData:bDistance2D": "If set, the distance checks consider 2D(X, Y) distances.",
    "FortNPCVerbReactionTableRow:EmoteReaction": "If set, the emote the NPC will play as a reaction to this verb event.\nNOTE: The system will always choose this emote over other set emote-based properties.",
    "FortEncounterSettings:InjectedOverrideCategories": "If set, the encounter will override the difficulty options.",
    "FortNPCVerbReactionTableRow:GameplayEffectReaction": "If set, the gameplay effect to apply to this NPC.",
    "FortNPCVerbReactionTableRow:ConditionalQuery": "If set, the gameplay tag query to run against this NPC *before* even registering this event with the NPC.\nFor example, if this tag is set to exclude NPCs that have a certain tag on them, then this event won't be registered\nwith the filtered event subsystem. This is NOT dynamic such that this conditional is only evaluated on begin and never again.",
    "FortPickup:DropperID": "If set, the ownerId of the person that dropped / tossed this item. Primarily used to track ownership for quest progress",
    "FortAthenaCreativePortal:EditOverridePlaylist": "If set, the player will matchmake to a server with this playlist upon entering the portal",
    "ChallengeSuppressedHotfix:bCopyExpiration": "If set, the replacing quest will copy the expiration value from the suppressed quest",
    "FortSquadStartSearchParamData:bShuffle": "If set, the returned squad start list is shuffled.",
    "CraftingObjectComponent:bScaleMultiCraftingTime": "If set, the time to craft multiple items scales. Otherwise it always takes the same time",
    "FortNonPlayerConversationParticipantComponent:InitiateConversationStatEventType": "If set, then a stat event will be requested on the quest manager of any player initiating a conversation with this provider",
    "XPEventEntry:AccoladeLargePreviewImageOverride": "If set, then use this instead of the Accolade definition's large preview image.",
    "FortAIPawn:CustomizationsToLoad": "If set, this Skeletal Mesh will be automatically streamed asynchronously and override the current Skeletal Mesh on the Skeletal Mesh Component.",
    "FortNonPlayerConversationParticipantComponent:CustomDialogMarkerClass": "If set, this dialog marker widget type will be used for this conversation user, rather than the widget default",
    "BuildingFoundation:bHasExcludedZone": "If set, this foundation is not covering entire bounding box and has excluded area defined by NavExclusion* properties",
    "FortNonPlayerConversationParticipantComponent:DialogMarkerIndicatorSoftIcon": "If set, this icon type will be used for this conversation user, rather than the widget default",
    "FortAthenaSupplyDrop:InStormDespawnTimeInSeconds": "If set, this is how many seconds this supply drop can stay in the storm before it despawns",
    "BuildingProp_CaptureItemSpawner:SpecialActorID": "If set, this is the current \"special actor\" name we've been assigned",
    "HomebaseSquad:RequiredTheaterTags": "If set, this squad should only be available in the theater with this theater tag",
    "AthenaSpecialActorComponent:SeasonItemTag": "If set, this tag will be compared against the player profile's SeasonItem tags. If Found or Interacted, the icon will become permanently placed on the map regardless of distance.",
    "SpecialActorRepData:SeasonItemTag": "If set, this tag will be compared against the player profile's SeasonItem tags. If Found or Interacted, the icon will become permanently placed on the map regardless of distance.",
    "EFortWeaponReduceMeshWorkSetting.HandledInAnimInstance": "If set, this weapon should tick as if it were a primary animation asset. Used as a per-weapon override to ensure proper weapon/character IK (ExplosiveBow, etc.)",
    "FortNonPlayerConversationParticipantComponent:CustomDialogMarkerTag": "If set, this will tell any externalUI plugin interested to use a completely custom widget which this conversation component wants.\nNOTE: Should not be used with above CustomDialogMarkerClass as that already handles a custom marker using FortConversationMarker.",
    "GameplayCueNotify_Jetpack_Hovering:bUsesFuel": "If set, update fuel related components",
    "FortPlayerMannequin:bLimitTick": "If set, use VisibilityBasedTickOption of OnlyTickPoseWhenRendered instead of AlwaysTickPoseAndRefreshBones",
    "MatchmakingParams:MaxProcessedSearchResults": "If set, we will stop processing retrieved search results we retrieved from the backend after this many",
    "FortGameplayCueNotify_Actor:HUDElementTag": "If set, we will use this to determine whether this gameplay cue should be shown",
    "FortGameplayCueNotify_Looping:HUDElementTag": "If set, we will use this to determine whether this gameplay cue should be shown",
    "FortWeaponRanged:bShouldAimFromMuzzleAtCloseRange": "If set, weapon targeting source will try to switch between Camera and WeaponTowardsFocus (muzzle transform) at point blank range",
    "FortLevelSpawnActor:SpecialActorUniqueID": "If set, when this should add itself as a SpecialActor in the GameState's system for tracking the location, and this Name is the unique key to that data",
    "FortActorComponent_FortInteractExtension:AllowedActorsForInteraction": "If set, will allow interaction only for those actors.",
    "FortWorldConditionTimeOfDay:ActorContextRef": "If set, will be used to find the contextual TOD based on this actor's location, otherwise will use the global TOD.",
    "FortNearbyActorsPerceptionConfiguration:RequiredTagsQuery": "If set, will filter out any pawn that does not fulfil this query.",
    "FortSeasonItemMapData:CalendarEventName": "If set, will look up this calendar event and only render the icon if active.",
    "LockedQuestOverrideData:DisplayText": "If set, will override the default display text on locked quest widgets. Will attempt to inject arguments if applicable,\ndepending on the how the bundle unlocks.\n\nDays From Event Start (Quest or Bundle):\n      - {DisplayName} - Category name\n      - {Time} - Time remaining until unlocked\n\nChallenges Completed To Unlock:\n      - {DisplayName} - Category name\n      - {Number} - Remaining challenges to complete\n\nPrerequisite Quest:\n      - {PrereqQuest} - Name of the quest required to unlock this one",
    "FortAthenaAIObjectTrackerQuerySimplified:RequiredTagsQuery": "If set: will return objects that fulfil this gameplay tag query.",
    "FortAthenaHandleSoftDisableStateTreeTask:StateTreeEventTag": "If set: will send a StateTree event with the provided tag everytime a soft disable event comes in (must NOT start with Athena.AI.SmartObject.SoftDisable). Can be used in a transition to check only on event change.",
    "FortAthenaTrackEventStateTreeTask:StateTreeEventTag": "If set: will send a StateTree event with the provided tag everytime an event matching the provided query comes in (must NOT match the provided query). Can be used in a transition to check only on event change.",
    "FortAthenaWorldConditionInstanceDataStateTreeTask:StateTreeEventTag": "If set: will send a StateTree event with the provided tag everytime the conditions' result changes. Can be used in a transition to check only on event change.",
    "FortAthenaMutator_Storm:SafeZoneFinalDestinationX": "If setting the final location of the safe zone, this is the X coordinate",
    "FortAthenaMutator_Storm:SafeZoneFinalDestinationY": "If setting the final location of the safe zone, this is the Y coordinate",
    "MinigameSpawnerSpawnParams:WeaponAmmoOverride": "If spawned item is a weapon, override the amount of granted ammunition. Has no effect for other item types.\\n\n             Negative value = Weapon must be granted with default amount of ammunition (see UFortWeaponItemDefinition::OnItemInstanceAdded)\\n\n             0 or positive value = Weapon must be granted with the specified amount of ammunition",
    "FortWeaponFxComponent_Beam:ImpactFxPerSecond": "If spawning impact fx as the beam end is interpolated, this is the rate at which they are spawned",
    "AthenaDeveloperSettings:SpectatorControllerIndices": "If spawning players in PIE, override these player controllers to spawn as spectators instead of players",
    "FactionData:bConditionallyApplyRelationsToAdditionalFactionMembers": "If specific relations should be applied to all faction members based on conditions met",
    "FortFactionInfo:bConditionallyApplyRelationsToAdditionalFactionMembers": "If specific relations should be applied to all faction members based on conditions met",
    "FortNativeCurieFXResponse:OverrideGameplayCue": "If specified and GameplayCueResponse is set to OverrideCue, will play this cue instead of the state's suggested cue",
    "EFortWeaponAbilityRemovalPolicy.Remove": "If specified, abilities will be removed for the associated removal reason",
    "EFortWeaponAbilityRemovalPolicy.Persist": "If specified, abilities will persist for the associated removal reason",
    "ActiveTieredCollectionLayoutArray:bTiersForced": "If specified, all tier progression updates are ignored. Usable only for cheats",
    "FortAthenaMutator_SpecialEvent:ControllerComponentClassOverride": "If specified, each player controller will receive one of these controller components, a child of the native UFortControllerComponent_SpecialEvent.\nIf not specified, each player controller will receive the native UFortControllerComponent_SpecialEvent.",
    "FortGameplayEffectDeliveryActor:CurieIdentifier": "If specified, identifier to opt the delivery actor into the Curie system",
    "DeployableBaseCore:SimpleDeathParticles": "If specified, particles to play when this actor dies",
    "FortMissionPlacementFoundationItem:BuildingFoundationToPlace": "If specified, place and stream in this building foundation at the location found and mark the placement actors as used.  If no foundation is specified, just store the list of all location actors found without marking any of them as used, for future use by another entry in its EQS query.",
    "EFortWeaponAbilityRemovalPolicy.GameDefault": "If specified, removal behavior will fall back to the default behavior exhibited by respective game mode",
    "FortLevelSaveComponent:RestrictedPlotDefinition": "If specified, restrict loading only plots with the specified definition.",
    "LevelSaveBaseComponent:ExplicitSaveFile": "If specified, save file name to explicitly be used, regardless of anything else",
    "DeployableBaseCore:SimpleDeathSound": "If specified, sound to play when this actor dies",
    "BuildingSMActorClassData:BuildingResourceAmountOverride": "If specified, the amount of resources dropped by the building is determined via the specified curve data",
    "FortAthenaMutator_EnvironmentalDamage:DamageTagQuery": "If specified, the mutator will only be applied when the incoming damage tags satisfy this query. Otherwise, it will always apply.",
    "FortAthenaMutator_PlayerDamage:DamageTagQuery": "If specified, the mutator will only be applied when the incoming damage tags satisfy this query. Otherwise, it will always apply.",
    "FortGameplayCueParticleInfo:NiagaraSystem": "If specified, the niagara system to verify against the blacklist. If not specifically prohibited, it will be loaded.",
    "FortPortableSoftParticles:NiagaraVersion": "If specified, the niagara system to verify against the blacklist. If not specifically prohibited, it will be loaded.",
    "RichColorVariant:ColorSwatchForChoices": "If specified, the swatch specifying the colors which should be supported in Variant pickers for this channel.",
    "FortDailyQuestData:CalendarEventName": "If specified, this bucket will only be active while this event is active",
    "BASEGameplayEffect:LevelOverride": "If specified, use this level instead of the BASE's level",
    "FortCurieToggleComponent:ToggleGroup": "If specified, will count this actor as part of a \"toggle group,\" which can be queried to see if the entire group is active/inactive",
    "BuildingGameplayActorConsumable:DeathSound": "If specified, will play at GetDeathFXTransform()'s location upon consumption",
    "BuildingGameplayActorConsumable:DeathParticles": "If specified, will play at GetDeathFXTransform()'s result upon consumption",
    "FortTheaterMapData:MissionRewardNamedWeightsRowName": "If specified, will use named weights from the row name for generating mission rewards and bonus rewards",
    "FortSkyTube:MagnetMaxMultiplierWhenSteering": "If steering at all (player is pressing input), limit magnet force to this amount of the max.",
    "WindSplineComponent:InwardForceMaxMultiplierWhenSteering": "If steering at all (player is pressing input), limit magnet force to this amount of the max.",
    "WindSplineComponent:InwardForceMaxSteerAngle": "If steering this angle or greater away from the spline, don't apply magnetism. 0 degrees = straight along spline, 90 = away from spline (perpendicular).\nSee InwardForceSteeringReduceAccelerationPower and InwardForceSteeringReduceDecelerationPower to reduce power when still being applied.",
    "FortSkyTube:SteeringMagnetMaxSteerAngle": "If steering this angle or greater away from the spline, don't apply magnetism. 0 degrees = straight along spline, 90 = away from spline (perpendicular).\nSee SteeringReduceAccelerationPower and SteeringReduceAccelerationPower to reduce power when still being applied.",
    "TurnTransitionData:bSkipTransitionInCrowd": "If surrounded in a crowd, skip transition to not interfere with crowd's movement flow",
    "DigestedPerceptionStateSettings:ForgetDistance": "If target is further away than that distance, bot will forget about it (-1 = never)",
    "PerceptionStateSettings:ForgetDistance": "If target is further away than that distance, bot will forget about it (-1 = never) (in cm)",
    "FortAIPawnStats:AutoSuccessRangeFromLastSeenLocation": "If target is within this range of their last seen location, we can still see them",
    "FortAthenaMutator_RespawnAndSpectateSelect:bAreAllRespawnTargetsAvailableToAllPlayersCheat": "If the All Respawn Targets Available To All Players Cheat is enabled or disabled",
    "EFortNativeCurieFXCueResponse.AllowCue": "If the Curie state also has specified a gameplay cue, it should be allowed",
    "EFortNativeCurieFXCueResponse.IgnoreCue": "If the Curie state also has specified a gameplay cue, it should be ignored",
    "FortAIPawn:DBNOInteractionDuration": "If the DBNO interaction is LongPress, how long do we wait?",
    "FortAILODSetting_CharacterMovement:MaximumDotDifferenceBetweenInputVectors": "If the Dot between the current InputVector and the last used InputVector is lower than this threshold then we'll force a movement update. (set to -1 or less to always fail the check)",
    "FortAthenaFocusAtStateTreeTaskInstanceData:FocusActorOffset": "If the FocusActor is set, this will be used as an extra offset (relative to the actor's rotation). Note: this has an extra performance cost.",
    "FortObjectiveFilter_SetMarker:ProhibitedMarkerTypes": "If the Marker is one of these the objective WILL NOT progress",
    "FortAthenaMutator_Chrome:bUseOverridingSpawnTransforms": "If the OverridingSpawnTransforms should be considered or not.",
    "BuildingContainer:bBlockMarking": "If the actor can't be marked, should the marking trace stop at this actor, or go through.\n If true, the marker will be placed at the point of impact.\n     Only used when bCanBeMarked == false.",
    "BuildingGameplayActor:bBlockMarking": "If the actor can't be marked, should the marking trace stop at this actor, or go through.\n If true, the marker will be placed at the point of impact.\n     Only used when bCanBeMarked == false.",
    "BuildingProp:bBlockMarking": "If the actor can't be marked, should the marking trace stop at this actor, or go through.\n If true, the marker will be placed at the point of impact.\n     Only used when bCanBeMarked == false.",
    "BuildingRealitySapling:bBlockMarking": "If the actor can't be marked, should the marking trace stop at this actor, or go through.\n If true, the marker will be placed at the point of impact.\n     Only used when bCanBeMarked == false.",
    "BuildingRealitySeedPod:bBlockMarking": "If the actor can't be marked, should the marking trace stop at this actor, or go through.\n If true, the marker will be placed at the point of impact.\n     Only used when bCanBeMarked == false.",
    "BuildingRift:bBlockMarking": "If the actor can't be marked, should the marking trace stop at this actor, or go through.\n If true, the marker will be placed at the point of impact.\n     Only used when bCanBeMarked == false.",
    "BuildingTrap:bBlockMarking": "If the actor can't be marked, should the marking trace stop at this actor, or go through.\n If true, the marker will be placed at the point of impact.\n     Only used when bCanBeMarked == false.",
    "FortHeistDisplayCase:bBlockMarking": "If the actor can't be marked, should the marking trace stop at this actor, or go through.\n If true, the marker will be placed at the point of impact.\n     Only used when bCanBeMarked == false.",
    "SpookyEventEmotePad:bBlockMarking": "If the actor can't be marked, should the marking trace stop at this actor, or go through.\n If true, the marker will be placed at the point of impact.\n     Only used when bCanBeMarked == false.",
    "MidMatchRiftPoiManagerActor:bBlockMarking": "If the actor can't be marked, should we block further marking?\n     Only used when bCanBeMarked == false.",
    "MidmatchRiftPoiSpawnIndicator:bBlockMarking": "If the actor can't be marked, should we block further marking?\n     Only used when bCanBeMarked == false.",
    "LacklusterData:TagToActorTypes": "If the actor has this tag, it is this type for chroming purposes",
    "LacklusterData:TagQueryToChromeTypeOverrides": "If the actor matches the query, override the chrome type with this chrome type",
    "FortDeliveryInfoRequirementsFilter:bApplyToAIPawns": "If the application should apply to AI pawns",
    "FortDeliveryInfoRequirementsFilter:bApplyToBuildingActors": "If the application should apply to building actors",
    "FortDeliveryInfoRequirementsFilter:bApplyToPlayerPawns": "If the application should apply to player pawns",
    "FortDeliveryInfoRequirementsFilter:bApplyToGlobalEnvironmentAbilityActor": "If the application should apply to the global environment ability actor",
    "ChoiceDataEntry:bRequireConfirmation": "If the button should be additionally confirmed",
    "HUDElementVisibilityRepData:bInvertClassSelection": "If the class specifier should be inverted (ie. \"All classes EXCEPT the selected class\")",
    "FortCreativeInteractVisualizationComponent:bPendingShow": "If the components are not spawned yet when a show is desired.\nIf bPendingShow when the components are created, then Show() will be called again.",
    "ECosmeticsEventBindingFlags.ExecuteImmediately": "If the corresponding event is not blocked, then execute the delegate immediately",
    "FortWorldSettings:bUseWorldSpecificCullDistanceOverride": "If the cull distances are map specific",
    "GameDifficultyInfo:bIsOnboarding": "If the current theater is part of the onboading content and shouldn't give xp",
    "MissionTimeDisplayData:LessThanTimeValue": "If the current time is less than this value, then the flashing/color values will be used",
    "MinimapGoalByTagColorsData:GoalTags": "If the current valid goal has any of these tags we will use the color specified by MinimapColor.",
    "WaxRespawnLogicData:UseDirectionFromTeam": "If the direction from leaders should be based on the direction from the leader to the team (or safezone in solos)",
    "FortGameStateComponent_AssignedObjective:MinPairedSquadDistForUnopposed": "If the distance between the squads paired together by objective matchmaking is >= this, split them and give them unopposed objectives instead.\nSet to -1 to disable this functionality (squads will never be given unopposed objectives due to distance).\nRequires bAllowUnopposedSquads to be true and IdealNumSquadsPerObjective to be 2 (currently not supported for > 2 squads per objective).",
    "CollisionReactionConfiguration:ExtremePenetrationThreshold": "If the distance from the impact point to the sides of the sweepbox is higher than this value and the impact point is inside the sweep box then it's classified as an extreme penetration.",
    "FortLiquidGunProjectile:MinDistBetweenInLineProjectilesForSplineCollisionTest": "If the distances to adjacent projectiles are within this min distance, AND the projectiles are moving in line (following each other), skip the spline collision test",
    "FortLiquidGunProjectile:MinDistBetweenProjectilesForSplineCollisionTest": "If the distances to adjacent projectiles are within this min distance, skip the spline collision test",
    "SKPushVehicleInPersistent:bIsDriverTargetting": "If the driver is currently targetting",
    "FortGeneratedEncounterProfile:MinDifficultyOptionPointsToUse": "If the encounter uses fewer points than this to generate difficulty options, there should be a warning output to the logs",
    "ReplayEliminationEventInfo:DeathCause": "If the event is an elimination then we need a cause, and to know whether it's a DBNO",
    "AthenaScoreData:EventInclusionTags": "If the event requires tags to be used, this is the list of tags associated with that event",
    "ReroutePlayerEventDefinition:ImmediateOutgoingEventTag": "If the filters pass, immediately trigger this additional event on the player's AbilitySystemComponent, using the same GameplayEventData",
    "ReroutePlayerEventDefinition:MergedOutgoingEventTag": "If the filters pass, queue an event to be triggered on the next tick.  Identical incoming events\nthis frame will be merged into a single queued event, with their EventMagnitudes added together.",
    "WorldAmbientPropertiesMatchingGameContext:QueryToMatch": "If the game context gameplay tags (which come from the mission, theater, region, zone, critical missions, and more) match this query, these time of day and wind settings will be used.",
    "FortControllerComponent_Interaction:bShouldBlockInteractionsForAllVehiclePassengers": "If the game mode dictates (via mutator), we will skip the interaction sphere sweep if the player is in an \"interact-blocking\" vehicle, regardless of whether they are the driver or not.",
    "FortGravityGunHolder:HeldObjectProjectileClass": "If the held object is a projectile then this is the class.",
    "FortPlayerController:bJumpInputPressed": "If the jump input button is pressed down",
    "EObjectiveGateRelation.Substitution": "If the listed gate is open this one will count as open",
    "FortChallengeBundleInfoLockedReason:RequiredTier": "If the lock reason code is ReachSpecificTier, then this represents\nthe required tier.",
    "FortChallengeBundleInfoLockedReason:UnlockTimespanAfterStart": "If the lock reason code is TimeLeftBeforeUnlock, then this is the\namount of time after the season starts before the bundle unlocks.",
    "BuildingSMActor:bNoPhysicsCollision": "If the object does have collision, should it interact with physics at all",
    "FortStormShieldComponent:bCareAboutEdgeOfStorm": "If the owner of this component cares about being near the edge of the storm",
    "SpecialEventCursorPawnComponent:MinDeltaToSendWorldLocationToServer": "If the owning client's cursor world location changes by at least this amount, it will send it to the server",
    "FortActorComponent_Affiliation:bCanBeDamagedByNullInstigator": "If the owning pawn can be damaged by a null instigator",
    "BattlePassLandingPageButtonDisplayDetails:DelayTimespan": "If the page represented by this button is delayed, pass in the time remaining to unlock the page",
    "FortItemPreviewOnPawnActor:PickaxeHitTags": "If the pawn attempts to activate an ability with these tags, the preview actor will play pickaxe hit FX",
    "FortFallTeleportComponentBase:TeleportLimitBeforeFail": "If the pawn is teleported more than this amount of times without landing, resort to safe teleport location",
    "FortAthenaLivingWorldTagQueryToSeatMapping:TagQuery": "If the pawn tag match this query, they will be seated at the specified seat index.",
    "FortWeapon:FireCanInterruptEquipQuery": "If the pawns tags pass this query, the weapon can be fired during it's equip animation",
    "CollisionReactionConfiguration:TypeOfBuildingActorOnPhysicsObject": "If the physics object we are handling is also a building acotr, what kind of Building Actor we want to handle.",
    "FortMangDataTrackerComponent:TargetedThreatenedGuaranteedRange": "If the player and a newly threatened bot are within this distance of each other it\nwill always contribute to the Targeted Threatened Event",
    "FortPresenceGameplayStats:bFellToDeath": "If the player didn't stick the landing in their match",
    "EFortFrontEndFeature.ShowHomeBase": "If the player has access to the primary HomeBase tab",
    "EFortFrontEndFeature.ShowVault": "If the player has access to the vault",
    "EFortUIFeature.LargeHeaderFooterButtons": "If the player is able to access the top bar",
    "EFortFrontEndFeature.ShowStore": "If the player is able to open the store tab",
    "EFortFrontEndFeature.PlayZone": "If the player is able to play a zone",
    "EFortFrontEndFeature.RecruitHero": "If the player is allowed to recruit a new hero",
    "SKPushVehicleInPersistent:bIsCoastingOrDismounting": "If the player is coasting or dismounting",
    "FortObjectiveFilter_Emote:Target": "If the player is facing an actor when the emote is used, this will be the tags from that actor",
    "FortObjectiveFilter_Spray:Target": "If the player is facing an actor when the spray is used, this will be the tags from that actor",
    "EAdHocSquads_InviteStatus": "If the player is performing the invite emote, and if they are not why they stopped performing the emote.",
    "EFortUIFeature.ShowChatWindow": "If the player sees the chat window",
    "EFortUIFeature.ShowObjectives": "If the player should be able to select the Objectives tab.\nNOTE not supported by NavigateToFeature",
    "EFortUIFeature.ShowFriendsMenu": "If the player should have access to the friends menu and social tools",
    "EFortFrontEndFeature.ShowHeroList": "If the player should see the hero list on the home base",
    "EFortFrontEndFeature.ShowHeroSelect": "If the player should see the hero select screen for entering the zone",
    "EFortUIFeature.ShowPartyBar": "If the player should see the party bar",
    "FortPlayerController:bFailedToRespawn": "If the player was unable to respawn",
    "TeamBucketCosmeticLoadoutContainer:SpecialTags": "If the player's cosmetic loadout is marked with any of these tags, then also use the PartsToAddIfSpecialTags from any PartsOverride entries that apply.",
    "TeamBucketCosmeticLoadoutContainer:ExtraSpecialTags": "If the player's cosmetic loadout is marked with any of these tags, then use the PartsOverrides with BodyType All",
    "MashScoreData:bUsesStreakScoreMultiplier": "If the player's kill streak score multiplier is applied to scoring events of this type.",
    "PapayaAnalyticsComponent:ChildAnalyticsComp": "If the primary local player has nested analytics components, this is the next down the stack",
    "PapayaAnalyticsComponent:ParentAnalyticsComp": "If the primary local player has nested analytics components, this is the next up the stack",
    "AthenaResurrectionComponent:bActiveBeingRebooted": "If the reboot for this player is already in the process on server",
    "FortSeasonItemMapData:bAlwaysRender": "If the render distance is < 0, this value will be true",
    "EventItemOverride:bIsDoubleWidth": "If the reward width should display at double width.",
    "TowhookParams:SpringMaxStiffnessVelocity": "If the rope is contracting faster than this, then it will not apply any force",
    "BagelScoreData:Tags": "If the score is identified by tags (ex. interaction events)",
    "MashScoreData:Tags": "If the score is identified by tags (ex. interaction events)\n     Uses general hierarchy matching, NOT exact matching.",
    "GoalDistanceData:ScreeningTestMaxDistance": "If the screening test distance is <= this value, then this set of data applies for scoring and filtering.",
    "FortLiquidGunProjectile:DetachmentReason": "If the segment starting with this projectile has a detachment, this is the reason the segment was detached (split)",
    "FortPlayerController:bServerAutoChangeMaterial": "If the server gets a request to place a building with a material we're out of, should it just fix the request up?",
    "FortGameModePvE:bEnableBigBenPvE": "If the server should force success for all running missions at a certain time.",
    "FortServiceTransactionInfo:bIsLocked": "If the service is locked",
    "BuildingActorClassData:HealthBarIndicatorSocketName": "If the socket is in the object it will be used as the basis for the location of the health bar instead of the half height",
    "FortConditionalIncludeTags:ConditionTags": "If the source tags match all of these ConditionalTags, add the IncludeTags",
    "BuildingGameplayActorSupplyDropRadio:ForceOpenActorTags": "If the supply drop lands on an actor that has any of the tags in this container, it is forced-open.",
    "ClamberingInputConfig:TargetActorMovementInvalidateDistance": "If the target actor moves more than this distance after it was locked as a target, it will be invalidated.",
    "MashScoreData:bUsesTeamScoreMultiplier": "If the team score multiplier is applied to scoring events of this type.",
    "HUDElementVisibilityRepData:bInvertTeamSelection": "If the team specifier should be inverted (ie. \"All teams EXCEPT the selected team\")",
    "FortAthenaMutator_Uranium:EarlyEndGame_OutNumberedPercent": "If the team that lost the previous round has this percent or fewer players than the winning team, the game will end early because of the Out Numbered Rule",
    "DanceSynchronizerComponent:bShouldHalfOrDoubleTimeDances": "If the tempo of the Music is so fast or slow that the speed of the dance animation\nwould be doubled or halved (or more), when this is true, the play rate of the animation\nwill be scaled so that the dance will look like it's \"double timed\" or \"half timed\" to the music.",
    "FMDanceSynchronizerComponent:bShouldHalfOrDoubleTimeDances": "If the tempo of the Music is so fast or slow that the speed of the dance animation\nwould be doubled or halved (or more), when this is true, the play rate of the animation\nwill be scaled so that the dance will look like it's \"double timed\" or \"half timed\" to the music.",
    "DigestedFocusSetting:IgnoreThreatDirectionCosAngleWhenFleeing": "If the threat is further than the IgnoreThreatDistanceWhenFleeing and outside the facing angle IgnoreThreatDirectionAngleWhenFleeing, then the threat will be ignored.",
    "DigestedFocusSetting:IgnoreThreatDistanceWhenFleeing": "If the threat is further than the IgnoreThreatDistanceWhenFleeing and outside the facing angle IgnoreThreatDirectionAngleWhenFleeing, then the threat will be ignored.",
    "FocusSetting:IgnoreThreatDirectionAngleWhenFleeing": "If the threat is further than the IgnoreThreatDistanceWhenFleeing and outside the facing angle IgnoreThreatDirectionAngleWhenFleeing, then the threat will be ignored.",
    "FocusSetting:IgnoreThreatDistanceWhenFleeing": "If the threat is further than the IgnoreThreatDistanceWhenFleeing and outside the facing angle IgnoreThreatDirectionAngleWhenFleeing, then the threat will be ignored.",
    "FortAthenaVehicle:WaterSubmergedTimerHandle": "If the top of the vehicle is submerged, this is a delay before we decide to eject the players.\nThis leaves a little wiggle room for if the vehicle falls into the water from a height and will come back up before sinking.",
    "ESubscriptionCancellability.CancellabeOnPlatform": "If the user is on the platform they subscribed on, we can directly cancel; otherwise we will show the info to \"get back to the original platform",
    "AthenaAISettings:DamagedHearingRange": "If the value is greater than zero, being players being damaged will make a 'noise' which AI can hear when it activates,\nusing this distance value as the range of the noise. *",
    "AthenaAISettings:MaxFootstepHearingRange": "If the value is greater than zero, footsteps will make a 'noise' which AI can hear when it activates,\nusing this distance value as the range of the noise. MaxFootstepHearingRange must be >= MinFootstepHearingRange",
    "FortGameplayEffectContainerSpec:ImpactNoiseRange": "If the value is non-zero, the ability will make a 'noise' which AI can hear when generating impact cues, using this distance value as the range of the noise.",
    "FortGameplayEffectContainerSpec:FlyByNoiseRange": "If the value is non-zero, the ability will make a 'noise' which AI can hear when the firing trajectory is in AI hearing range, using this distance value as the range of the noise.",
    "BuildingContainer:LootNoiseRange": "If the value is non-zero, the container will make a 'noise' which AI can hear when it activates, using this distance value as the range of the noise.",
    "FortPlayerPushableCart:bIsPushable": "If the vehicle can be pushed by players.\n if set to false, the vehicle will NOT move no matter what players do",
    "FortMovementComp_GroundSpline:AttemptUnstickMinimumAngleDegrees": "If the vehicle hits a static surface at this angle or less it will try to unstick itself\n If it hits a steeper angle it will give up",
    "FortWeapon:bShowWhenHolstered": "If the weapon should show when holstered (default behavior is to hide when holstered.)\n     Useful for weapons that appear to be worn by the equipping pawn (example: gauntlets.)\n     Acts the same as if CustomPartsToShowWhenHolstered contained all available custom part types.",
    "FortGameplayCueNotifyLoop_AbductionWarning:RadialForceLoop": "If the world's physics field has been created and we're locally controlled, then we spawn this actor for fx.",
    "FortObjectiveFilter_DistanceTraveled:AllowedVehicleSurfaces": "If there are surfaces in this list the objective will only progress while the vehicle is on one of those surfaces.",
    "ETryExitVehicleBehavior.ForceOnBlocking": "If there is a blocking trace/sweep, force and fallback to exit behavior.",
    "BattlePassLandingPageButtonDisplayDetails:MissingCosmeticNameText": "If there is a cosmetic we need for the page represented by this button, we pass its name for display here",
    "CollisionResponseBaseData:bBlockOtherResponsesOnTagMatch": "If there is a tag match evaluated, mark the response is handled regardless of whether or not an effect was applied",
    "FortGameStateComponent_AssignedObjective:UnopposedSquad_FakeSquadMinDistToSquad": "If there is an unopposed squad, an additional \"fake squad\" location is generated to make the objective appear opposed.\nAttempt to generate that location greater than this distance away from the unopposed squad. This helps prevent the\nobjective from spawning too close to the unopposed squad.",
    "FortGameStateComponent_AssignedObjective:UnopposedSquad_FakeSquadMaxSafeZonePct": "If there is an unopposed squad, an additional \"fake squad\" location is generated to make the objective appear opposed.\nGenerate that location within this % of the safe zone (the white/next safe zone that the objectives are spawning in)",
    "BuildingFoundation:bPreviewFoundationLevelInEditor": "If there is only a single additional building set then a transient streaming level will be created and used to display a preview of the referenced level.\nThis action cannot be undone and the undo/redo buffer is cleared when it is used.",
    "FortMissionPlacementActorItem:bAdjustPlacementForFloors": "If there's a floor at the location of the placement actor, try a ray-cast to find the height of the floor and adjust the placement location up on top of the floor.",
    "FortMissionPlacementFoundationItem:bAdjustFoundationPlacementForFloors": "If there's a floor at the location of the placement actor, try a ray-cast to find the height of the floor and adjust the placement location up on top of the floor.",
    "FortPlayerSpawnPadPlacementData:bAdjustPlacementForFloors": "If there's a floor at the location of the placement actor, try a ray-cast to find the height of the floor and adjust the placement location up on top of the floor.",
    "AIRuntimeParametersSmartObjectActivity:SmartObjectActivityCondition": "If this Condition is valid we can use this SmartObject Activity Config",
    "FortCreativeSplineControlPoint:bInitializedFromOwningSplineProp": "If this Control Point has been integrated into the owning device",
    "FortAthenaAISmartObjectActivityCondition:SmartObjectActivityConditionTagQuery": "If this TagQuery matches, AI can use this SmartObject Activity. (No query will always match)",
    "SpecialActorRepData:PlayerState": "If this actor has a playerstate this is it",
    "BuildingSMActorClassData:bClearMIDWhenReturningToUndamagedState": "If this actor is finished animating from a bounce and undamaged we clear the MID from the mesh (for performance). Only disable this if you are managing MID parameters in the blueprint and don't want this behavior.",
    "FortVehicleSeatComponent:PlayerSlotPriorityList": "If this array has entries, when a player is entering the vehicle they will be\n              placed into the first empty slot on this list, or the one which is closest to\n              them. Otherwise, just the one closest.",
    "FortDailyQuestData:Playlists": "If this bucket is restricted by playlist, define the playlists here",
    "BuildingSMActorClassData:bUsePhysicalSurfaceForFootstep": "If this building actor should use the physical surface painted on the mesh or resource type",
    "FortBurstEffectData:bCancelParticlesOnRemove": "If this burst effect is triggered on Application, cancel particles early if GC is removed before it has time to finish (interrupted)",
    "FortBurstEffectData:bCancelSoundsOnRemove": "If this burst effect is triggered on Application, cancel sounds early if GC is removed before it has time to finish (interrupted)",
    "FortGameplayCueCameraShakeInfo:bCancelOnRemove": "If this camera shake is triggered on Application, cancel it early if GC is removed before it has time to finish (interrupted)",
    "SpecialEventCursorWeaponComponent:CursorModeTag": "If this component is active, and our owning weapon is equipped, the CursorPawnComponent is told to use this mode out of its CursorModes array",
    "FortPlayerControllerAthena:bHasHadValidPawn": "If this controller has ever possessed a valid Athena pawn.",
    "FortPlayerController:bIsBeingKicked": "If this controller is in the process of disconnecting due to kick. Used to skip appropriate logic",
    "FortPlayerController:bIsDisconnecting": "If this controller is in the process of disconnecting. Used to skip appropriate logic",
    "FortPlayerController:bWantsWeaponAutoPickup": "If this controller wants to auto pickup weapons.",
    "SafeZoneRoute:bIsEnabled": "If this entry will be used or not",
    "FortItemFilterDefinition:bRequiresItemDetails": "If this filtering predicate requires the Item Details asset bundle to be loaded.",
    "EmptyServerReservation:bUsesMatchmakingV2": "If this game was created through MatchmakingV2",
    "FortCollectionBookRewards:bIsMajorReward": "If this is a collection book reward, should this be presented to the user as a major reward?",
    "FortLoginReward:bIsMajorReward": "If this is a collection book reward, should this be presented to the user as a major reward?",
    "FortCollectionBookRewards:XpRequired": "If this is a collection book reward, the total collection book XP required to claim this reward",
    "FortCollectionBookRewards:PageId": "If this is a page or section reward, this is the page Id",
    "FortCollectionBookRewards:SectionId": "If this is a section reward, this is the section Id",
    "RepGraphActorSettingsBase:bRPC_Multicast_OpenChannelForClass": "If this is added to RPC_Multicast_OpenChannelForClass map then should we actually open a channel or not",
    "FortAbilityTargetSelection:TestType": "If this is an overlap test (test about a point) or a swept test (test between two points)",
    "HeroSpecializationDesignerData:EventUnique": "If this is checked, the hero will not have any sacrifice data and the Inventory Size Limited option will be set to false.",
    "AudioAnalysisParameterBase:bDebug": "If this is enabled, this parameter will be shown on screen when AudioAnalysis.ToggleDebug is executed",
    "BuildingFoundation:BuildingDeconstructorExtent": "If this is non-zero, a building deconstructor will be used with the specified extent at the BuildingDeconstructorOrigin. World space.",
    "MtxPackage:SaleBasePrice": "If this is not Empty then the item is on sale (may affect display). In this case, Price will be the current price (as always)\nand SaleBasePrice can be used to display what it was before the sale",
    "ObjectiveFilter_Custom:NameOfValueToIncrementBy": "If this is set it will increment the objective by the passed in named value. Otherwise it will increment by the message amount\nNote: If this property doesn't exist on the verb message no progress will be made for the objective.",
    "VkModuleDoc:AliasForModuleId": "If this is set then we don't have any versions/arfiacts of our own - used for labels",
    "FortAthenaLivingWorldVehiclePointProvider:InitialOverlapBehavior": "If this is set to \"None\", then the default property value for the class that is being spawned will be used",
    "FortAthenaVehicleSpawner:InitialOverlapBehavior": "If this is set to \"None\", then the default property value for the class that is being spawned will be used",
    "ObjectiveEntry_Gate:GateResetBehavior": "If this is set to a value other than DoesNotReset, this will call to reset the objective or quest when this gate closes",
    "FortGameModeZone:bDisableAI": "If this is set to true, AI will be disabled on startup",
    "FortGameModeZone:bSupportOneHitBuildingActorRecycling": "If this is set to true, Players can one hit disassemble owned building actors and reclaim resources",
    "FortGameModeOutpost:bSavePlayerBuiltStructuresAtAllTimes": "If this is set to true, outpost modifications will save to the cloud during all phases of the mission",
    "FortGameModeZone:bOneHitResourcesGoToOwner": "If this is set to true, the owning Player is who gets resources from one hit disassembled building actors not necessarily the Player that disassembled it",
    "BuildingContainer:LootTestingData": "If this is set, the container will ONLY SPAWN THIS ITEM.",
    "FortAthenaMutator_SafezoneBlacklist:MasterDisableSwitch": "If this is true (nonzero), the mutator will have no effect.",
    "TargetDataEntry:bFindInStormCircle": "If this is true we use the storm circle to find targets, else we look at all targets and move the storm circle to the target",
    "FortObjectiveFilter_Acquire:bGrantProgressForAlreadyAccumulatedItems": "If this is true you will have to specify the Item Templates that MCP will check for",
    "ImGuiCanvasSizeInfo:bExtendToViewport": "If this is true, canvas width or height may be extended, if the viewport size is larger.",
    "FortLOSComponent:bDistanceCheckOnly": "If this is true, it does a simple distance check only instead of a LOS check",
    "VehicleModPhysicsShapeModifiers:bIgnoreLandscapeCollisions": "If this is true, the shape will have physical contacts with landscape ignored.",
    "BuildingFoundation:bRequiredForWarmupPhaseInPIE": "If this is true, this foundation must not use \"streaming behavior\" on the server when PIEing during the warmup phase. Used to make sure the warmup island is loaded before the world manager is done.",
    "BuildingFoundation:bConditionalFoundation": "If this is true, this foundation will only stream in when it is chosen to be streamed in by the world manager.",
    "VideoWidgetConfig:bCheckAutoPlay": "If this is true, this widget will check to see if the video\n       * has been played for this season yet. If not, it will autoplay.",
    "BuildingActor:bSurpressHealthBar": "If this is true, we never show the health bar",
    "FortObjectiveFilter_DistanceTraveled:bRequireVehicleInAir": "If this is true, will only allow progression if the author is in a vehicle and is in the air.",
    "BuildingFoundation:bShowHLODWhenDisabled": "If this is true, will show the HLOD even if the foundation is disabled.",
    "VariantSwapMontageActiveSwapsRequirement:Item": "If this item is present in the active swaps of the PlayerPawn, this condition is satisfied.\nWhen nullptr, doesn't contribute in any way to the condition.\n\nIf both Item and VariantSelections have been filled in, they must both be satisfied or this requirement will not pass",
    "RespawnAndSpectateTargetData:bShouldBeSelectedByDefault": "If this item should be selected by default if the player does NOT currently have a valid spectate/respawn target\n Whatever playlist implements this mutator should create 1 default entry for each team (this can be done in a supporting gamemode, or a child class of AFortAthenaMutator_RespawnAndSpectateSelect)\n bShouldBeSelectedByDefault should ONLY be set to true on respawn targets that will ALWAYS be viable for as this respawn target data is in use. This will ensure that the default option is always viable for use.",
    "FortGameplayCueCameraLensEffectInfo:bCancelOnRemove": "If this lens effect is triggered on Application, cancel it early if GC is removed before it has time to finish (interrupted)",
    "FortGameModeAthena:BlacklistedMatchmakingBackfillPlaylists": "If this list is non-empty then matchmaking backfill will be disabled for these playlists.",
    "FortPartyMemberRepData:UtcTimeStartedMatchAthena": "If this member is in match this is the UTC time they started the match currently Athena only",
    "TeamPerformanceMessageData:bCanStillBeTriggered": "If this message can still be triggered for any team.\n     Is turned off after a message has exceeded its NumberOfTeamsToTriggerFor limit",
    "TeamPerformanceMessageData:bEnabledInternal": "If this message is enabled internall. Can be turned on/off via: AFortAthenaMutator_TeamPerformanceMessage::SetMessageEnabled()",
    "TeamPerformanceMessageData:NameIdentifier": "If this message is enabled. Can be hot-fixed on/off.",
    "TeamPerformanceMessageData:bEnabledHotfix": "If this message is enabled. Can be hot-fixed on/off.\n     Should NOT change during runtime.",
    "FortGameCueCloakModifier:bCanBeEnabled": "If this modifier can ever be enabled. Set to false to turn off this modifier so it will never show up during gameplay.\n     When set to true this modifier will still start out disabled, but it can be enabled via AFortGameCueNotifyLoop_Cloak::SetModifierEnabled().",
    "FortGameCueCloakModifier:bCurrentlyEnabled": "If this modifier is currently set to show. Should only be set to true if bCanBeEnabled == true.\n     When bCurrentlyEnabled == true, CurrentAlpha will increase every frame until it hits 1.0,\n     When bCurrentlyEnabled == false, CurrentAlpha will decrease every frame until it hits 0.0.",
    "FortAthenaMutator_RespawnAndSpectateSelect:bShouldBeActive": "If this mutator will be active or not. If active it will manage player respawning and death spectating.",
    "FortGliderLayeredAudioOneshotGate:InterruptFadeTime": "If this oneshot is re-tripped, how long to fade out the current asset",
    "FortLayeredAudioOneshotGate:InterruptFadeTime": "If this oneshot is re-tripped, how long to fade out the current asset",
    "RespawnAndSpectateTargetData:bEnabled": "If this option is available to players or not\n NOTE: that when adding a button setting bEnabled == true does not fully guarantee that a button will be enabled,\n outside factors can override this value. (like if the respawn target is a dead player)",
    "ValkyrieEditorPermission:IncludedRoles": "If this permission's role is enabled, also enable these included roles",
    "EFortQuestObjectiveStatEvent.KillContribution": "If this player contributed damage toward a kill. Target is the actor that was killed. Solo eliminations will have Quest.Metadata.SingleDamager in SourceTags",
    "AdHocSquad_InviteData:InviteStatus": "If this player is currently performing the invite emote, or why their last invite emote was ended.",
    "BuildingSMActor:DamagerOwner": "If this property is in use, then all damage to this actor will be sent to the damage owner.",
    "FortAIDirector:LootDropDenialQuery": "If this query passes on the tags passed to HandleOutOfHealth for an AI, the AI will NOT spawn loot",
    "FortComponent_Energy:EnergyUseDisabledQuery": "If this query returns true on owner's gameplay tags, the energy pool cannot be used.",
    "FortComponent_Energy:RechargeDisabledQuery": "If this query returns true on the owner's gameplay tags, recharging will be disabled.  When this query returns\nfalse again, recharging will be re-enabled after the normal recharge-delay.  (Recharging may still be disabled by\ncurrent active use of energy even if this query returns false.)",
    "RandomUpgradeData:LootTierGroupIfApplied": "If this random upgrade is applied, the tier to use.",
    "ConversationParticipantRequirement:CannotUseReasonParameter": "If this requirement fails, this is the parameter value which will be passed in conversation choice parameters using the 'CannotUseReasonKey'",
    "ConversationParticipantRequirement:FailureNodeBehaviour": "If this requirement is not met, is this a player facing failure, or something which should result in hiding the service entirely?",
    "EQSActorSpawnerData:bEnabled": "If this spawner data will be used to spawn objects.",
    "AthenaSpecialActorComponent:CalendarEventName": "If this special actor is behind a calendar event, set that here. This data will be used in the frontend to determine if the icon should render.",
    "FortAthenaRiftPortal:IgnoreActorTag": "If this tag exists on the actor queried by IsIgnoredActor, then the actor will be considered ignored even if they aren't in the IgnoredActors list.",
    "ItemLoadoutTeamMap:DropAllItemsOverride": "If this team wants to specify whether it drops all items",
    "FortMissionTimerComponent:bUpdateQuestsTimeElapsed": "If this timer should be used for monitoring Time Elapsed Quest Objectives",
    "ScriptedObjectMovement_StaticPathTravelerData:bLocked": "If this traveler is locked, it will not generate new data paths when path generation is requested.",
    "FortRespawnLogicData_Teams:MinDistanceFromTeammates": "If this value is > 0, will attempt to clamp the respawn point to at least this distance of the team",
    "WaxRespawnLogicData:MinDistanceFromTeammates": "If this value is > 0, will attempt to clamp the respawn point to at least this distance of the team",
    "FortRespawnLogicData_Teams:MaxDistanceFromTeammates": "If this value is > 0, will attempt to clamp the respawn point to within this distance of the team",
    "WaxRespawnLogicData:MaxDistanceFromTeammates": "If this value is > 0, will attempt to clamp the respawn point to within this distance of the team",
    "FortWeapon:bFireConsumableAnalyticEvent": "If this weapon is a \"consumable\" then it will fire the Item.Consume analytics event",
    "FortSaveFileBuildingInstructionsHandler:bTrackDestroyedBuildings": "If true - buildings destroyed by player will also be saved, so they can be brought back on reset. IMPORTANT - NotifyBuildingDestruction must be hooked up for this to work!",
    "FortSaveFileBuildingInstructionsHandler:bUseAbsoluteCoordinates": "If true - each building's transform is considered to be in absolute coordinates. If false - relative to this actor's transform.",
    "FortObjectiveFilter_PlayerReceivedGameplayEvent:bRequireAuthorTarget": "If true Author must be the target of the gameplay event. (This is usually the case when they are set)",
    "FortAthenaMutator_InventoryOverride:bForceInventoryAutoEquip": "If true Auto Equip will be forced even if the player is not currently allowed to change their equipment.\n     This is useful if the player has their change equipment input locked but we want to force equipment change anyway.",
    "FortGameMode:bAlwaysFlushMMREndZoneEvents": "If true MMR end zone events will always be flushed as soon as they occur.",
    "FortPawn:bPrioritizePawnCollisionsOnAbilityTargetSelectionVisibilityTest": "If true Target Selection will prioritize this pawn's collision points to find the closest point for visibility testing (used for things like hit markers and which doesn't work well for complex pawns using meshes as colliders, ex. Butter Cake).",
    "FortObjectiveFilter_PlayerRevealed:bUseDistance": "If true allows filtering by the distance between the Author and teh reveled pawn",
    "TeamBucketPartOverrideData:bShouldRemoveExtras": "If true also swap in PartsToSwapInToRemoveExtras from the FTeamBucketCosmeticLoadoutContainer we belong to",
    "FortGameModeAthena:bAlwaysIncludeDisconnectedTeammates": "If true always record a tournament match if there are teammates who never connected to the server.",
    "FortAthenaLivingWorldEventDataActorSpawnDescription:bSharePreviousActorEQSResult": "If true and SpawnAroundEnvironmentQuery is set, this EQS will be skipped and uses instead the result of the previous Actor EQS.",
    "FortGameplayCueNotify_Looping:bSnapToAttachPointAndPreserveWorldRotation": "If true and bStayAttched is true, will snap to the attach point, but keep world rotation, helps with high ping situations and persistent items",
    "AthenaAIController:bEnableCheapFlyingNavigation": "If true and if a reverse path exists from destination to start, this path will be reversed and used (including one-way nav link(s) that will get traversed in cheap flying movement mode)",
    "FortAthenaLivingWorldEventDataActorSpawnDescription:bUpdateDefaultPosition": "If true and the SpawnAroundEnvironmentQuery is set, the event default position will be updated with the chosen position from the env query. This is useful to chain environment query.",
    "VortexParams:bCanDeployGlider": "If true and the pawn is capable, the pawn will be able to deploy their glider at anytime in the vortex",
    "ExternalEmoteCategory:bForceUIFocusWhenAdded": "If true and the player has the Emote Picker UI open when an emote from this category is added,\n     then the Emote Picker's focus will be forced to this category.",
    "ExternalMultiEmoteCategory:bForceUIFocusWhenAdded": "If true and the player has the Emote Picker UI open when an emote from this category is added,\n     then the Emote Picker's focus will be forced to this category.",
    "ProjectileHomingData:bScaleTargetOffsetWithCapsuleHeight": "If true and the target is a FortPawn, the TargetOffset Z value will adjust if the target's capsule half height changes.\nEg, if the target player crouches, the z value of the target offset will shrink down. This better mimics targeting a socket than an offset alone.",
    "FortGameplayEffectDeliveryActor:bSpawnNavAreaModifierOverTargetSelectionShape": "If true nav mesh will be impacted with NavAreaClass under all Target Selection shapes",
    "FortGameModeAthena:bIncludeDisconnectedTeammatesFromAircraftPhase": "If true only record a tournament match where there are teammates who never connected to the server if the rest of the team didn't leave by the start of the aircraft phase.",
    "FortAIPawn:bCanBeBaseForOtherPawns": "If true other pawns can use this as a base and walk on it.",
    "PickedTurnTransitionData:bMaintainRotationOnFacing": "If true rotation will continue to be applied even after the desired rotation is less than the facing precision",
    "TurnTransitionData:bMaintainRotationOnFacing": "If true rotation will continue to be applied even after the desired rotation is less than the facing precision",
    "FortTheaterMapTile:bEnableBrightnessCode": "If true set brightness from code, otherwise don't",
    "BeginGroupTeleportParams:bReinitializePlayerAbilities": "If true teleported players have their abilities reset",
    "FortObjectiveFilter_PlayerReceivedGameplayEvent:bRequireAuthorInstigator": "If true the Author must be the same as the event instigator (Not often the case for Gameplay events)",
    "FortObjectiveAvailableConversationTriggerInfo:bCounterWraps": "If true the CurrentCounter is expected to reset back to 0 once it hits StatTarget",
    "PickedTurnTransitionData:bLockBehaviorTree": "If true the behavior tree will be locked during the transition",
    "TurnTransitionData:bLockBehaviorTree": "If true the behavior tree will be locked during the transition",
    "PickedTurnTransitionData:bUnlockBehaviorTreeOnFacing": "If true the behavior tree will be unlocked when the facing precision threshold is met",
    "TurnTransitionData:bUnlockBehaviorTreeOnFacing": "If true the behavior tree will be unlocked when the facing precision threshold is met",
    "FortEmoteVolume:bAllowGrantingUnownedEmotes": "If true the emote volume will not attempt to verify that the player actually owns the emote before granting it in the new\ncategory. Use caution when enabling this setting as overuse can counteract the BP or shop exclusivity of some emotes.",
    "FortGameModePvE:bSendIdleAnalytics": "If true the idle detection system will send analytics events.",
    "FortAIPawn:bHasInfiniteAmmo": "If true the inventory owner currently has infinite ammo.",
    "FortAIPawn:bHasInstantReload": "If true the inventory owner wants the weapon to bypass reload animation on this weapon",
    "FortPlayerMannequin:bSpawnEditorPartModifiers": "If true the mannequin will attempt to spawn part modifiers when the selected character parts are updated in the editor",
    "FortItemDeliverySupplyDropMutatorData:bShouldApplyMutator": "If true the mutator will attempt to mutate the supply drops with the data below",
    "FortVerbMessage_PawnEliminated:bKilledPawnWasPlayer": "If true the pawn that died was a player",
    "FortVerbMessage_PawnEliminated:bWasEliminatedByConvertedPawn": "If true the pawn that died was eliminated by a converted pawn",
    "FortVerbMessage_PawnEliminated:bKilledPawnWasWildlife": "If true the pawn that died was wildlife",
    "PickedTurnTransitionData:bUpdateRotationToMatchDesired": "If true the rotation values from the curve will be continuously scaled to match the desired rotation during the transition",
    "TurnTransitionData:bUpdateRotationToMatchDesired": "If true the rotation values from the curve will be continuously scaled to match the desired rotation during the transition",
    "PickedTurnTransitionData:bScaleRotationToMatchDesired": "If true the rotation values from the curve will be scaled to match the desired rotation",
    "TurnTransitionData:bScaleRotationToMatchDesired": "If true the rotation values from the curve will be scaled to match the desired rotation",
    "FortGameSessionDedicatedAthena:bEnableMMSBackfill": "If true the server will allow matchmaking backfill for playlists that support it.",
    "EQSActorSpawnerData:bAvoidRepeatClassSpawning": "If true the spawner will NOT spawn the same class twice until it has spawned all available classes\n     NOTE: bAvoidRepeatClassSpawning is ONLY used if ShouldOverrideClassesToSpawn() does NOT override which classes are spawn candidates",
    "BeginGroupTeleportParams:bRandomizePlayerInventories": "If true the teleported player inventories are randomized (and reset is implied since players will get a fresh inventory). Player inventories get randomized at the end of AFortAthenaMutator_SynchronizedTeleport::TeleportPlayersAfterScreenFade\n bResetPlayerInventories does NOT affect bRandomizePlayerInventories since resetting a freshly randomized inventory does not do anything\n is ONLY applied if there is an active InventoryOverride Mutator.",
    "BeginGroupTeleportParams:bResetPlayerInventories": "If true the teleported player inventories are reset. Player inventories get reset AFortAthenaMutator_SynchronizedTeleport::TeleportOrRespawnPlayer\n     bResetPlayerInventories does not affect and is not affected by bRandomizePlayerInventories\n is ONLY applied if there is an active InventoryOverride Mutator.\n player inventories will also get randomized if AFortAthenaMutator_InventoryOverride::bSelectRandomLoadoutPerPlayer is true",
    "DistanceToTargetComparison:bUseAddedOffset": "If true then add in the value in AddedOffset to compare against.  This allows for tags to be used with a buffer or other offset without defining a new tag value",
    "PickedTurnTransitionData:bDisablePhysicsRotation": "If true then disable the movement component's physicsRotation triggered using orientToMovement and UseControllerDesiredRotation",
    "TurnTransitionData:bDisablePhysicsRotation": "If true then disable the movement component's physicsRotation triggered using orientToMovement and UseControllerDesiredRotation",
    "FortAIPawn:bShouldIgnoreThisBaseRotation": "If true then the actor using this AIPawn as a base will not follow this AIPawn's rotation but only its location.",
    "AthenaSuperDingo:bShouldIgnoreThisBaseRotation": "If true then the actor using this actor as a base will not follow this actor's rotation but only its location.",
    "FortAudioToMPCComponent:bCacheDataForBlueprintUse": "If true then the channel data is cached by this component and can be queried directly via the exposed functions",
    "FortGameModeAthena:bRemoveFromSquadOnLogout": "If true then the player will be removed from the squad on logout (as opposed to remaining in a disconnected state).",
    "TurnTransitionData:bUseCurveForRotation": "If true then the rotation will be extracted using the CurveNameForRotation from the montage.",
    "McpPrivacySettings:OptOutOfFriendsLeaderboards": "If true then user stats will be hidden from friends leaderboards.",
    "McpPrivacySettings:OptOutOfPublicLeaderboards": "If true then user stats will be hidden from public leaderboards.",
    "AircraftFlightConstructionInfo:bUseCustomPathSelection": "If true then we use the aircraft path selections below, otherwise we use the old behavior in the MapInfo.\nStrongly recommended when AirCraftBehavior is set to opposing aircraft because it generates more consistently fair routes.",
    "TurnTransitionData:bUseMontageForTurnTransition": "If true then, this turn will try to use the provided section name for either the ability's turn montage or\nthe provided montage in this struct (MontageToPlay).\nIf not it will simply notify the client anim bp it is turning then turn for a time based on given rate and desired angle",
    "FortLootPackageData:bAllowBonusDrops": "If true there is a chance that some players will get extra items. This can be through bonuses that double item drops or provide extra loot rolls",
    "FortMovementComp_AIChar:bConsiderPawnAsWalkable": "If true this AI can consider pawns as walkable surface when it try to find the floor",
    "EBehaviorTreeBranches.CanUseDiving": "If true this AI can use the Diving Behavior",
    "EBehaviorTreeBranchesBitmask.CanUseDiving": "If true this AI can use the Diving Behavior",
    "EBehaviorTreeBranches.CanUseGliding": "If true this AI can use the Gliding Behavior",
    "EBehaviorTreeBranchesBitmask.CanUseGliding": "If true this AI can use the Gliding Behavior",
    "EBehaviorTreeBranches.CanReactToProjectile": "If true this AI can use the React To Projectile Behavior",
    "EBehaviorTreeBranchesBitmask.CanReactToProjectile": "If true this AI can use the React To Projectile Behavior",
    "EBehaviorTreeBranches.CanReactToTraps": "If true this AI can use the React To Traps Behavior",
    "EBehaviorTreeBranchesBitmask.CanReactToTraps": "If true this AI can use the React To Traps Behavior",
    "EBehaviorTreeBranches.CanUseAlertedBehavior": "If true this AI can use the use the Alerted Behavior (Wait + Observe + Focus)",
    "EBehaviorTreeBranchesBitmask.CanUseAlertedBehavior": "If true this AI can use the use the Alerted Behavior (Wait + Observe + Focus)",
    "EBehaviorTreeBranches.CanAvoidDangerArea": "If true this AI can use the use the Avoid Danger Area Behavior",
    "EBehaviorTreeBranchesBitmask.CanAvoidDangerArea": "If true this AI can use the use the Avoid Danger Area Behavior",
    "EBehaviorTreeBranches.CanConverse": "If true this AI can use the use the Conversation behavior",
    "EBehaviorTreeBranchesBitmask.CanConverse": "If true this AI can use the use the Conversation behavior",
    "EBehaviorTreeBranches.CanBeConverted": "If true this AI can use the use the Converted Behavior",
    "EBehaviorTreeBranchesBitmask.CanBeConverted": "If true this AI can use the use the Converted Behavior",
    "EBehaviorTreeBranches.CanUseLastKnownPositionBehavior": "If true this AI can use the use the Last Known Position Behavior",
    "EBehaviorTreeBranchesBitmask.CanUseLastKnownPositionBehavior": "If true this AI can use the use the Last Known Position Behavior",
    "EBehaviorTreeBranches.CanPatrolAround": "If true this AI can use the use the Patrol Around behavior",
    "EBehaviorTreeBranchesBitmask.CanPatrolAround": "If true this AI can use the use the Patrol Around behavior",
    "EBehaviorTreeBranches.CanPatrolOnPath": "If true this AI can use the use the Patrol on patrol path behavior",
    "EBehaviorTreeBranchesBitmask.CanPatrolOnPath": "If true this AI can use the use the Patrol on patrol path behavior",
    "EBehaviorTreeBranches.CanPlayEmote": "If true this AI can use the use the Play Emote behavior",
    "EBehaviorTreeBranchesBitmask.CanPlayEmote": "If true this AI can use the use the Play Emote behavior",
    "EBehaviorTreeBranches.CanPropagateAwareness": "If true this AI can use the use the Propagate Awareness Behavior",
    "EBehaviorTreeBranchesBitmask.CanPropagateAwareness": "If true this AI can use the use the Propagate Awareness Behavior",
    "EBehaviorTreeBranches.CanReviveDBNOTeammates": "If true this AI can use the use the Revive DBNO Teammates",
    "EBehaviorTreeBranchesBitmask.CanReviveDBNOTeammates": "If true this AI can use the use the Revive DBNO Teammates",
    "EBehaviorTreeBranches.CanUseSmartObjects": "If true this AI can use the use the Smart Objects",
    "EBehaviorTreeBranchesBitmask.CanUseSmartObjects": "If true this AI can use the use the Smart Objects",
    "EBehaviorTreeBranches.CanUseThreatenedBehaviors": "If true this AI can use the use the Threatened Behavior (Range + Melee + MoveToAttack)",
    "EBehaviorTreeBranchesBitmask.CanUseThreatenedBehaviors": "If true this AI can use the use the Threatened Behavior (Range + Melee + MoveToAttack)",
    "EBehaviorTreeBranches.CanUseZiplines": "If true this AI can use ziplines",
    "EBehaviorTreeBranchesBitmask.CanUseZiplines": "If true this AI can use ziplines",
    "FortAIPawn:bUseBuildingAttackingHotspots": "If true this AI pawn will be taking part in building-destroying hotspots",
    "EBehaviorTreeBranches.CanEmoteWhenStuck": "If true this AI will emote when stuck",
    "EBehaviorTreeBranchesBitmask.CanEmoteWhenStuck": "If true this AI will emote when stuck",
    "EBehaviorTreeBranches.CanTeleportWhenStuck": "If true this AI will teleport when stuck",
    "EBehaviorTreeBranchesBitmask.CanTeleportWhenStuck": "If true this AI will teleport when stuck",
    "FortPoiVolume:bExcludeFromQuestMapMarkers": "If true this POI volume should be excluded from Map Marker collection by the FortMapMarkerUpdateCommandlet.\nThis is useful if there are multiple POI volumes in a level with the same POI tag, which would result in the POI\nappearing at multiple locations via the map markers.",
    "ObjectiveEntry_Gate:bUseAutomaticCloseTime": "If true this gate will automatically close itself after the specified time when it's opened",
    "ObjectiveEntry_Gate:bUseAutomaticOpenTime": "If true this gate will automatically open itself after the specified time when it's closed",
    "FortAthenaMutator_EnvironmentalDamage:bExcludeActorsAddedToVolume": "If true this mutator will not be applied to Actors added to the FortVolume.",
    "FortObjectiveFilter_VehicleBase:bRequireAllPassengersToMatchFilter": "If true this objective can only progress if all passengers in the vehicle match the filter. Otherwise will progress if any passenger in the vehicle matches the filter.",
    "FortObjectiveFilter_CurrencySpent:bIncrementByAmountSpent": "If true this objective will add the amount of currency Spent to it's objective count. If false it will add 1",
    "FortObjectiveFilter_CurrencyCollected:bIncrementByAmountCollected": "If true this objective will add the amount of currency collected to it's objective count. If false it will add 1",
    "FortProjectileBase:bRegisterInPerceptionSystem": "If true this projectile will be register in perception system and so can be detected by AIs",
    "QuickBarSlot:bIsDirty": "If true this slot has changed and needs to be updated",
    "QuickBarSlot:bIsReserved": "If true this slot is reserved by an item and cannot be added to (Used by the push validations)",
    "QuickBarSlot:bEnabled": "If true this slot will not be used or considered at all and hidden in the UI",
    "FortAthenaMutator_KillsFeedback:bShouldDisplayKillsInSocialMenu": "If true this the kill stats will not be shown in the social menu during a minigame.",
    "FortWeapon:bSupportsAutofireAtReticleTarget": "If true this weapon will auto fire when a target is under the reticle if the PC bAllowAutofireAtReticleTarget is set",
    "FortObjectiveFilter_BuildingRepair:bUseResourcesSpent": "If true this will allow filtering by the number of resources spent to repair this building",
    "FortObjectiveFilter_HealingReceived:bRequireHealingReceivedFromTeammate": "If true this will only allow progress if the author was healed by a teammate",
    "FortObjectiveFilter_DamageDone:bRequireCriticalHit": "If true this will only allow progress if this is a critical hit (ie. a head shot).",
    "FortObjectiveFilter_Hit:bRequireCriticalHit": "If true this will only allow progress if this is a critical hit (ie. a head shot).",
    "BuildingActor:bIgnoreAffiliationInteractHighlight": "If true we ignore the affiliation highlight",
    "FortGameMode:bOverrideRotationOnRestartPlayer": "If true we override the rotation of the pawn in RestartPlayer rather than sticking with the one from normal spawn logic.",
    "FortAthenaPatrolPath:bUseRandomStartupDirection": "If true we will randomize the direction to start the patrolling (Backward/Forward)",
    "FortPawnComponent_SpeechBubble:UseRandomTextAtEachSpeech": "If true we will select a random text at each speech",
    "FortGameMode:bEnableNotifications": "If true we will subscribe to profile notifications using the notifications service.",
    "DebugMinimapData:bIsOverridden": "If true we will use this debug minimap info",
    "FortWeaponComponent_Swinging:bAllowTargetPickups": "If true we're allowed to target pickups to pull to the player.",
    "FortPlayerController:bGamepadAbilityPending": "If true when using a gamepad, whichever ability is being pressed will be activated on key release",
    "ObjectiveEntry_Gate:bUseAdvancedLogic": "If true will allow advanced gate logic processing for this gate, only available for Gameplay ability based gates!",
    "FortObjectiveFilter_DamageDone:bAllowSelfInflictedDamage": "If true will allow damage done to self to progress progress",
    "FortObjectiveFilter_Hit:bAllowSelfInflictedDamage": "If true will allow damage done to self to progress progress",
    "FortObjectiveFilter_PawnEliminated:bUseDistance": "If true will allow filtering based on distance between Killer and killed player",
    "FortObjectiveFilter_ScoredPlayerElimination:bUseDistance": "If true will allow filtering based on distance between Killer and killed player",
    "FortObjectiveFilter_DamageDone:bUseDamageAmount": "If true will allow filtering by damage done to health range",
    "FortObjectiveFilter_QuestUpdated:bUseQuestDefinitionsFilter": "If true will allow filtering by quest definitions",
    "FortObjectiveFilter_DamageDone:bUseUncappedDamage": "If true will allow filtering by range of total damage done",
    "FortObjectiveFilter_CurrencyCollected:bUseCollectionSize": "If true will allow filtering by the amount of currency collected",
    "FortObjectiveFilter_CurrencySpent:bUseSpentAmount": "If true will allow filtering by the amount of currency spent",
    "FortObjectiveFilter_DamageTaken:bUseDamageAmount": "If true will allow filtering by the amount of damage taken",
    "FortObjectiveFilter_Build:bUseResourcesSpent": "If true will allow filtering by the amount of resources spent to build this object",
    "FortObjectiveFilter_PawnDied:bUseDistance": "If true will allow filtering by the distance between the author and killer.",
    "FortObjectiveFilter_DamageTaken:bUseDistance": "If true will allow filtering by the distance from the damage source to the player",
    "FortObjectiveFilter_BuildingEdit:bUseBuildingLevel": "If true will allow filtering by the level of the edited building",
    "ObjectiveFilter_Custom:bIncrementByNamedValue": "If true will allow incrementing by the value named instead of by message amount",
    "FortObjectiveFilterType_VehicleFilter:bAllowPassengerProgress": "If true will allow passengers to get credit for this objective also",
    "FortObjectiveFilter_DamageTaken:bAllowSelfInflictedDamage": "If true will allow progress for damage done to self",
    "FortObjectiveFilter_RevivePlayer:bAllowSelfRevives": "If true will allow progress if a player revives themselves",
    "FortGameplayCueNotify_Looping:bStayAttached": "If true will attach to the point or actor. If false is spawned at point and stays there",
    "CachedRechargeAmmoData:bShouldRechargeAmmoToClip": "If true will attempt to recharge any ammo directly to the weapon's clip.",
    "FortAthenaLivingWorldVolume:bStartEnabled": "If true will automatically run the EQS query and register itself to the LWM when the playlist has been loaded. If set to false it will require a manual registration by calling \"EnablePointProvider\".",
    "FortGameplayEffectDeliveryActor:bRegisterForEndOverlaps": "If true will bind to end overlap events",
    "ClientAILODSettings:bSupportCharacterMovementOptimization": "If true will disable \"SimulatedTick\" on the Client when the AI has not been moving for a while.",
    "FortAILODSetting_CharacterMovement:bDisableAvoidance": "If true will disable avoidance while in this mode.",
    "FortAILODSetting_CharacterMovement:bGenerateOverlapInNavWalking": "If true will do generate overlaps while MOVE_NavWalking.",
    "FortAILODSetting_CharacterMovement:bSweepWhileNavWalking": "If true will do sweep tests while MOVE_NavWalking.",
    "FortAILODSetting_CharacterMovement:bBotsEnableNavWalkingMode": "If true will enable PhysNavWalking on the UFortMovementComp_Character while in this mode.\n    This will only effect bots (Player Pawn AIs), FortAIPawns are always NavWalking",
    "FortObjectiveFilter_Acquire:bUseItemCount": "If true will enable filtering by range of the amount of items acquired",
    "FortAILODSetting_CharacterMovement:bBotsEnablePhysNavWalkingPathFollowingMode": "If true will enable the cheap Phys Nav Walking Path Following Mode on the UFortMovementComp_Character while in this mode.\nbBotsEnableNavWalkingModeValue must also be true.\n    This will only effect bots (Player Pawn AIs), FortAIPawns are always NavWalking without path following mode.",
    "FortObjectiveFilter_PlayerDowned:bUseDownedDistance": "If true will enable use of Downed Distance range",
    "FortObjectiveFilter_DestroyBuilding:bUseAdvancedVehicleFilter": "If true will enable using an advanced filter for the vehicle\n       * This can also be used to allow passengers to get credit for this objective",
    "FortObjectiveFilterType_VehicleFilter:bUseVehicleFuelPercent": "If true will filter against the vehicles current health percent",
    "FortObjectiveFilterType_VehicleFilter:bUseVehicleHealthPercent": "If true will filter against the vehicles current health percent",
    "FortObjectiveFilterType_VehicleFilter:bUseDistanceFromGround": "If true will filter against the vehicles current height from ground in meters",
    "FortObjectiveFilterType_VehicleFilter:bUseTravelSpeed": "If true will filter against the vehicles current travel speed",
    "FortObjectiveFilterType_VehicleFilter:bUseVehicleSurfaceType": "If true will filter based on the surface the vehicle is on",
    "FortObjectiveFilter_DamageDone:bUseDistance": "If true will filter by distance between damager and damaged subject",
    "FortObjectiveFilter_Hit:bUseDistance": "If true will filter by distance between damager and damaged subject",
    "FortObjectiveFilter_SpentBarsOnNPCService:bProgressObjectiveByBarsSpent": "If true will grant progress equal to bars spent, false progresses objective by 1.",
    "ObjectiveEntry_Gate:bShouldGateStartOpen": "If true will have the gate start in an opened state instead of closed. Example use: Open a chest before taking damage in a match, damage event closes the gate.",
    "FortObjectiveFilter_PawnDied:bIncrementByDistance": "If true will increment by distance between author and killer in meters",
    "FortObjectiveFilter_DamageDone:bIncrementByUncappedDamage": "If true will increment by the The amount of damage this damage event would have done if it was not capped by the target's remaining health.",
    "FortObjectiveFilter_DamageTaken:bIncrementByDamageAmount": "If true will increment by the amount of damage done, if false will increment by 1",
    "FortObjectiveFilter_BuildingRepair:bIncrementByResourcesSpent": "If true will increment by the amount of resources spent to repair this building, if false will increment by 1",
    "FortObjectiveFilter_PlayerReceivedGameplayEvent:bIncrementByEventMagnitude": "If true will increment by the magnitude on the event payload instead of incrementing by 1",
    "FortObjectiveFilter_PawnEliminated:bIncrementByDistance": "If true will increment objectives by the distance between killer and killed player, if false will increment by 1",
    "FortObjectiveFilter_ScoredPlayerElimination:bIncrementByDistance": "If true will increment objectives by the distance between killer and killed player, if false will increment by 1",
    "FortObjectiveFilter_DamageDone:bIncrementByDamageAmount": "If true will increment progress by the amount of damage done to health",
    "FortObjectiveFilter_Build:bIncrementByResourcesSpent": "If true will increment the objective by the amount fo resources spent, if false will increment by 1",
    "FortObjectiveFilter_BuildingEdit:bIncrementByCurrentBuildingLevel": "If true will increment this objective by the building level, if false will increment by 1",
    "FortMovementComp_Character:bAvoidOvershootingDuringPathfollowing": "If true will never let an AI overshoot (move further than the next point in the path) during path following.",
    "FortMovementComp_Character:bIgnoreAccelerationWhenAvoidingOvershoot": "If true will never let an AI overshoot during path following, regardless of current acceleration.",
    "FortObjectiveFilter_PawnEliminated:bRequirePawnWasEliminatedByConvertedPawn": "If true will only allow progress for this objective if a tamed animal or hired npc made the killing blow,",
    "FortObjectiveFilter_Repair:bFullyRepaired": "If true will only allow progress if the actor was fully repaired from this event",
    "FortObjectiveFilter_PlayerDowned:bIsSaviorDBNO": "If true will only allow progress if the author downs a player that downed a friendly squad member",
    "FortObjectiveFilter_PlayerDowned:bIsAvengerDBNO": "If true will only allow progress if the author downs a player that finished a friendly squad member",
    "FortObjectiveFilter_PlayerDowned:bIsHeadShot": "If true will only allow progress if the downing blow is a head shot",
    "FortObjectiveFilter_HealingDone:bRequireHealingDoneToTeammate": "If true will only allow progress if the healing was done to a teammate",
    "FortObjectiveFilter_RevivePlayer:bRequireSquadMemberRevived": "If true will only allow progress if the player being revived is in the same squad as the author",
    "FortObjectiveFilter_HealingBase:bRequireHealedToFull": "If true will only allow progress if this event caused the healed actor to be at full health",
    "FortObjectiveFilter_VehicleTirePopped:bRequireAllTiresPopped": "If true will only allow progress if this event is being fired for the last remaining tire on the vehicle",
    "FortObjectiveFilter_VehiclePartDisabled:bRequireCriticalHit": "If true will only allow progress if this event was caused by a critical hit",
    "FortObjectiveFilter_AddToCollection:bRequireNewlyFoundItem": "If true will only allow progress if this is the first time this item has been added to the collection",
    "FortObjectiveFilter_GainShields:bRequireAuthorIsTheShieldGainSource": "If true will only give credit for self heals to shields",
    "FortObjectiveFilter_InitiatedNPCConversation:bRequireFirstConversationBetweenParticipants": "If true will only grant progress if it is the first time this match that the Author has talked to the npc.",
    "FortObjectiveFilter_PlacementUpdate:bRequirePlacementSetByAuthor": "If true will only grant progress if the author is the subject that died and caused the placement update.",
    "FortObjectiveFilter_GainShields:bRequireShieldGainedFromTeammate": "If true will only progress the objective if a teammate gave shields",
    "FortObjectiveFilter_DestroyBuilding:bRequireInVehicle": "If true will only progress the objective if it occurs while in a vehicle.\n       * Note: If this is false The Vehicle Filter will be ignored entirely during processing",
    "FortObjectiveFilter_GainShields:bRequireFullShields": "If true will only progress the objective if shields are filled to full from this event",
    "FortObjectiveFilterType_VehicleFilter:bRequireVehicleBoost": "If true will only progress the objective if the vehicle is currently boosting",
    "ObjectiveEntry_Gate:bUseCloseFilter": "If true will provide a filter to check against the incoming Gameplay Event to see if it should close the gate",
    "ObjectiveEntry_Gate:bUseOpenFilter": "If true will provide a filter to check against the incoming Gameplay Event to see if it should open the gate",
    "LivingWorldSpawnAroundPlayerConfiguration:bRegisterReservoir": "If true will register the pawn owning the point provider compnent as a density reservoir.",
    "AthenaNavMesh:bSuspendNavmeshWhenNoAIUsersAlive": "If true will suspend this Navmesh when there are no AIs alive that uses this Navmesh. (note: if the nav config optim 'bSuspendNavmeshWhenNoPossibleUsers' is enabled, this optimization won't work)",
    "FortMovementComp_AIChar:bForceUseOfOwnerRenderingTime": "If true won't use the mesh's rendering time in GetCharacterLastRenderTime but directly the owner.\nRequired to get the proper value when a pawn has multiple meshes rendering and the main one could be invisible while the other(s) are not.",
    "FortAIGoalInfo:bActorAlwaysPerceived": "If true, AI can path to this goal regardless of whether it can perceive it or not.  If false, AI must 'hunt' for the goal if it doesn't perceive it.",
    "AIHotSpot:bAllowSlotlessAssignment": "If true, AI will be assigned to hotspot even if no slots are available\nAI from waiting list can have dedicated behavior and will be assigned to slot as soon as it's ready",
    "AIHotSpot:bAllowClaimingMultipleSlots": "If true, AI won't be removed from previous slot after claiming another one",
    "FortAthenaLivingWorldActorSpawnDescription:bPreloadOnClient": "If true, Actor and spawner data that can be spawned from this actor description will be loaded on client at the beginning of the match. Otherwise they will be loaded when they are chosen to be spawned.",
    "FortTargetFilter:bExcludeAthenaVehicleOfInstigator": "If true, Athena vehicles that the instigator is in will be excluded",
    "FortTargetFilter:bExcludeAthenaVehicleFromObstructionChecks": "If true, Athena vehicles will be excluded from obstruction checks",
    "FortPlayerController:bForceAllowCursorMode": "If true, CanToggleCursorMode will always succeed, regardless of anything else; Cursor mode could still be denied externally by a lock",
    "FortCurieManager:bAllowCurieApplicationViaDamageFormulaTags": "If true, Curie element tags that show up in the damage formula execution will trigger Curie applications",
    "FortCurieManager:bCurieElementsBlockBuildingEdit": "If true, Curie elements \"attached\" to a building will block it from being edited",
    "FortCurieManager:bCurieElementsBlockBuildingRepair": "If true, Curie elements \"attached\" to a building will block it from being repaired",
    "FabricStepSequencerComponent:bMatchStepsToTimeSignature": "If true, CurrentSteps will adjust to be somewhere between MaxSteps and MaxSteps / 2\nto match a multiple of the current time signature as well as possible.",
    "FortTargetFilter:bExcludeDBNOPawns": "If true, DBNO pawns will be excluded",
    "PhaseInfo:bGarbageCollectAtPhaseStartOnClient": "If true, ForceGarbageCollection() on the client at the start of the phase",
    "PhaseInfo:bGarbageCollectAtPhaseStartOnServer": "If true, ForceGarbageCollection() on the server at the start of the phase",
    "AthenaCarPlayerSlot:bOffsetPlayerRelativeAttachLocation": "If true, GetPlayerRelativeAttachLocation() returns an offset location closer to the center of the capsule rather than the base.",
    "FortGameSessionDedicatedAthena:bDisableBackfillDuringGracefulShutdown": "If true, MMS backfill will be disabled if the server receives the signal to initiate graceful shutdown.",
    "FortPlayerPawn:bParachuteDeployFixedVerticalDistance": "If true, ParachuteDeployTraceForGroundDistance applies to the vertical distance of the trace, scaling vertically to compensate for velocity blend. Velocity blend close to 1 makes this impossible however.",
    "FortAthenaMapInfo:bShouldLlamaAvoidUnwalkableTerrain": "If true, SpawnLlamas() will not pick locations that are on unwalkable terrain",
    "FortAthenaMapInfo:bShouldSupplyDropAvoidUnwalkableTerrain": "If true, SpawnSupplyDropWithinCircle() will not pick a location that is on unwalkable terrain",
    "TagModificationRequest:bAddTag": "If true, Tags will be added. If false, Tags will be removed",
    "FortMinigame:bStableTeamCosmetics": "If true, TeamNames and TeamColors will be tied to the player buckets rather than the individual teams",
    "FortPawn:bUseLineTestForDamageZoneBoneDetection": "If true, a line test against the bone's location with a radius will be used for damage zone bone detection when the HitResult does not provide a bone.",
    "FortEncounterSettings:bRespawnRiftWhenRiftDead": "If true, a new rift will be spawned when one dies",
    "FortAthenaMutator_SynchronizedTeleport:bStillInvincibleAfterFailsafeTimer": "If true, a slow-loading player remains invincible after the failsafe timer, until HIS teleport is complete.\nIf false, a slow-loading player is NOT invincible after the failsafe timer.",
    "BuildingGameplayActor:bUseSimpleActorTouchSetupForAbilityBuckets": "If true, ability system buckets will handle touching actors via anything that causes NotifyActorBeginOverlap. If false,\nbuckets will only process touching actors via the component explicitly registered via RegisterComponentForTouchForAbilityDeliveryInfo.",
    "NyxGlassWeaponComponent_Swinging:bShouldAccelerateWhileAttached": "If true, acceleration calculations will occur during swing attachment.",
    "FortPlacementActorFinderEntry:bIgnoreCollisionCheck": "If true, actor will be spawned even when collision check fails",
    "BuildingSMActorClassData:bDeriveCurieIdentifierFromResourceType": "If true, actor will determine its participation and configuration for Curie based upon its specified resource type instead of a manually specified identifier",
    "FortPlacementActorFinderEntry:bSnapToGrid": "If true, actor will snap to the building grid.",
    "EQSActorSpawnerData:bSpawnInCenterOfBuildingGridCell": "If true, actors will be centered in the XY but not Z of the grid box they are spawned in.\n     Implemented in lieu of a grid EQS point generator that accepts vector data as context.\n     FortQueryGenerator_PointsOnBuildingGrid will accept AActor data as context and is recommended over this feature if context can be same.",
    "FortBaseWeaponStats:bShouldAddInitialAmmo": "If true, adds initial ammo",
    "FortAthenaMutator_SynchronizedTeleport:bAutoEquipPickAxe": "If true, after a player is teleported, the player will automatically equip their pick axe.",
    "FortPlayerController:bTargetingToggleable": "If true, aiming downsights with a weapon is a button tap, instead of a hold",
    "FortPlayerController:bTargetingToggleableWithTouch": "If true, aiming downsights with a weapon is a button tap, instead of a hold",
    "ValkyriePropertyPermissionList:bAllowListAllProperties": "If true, all of this Struct's and its child Structs' properties are AllowListed",
    "FortGameMode:bPlayersInvincible": "If true, all players are invulnerable",
    "SpecialEventInputHelperComponent:bAllowRepeatAnyKeyEvents": "If true, allow a repeating key to trigger AnyKeyPressedDelegate, if at least MinTimeBetweenRepeatAnyKeyEvents has passed",
    "BuildingLayoutRequirement:bAllowAnyPattern": "If true, allow any build pattern in the UID to satisfy the build requirement",
    "FortRangedWeaponStats:bCoolOverheatWhileCharging": "If true, allow cooldown (reduce heat) while charging (including when sitting at max charge)",
    "BuildingActor:bAllowHostileBlueprintInteraction": "If true, allow hostile players to do blueprint-based interactions",
    "BuildingLayoutRequirement:bAllowOccupantPatternEditing": "If true, allow occupying building actors to be edited",
    "FortWeaponComponent_Swinging:bAllowTargetPullablesWhileSwinging": "If true, allow pullable actors (pickups and reboot cards) to be targeted while swinging.",
    "FortWeapon:bAllowTargeting": "If true, allow targeting with alt fire",
    "FortGameState:bAllowPendingTeamChangeRequests": "If true, allow team change requests, if not, deny any incoming ones.",
    "FortAthenaMutator_CurieSettings:bIsGrassFireBoundsUpdateEnabled": "If true, allow the GrassFireBounds to be updated",
    "SettingsSaveContextBehaviorDefinition:bAllowRequestSave": "If true, allow this context to ask explicitly for a save.",
    "SpookyEventEmotePad:bAllowGrantingUnownedEmotes": "If true, allows granting of emotes that the player may not own.",
    "FortMaterialProgressBarSectionStyle:bGradientBar": "If true, allows setting of additional colors beyond color one to form a gradient",
    "FortAthenaMutator_Uranium:bShowFullSplineOnMapUI": "If true, always draw the full spline on the map UI.  If false, just draw the portion corresponding to the current checkpoint.",
    "FortSoundLibraryPlaybackSettings:bAttachedSound": "If true, an audio component is created and attached to the scene component specified in the USoundLibrarySimpleContext.",
    "FortAthenaMutator_Encounter:bUsesAnimationSharing": "If true, and AnimationSharingSetup is valid will create and setup an Animation Sharing system",
    "FortAthenaMutator_AdHocSquads:bEnsureOnOutsideTeamOrSquadChanged": "If true, and a player's team or squad is changed by anything besides the Ad Hoc Squads mutator the game will ensure to aid in debugging.",
    "SpecialEventCursorPawnComponent:bObeyInvertedPitchUserSetting": "If true, and the InvertedPitch user setting is true, patch up the input data to be inverted.\nIf false, we ignore the user setting, and patch up the input data to NOT be inverted.",
    "BuildingActor:bIsInvulnerable": "If true, any damage applied will cause zero damage - set by cheats",
    "FortAthenaMutator_SpecialEvent:bShouldClearFrontEndMapMarkers": "If true, any markers that players may have placed via the front end map will be removed as soon as they enter the event.",
    "FortAthenaMutator_AdHocSquads:bForceAllPlayersOntoIndividualTeams": "If true, any players that join the game as part of a squad will be removed from the squad and forced onto a team/squad where they are the only member.",
    "BuildingLayoutRequirement:bIgnoreResourceTypeRequirements": "If true, any resource type (i.e. wood, stone, metal) can be used.  If false, the actor must match the resource type specified by the LayoutRequirementSMActor.",
    "FortPhysicsBall:bEnableBackspinOnKick": "If true, apply backspin on kicks and launch until a non-kick collision occurs.",
    "FortWeaponComponent_Swinging:bMaintainCurrentTargetAfterSweeps": "If true, bFoundTarget will not be reset if both sweeps fail to find a valid target. This will happen when the best target location that\nthe sweeps find is on the same actor as the current target location, but further from the current aim direction.",
    "AthenaAIPerceptionStimuliSourceComponent:bIsConsideredAsThreateningObjectForBots": "If true, bots consider this actor as a threatening objects, generally used for grenades, rockets and other objects that bots need to avoid. If false, it will be considered as a normal actor that can potentially be a target",
    "BuildingActor:bObstructTrapTargeting": "If true, building will obstruct trap targeting raycast",
    "FortWeaponRanged:bUsePersistentBeam": "If true, built in beam particle system component will be used instead of spawning new emitters",
    "FortAthenaMutator_SpecialEvent:bForceGarbageCollectionAfterUnloadOnClient": "If true, call ForceGarbageCollection() on the client after unloading terrain maps",
    "FortAthenaMutator_SpecialEvent:bForceGarbageCollectionAfterUnloadOnServer": "If true, call ForceGarbageCollection() on the server after unloading terrain maps",
    "FortAthenaMutator_Knockback:bStorePlayerKnockbackData": "If true, calls to UFortGameplayAbility_KnockbackMutator::SaveKnockbackData will store player knockback data in AllPlayersKnockbackData.\nThe Knockback GA actually handles the knockback multiplier logic and calls SaveKnockbackData only to store this data on the mutator. It is only necessary to store it on the mutator\nto make it easier for other systems to reference it (eg UI).",
    "GameFeatureSmartObjectActivityInfo:bAllowChildOf": "If true, can be apply on child of TargetPawn",
    "PhaseDataLayerEntry:bIsRecursive": "If true, child layers will be affected when we change this layer's state",
    "MusicClipSyncConfig:ignoreMasterLoopsAndSeeks": "If true, clip will sync to master BUT will play straight through even if the master loops or seeks!",
    "FortNavigationVisibilityComponent:bCustomSkipCollision": "If true, collision changes are ignored when using Custom visibility response",
    "KeepItemContainer:bResetThisWhenKeepResets": "If true, container will be reset and all loot given by it - destroyed when ResetContainers is called.",
    "KeepItemContainer:bUseDefaultLootLogic": "If true, container will spawn loot using default loot rules.",
    "FortWeapon:bIsAimingConsumable": "If true, currently aiming with a throw-able/consumable item",
    "FortWeapon:bIsTargeting": "If true, currently targeting",
    "FortWeaponRanged:bUseImpactDecals": "If true, decals will be spawned for impacts",
    "FortPlayerController:bSprintByDefault": "If true, default movement always attempts to sprint",
    "DestroyActorsAndComponentsMutator_ActorDefinition:bDestroyActorOnClient": "If true, destroy all actors of SoftActorClass on all clients",
    "DestroyActorsAndComponentsMutator_ActorDefinition:bDestroyActorOnServer": "If true, destroy all actors of SoftActorClass on the server",
    "BuildingContainer:bDestroyContainerOnSearch": "If true, destroy container on search",
    "DestroyActorsAndComponentsMutator_ComponentDefinition:bDestroyOnClient": "If true, destroy the named component on all clients",
    "DestroyActorsAndComponentsMutator_ComponentDefinition:bDestroyOnServer": "If true, destroy the named component on the server",
    "AthenaSuperDingo:bClientUseInterpolationOnly": "If true, disable projectile simulation and just interpolate server position. This requires the visual component to be attached to the collision component simulated by the projectile.",
    "FortPickup:bClientUseInterpolationOnly": "If true, disable projectile simulation and just interpolate server position. This requires the visual component to be attached to the collision component simulated by the projectile.",
    "FortTheaterMapTile:bDisallowQuickplay": "If true, disallows the tile as a quickplay target, regardless of other settings.",
    "BuildingActor:bDisplayLevelInInfoWidget": "If true, display this building's level in the building info widget when possible",
    "FortAthenaMutator_SpecialEvent:bSkipPostGameScreens": "If true, do NOT show the post game screen sequence",
    "FortAthenaMutator_MatchCondition:bLocked": "If true, don't allow data to change",
    "FortAthenaMutator_MatchCondition:bLockedPermanently": "If true, don't allow data to change ever again",
    "FortWeapon:bForceOverrideGenerateOverlapEvents": "If true, don't perform any optimizations that would disable overlap events",
    "SpecialEventCursorMode:bAllowDebugCursorDrawing": "If true, draw a debug cursor if there is no widget OR if FortConsoleVariables::bSpecialEventDebugCursor is true.\nOnly draws in non-shipping builds.",
    "FortMinigameItemListComponent:bAllowItemTracking": "If true, each item will be registered with the pickup instigator registry for tracking and correlating extra data",
    "FortCreativePersistenceComponentBase:bUniqueForOwner": "If true, each owner will have its own version of the data even with the same SavePath",
    "LootPackageRow:bPreventDuplicateRowSelection": "If true, each row in the referenced package will be selected at-most once during this sub-roll",
    "LootTierDataRow:bPreventDuplicateRowSelection": "If true, each row in the referenced package will be selected at-most once during this sub-roll",
    "BuildingSMActor:bCurrentlyBeingEdited": "If true, edit mode is currently active on this building actor",
    "FortEmoteVolume:bUseEmoteCategory": "If true, emotes granted by this volume will show as a new category in the emote picker. Otherwise, the picker will attempt\nto place the emotes in the locker category",
    "FortWaterInteractionComponent:bAllowCachedDataInLargeBodies": "If true, enable caching of water data in large water bodies (oceans and lakes), for faster lookups. Assumes minimal horizontal movement when in those water bodies.",
    "FortEncounterSettings:bEnableRecreateRift": "If true, enable the encounter to requery for rift placement",
    "DBNOCustomSettings:bAllowInterrogation": "If true, enemy players will be able to interrogate downed players",
    "DBNOCustomSettings:bAllowInterrogationReveal": "If true, enemy players will be able to reveal the locations from the team members when interrogating",
    "FortAthenaMakeIntVariableStateTreeTask:bResetOnReselect": "If true, everytime the state this task is in is reselected it will reset the value (ex. a parent gets reselected while it was already selected).",
    "FortTargetFilter:bExcludeAthenaVehicleOccupiedBySource": "If true, excludes vehicle source occupies (probably always want this, but making it a variable to be sure)",
    "FortAthenaMutator_ExternalEmote:bAllowCategoryMerging": "If true, existing categories in UFortControllerComponent_ExternalEmote::ExternalEmotes will NOT be destroyed when calling AddExternalEmoteCategories().\nInstead, new emotes will be added into existing named categories, without duplicates.  Existing emotes will NOT be modified.\nIf the category doesn't exist in ExternalEmotes, it will still be added, as usual.",
    "FortPickupCreative:bUseOverrideDespawnTime": "If true, favor using our OverrideDespawnTime over times specified by the ItemEntry",
    "FortWeapon:bForceCameraTargetSource": "If true, force targeting through camera ignoring the movement rotation settings.",
    "FortWeaponRanged:bUseTargetingBasedLOD": "If true, forces LOD0 while ADS, and LOD1 while not ADS (for a locally viewed player)",
    "AircraftFlightConstructionInfo:bForceDropCenterToFirstSafeZone": "If true, forces the drop zone center to match the center of the first safe zone",
    "NyxGlassWeaponComponent_Swinging:bShouldInterpolateCurGasToGoal": "If true, gas force calculations will interpolate per frame.",
    "FortAIPawn:bGenerateMoveSoundInAllMovementModes": "If true, generate move sound in any movement modes as long as AI has velocity",
    "FortTimeOfDayManager:DisableGlobalWeatherEvents": "If true, global weather events will be disabled for this time of day",
    "AIHotSpot:bStartEnabled": "If true, hotspot will be enabled by default",
    "LoadoutVariantDef:bIgnoreRequireItemToBeCurrentInFrontEnd": "If true, ignore the item currency check in the front end (it can never be passed as we don't have any weapons; this should only be used for things that apply to the idle/default character like Tapas)",
    "FortGameModeAthena:bIgnoreCanSpectateAfterDeathToken": "If true, ignore the presence of the \"can spectate after death\" token on a player's profile and kick them as normal",
    "FortPawn:bSkipAnalogJump": "If true, ignores \"hold space bar\" to reach max jump height.",
    "FortAnimNode_TransformRollerTreads:bRequiresMovementComponentToEvaluateAsValid": "If true, includes the check that the treads are moving in the IsValidToEvaluate() function.",
    "FortMinigameItemListComponent:bAllowNewItemVariants": "If true, item templates for customizable items \"can\" be registered as unique item variants",
    "FortMinigameItemListComponent:bShouldRegisterNewItemVariants": "If true, item templates for customizable items \"should\" be registered as unique item variants rather than \"mods\" of existing ones",
    "FortAthenaMutator_InventoryOverride:bKeepUnchangedItemsOnReset": "If true, leaves in place items of the same type and count instead of removing and readding them when resetting inventories.",
    "FortControllerComponent_Interaction:bTapInteractEnabled": "If true, long interactions area a button tap, instead of a hold",
    "BuildingContainer:bForceSpawnLootOnDestruction": "If true, loot will be spawned when destroyed by any means",
    "BuildingContainer:bForceTossLootOnSpawn": "If true, loot will be tossed when spawned",
    "FortWorldSettings:bEditableTimeOfDayManager": "If true, makes the time of day manager editable (default: false). NOTE: THIS WON'T MAKE THE EDITS PERSIST ON DISK. THIS FLAG ITSELF IS NOT PERSISTED ON DISK.",
    "FortInGameMapManager:bUseExplorationBasedFogOfWar": "If true, map will be fogged on start of match and be revealed based on Player exploration",
    "FortThreatVisualsManager:bUseLocalPlayersOnlyForCloudMinimumHeight": "If true, minimum cloud height above players will use local players only.  If false, it will use ALL players.  (We may need to use all players to solve PvP issues with enemies in clouds.",
    "FortMissionAlertRuntimeData:bAllowQuickplay": "If true, mission alerts of this category will be available for matchmaking",
    "FortMissionAlertRuntimeData:bRespectTileRequirements": "If true, mission alerts will check the tile requirements.",
    "FortGameModeAthena:bLockMobilePlayersToTouchInSwitchPool": "If true, mobile players in the \"Switch\" matchmaking bucket will be locked to touch input",
    "FortGameStateZone:bSupportRuntimeShutdownOfGameplayModifiers": "If true, modifier-applied GEs and abilities can be removed at run-time at the expense of more memory usage",
    "BuildingContainer:bAlwaysShowContainer": "If true, never randomly hide the container, and can be empty but visible.",
    "NyxGlassWeaponComponent_Swinging:bUsingDirectRaycast": "If true, no attach points will be considered for targeting data updates.",
    "FortDynamicBuilder:bNoCollisionFail": "If true, no collision test will be performed when spawning any of the Actors from the building instructions",
    "FortTargetFilter:bExcludeAthenaVehicleOccupied": "If true, occupied Athena vehicles will be excluded",
    "KeepItemContainer:bShowChoiceUI": "If true, on interaction player will be given a choice of schematics from his Vault to craft for free. If false, items pulled from data table will be given.",
    "FortAthenaMutator_AdHocSquads:bVoiceChatSquaddingEnabled": "If true, only allow squadded players to use voice chat.",
    "HighlightObjectData:bOnlyHighlightOwningActor": "If true, only highlight the Owning Actor and skip all overlap check for optimization",
    "FortEventLevelNavigationActor:bHideNavWidgetIfCantOpen": "If true, only shows the navigation widget if CanBeOpened returns true",
    "FortPhysicsBall:bUpdateRotationOnlyIfRendered": "If true, only update rotation on RotatedComponent if recently rendered.",
    "AthenaCarPlayerSlot:bConstrainPawnToSeatTransform": "If true, pawn constrains transform to seat's transform.  Ignored for driver as this is always assumed to be true for driver's seat.",
    "FortTargetFilter:bExcludeFallingPawns": "If true, pawns in the air will be excluded",
    "FortAthenaMutator_SpawnInVehicle:bSpawnInTeammateVehicle": "If true, pawns will be seated in a teammate's vehicle if one of their teammates is driving",
    "FortAthenaMutator_SpawnInVehicle:bPlacePawnInVehicleOnLoad": "If true, pawns will be seated in a vehicle as soon as they are loaded",
    "FortWeaponRanged:bUseImpactFXForProjectileOverlaps": "If true, play impact FX spawned projectiles on overlaps. Requires bUseImpactFXForProjectiles.",
    "FortWeaponRanged:bUseImpactFXForProjectiles": "If true, play impact FX spawned projectiles.",
    "FortGameplayCueCameraLensEffectInfo:bAlwaysPlayOnTarget": "If true, play on the target actor even if they are outside the radius, it will play at full strength",
    "FortGameplayCueCameraShakeInfo:bAlwaysPlayOnTarget": "If true, play on the target actor even if they are outside the radius, it will play at full strength",
    "FortGameplayCueForceFeedbackInfo:bAlwaysPlayOnTarget": "If true, play on the target actor even if they are outside the radius, it will play at full strength",
    "FortSimpleWidgetAnimations:bIsEnabled": "If true, play the animation",
    "DaySequenceActor:bReplicatePlayback": "If true, playback of this sequence on the server will be synchronized across other clients",
    "FortAthenaMutator_Uranium:bOnRoundSetUpResetPlayerAbilities": "If true, player abilities are reset when a new round starts",
    "FortHeldObjectComponent:bAllowObjectToBeHeldInVehicle": "If true, player who enter vehicles will still hold the vehicles (invisibly) and when the player exits the vehicle they will be holding the object again.\n     If false, entering a vehicle drops the currently held object.",
    "BeginGroupTeleportParams:bBlockPickupsDuringTeleport": "If true, players are unable to receive pickups while teleporting",
    "DBNOCustomSettings:LastManStandingMode": "If true, players will be kept down even if all its teams is in DBNO",
    "FortAthenaLivingWorldVolume:bRemoveUsedPointPermenantly": "If true, points will be removed when used and never return to the available point pool.",
    "FortAthenaLivingWorldVolume:bRemoveUsedPoint": "If true, points will be removed when used and returned when the spawned actor is destroyed.",
    "FortAthenaPartyRiftPortal:bInErrorState": "If true, portal is in error state (problem with party creation/join process)",
    "FortAthenaMutator_InventoryOverride:bPreventAllDefaultItems": "If true, prevent ALL default items from being added to the inventory.  (Clears FortGameModeAthena_GetInventoryOverride's incoming OutInventoryItems.)",
    "FortAthenaMutator_InventoryOverride:bPreventPickaxe": "If true, prevent the pickaxe from being added to the inventory",
    "BuildingContainer:bSkipRollForDestruction": "If true, prevents the UpdateLootSpawning from querying the game state ShouldDestroyActor to see if this container should be destroyed.",
    "FortMantisWeaponComponent:bAllowPrimaryFireInputsWhileHolstered": "If true, primary fire inputs will be passed on to the FortMantisPawnComponent while the weapon is holstered in order to start techniques.\n              NOTE: This functionality will only work if the Granted.Weapon.Holstered.Notify.TriggerPressed tag applied to the weapon.",
    "FortDailyQuestData:bShouldGrantRestXP": "If true, quests in this group will grant rest XP if not completed",
    "FortDailyQuestData:bQuestsDontExpire": "If true, quests will only be replaced by back-fill and not daily expiration",
    "FortRangedWeaponStats:bPerBulletRecoilRecoveryWhileFiring": "If true, recoil recovery occurs while firing when using per-bullet recoil",
    "FortBaseWeaponStats:bAllowReloadInterrupt": "If true, reload interruption is allowed",
    "FortBaseWeaponStats:bReloadInterruptIsImmediate": "If true, reload interruption is immediate (i.e. no outro animation is played)",
    "TieredWaveSetData:bDeferTemporaryModifiers": "If true, removes the non-infinite modifiers from this wave then reapplies them the next wave this is false",
    "FortAthenaMutator_Knockback:bReplicatePlayerKnockbackData": "If true, replicates AllPlayersKnockbackData (eg for use with UI). Will be ignored if bStorePlayerKnockbackData is false.",
    "FortSimpleWidgetAnimation:bResetOnFinish": "If true, reset the render transform & alpha to their initial values",
    "FortAthenaMutator_InventoryOverride:bForceRemoveInventoryOnGetInventoryOverride": "If true, resets a players inventory before giving the player new inventory items.\n     This makes sure that a newly spawned player pawn will ONLY have the items this mutator gives them.",
    "SlotSelectionMethod:bDetermineSlotAutomatically": "If true, resolve slot index automatically for user based on last slot previewed on service provider",
    "FortEncounterSettings:bAvoidRepeatingRiftLocations": "If true, rifts will avoid spawning at the same location used by any rift created during this encounter",
    "FortWindImpulseCylinderDelta:bRippleOutward": "If true, ripple outward from the origin; if false, ripple INWARD from the maximum required radius.",
    "FortMinigameScoreRegistry:bPostToKillFeed": "If true, score udpates will advertised through the kill feed",
    "MinigameScoreTemplate:bAscending": "If true, scores will be sorted smaller to largest",
    "FortMantisWeaponComponent:bAllowSecondaryFireInputsWhileHolstered": "If true, secondary fire inputs will be passed on to the FortMantisPawnComponent while the weapon is holstered in order to start techniques.",
    "SettingsSaveContextBehaviorDefinition:bSendAnalytics": "If true, send an analytics event when this context asks for a save.",
    "FortPhysicsBall:bDetachRootChildrenOnServer": "If true, server will detach everything attached to the root component. Ensure that you don't need their positions and you don't need them to collide.",
    "FortMountedTurret:bImplementsOnSpecialPressed": "If true, set up input bindings to map 'MountedTurretSpecial' and 'GamepadMountedTurretSpecial' to BP overridable functions OnSpecialPressed & OnSpecialReleased.",
    "FortWeaponRanged:bUseShellsParticles": "If true, shell particles will be spawned when firing or reloading the weapon based on other settings",
    "FortAthenaMutator_Skyfire:bShowLootRoomFlavorText_Feel": "If true, show the feeling text for the flavor system",
    "FortAthenaMutator_Skyfire:bShowLootRoomFlavorText_Perf": "If true, show the performance text for the flavor system",
    "GunGameGunEntry:bShowHarvestingToolOnLadder": "If true, show the player's Harvesting Tool instead of the current tier weapon.",
    "FortAthenaMutator_AI_SignificanceBasedUpdate:bShouldUseSignificanceBasedMovementUpdatesOnClient": "If true, significance based movement updates will be enabled on the client for AI pawns, as long as there is at least one bucket.",
    "FortAthenaMutator_AI_SignificanceBasedUpdate:bShouldUseSignificanceBasedMovementUpdatesOnServer": "If true, significance based movement updates will be enabled on the server for AI pawns, as long as there is at least one bucket.",
    "AIHotSpot:bTrackOverlappingSlots": "If true, slots used by AI will block any overlapping slots (expensive for moving hotspot)",
    "AIHotSpot:bProjectSlotsOnNavmesh": "If true, slots will be projected to navmesh",
    "FortWeaponRanged:bUseBeamParticles": "If true, smoke beam particles will be used on non projectile weapon",
    "FortMissionPlacementActorItem:bSnapToGrid": "If true, snap the actor to the grid (from the found location, but before potentially adjusting placement for floors.",
    "FortPlayerSpawnPadPlacementData:bSnapToGrid": "If true, snap the actor to the grid (from the found location, but before potentially adjusting placement for floors.",
    "FortGameModeZone:bSpawnAllStuff": "If true, spawn all containers",
    "BuildingContainer:bForceHidePickupMinimapIndicator": "If true, spawn the pickup without the minimap indicator",
    "FortWeaponRanged:bUseTracers": "If true, spawns a tracer actor in addition to the beam particles when firing the weapon",
    "LevelSaveBaseComponent:bApplySaveToRootSpatialOwner": "If true, spawns the saved actors in the component's owner's outermost spatial interface.\nIf false, spawns the saved actors in the component's owner's own spatial interface.",
    "FortAthenaMutator_GamePhaseMessageData:bSendIfPhaseSkipped": "If true, still send our messages if our phase is skipped",
    "LevelInstanceGameplayVolume:bConvertStructuresToProps": "If true, structures will be converted to props on load",
    "FortMinigameItemListComponent:bAllowItemCustomization": "If true, supported items will expose options to be carried along through item templates",
    "FortMovementComp_Character:bSwingAttached": "If true, swing is attached",
    "FortMovementComp_Character:bSwingAttachedVehicle": "If true, swing is attached to a vehicle",
    "BuildingActor:bIsIndestructibleForTargetSelection": "If true, target selection modes can sometimes behave even more hacky! (pass to less detailed ones, check FFortAbilityTargetSelectionList)",
    "FortAthenaMutator_Uranium:bOnRoundEndSwitchTeamRoles": "If true, team roles (i.e. Pushing or Defending) will be changed each round.\n If false the pushers and defenders will NOT change during the course of the game",
    "FortAIAssignmentSettings:bGoalLocationsAlwaysKnown": "If true, the AI should always know the location of any goal in this assignment and be able to path to it directly.  If false, AI will have to 'hunt' for goals that are not perceived or in line-of-sight.",
    "FortWeaponRangedDualSwing:bAlwaysUseDefaultReticleColor": "If true, the DetermineReticleColor weapon trace will not be performed and ReticleDefaultColor will be used as the current reticle color.",
    "FortEncounterSettings:bRandomiseQueryRiftLocations": "If true, the EQS query results to find rift locations will be randomized",
    "BuildingFoundation:bRotateLandIconWorldOffset": "If true, the LandIconWorldOffset will be rotated based on the foundation's yaw.\nDefaulted to false as to not break previous foundation configurations, as this generally isn't needed.\nBut for dynamic foundations (like a boat that moves along a spline), we may need to update the offset based on the rotation.",
    "FortAthenaMutator_StreamDistanceOverride:bApplyScalability": "If true, the StreamDistanceScale will be multiplied by a ratio determined by the platform and view distance quality\nIf the stream distance should be constant across all platforms and view distance qualities, this can be disabled.",
    "BuildingActor:bSpawnIntoGridSublevel": "If true, the actor should be spawned into the grid sublevel corresponding to its spawn location.",
    "FortSnapOnSurfaceComponent:bUseImpactPoint": "If true, the actor will be snapped to the first hit location. Otherwise it will stay on the trace line where the sphere hits the collision.",
    "FortMissionPlacementActorItem:bSpawnActorAutomatically": "If true, the actor will be spawned at level creation time automatically and then the reference can be used by the mission.  Otherwise, the mission will have to spawn the actor by calling SpawnActors...TODO: Finish this instruction.",
    "FortSnapOnSurfaceComponent:bRandomizeYaw": "If true, the actor will have its yaw randomized after the snap.",
    "FortSnapOnSurfaceComponent:bOnlySnapIfBelowLandscape": "If true, the actor will only be snapped if its current position is under the ground.",
    "AthenaTraversePoint:bShouldTeleportToGround": "If true, the actor will teleport to the ground when set to Active",
    "FortAthenaLivingWorldEventDespawnCondition:bCanDespawnInTheStorm": "If true, the actors in the event will become candidate for despawn once they are in the storm. This overrides CanStartDespawningPhaseStep/SafeZonePhase but not the others tests.",
    "FortAthenaLivingWorldEventDespawnCondition:bCanDespawnWhenInCombatWithPlayer": "If true, the actors will be able to be despawned even when in combat with the player. Otherwise will be block from despawning if the NPC is aware of an hostile player.",
    "AimingCircleSettings:ForceMissEnabled": "If true, the aiming position will be clamped outside the target's capsule for the duration of the \"time between hits\" cooldown.",
    "DigestedAimingCircleSettings:bForceMissEnabled": "If true, the aiming position will be clamped outside the target's capsule for the duration of the \"time between hits\" cooldown.",
    "AimingCircleSettings:PreventHeadshots": "If true, the aiming position will be clamped outside the target's head radius to prevent headshots.",
    "DigestedAimingCircleSettings:bPreventHeadshots": "If true, the aiming position will be clamped outside the target's head radius to prevent headshots.",
    "FortBaseWeaponStats:bForceControl": "If true, the attack will always apply a stun/knockback effect",
    "BuildingActor:bDestroyFoliageWhenPlaced": "If true, the bounds of this actor will be used to remove foliage when it is placed",
    "BuildingSMActor:bUnderRepair": "If true, the building is currently under repair",
    "LivingWorldCalendarEventConditions:IsActiveWithoutSeasonalManager": "If true, the condition will be met if the seasonal manager is not present. Useful for testing in editor.",
    "FortAIDirector:bForceByPassNavMeshForAISpawning": "If true, the current Encounter Rift manager won't wait for the navmesh to be fully built before starting the EQS to spawn rift. Default is false. You can use the Cheat command \"Cheat ForceByPassNavMeshForAISpawning true\" to enable it.",
    "FortKatanaDashTargetingInfo:bWasDashDirectionAdjusted": "If true, the dash direction was adjusted because the player is aiming at a landscape or other walkable surface.",
    "AircraftFlightConstructionInfo:bUseCustomDropZone": "If true, the drop zone center and extents will be set to CustomDropZoneBox2D.",
    "FortAthenaLivingWorldEvent:bCanSpawnWithoutMatchingPlayerDistance": "If true, the event will try to find a point within min/max player distance but if it fails will spawn on another point that match the other test.",
    "FortAthenaMutator_Skyfire:bStartExitLootRoomTimerAfterChestOpened": "If true, the exit loot room timer will start for a player as soon as they open a chest in the loot room (rather than waiting the PreCountdownTime for that rarity).",
    "FortAthenaMutator_Skyfire:bStartExitLootRoomTimerAfterItemPickup": "If true, the exit loot room timer will start for a player as soon as they pickup an item in the loot room (rather than waiting the PreCountdownTime for that rarity).",
    "AircraftFlightInfo:bVisiblePostAthenaAircraftPhase": "If true, the flight path will be drawn on the map even after the Athena phases where aircrafts are active by default\nIf aircraft is spawned outside of the Athena aircraft phases, this will get updated automatically if the aircraft's Aircraft Index is linked to this flight path",
    "FortAthenaMutator_SurvivalObjectiveData:bEndMatchOnDestroy": "If true, the game will ends upon destroying this building actor and the surviving players win",
    "FortQueryGenerator_PerceivedActors_Settings:bIgnoreDBNOPawns": "If true, the generator should NOT return DBNO pawns as goal.",
    "FortQueryGenerator_PerceivedActors_Settings:bIgnoreSleepingAIs": "If true, the generator should NOT return recently sleeping AI as goal.",
    "FortEmoteVolume:bDisplayExclusive": "If true, the granted emote category will be the only category displayed by the emote picker",
    "FortTimeOfDayManager:bBaseHeightFogOnAltitude": "If true, the heigh fog will be based on the camera location Z",
    "BuildingActor:bHighlightDirty": "If true, the highlight should be updated.",
    "IndicatedActorData:bOnlyDisplayWhenStencilingIsDisabled": "If true, the indicator will only display when stenciling is disabled.\n     This is useful in situations where we prefer to only stencil the actor, but since stencils do not work on some platforms (i.e. Android) we need to show indicators when rendering on those devices.\n     NOTE:  Sound will not play if this value is set to true. In those cases sound should be handled by the corresponding stencil data.",
    "FortAthenaMutator_KillsFeedback:bShouldDisplayKillFeed": "If true, the kill feed widget will not be updated during a minigame",
    "KatanaTargetingComponent:bDebugDashTraces": "If true, the landscape and pawn obstruction traces will be debug drawn.",
    "FortGameStateZone:bAllowLayoutRequirementsFeature": "If true, the layout requirement feature is enabled; Otherwise it is not",
    "SpecialRelevancyHealthComponent:bSetLifespanOnLastRelevancyDeath": "If true, the lifespawn of the actor will be set to RelevancyDeathTimeLength on the last relevancy death",
    "FortAthenaLivingWorldEventDespawnCondition:bCanBeDespawned": "If true, the living world manager will check the following condition to check if the actor should be despawned.",
    "DAD_Island:bLowestToHighest": "If true, the metric results are sorted lowest to highest.",
    "EncounterMobSpawnData:bActiveOnStart": "If true, the mob  defined here will be enabled and spawning mobs by default. If false, the mob will await a manual activation",
    "FortPostGameScreenConfig:bShowSpectatingPlayerName": "If true, the name of player being spectated will show in the upper right corner",
    "FortWeapon:bShouldAlwaysDrawNativeMuzzleBlockedIndicator": "If true, the native \"Muzzle Blocked\" indicator should always be drawn, even if bShouldDrawNativeReticle is false.",
    "FortSnapOnSurfaceComponent:bRemoveCellHeightOffset": "If true, the navmesh cell height will be removed from the position so the actor is closer to the ground.",
    "FortSafeZoneIndicator:bPreviewDuringWarmup": "If true, the next storm circle will be displayed on the minimap during the warmup game phase",
    "KatanaTargetingComponent:bDebugPrimaryAttackTraces": "If true, the obstruction trace will be debug drawn.",
    "FortPlayerControllerOutpost:bOutpostRefundDialogPending": "If true, the outpost refund dialog is pending and needs to be displayed once loading is complete",
    "FortPlayerPawnAthenaMovementNoiseOverride:bShouldAlwaysGenerateNoise": "If true, the override will make the pawn generate noise even when it isn't moving.",
    "SpecialEventCursorPawnComponent:bAllowOnNonOwningClients": "If true, the owning client will start sending the cursor location to the server,\nwho will replicate it to all other clients, and the cursor will be shown on all clients (if bEnabled).",
    "FortWorldMultiItemXPComponent:bReplicateOwningMultiItemToOwningClient": "If true, the owning multi-item's selected item index and XP value / percentage will be replicated to the owning client whenever they change.\n    Replicating these values explicitly is necessary if we want access to them on the client because the owning mult-item only exists on the server.\n\n    NOTE: UFortWorldMultiItemXPComponent does NOT replicate by default. For these values to replicate properly to the owning\n    client, 'Component Replicates' MUST be set to true on the BP child class of this component.\n    NOTE: This value should not be changed at runtime - if it is, it will have no effect.",
    "FortPostGameScreenConfig:bAllowEmotesInStasis": "If true, the pawn can still emote while in stasis.",
    "BuildingProp_CaptureItemSpawner:bPickupWasClaimed": "If true, the pickup is being destroyed as a result of it being picked up",
    "FortPlayerController:bBuildFree": "If true, the player can build buildings for free",
    "FortPlayerController:bCraftFree": "If true, the player can craft anything for free",
    "FortPlayerController:bInfiniteAmmo": "If true, the player has infinite ammo",
    "FortPlayerController:bInfiniteConsumables": "If true, the player has infinite ammo",
    "FortPlayerController:bInfiniteDurability": "If true, the player has infinite durability for all inventory",
    "FortPlayerController:bInfiniteMagazine": "If true, the player has infinite magazine",
    "FortPlayerController:bNoCoolDown": "If true, the player has no cool down",
    "FortPlayerController:bCheatFly": "If true, the player is flying",
    "FortPlayerController:bCheatGhost": "If true, the player is ghosting",
    "FortControllerComponent_SmartBuild:bUseSmartBuild": "If true, the player is using SmartBuild building items",
    "FortPlayerController:bPickerEnabled": "If true, the player may access radial pickers",
    "FortPlayerController:bUsePickers": "If true, the player may access radial pickers",
    "FortPlayerControllerAthena:bUseTrapPicker": "If true, the player may access the radial trap picker",
    "DBNOCustomSettings:bAllowCarry": "If true, the players will be able to carry DBNO players",
    "DBNOCustomSettings:bAllowRevives": "If true, the players will be able to revive their DBNO teammates",
    "FortAthenaLivingWorldStaticPointProvider:bRandomizePointRotation": "If true, the point provider will return a randomized vertical rotation instead of the actor one.",
    "FortAthenaLivingWorldStaticPointProvider:bRandomizeStartPoint": "If true, the point provider will start feeding point from a random index instead of 0.",
    "CreativePowerBarComponent:bLoop": "If true, the power percentage will loop over the power curve until StopInterpolation is called\nIf false, the power percentage will change based on the power curve, then stop interpolating and remain at the last value in the curve",
    "FortAthenaLivingWorldPrefab:bShouldAlwaysSnapAboveLandscape": "If true, the prefab will always snap on the building grid above the landscape.",
    "FortAttachableProjectileComponent:bAttachAtImpactPoint": "If true, the projectile's location during attachment will be set to the point at which impact occured\nIf false, the projectile will attach at the same relative location it had when collision occured",
    "FortCreativeDiscoveryContentPanel:bLowestToHighest": "If true, the results will be reversed before the final selection process.",
    "WeaponSeatDefinition:bSendReplicatedTargetingEvent": "If true, the runtime UFortVehicleSeatWeaponComponent will send the OnSeatedPlayerTargetingChanged multicast event.",
    "FortPostGameScreenConfig:bIsContainerSafeZoneEnabled": "If true, the safe zone for the PostGameScreenContainer will be active in FortGameScreenRoot.  If false,\nsafe zones will need to be custom handled by the screen.",
    "BuildingGameplayActorSentry:bGoDormantAfterPassiveIdle": "If true, the sentry will enter dormant state when idle and there are no targets within range.\n     If false, the sentry will enter PassiveIdle state when idle and there are no targets within range.",
    "SpecialEventRewindComponent_PlayerPawn:bStartServerRecordingOnLastGroundFrame": "If true, the server recording will begin on the frame in which the pawn was most recently on the ground",
    "FortActorSpawner:bSpawnOnBeginPlay": "If true, the spawner will attempt to spawn on it's BeginPlay event.",
    "FortActorSpawner:bDestroyAfterSpawn": "If true, the spawner will be destroyed after attempting to spawn the actor.",
    "EditModeState:bCurrentlyValid": "If true, the state is currently a valid pattern",
    "FortAnimInput_PlayerAnimAsset:bOverrideDisableArmsHeadAdditive": "If true, the value for DisableArmsHeadAdditiveOverride will override the value from the DisableArmsHeadAdditive curve. This is useful for weapons that have a lot of arm over extension and need to globally tone down the head/arm additives.",
    "FortCreativeLinearMoverComponent:bAllDevicesTargetable": "If true, then all devices are targetable.",
    "FortMinigame:bAllTeamsMustMatchEndConditions": "If true, then all teams must match end conditions.",
    "FortMinigame:bAllowStandardEndGameConditions": "If true, then allow standard end game conditions.",
    "ValkyriePropertyPermissionList:bAllowListAllSubclassProperties": "If true, then child Structs have all their properties AllowListed",
    "FortWidgetComponent:bClampProjectedLocalPositionToViewport": "If true, then clamp the projected local position to the viewport.",
    "FortCreativeLinearMoverComponent:bPerformOverlapsOnTranslation": "If true, then enable overlap checks per tick when translating the target.",
    "FortCreativeLinearMoverComponent:bSweepOnTranslation": "If true, then enable sweep tests when translating the target.",
    "FortMinigame:bEndGameOnMatchPointWin": "If true, then end the game when a winner has won the match point.",
    "FortPlayerInputSettings:bEditModeUsableFromCombatMode": "If true, then going into edit mode when in combat mode is possible with this configuration",
    "ImGuiSettings:bUseSoftwareCursor": "If true, then in input mode ImGui will draw its own cursor in place of the hardware one.\nWhen disabled (default) there is a noticeable difference between cursor position seen by ImGui and position on\nthe screen. Enabling this option removes that effect but with lower frame-rates UI becomes quickly unusable.",
    "FortMinigame:bKeepItemsBetweenRounds": "If true, then items are kept between rounds.",
    "FortMinigame:bOnlyAllowRespawningIfPlayerStartPadsFound": "If true, then players can only respawn if there are relevant spawn pads found.",
    "FortCreativeLinearMoverComponent:bSkipRotationCompleteBehavior": "If true, then skip the complete behavior when detecting that the rotation has finished.",
    "FortCreativeLinearMoverComponent:bSkipTranslationCompleteBehavior": "If true, then skip the complete behavior when detecting that the translation has finished.",
    "FortMinigame:bLastTeamStandingWinsThisRound": "If true, then the last team standing wins this round.",
    "FortVehicleSeatComponent:bAlwaysAllowEntry": "If true, then the player will be able to enter any empty seat instead of being constrained to the two closest seats when they are full.",
    "FortCreativeLinearMoverComponent:bEnableMusicSequencerBehavior": "If true, then the prop mover acts like a music sequencer.",
    "FortMinigame:bShowCumulativeScoreboard": "If true, then the scoreboard is shown in a cumulative fashion.",
    "FortNonPlayerConversationParticipantComponent:bQuestsRequireProviderTagMatch": "If true, then this provider will only support quests matching its provider tag. If false, all are eligible.",
    "FortCreativeRoundSettings:bActiveDuringMinigame": "If true, then this round settings device is active.",
    "VehicleDamageablePart:bConsideredCriticalHit": "If true, then we treat this as a critcal hit when it takes damage.",
    "VehicleDamageablePartConfig:bConsideredCriticalHit": "If true, then we treat this as a critcal hit when it takes damage.",
    "FortMinigame:bReloadAndRestockWeaponsEachRound": "If true, then weapons are reloaded and restocked between rounds.",
    "FortWindImpulseCylinderRadial:bIsChangePending": "If true, there is a change pending for this impulse, but it's waiting for some other impulse to change (for now)",
    "FortWindImpulseCylinderRadial:bIsChanging": "If true, there should be a FFortWindImpulseCylinderDelta as the first element in the array in FortWindManager\nwhich is handling the change of wind related to this impulse (by handle).  Only ONE impulse should ever be\nchanging at a time (for perf reasons)!",
    "FortWeaponRanged:bEnableRecoilDelay": "If true, there will be a one frame delay after the weapon fires before the fire animation plays and recoil kicks in.\n              This ensures a frame where the weapon is aiming in the direction it's firing with weapon effects drawn. This is\n              especially important for low frame rate devices, where the muzzle flash will otherwise be drawn with the weapon up.",
    "FortAthenaPartyRiftPortal:bLocalPlayerInRange": "If true, there's at least one player within interaction range of the portal.",
    "FortPawnComponent_AIGroup:bCanBeGroupLeader": "If true, this AI can be choose as group leader but it is not guaranteed because another AI can ask to be leader too.",
    "BuildingGameplayActor:bIgnoreInstigatorCollision": "If true, this actor ignores instigator collision",
    "BuildingActor:bUseCentroidForBlockBuildingsCheck": "If true, this actor is only considered to be blocking something if it's centroid is within the collision area",
    "BuildingSMActor:bForciblyStructurallySupported": "If true, this actor will always act as if it's structurally supported by the ground, even if it's not",
    "BuildingSMActorClassData:bBlocksAttachmentPlacement": "If true, this actor will block any other actor from being attached to the same actor via the player",
    "BuildingItemWeaponUpgradeActor:bBlocksAttachmentPlacement": "If true, this actor will block any other actor from being attached to the same actor via the player.",
    "BuildingContainer:bAlwaysMaintainLoot": "If true, this actor will not depend upon chance about whether or not it should have loot.  It will always have loot and not be searched when the level is first loaded.  Intended for special cases such as Outpost, where the normal tiered looting rules do not necessarily apply.  It should only be used in blueprints in specific cases for Demeter.  (NOTE: This does NOT stop the quota system from preventing the actor from existing completely.",
    "SimpleDestructiblePropGroup:bAllowVisibility": "If true, this actor's visibility should work as normal in the editor.  If false, it should prevent visibility even if unhidden.\nThis allows us to prevent showing these actors even when they are accidentally unhidden.",
    "BuildingProp_BountyBoard:bAllowGrantMultipleBountiesToSingleSquad": "If true, this bounty board can grant the same squad multiple bounties over the course of a match, as long as they don't have an active bounty.",
    "BuildingActor:bAllowUpgradeRegardlessOfPlayerBuildLevel": "If true, this building can be upgraded even if the player lacks the sufficient build level attribute to technically upgrade it",
    "FortMovementComp_Character:bIsRidden": "If true, this character is currently being ridden.",
    "RidableControlRuntimeData:bIsRidingSprinting": "If true, this character is currently sprinting while riding.",
    "ValetRaisinComponent:bShouldManageOwnAudio": "If true, this component will spawn and manage it's own audio rather than expecting an external class to do so. No delegates will be broadcast.",
    "CreativeEditOnlyMeshComponent:bUseStaticRotation": "If true, this component will use an absolute rotation of (0, 0, 0).",
    "FortPlayerInputSettings:bOnlyShowNextPrevBuildingSlotKeybinds": "If true, this config has next/previous building slots, and we shouldn't show keybinds over the slots",
    "FortPlayerInputSettings:bEnabledForAthena": "If true, this config is selectable in the settings menu for Athena.",
    "FortPlayerInputSettings:bEnabledForCampaign": "If true, this config is selectable in the settings menu for Campaign.",
    "FortAbilityCost:bOnlyApplyCostOnHit": "If true, this cost should only be applied if this ability hits successfully (such as melee weapon durability)",
    "BuildingActor:bIgnoreCollisionWithCriticalActors": "If true, this denotes that the building allows special placement rules for objects such as bomb cart tracks (e.g. quest props, outlander fragments)",
    "FortEncounterSettings:bTrackCombatParticipation": "If true, this encounter will track each time combat 'participation' occurs, which is when a new enemy goal is selected or damage or death occurs to any pawn spawned by the encounter.  It will send a blueprint event that can be regeistered for and handled.",
    "FortCreativeDiscoverySplicedEntry:bPushDownExistingEntry": "If true, this entry, when visible, pushes down the existing entry instead of replacing it.",
    "FortGameMode:bIsAutomatedTest": "If true, this game mode is being used for automated testing.",
    "FortMiniMapData:bDisplayIconEvenOnFogOfWar": "If true, this icon will display (if all other visibility requirements are met) even if it's on an area of the map covered by fog-of-war.  If false, it will only show where the fog-of-war has been cleared (default behavior).",
    "FortMiniMapData:bShowVerticalOffset": "If true, this icon will have Up/Down arrows added to it to show whether it is above or below the player.",
    "FortMiniMapData:bShowFarOffIndicator": "If true, this icon will have an arrow added to it to show whether it is beyond the minimap boundary",
    "FortHealthBarComponent:bShowClampToScreenArrow": "If true, this indicator will add an arrow when it clamps to the edges of the screen",
    "FortHealthBarComponent:bClampToScreen": "If true, this indicator will always be on the screen, and won't be clipped when it goes off screen",
    "EFortItemEntryState.DisallowSwapOnNextPickUpAttempt": "If true, this item should not be allowed to be swapped via overflow on the next add to Inventory attempt. Either added to free slot, or dropped.",
    "EFortItemEntryState.SaveMagazineAmmo": "If true, this item should save Loaded Ammo in weapons",
    "EFortItemEntryState.Loaded": "If true, this item was Loaded from a save device",
    "EFortItemEntryState.DroppedFromQuestSource": "If true, this item was dropped from a quest source",
    "EFortItemEntryState.Tossed": "If true, this item was tossed",
    "CreativeEditOnlyMeshComponent:bShowInPreview": "If true, this mesh will also be displayed when previewing the owner in edit mode (i.e. when placing it with the move tool).",
    "FortMission:bNeedsEnemyKilledEventForAllPawns": "If true, this mission needst he OnPawnKilled event fired for all pawns, not just those that match its GUID",
    "FortAthenaMutator_StreamDistanceOverride:bForceOverride": "If true, this mutator will force the override changes to remain while the mutator is active.\nIf an outside source changes a cvar value, we will save the value it changed it to and reapply our override.",
    "FortAthenaMutator_StreamDistanceOverride:bApplyAfterWarmup": "If true, this mutator will override the stream in distance after the warmup phase has ended, and disable it during EndPlay\nIf false the ClientSetOverrideSettingsActive will have to be called manually, but it will still be disabled during EndPlay.",
    "BuildingActor:bDestroyOnPlayerBuildingPlacement": "If true, this object will be destroyed when a player places a building. Setting this to true implies bDoNotBlockBuildings is true as well.",
    "QuestCompletionPath:bPathCommitment": "If true, this omits progression on all other segments in a completion path when one segment has been completed.",
    "QuestCompletionSegment:bSegmentCommitment": "If true, this omits progression on all other segments in this stage when progression has been made on this segment.",
    "FortGameplayCueParticleInfo:bCastShadow": "If true, this particle system will cast a shadow",
    "FortPawn:bCanCapsuleBeUsedForTargeting": "If true, this pawn's capsule can be used for targeting it. If false, never use the capsule.",
    "FortProjectileMovementComponent:bUseSeparateGravityScaleInWater": "If true, this projectile will use a separate gravity scale when it's in water (GravityScaleInWater). This ensures that\n    buoyancy is properly applied to a projectile that has a ProjectileGravityScale of 0 while it is in the water.",
    "FortNPCVerbReactionTableRow:bOncePerWorld": "If true, this reaction it only ever meant to fire once per world/match/game.",
    "FortPostGameScreenConfig:bPutPawnInStasis": "If true, this screen wants the player pawn to be put in stasis",
    "QuickBarSlotData:bStaticSlot": "If true, this slot is static and cannot be modified by the UI",
    "FortCreativeTag:bNonCosmetic": "If true, this tag is purely for utility purposes and shouldn't be exposed as a filter category",
    "FortTheaterTileEditorData:bCanBeMissionAlert": "If true, this tile is allowed to be a mission alert tile",
    "FortTheaterTileEditorData:bDisallowQuickplay": "If true, this tile will not be considered for quickplay, regardless of other settings",
    "FortTrack:bUseFloorMesh": "If true, this track will have a floor mesh; if false, it will not!",
    "EncounterGameplayVolume:bShouldPersist": "If true, this volume will be saved onto the level save record",
    "FortWeapon:bShouldDrawNativeReticle": "If true, this weapon should draw the native reticle. If false, the reticle will be drawn from UMG",
    "FortWeapon:bShouldForceCheckCollisions": "If true, this weapon should perform a collision check in it's trace function (for determining focused pawn/vehicle/building) regardless of other limitations",
    "FortWeapon:bTraceThroughWorld": "If true, this weapon traces will pass through multiple walls NOTE: This does NOT work with\n      bTraceThroughPawns and is designed for any weapon that you want to shoot through mutliple world objects with.",
    "FortWeaponRanged:bMaintainAimLocationDuringTargeting": "If true, this weapon will adjust camera location to maintain aim location when transitioning between non-targeting and targeting",
    "FortWeapon:bUseProjectileTrace": "If true, this weapon will use FCC_Object_Projectile in weapon traces",
    "FortWeaponRanged:bUseScopeTargeting": "If true, this weapon's downsights targeting uses a first-person scope",
    "FortWeaponRanged:bUseFirstPersonTargeting": "If true, this weapon's downsights targeting uses a first-person viewmodel, non-scoped weapons",
    "FortWeapon:bTraceThroughPawns": "If true, this weapon's traces will pass through multiple pawns NOTE: This does NOT work with\n      bTraceThroughWorld and is designed for any weapon that you want to shoot through multiple pawns with",
    "FortAnimInput_PlayerAnimAsset:bForceKneeSliding": "If true, this will force the sliding to knee sliding, mandatory for some weapons",
    "MissionTimeDisplayData:bHideTimer": "If true, this will hide the timer under these circumstances",
    "FortWaterInteractionComponent:bTickComponentForces": "If true, this will tick and update the ProjectileMovementComponent found on the actor.\nIf false, you must call UpdateForces() to get the water forces and then apply them yourself to the Actor/ProjectileMovementComponent.\nNOTE: If this has been disabled, someone probably is already using the data in native code.",
    "FortControllerComponent_Interaction:TouchInteractMode": "If true, touch will use in world traces to interact with objects.",
    "FortMinigameObjectiveComponent:bPurgeTrackingHistoryOnRemoval": "If true, tracking history for the objective will be purged on EndPlay",
    "FortAthenaVehicle:bCanPassengerPawnsTakeDamage": "If true, traps triggered by this vehicle can potentially damage its passengers",
    "MarkerUtilitiesCompassPlacementIcon:bMinimumTeamScoreToShowIsPercent": "If true, treat MinimumTeamScoreToShow as a percentage of the goal score.",
    "MarkerUtilitiesMapPlacementIcon:bMinimumTeamScoreToShowIsPercent": "If true, treat MinimumTeamScoreToShow as a percentage of the goal score.",
    "BuildingProp:bIsBuildingVolume": "If true, treat this prop as a building volume.  Building inside is ok, building outside is not, similar to how AFortVolume works in Creative.",
    "FortMovementComp_Character:bSlideCommandBuffered": "If true, try sliding if requested when landing.",
    "SpecialEventCursorMode:bAllowTrace": "If true, try to perform a trace each frame to determine what we're aiming at in the world.\nIf false, prevent traces, as an optimization.",
    "FortMovementComp_Character:bWantsToSkate": "If true, try to start skating on next update. If false, try to stop skating on next update.",
    "FortMovementComp_Character:bWantsToSlide": "If true, try to start sliding (or keep sliding) on next update. If false, try to stop sliding on next update.",
    "FortMovementComp_Character:bWantsToSwing": "If true, try to start swinging on next update. If false, try to stop swinging on next update.",
    "FortAthenaVehicle:bUseCustomDepthStencilValue": "If true, turn on UseCustomDepthStencilValue on the actor's skeletal mesh and other visual components, including\nany applied mod visuals.  If false, no stencil value will be applied.",
    "FortTargetFilter:bExcludeAthenaVehicleUnoccupied": "If true, unoccupied Athena vehicles will be excluded",
    "FortGameStateZone:bUseMaxBackpackSize": "If true, use AFortInventory::MAX_INVENTORY_ITEMS for the backpack size.  If false, use the default behavior.",
    "FortCreativeBudgetTracker:bUseMapProjectionForBounds": "If true, use MapLocationToWorldLocation to build the budget grid bounds instead of using the Volume's bounds",
    "SafeZoneRoute:bUsePOIStartLocation": "If true, use the POI's location for the start point.  If false, use StartLocation.",
    "BuildingActor:bAlwaysUseNetCullDistanceSquaredForRelevancy": "If true, use the class default value of NetCullDistanceSquared rather than the computed rendering CullDistance for network relevancy.",
    "SafeZoneRoute:bUsePOINameOverride": "If true, use the custom POI name instead of name from the tag.",
    "FortAthenaMutator_Payback:bEffectLastsUntilRespawn": "If true, use the victim's respawn for the payback effect duration.  If false, use DefaultEffectDuration.",
    "FortGameplayCueAudioInfo:bOverrideAttachment": "If true, use this attachment info and not the general cue one",
    "FortGameplayCueDecalInfo:bOverrideAttachment": "If true, use this attachment info and not the general cue one",
    "FortGameplayCueParticleInfo:bOverrideAttachment": "If true, use this attachment info and not the general cue one",
    "FortGameplayCueAudioInfo:bOverrideCondition": "If true, use this spawn condition and not the general cue one",
    "FortGameplayCueDecalInfo:bOverrideCondition": "If true, use this spawn condition and not the general cue one",
    "FortGameplayCueParticleInfo:bOverrideCondition": "If true, use this spawn condition and not the general cue one",
    "FortTargetFilter:bExcludeWaterBodies": "If true, water bodies (new water) will be excluded",
    "FortTargetFilter:bExcludeWaterVolumes": "If true, water volumes (legacy water) will be excluded",
    "FortAthenaMutator_SpecialEvent:bAllowSquadListLocalPlayerInSplitscreen": "If true, we allow the UAthenaSquadListBase's LocalPlayerInfo widget to be visible even when splitscreen is enabled",
    "FortGameplayCueParticleInfo:bUseComponentPool": "If true, we are allowed to pool the component if pooling is enabled.",
    "FortPawnComponent_NightNight:bAutoPossess": "If true, we call AController::Possess() for our pawn as soon as we can acquire the front end controller.\nIf false, some other system will have to call Possess(), if and when necessary.",
    "PhaseInfo:bSetRelevancyMode": "If true, we call AFortAthenaMutator_SpecialRelevancy::SetSpecialRelevancyMode(RelevancyMode)\nat the start of the phase",
    "SpecialEventRewindComponent:bAutoStartRecording": "If true, we call StartRecording() at the end of BeginPlay()",
    "FortGameMode:bTheaterDataIsReady": "If true, we have downloaded all required theater data",
    "FortAthenaMutator_SpecialEvent:bEnforceInfiniteSafeZonePhase": "If true, we jump to an infinite safe zone phase at the end of warm up",
    "CraftingObjectServerStateData:bNextResultsHandledExternally": "If true, we just throw away the results but still consume the ingredients",
    "FortAbilityTagRelationship:bExactAbilityTagMatchOnly": "If true, we only utilize this struct if our AbilityTag is an EXACT match to the tag being searched for.\nIf false, we utilize this struct if our AbilityTag, or any of its parent tags, match the tag being searched for.",
    "SpecialEventCursorWeaponComponent:bAlignFXToCursor": "If true, we should override the weapon's impact and beam fx to use a location centered on the cursor,\nrather than an off-center location such as the HitResult's ImpactPoint (where the sweep hit)",
    "FortAthenaVehicle:bAllowAutoCamera": "If true, we try auto centering the camera.",
    "FortAthenaMutator_SpecialEventTODM:bDebug": "If true, we will add debug information in GetOnScreenMessages()",
    "FortAthenaPatrolPath:bUseRandomStartupPatrolPoint": "If true, we will assign a random patrol point index to start the patrolling, if false we will use the first patrol point",
    "FortDailyQuestData:bShouldBackfill": "If true, we will backfill with a new quest whenever a quest is completed",
    "FortPawnComponent_SpeechBubble:CheckGroupMembersToSpeak": "If true, we will check if another group member (if we are in a Group) is already speaking before start to speak, to avoid speak in same time",
    "GameplayVolume:bDestroyPlayspaceOnEndPlay": "If true, we will destroy the Playspace when EndPlay is called",
    "FortControllerComponent_SpecialEvent:bForceBuildModeInputComponentToNotConsumeInputs": "If true, we will set bConsumeInput = false for ALL action bindings of AFortPlayerController::BuildPreviewModeInputComponent.\nThis property was created to address the issue where build mode inputs could prevent the secondary fire input (if bound to the same key),\nwhich is needed for the camera focus system.",
    "FortPlayerController:bTryPickupSwap": "If true, we'll swap our current weapon with an incoming pickup, even if we have empty quickbar slots",
    "FortWeaponComponent_Swinging:bAllowTargetRebootCards": "If true, we're allowed to target reboot cards to pull to the player.",
    "FortGameMode:bTravelInitiated": "If true, we're in the middle of a world transition. May still be waiting for cloud save to finish",
    "FortWeaponRanged:bAlwaysAimFromMuzzle": "If true, weapon targeting source will always use WeaponTowardsFocus (muzzle transform)",
    "MountedWeaponInfo:bIgnoreHostVehicleInWeaponTrace": "If true, weapon traces will not detect the host vehicle. (ie this will prevent self harm from mounted weapon)",
    "FortAthenaMutator_CurieSettings:bIsCurieEnabledOutsideOfGame": "If true, weapons with fire damage can set structures on fire outside of game. Requires bIsCurieEnabled to be true.",
    "FortAthenaMutator_CurieSettings:bIsCurieEnabled": "If true, weapons with fire damage can set structures on fire. Will override bIsCurieEnabledOutsideOfGame setting.",
    "FortAthenaMutator_AdHocSquads:bSquadingUpMergesSquads": "If true, when 2 players are squading up the system will attempt to merge both player's squads\n     NOT compatible with bFollowingPlayerAutomaticallyLeavesCurrentSquadWhenSquadingUp",
    "FortAthenaMutator_AdHocSquads:bFollowingPlayerAutomaticallyLeavesCurrentSquadWhenSquadingUp": "If true, when 2 players squad up if the follower player was already in a squad they leave that squad before joining the instigator player (if there is room on the instigator's squad).\n     If false, if both players are on squads, squading up will fail, if only 1 player is on a squad (instigator or follower) the player NOT on a squad will join the player who is already on a squad.\n     (See SquadUpPlayers() for definition of instigator and follwer player.)\n     NOT compatible with bSquadingUpMergesSquads",
    "BuildingContainer:bGivePickupsDirectlyToPlayer": "If true, when loot is spawned it will fly directly to the player who opened the container.\n     Once the pickup reaches the player it will enter the players inventory (if there is room, if not the items will drop around the player.)",
    "FortProjectileMoveComp_Slider:bWhenLimitingVelocityFavorZ": "If true, when setting velocity, XY velocity will be clamped before Z velocity is.\n     By clamping XY before Z we ensure that the projectile obeys gravity before any lateral movement which is handy for self-propelled projectiles that we do NOT want to appear floaty.",
    "BuildingActor:bUpgradeUsesSameClass": "If true, when this building upgrades, it uses the exact same class",
    "IndicatedActorInfoEntry:bRefreshExistingWhenAdded": "If true, when this entry is added to the indicated actors list it should refresh any other existing entries from the list for that actor.",
    "StenciledActorInfoEntry:bRefreshExistingWhenAdded": "If true, when this entry is added to the indicated actors list it should refresh any other existing entries from the list for that actor.",
    "IndicatedActorInfoEntry:bReplaceExistingWhenAdded": "If true, when this entry is added to the indicated actors list it should remove any other existing entries from the list for that actor.",
    "StenciledActorInfoEntry:bReplaceExistingWhenAdded": "If true, when this entry is added to the indicated actors list it should remove any other existing entries from the list for that actor.",
    "SettingsHUDVisibilityAndText:bPlatformConstraintPC": "If true, will add PC as a platform visibility constraint",
    "QuestProductData:bAlwaysActive": "If true, will always be active regardless of current playlist",
    "FortGameplayCueAttachInfo:bIgnoreLocation": "If true, will always spawn at a specific Override Location instead of using attachment. If true it will also set World/Absolute on the Location parameter so changes to parent will be ignored after attachment",
    "FortGameplayCueAttachInfo:bIgnoreRotation": "If true, will always spawn at specific Override Rotation instead of using attachment or normals. If true it will also set World/Absolute on the Scale parameter so changes to parent will be ignored after attachment",
    "FortGameplayCueAttachInfo:bIgnoreScale": "If true, will always spawn at specific Override Scale instead of using attachment. If true it will also set World/Absolute on the Rotate parameter so changes to parent will be ignored after attachment",
    "Playspace:bAutoStartMatchOnServerStart": "If true, will automatically call StartMatch when OnServerMatchHasStarted is triggered\nNOTE: OnServerMatchHasStarted will only be called if this Playspace was created before the server\n  has transitioned to \"InProgress\" and has called HandleMatchHasStarted()",
    "PlayspaceLogic:bAutoStartMatchOnServerStart": "If true, will automatically call StartMatch when OnServerMatchHasStarted is triggered\nNOTE: OnServerMatchHasStarted will only be called if this PlayspaceLogic was created before the server\n  has transitioned to \"InProgress\" and has called HandleMatchHasStarted()",
    "FortPhysicsBall:bStopLiftWhenFalling": "If true, will disable lift when velocity points down.",
    "FortMapIconDefinition:bOverrideMaxViewDistanceForInWorldIndicator": "If true, will exposes InWorldIndicatorMaxViewDistance for override",
    "FortMapIconDefinition:bAllowMinViewDistanceForInWorldIndicator": "If true, will exposes InWorldIndicatorMinViewDistance",
    "FortNearbyActorsPerceptionConfiguration:bRequireLoS": "If true, will filter out actors that do not have a valid LoS. DO NOT USE IF NOT STRICTLY NEEDED (has big performance cost!)",
    "FortDeliveryInfoRequirementsFilter:bConsiderTeam": "If true, will only apply to targets matching the ApplicableTeam",
    "FortDeliveryInfoRequirementsFilter:bConsiderTeamAffiliationToInstigator": "If true, will only apply to targets matching the ApplicableTeamAffiliation with the source actor",
    "LockedQuestConfigData:bOnlyShowWithNoAvailableContent": "If true, will only generate locked quest widget(s) when all other available content from this source is unavailable or completed.",
    "CollectorUnitInfo:bUseDefinedOutputItem": "If true, will only use the defined output item, setting this to false we will wipe out what is defined and use a loot table to fill OutputItem",
    "BGAConsumableSpawner:bAlignSpawnedActorsToSurface": "If true, will perform additional line checks necessary to",
    "LockedQuestConfigData:bShowRewards": "If true, will present rewards from this source directly on the locked quest widget.",
    "DeployableBaseCore:bRegisterAsGlobalGameplayEventListener": "If true, will register to globally listen to all gameplay events",
    "FortGameSessionDedicated:bEnableWaitingForMatchAssignmentTimeout": "If true, will restart the server if it spends too long waiting to be assigned a match",
    "BuildingProp:bUseDamageSet": "If true, will spawn a damage set for this actor, should only be true for things that are intended to be Curie element sources",
    "FortGameplayCueNotify_Looping:PoolingMethod": "If true, will spawn at a default rotation. If false will use the rotation of the parent actor or socket",
    "FortGameplayCueNotify_Looping:bIgnoreRotation": "If true, will spawn at a default rotation. If false will use the rotation of the parent actor or socket",
    "FortGameplayCueAttachInfo:bUseUnsmoothedNetworkPosition": "If true, will spawn at the \"real\" server location, not the smoothed mesh location",
    "FortGameplayCueNotify_Looping:bUseWeapon": "If true, will try to attach to a weapon, will use attach point on the weapon",
    "FortGameplayCueAttachInfo:bAttachToWeapon": "If true, will try to attach to the pawn's weapon instead of their character mesh",
    "FortGameplayCueAttachInfo:bAttachToHitResult": "If true, will try to attach to the target of a hit result. If false it will use the hit result's location if set but will attach to passed in actor",
    "FortWeaponRangedMountedCannon:bUseLegacyLaunchLogic": "If true, will try to launch thru AthenaSKPushCannon. If false, will try to launch thru this class's OnPreLaunchPawn and OnLaunchPawn events.",
    "FortGameplayCueNotify_Looping:bUseHitResult": "If true, will try to use the hit result to spawn it. If not it will spawn directly on the actor that runs the cue",
    "FortSkyTube:bExemptFromShutdown": "If true, won't be shutdown during late game skytube shutdowns.",
    "FortSkyTubeAnchor:bExemptFromShutdown": "If true, won't be shutdown during late game skytube shutdowns.",
    "FortReplayMovableSpotLight:bGroupMoveLocked": "If true, won't move when the rest of the lights get moved as a group",
    "FortGameMode:bWorldIsReady": "If true, world is ready to start match",
    "FortGameplayEffectDeliveryActor:bExplosionTransformIgnoresRotation": "If true, zero out the rotation of our explosion transform",
    "FortMissionTimerComponent:bShowTimeElapsed": "If true: shows time elapsed since the timer started\n      if false: shows how much time is remaining before the timer expires.",
    "FortAthenaMutator_ContextTutorial:bEnableHighlight": "If turned off, no highlight will show",
    "FortAthenaMutator_ContextTutorial:bEnableWorldMarker": "If turned off, no world marker will show",
    "FortAthenaMutator_ContextTutorial:bEnableTutorials": "If turned off, tutorials are completely deactivated",
    "FortTimeOfDayManager:bUseStormValues": "If unchecked, the directional light StormLightColor, StormMaterialInstance for the sky, and Storm Fog Values will not be used when the storm is active..  If checked, they will change with the storm based on StormStrength (which ramps up fro 0-0.5 currently as the storm activates).  Note that not all StormFogValues are used (just five of them).",
    "FortGlobalMission:bEnabled": "If unchecked, this mission is disabled and will be ignored completely.",
    "CollisionReactionConfiguration:ForcedLaunchDirections": "If used, will force the jump direction calculated by this component to one of the provided directions, picking the closest one to what the normal launch direction would have been.",
    "FortAthenaMutator_Bagel:ShouldRespawnDeadPlayers": "If using OnlyRespawnAtNewPhase mechanic, check if players are respawned at this safezone index",
    "FortAthenaMutator_Mash:ShouldRespawnDeadPlayers": "If using OnlyRespawnAtNewPhase mechanic, check if players are respawned at this safezone index",
    "FortGameStateComponent_GroupQuests:SubsetIDToUpdatedQuestObjectives": "If using bEnableParticipantTargetedReplication, we can store non-replicated objective data much more efficiently..\nWe currently keep the wrapper array type, so that all the callbacks slot in seamlessly, but may change this later.",
    "FortGameStateComponent_GroupQuests:SubsetIDToGrantedQuests": "If using bEnableParticipantTargetedReplication, we can store non-replicated quest data much more efficiently..\nWe currently keep the wrapper array type, so that all the callbacks slot in seamlessly, but may change this later.",
    "FortInGameMapManager:bResetMapDataOnTeamSwitch": "If using exploration based fog of war, when false a Player who switches teams will keep their previous exploration data",
    "FortInGameMapManager:bShareMapWithTeam": "If using exploration based fog of war, when true the Players on the same team will see the same revealed map based on all their explorations",
    "BuildingActorClassData:InteractionOverrideWidget": "If valid this widget will be used instead of the default interaction widget when a first interaction is attempted with this building actor.",
    "BuildingActorClassData:SecondInteractionOverrideWidget": "If valid this widget will be used instead of the default interaction widget when a second interaction is attempted with this building actor.",
    "FortWeaponPickaxeAthena:GenericImpactSound": "If valid, played on every impact",
    "FortWeaponPickaxeDualWieldAthena:OffhandGenericImpactSound": "If valid, played on every impact",
    "FortCinematicCameraActor:FocusedActor": "If valid, the pawn will end up looking towards this actor",
    "WindSplineComponent:InwardForceLowVelocityMinValue": "If velocity is below InwardForceLowVelocityThreshold, enforce this much magnetism.",
    "FortSkyTube:MagnetLowVelocityMinValue": "If velocity is below MagnetLowVelocityThreshold, enforce this much magnetism.",
    "WindSplineComponent:InwardForceLowVelocityThreshold": "If velocity is below this, enforce InwardForceLowVelocityMinValue.",
    "FortSkyTube:MagnetLowVelocityThreshold": "If velocity is below this, enforce MagnetLowVelocityMinValue.",
    "FortSkyTube:OuterMagnetSpeedThreshold": "If velocity toward spline center is above this, don't apply magnetism",
    "WindSplineComponent:InwardForceInnerRadiusSpeedThreshold": "If velocity toward spline center is above this, don't apply magnetism",
    "FortSkyTube:InnerMagnetSpeedThreshold": "If velocity toward spline center is below this, don't apply deceleration",
    "WindSplineComponent:InwardForceOuterRadiusSpeedThreshold": "If velocity toward spline center is below this, don't apply deceleration",
    "FortAIDirector:MaxNumLODAIProcessPerFrame": "If we are async updating the AI network LOD this is the maximum we will update per frame.\nOtherwise it should be TNumericLimits<int32>::Max()",
    "FortWeapon:bIsInReleaseSecondaryFireScope": "If we are currently within the scope of ReleaseSecondaryFire().\n     Used to avoid recursion for weapons where IsSecondaryAbilityATargetingMode() returns true.\n     Is used by a TGuardValue so it cannot be easily made into a uint8:1.",
    "CraftingObjectComponent:IngredientSpawnOffset": "If we are spawning the refunded ingredients on the ground, give it a starting offset",
    "RemoteViewRotSnapshotManager:InterpSpeedWhenNoSample": "If we are trying to query a time which isn't bounded by a pair of our samples, interpolate towards the single closest sample at this speed.",
    "AnimNode_PlayBeatSyncedAnim:MusicClock": "If we are using the MusicClock - which one are we using",
    "FortProjectileBase:LifespanOnHitDoNotExplode": "If we are using the Projectile.OnHit.DoNotExplode tag on the hit actor, then we'll set the lifespan on the projectile to this value.\nThis lets us do things with it before it's totally destroyed.",
    "FortMovementComp_Character:PushBumpedPawnClass": "If we bump into another FortPawn, if they are this type we will push them.",
    "EActivityCheckSolution": "If we can resolve the problem - how?",
    "FortReplaySpectator:BaseSequencerRetryFindPawnGraceTime": "If we can't find the target of a shot sequence, this is the amount of time we play on hoping to find them",
    "FortAbilityTargetSelection:bCreateHitResultWhenNoTargetsFound": "If we didn't hit anything, create a hit result at the end of our test.",
    "AnimNode_PlayBeatSyncedAnim:bAlwaysAllowPreviewBPM": "If we don't have a clock or a music player - should we allow using the PreviewBPM when running in game.",
    "BuildingWall:DoorObstacleClass": "If we have a door, this is the obstacle class to use",
    "AggregatedFunctionConfig:AggregationTimeout": "If we have aggregated values for a RPC, we will automatically send the aggregated values to the server\nafter this timeout (in seconds).\n\nNote: We will only aggregate values for an RPC if it is sent multiple times within this aggregation\nwindow (in seconds). The first time the RPC is ever sent, or the first time it is sent after\nan aggregation was flushed, it will not be aggregated.",
    "FortEncounterSettings:bCanDespawnExpiredPawns": "If we hit a pawn cap, should this encounter try to despawn expired pawns to make room for new spawns? Doesn't apply for pacing modes Fixed or Burst",
    "FortAthenaVehicle:AlwaysDamageVehiclesWithTag": "If we hit something with this tag, always damage it.",
    "FortAthenaMutator_SpecialEvent:ClientEventsThatUnhideHiddenWhileLoadingHUDElements": "If we receive one of these events in OnSpecialClientEventReceived(), reenable HUD elements that were hidden during the loading screen",
    "BuildingActor:PendingDamageImpactCues": "If we received a batched impact cue before the ability system component was replicated, save it here",
    "RepGraphActorSettingsBase:bAddClassRepInfoToMap": "If we should add this Class' RepInfo to the ClassRepNodePolicies Map In UFortReplicationGraph",
    "ElevationArrowData:bOverrideDefaultBehavior": "If we should override the default behavior (provided by GameDataBR)",
    "FortAthenaMutator_Encounter:ShouldSpawnEncounter": "If we should spawn the AI or not",
    "FortPawnComponent_GrindRail:bUseNativeSpeedCalculation": "If we should use nativized version of calculating grinding movement, intended for debug usage",
    "RepGraphActorSettingsBase:bUseCustomClassRepInfo": "If we should use the custom ClassRepInfo from this struct",
    "FortAthenaMutator_InventoryOverride:bSelectRandomLoadoutPerPlayer": "If we want to grant a random loadout per player instead of providing the default one. If true, will ignore bSelectRandomLoadoutForAll",
    "FortAthenaMutator_InventoryOverride:bSelectRandomLoadoutForAll": "If we want to grant a random loadout that applies to everyone, instead of providing the default one",
    "FortAthenaMutator_InventoryOverride:bSelectRandomLoadoutOnce": "If we want to select a random loadout once for all throughout the match. This will override all other random loadout options if true",
    "EFortCustomTickComponentCondition.WasRecentlyRendered": "If we were recently rendered, NumFramesToSkipBetweenCustomTicks is MinFramesToSkipBetweenCustomTicks.  Otherwise, MaxFramesToSkipBetweenCustomTicks.",
    "FabricTimelineSyncComponent:ThresholdForSeekMS": "If we're at least this many milliseconds out of sync with the server, seek (skip) to get back in sync",
    "FabricTimelineSyncComponent:ThresholdForStartSpeedAdjustMS": "If we're at least this many milliseconds out of sync, starting speeding up or slowing down to get back in sync",
    "HighlightObjectData:EnemyStencilName": "If we're doing a stencil highlight, this is the value to use. This name comes from Stencil_ID_Definitions.\n              Leave as none if no highlight intended.",
    "HighlightObjectData:FriendlyStencilName": "If we're doing a stencil highlight, this is the value to use. This name comes from Stencil_ID_Definitions.\n              Leave as none if no highlight intended.",
    "StenciledActorData:EnemyStencilName": "If we're doing a stencil highlight, this is the value to use. This name comes from Stencil_ID_Definitions.\n              Leave as none if no highlight intended.",
    "StenciledActorData:FriendlyStencilName": "If we're doing a stencil highlight, this is the value to use. This name comes from Stencil_ID_Definitions.\n              Leave as none if no highlight intended.",
    "FortAthena_WaxToken:InterpolationSpeed": "If we're interpolating, the speed we're doing that at. Dynamically updates to try to always hit at the same time.",
    "FortAthenaVehicle:BrakeAboveTopSpeedDelta": "If we're moving too fast for current gear brake. (Speed - GearSpeed) > BrakeAboveTopSpeedDelta",
    "HighlightObjectData:Effect": "If we're not doing a stencil highlight, this is the particle system to use.\n              Leave as none if no highlight intended.",
    "AircraftFlightConstructionInfo:DropAreaSafeZonePhase": "If we're restricting the drop to within the safezone, the index of the safe zone phase we should restrict the drop zone to",
    "AircraftFlightConstructionInfo:SafetyMarginPct": "If we're restricting the drop to within the safezone, the percentage to reduce the safe zone radius by for the purposes of aircraft drop.",
    "FabricTimelineSyncComponent:ThresholdForEndOfSpeedAdjustMS": "If we're within this many milliseconds out of sync consider ourselves close enough",
    "FortAthenaMutator_Wax:LastEligibleLeader": "If we've ever had an eligible leader, this variable tracks them.",
    "EMatchmakingCancelReasonV2": "If you update this enum please also update LexToString.\nAlso please don't just use Explicit everywhere, this enum was added to make tracking down why matchmaking was canceled easier.",
    "FortObjectiveFilter_KillContribution:FinalBlowGivesCredit": "If you want special handling for the player that deals the final blow in a kill contribution specify it here",
    "UrgentQuestData:bOverrideWidgetPrimaryColor": "If you want to use custom color for some elements in entry, tick this checkbox.\nIt was added as adhoc solution to distinguish between bounty and tutorial quests",
    "UrgentQuestSettings:bOverrideWidgetPrimaryColor": "If you want to use custom color for some elements in entry, tick this checkbox.\nIt was added as adhoc solution to distinguish between bounty and tutorial quests",
    "FortAthenaMutator_TDM:AllowSpectatingAfterDeath": "If zero, disable spectating after death.",
    "FortAnimWorldStriderComponent:bIgnoreStartTransitionSettings": "Ignore Start Turn Settings in order to allow other code to determine when to call [Initialize|Update]StartTurnTransition methods.",
    "FortPhysicsPawnObject:IgnoreImpulseTags": "Ignore an impulse if its instigator has any of these tags.",
    "TrapItemDefintionDesignerData:bForceIgnoreBuildingOverlaps": "Ignore building overlap",
    "TrapItemDefintionDesignerData:bForceIgnoreOverlapTest": "Ignore overlap",
    "FortAnimNode_PredictiveSlopeWarping:bUseWorldGravityDirectionForOffset": "Ignore the local mesh component rotation when determining the trace and instead orient the mesh around -WorldGravity direction. Preserves other rotation.",
    "SkyLightValues:bAllowCubeMapSetting": "Ignore this.",
    "EActivityImageLoadingState.Loaded": "Image is loaded",
    "EActivityImageLoadingState.Loading": "Image is loading",
    "EActivityImageLoadingState.Unset": "Image is unset",
    "FortWeapon:ReticleCenterImage": "Image to display at the center of the reticle",
    "FortWeapon:ReticleCenterPerfectAimImage": "Image to display at the center of the reticle when you have perfect aim.",
    "FortWeapon:ReticleInvalidTargetImage": "Image to display for the reticle when we have no valid target",
    "FortUITutorialData:PreviewImages": "Image to display for this tutorial step.",
    "FortGameModePickup_Wax:DrawOnMapBrush": "Image to draw on the Map, if we're drawn.",
    "FortGameModePickup_Wax:DrawOnCompassBrush": "Image to draw on the compass, if we're drawn.",
    "FortUIInfoComponent:TextureSoftPointer": "Image to use in the UI for the owning actor",
    "AgeRatingDisplayData:bIsRatingImageRectangular": "Image used is rectangular",
    "AgeRatingDisplayData:RatingImageTexture": "Image used to represent the rating. Will not be populated on construct and instead we need the image downloads to finish to populate it.",
    "CustomizableObjectMultilayerProjectsVirtualLayer:bModifyImage": "Image.",
    "FortMantisTechniqueCharacterSettings": "Immutable data that defines how the character should behave relative to their camera during a technique.",
    "FortMantisTechniqueData": "Immutable data that defines individual technique properties.",
    "FortLiquidGunProjectile:StopNormal": "Impact normal of this projectile from OnStop. Set in BP in EventOnStop",
    "FortChaseCameraHelper": "Implementation details for a chase camera. Used by the spectator chase camera and deathcam.\n#fixme for Fortnite, remove this and just fold it back into the main class?",
    "FortCosmeticStep_AwaitLoadRequestPayload": "Implementation of FFortCustomizationAssetsToLoadSourceInterface that works on data tracked in the working set",
    "BuildingTurretComponent_MOBA": "Implementation of turret component providing standard MOBA-style behavior",
    "TurnTransitionData": "Implements AI Turn transitions in Fortnite",
    "FortPlayerSurveyCMSSurveyKey": "Implements a hashable key that can be used to identify a CMS survey",
    "FortBasicPreviewActor": "Implements basic functionality required for preview actors (such as those spawned by FortItemPreviewOffPawnActor)",
    "FortCurieElementSpatialGrid": "Implements element storage in single cells for a simple storage setup",
    "CrashReporterPluginSettings": "Implements the settings for the CrashReporter plugin.",
    "DiscordRuntimeSettings": "Implements the settings for the Discord plugin.",
    "CatalogOfferSource:ExcelImport": "Import helper",
    "LootTableSource:ExcelImport": "Import helper",
    "FortObjectiveFilter_PlayerEliminationBase": "Important note - Doesn't implement the pure virtual GetObjectiveProcessor, so is an abstract struct like FObjectiveFilter",
    "FortBaseWeaponStats:HitImpulseZBias": "Impulse applied can be biased to avoid pushing physics objects down too much",
    "FortBaseWeaponStats:LongRangeHitImpulseMagnitude": "Impulse magnituded applied to physics objects at long-blank range",
    "FortBaseWeaponStats:MidRangeHitImpulseMagnitude": "Impulse magnituded applied to physics objects at mid-blank range",
    "FortBaseWeaponStats:ShortRangeHitImpulseMagnitude": "Impulse magnituded applied to physics objects at point-blank range",
    "RockVehicleAbility_Flip:Impulse": "Impulse that pops the vehicle off the ground",
    "AthenaResurrectionComponent:ResurrectionMachineMarkerID": "In World indicator handle",
    "EFortServerGameMode.ZonePvE": "In a PvE game",
    "EFortServerGameMode.ZonePvP": "In a PvP game",
    "EFortWorldManagerState.WMS_Failed": "In a failed state, world manager will be recreated later, prevent further state changes",
    "EFortServerGameMode.LobbyPvE": "In a lobby waiting on players",
    "EFortServerGameMode.LobbyPvP": "In a lobby waiting on players",
    "ContextualMessageCandidate:MetadataParameters": "In addition to the core 'message', allow tagging of this candidate message with additional meta data, which can be used by the handler to trigger bespoke behaviour.\nFor example \"Style\" -> \"Angry/Sad/Happy\" etc to allow Recieving NPC to present message in a different way",
    "ContextualMessageConfig:DefaultMetadataParameters": "In addition to the core 'message', allow tagging of this candidate message with additional meta data, which can be used by the handler to trigger bespoke behaviour.\nFor example \"Style\" -> \"Angry/Sad/Happy\" etc to allow Recieving NPC to present message in a different way",
    "FortWeaponPickaxeAthena:bCandyCaneKillReaction": "In an effort to keep everything in one graph, switch for being the candy cane pickaxe",
    "FortObjectiveFilter_PlayerReceivedGameplayEvent:GameplayEventFilter": "In depth filter to compare against the payload of the gameplay event",
    "FortAthenaMapInfo:AircraftDistanceFromMidLine": "In multi aircraft scenarios, determines the distance to offset the aircraft from its otherwise mid line.",
    "PawnGoalSelectionCriteria:ExcludeEnemiesWithTags": "In order for an enemy to be considered as a possible goal, it must NOT have any of these tags.  In addition, it must have at least one tag in IncludeEnemiesWithTags.  NOTE: This is ONLY required for enemy assignments, not World assignments.",
    "PawnGoalSelectionCriteria:IncludeEnemiesWithTags": "In order for an enemy to be considered as a possible goal, it must have one of these tags.  In addition, it must NOT have any tags in ExcludeEnemiesWithTags.  NOTE: This is ONLY required for enemy assignments, not World assignments.",
    "EMontageVisibilityRule.MetaTagQuery": "In order for the montage to be visible, the player's loadout meta-tags must meet this gameplay tag query",
    "EMontageVisibilityRule.ForbiddenItem": "In order for the montage to be visible, this item must NOT be equipped",
    "EMontageVisibilityRule.RequiredItem": "In order for the montage to be visible, this item must be equipped",
    "FortPawnSpinParams:bOnlySpinWhenFalling": "In place spinning will only occur when object is falling (LocalSpin used when movement mode is falling, and is set to 0.0f when landing)",
    "FortPlayerController:bGiveLastDamagerElimCreditOnDrop": "In player quitting situations, should we give the last damager elimination credit",
    "EMatchmakingState.CancelingMatchmaking": "In process of canceling matchmaking",
    "EMatchmakingState.JoiningExistingSession": "In process of joining a session",
    "EFortSessionHelperJoinState.JoiningSession": "In process of joining a session (end of state machine)",
    "FortPlayerController:bGiveLastDamagerElimCreditOnSelfDamage": "In self-damage situations, should we give the last damager elimination credit",
    "FortGameModePvE:bRestrictMaxIdleTime": "In situations where a player is allowed to be idle, use a longer idle timer instead of stopping detection.",
    "FortInGameLeaderboardPlacementData:Score": "In solo, this might just be the score of one player",
    "FortPlayerController:bGiveLastDamagerElimCreditOnStormDamage": "In storm damage situations, should we give the last damager elimination credit",
    "EFriendChestTimePeriod.Daily": "In sync with daily quests",
    "EFriendChestTimePeriod.Weekly": "In sync with weekly quests",
    "EFortPartyState.BattleRoyaleView": "In the Battle Royale Lobby",
    "FortAnimNode_GrindRailSlopeWarping:bAbsentCurveMeansFootDown": "In the absence of an On-Ground curve, assume the foot is down (checked); or up (unchecked)",
    "FortAnimNode_PredictiveSlopeWarping:bAbsentCurveMeansFootDown": "In the absence of an On-Ground curve, assume the foot is down (checked); or up (unchecked)",
    "EFortGameFeature.Frontend": "In the front end menus",
    "EUIExtensionSlot.FullScreenMap": "In the full screen map widget, to the right of the widget",
    "EFortGameFeature.KairosInitial": "In the initial kairos startup map, could be patching or loading",
    "EFortPartyState.TheaterView": "In the theater view",
    "EFortPartyState.WorldView": "In the world view",
    "FortAthenaMutator_Wax": "In this LTM, players gain token (points) for eliminating other enemy players in the map. The team with the highest number of tokens, at the end of the match, wins.\nThe duration of the match is restricted by a timer and a limited number of respawn lives for each player.\nPlayers lose all of their tokens on death to the eliminating player.\nPlayers of the top scoring teams are highlighted in the world and on the map.",
    "EAirCraftBehavior.NoAircraft": "In this mode, there are no buses. Spawned in some other way",
    "FortAthenaMutator_Bismuth": "In this mutator/LTM, the players are eliminated themselves when they eliminate an AI Bot in the game.",
    "ESceneTransitionType": "In transition, how the camera's movement would be categorized if looking outward and turning",
    "EGyroActiveMode": "In what aim modes should gyro be active?",
    "FortGyroV2Settings:GyroV2ActiveMode": "In what aim modes will gyro aiming be active?",
    "EGyroActiveBuildMode": "In what build-related modes should gyro be active?",
    "FortGyroV2Settings:GyroV2ActiveBuildMode": "In what build-related modes will gyro aiming be active?",
    "FortCreativeStreamingController": "In world actor for use as a central point of authority with the streaming priority system and controlling all streaming\ndevices in the experience.\n\nThis actor is spawned by the PlayspaceComponent_StreamaingController so that it doesn't use the playspace channel bandwidth.",
    "EFortCollectionBookState.Active": "In-progress state",
    "EBannerUsageContext.PhysicalBanner": "In-world 3D banner representation",
    "EBannerUsageContext.Spray": "In-world spray",
    "EFortQuestType.All": "Includes all quest types above",
    "FortObjectiveFilter_GainShields:TotalShieldGain": "Includes shield gain and shields gained above max shields",
    "XpDisplayConversion:ValueToReplaceAt": "Inclusive value, anything over this amount will display at this type of XP reward",
    "EObstacleType.BlockingDetectedTrap": "Incoming detected trap on our path to destroy",
    "EObstacleType.IncomingSmashable": "Incoming smashable actor on the path from path following comp",
    "FortGameplayDataTrackerActorStateConfig:StateTag": "Incoming tag from the tracked actor",
    "EFortHitPointModificationReason.AutoRegen": "Increased due to automatic regeneration",
    "EFortHitPointModificationReason.ItemRegen": "Increased from a distinct event (i.e. used an item)",
    "FortWaterInteractionComponent:WaterVelocityForceMultiplier": "Increases push force (acceleration) of water velocity, but not max speed.",
    "EFortRepairIncrementType.RepairAmount": "Increment By amount of Repairing Done",
    "EFortRepairIncrementType.Single": "Increment by 1",
    "FortPlayerController:InMovementCancellableAction": "Increment by one for each active movement cancellable action. If > 0 try to cancel those actions on move",
    "EFortRepairIncrementType.PercentRepaired": "Increment by percentage of repairing that was done in this event (0 - 100)",
    "EFortCraftObjectiveIncrementType.ItemCount": "Increment the object by the stack size of the crafted item",
    "EFortCraftObjectiveIncrementType.Single": "Increment the objective by 1 every time this filter is matched",
    "EFortTrickIncrementType.Single": "Increment the objective by 1 when the filter passes",
    "EFortCraftObjectiveIncrementType.MatchingIngredientCount": "Increment the objective by the number of matching ingredients used\n       * Note: If you have multiple ingredient filters it will add to the count for all matching ingredients used.",
    "SynchronizedTeleportFadeOutReplicationData:ReplicationIndex": "Increment to force replication to occur.",
    "FortControllerComponent_FakeKillRelevancy:ResetCounter": "Incremented by ResetRelevancy() to trigger OnRep_ResetCounter() on the client",
    "SpecialEventRewindComponentStateData:StateChangedCount": "Incremented each time the State changes.  If StateChangedCount has changed, but State is the same,\nthe client will know that a transition has taken place, and can act accordingly.",
    "TeamPerformanceMessageReplication:ReplicationTriggerIndex": "Incremented every time we want to send a message.\n     Incrementing this variable ensures that a message request is replicated to clients  even if the the rest of the message data has not changed.",
    "FortSafeZoneIndicator:ForceUpdateCount": "Incremented on the server in ForceUpdate() to bypass pause logic in the server AND client's next Tick()",
    "FortAthenaMutator_SpecialEvent:AllPlayerTeleportedCount": "Increments as a mechanism to force replication that allows clients to know when all players teleporting has finished",
    "EFortMarkerIncrementType.Single": "Increments by 1",
    "EFortMarkerIncrementType.Distance": "Increments by distance between the Author and the marked target in meters",
    "EFortMarkerIncrementType.StackSize": "Increments by the stack size of the marked items",
    "FortGameplayCueNotifyLoop_SpookyMist:BodyFXComponentIndex": "Index along LoopingResult.ParticleComponents where we expect the body's particle component",
    "FortGameplayCueNotifyLoop_SpookyMist:HeadFXComponentIndex": "Index along LoopingResult.ParticleComponents where we expect the head's particle component",
    "FortAthenaMutator_InventoryOverride:InventoryLoadoutIndex": "Index for InventoryLoadouts. Marks which loadout to grant players.",
    "EliminationFeedMessageRepl:MessageIndex": "Index for retaining the proper order of messages to display post-replication. *",
    "FortAthenaMutator_Bagel:CurrentObjectiveAreaIndex": "Index for the current objective area (between moving circles)",
    "FortAthenaMutator_Mash:CurrentObjectiveAreaIndex": "Index for the current objective area (between moving circles)",
    "StenciledActorData:EnemyStencilIndex": "Index from the stencil definition collection.",
    "StenciledActorData:FriendlyStencilIndex": "Index from the stencil definition collection.",
    "ControlPointInstanceData:SpawnDataIdx": "Index in the ControlPointSpawnData this instance is derived from",
    "NativeCurieFXTypeSettings:GlowMaterialIdx": "Index in the material for the type's glow",
    "DeferredActorData:ActorRecordIndex": "Index into actor record array",
    "TieredWaveSetData:EDOIdx": "Index into the mission's EDO array to use, if using Fixed EDO selection",
    "AshtonStoneState:SpawnDataIdx": "Index into the spawn data for which to use",
    "SpecialActorRepData:CompassScaleIndex": "Index of BrushScales entry used by this actor's Compass Icon.",
    "SpecialActorRepData:FullScreenMapScaleIndex": "Index of BrushScales entry used by this actor's Full Screen Map Icon.",
    "SpecialActorRepData:MinimapScaleIndex": "Index of BrushScales entry used by this actor's Minimap Icon.",
    "SpecialActorRepData:ReplicatedTransformIndex": "Index of FSpecialActorTransform entry used by this actor.",
    "SpecialActorRepData:CompassIconBrushIndex": "Index of SlateBrushes entry used by this actor's Compass Icon.",
    "SpecialActorRepData:FullScreenMapIconBrushIndex": "Index of SlateBrushes entry used by this actor's Full Screen Map Icon.",
    "SpecialActorRepData:MinimapIconBrushIndex": "Index of SlateBrushes entry used by this actor's Minimap Icon.",
    "FortAIPawn:SpawnSetIndex": "Index of SpawnSet I came from.",
    "FortAIPawn:EyeIndex": "Index of material which has eyes (for procedural coloring.  Negative index indicates don't color.",
    "FortDailyLoginRewardStat:NextDefaultReward": "Index of next reward from default schedule",
    "FortAIPawn:SkinIndex": "Index of skin material (for procedural coloring.  Negative index indicates don't color.",
    "FortWindMaterialData:WindVectorParameterIndex": "Index of the Wind Vector parameter in this MID.",
    "BattlePassOfferSectionData:CategoryIndex": "Index of the battle pass offer category (battle star items, custom skins, etc)",
    "FortMeleeDeflectTransitionAnimData:NextDeflectDataIndex": "Index of the deflection to transition to.",
    "FortMission_ActiveThreat:StartingActiveThreatEncounterIndex": "Index of the encounter to use for active threat to start with",
    "FortSplineGroundPath:FirstActiveEvenlySizedSegmentIndex": "Index of the first evenly sized segment.",
    "AthenaCosmeticMaterialOverride:MaterialOverrideIndex": "Index of the material on the part's mesh to override.",
    "CustomPartMaterialOverrideData:MaterialOverrideIndex": "Index of the material on the part's mesh to override.",
    "CustomPartScalarParameter:MaterialIndexForScalarParameter": "Index of the material on the part's mesh to set the parameter value on.  -1 Will make the parameter apply to all materials on the part.",
    "CustomPartTextureParameter:MaterialIndexForTextureParameter": "Index of the material on the part's mesh to set the parameter value on.  -1 Will make the parameter apply to all materials on the part.",
    "CustomPartVectorParameter:MaterialIndexForVectorParameter": "Index of the material on the part's mesh to set the parameter value on.  -1 Will make the parameter apply to all materials on the part.",
    "FortWindMaterialParameterPairID:PairIndex": "Index of the pair in the array of speed, offset pairs specified for all wind responders by the FortWindManager.",
    "FortCloudSaveRecordInfo:RecordIndex": "Index of the record in the array of records",
    "SafeZoneLocationParams:SafeZoneIndex": "Index of the safe zone phase that the location is being chosen for. Used for logging",
    "FortAthenaMutator_CustomStormMovement:SafeZoneRouteIndex": "Index of the selected route in SafeZoneRoutes",
    "SupplyDropSubPhaseModifier:SubPhaseIndex": "Index of the subphase to modify",
    "AthenaGameMessageData:TeamIndex": "Index of the team the message is for if bIsTeamBased is true",
    "FortZoneInstanceDetails:TileIndex": "Index of the zone this mission is on",
    "HeistBlingIconData:IconIndex": "Index of this bling in the list",
    "HeistExitCraftIconData:IconIndex": "Index of this exit craft in the list",
    "SurvivalObjectiveIconData:IconIndex": "Index of this objective in the list",
    "FortLiquidGunProjectile:ProjectileIndex": "Index of this projectile within the spline created by the full clip. (Set in BP)",
    "BattlePassOfferSectionData:SectionIndex": "Index of this section within the category",
    "PendingDeployableManagerAction:CurrentPlotRunningIndex": "Index to the current plot running their state machine in this action",
    "ControlPointSpawnData:IconMaterialIndex": "Index to use for determining the letter this control point displays in UI",
    "WarEffortIndexedFundingData": "Indexed Fund: One big array of fund values. Values are funded when they hit the target.",
    "HUDElementVisibilityRepData:GamePhaseStateVisibilities": "Indexed by EAthenaGamePhaseStep",
    "FortGameModeAthena:bMapInfoInitialized": "Indicates",
    "BuildingItemCollectorActor:ItemCollectorBehavior": "Indicates Deposit Rules. Defines the Behavior Type for the Item Collector",
    "FortResurrectionUIData:bResurrectionChipAvailable": "Indicates a chip is on the ground",
    "EFortItemEntryState.GenericAttributeValueSet": "Indicates a float attributes value was applied to this item entry",
    "CraftingFormula:SortingPriority": "Indicates a sorting priority for anything that needs sorting. The order doesn't matter here as much as it\ndoes in the consumer (e.g. UI).The default will be a -1 for no sort priority. Any sort priority above -1\nwill be sorted by the consumer. Sort priority of -1 will be either at the top or bottom depending ascending\nor descending order.",
    "NPCGiftItemInventoryRow:AdditionalRequirementTag": "Indicates additional checks are required before this gift item can be given\nUsed with an NPC's \"Conditional Benefits\" config to unlock gifts conditionally\ne.g. NPC reputation level, Time of day, NPC location etc\nUnlocked \"Conditional benefit\" tags automatically checked against\nFortConversationLootUtils::SelectGiftItemFromLoot",
    "NPCDynamicServiceRow:AdditionalRequirementTag": "Indicates additional checks are required before this service is offered\nUsed with an NPC's \"Conditional Benefits\" config to unlock conditionally\ne.g. NPC reputation level, Time of day, NPC location etc\ne.g. Gating a 'sale service' with \"Tandem.Reputation.AdditionalWeaponSale1\".\n'IsServiceSupported' will automatically check unlocked \"Conditional benefit\" tags.",
    "EFortWeaponReloadType": "Indicates how the weapon reloads",
    "EContextLayoutAccessLevel": "Indicates if a layout will be present and editable in the HUD Layout Tool for users.",
    "FortPickupInteractOverrideComponent:bContextOverrideWidgetApplied": "Indicates if either context override widget is currently applied",
    "GiveInventoryItemParams:bUseItemPickupAnalyticEvent": "Indicates if giving this inventory item will call into AFortPickup_AnalyticHelper::ReportAnalyticsEvent.",
    "AthenaCapturePoint:bActivated": "Indicates if the capture point is currently active, so we don't actually begin\n      capturing or unlocking until activated is true. Note: Use SetActivatedState to allow\n      proper client/server replication.",
    "FortAthenaAIBotController:bCanBeDestroyedOnDeath": "Indicates if the controller can be destroyed by the AthenaAIServicePlayerBots",
    "FortDeployableBaseManager:bDestroyAllBuildingPiecesOnReload": "Indicates if the manager should remove all player built buildings on reload",
    "ControllableRidableComponent:bCanJump": "Indicates if this ControllableRidable can jump while being ridden.\n              To implement the ability behavior, blueprint can implement the functions\n              HandleJumpStarted, HandleJumpHeld, and HandleJumpStopped.",
    "ControllableRidableComponent:bIsControllable": "Indicates if this ControllableRidable component is able to be controlled by the rider.\n              NOTE: Setting this to true will enable ticking on this component.",
    "ControllableRidableComponent:bHasAbility": "Indicates if this ControllableRidable has an ability that the controlling rider can\n              use while riding. To implement the ability behavior, blueprint can implement the functions\n              HandleAbilityStarted, HandleAbilityHeld, and HandleAbilityStopped.",
    "ControllableRidableComponent:bAlwaysMoveForward": "Indicates if this controllable ridable should always move forward while being controlled.",
    "CraftingFormula:bEnabled": "Indicates if this formula is currently enabled and can be used.",
    "EFortItemEntryState.PreventDropping": "Indicates if this item is prevented from being dropped entirely.",
    "EFortItemEntryState.PreventDroppingExceptFromDeath": "Indicates if this item is prevented from being dropped, except on death or disconnection.  This will apply any time the item is picked up.",
    "EFortItemEntryState.PreventDroppingExceptFromDeathWithCount": "Indicates if this item is prevented from being dropped, except on death or disconnection.  This will apply the number of times defined in this value, decreasing by one each time it is dropped.",
    "EFortItemEntryState.FromAugment": "Indicates if this item was spawned from an augment.",
    "MinigameTeam:bHasBucketAvailable": "Indicates if this team corresponds to a existing PlayerBucketTeam.",
    "CraftingObjectComponent:bTakeItemsAtCraftingStart": "Indicates if we should take ingredients items at the start of crafting.  If false, it will take the items at the end, and cancel crafting if it fails.",
    "BuildingItemCollectorActor:ItemCollectorState": "Indicates interaction. When true you can deposit your item into the collector.",
    "BuildingPropMusicPlayer:bPlayRandomSong": "Indicates next song should play a random song",
    "EFlightSpeedPresetOverride": "Indicates specific value presets for flight speed",
    "EGravityPresetOverride": "Indicates specific value presets for gravity",
    "EIndicatorLineOfSightMode": "Indicates specific value presets for indicator line-of-sight",
    "EHarvestStyleOverride": "Indicates specific value presets for resource gathering",
    "ESelfDamageTargetPreset": "Indicates specific value presets for self damage target filtering",
    "ESelfDamageWeaponTypePreset": "Indicates specific value presets for self damage weapon type filtering",
    "BuildingFoundation:bPreviewUsingLevelInstance": "Indicates that previewing will create an instance of the reference level instead of the level itself. This can be useful to preview multiple foundations referencing the same level.\nThe option will be propagated while loading sub foundations.",
    "FortPlayerStateAthena:bRespawningFromRespawnData": "Indicates that the Player is using respawn data to determine its final respawn position",
    "EFortChallengeBundleInfoLockedReasonCode.Unlocked": "Indicates that the bundle is not locked",
    "EFortChallengeBundleInfoLockedReasonCode.TimeLeftBeforeUnlock": "Indicates that the bundle is time-locked and will unlock automatically later",
    "EFortChallengeBundleInfoLockedReasonCode.PurchaseTheBattlePass": "Indicates that the bundle requires purchase of a battle pass",
    "EFortChallengeBundleInfoLockedReasonCode.ReachSpecificTier": "Indicates that the bundle requires reaching a specific tier",
    "EFortChallengeBundleInfoLockedReasonCode.NoKnownUnlockMethod": "Indicates that there is no known method of unlocking the bundle",
    "FortInventory:bIsShuttingDown": "Indicates that this inventory is in the process of shutting down, and just needs to stick around for the next profile save",
    "FortInventory:bRequiresSaving": "Indicates that this inventory needs to be saved to the backend",
    "FortInventory:bRequiresLocalUpdate": "Indicates that this inventory needs to have a local update run to simulate replication",
    "FortRealEstatePlotItemTableRow:bIncludedInVkEditor": "Indicates that this plot can be created in UEFN or not",
    "FortRealEstatePlotItemTableRow:bDeprecated": "Indicates that this plot should only be loaded for already created islands and it should not be used for creating new islands.",
    "AthenaCapturePoint:bHUDClampToScreenEdge": "Indicates the HUD element should clamp to the edges of hte screen when it is offscreen",
    "FortCustomizableAbilityDecoTool:bExecuteToolAbilityOnPress": "Indicates the ability setup for a FortAbilityDecoTool will fire on Press",
    "FortDecoTool:bPreventExecutionOnOwningPlayerFalling": "Indicates the ability setup for a FortDecoTool will not fire if owning player is current falling / jumping",
    "AthenaCapturePoint:bLocked": "Indicates the capture point is currently locked from capture. Basically, in waiting to\n      unlock. If set to True initially that will indicate the capture point begins lock and\n      starts unlocking immediately.",
    "BuildingGameplayActorCloneMachine:bRespawnCompleteAndSelfDestructing": "Indicates the clone machine has been used, and will eventually destroy itself",
    "PlayerFishingTelemetryData:bFromFishingPool": "Indicates the item was fished out of a fishing pool",
    "EStateChartResourceScope": "Indicates the level at which a State Chart resource is shared",
    "ZiplinePawnState:bJumped": "Indicates the player jumped off the zipline",
    "FortVehicleSeatWeaponComponent:ActiveSeatIdx": "Indicates the seat Index of the Player who is using this weapon",
    "FortCountdownSounds:bPlayed": "Indicates the sound has been played, so we don't try to repeat it.",
    "FortCharacterVehicle_Ostrich:DetonationState": "Indicates the state (and type) of detonation. None is not detonating.",
    "FortGameplayEventReference:EventRefType": "Indicates the type of event reference this is without needing to resolve the underlying proeprty.",
    "FortVisibilityComponent:bObserver": "Indicates this actor is an observer",
    "FortGameplayEffectDeliveryActor:bCanExplodeMultipleTimes": "Indicates this delivery actor can explode multiple times",
    "CraftingFormula:bInstantlyConsumeIngredients": "Indicates this formula immediate consumes ingredients (i.e. cannot be cancel to get them back)",
    "FortMiniMapData:bAllowLocalOverrides": "Indicates this indicator should allow local overrides of the icon (so it can look different for different players).",
    "FortMapIconDefinition:bIsVisibleInWorld": "Indicates this indicator should be displayed in-world over the actor",
    "FortMiniMapData:bIsVisible": "Indicates this indicator should be visible",
    "FortMiniMapData:bIsVisibilityBasedOnTeam": "Indicates this indicator should be visible on any map based off team.",
    "FortMapIconDefinition:bIsVisibleOnMiniMap": "Indicates this indicator should be visible on the MiniMap",
    "FortMapIconDefinition:bIsVisibleOnMap": "Indicates this indicator should be visible on the map",
    "FortMiniMapData:bIsVisibleOnMap": "Indicates this indicator should be visible on the map.  If the indicator is visible but bIsVisibleOnMap\nis false, it will display only on the minimap map and NOT on the map.",
    "FortMiniMapData:bIsVisibleOnMiniMap": "Indicates this indicator should be visible on the minimap.  If the indicator is visible but bIsVisibleOnMiniMap\nis false, it will display only on the full map and NOT on the minimap.",
    "CraftingFormula:bAlwaysKnownFormula": "Indicates this is a always known formula",
    "FortMissionAlertData:bOnlyUsedForSpreading": "Indicates this mission alert will only be used on the MCP for spreading and never as a seed on the hex tile map",
    "BuildingPropMusicPlayer:bCheckAlternateHotfixValue": "Indicates this music player aheres to the alternate hotfix value",
    "FortPlayerPawn:bInitAbilitySystemComponentFromPlayerState": "Indicates this pawn creates its own ability system component",
    "FortPlayerStateAthena:InteractingRebootVan": "Indicates this player has take a specific reboot van's lock",
    "FortResurrectionUIData:bResurrectionChipRebooting": "Indicates this player is currently respawning",
    "FortResurrectionUIData:bResurrectionChipPickedUp": "Indicates this player's chip has been picked up",
    "BuildingTrap:bOwnAllFacesOfAttachedToActor": "Indicates this trap should own all the faces of the actor it attaches too",
    "FortWeapon:bIgnoreTryToFireSlotCooldownRestriction": "Indicates this weapon just fired and should ignore the try to fire restriction from quickbar slot cooldowns",
    "BuildingGameplayActorConsumable:bSpawnerCalculateRandomRotation": "Indicates to the Consumable Spawner that it should calculate a random rotation (otherwise use [0, 0, 0])",
    "FortAthenaVehicle:bIsBraking": "Indicates we are actively pressing the brake pedal either to stop, or to switch directions",
    "FortWeaponRanged:bCooldownWhileOverheated": "Indicates we can cooldown while we are overheating (basically locked out for the duration of overheat, but state transitions to cooling down sooner)",
    "FortCriteriaRequirementData:bRequireRarity": "Indicates we require a specific rarity",
    "FortTimeOfDayManager:bUseSkyAtmosphereRotationAndDivergence": "Indicates we should apply the sky atmosphere override (OverrideAtmosphereLightDirection)",
    "CraftingObjectComponent:bGiveIngredientsToInstigator": "Indicates we should give any refunded ingredients directly to the instigator of crafting instead of dropping them on the ground.",
    "CraftingObjectComponent:bGiveIngredientsToCraftingObject": "Indicates we should give any refunded ingredients directly to the owner of the component instead of dropping them on the ground.",
    "CraftingObjectComponent:bGiveResultToInstigator": "Indicates we should give the crafting results to the instigator of crafting instead of dropping them on the ground.",
    "CraftingObjectComponent:bGiveToCraftingObject": "Indicates we should give the crafting results to the owner of the crafting component instead of dropping them on the ground.",
    "FortTheaterRuntimeData:RequiredSubGameForVisibility": "Indicates what sub game is required to see this theater",
    "FortPhysicsPawnObject:SurfaceTypePhysicsObjectOn": "Indicates what surface type the PhysicsObject is on",
    "FortAthenaVehicle:SurfaceTypeVehicleOn": "Indicates what surface type the vehicle is on",
    "FortWeaponRanged:bShouldDisplayReticleOverheatIndicator": "Indicates wheter or not we want to show the overheat indicator on the reticle",
    "FortMapIconDefinition:bIncludeZOffsetInDistanceChecks": "Indicates whether any distance tests for this icon should take into account Z offset",
    "FortBotTeleportInfo:bTeleportSuccess": "Indicates whether teleport worked.",
    "FortGameStateZone:bIsGroupContent": "Indicates whether the game mode is meant to be played with a group of players.",
    "ValkyriePluginSettings:LibraryFolderMode": "Indicates whether the plugin folder is shown in the library hierarchy and under what path",
    "FortMapIconDefinition:bStartVisible": "Indicates whether this icon should immediately start life visible",
    "EFortItemEntryState.ReAddedItem": "Indicates whether this item was re-added by temporarily removing it from the inventory",
    "VictoryCrownAccountData:has_victory_crown": "Indicates whether this player currently has a victory crown or not",
    "FortControllerComponent_InventoryService:ShouldDropCurrencyOnDeath": "Indicates whether we should drop currency of death or not",
    "EFortLoginDisplay": "Indicates which widget should be shown at the given time.\nLikely to swap back and forth between SignIn and LoginStatus several times if the user needs to give credentials",
    "FortGameplayEffectContainer:bOverrideChargeMagnitude": "Indicates you want to override the charge magnitude when applying effects (in case damage execution is called) @note Currently only supported by the GameplayDeliverActor",
    "FortGameplayEffectContainerSpec:bOverrideChargeMagnitude": "Indicates you want to override the charge magnitude when applying effects (incase damage execution is called) @note Currently only supported by the GameplayDeliverActor",
    "BuildingActor:HealthBarIndicator": "Indicator for building health or shields",
    "FortPawn:HealthBarIndicator": "Indicator for pawn health",
    "SafeZoneOrderOptimizeMutatorRouteOrder:RouteIDs": "Indices of SafeZone routes in AFortAthenaMutator_SafeZoneOrderOptimize::Routes, in the order that they should be used",
    "CreativeDataChannelEvent": "Individual Data Channel Event.\nWe will pass the Event Name from this event to FireEvent if the TriggerCondition is met.",
    "EKWSSetttingIndividalMigration": "Individual Settings migrated to KWS",
    "FortMission:LeecherCombatLowBar": "Individual score leecher failsafe. If earned, a player is exempt from leeching.",
    "FortTooltipDisplayStatsCategory:TooltipStats": "Individual stats inside this category.",
    "ValkyrieEditorPermissionSettings_UMG:AllowedPaletteWidgets": "Individual widgets to always show within the widget palette",
    "Playspace_ComponentInfo_Base": "Info about a any component type that UPlayspaceComponent_PlayerManager will spawn.",
    "Playspace_ActorComponentInfo": "Info about a control component that UPlayspaceComponent_PlayerManager will spawn.",
    "Playspace_ControllerComponentInfo": "Info about a control component that UPlayspaceComponent_PlayerManager will spawn.",
    "Playspace_PlayerStateComponentInfo": "Info about a control component that UPlayspaceComponent_PlayerManager will spawn.",
    "VkLinkCodeInfo": "Info about a link code",
    "FabricMetaSoundDirectInputInfo": "Info about an input without a user option that should be added for blueprint control",
    "FabricMetaSoundRuntimeInputInfo": "Info about the UserOption->Metasound input connection that is generated/determined at runtime",
    "FabricMetaSoundUserOptionInputInfo": "Info about the UserOption->Metasound input connection that may or may not be set by the user",
    "DBNOData": "Info about the damage event info that put us into DBNO",
    "FortObjectiveConversationTriggerInfo": "Info around how to trigger a particular type of conversation based on objective stat",
    "McpVariantChannelInfo": "Info for a specific variant from a player's mcp profile - includes information about ownership and the item the variant targets",
    "FortWeaponComponent_TargetModeSelector_Zoom:MaterialLerpInfo": "Info for all of the material parameters that should get interpolated during zoom transition",
    "FortAthenaMutator_Omaha:CharacterVariantInfoData": "Info for the variant to put on the player when they start.",
    "FortAthenaMutator_Omaha:SpecialCharacterVariantInfoData": "Info for the variant to put on the player when they start. Limited because these are special.",
    "FortObjectiveAvailableConversationTriggerInfo": "Info for tracking available conversations that can be played",
    "ProjectileTrajectorySplineInfo": "Info for when we are doing the projectile trajectory spline.",
    "FortPartyMemberRepData:MemberSquadAssignmentRequest": "Info on requests to change a member's squad setup, party leader will confirm the change",
    "CatalogOffer:GiftInfo": "Info pertaining to purchasing this offer as a gift",
    "FortCreativeOptionDestructiveAction:DialogInfoText": "Info text that will display inside the destructive action dialog.",
    "FlankingLocationInfo": "Information about a Flanking Location",
    "PhysicsConstantForceData": "Information about a constant force being applied to the component owner",
    "PhysicsMagneticForceData": "Information about a magnetic force being applied to the component owner",
    "TDMPlayerStandingInfo": "Information about a player and their standing in a match.\nThis struct provides a snapshot of the player standings as they are at the moment any player's score\nchanges. The data in this struct does not get updated and should not be stored or trusted\nafter the frame in which it is received via FOnTDMPlayerStandingsChanged as it may no longer be accurate.",
    "FortSafeZonePhaseInfo": "Information about a safe zone phase that can be modified at runtime.\nThe safe zone holds an array of this data type, one for each phase",
    "SubGameInfo": "Information about a specific SubGame",
    "FortVolumeObjectTrackingComponent:MultiSelectedActors": "Information about all of the actors we have multi-selected so they don't get net culled while they are selected.",
    "FortCreativeMoveTool:SelectedActors": "Information about all of the actors we have selected and might be currently moving.",
    "FortAthenaMutator_TeamPerformanceMessage:MessageDatas": "Information about all of the team performance messages that we should track and post client side messages about.\n     MUST be set-up in blueprint. Should NOT change during runtime.\n     Specific entries can be enabled/disabled at runtime using SetMesageEnabled().",
    "FortWorldProfileUpdateRequest": "Information about any pending updates",
    "FortWindImpulseCylinderDelta": "Information about changing a wind impulse per section.",
    "MMRSpawningDataTableInfo": "Information about each type of bots to spawn and its number",
    "MMRPhaseSpawningDataTableInfo": "Information about each type of bots to spawn regarding Phase index",
    "PendingSpawnInfo": "Information about enemies that are queued to spawn",
    "FortHeroTierAbilityKit": "Information about perks (such as active hero abilities) that are granted to the hero at each tier.\nThe tier required is built into the array that holds these.",
    "SpecialEventPhase:ControllerComponentsToApplyInfoList": "Information about the controller components to add to the players on phase activation.",
    "SpecialEventPhase:ControllerComponentsToRemoveInfoList": "Information about the controller components to remove from the players on phase deactivation.",
    "PlayerPawnShallowWaterVolumeData": "Information about the current AWaterVolume_Shallow that the pawn is within.\nThe SimulatedProxy pawn does not have knowledge of the CapsuleComponent's PhysicsVolume, so we need to replicate this data.\nWe can't simply replicate a pointer to the current AWaterVolume_Shallow, because it won't necessarily exist on the client.",
    "FortSprayDecalInstance:SprayInfo": "Information about the current spray",
    "SpecialEventPhase:PawnComponentsToApplyInfoList": "Information about the pawn components to add to the players on phase activation.",
    "SpecialEventPhase:PawnComponentsToRemoveInfoList": "Information about the pawn components to remove from the players on phase deactivation.",
    "FortReplayPlaybackState": "Information about the replay playback state",
    "FortTeamMemberInfo:HomeBaseInfo": "Information about the team member's Home Base",
    "FabricMetaSoundRuntimeInputInfo:InputInfo": "Information about the user option set from the editor",
    "FortNDCImpactInfo": "Information controlling spawning of weapon impact FX via Niagara Data Channels.",
    "RadiusTrackingInfo": "Information for a single in-use radius indicator.",
    "VkFileSize": "Information for a single packaged file",
    "FortGiftGiver": "Information for an ItemEntry that has been gifted by a player",
    "FortGiftingInfo": "Information for an ItemEntry that has been gifted by a player",
    "CatalogItemPrice:SalePrices": "Information for any upcoming sales",
    "VkFileSizes": "Information for the packaged files which make up a VK module on a particular platform+build",
    "FortEntitlementComponent:Entitlements": "Information if Entitlement is available or not.",
    "SeasonCurrencyMcpData": "Information needed to grant seasonal currencies to a player's MCP profile",
    "BattlePassLandingPageButtonDisplayDetails": "Information needed to show all the detailed info about a landing page button on the battle pass screen",
    "FortBatchUpdatePlayer_DeployableBaseUpdate": "Information needed to update a player's deployable base",
    "FortBatchUpdatePlayer_Update": "Information needed to update a player's theater and outpost profiles as well as quest state",
    "ItemIdAndQuantityPair": "Information needed to update a player's theater and outpost profiles as well as quest state",
    "FortSafeZoneIndicator:CurrentDamageInfo": "Information on how much damage the current phase deals when outside of the safe zone",
    "FortSafeZonePhaseInfo:DamageInfo": "Information on how much damage this phase deals to pawns when outside of the safe zone",
    "BaseVariantDef:UnlockRequirements": "Information on how to acquire this variant, only use if this variant is used",
    "FortCarriedObject:HolderInfo": "Information on the current Object holder, if any",
    "FortSafeZoneDamageInfo": "Information regarding damage applied to pawns outside of the safe zone\nThis structure ensure values are replicated at the same time",
    "WorkerSetBonusState": "Information regarding the current state of a worker set bonus.",
    "FortAthenaMutator_MarkerUtilities:PlacementBasedCompassIcons": "Information regarding the icons used to depict the top scoring teams/players on the compass.\nIndex 0 is first place, Index 1 is second place and so on.\nNumTopScoringTeamsToShowOnCompass ends up deciding how many of these icons are used.",
    "FortAthenaMutator_MarkerUtilities:PlacementBasedMapIcons": "Information regarding the icons used to depict the top scoring teams/players on the map.\nIndex 0 is first place, Index 1 is second place and so on.\nNumTopScoringTeamsToShowOnMap ends up deciding how many of these icons are used.",
    "FortTeamInfoAthena:BotInfo": "Information related to bots on the team",
    "TempestStateChangeTimerInfo": "Information required for setting up a timer on state transition",
    "FortPresenceBasicInfo": "Information required to get a zone instance up and running",
    "FortZoneInstanceInfo": "Information required to get a zone instance up and running",
    "FortMcpCollectedItemProperties:Properties": "Information specific to the collectable",
    "DestroyActorsAndComponentsMutator_ActorDefinition:ComponentDefinitions": "Information to define which components should be destroyed for this actor type",
    "FortGameplayEffectContainer:TargetSelection": "Information used to find the target of these effects",
    "FortGameplayEffectContainerSpec:TargetSelection": "Information used to find the target of these effects",
    "ESelectionProperty": "Informs how something is meant to be selected, and its grid relevancy.",
    "FortPlayerControllerGameplay:OnCreativeUIMetricsDisplayChanged": "Informs interested parties what the current index of thermometer display is.",
    "FortPlayerControllerGameplay:OnCreativeFlyingSpeedChanged": "Informs interested parties what the current level of flying speed is, and whether to play Sound/FX.",
    "FortPlayerControllerGameplay:OnCreativePreviewScreenshotCancelled": "Informs interested parties when an active screenshot preview is accepted",
    "FortPlayerControllerGameplay:OnCreativePreviewScreenshotReset": "Informs interested parties when an active screenshot preview is accepted",
    "FortPlayerControllerGameplay:OnCreativePreviewScreenshotActiveChanged": "Informs interested parties when an active screenshot preview is activated",
    "FortPlayerControllerGameplay:OnCreativePreviewScreenshotAccepted": "Informs interested parties when an active screenshot preview is reset",
    "FortPlayerControllerGameplay:OnCreativePhotoModeActivated": "Informs interested parties when the photo mode is activated\nMainly used for the photo mode overlay to know when to be shown (It hides itself)",
    "FortPlayerControllerGameplay:OnCreativePhotoModeDeactivated": "Informs interested parties when the photo mode is deactivated",
    "FortCreativeMoveTool:bClientNeedsToProcessNewlyPlacedActors": "Informs the client when they need to process newly placed actors and show spawn FX accordingly.\nAlso used to determine whether actors were successfully pasted after a cut action.",
    "EFortPartyMemberReadyCheckStatus": "Informs the status of any active in game ready check that the party may be performing.",
    "InhibitorData:VolumeScaledExtent": "Inhibitor Volume Scaled Extent",
    "BuildingWall:DoorRotationOffset": "Initial Rotation offset applied to door and SlidingDoor when spawning; for non-axis-aligned sliding doors to open normally",
    "EKeepPlayingTogetherVotingStatus.Undecided": "Initial State, player has not made a decision yet.",
    "FortReplayMovableSpotLightPilotController:InitialAccel": "Initial acceleration of the spectator pawn when we start possession.",
    "FortQuestIconComponent:MapIconData": "Initial data for icon configuration for the icon belonging to this component",
    "FortReplayMovableSpotLightPilotController:InitialDecel": "Initial deceleration of the spectator pawn when we start possession.",
    "FortAthenaMutator_Heist:SpawnExitCraftInitialDelay": "Initial delay after the time the storm starts shrinking to start spawning the initial exit crafts",
    "FortGravityGunHolder:TrajectorySplineInitialDistance": "Initial distance when calculating the trajectory spline using CalculateProjectileTrajectorySplineWithHit.",
    "FortAthenaMapInfo:FlightInfos": "Initial flight trajectory info - duplicate info from aircraft class.  This allows us to pre-calculate the aircraft trajectory.",
    "FortReplayMovableSpotLightPilotController:InitialMaxSpeed": "Initial max speed of the spectator pawn when we start possession.",
    "TileCompInterpData:InitialTranslation": "Initial relative translation of the component",
    "SpecialActorRepData:InitialRepLocation": "Initial replicated location of the actor. Further updates are sent in a separate array.",
    "SpecialActorRepData:InitialRepYaw": "Initial replicated yaw of the actor. Further updates are sent in a separate array.",
    "EKeepContainerType.Base": "Initial resources",
    "BuildingWall:SlidingDoorRotationOffset": "Initial rotation offset applied to door and SlidingDoors when spawning, ADDED to the original DoorRotationOffset separately making a curved effect",
    "MovementComp_Tracer:Speed": "Initial speed of projectile.",
    "ECraftingObjectState.Idle": "Initial state that is marked to idle on begin play",
    "FortAthenaMutator_Skyfire:InitialTimeBeforeLootRoomTeleport": "Initial time players are given when entering the mothership before they are teleported to the loot room",
    "FortMusicSection:InitialOffset": "Initial time to wait before playing",
    "FortPawnStats:JumpZVelocity": "Initial velocity (instantaneous vertical acceleration) when jumping.",
    "HUDWidgetSchemaInitializer": "Initializer object used to regroup all the information needed to create Schemas correctly.",
    "EFortEncounterState.InitializingRiftManager": "Initializing rift properties",
    "EFortEncounterState.AwaitingActivation": "Initializing rifts and running their EQS queries to find nearby spawn locations.  Not used if scripted spawning is being done.",
    "EMemorySamplerState.Initializing": "Initializing the memory sampler",
    "FortWorldMarkerData:MarkerID": "Initially set by the client for local markers, for other players, this marker comes from the server, but\nwe do not trust the client to provide the right playerID, we stomp that on the server, but we take their instanceID.",
    "BuildingGameplayActorSpawnMachine:InitiatingPlayer": "Initiating player to pay for gold when multi interact enabled",
    "FortAISpawnerTagQueryInjectedBehavior:InjectedBehaviors": "Injected behaviors when this AI is spawned",
    "FortItemInjectedBehaviorsDataTableRow:InjectedBehaviors": "Injected behaviors when this item is added to our inventory",
    "FortInjectedBehaviorEntry:InjectionTags": "Injection tags",
    "LeashInfoOverride:LeashInnerRadius": "Inner (internal) radius for the leash",
    "ELevelSaveRecordVersion.AddedInnerArchiverSerialization": "Inner archivers will serialize the header they were serialized at",
    "EFortTileEdgeType.Inner_3": "Inner edge",
    "EncounterMobSpawnInfo:LeashRadiusInner": "Inner leash radius for a mob spawned in this . If left at zero, leash will be ignored",
    "LWMEncounterStartStateTreeTaskInstanceData:LeashRadiusInner": "Inner leash radius for a mob spawned in this . If left at zero, leash will be ignored",
    "AircraftFlightConstructionInfo:PathMidpointSelectionRadiusMin": "Inner radius of circle defining midpoint selection for the aircraft path.",
    "FortWindImpulseCylinderDelta:InnerSectionRadius": "Inner radius of the current section",
    "EFortTextureDataSlot.Secondary": "Inner wall and ceiling",
    "ActionDefForUI:GamepadInputAction": "Input action for Gamepad.  For fetching the associated button/thumbstick art.",
    "ActionDefForUI:InputAction": "Input action for Mouse and Keyboard.  For fetching the associated button art.",
    "EFortInputActionGroup": "Input action grouping, for specifying which mode an action is used for",
    "ScoutDroneInputTriggerableEvent:InputAction": "Input action to listen for (Enhanced Input)",
    "ScoutDroneInputTriggerableEvent:InputActionName": "Input action to listen for (Legacy Input)",
    "FortGameFrameworkComponent_EventMode:InputComponent": "Input component created & attached to the local player to handle the event mode inputs",
    "AthenaCarPlayerSlotUnreplicated:Input": "Input component which overrides player input when this slot is occupied",
    "FortCreativeMoveTool:CreativeMoveToolInputComponent": "Input component wrapper to keep things clean on this class.",
    "EValkyrieValidationErrorCode.InputFolderNotFound": "Input folder was not found on disc",
    "EValkyrieValidationErrorCode.NoFilesInInputFolder": "Input folder was not found on disc",
    "FortAnimInput_VelocityImpact": "Input monitoring Velocity changes every frame.\nWhen Delta Velocity crosses 'DeltaVelocityThreshold', we trigger an Impact.\nImpact = 'DeltaVelocity' * 'ImpactScale', Clamped with 'ImpactLimit'\nImpact is updated via a Spring Interpolator.",
    "FortUserInputSettingsPerMode:ControllerSettings": "Input settings for controller",
    "FortUserInputSettingsPerMode:KeyboardMouseSettings": "Input settings for keyboard & mouse",
    "FortScoutDroneMovementComponent:LocalInputState": "Input state containing all the autonomous proxy's inputs",
    "RockVehicle:PendingDriverInputState": "Input state that we will apply to the actual drivers input just before consuming the input on the physics thread.  We do this because we need to clear these inputs every time they are consumed by the physics thread but we can't clear the actual clients inputs because these are sent to the server eventually.",
    "FortAnimInput_SkydivingExternalForce": "Input that can calculate skydiving external force",
    "FortAnimInput_HandIK": "Input that manages IK properties for hands",
    "FortAnimInput_PelvisAdjustment": "Input that manages pelvis adjustment to avoid knee popping",
    "ConstantForceAsyncInPersistent": "Input to the physics thread that changes infrequently",
    "PhysicsMagneticForceAsyncInPersistent": "Input to the physics thread that changes infrequently",
    "PhysicsWindSplineAsyncInPersistent": "Input to the physics thread that changes infrequently",
    "SkyTubeAsyncInPersistent": "Input to the physics thread that changes infrequently",
    "EmporiumProjectsCatalogEntry:ProjectLinkCode": "Input/output (input can be empty)",
    "EmporiumProjectsCatalogEntry:ProjectModuleId": "Input/output (input can be empty)",
    "FortVehicleSeatComponent:InputClassOverride": "InputComponent Class to use. Defaults to UInputComponent *",
    "AthenaLeaderboardData:InputType": "InputType for this data",
    "AntelopeInPersistent": "Inputs which are provided every once and a while\nbut whose latest values persist on the physics thread",
    "DagwoodInPersistent": "Inputs which are provided every once and a while\nbut whose latest values persist on the physics thread",
    "GoaFInPersistent": "Inputs which are provided every once and a while\nbut whose latest values persist on the physics thread",
    "JackalInPersistent": "Inputs which are provided every once and a while\nbut whose latest values persist on the physics thread",
    "NevadaInPersistent": "Inputs which are provided every once and a while\nbut whose latest values persist on the physics thread",
    "OctopusInPersistent": "Inputs which are provided every once and a while\nbut whose latest values persist on the physics thread",
    "SKPushVehicleInPersistent": "Inputs which are provided every once and a while\nbut whose latest values persist on the physics thread",
    "SKPushVehicleOutPersistent": "Inputs which are provided every once and a while\nbut whose latest values persist on the physics thread",
    "FortSphericalVehicleInPersistent": "Inputs which are provided every once and a while but whose latest values persist on the physics thread.",
    "HoagieInPersistent": "Inputs which are provided every once and a while, but whose latest values persist on the physics thread",
    "HoagieCmd": "Inputs which are provided every physics tick",
    "DagwoodInternal": "Inputs whose values are only ever accessible on the\nphysics thread, and which persist between frames",
    "HoagieInternal": "Inputs whose values are only ever accessible on the physics thread, and which persist between frames",
    "EUIExtensionSlot.KillfeedSlot": "Inserted into prioritized switcher where the killfeed is. @see IFortPrioritizedWidget",
    "EUIExtensionSlot.PrioritizedContextualSlot": "Inserted into the Context tutorial priority switcher, which is on the left of the screen.",
    "DestroyActorsStateTreeTaskInstanceData": "Instance data and handling for the Destroy Actors State Tree Task",
    "EnableEncounterPointProvidersStateTreeTaskInstanceData": "Instance data and handling for the Enable Encounter Provider State Tree Task",
    "LWMEncounterAddGameplayEffectStateTreeTaskInstanceData": "Instance data and handling for the LWM Encounter Add Gameplay Effect State Tree Task",
    "LWMEncounterAdvanceStateTreeTaskInstanceData": "Instance data and handling for the LWM Encounter Advance State Tree Task",
    "LWMEncounterAssignPointProvidersStateTreeTaskInstanceData": "Instance data and handling for the LWM Encounter Assign Providers State Tree Task",
    "LWMEncounterRemoveGameplayEffectStateTreeTaskInstanceData": "Instance data and handling for the LWM Encounter Remove Gameplay Effect State Tree Task",
    "LWMEncounterSetAlertLevelStateTreeTaskInstanceData": "Instance data and handling for the LWM Encounter Set Alert Level State Tree Task",
    "LWMEncounterSetStageStateTreeTaskInstanceData": "Instance data and handling for the LWM Encounter Set Stage State Tree Task",
    "AddGameplayCueStateTreeTaskInstanceData": "Instance data and handling for the Pause LWM Encounter State Tree Task",
    "LWMEncounterPauseStateTreeTaskInstanceData": "Instance data and handling for the Pause LWM Encounter State Tree Task",
    "LWMEncounterResumeStateTreeTaskInstanceData": "Instance data and handling for the Resume LWM Encounter State Tree Task",
    "SpawnActorStateTreeTaskInstanceData": "Instance data and handling for the Spawn Actor State Tree Task",
    "LWMEncounterStartStateTreeTaskInstanceData": "Instance data and handling for the Start LWM Encounter State Tree Task",
    "LWMEncounterStopStateTreeTaskInstanceData": "Instance data and handling for the Stop LWM Encounter State Tree Task",
    "LWMEncounterAlertLevelTransitionStateTreeTaskInstanceData": "Instance data for the alert level transition state tree task",
    "LWMEncounterKillCountTransitionStateTreeTaskInstanceData": "Instance data for the kill count transition state tree task",
    "LWMEncounterRemainingCountTransitionStateTreeTaskInstanceData": "Instance data for the remaining count transition state tree task",
    "FortPlayerController:HeartbeatManager": "Instance of a heartbeat manager that manages periodic tasks for this Player Controller",
    "FortPlayerController:StatManager": "Instance of a stat manager that tracks gameplay/reward stats for this Player Controller",
    "FortAthenaAIBotController:StatManager": "Instance of a stat manager that tracks gameplay/reward stats for this bot Controller",
    "FortCountdownSounds:PlayInstance": "Instance of played sound (for fade-out.",
    "AthenaCapturePoint:CapturePointMID_Neutral": "Instance of the materials used for the hud indicator",
    "FabricMeshInstanceReference:InstanceTransforms": "Instance transforms",
    "FortMissionInstancedConfigData": "Instanced configuration data",
    "FortMissionInstancedConfigData:ConfigDataBuckets": "Instanced data buckets",
    "BuildingGameplayActorLaserGrid:HISMComponentLaser": "Instanced static mesh component to represent all the lasers of this actor.",
    "BuildingGameplayActorLaserGrid:HISMComponentOutlet": "Instanced static mesh component to represent the various outlets of this actor.",
    "EFortTemplateAccess.Private": "Instances of this template never visible to requests",
    "EIndicatorStateImage.InCombat": "Instead of using default for teammates and squadmates, we should make their own entry.",
    "FortLabradorComponent_Telemetry:InstigatorAwakeNetIDString": "Instigator actor name of the wake up",
    "PhysicsObjectImpactInstigatorData:ImpactInstigator": "Instigator for the impact damage",
    "EValkyrieValidationErrorCode.LibraryProjectNotPermitted": "Insufficient permissions to create a Library project",
    "EValkyrieValidationErrorCode.InsufficientPermissions": "Insufficient permissions to validate content",
    "EncounterVariableSelections_Integer": "Integer Encounter Variable Selections",
    "EncounterVarRow_Integer": "Integer Encounter Variable row",
    "EncounterVariable_Integer": "Integer EncounterVariable",
    "FortGameState:CraftingBonus": "Integer crafting bonus",
    "FortCurieCableSocketIdentifier:Index": "Integer identifying the socket",
    "FortGameState:WorldDaysElapsed": "Integer number of days we are into the current world",
    "BuildingActor:OwnerPersistentID": "Integer representing the player that owns this, indexes into WorldRecord. INDEX_NONE means no player creator",
    "GameplayMutatorEventData:EventId": "Integer that represents the event (a mutator can set this with its own enum or whatever it wants)",
    "ActiveGameplayModifierArray:ModifierHandleGenerator": "Integer used to generate modifier handles",
    "EFortItemEntryState.MultiItemLevel": "Integer value of the index into the array of items viable for a Multi-Item.  Used to fetch Rarity and possibly other info.",
    "GameplayMutatorEventData:EventParam1": "Integer value representing the first parameter of the event",
    "GameplayMutatorEventData:EventParam2": "Integer value representing the second parameter of the event",
    "GameplayMutatorEventData:EventParam3": "Integer value representing the third parameter of the event",
    "FortGameState:WorldLevel": "Integer world level",
    "FortAIEncounterPIDController:IntegralGain": "Integral Term",
    "FortAIEncounterPIDControllerSettings:IntegralGain": "Integral Term. Response is a percentage of the max spawn points possible at the current difficulty level",
    "FortAthenaWorldConditionInstanceDataStateTreeTask": "Integration between WorldCondition queries and StateTrees.\nWill output a bool and, if set, will send a StateTree event when the bool changes (always fired once at the start, even for a false result).\nThe task never finishes and should be used in tandem with an event-based transition.",
    "SpecialEventAudioHapticsComponent:IntensityMultiplier": "Intensity multiplier modifying the intensity of all haptic actions controlled by this component",
    "CrashpadStaticParams:BuildingActorBounceIntensity": "Intensity of building actor bounce",
    "CrashpadStaticParams:CrashpadBounceIntensity": "Intensity of crashpad-on-crashpad bounce",
    "CrashpadStaticParams:PawnOrVehicleBounceIntensity": "Intensity of pawn or vehicle bounce",
    "CrashpadStaticParams:PhysicsObjectBounceIntensity": "Intensity of physics object bounce",
    "CrashpadStaticParams:ProjectileBounceIntensity": "Intensity of projectile bounce",
    "BuildingActor:SavedActorGuid": "Intentionally non-transient for use with Valkyrie. Actors spawned in the Editor Client will have a SaveGUID applied. This GUID is used in Valkyrie Game Runtime.",
    "FortInspectorCameraCreativePreview:SavedActorGuid": "Intentionally non-transient for use with Valkyrie. Actors spawned in the Editor Client will have a SaveGUID applied. This GUID is used in Valkyrie Game Runtime.",
    "FortPlaysetRoot:SavedActorGuid": "Intentionally non-transient for use with Valkyrie. Actors spawned in the Editor Client will have a SaveGUID applied. This GUID is used in Valkyrie Game Runtime.",
    "FortStaticMeshActor:SavedActorGuid": "Intentionally non-transient for use with Valkyrie. Actors spawned in the Editor Client will have a SaveGUID applied. This GUID is used in Valkyrie Game Runtime.",
    "CurieInteractParamsHandle": "Interact params handle to safely store and pass the interact params to blueprints",
    "EFortQuestObjectiveStatEvent.Interact": "Interact with an object.  I.E. Search, use, etc. Target is the focus object of our interact.",
    "FortBotPassiveHealerActivityDataTableRow:InteractText": "Interacting text use for the player",
    "FortPawnComponent_PassiveHealer:SelectedInteractText": "Interacting text use for the player",
    "FortAthenaStateTreeInteractTaskInstanceData:InteractTargetActor": "Interaction Actor",
    "FortAthenaStateTreeInteractTaskInstanceData:InteractDuration": "Interaction Duration",
    "FortAthenaStateTreeInteractTaskInstanceData:InteractType": "Interaction Type",
    "FortAthenaStateTreeInteractTaskInstanceData:Actor": "Interaction User Actor",
    "FortAIPawn:InteractionSound": "Interaction sound to use during long interaction. Fallback to default interaction sound if not set",
    "FortAIPawn:InteractionText": "Interaction text to display. Fallback to TalkToAI if not set",
    "AIGoalComponent": "Interface for actors which can use goal selection",
    "FortAIGoalComponent": "Interface for actors which can use goal selection",
    "FortAthenaMutator_InfiltrationRoundPlacard:RoundInfoInterfaceRedirectReplicationObject": "Interface pointers (and script interface pointers) do NOT replicate, so we store our interface pointer as a UObject pointer which we can replicate",
    "FortClientSettingRecordPartitionSchema": "Intermediate struct used for saving partitions. This schema holds the state of a partition, and a unique name used to resolve partitions.",
    "EValkyrieValidationErrorCode.InternalFinalizationError": "Internal Finalization error",
    "FortEmporiumFilterEntry:ID": "Internal ID",
    "FortEmporiumItemLicenseData:ID": "Internal ID",
    "FortEmporiumPriceFilterEntry:ID": "Internal ID",
    "StateChangeData:StateTreeDataHandle": "Internal ID given to the authoritative StateTreeContext that sent this replicated transition",
    "FortAthenaMutator_TeamPartSwapper:TeamNums": "Internal array of teams used to come up with an index into the Swap Data array",
    "FortAudioToMPCComponent:FFTDataArray": "Internal array to track FFTData and not require allocations per frame.",
    "FortRechargingActionTimer:Charge": "Internal data exposed to blueprints",
    "FortMcpQuestObjectiveInfo:BackendName": "Internal name used by MCP, DO NOT CHANGE THIS ON EXISTING QUESTS or players will lose quest progress",
    "FortMcpQuestObjectiveInfo:ItemTemplateIdOverride": "Internal name used by MCP. Only used if ItemReference is invalid.",
    "FortPlayerControllerGameplay:CreativeOptionsInternal": "Internal pointer to prevent GC on the Creative Options bundle.",
    "FortAthenaSmartObjectSlotStateData": "Internal slot data we can use on Fortnite to save per slot information such as cooldowns.",
    "FortSearchPassState": "Internal state for a given search pass",
    "PathRendererDetails": "Internal struct containing information on the path segments to render to the client",
    "PathRendererInfo": "Internal struct holding for each path segments, its IFortNavPathRendererInfoInterface (who ask it)\nand its PathRendererDetails  (internal up-to-date details about the path)",
    "VkContentPackageRequest": "Internal structure sent to content service",
    "EValkyrieValidationErrorCode.VerseToolChainInternalAssert": "Internal verse toolchain assert",
    "EValkyrieValidationErrorCode.VerseToolChainLogError": "Internal verse toolchain error",
    "BattleMapNode:ChildrenNodes": "Internally populated",
    "FortSafeZoneIndicator:AudioDopplerInterpSpeed": "Interp speed for doppler param when the storm moves past you",
    "FortGliderLayeredAudioFloatParam:AttackSpeed": "Interp speed if Target Value < Current Value (not in seconds)",
    "FortLayeredAudioFloatParam:AttackSpeed": "Interp speed if Target Value < Current Value (not in seconds)",
    "FortGliderLayeredAudioFloatParam:ReleaseSpeed": "Interp speed if Target Value > Current Value (not in seconds)",
    "FortLayeredAudioFloatParam:ReleaseSpeed": "Interp speed if Target Value > Current Value (not in seconds)",
    "MilkshakeControllerComponent:PawnInAirBasedCameraShakeMultiplierInterpSpeed": "Interp speed to use when calculating PawnInAirBasedCameraShakeMultiplier",
    "FortCharacterMovementMutatorComponent:BuffetBubblesRelativeVelocityInterpSpeed": "InterpSpeed for smoothing client velocity toward the replicated velocity",
    "FortCharacterMovementMutatorComponent:BuffetBubblesLocationInterpSpeed": "InterpSpeed for smoothing the relative location toward the replicated relative location",
    "FortCharacterMovementMutatorComponent:BuffetBubblesRotationInterpSpeed": "InterpSpeed for smoothing the relative rotation toward the replicated relative rotation",
    "FortWeaponFxComponent_Beam:bUseBeamSmoothing": "Interpolate beam end point between hit locations",
    "BuildingGameplayActorPetrol:CurrentSize": "Interpolates toward the target scale-width which is calculated according ProjectileCount.",
    "ActiveFortCamera:TransitionAlpha": "Interpolates towards one for incoming camera mode, towards zero for the other ones.",
    "ELockOnState.TargetLockedOn": "Interpolating the camera to the lock on point",
    "FortAthenaDoghouseVehicle:FreelookInterpolation": "Interpolation coefficient for matching target freelook position",
    "FortWeaponComponent_ScopeAnimation:InterpSpeed": "Interpolation speed",
    "FortRangedWeaponStats:RecoilInterpSpeed": "Interpolation speed for the recoil",
    "FortRangedWeaponStats:RecoilRecoveryInterpSpeed": "Interpolation speed for the recoil auto-recovery",
    "FortRangedWeaponStats:AthenaRecoilRecoveryInterpSpeed": "Interpolation speed for the recoil auto-recovery.",
    "FortRangedWeaponStats:AthenaRecoilInterpSpeed": "Interpolation speed for the recoil.",
    "FortCurieFXSettings:CharredStateInterpSpeed": "Interpolation speed to use for charred state",
    "FortCurieFXSettings:LandscapeCharredStateInterpSpeed": "Interpolation speed to use for landscape charred state",
    "FortWeaponFxComponent_ChargeAimLocation:AimSmoothingSpeed": "Interpolation speed to use for smoothing the aim direction and start location",
    "FortClientAnnouncement:bInterrupt": "Interrupt other announcements on the same channel if Priority is equal or higher.",
    "FortAIDirector:EncounterPawnSpawnInterval": "Interval between spawning encounter pawns",
    "SpecialActorRepData:ReplicationIntervalDeviation": "Interval deviation in seconds to add to ReplicationInterval (deviation can add or subtract this amount)",
    "FortSplineGroundPath:EvenlySpacedPointsDistance": "Interval for the evenly spaced points list.",
    "CreativeAFKDetectionParameters:MaxTimeWithoutInputChange": "Interval in seconds in which the player input state must change in order to prevent them from being considered AFK",
    "CreativeAFKDetectionParameters:MaxTimeWithoutInteracting": "Interval in seconds in which the player must interact with the game in some way in order to prevent them from being considered AFK",
    "SpecialActorRepData:ReplicationInterval": "Interval in seconds of when this actor should be replicated",
    "CreativeAFKDetectionParameters:SendInputChangeInterval": "Interval in seconds to record input changes on the server",
    "FortPlayerStart:ExpirationCheckInterval": "Interval in which we'll check if this player start is not colliding with anyone anymore",
    "FortMcpQuestObjectiveInfo:DynamicStatusUpdatePercentInterval": "Interval of showing the status widget updates for the OnPercent mode",
    "AthenaReengagementRestedXp:Interval": "Interval to define the row",
    "BuildingTurretComponent:CurrentTargetValidationInterval": "Interval, in seconds, to perform target validation checks",
    "FortAthenaMutator_BallerRace:GameMsg_IntroMessage": "Intro Message, shown in the radio at the aircraft phase",
    "VehicleWeaponReticle3DConfig:SmoothingAlpha": "Introduces some smoothing by interpolating between current position and previous position.\nValues on range (0, 1]. 1=no smoothing. ~0=max smoothing. More smoothness results in more reticle lag.\nValues closer to zero introduce more lag into the reticle.",
    "EFortBuildingType.None": "Invalid",
    "EFortTextureDataSlot.NumSlots": "Invalid",
    "EFortTextureDataType.None": "Invalid",
    "EHUDMessagePlacement.None": "Invalid",
    "ETrackingOffsetModifierCurve.MAX": "Invalid",
    "EGameModePauseWarmupMaskId.None": "Invalid Bit.",
    "EValkyrieValidationErrorCode.InvalidPortableObjectFile": "Invalid PO file",
    "EMcpSubscriptionState.Unknown": "Invalid State, should never be returned from MCP profile",
    "EFortQuestObjectiveItemEvent.Max_None": "Invalid Type",
    "EFortQuestObjectiveStatEvent.Max_None": "Invalid Type",
    "ECurieEntityType.Invalid": "Invalid entity type",
    "EMutualFriendsPrivacyPolicy.InvalidOrMax": "Invalid enum type, may be used as a number of enumerations.",
    "EFortMantisNotifyEvent.Invalid": "Invalid event.",
    "EFortWeaponAbilityRemovalReason.INVALID_MAX": "Invalid option, used for array size/index",
    "EValkyrieValidationErrorCode.InvalidPluginComposition": "Invalid plugin composition",
    "EMoveToolPlacementCheckResult.Invalid": "Invalid position",
    "EFortUIFeatureStateReason.NoPlayerController": "Invalid reasons",
    "ECollectionBookRewardType.Uninitialized": "Invalid reward type",
    "EFortItemEntryState.NoneState": "Invalid state",
    "ESupplyDropRadioBalloonState.Invalid": "Invalid state.",
    "EFortFrontEndFeatureStateReason.NoPlayerController": "Invalid states",
    "EBuildingFoundationType.BFT_None": "Invalid type",
    "EFortRewardType.Max_None": "Invalid type, not awarded at all",
    "EFortFrontendInventoryFilter.Max_None": "Invalid type, used in filters to say \"any type\"",
    "EFortHomebaseSquadType.Max_None": "Invalid type, used in filters to say \"any type\"",
    "EFortInventoryFilter.Max_None": "Invalid type, used in filters to say \"any type\"",
    "EFortEmporiumItemLicense.Invalid": "Invalid value, used for initialization",
    "EFortMantisNotifyWindow.Invalid": "Invalid window.",
    "FortItemInstanceQuantityPair:InventoryType": "Inventory Location for this Item",
    "FortAIPawn:MinItemTossDist": "Inventory Toss\nRefers to items being tossed from the AI pawn inventory instead of\nitems spawned by the AI as loot drops. Not used when defenders drop\nitems on the ground for swapping weapons/ammo etc.",
    "EFortCraftFailCause.InventoryFull": "Inventory is full, no space for result",
    "FortInventoryOutpost": "Inventory subclass with outpost-specific functionality",
    "FortGyroV2Settings:GyroV2PitchDirection": "Invert or disable pitch gyro axis.",
    "FortGyroV2Settings:GyroV2RollDirection": "Invert or disable roll gyro axis.",
    "FortGyroV2Settings:GyroV2YawDirection": "Invert or disable yaw gyro axis.",
    "DBNOCustomSettings:DownedInvincibilityTime": "Invincibility time during the begining of DBNO state (is used when OverrideInvincibilityTime is true)",
    "FortMinigame:StatChangedDelegate": "Invoked after any stat changes occur",
    "FortMinigameStatsComponent:OnScoreboardColumnOrderUpdated": "Invoked after the scoreboard column order is updated",
    "FortMinigame:OnMinigamePlayerOrBotSpawned": "Invoked when a player or player bot spawned into a minigame",
    "FortMinigame:OnMinigamePlayerSpawned": "Invoked when a player spawned into a minigame, player controller is in charge of notifying this",
    "FortMinigame:MinigameEndGameDelegate": "Invoked when a round ends, when the next state has been calculated but before its set",
    "FortPortalComponent:OnLinkDataError": "Invoked when link data cannot be loaded",
    "FortPortalComponent:OnLinkDataLoaded": "Invoked when link data is loaded",
    "FortPortalComponent:OnLinkThumbnailUpdated": "Invoked when link data thumbnail data has been updated",
    "FortPortalComponent:OnPortalLinkLockExpired": "Invoked when portal lock expired",
    "FortPortalComponent:OnPortalLinkCodeLockStatusChanged": "Invoked when portal lock status changes",
    "FortPlayerPawnAthena:InvulnerabilityTags": "Invulnerability tags that prevent the player from dying from a specific cause.",
    "EFortDamageZone.Invulnerability": "Invulnerable damage zone and should apply no damage, but might have other effects",
    "EIoDispatcherChunkTypeFlags": "IoDispatcher chunk type flags, matching EIoChunkType.\n\nThis enum allows to specify which chunk types to take into account when calculating package sizes via IoDispatcher.",
    "FortGameStateOutpost:IronCityMaxPowerLevel": "Iron City Max Power level overrides for max difficulty for advertising for matchmaking",
    "FortGameStateOutpost:IronCityMinPowerLevel": "Iron City Min Power level overrides for min difficulty for advertising for matchmaking",
    "RidableControlRuntimeData:bDesiredTurnInPlaceAngleSet": "Is Desired turn in place angle set",
    "FortTheaterMapViewer:bDisplayTheaterComplete": "Is DisplayTheater done spawning actors",
    "FortGyroV2Settings:bFlickStickEnabled": "Is Flick Stick enabled?",
    "FortActorComponent_Affiliation:bIsInGameParticipantFaction": "Is actor currently a member of game participant faction?",
    "FortGameUserSettings:LastAppliedUnlockConsoleFPS": "Is console syncinterval uncapped, current set state",
    "FortAIPawn:bCanInteract": "Is currently interactable",
    "GeneralChatReturn:bIsGlobalChatDisabled": "Is each chat type disabled altogether in the backend?",
    "FortAthenaMutator_Bagel:bIsGameOver": "Is game over?",
    "FortAthenaMutator_Mash:bIsGameOver": "Is game over?",
    "FortPlayerPawn:GliderRedeployAllowedRow": "Is glider redeployable active.",
    "GeneralChatReturn:bIsSubGameGlobalChatDisabled": "Is global chat disabled just for this subgame?",
    "FortAIPawn:bCanLookAtGoal": "Is it safe to look directly at goal actor (CurrentAimTarget), used by animations",
    "FortAthenaMutator_Fill:CanBuildOnLava": "Is lava-building on?",
    "ReplicatedSpawnInfo:bIsPlayerRespawning": "Is player currently respawning",
    "FortAthenaPartyRiftPortal:bPortalOpen": "Is portal open/available",
    "FortAthenaPartyRiftPortal:bIsPublishedPortal": "Is portal published/visible",
    "FortReplayPlaybackState:bIsPaused": "Is replay playback paused or not",
    "FortAthenaMutator_Bagel:bIsRespawningAllowed": "Is respawning allowed",
    "FortAthenaMutator_Mash:bIsRespawningAllowed": "Is respawning allowed",
    "FortMinigameStatQuery:Operation": "Is stat (>/</=) value?",
    "FortTheaterMapTile:bGoToPromptEnabled": "Is the \"go to\" prompt pulse currently active",
    "CrashpadDynamicParams:bHitAnotherCrashpad": "Is the CollidingActor another crashpad?",
    "BuildingWall:bDoubleDoor": "Is the Door a Double Door",
    "BuildingWall:bSlidingDoor": "Is the Door a Sliding Door",
    "BuildingWall:bSwingingDoor": "Is the Door a swinging door",
    "MontageBeatSyncComponent:bIsMusicPlaying": "Is the MusicPlayer current playing",
    "FortAthenaPatrolPathPointProvider:bStartEnabled": "Is the Point Provider enabled at the start of the game or must be activated externally.",
    "FortAthenaPointAroundPlayerProvider:bStartEnabled": "Is the Point Provider enabled at the start of the game or must be activated externally.",
    "FortFocusedBuildingInfo:bIsPlayerBuilt": "Is the building built by a player",
    "FortDecoTool:bButtonDown": "Is the button down?",
    "FortAthenaLivingWorldCategoryTableData:IsEnabled": "Is the category table enabled.",
    "FortAthenaLivingWorldEvent:IsEnabled": "Is the event enabled",
    "FortObjectiveBase:bIsProgressBarHidden": "Is the health bar hidden or not?",
    "TowhookParams:bApplySpringToSelf": "Is the hook allowed to apply forces to it's body?",
    "TowhookParams:bApplySpringToOther": "Is the hook allowed to apply torques to it's body?",
    "FortDeployableBaseManager:bDeployableBasesReadOnly": "Is the manager currently in read-only mode.",
    "FortCriteriaRequirementData:bGlobalMod": "Is the mod value global power mod or for a matching squad slot",
    "FMDeviceCableOrderingMovementState:bInvertVector": "Is the movement current running?",
    "FMDeviceCableOrderingMovementState:RunningMovementTimeSeconds": "Is the movement currently in its closed/collaped (false) or open/expanded (true) state?",
    "PartyMemberPackedState:bIsPartyLFG": "Is the party an LFG party?",
    "FortPartyMemberRepData:bIsPartyUsingPartySignal": "Is the party using a party signal?",
    "UserOptionDefinitionAssetReferenceMetaData:bIsArrayProperty": "Is the referenced property actually an array?",
    "UserOptionDefinitionClassReferenceMetaData:bIsArrayProperty": "Is the referenced property actually an array?",
    "UserOptionDefinitionTextMetaData:bIsArrayProperty": "Is the referenced property actually an array?",
    "EFortBuffState": "Is the stat better or worse than some base value?",
    "EFortClampState": "Is the stat clamped?",
    "CobaltCombatStormShieldDataEntry:bStormShieldActive": "Is the storm shield active? Does it have collision and visibility?",
    "FortTheaterMapTile:bFocused": "Is the tile currently focused",
    "FortTheaterMapTile:bHostSelected": "Is the tile currently selected by the host",
    "TimerObjectiveHUDData:bIsPaused": "Is the timer objective paused.",
    "FortTracerBase:bDead": "Is the tracer dead",
    "BuildingTrap:bTrapRecharging": "Is the trap currently recharging",
    "AccountIdAndMatchEndData:bCriticalMatchBonus": "Is the user eligible for the critical match bonus for this match",
    "AccountIdAndScore:bCriticalMatchBonus": "Is the user eligible for the critical match bonus for this match",
    "EndZoneScoreAndAwards:bCriticalMatchBonus": "Is the user eligible for the critical match bonus for this match",
    "AccountIdAndScore:bIsLeecherExempt": "Is the user exempt from leecher penalties due to meeting a raw minimum score threshold",
    "AccountIdAndMatchEndData:bDidLeech": "Is the user marked as a leecher for this match",
    "FortMinigameStatQuery:bStaticCount": "Is the value static (true) or should it be determined dynamically (false)",
    "FortAthenaVehicle:bOnFire": "Is the vehicle on fire?",
    "FortAthenaVehicle:bPendingDeath": "Is the vehicle pending death?",
    "FortMissionEvent:EventContent": "Is there a piece of content associated with this event? Const for this reason",
    "FortZoneEvent:EventContent": "Is there a piece of content associated with this event? Const for this reason",
    "FortGameFeatureStatusBase:bEnoughFreeSpace": "Is there enough free space to install everything? If there is nothing to install, this is true",
    "VkProjectSearchResultSlim:is_new": "Is this a called out \"new\" project?",
    "FortObjectiveBase:bIsObjectiveVisible": "Is this a hidden Objective or not?",
    "FortAthenaMutator_Bagel:IsMovingPhase": "Is this a moving phase",
    "FortAthenaMutator_Mash:IsMovingPhase": "Is this a moving phase",
    "WeaponItemDefinitionDesignerData:WeaponRange": "Is this a ranged or a melee weapon?",
    "FortAthenaMutator_Bagel:IsSurvivePhase": "Is this a survive phase",
    "FortAthenaMutator_Mash:IsSurvivePhase": "Is this a survive phase",
    "FortMission:bIsMissionVisible": "Is this a visible Mission or not? If true, will show up in the UI",
    "FortAthenaMutator_Bagel:IsAftermathPhase": "Is this an aftermath phase",
    "FortAthenaMutator_Mash:IsAftermathPhase": "Is this an aftermath phase",
    "FortObjectiveBase:ObjectiveAudiblity": "Is this an audible Objective or not?",
    "BuildingContainer:bBuriedTreasure": "Is this container hidden beneath the ground?",
    "FortItemEntry:bIsReplicatedCopy": "Is this entry a replicated copy? If false, this could either be a temp item or inside a FortWorldItem",
    "FactionData:bActive": "Is this faction active?",
    "FortGameModeZone:bCriticalMissionEligible": "Is this game part of critical missions",
    "FortFeedbackHandle:bBankDefined": "Is this handle defined in a bank - used for the editor",
    "FortItemEntry:inventory_overflow_date": "Is this item in the overflow beyond the backpacks size //NOTE: THIS IS NOT A DATE. It's just called this to share the same variable name as account items",
    "CreativeLoadedLinkData:bActive": "Is this link code the default version (the version used when only the link code is used)",
    "QuestDrivenMissionSubList:bEnabled": "Is this list of quest driven missions currently enabled?",
    "FabricMetaSoundRuntimeInputInfo:bIsModulated": "Is this node currently connected to a modulator?",
    "FortMcpQuestObjectiveInfo:bHidden": "Is this objective hidden from the player? (but not from the client - use private flag to restrict visibility to server)",
    "FortObjectiveBase:MissionRequirement": "Is this objective required to finish the mission",
    "FortObjectiveEntry:MissionRequirement": "Is this objective required to finish the mission",
    "VkProjectSearchResultSlim:is_starred": "Is this one of the requesting user's starred projects?",
    "DynamicXpPlayerSessionTransient:bInMiddleOfRound": "Is this player currently playing in a round.",
    "FortPlayerRecord:bPlayerIsNew": "Is this player new?",
    "FortWorldPlayerLoadout:bPlayerIsNew": "Is this player new?",
    "SparksPlayspaceInteractor:bIsValidInteractor": "Is this pointing to a valid music playspace interactor",
    "SparksPlayspaceMusicPlayer:bIsValidMusicPlayer": "Is this pointing to a valid music playspace player",
    "FortAthenaMutator_Bagel:IsPreparationPhase": "Is this preparation phase",
    "FortAthenaMutator_Mash:IsPreparationPhase": "Is this preparation phase",
    "FortFeedbackHandle:bReadOnly": "Is this read only - used for the editor",
    "FortMissionStormSafeZone:bSafeZoneInStormStateChanged": "Is this safe zone outside the radius of the stormshield",
    "GameplayStatMetadataTableRow:bExportToBackEnd": "Is this stat ready for prime time?  If true, it is exported and tracked on the backend",
    "FortAthenaMutator_Bagel:IsFinalPhase": "Is this the final phase",
    "FortAthenaMutator_Mash:IsFinalPhase": "Is this the final phase",
    "BagelLeaderboardEntry:bIsLocalPlayer": "Is this the local player",
    "MashLeaderboardEntry:bIsLocalPlayer": "Is this the local player",
    "FortUpdatedObjectiveStat:bSharedQuestUpdate": "Is this update from a shared quest",
    "UrgentQuestData:bIsSharedUrgentQuest": "Is this urgent quest meant to be shared with squadmates",
    "FortGameModeAthena:bAllGameplayModifiersRegistered": "Is true after OnGameplayModifiersRegistered has been called",
    "FortCreativeMoveTool:ScaleModifier": "Is used to modify the uniform scale of objects being moved around with Move Freely.",
    "FortGameStateAthena:bIsGrassFireBoundsUpdateEnabled": "IsGrassFireBoundsUpdateEnabled setting on the Server replicated to Client",
    "EFortCreativeIslandLinkCategory.Default": "Island in this list for unspecified reason",
    "EFortCreativeIslandLinkCategory.Favorite": "Island player has favorited",
    "EFortCreativeIslandLinkCategory.Published": "Island player has published",
    "EFortCreativeIslandLinkCategory.Recent": "Island player has recently entered or visited",
    "FortCreativeLinearMoverComponent:CurrentSpatialGameplayInterface": "Island volume that the linear mover is in.",
    "FortMinigame:PostGameSettings": "Island-level Post Game settings",
    "MusicalPlayerRuntimeState:IsTriggered": "It is possible for IsTriggerd to be true and IsPlaying to be false if the\nstart condition is not immediate (e.g. \\\"start on next downbeat\\\")",
    "EFortScoutDroneTargetStatus.Confirmed": "It's in range but we have to wait to confirm target",
    "EBuildingWallArea.Flat": "It's supposed to be a flat surface with navmesh on top.",
    "FortAthenaMutator_Wax:PickupItemDef": "Item Def used for creating the pickup",
    "EncounterVarRow_ItemDefinition": "Item Definition Encounter Variable row",
    "FortAthenaMutator_CR_CreativeAllowLootItem:ItemGameplayTagsNotAllowed": "Item Gameplay Tags not allowed",
    "EFortRpcCategory.CheatCommands": "Item Grants, setting health/shield, teleporting, anything that requires the cheat system to be enabled",
    "EFortBangType.AthenaDirectedAcquisitionTab": "Item Shop",
    "AccountIdAndMatchEndData:EarnedItemCaches": "Item caches earned during the mission",
    "EndZoneScoreAndAwards:EarnedItemCaches": "Item caches earned during the mission",
    "FortEmporiumItemData": "Item data retrieved from Emporium server",
    "AmmoItemState:AmmoItemDefintion": "Item def for the ammo type",
    "FortItemInjectedBehaviorsDataTableRow:ItemDefinition": "Item definition",
    "ItemDefOptionData:ItemDef": "Item definition associated with this option",
    "SquadQuickChatOptionData:ChatEntry": "Item definition associated with this option",
    "FortDeployableBaseManager:DeployableBaseItemDefinition": "Item definition being used for the zone for deployable base cloud saves",
    "AthenaQuickChatLeafEntry:EmojiItemDefinition": "Item definition for the emote to play when this selection if made",
    "FortWorldMultiItemInfo:ItemDefinition": "Item definition for when the Multi-Item is using this entry.",
    "EventItemOverride:ItemDefinition": "Item definition key; must match an item in the reward track",
    "FortGameFrameworkComponent_EventMode:ActivatorAsset": "Item definition of the event mode activator that will be granted to all players",
    "FortAthenaMutator_Ashton:VillainLeaderItemDef": "Item definition of the villain leader to be given to those that are worthy",
    "FortPartyMemberRepData:CampaignHero": "Item definition of this player's currently selected hero in the campaign subgame",
    "FortItemEntry:ItemDefinition": "Item definition this is an instance of",
    "FortCreativeBudgetPickupInstanceLimit:ItemDefinition": "Item definition used by a pick up instance for which the number of instances in a volume will be limited.",
    "FortAthenaMutator_Ashton:VillainItemDefs": "Item definitions of inventory to remove from villains",
    "ItemWrapSlotMetadata:PreviewListItemDefinitionType": "Item definitions of this type will be discovered to be added the preview list, if they check the \"UseInPreviewList\" box.",
    "FortMissionTaggedRewards:WorldItemDefinitions": "Item definitions to grant as rewards",
    "FortLoginReward:ItemDefinition": "Item given as a reward",
    "FortInventory:PendingInstances": "Item instances that have already been created but not added to the inventory, set by the world profile",
    "EFortReplenishmentType.Ability": "Item is granted via a selected ability, and the item should be removed when the ability is not activated. Will also be removed when you switch away from the hero.",
    "CreativeItemTemplateData:ItemOptionData": "Item options data, generally targeting the item template object, gameplay abilities, and/or weapon instances",
    "MinigameItemData:ItemOptionData": "Item options data, generally targeting the item's gameplay abilities and/or weapon instances (replication handled through the pickup instigator registry)",
    "AthenaMidSeasonUpdate:ItemRequirements": "Item ownership requirements that must all pass in order to run this update",
    "EFortItemType.ApparelLayout": "Item representing a particular layout schema of Apparel within an item",
    "EFortItemType.PlayerAugmentsPersistence": "Item representing player augment persisted state",
    "EFortItemType.Campsite": "Item representing player campsite state",
    "EFortItemType.RealitySapling": "Item representing player reality sapling state",
    "FortCollectionBookPageData:ItemRewardsText": "Item rewards given at this level in raw string format (\"<item def asset path>=<quantity>;<item def asset path>=<quantity>;...\")",
    "FortCollectionBookSectionData:ItemRewardsText": "Item rewards given at this level in raw string format (\"<item def asset path>=<quantity>;<item def asset path>=<quantity>;...\")",
    "FortCollectionBookXPData:ItemRewardsText": "Item rewards given at this level in raw string format (\"<item def asset path>=<quantity>;<item def asset path>=<quantity>;...\")",
    "FortItemInstanceQuantityPair:Item": "Item stack awarded",
    "FortScriptedActionParams:SourceItem": "Item that granted this action, usually a quest or token",
    "EFortItemType.EventDependentItem": "Item that grants another item if a specific event is active. Granting these will always either give the target item, or nothing.",
    "EFortItemType.Stat": "Item that represents a F.O.R.T. Stat",
    "EFortItemType.Buff": "Item that represents a bonus if it is in your inventory and active",
    "EFortItemType.BuffCredit": "Item that represents a grant of a given amount of a Buff item. Should never actually exist in the inventory",
    "EFortItemType.ItemAccessToken": "Item that represents the ability to access an item, initially to be used for awakening emotes",
    "EFortItemType.VictoryCrown": "Item that represents victory crown state",
    "EFortItemType.STWAccoladeReward": "Item that will indirectly grant an StW Accolade. These will never persist on the MCP.",
    "TieredWaveCollectionLootSetData:StartOfCollectionItemTierGroups": "Item tier group to use for start of collection item grants, if any",
    "TieredWaveCollectionLootSetData:SuccessfulWaveItemTierGroups": "Item tier group to use for successful wave completion, if any",
    "GrantItemMultiData:ItemToGrant": "Item to grant",
    "EFortItemType.FriendChest": "Item to track instanced items given to player from a friend chest.  They are often wrappers for real item given, but track stats about it.",
    "QuickBarSlotData:DefaultItem": "Item to try and place into this slot if it is emptied. This slot will never be truly empty",
    "FortCosmeticRestrictionTargetQuery:ItemType": "Item type to block",
    "ItemCategory:TagContainer": "Item's gameplay tags",
    "EncounterVariable_ItemDefinition": "ItemDefinition EncounterVariable",
    "AthenaRewardItemReference:ItemDefinition": "ItemDefinition for the reward to give. This or TemplateId must be set.\nThis is the preferred field to use when specifying a reward.\nIf this and TemplateId are both set, GetTemplateId() will use the ItemDefinition's TemplateId",
    "AbilityKitItem:Item": "ItemDefinition to give out",
    "HeroItem:Item": "ItemDefinition to give out",
    "FortAthenaMutator_Skyfire:PlayspaceItemsAndAS": "Items and ability set that players are given while in the playspace only (eg, low grav)",
    "FortAthenaMutator_Skyfire:PrisonAndPlayspaceItemsAndAS": "Items and ability set that players are given while in the prison and playspace (eg, the alien gun)",
    "FortAthenaMutator_Skyfire:PrisonThroughLootRoomItemsAndAS": "Items and ability set that players are given while in the prison, playspace, and loot room (eg, the jump and backpack)",
    "FortAthenaMutator_Skyfire:LootRoomItemsAndAS": "Items and ability set that players are given while the player is in the loot room.",
    "CatalogOffer:DynamicBundleInfo": "Items and base price info for dynamic bundles",
    "FortCalendarEventInventoryTransformData:ItemsToGrantByTemplate": "Items are specified by templateId.",
    "FortInventoryOutpost:UnavailableItemInstances": "Items beyond MAX_INVENTORY_ITEMS waiting to be swapped in when space frees up.",
    "CosmeticLoadoutSlotRequirements:DeniedTags": "Items cannot have any of these tags. If this is empty, then any item is considered to meet the requirements.",
    "FortCatalogMeta:ChaseItems": "Items for the players to aspire to",
    "FortCatalogMetaPreload:ChaseItems": "Items for the players to aspire to",
    "FortConversionResultNotification:ItemsGranted": "Items granted by this conversion",
    "FortTransmogResultNotification:TransmoggedItems": "Items granted by this conversion",
    "FortUpgradeItemRarityNotification:ItemsGranted": "Items granted by this conversion",
    "FortTransmogResultNotification:RecycledItems": "Items granted by this recycle",
    "FortRewardActivity:RewardItems": "Items granted during this activity",
    "FortCosmeticRestrictionDefinition:TargetItemQuery": "Items matching this query cannot be equipped if this restriction is active",
    "CosmeticLoadoutSlotRequirements:AllowedItemTypes": "Items must be of one of the specified classes. This cannot be empty",
    "CosmeticLoadoutSlotRequirements:RequiredTags": "Items must have all of these tags. If this is empty, then any item is considered to meet the requirements.",
    "FortPickerTemporaryWheel:Items": "Items on this wheel page (if any; often this is auto-defined by the PickerType)",
    "PreferredItemSlotSettingData:GameplayTags": "Items parsed with the first corresponding gameplay tag will prefer this slot type",
    "AlterationSlotDefinition:BaseRespecCosts": "Items required to respec the slot.",
    "EFortItemType.Token": "Items that are \"one off\" like hero slots",
    "QuickBarSlotData:AcceptedItemTagQuery": "Items that match this query, and whose type are included in the AcceptedItemTypes, are accepted in this quickbar slot.  If the query is empty, items with any tags that match AcceptedItemTypes are accepted.",
    "FortCalendarEventInventoryTransformData:QuestsOnlyActiveDuringEvent": "Items that may be placed in this slot",
    "FortCollectionBookSlotData:AllowedItems": "Items that may be placed in this slot",
    "FortCalendarEventInventoryTransformData:ItemsToGrant": "Items that will be granted on the first player login after the event is started",
    "AthenaDeveloperSettings:InventoryItemsToGrant": "Items that will be granted to the player inventory when created during a PIE session",
    "STWDeveloperSettings:InventoryItemsToGrant": "Items that will be granted to the player inventory when created during a PIE session",
    "FortCollectionBookDirectPurchaseData:PurchaseCosts": "Items to be consumed as part of directly purchasing the first allowed item",
    "CostOnlyRecipe:RecipeCosts": "Items to be consumed as part of this recipe",
    "Recipe:RecipeCosts": "Items to be consumed as part of this recipe",
    "FortCalendarEventInventoryTransformData:ItemsToRemoveAfterEvent": "Items to remove after the event",
    "FortCalendarEventInventoryTransformData:ItemsToRemoveAfterEventByTemplate": "Items to remove after the event duration, specified by templateId.",
    "FortAthenaMutator_Cobalt:ItemTypesToRemove": "Items to remove from the player inventory on the start of a new round.",
    "FortAthenaMutator_InventoryOverride:ItemTypesToRemoveOnReset": "Items to remove from the player inventory when resetting inventories.",
    "AthenaMidSeasonUpdate:Removals": "Items to remove on this mid season update, if all requirements pass.  Will only be run once, based on season_update profile value",
    "ImportFriendsRewardNotification:LootGranted": "Items which have already been created by MCP. Should already be in the inventory before this notification is processed.",
    "McpLootResult:Items": "Items which have already been created by MCP. Should already be in the inventory before this notification is processed.",
    "EMegaStormState.DamagingActors": "Iterating our list of actor and Damaging/Destroying them.",
    "EventChannelState:State": "JSON blob for this state (will be parsed into a USTRUCT)",
    "FortAthenaPartyRiftPortal:PartyJoinInfoJSON": "JSON describing a joinable party",
    "FortEmporiumItemLicenseData:Keyword": "JSON keyword for license",
    "CatalogOfferDefinition:MetaAsset": "JSON serialized data asset",
    "VkJobOutput:UserContentTotalSizeKb": "Job output size minus any dependencies (kb)",
    "EFortAthenaPlayContextualAnimExecutionMethod.JoinInteraction": "Join an existing interaction",
    "EFortSessionHelperJoinResult.JoinSessionCanceled": "Join request was canceled",
    "IslandRepData:JoinInfo": "JoinInfo will be managed by rep data directly",
    "EFortPowerRatingComparison.UnderLevel": "Joining player power rating is above the mission's range",
    "EFortPowerRatingComparison.Unknown": "Joining player power rating is below the mission's range",
    "EFortPowerRatingComparison.OverLevel": "Joining player power rating is within the mission's range",
    "EFortSessionHelperJoinResult.JoinSessionSuccess": "Joining the session has succeeded, expectation is game will actually travel to the session",
    "McpAddItemRequest:Attributes": "Json object representing the attributes",
    "McpChangeAttributesRequest:Attributes": "Json object representing the attributes that are changed",
    "WaterJumpParams:WaterJumpForceZ": "Jump Acceleration Z applied when jumping.",
    "FortItemPreviewPedestal:WeaponPlacementComponent": "Just a helper for locating the spawn location of weapon previews (vs. characters and such)",
    "FortCatmullRomSpline": "Just a plane class to make it lighter weight CatMull-Rom spline",
    "ProfileGroupEntry": "Just a struct to map AccountId to the UMcpProfileGroup object",
    "EUIExtensionSlot.AboveStormMessageSlot": "Just above where the storm messages are.",
    "ESpecialEventInputActionBindType.Consume": "Just consume the input, which will prevent the base behavior.  Don't broadcast SpecialEventInputPressDelegate.",
    "EFortBanHammerNotificationAction.Kick": "Just kick the player from the server",
    "ECatalogSaleType.UndecoratedNewPrice": "Just show new price",
    "EFortLeaderboardMetric.Score": "Just the regular old score a player has (eg, Wax)",
    "FortPlayerCameraBase:RespawnedInAirCameraClass": "Just-respawned (in air) camera class",
    "VehicleDigestedPIDController:KD": "KD",
    "VehiclePIDController:KD": "KD",
    "VehicleDigestedPIDController:KI": "KI",
    "VehiclePIDController:KI": "KI",
    "VehicleDigestedPIDController:KP": "KP",
    "VehiclePIDController:KP": "KP",
    "EQuickbarSlots": "Keep a list of the slots for easy access and less hard-coding.\nThis is the current order of the slots on the HUD for StW.\nBR is HarvestingTool to Gadget2.",
    "FortWeaponFxComponent_Beam:bAttachBeamToMuzzle": "Keep beam source at muzzle location all the time, not just every time the weapon fires",
    "EFortMaterialProgressBarSectionOverflowBehavior.PreserveValues": "Keep entered values precisely as they are, even if they cause sections to overflow off the bar",
    "EFriendChestInstancedType": "Keep in sync with com/epicgames/fortnite/core/game/helpers/FriendChestHelper.java InstancedType enum",
    "EFriendChestTimePeriod": "Keep in sync with com/epicgames/fortnite/core/game/helpers/FriendChestHelper.java TimePeriod enum",
    "EBehaviorTreeBranches.Count": "Keep last",
    "EBehaviorTreeBranchesBitmask.Count": "Keep last",
    "EServerStability.Count": "Keep last",
    "ESpecialEventTODMModifyType.Keep": "Keep the GameState's TODM.  Don't modify visibility.",
    "EFortServerTickRate.UseDefault": "Keep the default server tick rate (currently at 30hz in BR/Athena)",
    "FortAthenaMutator_Wax:TopPlayerInSquadID": "Keep the highest score player for a given team cached.",
    "EExecutionStatus.ExecutionPending": "Keep these two at the end",
    "FortSkyTubePhysicsComponent:SkyTube": "Keep this as a strong ptr because we're actively interacting with it",
    "DynamicXpProfileStats": "Keep track of DynamicXp stats on profile.  This is sent to MCP after player leaves hub.\nWARNING: MCP AthenaMatchStats.DynamicXp in AthenaMatchStats.java MUST match this class.",
    "FortCreativeDynamicXpComponent:AccoladeDevices": "Keep track of all devices active in this island. Needed to find accolades that did not fire for player.",
    "MashPlayerDataEntry:LastReportedTeamScore": "Keep track of last reported team score.",
    "FortAbilitySetHandle:ItemGuidsForAdditionalItems": "Keep track of the additional item entries that the ability set added.",
    "FortAthenaMutator_SpecialEvent:OverridePartsArrayIndexMap": "Keep track of the player that is doing the body parts swap.\n              Storing the index value into the SpecialEventOverrideParts array so we know which parts to give back when FortGameStateAthena_GatherCustomCharacterPartOverrides is called.",
    "FortAthenaMutator_Wax:TimeSinceLastFireMap": "Keep track of when pawns actually last fired (so they can't swap to a new weapon and not render on the map).",
    "EAthenaLootDropOverride.ForceDestroyUnlessRespawning": "Keep unless the player isn't respawning. Destroy if they can't respawn.",
    "EAthenaLootDropOverride.ForceDropUnlessRespawning": "Keep unless the player isn't respawning. Drop if they can't respawn.",
    "SavedPosition:Velocity": "Keep velocity also for bots to use in realistic reaction time based aiming error model.",
    "FortPlayerPawn:CurrentVehicle": "Keeping a non-replicated pointer to the vehicle we are in.",
    "CookProfileType:AssetPath": "Keeping asset path as string to not be considered as part of the initial startup set.",
    "FortCowVehicle:SquashTime": "Keeping track of how long we've squashed for. We use this for adjusting the squash material.",
    "FortAthenaMutator_SpecialEvent:SpecialEventsInputComponent": "Keeps input for special events that can override normal inputs.",
    "FortDecoHelper:FreeFloorPlacementRelativeRotationOffset": "Keeps the relative rotation offset, when doing free floor placement",
    "AIPawnSignificanceBasedMovementUpdateBucketGroup": "Keeps track of a group of movement components and how many frames have passed since they were updated\nlast. A single bucket will have a number of groups equal to its FramesPerUpdate value. Only one group\nper bucket is updated on a single frame, with the updated group changing each frame to achieve a\nstaggered AI pawn character movement update pattern.",
    "FabricSignificanceBasedUpdateBucket": "Keeps track of all fabric objects tracked for significance relevant to this bucket. Bucket is divided into update groups for tick",
    "AIPawnSignificanceBasedMovementUpdateBucket": "Keeps track of all movement components whose pawn's significance falls within a certain range. All\ncomponents in a bucket will update with the same frequency (i.e. one update per FramesPerUpdate\nframes) but they will be split into groups that are staggered onto different frames (i.e. a bucket\nwith FramesPerUpdate = 3 will have 3 groups with all components in the bucket spread equally\nthroughout them, and only one group will update per frame).",
    "PlayspaceComponent_StreamingController": "Keeps track of all streaming devices and selects which devices are streaming.",
    "PlayspaceComponent_DeviceTracking": "Keeps track of all the Devices On the Server",
    "DeployableBasePlot:DeferredActorIdxToResumeAt": "Keeps track of deferred actor index to resume at across time sliced operation",
    "FortAIDirectorEventManager": "Keeps track of listener delegates for AI Director events",
    "DeployableBasePlot:NumActorsFromRecordDestroyed": "Keeps track of the # of building pieces destroyed",
    "FabricSignificanceBasedUpdateBucketRuntimeGroup": "Keeps track of the current stippled update frame for this group within a bucket",
    "FortAthenaMutator_AdHocSquads:InviteDataArray": "Keeps track of the invite data of players state. This data is replicated to clients so they know which players are currently performing invites so that the local player can be informed.",
    "EncounterEnvironmentQueryInstance:NumTimesUsed": "Keeps track of the number of times we have been used",
    "DeployableBasePlot:BuildableSpaceExpansionVector": "Keeps track of the occupants buildable space vector",
    "FortLevelStreamComponent:ReceivedLoadedPlayerStates": "Keeps track of which players have finished Loading the content asked of them.",
    "PlaysetPropSettings:ActorsPlaysetPropHash": "Kept around for data deprecation towards ActorsPlaysetPropHashV2 (actor softptr to weakptr)",
    "BuildingFoundationStreamingData:ProxyInfo": "Kept around for data deprecation towards ProxyInfoV2",
    "SparksMusicPlayspaceAudioState:CurrentMode": "Key Mode State",
    "SparksMusicPlayspaceAudioState:CurrentKey": "Key State",
    "MinigameClassSlot:InventoryItems": "Key inventory items associated with this class slot",
    "NPCServiceDataRow:PricingKey": "Key to look up service price",
    "CatalogKeyValue": "Key/Value struct for CatalogOffer.MetaInfo",
    "FortAthenaMutator_TeamPawnColor:TeamVisualsMap": "Keyed by Team ID (NOTE: the first Human PvP team is 3), Values are visual data for that team.",
    "EFortBanHammerNotificationAction.BanAndKick": "Kick + ban",
    "EForceKickAfterDeathMode.KickAll": "Kick players after team death in all match types",
    "EForceKickAfterDeathMode.KickPrivate": "Kick players after team death only in private match types",
    "FortAthenaMutator_Bagel:StreakScoreMultiplierKillThreshold": "Kill count required to activate dynamic multiplier",
    "FortAthenaMutator_Mash:StreakScoreMultiplierKillThreshold": "Kill count required to activate dynamic multiplier",
    "EAthenaScoringEvent.AIKilled": "Killed an AI enemy",
    "EAthenaScoringEvent.Elimination": "Killed an enemy",
    "EDBNOPlayStyle.Thirsty": "Kills DBNO target no matter what is around",
    "FortGameplayEffectContext:KnockbackMagnitude": "Knockback Magnitude of momentum applied",
    "FortBaseWeaponStats:LongRangeKnockbackMagnitude": "Knockback magnitude of momentum applied at long-range",
    "FortBaseWeaponStats:MidRangeKnockbackMagnitude": "Knockback magnitude of momentum applied at mid-range",
    "FortBaseWeaponStats:KnockbackMagnitude": "Knockback magnitude of momentum applied at point-blank range",
    "FortPawnStats:KnockbackMultiplier": "Knockback multiplier of the pawn. (can be seen as mass of the pawn)",
    "KnockbackMutatorData:KnockbackMultiplier": "Knockback multiplier.\nNote: The knockback multiplier logic is actually handled by the GA and this is only a copy of that data.",
    "FortPawnStats:KnockbackThreshold": "Knockback threshold of the pawn. Defines how much knockback magnitude is needed to take effect",
    "EPerceptionState.Threat_Alerted": "Know there is a threat in a direction, but do not know its position",
    "EAlertLevel.Suspicious": "Know there is a threat, but do not known its position",
    "ELfgState.ChangeTagsButton": "LFG Buttons",
    "ELookAtType.HeardSound": "LKP heard sound look at",
    "ELookAtType.Ambush": "LKP look at Ambush",
    "ELookAtType.Investigate": "LKP look at investigation",
    "PlayerLODViewConeConfig:ViewConeMaxRadius": "LOD AI's < this radius and in the View Cone will statisfy the FortAILevel",
    "PlayerLODViewConeConfig:ObserverVisionAngleDeg": "LOD AI's in this viewcone will satisfy the FortAILODLevel. It's the Angle in degrees of the entire viewcone\ni.e. between the vectors that project from the extents of the veiwcone, not from the forward direction to one side!\nThey must also be a distance >= AlwaysVisibleRadius and < ViewConeMaxRadius (AlwaysVisibleRadius takes/has priority)",
    "FortMovementComp_Character:AILodRequiredForFloorCheckWhenRendered": "LOD required for AI to use more frequent floor checks for proxies when rendered.\nNote that AI most likely has floor checks disabled however (based on bUpdatesFloorWhenNotInFullSimulation and bUpdatesFloorWhenNotInFullSimulationOnlyOnNetUpdate).",
    "FortMovementComp_Character:PlayerLodRequiredForFloorCheckWhenRendered": "LOD required for players to use more frequent floor checks for proxies when rendered.\nWhether floor checks are performed at all is determined by bUpdatesFloorWhenNotInFullSimulation and bUpdatesFloorWhenNotInFullSimulationOnlyOnNetUpdate.",
    "CapMipsTextureGroup": "LOD settings for a single texture group.",
    "FortAthenaMutator_SynchronizedTeleport:CustomTeleportPlayerComponentClass": "LTM-specific Synchronized Teleport Player Component",
    "EncounterVariableSelections_LWMEncounter": "LWM Encounter Encounter Variable Selections",
    "LWMEncounterRow": "LWM Encounter Row",
    "EncounterVarRow_LWMEncounter": "LWMEncounter Encounter Variable row",
    "EncounterVariable_LWMEncounter": "LWMEncounter EncounterVariable",
    "FortWeaponRanged:LWProjectile_DamageDirection": "LWProjectile - Used to set damage direction for light weight projectile prototype",
    "FortWeaponRanged:LWProjectile_DamageStart": "LWProjectile - Used to set world space damage start for light weight projectile prototype",
    "ActionDefForUI:ActionLabel": "Label/Descriptor",
    "FortLivingWorldConfigOverride:LagerConfig": "Lager data configuration override, contains budgets, categories and event tables",
    "FortAthenaLivingWorldManager:DefaultLagerConfig": "Lager data configuration, contains budgets, categories and event tables",
    "FriendCodeLocString:Lang": "Language",
    "HeroSpecializationDesignerData:LargePreviewImage": "Large Icon",
    "CreativeIconOption:LargeIcon": "Large icon with 128*128 resolution",
    "TrapItemDefintionDesignerData:LargePreviewImage": "Large image used to show trap to user",
    "AthenaCapturePoint:MaxHUDIndicatorSize": "Largest the indicator will display",
    "BuildingGameplayActorLaserGrid:LaserGridEditorComponent": "Laser grid editor component used to visualize the laser patterns in the editor.",
    "FortPlayerController:LastMoveInputFrame": "Last Frame player had a directional movement input",
    "FortPlayerController:LastPressGamepadSprintTime": "Last Time the GamepadSprint key was pressed",
    "FortAthenaVehicle:LastOutOfHealthDamageCauser": "Last actor to cause the damage that puts the vehicle out of health.",
    "SkyfireBackpackComponent:CurrentAssociatedPlayerPawnController": "Last associated player controller determined by DoTimeUpdate",
    "FortSearchPassState:LastBeaconResponse": "Last beacon result",
    "MMAttemptState:LastBeaconResponse": "Last beacon result",
    "FortPlayerController:LastBuildableStateData": "Last buildable metadata per building type the user used; Only valid on local controller",
    "FortWeap_BuildingTool:LastResourceType": "Last cached resource type",
    "FortPlayerController:LastBuildPreviewGridSnapCentroid": "Last centroid location the build preview grid-snapped to",
    "FortAthenaVehicle:LastDamageInstigator": "Last controller to cause damage to the vehicle.\nThis can be cleared when the vehicle explodes, so use LastOutOfHealthInstigator.",
    "FortAthenaVehicle:LastOutOfHealthInstigator": "Last controller to cause the damage that puts the vehicle out of health.\nThis is better to use for when the vehicle explodes, because LastDamageInstigator can get cleared.",
    "InhibitorData:LastModifiedDate": "Last date in which these inhibitor settings were modified",
    "FortQuestManagerAttributes:DailyLoginInterval": "Last day that a log-in event was received (stored as any time within that day)",
    "FortAthenaMutator_Disco:GameMsg_LastCapturePointsEnabled": "Last group of control points enabling",
    "FortPlayerController:LastPlayerLocalMoveInput": "Last local move input accumulated across all inputs",
    "CachedSupplyDrop:LastLocation": "Last location that was saved for the supply drop, determines if the supply drop moved since last update",
    "MovingLootInfo:LastLocationInOctree": "Last location that was used to register this in the octree",
    "FortPlayerController:LastBuildPreviewGridSnapLoc": "Last location the build preview grid-snapped to",
    "FortAthenaAIBotController:LastDeathLocation": "Last location when bot died",
    "SkyfireBackpackComponent:CurrentAssociatedPlayerPawn": "Last player pawn passed into CacheVariables",
    "ValkyrieEditorConfig:LastCreatedProjectLocation": "Last project location used for project creation",
    "EAthenaCustomizationCategory.Loadout": "Last real slot",
    "SpecialActorTransform:Location": "Last replicated location of the actor",
    "SpecialActorRepData:LastRepLocation": "Last replicated location of the actor (cached)",
    "LatentRepPlayerData:LastRepLocation": "Last replicated location of the pawn",
    "SpecialActorTransform:Yaw": "Last replicated yaw of the actor",
    "SpecialActorRepData:LastRepYaw": "Last replicated yaw of the actor (cached)",
    "LatentRepPlayerData:LastRepYaw": "Last replicated yaw of the pawn",
    "FortInviteSessionParams:LastBeaconResponse": "Last response from the beacon during the join attempt",
    "FortPlayerController:LastBuildPreviewGridSnapRot": "Last rotation the build preview grid-snapped to",
    "FortAthenaAIBotController:LastDeathRotation": "Last rotation when bot died",
    "HoagieInPersistent:LastRotorImpulseTime": "Last rotor hit time",
    "FortAthenaMutator_Disco:LastRespawnableSafeZone": "Last safezone that respawning is permitted",
    "ValkyrieEditorConfig:LastSelectedTeamId": "Last selected team id (empty means no team)",
    "ControllingRiderComponent:bCanBePet": "Last state of CanBePet so the UI knows to display it or not",
    "FortPlayerControllerAthena:EndMatchHeartbeatTimestamp": "Last time a server heartbeat was seen by the client",
    "FortPlayerController:LastTimeActive": "Last time activity was detected by the server for idle tracking in creative modes",
    "FortPlayerController:IdleKickLastTimeActive": "Last time activity was detected by the server to track when to kick players",
    "FortCurieWorldNiagaraComponent:LastAudioSampleTimestamp": "Last time audio data was sampled for this player's system",
    "FortCurieWorldFirePlayerSystem:LastFireParticleSampleTimestamp": "Last time fire particle data was sampled for this player's system",
    "FortCurieWorldNiagaraComponent:LastSampleTimestamp": "Last time fire particle data was sampled for this player's system",
    "FortAthenaMutator_Heist:LastAcquiredEnemyMsgTime": "Last time the GameMsg_DiamondAcquiredByEnemy message was sent",
    "SpecialActorRepData:LastActorNotRelevantTime": "Last time the actor for this actor was NOT relevant",
    "FortPlayerController:LastSpotTime": "Last time the controller spotted an actor, used locally for throttling RPCs to the server if the user spams the spot key",
    "LatentRepPlayerData:LastLocationReplicationTime": "Last time the location was replicated to the client",
    "SpecialActorRepData:LastLocationReplicationTime": "Last time the location was replicated to the client",
    "LatentRepPlayerData:LastPawnNotRelevantTime": "Last time the pawn for this player was NOT relevant",
    "FortWeapon:LastFireTime": "Last time the weapon was fired.",
    "LatentRepPlayerData:LastYawReplicationTime": "Last time the yaw was replicated to the client",
    "SpecialActorRepData:LastYawReplicationTime": "Last time the yaw was replicated to the client",
    "FortCurieComponent:LastElectrifiedTime": "Last time this component had electricity attached (set via server time), used exclusively for visuals tracking",
    "DynamicXpPlayerSessionTransient:AfkTime": "Last time we checked, how long was player AFK?",
    "FortCreativeDynamicXpComponent:AggregatedStatsTimestamp": "Last time we received (or tried) an update from Links service",
    "FortAthenaVehicle:LastDamagedTime": "Last time we were damaged, needed for some visual effects, to prevent visuals from activating too quickly",
    "FortPawn:LastDamagedTime": "Last time we were damaged, needed for some visual effects, to prevent visuals from activating too quickly",
    "FortPhysicsPawnObject:LastDamagedTime": "Last time we were damaged, needed for some visual effects, to prevent visuals from activating too quickly",
    "ConverterPlayerInfo:LastUnconvertReason": "Last unconvert reason",
    "FortAthenaMutator_Crucible:LatestServerTime": "Last world time on the server replicated to client for calculating client-relative times in LatestCourseResults",
    "FortTimeOfDayManager:LastEnabledInhibitor": "LastEnabledInhibitor (The dominant one)",
    "SubmixEffectDynamicReverbSettings:LateDelay": "Late Reverb Delay - 0.0 < 0.011 < 0.1 Seconds - time difference between late reverb and first reflections",
    "FortPawnStats:BrakingDecelerationFalling": "Lateral deceleration when falling and not applying acceleration. @see UCharacterMovementComponent::BrakingDecelerationFalling",
    "AirControlParams:LateralFriction": "Lateral friction, ie how floaty or snappy is changing lateral direction.",
    "FortSkyTubePhysicsComponent:DebugData": "Latest debug data outputted from force calculations",
    "VkPublishedLink:ProfileResult": "Latest profile result associated with this link",
    "VkLaunchData_JoinMatchmakingSession": "Launch data payload to join an specific session",
    "VkLaunchData_Link": "Launch data payload to launch a project by link code",
    "FortCurieUpdraftActor:ProjectileZLaunchMagnitude": "Launch magnitude to apply to a projectile's Z-velocity upon entering the updraft",
    "FortCurieUpdraftActor:PlayerPawnVortexLaunchMagnitude": "Launch magnitude to use for player pawns being put into a vortex",
    "EFortPartyMemberLocation.JoiningGame": "Launching the game",
    "FortAthenaMutator_Fill:GameMsg_LavaMoving": "Lava is starting to move",
    "DynamicUIAllowed:LayerOverride": "Layer overriding the one specified in the Scene.",
    "AvailableTierLayout:Layout": "Layout asset",
    "DynamicUIAdjust:LayoutConstraint": "Layout constraint to apply to this widget when putting it is put on screen. Takes precedence over layout constraints in a DynamicUIScene's Allowed array",
    "DynamicUIAllowed:LayoutConstraint": "Layout constraint to apply to this widget when putting it on screen.",
    "GameplayStatMetadataTableRow:DisplayName": "Leaderboard display name",
    "FortMovementLeans:BlendOutLeanDirection": "Lean direction while blending out",
    "FortMovementLeans:BlendedWeight": "Lean weight between [0,1] after applying blend curve, before applying directional modulation",
    "LeashInfoOverride": "LeashInfo used to override current values",
    "PictureInPictureAction.Count": "Leave as last",
    "ESpecialEventInputActionBindType.None": "Leave the base behavior as is",
    "BakedMetadataCacheContainer:bAuthored": "Leave this true unless you want to have your values overritten by whatever is in code.",
    "FortAICloudVortex:VortexBase": "Leaves/debris swirling around the tornado.",
    "EClamberingFailedReason.Ledge_PlayerTooFar": "Ledge Clambering specific states",
    "EClamberingState.Ledge_Moving": "Ledge Clambering specific states",
    "FortAnimNode_GrindRailSlopeWarping:LeftFootFKBone": "Left foot FK bone to determine which foot definition is left and right",
    "FortWeaponRangedDual:LeftHandWeaponMesh": "Left hand weapon mesh",
    "EStructuralWallPosition.Right": "Left side of the grid cell",
    "EFortConnectivityCubeFace.Left": "Left wall cube face",
    "HeroSpecializationDesignerData:LegacyStatHandle": "Legacy Stat Handle",
    "FortPlayerMappableKeySettings:LegacyMappingNames": "Legacy mapping names for the represented mappings per device type",
    "GatherAndCollectQuestData:MiniMapViewableDistance": "Legendary",
    "FortSoundLibraryPlaybackSettings:StartTime": "Length (in seconds) in which to begin playback",
    "FMDeviceCable:CableSectionLengthAtCableHeads": "Length for one section of cable, when we consider the cable section near the cable heads",
    "FMDeviceCable:CableSectionLengthAtCableCenter": "Length for one section of cable, when we consider the center of the cable",
    "FabricSteppedPreviewFXComponent:LengthStepBeats": "Length of a step in beats",
    "FabricSteppedPreviewFXComponent:LengthTrackBeats": "Length of all the current steps in a \"row\"",
    "MidiMusicInfo:Length": "Length of the song (measure, beat, tick)",
    "MoggMusicInfo:Length": "Length of the song (measure, beat, tick)",
    "CraftingObjectComponent:CraftingTimeLength": "Length of time to craft a formula. Will transition to Ready or Resetting",
    "FortLightweightProjectileConfig:Lifetime": "Length of time to keep the projectile active before returning it to the projectile pool. -1 to make this dynamic",
    "EFabricUserOptionConversionType.Exponential": "Lerp exponentially between the minimum and maximum value.",
    "EFabricUserOptionConversionType.Linear": "Lerp linearly between the minimum and maximum value.",
    "FortPlayerState:OnPawnDiedDelegate": "Let listeners know that our pawn died.",
    "FortPlayerPawn:ZiplinePostBegin": "Let the player know when we've finished BeginZiplining.",
    "FortGameModeAthena:bIsSpawningNewLootSync": "Let the spawning system know we are Spawning New Loot",
    "FortAthenaVehicle:OnVehicleOwnerChanged": "Let us know that the owner is about to change.",
    "FortCharacterVehicle:OnVehicleOwnerChanged": "Let us know that the owner is about to change.",
    "FortGameStateAthena:bForceTeamScorePlacementOnDeath": "Let's the placement logic know to use the score placement (for when the game mode is killing off players at the end when building placements)",
    "FortHookGunRope:bProjectileGone": "Let's us know that the projectile has been destroyed and we should stop ticking.",
    "CustomHighlighting:bShouldHighlight": "Let's us know that we should be doing the custom highlighting right now.",
    "FortAthenaVehicle:OnRimScrapingChangedDelegate": "Let's us know when the rim scraping state has changed.",
    "FortAthenaVehicle:OnDisabledChangedDelegate": "Let's us know when the vehicle's disable state has changed.",
    "FortGravityGunHolder:CurrentRotationAxisIndex": "Let's us know which axis we're currently trying to rotate on, 0-2.",
    "FortVolume:IsHotfixablyEnabled": "Let's us use data to hotfix particular volumes on/off. If off, we'll destroy the volume after playlist data is loaded.",
    "FortGrindRail:bUseCustomSplitIndex": "Lets you split from a custom index in the selected spline",
    "HeroSpecializationDesignerData:LevelToXpHandle": "Level To XP",
    "XPEventEntry:NewLevel": "Level after XP earned",
    "FortExperienceDelta:Level": "Level after the delta was applied",
    "GameplayEffectVolume:GameplayEffectLevel": "Level at which the Gameplay Effect gets applied when an actor enters the volume",
    "XPEventEntry:OldLevel": "Level before XP earned",
    "EAttributeInitLevelSource.WorldDifficulty": "Level is specified directly from the world difficulty",
    "EAttributeInitLevelSource.PlayerBuildingSkill": "Level is specified from the player building skill attribute",
    "KeepItemContainer:HostUpgradeLevel": "Level of corresponding Keep structure in host's Home Base",
    "BuildingActor:CurrentBuildingLevel": "Level of the building (0-based, so level \"1\" is 0); Marked save game as this is also dynamic for spawned actors who might be upgraded",
    "FortAthenaMutator_GameplayEffect:GameplayEffectLevel": "Level of the gameplay effect class.",
    "FortItemEntry:Level": "Level of the item",
    "BuildingTrap:TrapLevel": "Level of the trap",
    "BattlePassOfferData:LevelsNeededForUnlock": "Level required in order to unlock this offer",
    "SpecialEventPhase:LevelSequence": "Level sequence to play when this phase is activated.\nThere must be a placed ALevelSequenceActor with this ULevelSequence specified.",
    "FortLevelStreamComponent": "Level stream component. Allows for any AActor to support level streaming dictated by the server.",
    "OutpostItemUpgradeData:ItemLevel": "Level the outpost item will acquire after this upgrade",
    "FortServiceTransactionInfo:UnlockLevel": "Level the service will unlock at (if bIsLocked is true)",
    "FortSpecialEventGEData:Level": "Level to apply the gameplay effect at.",
    "PhaseLevelEntry:LevelToLoad": "Level to load",
    "SpawnBuildingActorParameters:SpawnLevel": "Level to spawn Actor in",
    "NavDataSetVariantSettings:Level": "Level used to store a specific navigation data set for a given world state.",
    "EAttributeInitLevelSource.AthenaPlaylist": "Level value is determined by Athena playlist's BuildingLevelOverride value",
    "FortLevelRecord:ParentLevelIndex": "Level we are hosted inside of, or -1 for top level",
    "BattlePassLevelReward:GrantedOnLevel": "Level where the reward is granted",
    "ActorTemplateRecord:LevelRecordSaveVersion": "LevelRecordSaveVersion this record was serialized at.",
    "BuildingSMActor:SavedDirectlySupportedStatus": "LevelSaveRecord property for if the actor needs to perform physics sweeps to determine if supported by world",
    "EFortResourceLevel": "Levels of resources gathered",
    "EUnableToLoadReason.UnableToUnload": "Levels will be unloaded when this component cleans up",
    "FortEmporiumItemLicenseData:URL": "Licence URL",
    "FortSplineGroundPath:SectionsLifeTime": "Lifetime of each spline section (fade out starts after this many seconds have passed.)",
    "OldMusicTempometerComponent:TickLifetimeParameterName": "Lifetime of the current MIDI tick [0, 1).",
    "OldMusicTempometerComponent:BeatLifetimeParameterName": "Lifetime of the current beat [0, 1).",
    "OldMusicTempometerComponent:MeasureLifetimeParameterName": "Lifetime of the current measure [0, 1).",
    "EFortAmmoType.Shotgun": "Light",
    "EFortDamageZone.Light": "Light damage zone and should apply < 1.0 damage",
    "EPointLightDeviceModes.Flash": "Light flashes On and Off",
    "EPointLightDeviceModes.Windy": "Light moves from side to side",
    "FortAthenaMutator_TODOverride:LightIntensityOverride": "Lighting",
    "FortVolumeTimeOfDayComponent:bOverrideLightIntensity": "Lighting\n\nPinHiddenByDefault",
    "FortPlayerMannequin:MannequinLightingChannels": "Lighting channels to apply to all character parts and the weapon skeletal mesh.",
    "FortPlayerPawn:FortPlayerPawnLightingChannels": "Lighting channels to apply to all character parts and the weapon skeletal mesh.",
    "FortSpatialGrid": "Lightweight class to define a spatial grid",
    "FortCurieBuildingGrid": "Lightweight class to house all curie addressable non-structural support registered building pieces that are in the world",
    "FortCurieSpatialGrid": "Lightweight class to house all curie addressable non-structural support registered building pieces that are in the world",
    "FortLobbyBeaconPlayerState": "Lightweight representation of a player while connected to the game through the lobby\nexists for the lifetime of a player whether they are in the lobby or not\nassumption that the data here doesn't change often and locks when they actually join the server",
    "ValkyrieEditorConfig:bValkyrieRestrictiveMode": "Limit editor appearance and behavior to Valkyrie workflows",
    "FortOctopusVehicle:MaxVerticalBoostForce": "Limit on +Z boost force when towhook not attached",
    "FortSpaghettiVehicle:MaxVerticalBoostForce": "Limit on +Z boost force when towhook not attached",
    "SwingingControlParams:MaxReelingSpeed": "Limit on the total reeling speed, i.e. speed in the direction of the attachment point. 0 = unlimited.\nNote that the *other* reeling speed parameters actually modify acceleration, while this parameter limits speed.",
    "EFortMantisNotifyTranslationWarpLimitRule.Custom": "Limit translation warping to a custom value defined in the warping window",
    "EFortMantisNotifyTranslationWarpLimitRule.Animation": "Limit translation warping to the total translation in the animation",
    "EFortMantisNotifyTranslationWarpLimitRule.Window": "Limit translation warping to the total translation in the animation in the range covered by the warping window",
    "FortGameplayEffectDeliveryActor:OverlapRestrictions": "Limits any projectile to only be able to overlap and damage a Actor to set number of times.",
    "OverlapRestrictions:OverlapsPerActor": "Limits any projectile to only be able to overlap and damage an Actor to set number of times.",
    "OverlapRestrictions:OverlapActorTagRestrictions": "Limits the OverlapsPerActor to actors with these tags",
    "CreativeMiniMapComponentIconData:IconLinearColor": "Linear Color to use on the icon if IconColor is equal to None",
    "HoverDroneMovementComponent:TurboDeceleration": "Linear deceleration while in turbo mode.",
    "FortPortalComponent:bHasValidLinkData": "Link Data",
    "FortLinkToActorComponent:ActorTag": "Link against actor that has this exact tag.",
    "FortCreativeDynamicXpComponent:LinkId": "Link code for this island.",
    "FortCreativeDynamicXpComponent:LinkType": "Link code for this island.",
    "VkLinkCodeInfo:LinkCode": "Link code mnemonic",
    "VkLinkCodePublicModules:LinkCode": "Link code mnemonic",
    "FortPoiSwapPlayspace:LinkCodeToLoad": "Link code of the island that loads in place of POI\nUsed in published maps when access to the creator's account is not available",
    "VkLinkCodeInfo:Type": "Link code type",
    "VkLinkCodePublicModules:Type": "Link code type",
    "VkLinkCodeInfo:Version": "Link code version",
    "VkLinkCodePublicModules:Version": "Link code version",
    "EFortCreativeEventSystemType.ChannelsWithEvents": "Link devices using channel IDs and broadcast via the event router",
    "EFortCreativeEventSystemType.Channels": "Link devices using channel IDs and broadcast via the legacy messaging router",
    "EFortCreativeEventSystemType.DirectBinding": "Link devices using direct binding and broadcast via the event router",
    "SharedPersistenceRequest": "Link metadata requesting read or write access to a shared inventory",
    "FortAthenaPatrolPathPointProvider:RuntimePatrolPathWeakPtr": "Link to the Runtime PatrolPath",
    "PFWDataRegistrySourceToAdd:ServiceTableToAdd": "Link to the data table to add to the registry",
    "CatalogOfferDefinition:Fulfillments": "Link to the fulfillment objects which defines the rewards for purchasing this catalog item",
    "QuestProductData:LinkIdStrings": "LinkId mnemonics for the playlist(s) we should be considered active in",
    "FortLinkedAnimGraphsData": "Linked anim graph properties",
    "FortLinkedAnimGraphComponent:LinkedGraphsData": "Linked anim graphs properties",
    "FortAscenderZipline:LinkToActorComponent": "Links this ascender to the floor it is placed on (performs linking check in WorldReady)",
    "FortLiquidGunProjectile:RibbonManager": "LiquidRibbonManager that manages the ribbon that his projectile is in. (Set in BP)",
    "FortGameModeAthena:TimeOfDayOverrideList": "List of \"Time of Day\" overrides per playlist (temp, will be moved to playlists)",
    "AIHotSpot:NoSlotAssignees": "List of AI without slots",
    "FortPlayerInputSettings:ActionMappings": "List of Action Mappings for these settings",
    "FortPlayerInputSettings:ActionsThatShouldAlwaysBeBound": "List of Actions that are super important, meaning the user should be warned if not bound.",
    "BuildingProp_QuestGlyph:GlyphActivationEmotes": "List of Activation emotes that this fortbyte will enumerate on proximity if they are owned by the player",
    "AthenaNavPresenceDetectorComponent:NavMeshesInfo": "List of Athena NavMeshes that are being watched",
    "CreativeRoyalePlayspaceComponent_LevelReset:SavedParentWithAttachedBuildings": "List of Attached Building Actor Guids to reattach to ParentToAttachto",
    "BuildingSMActor:DamageHistory": "List of Building.DamageHistory.Size last damage event on this building. Server only",
    "FortPawn:CalloutEntries": "List of Callouts that can be displayed",
    "FortControllerComponent_Telemetry:PawnsConverted": "List of Converted pawn during a game (Even dead converted stays in that list).",
    "CreativeRoyalePlayspaceComponent_LevelReset:CurrentActorForBuildingGuid": "List of Current Actor pointer for saveed Attached Buildings",
    "FortAthenaLivingWorldCategory:EventTableVariations": "List of Event Table Variations, a random entry will be picked at runtime. If the default EventTable is set, it'll be added in the pool with a 1.0 weight.",
    "FortHabaneroModeList:TierList": "List of FFortHabaneroTier data for this game mode.",
    "FortAudioToMPCComponent:ChannelDataArray": "List of Frequencies to gather data for and the respective MPC channel to place the returned scalar data",
    "FortAudioToMPCComponent:VectorChannelDataArray": "List of Frequencies to gather data for and the respective MPC channel to place the returned vector data",
    "FortAthenaToggleGameplayEffectStateTreeTaskInstanceData:GameplayEffectClassesToAdd": "List of Gameplay Effects to add.",
    "CollisionReactionConfiguration:BuildingActorGameplayEffectClasses": "List of Gameplay Effects to apply on building actors",
    "FortAthenaToggleGameplayEffectStateTreeTaskInstanceData:GameplayEffectClassesToRemove": "List of Gameplay Effects to remove. Note: can be used together with any other *ToRemove parameter or by itself.",
    "FortPawnComponent_AIInventoryManagement:CanEquipItemTags": "List of GameplayTags required on Item to equip it, Disabled is empty.",
    "FortLocalizationService:DocumentLoadInProgress": "List of IDs of document which are loading from the cloud",
    "FortNavPathRendererComponent:PathRendererList": "List of IFortNavPathRendererInfoInterface to be rendered. Each of them has a UNavigationPath and an ordering index for path composed of multiple UNavigationPath",
    "FortScoutDroneControllingComponent:LegacyInputActionsToBlock": "List of Input Action Names to Block while in flight. This will happen regardless of whether we're in Enhanced Input or not",
    "CreativeAssetCostFilter:PlaysetDefinitions": "List of Item Definitions that will be either ignored or required.",
    "FortPlayerInputSettings:ActionKeyAliases": "List of Key Aliases for Actions",
    "AILootInfoRowEntry:LootTiers": "List of Loot Tier to drop if bShouldDropLootOnDeath is true",
    "FortGameModeAthena:PlatformOSSNamesToUploadStatsV2": "List of OSS Names to upload stats V2 for",
    "FortPoiManager:POIsExcludedFromBeginGolden": "List of POIs excluded from being Golden POIs",
    "AggregatedFunctionConfig:NoAggregationParameters": "List of Paramter Names that we don't want aggregated.\n\nNote: Currently, only Numeric properties can be aggregated. So, this has no effect\n                     for non-numeric properties. See UMeshNetworkComponent::CanAggregateParameter.",
    "FortAthenaMutator_Mash:PawnAILootDropOverrides": "List of Pawn AI Loot drop overrides.\n     Should be priority ordered, from most important to apply to least.",
    "FortObjectiveFilter_PawnDied:RequiredCausesOfDeath": "List of PawnDied causes required for this objective to progress\nNote: Will progress if the PawnDied cause matches any element in this list",
    "FortObjectiveFilter_PawnDied:ProhibitedCausesOfDeath": "List of PawnDied causes that will block progress for this objective.",
    "FortPlayspaceMatchmakingSettings:SpecificPlaylists": "List of Playlists this Playspace will accept users into if the MatchmakingRule is set to \"SpecificPlaylists\"",
    "FortAthenaLivingWorldManager:RuntimePointProviderList": "List of PointProviders created at runtime",
    "FortPawnComponent_AIFormation:RuntimeSlots": "List of Runtime Slots",
    "GameFeatureSmartObjectActivityInfo:SmartObjectActivitiesToAdd": "List of SmartObject Activities to add to this AI",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:ExcludedLTMSpawnActors": "List of SpawnActor IDs to exclude from the LTM SpawnActor lists",
    "DigestedRangedWeaponSkillCategory:Specializations": "List of Specializations for this category",
    "DigestedWeaponAccuracyCategory:Specializations": "List of Specializations for this category",
    "RangedWeaponSkillCategory:Specializations": "List of Specializations for this category",
    "WeaponAccuracyCategory:Specializations": "List of Specializations for this category",
    "FortCheckPointSplineActor:SplineMeshComponents": "List of SplineMeshComponents that connect to cover the entire spline",
    "FortAnimInput_TurnInPlace:TurnInitiatingStates": "List of States where TurnInPlace is valid to execute.",
    "FortAthenaMutator_Ashton:StoneList": "List of Stone data that represents the current state of all Stones (transient)",
    "FortAthenaMutator_Ashton:StoneDataList": "List of Stone spawn data",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:ExcludedLTMSupplyDrops": "List of SupplyDrop IDs to exclude from the LTM SupplyDrop lists",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:ExcludedDefaultSupplyDrops": "List of SupplyDrop IDs to exclude from the default SupplyDrop list",
    "SpecialEventTODMPhaseData:SubphaseDataArray": "List of TODM modifications to perform, and their timestamps within this phase",
    "FortUserOptionContainerComponent:BehaviorSetNodes": "List of UFortUserDefinedBehaviorSetNode instances created by plugin maker to drive plugin behaviors",
    "PlayerAbilitiesOnGamePhaseAbilityList:AbilitySetsToAdd": "List of abilities to give to players when they reach this game phase.",
    "PlayerAbilitiesOnGamePhaseAbilityList:AbilitySetsToRemove": "List of abilities to remove from players when they reach this game phase.",
    "CatalogPurchaseInfoGift:ReceiverAccountIds": "List of account IDs to receive the gift",
    "DagwoodActionDefForUI:ActionDefForUI": "List of action prompts for a given seat",
    "FortActiveMontageDecisionWindow": "List of active montage input actions",
    "LevelInstanceGameplayVolume:MutatorListComponent": "List of active mutators",
    "FortPawnComponent_PassiveHealer:PassiveHealerActivitiesTable": "List of activities run by the NPC (Emotes, Interact Text, Greeting Text)",
    "FortAthenaMutator_SpecialEvent:ActorSpawnDelegateClasses": "List of actor classes for which to trigger callbacks to OnActorPreSpawnInitialization() and OnActorSpawned()",
    "FortGameStateComponent_RealitySapling:SaplingSpawnEnvQueryActorClassesToAvoidByBounds": "List of actor classes that SaplingSpawnEnvQuery should avoid by their bounds. This is generated at match start before sapling spawning starts and\ncached in SaplingSpawnEnvQueryActorsToAvoidByBounds for use with eqs context",
    "FortAthenaAIBotController:NoSmashActors": "List of actors that the bot should ignore when checking for obstacle in its path or blocking its movement.",
    "DestroyActorsAndComponentsMutator_ActorDefinition:ActorsToProcess": "List of actors that were created since the last time we processed this definition.\nThey will be processed when this definition becomes enabled.",
    "FortGameFrameworkComponent_EventMode:FocusActors": "List of actors to focus on when they are inside their focus distance",
    "FortAthenaMutator_InventoryOverride:AlwaysGiveLoadout": "List of additional items to always give the player when applying any loadout",
    "BuildingFoundation:AdditionalWorlds": "List of additional worlds to pick from. If no BuildingGroups or AdditionalWorlds are selected, any building group could be used.",
    "FortFactionInfo:SpecificRelations": "List of affiliation component UIDs representing actors that this faction has specific attitude towards",
    "FortAffiliationActorIdentifierList:AffiliationComponentUIDs": "List of affiliation components UIDs",
    "FortActorComponent_Affiliation:GameplayOwnedAffiliationComponents": "List of affiliation components currently owned (for relation propagation purposes)",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:Aircrafts_GameMode": "List of aircrafts",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:SortedStormCapPrivateTeams": "List of alive teams that are sorted based on damage dealt",
    "FortGameStateComponent_AffiliationManager:AffiliationComponents": "List of all AffiliationComponent currently registered",
    "FortCreativeCreatureManagerComponent:CreatureManagerInfos": "List of all CreatureManagerInfo Components in the minigame",
    "FortWeapon:CustomPartsToShowWhenHolstered": "List of all Custom Part types to show even if the weapon is hidden by holstering.\n     This allows us to hide a weapon when holstered, but still show specific parts.\n     (Example: the NyxGlass swinging weapon where we want the blades to hide when holstered but we want the grappling rope apparatus to remain visible.)",
    "FortAthenaLivingWorldManager:PointProviders": "List of all Point Providers active and registered",
    "FortAthenaLivingWorldPreloader:LoadedSpawnerDataClass": "List of all SpawnerData pre-loaded assets",
    "FortPawn:HolsterWeaponRequests": "List of all active holster requests.",
    "FortAffiliationComponentSpecificRelations:Identifiers": "List of all affiliation UIDs with specific relations",
    "FortAffiliationComponentSpecificRelations:Components": "List of all affiliation components with specific relations",
    "FortFactionInfo:Members": "List of all current faction members",
    "FortAthenaLivingWorldPreloader:LoadedActorClasses": "List of all event asynchronously loaded actors",
    "FortMissionManager:MissionEventNames": "List of all event names associated with particular missions",
    "FortMission:MissionEventNames": "List of all event names associated with this particular mission. Do not edit this manually in most conditions",
    "FortCreativeIndexedObjectRegisterComponent:ObjectIndexMap": "List of all objects and what index they are in.",
    "VoteBroadcasterComponent:VoteRuntimeList": "List of all of the runtime tracking for every vote managed by this component\nNOTE: This is across ALL vote sessions and indexed by the structures within the VoteSessionRuntimeList list",
    "BagelPlayerDataEntry:Scores": "List of all scores per type",
    "FortAthenaLivingWorldManager:SpawnedSingleUseSpawnerData": "List of all single use spawner data that have been spawned.",
    "FortActorComponent_Affiliation:SpecificRelations": "List of all specific relations this actor has with other actors",
    "FortMinigameStatsComponent:LoadedStats": "List of all stats available and loaded during BeginPlay, not including player-defined stats",
    "FortMinigameStatsComponent:AvailableStats": "List of all stats available to be loaded, not including player-defined stats",
    "FortMinigameStatsComponent:TrackedStatObjects": "List of all stats the minigame has been told to track\nAssembled from various sources, including end conditions",
    "FortAthenaMutator_SpecialEvent:HLODActorsToHideNames": "List of all the HLOD actors (specified through their ActorFName variable) that should be hidden on the client during this event.",
    "FortFactionInfo:SharedBBInfos": "List of all the current shared BBs existing in this faction.",
    "GameplayEventListenerList": "List of all the listeners of an event",
    "PerkAvailabilityContainer:AvailablePerks": "List of all the perks that could be assigned to the agent on spawn.",
    "VoteBroadcasterComponent:VoteResultsList": "List of all the vote selection results for every vote scenario for every session",
    "VoteBroadcasterComponent:VoteSessionRuntimeList": "List of all the vote sessions this components is managing\nNOTE: This list captures only the high level state of sessions.\n              The actual vote data is in VoteRuntimeList and is to be referenced by using the VoteSessionId as a key.",
    "FortSimpleWidgetAnimations:Targets": "List of animations to play",
    "FortMission:MissionPreloadAssets": "List of assets that we want to make sure are preloaded by the client for this mission to prevent sync loads.",
    "MyFortCategoryData:Attributes": "List of attributes belonging here",
    "FortGameplayCueSpawnResult:AudioComponents": "List of audio components spawned, there may be null pointers here as it matches the defined order",
    "FortPartyRiftPortalManager:AllPortals": "List of available portals",
    "FortMinigameSettingsBuilding:RichTextStylesList": "List of available text styles sets to use on the island.",
    "FortPawnComponent_SpeechBubble:SpeechBubbleTexts": "List of available texts",
    "FortAthenaMutator_PlayerDamage:BoneDamageMultipliers": "List of bones that have a specific damage multiplier associated with",
    "FortAthenaBeaconComponent:RegisteredActors": "List of bots currently registered (attracted) by this beacon",
    "CreativeDeviceInstanceInfo:DeviceFunctionSubscriptions": "List of bound subscriptions.  This includes both Functions and Events\nTODO: Possibly rename this to avoid confusion of it being for Functions only.  Possibly just make it DeviceSubscriptions Or DeviceBindings.",
    "AthenaFortAIBotDigestedWeightedBuildingList": "List of build descriptor with a digested weight associated for random selection by the bot.",
    "AthenaFortAIBotWeightedBuildingList": "List of build descriptor with a weight associated for random selection by the bot.",
    "ConstructionBuildingInfo:BuildingActorClass": "List of building actors per material",
    "ConstructionBuildingList:BuildingList": "List of building actors per material",
    "BuildingFoundation:BuildingGroups": "List of building groups this foundation is allowed to pick from. If no BuildingGroups or AdditionalWorlds are selected, any building group could be used.",
    "ChoiceData:Items": "List of buttons that will be shown on popup",
    "FortAthenaLivingWorldEvent:CalendarEventConditions": "List of calendar event condition that must be met at the beginning of the match for the event to be active.",
    "FortGameState:TimeOfDayCallbacks": "List of callbacks that were registered before the day/night handler was",
    "ValkyrieEditorPermissionSettings_Editor:AllowedPlacementToolEntries": "List of categories to allow in placement tool",
    "Playspace:ChildPlayspaceClasses": "List of child Playspace classes that are to be spawned by this Playspace",
    "FortEmporiumFilterCategory:SubcategoryIDList": "List of child categories",
    "ObjectInteractionBehavior:ValidAllowedClasses": "List of classes that can be affected, derived from InteractionClasses data table",
    "ObjectInteractionBehavior:ValidForbiddenClasses": "List of classes that cannot be affected",
    "FortScriptedActionManager:PendingClientEvents": "List of client events that need to be processed but have not yet",
    "StateTreeManagerComponent:SimulatedDataList": "List of client-side data required to simulate StateTrees on the [Client]\n    If the owning Actor of this component is the [Authority], this list will be empty and ignored",
    "FortAthenaLivingWorldEvent:DespawnConditions": "List of conditions that will be tested to despawn the actor. Works as an OR: only one condition of the list needs to be true to trigger the despawn flow.",
    "FortMinigame:EndConditionArray": "List of conditions that, when met, will automatically end the minigame",
    "FortGameModeAthena:LiveSpectators": "List of connected live spectators. Unordered.",
    "FortGameStateAthena:PartyMemberSpectatorArray": "List of connected spectate-a-party-member spectators.\nThese spectators are also included in the SpectatorArray to simplify things;\nwe just want to keep track of them separately too.",
    "FortGameStateAthena:SpectatorArray": "List of connected spectators. Unordered.",
    "TeamBucketLoadout:CosmeticLoadout": "List of cosmetics on this loadout",
    "FortCreativeBudgetTracker:Budgets": "List of cost Budgets y",
    "FortActorComponent_Affiliation:CurrentFactions": "List of current factions this actor belongs to",
    "FortAthenaAIBotController:ActiveWeakSpots": "List of currently active weak spots for this bot",
    "FortPlayerController:ActiveWeakSpots": "List of currently active weak spots for this player",
    "FortPawn:OverlappedSkyTubes": "List of currently overlapped skytubes, ordered by time of entry ascending.",
    "StateTreeManagerComponent:StateTreeRuntimeDataList": "List of currently registered authoritative StateTree elements being run on the owning actor of this component\n    This list will be populated if the owning Actor of this component is the [Authority]\n    If the owning Actor is not the [Authority], it is a [Client] and will be simulating through the SimulatedDataList",
    "FortAnimNode_CurveFilterSlot:CurveNames": "List of curves to allow or block depending on filter mode",
    "FortAthenaMutator_LootChoice:LootOverrideDataList": "List of custom loot override data",
    "FortFirstPersonCameraController:BodyPartGroupingsToHide": "List of customized body part groups to hide when using the custom camera mode",
    "BattlePassOfferSectionData:SectionOfferList": "List of data for battle pass offers in this section",
    "FortInteriorAudioComponent_BuildingGrid:Dictionaries": "List of dictionary entries, which allow us to define properties of building pieces per edit configuration",
    "InteriorAudioDictionary:Entries": "List of dictionary entries, which allow us to define properties of building pieces per edit configuration",
    "EConstructionBuildingType": "List of different building types a bot can construct",
    "EOrientedConstructionBuildingType": "List of different building types including orientation/variation that a bot can construct",
    "EReachLocationValidationMode": "List of different ways to estimate if a bot can/should reach a location",
    "SpecialEventStatComponent:StatFastArray": "List of dynamic, replicated stats",
    "ValkyrieProjectDescriptor:EditorPermissions": "List of editor permission roles required to open/edit the project",
    "FortGameplayCueNotify_Loop:RecurringResult": "List of effects spawned by a recurring effect",
    "FortGameplayCueNotify_BurstLatent:BurstResult": "List of effects spawned by burst",
    "FortGameplayCueNotify_Loop:ApplicationResult": "List of effects spawned by burst",
    "FortGameplayCueNotify_Loop:RemovalResult": "List of effects spawned by the removal",
    "FortGameplayCueNotify_Loop:ApplicationBurst": "List of effects to spawn on application. These should not be looping effects!",
    "FortGameplayCueNotify_BurstLatent:BurstEffectData": "List of effects to spawn on burst",
    "FortGameplayCueNotify_Loop:RecurringBurst": "List of effects to spawn on recurring effect. E.g, each time a DOT ticks. Should never be looping effects!",
    "FortGameplayCueNotify_Loop:RemovalBurst": "List of effects to spawn when cue is removed. Should not be looping!",
    "PapayaServerMigrationComponent:AlertDataList": "List of events the server wants to broadcast",
    "PlayspaceComponent_ServerExpiration:AlertDataList": "List of events the server wants to broadcast",
    "FortPlayspaceMatchmakingSettings:ExcludedPlaylists": "List of excluded Playlists this Playspace will not accept users for if the MatchmakingRule is set to \"AllPlaylists\"",
    "ValkyrieConcertTransactionFinalizedEvent:ReferencedExternalModules": "List of external modules that are referenced by this transaction",
    "FortFactionInfo:FactionRelations": "List of faction tags respective to relation with this one (relations are symmetric)",
    "FortFactionInfo:AllowFriendlyFireAgainstFactions": "List of factions that this faction is allowed to apply friendly fire",
    "FactionData:AllowFriendlyFireAgainstFactions": "List of factions that this faction is allowed to apply friendly fire (not symmetrical)",
    "FortGameFeatureStatusList:Features": "List of features",
    "EFortUIFeature": "List of features that can be enabled/disabled in the UI as a whole",
    "EFortFrontEndFeature": "List of features that can be enabled/disabled in the frontend",
    "DigestedRangedWeaponSkill:FiringPatterns": "List of firing patterns per range.",
    "RangedWeaponSkill:FiringPatterns": "List of firing patterns per range.",
    "DigestedRangedWeaponSkill:TargetInAirFiringPatterns": "List of firing patterns that can be used for targets that are considered \"in air\" (i.e. falling, jumping, swinging, etc.)",
    "RangedWeaponSkill:TargetInAirFiringPatterns": "List of firing patterns that can be used for targets that are considered \"in air\" (i.e. falling, jumping, swinging, etc.)",
    "FortPhysicsConstantForceComponent:ForcesToApply": "List of forces that will be applied to the object each tick of the physics thread",
    "FortPhysicsMagneticForceComponent:ForcesToApply": "List of forces that will be applied to the object each tick of the physics thread",
    "FortAthenaMutator_RemoveGameFeatures:AllowedGameFeatures": "List of game features that are Allowed",
    "FortGameModeAthena:CoreGameModeModifiers": "List of gamemode gameplay modifier item definitions to add when the playlist loads",
    "FortGameplayEffectContainer:OwnerGameplayEffectClasses": "List of gameplay effects to apply to the owner",
    "FortGameplayEffectContainerSpec:OwnerGameplayEffectSpecs": "List of gameplay effects to apply to the owner",
    "FortGameplayEffectContainer:TargetGameplayEffectClasses": "List of gameplay effects to apply to the targets",
    "FortGameplayEffectContainerSpec:TargetGameplayEffectSpecs": "List of gameplay effects to apply to the targets",
    "FortGameStateZone:GlobalGameplayEventListeners": "List of global gameplay event listeners; Not replicated, but maintained separately on client & server as desired by registrars",
    "FortDeveloperSettings:HardcoreModifierOverrides": "List of hardcore modifiers to apply, bypassing MCP",
    "EQSActorSpawnerData:SpawnerHelperDestroyActorsInAreaClasses": "List of helper classes for destroying actors in the area specified by the information in the classes.",
    "STWDeveloperSettings:DevHeroes": "List of heroes for quicker access than typing names in the console. Use Cheat ChangeHeroClass <array index> instead.",
    "VoteRuntime:VoteSelectionIds": "List of ids for all possible vote selections for this vote",
    "FortSnapOnSurfaceComponent:IgnoredTraceActors": "List of ignore actors in the trace, the parent actor is automatically ignored.",
    "CraftingObjectComponent:LastIngredientStringForAnalytics": "List of ingredients that were used for the most recent crafting result - saved for analytics",
    "Playspace:ChildPlayspaces": "List of instanced child Playspaces.\nThere are a multiple ways child Playspaces could get added to this list:\n- Spawned via the ChildPlayspaceGameClasses list\n- Added by a GameplayVolume by its PlayspaceClassTemplate\n- Game logic could spawn one and add it",
    "FortGameplayEffectContainer:ActivationCues": "List of instant gameplay cues that are applied to the owner's avatar, at the avatar's location. Used for explosions or cast effects",
    "FortGameplayEffectContainerSpec:ActivationCues": "List of instant gameplay cues that are applied to the owner's avatar, at the avatar's location. Used for explosions or cast effects",
    "FortGameplayEffectContainer:ImpactCues": "List of instant gameplay cues that are applied to the owner's avatar, but at the location of the targets. Used for impact effects for ranged attacks",
    "FortGameplayEffectContainerSpec:ImpactCues": "List of instant gameplay cues that are applied to the owner's avatar, but at the location of the targets. Used for impact effects for ranged attacks",
    "WeightedAIInventoryLoadout:Items": "List of inventory items and their quantities",
    "FortCraftingResultNotification:ItemsCrafted": "List of item ids for all of the items created by the crafting result",
    "FortBotDigestedHealingItems:ItemTags": "List of item tags representing items to use when under UseItemResourceThreshold. Items are evaluated by order in the list (first one has priority over second one, etc.)",
    "FortBotHealingItems:ItemTags": "List of item tags representing items to use when under UseItemResourceThreshold. Items are evaluated by order in the list (first one has priority over second one, etc.)",
    "TeamBucketLoadout:ItemLoadout": "List of items on this loadout",
    "FortInventory:PendingExistingItems": "List of items that need to be added to the inventory",
    "ScoutDronePickupTargets:Items": "List of items to be attached to the drone",
    "SpecialEventInputHelperComponent:IgnoredAnyKeyEventKeyNames": "List of key names that should NOT trigger the AnyKeyPressedDelegate",
    "BagelPlayerDataEntry:AIKillTimes": "List of last AI kill server times, used for the dynamic score multiplier.",
    "MashPlayerDataEntry:AIKillTimes": "List of last AI kill server times, used for the dynamic score multiplier.",
    "AthenaMarkerComponent:LocalMarkersDeletedBeforeReplication": "List of locally deleted markers that can be ignored when replication happens",
    "FortGameplayCueNotify_Loop:LoopingResult": "List of looping effects spawned",
    "FortAthenaMutator_WarEffort:WeaponChoices": "List of mappings of mesh data name to weapon fname & it's weight",
    "AthenaAIServiceGroupInfo:GroupMembers": "List of members of this group",
    "BakedMetadataConfig:MetaDataKeysToCopy": "List of metadata keys this config supports",
    "FortAthenaMutator_Missions:Missions": "List of missions to load for this mutator",
    "NPCCharacterModifiersComponent:Modifiers": "List of modifiers that will customize the character that will be spawned.",
    "SupplyDropModifierData:ModifierList": "List of modifiers to apply to the supply drop identified by SupplyDropID",
    "CustomAccessoryHatReactiveMorphs:CapMorphTargets": "List of morph target names to apply for caps.  NOTE: Hats rest on top of the head, whereas caps clamp onto the head a bit.",
    "CustomAccessoryHatReactiveMorphs:HatMorphTargets": "List of morph target names to apply for hats.  NOTE: Hats rest on top of the head, whereas caps clamp onto the head a bit.",
    "CustomAccessoryHatReactiveMorphs:HelmetMorphTargets": "List of morph target names to apply for helmets.",
    "CustomAccessoryHatReactiveMorphs:MaskMorphTargets": "List of morph target names to apply for masks.",
    "DaySequenceTrackSettings:ExcludeDefaultTracks": "List of movie scene track classes not to be added automatically.",
    "DaySequenceTrackSettings:DefaultTracks": "List of movie scene track classes to be added automatically.",
    "AthenaDeveloperSettings:DeveloperGameplayModifiers": "List of mutators that are also loaded in PIE",
    "GasDebuggerMenu:NearbyActorsWithASC": "List of nearby actors with ASC. Recalculated when the user opens the combobox",
    "MilkshakeControllerComponent:NearbyBuildingActors": "List of nearby building actors used for spawning building damage fx",
    "AccountIdAndMatchEndData:Advance": "List of objective-stat/count pairs or objectives to advance and by how much",
    "FortGameFeatureStatusList:FeatureOptionalInstalls": "List of optional installs for features",
    "OutpostItemUpgradeData:RequiredAccountItems": "List of other account items (with quantity) required for this upgrade",
    "OutpostItemUpgradeData:RequiredItems": "List of other world items (with quantity) required for this upgrade",
    "FortGameState:ManagedCharMovementComponents": "List of our managed movement components that are ticked by us.",
    "FortAthenaLivingWorldManager:LagerConfigOverrides": "List of overrides for the Lager Configuration",
    "TeamBucketCosmeticLoadoutContainer:PartOverrides": "List of part overrides, to be filtered by gender and body type",
    "FortGameplayCueSpawnResult:ParticleComponents": "List of particle components spawned, there may be null pointers here as it matches the defined order",
    "FortAthenaPartyRiftPortal:PartyMemberNetIdList": "List of party member UniqueNetIds, not including owner, used to display members' names and thumbnails.\n* The owner info is kept separate in OwningPlayerNetId, since their name and thumbnail go into a separate spot on the local UIs.",
    "FortPlayerControllerZone:RejoinablePartyMembers": "List of party members that we have seen in this zone.  If the players rejoin the zone and are not in the party,\nwe will send them an invitation to this party if we are the leader.  As a UPROPERTY for display/debug purposes only.",
    "FortAthenaPatrolPath:PatrolPoints": "List of patrol points linked in this patrol path",
    "FortAIManagerMinigameComponent:SpawnableAITypeTags": "List of pawn spawn type tags which this minigame will track",
    "IgnoredPlayerPawnArray:IgnorePawnEntries": "List of pawns are allowed to freely pass through the holding area",
    "FortAthenaMutator_Heist:ExitCraftOverlappingPawns": "List of pawns overlapping the current instance of the ExitCraft",
    "FortMovementComp_CharacterAthena:JumpPenalties": "List of penalties applied to the player's movement on quick sequential jumps. It starts with the first penalty\nand each consecutive jump performed before the JumpPenaltyResetTime will use the next penalty in the list.",
    "AthenaCapturePoint:CaptureSpeedPerPlayerList": "List of percents based on number of players earning a speed boost to taking the point",
    "FortPhysicsOverlapComponent:SleepIncrementedPhysicsObjects": "List of physics objects that we have incremented to never sleep as a result of overlap",
    "ValkyrieConcertTransactionFinalizedEvent:PlaceholderAssets": "List of placeholder assets referenced by PlaceholderAssetMappings",
    "EFortMtxPlatform": "List of places Mtx ecommerce platforms",
    "ClientIdRestrictions:RestrictedPlatforms": "List of platforms this client id may not play with",
    "FortMission:ParticipatingButDisconnectedAccounts": "List of player accounts that are allowed to participate in the mission but are currently disconnected.",
    "FortMission:ParticipatingAccounts": "List of player accounts that are allowed to participate in the mission.",
    "FortAthenaLivingWorldPlayerTracker:TrackedPlayerControllers": "List of player controller currently registered inside the TrackedPlayerBVTree.",
    "FortPerModeInputConfig:FortPlayerInputSettingsNames": "List of player input settings (presets)",
    "TournamentWeaponKillStat:PlayerStats": "List of player kill stats for this weapon.",
    "FortAthenaLivingWorldPlayerTracker:TrackedPlayerPawns": "List of player pawn currently registered inside the TrackedPlayerBVTree.",
    "FortAthenaMutator_OverrideInventoryOnce:AlreadyProcessedPlayerStates": "List of player states that have already been given overridden inventory once (and as such will NOT have their inventory overridden again.)",
    "FakeKillRelevancyPlayerDataEntry:Victims": "List of players to be fake killed",
    "Playspace:PlayspaceUsers": "List of players who are currently under the jurisdiction of this Playspace",
    "FortAthenaMutator_RespawnWaveTeamData:PlayerStates": "List of players who will be respawned at the TimeStamp",
    "FortAthenaMutator_Disco:DancingPlayerList": "List of playerstates of players who are dancing on a capture point that their team owns",
    "FortAthenaMutator_Disco:PrevDancingPlayerList": "List of playerstates of players who were dancing on a capture point that their team owns on the previous frame",
    "FortVolume:ActorFilterPolicies": "List of policies that should be executed when an actor is tried to be added to this volume",
    "FortCurieExecutionEntry": "List of possible elements that can be applied by this component and rules dictating when they can be applied *",
    "ECustomLootSelection": "List of possible loot table overrides used by this option",
    "EFortFactionAttitude": "List of possible relation between factions (lower value = higher priority when multiple results)",
    "EFortUIFeatureState": "List of possible states for the features",
    "EFortFrontEndFeatureState": "List of possible states for the features, and reasons why they might be disabled",
    "EFortFrontEndFeatureStateReason": "List of possible states for the features, and reasons why they might be disabled",
    "EInputPriority": "List of possible states for the features, and reasons why they might be disabled",
    "TileGroupSelection:TileGroupOptions": "List of potential TileGroups to be used. One of these will be chosen based on weight to be used randomly in this theme.",
    "ValkyrieFortniteEditorSettings:AssetNamePrefixesToRemove": "List of prefixes to remove when converting an asset name to a display name",
    "FortPawnComponent_Convert:PreviousConverters": "List of previous converters player state (does not include active converter)",
    "ValkyrieFortniteEditorLiveEditSettings:ExplicitlySupportedProperties": "List of properties that are explicitly supported for LiveEdit",
    "DaySequenceTrackSettings:DefaultPropertyTracks": "List of property names for which movie scene tracks will be created automatically.",
    "DaySequenceTrackSettings:ExcludeDefaultPropertyTracks": "List of property names for which movie scene tracks will not be created automatically.",
    "FortGeneratePropertyPathData:PropertyNames": "List of property names on the root property to generate paths for",
    "VkLinkCodePublicModules:Public_Modules": "List of public modules referenced by the link code (ModuleId -> Version)",
    "FortTheaterMapTileData:LinkedQuests": "List of quests this tile is explicitly linked to, will be used to auto selecting. This is only designed for specific hexes, if we need it to work for randomized hexes we need to do tag inspection",
    "FortTheaterTileEditorData:LinkedQuests": "List of quests this tile is explicitly linked to, will be used to auto selecting. This is only designed for specific hexes, if we need it to work for randomized hexes we need to do tag inspection",
    "FortItemList:ItemInstances": "List of reference type wrappers around the replicated data.\nWe want the public API to use polymorphism-enabled reference types (i.e.,UObject).\nWe use structs for fast replication, and build up UObject wrappers for API clarify.",
    "PlaylistOverrideData:RegionsDisabled": "List of regions that need to be disabled for the playlist",
    "StateChangeDataArray:StateChangeDataList": "List of replicated StateTree data from the server",
    "SpecialActorRepDataArray:SpecialActorList": "List of replicated actor data (1 for each special actor in the list)",
    "GameplayMutatorObjectDataArray:ObjectDataList": "List of replicated object data",
    "LatentRepTeamDataArray:PlayerData": "List of replicated player data (1 for each player on the team)",
    "RepParamBoolArray:RepParamArray": "List of replicated structures this array is tracking",
    "RepParamFloatArray:RepParamArray": "List of replicated structures this array is tracking",
    "RepParamIntegerArray:RepParamArray": "List of replicated structures this array is tracking",
    "GameplayStateMachineArray:StateMachineItems": "List of replicated vote result structures this array is tracking",
    "TornadoClientSimulationArray:ActorsToSimulateArray": "List of replicated vote result structures this array is tracking",
    "VoteSelectionResultsArray:VoteSelectionResults": "List of replicated vote result structures this array is tracking",
    "VoteRuntimeArray:VotingResults": "List of replicated vote structures this array is tracking",
    "VoteSessionRuntimeArray:VotingSessions": "List of replicated vote structures this array is tracking",
    "FortBotTeamInfoAthena:ReservedLoots": "List of reserved loot",
    "EFortResourceType": "List of resource types in the game.",
    "EventResponderTrackingItem:EventResponders": "List of responders that all want to respond to the EventTag",
    "TaggedSoundBankResponseList": "List of responses (in priority order) for a given tag",
    "BattlePassOfferData:RewardItemQuantity": "List of reward Item IDs and quantities to grant",
    "FortCollectionBookRewards:Rewards": "List of reward items",
    "FortAthenaMutator_Bagel:RiftDamagerInfo": "List of rift that have been damaged with all the players that did damage",
    "FortAthenaMutator_Mash:RiftDamagerInfo": "List of rift that have been damaged with all the players that did damage",
    "FortAthenaMutator_SafeZoneOrderOptimize:LockedInRouteIDs": "List of route indices that all possible route orders will start with.\nReplicated for debug purposes only.",
    "FortAthenaMutator_Bagel:ScoreEventList": "List of score events with their respective value/informations",
    "FortAthenaMutator_Mash:ScoreEventList": "List of score events with their respective value/informations",
    "BagelObjectiveAreaInstanceData:ScoreMultipliers": "List of score multipliers spawned inside the area",
    "MashObjectiveAreaInstanceData:ScoreMultipliers": "List of score multipliers spawned inside the area",
    "FortBotDigestedHealingItemsList:HealthItems": "List of shield items that can be used under specific shield thresholds",
    "FortBotDigestedHealingItemsSpec:HealthItemsList": "List of shield items that can be used under specific shield thresholds",
    "FortBotHealingItemsList:HealthItems": "List of shield items that can be used under specific shield thresholds",
    "FortBotHealingItemsSpec:HealthItemsList": "List of shield items that can be used under specific shield thresholds",
    "FortPawnComponent_AIFormation:Slots": "List of slots locations",
    "FortPlayerPet:SoundBank": "List of sounds that can be played, pulled from the pet item definition",
    "SoundEffectVariant:SoundsToModify": "List of sounds that should have an effect applied. If there are none, the effect will be applied to all matching\ncomponents. If both the sounds to modify and components to apply to are empty, then the effect will not be\napplied",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:SpawnActorDataList": "List of spawn actor data used in the game",
    "MMRSpawningBracketBotDataTableRow:PhaseSpawningItems": "List of spawning infos for this bracket",
    "MMRSpawningPlayerBotsRuntimeInfo:SpawningInfos": "List of spawning infos for this bracket",
    "MMRPhaseSpawningDataTableInfo:SpawningItems": "List of spawning infos for this phase",
    "FortCreativeSplineModificationComponent:SplinePoints_NonSerializable": "List of spline points used to communicate updates to the spline from the server to the client in Creative/VK-Edit",
    "GameplayStateMachineManager:StateMachineList": "List of state machines this component is managing",
    "DynamicXpAggregatedStats:Accolades": "List of stats per accolade",
    "SaveRestrictions:StatsAllowedToSavePostDeath": "List of stats that can be saved even after the player has died (number of deaths, damage taken, etc.)",
    "FortMinigameStatsComponent:PersistentStatList": "List of stats that need to be persistent",
    "SpecialEventStatArray:Stats": "List of stats to replicate for the owning actor",
    "FortGameStateAthena:WinningPlayerList": "List of struct data for all the players that have won the match",
    "FortTheaterMapViewer:MissionAlertAvailabilityList": "List of structs that each provide the available mission alerts for a single theater",
    "FortTheaterMapViewer:MissionAvailabilityList": "List of structs that each provide the available missions for a single theater",
    "FortEmporiumItemData:AssetIds": "List of sub-assets contaned by item",
    "FortGameplayCueSpawnCondition:DisallowedSurfaces": "List of surfaces that prevent this, if empty nothing will prevent it",
    "FortGameplayCueSpawnCondition:AllowedSurfaces": "List of surfaces that will accept this, if empty all will accept",
    "FortAthenaLivingWorldEvent:TagDensityConditions": "List of tag density that must be respected to be able to spawn on a point.",
    "FortQuestMapMarkerSettings:QuestMapMarkerTagNamesData": "List of tag names and names of the maps we expect them in. Position is collected from actors that have these tags",
    "FortGameStateComponent_AffiliationManager:BlockResetSpecificRelationTags": "List of tags that blocks a reset specific relations for factions that are set to allow members to reset their relations based on various conditions",
    "FortActorComponent_Affiliation:CurrentBlockResetRelationTags": "List of tags that the owner listens and that blocks reset relation until removed from owner",
    "BagelScoreData:ExclusionTags": "List of tags to exclude to make the event invalid",
    "MashScoreData:ExclusionTags": "List of tags to exclude to make the event invalid\n     Uses general hierarchy matching, NOT exact matching.",
    "FortAbilityTargetSelectionList:List": "List of target selections to apply, will be applied in order",
    "FortAbilityTargetSelectionList": "List of target selections, to be applied in order",
    "FortAthenaMutator_InventoryOverride:TeamLoadouts": "List of team mapping to the loadout array (if empty, InventoryLoadoutIndex is used for all teams)",
    "FortAIComponent_Telemetry:TelemetryData": "List of telemetry data instances for this owner",
    "BattlePassOfferData:RequiredItemsForUnlock": "List of template IDs that need to be purchased in order to unlock this offer",
    "FortSpawnActorData:SpawnedFortSpawnActors": "List of the actual actors spawned by the SpawnActorInfo",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:BuildingGameplayActorSpawnData": "List of the building gameplay actor infos that are actually used in the game",
    "FortTheaterMapViewer:TheaterList": "List of the data for different theaters obtained from the backend",
    "FortAthenaMapInfo:SupplyDropInfoList": "List of the different supply drops the game can spawn and the info required to do so",
    "SupplyDropZoneBasedSpawnData:SpawnedSupplyDrops": "List of the drops that have been spawned in the current wave",
    "VoteSessionSettings:VoteSettingsList": "List of the individual voting session for this session",
    "VoteSettings:VoteSelections": "List of the possible selections for this vote",
    "VoteResponderComponent:SupportedVoteSelections": "List of the possible selections this responder can allow a player to vote on",
    "FortAthenaMutator_GG:WeaponEntries": "List of the possible weapons",
    "FortCreativePatrolPath:CreativePatrolPoints": "List of the replicated creative devices (holding the patrol point component) needed for UI/Selection",
    "VoteRuntimeArray": "List of the runtime data for all votes for a given session (implemented as a fast array)",
    "VoteSessionRuntimeArray": "List of the runtime tracking for all sessions currently being managed by the object this lives in",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:SupplyDropSpawnDataList": "List of the supply drop infos that are actually used in the game",
    "PlayspaceUserList:PlayspaceUsers": "List of the users this list is tracking",
    "GameplayStateSettings:StateTransitions": "List of the various transitions this GameplayState can make to other GameplayStates",
    "WinConditionScoreData:ScoreDataList": "List of the ways you can attain a score and the data needed to determine its logic",
    "FortGameStateAthena:WinningTeamsCN": "List of the winning teams from a game that was the Chinese win condition",
    "TokenType:Tokens": "List of tokens currently used",
    "FortMinigame:BaseEndConditionArray": "List of top-level end conditions; these will get reapplied as the base conditions on each game rules setup",
    "MashPlayerDataEntry:ScoreTracking": "List of total trigger counts and scores earned from each score type.",
    "DigestedRangedWeaponSkillCategorySpecialization:Tags": "List of traits that represents this specialization",
    "DigestedWeaponAccuracyCategorySpecialization:Tags": "List of traits that represents this specialization",
    "RangedWeaponSkillCategorySpecialization:Tags": "List of traits that represents this specialization",
    "WeaponAccuracyCategorySpecialization:Tags": "List of traits that represents this specialization",
    "ValkyrieBeaconClient:SupportedTransactionsPrefixList": "List of transactions we support for live edit - these are converted to regular expressions\nthat we'll evaluate against to pass through to the server",
    "FabricUserOptionSaveComponent:UserOptionsToSave": "List of user options to include in the save.",
    "Playspace:PendingUsers": "List of users on the client that are being added to PlayspaceUsers\nbut haven't been updated as we await for replication to complete",
    "HomebaseSquadSlot:ValidSlottableItemTypes": "List of valid types of items that can go into this slot. NOTE: ONLY USE ACCOUNT ITEM TYPES. Also, THIS IS NOT INHERITABLE. If only Worker is listed, then Heroes cannot go there unless Hero is also listed.",
    "AthenaVariantFilterTabInfo:IncludedVariantChannels": "List of variant channels that should be presented in this tab\n\nOnly relevant on leaf tabs",
    "AthenaVariantFilterTabInfo:ForcedVariantSelections": "List of variant selections which are automatically applied to the configured loadout when this tab is active.\nIf you leave the ItemVariantIsUsedFor blank, it will be inferred as the currently edited Item (otherwise, it will only apply for that item)\n\nCan be used on branch or leaf tabs (Primary/SubTabs). When used on both, the arrays of the Primary and active SubTab are combined.",
    "DigestedVehicleDriving:ModsTags": "List of vehicle mods to apply when AI drives this vehicle",
    "VehicleDriving:ModsTags": "List of vehicle mods to apply when AI drives this vehicle",
    "StreamingRadioPlayerComponent:DisabledVehicleList": "List of vehicles for which the radio should be disabled",
    "FortBotTeamInfoAthena:VisitedPOIList": "List of visited POIs (Old System)",
    "TournamentWeaponKillStat:TagList": "List of weapon definition tags to match.",
    "FortAthenaMutator_TournamentKillStats:KillStatList": "List of weapon kill stats",
    "HUDElementVisibilityRepData:WorldResourceVisibilities": "List of world resource visibilities, indexed by EFortResourceType",
    "AgeRatingIdsToGatingRuleGameplayTags": "Lists AgeRatingIDs that all share the same set of GatingRuleGameplayTags.  For instance, all AgeRatingIds under\nthe rating of T have a tag to trigger blocking T-rated cosmetics.",
    "FortAthenaMutator_HUDElementVisibility:PriorityStacksRepData": "Lists of HUD Element Visibility data by priority (outer list is indexed by EFortHUDElementVisibiltyPriority, inner list\nis the stack of Visibility data. When looking at each stack, retrieve the first HUD Visibility data that is relevant to\nthe Pawn/Controller in question.",
    "McpProfileChangeRequest:AddRequests": "Lists of different request types",
    "GameDifficultyInfo:ThreatDisplayName": "Literal Text to name the threat of this difficulty.",
    "CenterOnLocationPOI:LocationForPOI": "Literal location to center around.",
    "EQuestEditorGenerateBackendNameReason.NoAction": "Literally does nothing. The backend name will not be touched.",
    "VkProjectSearchResult:LinkCode": "Live link code if any",
    "VkVersePathTarget:LinkCode": "Live link code of the project if any",
    "FortLiveSpectatorController": "Live spectators are spectators which are connected to a live game.\nCurrently they exist in 2 forms - broadcast spectators and friend spectators.\nBroadcast spectators have access to lots of additional information while friend spectators are a very restricted\nversion which are limited to just their friend's PoV. Need to be mindful of what is shared between them.",
    "FortAthenaLivingWorldWardComponent": "Living World Ward Component. Registers to the Living World Manager which then can check if points are within a given ward's radius.",
    "FortAthenaMapInfo:LlamaClass": "Llama class to spawn.",
    "FortPawnComponent_SpeechBubble:LoadedTextsDataTable": "Loaded Texts DataTable",
    "EFortGameFeatureState.Loaded": "Loaded into memory and ready to be active",
    "EFortWorldManagerState.WMS_LoadingExistingWorld": "Loading an existing world",
    "ZoneLoadingScreenConfig:LoadingMusic": "Loading screen background music",
    "EFortPoiSwapUserContentState": "Loading state of a FortPoiSwapPlayspace's user content",
    "TeamBucketDefinition": "Loadout bucket definition.  Each bucket is allocated to a team.",
    "FortAthenaMutator_InventoryOverride_TeamBucket:TeamBuckets": "Loadout buckets.  Each team gets a bucket, each player on the team will use a different loadout from their team bucket.",
    "TeamBucketLoadout": "Loadout definition.  Each loadout is allocated to a member of a team.",
    "FortAthenaMutator_InventoryOverride:LoadoutIndexMap": "Loadout index per player",
    "FortSavedModeLoadout": "Loadout information for a specific game mode, used to store what the player last selected",
    "FortAthenaMutator_InventoryOverride:LoadoutRandomizationPerPlayer": "Loadout order randomization per player.  Used when bNoRepeat == true AND bSelectRandomLoadoutForPlayer == true.",
    "ItemLoadoutBucket:Loadouts": "Loadouts to pick from randomly when using this bucket",
    "TeamBucketDefinition:Loadouts": "Loadouts to pick from randomly when using this bucket",
    "FortLevelStreamComponent:bPreviewLevelInEditor": "Loads the current playset for previewing.",
    "PlaysetLevelStreamComponent:bPreviewPlaysetInEditor": "Loads the current playset for previewing.",
    "ETeamChatRoomState.NotCreated": "Lobby not created",
    "FortGameState:LobbyGameState": "Lobby state, if connected",
    "FortPawn:BatchedGameplayCueParameters": "Local GC Parameters we (re)use for playing Batched GCs",
    "FortPlayerPawn:LocalMaterialOverrides": "Local array of all applied material overrides",
    "FortActorComponent_MultiInteract:PreviousInteractingPlayers": "Local copy of Previous interacting players array used from Client's side\n              In case OnRep passed GC-unaware dangling pointers for destroyed player states",
    "FortPawnComponent_Phasing:PreviousMoveIgnoredBuilding": "Local copy to store the previous PhasingBuilding that set to be move ignored",
    "DayPhaseInfo:PhaseStartAnnouncement": "Local data; may eventually be made editable... needs to be a UPROPERTY so it will be copied correctly from the template",
    "EFortSessionHelperJoinResult.JoinSessionFailure_InvalidSession": "Local join errors",
    "FortAthenaMutator:InitializedPlayerControllers": "Local list of all players controllers who have been initialized for this mutator\n     This list is used to keep InitNewPlayer() from running multiple times for the same player on the same machine.\n     ONLY used if bPreventMultiplePlayerInitalizations is set to true",
    "FortPlayerPawn:OnPetAddedOrRemoved": "Local notification for pet added to / removed from Pawn.  Allow mannequins, etc to process cosmetic adjustment",
    "FortAthenaAIBotController:LeashActorToFollowLocalOffset": "Local offset applied on actor to follow location (optional)",
    "FortWeapon:OutOfAmmoSound": "Local only sound to play when trying to fire a gun with no ammo",
    "FortCurieWorldNiagaraComponent:AssociatedControllerId": "Local player controller id associated with this component; Will only render for the player with that controller id",
    "ImGuiDebugMenuBase:PrivateLocalPlayerController": "Local player controller using the debug menu. Avoid setting directly, use SetLocalPlayerController",
    "DynamicUIDirectorBase:OwningLocalPlayer": "Local player owning this director.",
    "EFortSessionHelperJoinResult.ReservationFailure_NoSubsystem": "Local reservation errors",
    "ESaveLocation.Local_ForDevice": "Local settings specific to the device you're using.  For platforms with cloud save, this means, it will work like Cloud_ForPlatform",
    "VehicleSpringInfo:SpringStartLocalOffset": "Local space offset for spring start.",
    "FortPawn:AccumulatedBatchData_Shared": "Local state used to accumulate batched GCs",
    "PlayspaceComponent_PlayStopPauseManager:bCachedPlaying": "Local store of whether this manager is currently playing or stopping actors. Prevents needless re triggers of stop/play,\nwhich can be expensive and have knock on effects.",
    "FortVehicleAimingWeaponComp:StartCameraResetToBarrelTime": "Local time \"camera reset to barrel\" started, or in other words, the time at which there was a request to line the player's camera up with the barrel of the associated mounted weapon.",
    "AthenaCarPlayerSlot:EnterSeatTime": "Local time at which this seat was entered by a player.",
    "EEventTournamentType.Onsite": "Local tournament on location",
    "FortWeapon:DestroyedSound": "Local/remote sound to play when the weapon is destroyed (only durability destruction at the moment)",
    "FortAIPawn:ImpactPhysicalSurfaceSounds": "Local/remote sounds to play for attacks against specific surfaces",
    "FortWeapon:ImpactPhysicalSurfaceSounds": "Local/remote sounds to play for weapon attacks against specific surfaces",
    "FortWeaponPickaxeDualWieldAthena:OffhandImpactPhysicalSurfaceSounds": "Local/remote sounds to play for weapon attacks against specific surfaces",
    "FortAthenaLocalGameplayBehavior": "LocalGameplayBehavior Actor used to run a blueprint from BTTask_DynamicBlueprint",
    "FortAthenaPatrolPoint:LocalGameplayBehavior": "LocalGameplayBehavior linked at this patrol point that can be run when the NPC reach this point",
    "AthenaTeamDisplayInfo:Name": "Localizable name for squad, e.g. Crab, Bear, Llama",
    "FortPlayerSurveyLocalizableText": "Localizable text data structured for use with CMS and the player survey system\nThis is so the analytics packet returned can contain both the English text and the native text, as CMS data is localized on the CMS side\nOpposed to all other CMS data structures located in FortPlayerSurveyCMSData.h, this is here as it is used throughout the system",
    "FortGameStateAthena:LocalizationService": "Localization Service",
    "ContentInstallError:ErrorText": "Localized Error Text for ErrorCode",
    "FortGameFeatureStatusBase:ErrorText": "Localized Error Text for ErrorCode",
    "FortCreativeTagCategory:Name": "Localized display name of the creative tag category.",
    "FortCreativeTag:Name": "Localized display name of the creative tag.",
    "LeaderboardEntry:LeaderboardName": "Localized display name of the leaderboard",
    "HeroKeywordDisplayData:KeywordDisplayName": "Localized display name to show players for the 'keyword' for the hero, such as 'Spooky'.  Each hero should have at most two keywords.",
    "FortActionKeyMapping:LocalizedName": "Localized name of mapped action",
    "AthenaScoreData:ScoreNameText": "Localized name of the score event",
    "FortMarkActor:PreapprovedMarkString": "Localized string attached to this mark",
    "AgeRatingDisplayData:AgeRatingText": "Localized text describing the age rating",
    "RatingBoardDisplayData:RatingBoardDisplayName": "Localized text for the rating board name (following the locale specified in RatingBoardLocale, usually the requested locale but there are exceptions)",
    "FortGameFeatureResponse:ErrorText": "Localized text to display for error",
    "FortHeroGameplayPiece:CommanderRequirementsText": "Localized text to display to players if the commander does not meet this perk's requirements to explain what type of commander would be required for this perk to be active.",
    "InteractiveElementDisplayData:DescriptorText": "Localized text used to describe descriptor (following the locale specified in RatingBoardLocale, usually the requested locale but there are exceptions)",
    "RatingDescriptorDisplayData:DescriptorText": "Localized text used to describe descriptor (following the locale specified in RatingBoardLocale, usually the requested locale but there are exceptions)",
    "FortBotPOIExcludedZoneDataTableRow:Location": "Location (center) of the Excluded Zone",
    "ButterCakeUnstuckComponent:LocationSamples": "Location Samples History",
    "FortMovementComp_GroundSpline:ReplicatedSplineLocationData": "Location data of the owning object replicated from the server",
    "FortAthenaMutator_Ashton:VillainLeaderLocationForDeathSound": "Location of sound to play when the villain leader dies",
    "FortAthenaMutator_Ashton:VillainLeaderLocationForSnapSound": "Location of sound to play when the villain leader snaps",
    "FortAthenaMutator_Ashton:VillainLeaderLocationForSound": "Location of sound to play when the villain leader spawns",
    "CreativeDeviceInstanceInfo:ActorLocation": "Location of the actor in the world, so that the player can teleport to it in Creative",
    "ReplicatedSpawnInfo:LastLocation": "Location of the last place the player was known to have been before spawning",
    "FortSplineGroundPath:MostRecentlyAddedLocation": "Location of the most recently added point.  We use this for interpolating the position and tangents of the front end of the spline.",
    "SafeZoneLocationParams:AnchorLocation": "Location of the next phase.",
    "FakeKillRelevancyVictim:DeathLocation": "Location of the player's pawn at the time the kill was queued on the server.\nIf zero, consider it to be invalid.\nOn the client, if the player pawn doesn't exist (e.g., due to distance relevancy),\nthis location can be used as a fallback for any visuals or UI that require a world location.",
    "WaxPlayerDataEntry:PreviousVictimLocation": "Location of the previous victim",
    "CachedRealitySaplingData:location": "Location of the sapling",
    "RealitySaplingPersistentData:Location": "Location of the sapling",
    "FortAIPawn:SpawnRiftLocation": "Location of the spawn rift stored for debug logging after the rift may have been removed",
    "FortAssignedObjectiveData:ObjectiveLocation": "Location of this objective",
    "EQSActorSpawnerData:SpawnLocationOffset": "Location offset for actor spawns.",
    "FortPlayerControllerAthena:RespawnCamera_InitialLocOffset_InAir": "Location offset used for the respawn camera when respawning in air.\n@note: this is the initial offset of the camera, and the camera mode itself governs the target/final offset.",
    "FortPlayerControllerAthena:RespawnCamera_InitialLocOffset_OnGround": "Location offset used for the respawn camera when respawning on ground.\n@note: this is the initial offset of the camera, and the camera mode itself governs the target/final offset.",
    "BuildingTrap:ShouldTriggerTraceOffsets": "Location offsets to trace from to check if this trap should trigger",
    "PhysicsObjectDeactivationSnapshot:Location": "Location on deactivate",
    "BuildingGameplayActorCloneMachine:CloneLocation": "Location on the device that the player will \"clone\" to",
    "PhysicsConstantForceData:Location": "Location the force is applied",
    "PhysicsMagneticForceData:Location": "Location the force is applied",
    "ReplicatedSpawnInfo:SpawnLocation": "Location the player will spawn at",
    "FortRespawnData:RespawnLocation": "Location the player's pawn should spawn when respawn is ready",
    "FortRevivedInfo:RevivedLocation": "Location when revived.",
    "FortProjectileAthena:FireStartLoc": "Location where sniper projectile spawned, used for client-side trace to where projectile is first replicated.",
    "DeploymentConsoleTeamData:SpawnLocations": "Locations for team spawn.",
    "DeploymentConsoleComponent:TeamSpawnData": "Locations generated around SpawnPoints with team data.",
    "DeploymentConsoleComponent:SpawnPoints": "Locations to spawn from.",
    "LockOnInfo:LockOnTarget": "Lock on target",
    "ELockOnState.Cooldown": "Locked on to the target",
    "AvailableTierLayout:LockedTiers": "Locked tiers from within the layout asset (only populated for finite layouts)",
    "EFortLockerAnalyticAction.Locker_Clear": "Locker Actions",
    "EFortItemType.CosmeticLocker": "Locker item holding a set of cosmetics the player may want to use (i.e. Outfit, Backbling, Pickaxe, etc.)",
    "FortPortalComponent:LinkCodeLockExpirationTime": "Locking",
    "FortWeapon:PlayerAnimAssets": "Locomotion anim sets to be used for this weapon",
    "FortWeapon:PlayerAnimAssetsOverride": "Locomotion anim sets to be used for this weapon",
    "FortPlayerAnimAssets:LocomotionAnimAsset": "Locomotion asset",
    "ValkyrieEditorConfig:bLoginOnStartup": "Log in during startup",
    "ESprintLoggingVerbosityLevel": "Log verbosity level, corresponds to valid entries in ELogVerbosity (except \"Fatal\"), which is not a BlueprintType.\nAllows logging from blueprint (through a translation) to the normal logging system at any specified verbosity.  This\nought to be generalized to also support different channels, etc., but there is no type that is valid for the\nchannels, and even this enum currently has to be \"translated\" to a valid non-enum string to do logging properly.",
    "BuildingSMActor:LogicalBuildingIdx": "Logical building index of the actor; INDEX_NONE if free-standing, otherwise representative of index into server's logical building array in the structural support system. Server only",
    "ELoginResult.AuthFailed_InvalidCredentials": "Login credentials were reported invalid",
    "ELoginResult.AlreadyLoggingIn": "Login flow has been started when login was already in progress",
    "ELoginResult.Pending": "Login is already pending",
    "PictureInPictureAuthState": "Login state",
    "PictureInPictureAuthType": "Login type",
    "CardPackOffer:Description": "Longer description/tooltip text",
    "MinigamePostGameAnimationSettings:SubText": "Longer piece of flavor text to be displayed under the placement information",
    "SkyfireBackpackComponent:MaxInitialUpdateDelay": "Longest delay added to the initial tick. Used to stagger the UpdateTime calls",
    "EFortAthenaTutorialSubstep.ScreenSwipeToLook": "Look",
    "VariantSwapMontageData:bRequireCharacterPart": "Look for specific character parts instead of meta tags when choosing the montage section.\nMore visually stable, as section played will always match what the player expects based on\ntheir character, but much less flexible.",
    "FortAthenaStateTreeLookAroundTaskInstanceData:Actor": "LookAround Actor",
    "EDeployableTurretState.Scanning": "Looking for a target",
    "WeaponModMagnitudeCalculationData:RowLookupTag": "Lookup key for which FortWeaponModDataRow to select from the data table.",
    "NPCServiceDataRow:ServiceTags": "Lookup tag(s)",
    "FortWeapon:MinimumTimeForPersistentFX": "Looping FX might end up silent in certain network conditions, some weapons might want to set a minimum length",
    "FortAttachableProjectileComponent:WhileAttachedCue": "Looping Gameplay Cue that plays while attached",
    "FortAttachableProjectileComponent:WhileDetachedCue": "Looping Gameplay Cue that starts playing on detach and stops when attached again.",
    "FortAnimInput_TurnInPlace:LoopRotationSpeed": "Looping turn stuff",
    "FortAthenaMutator_InventoryOverride:GadgetDropOverride": "Loot Override for Gadgets like the jetpack",
    "FortAthenaMutator_InventoryOverride:MaterialDropOverride": "Loot Override for Materials",
    "FortAthenaMutator_InventoryOverride:TrapDropOverride": "Loot Override for Traps",
    "FortAthenaMutator_InventoryOverride:WeaponDropOverride": "Loot Override for Weapon",
    "FortAthenaMutator_InventoryOverride:DropAllItemsOverride": "Loot Override for all items. If set to anything other than NoOverride, all other options will be ignored.",
    "FortAthenaMutator_InventoryOverride:ConsumableDropOverride": "Loot Override for consumables",
    "FortQuestRewardData:Loot": "Loot awarded",
    "FortQuestRewardNotification:Loot": "Loot awarded",
    "FortWorldManager:LootData": "Loot data to use for the whole level when in non-tiled worlds",
    "FortAIComponent_Telemetry:DroppedPickups": "Loot dropped during lifetime of the AI",
    "FortAIComponent_Telemetry:GrabbedPickups": "Loot grabbed during lifetime of the AI",
    "FortQuestPoolTableRow:LootTierGroup": "Loot group that defines available quests",
    "TrapItemDefintionDesignerData:LootLevelData": "Loot level data",
    "FortNotificationLevelUp:Loot": "Loot notification that came down with this levelUp *",
    "FortAthenaMutator_InventoryOverride:AmmoDropOverride": "Loot override for Ammo",
    "FortLootTierData:LootPackageCategoryMaxArray": "Loot package category maximums, parsed from LootPackageCategoryMax at import time",
    "FortLootTierData:LootPackageCategoryMinArray": "Loot package category minimums, parsed from LootPackageCategoryMin at import time",
    "FortLootTierData:LootPackageCategoryWeightArray": "Loot package category weights, parsed from LootPackageCategoryWeight at import time",
    "FortGameModeAthena:GameFeatureLootPackageData": "Loot package data that is being loaded",
    "CustomLootOverrideData:LootPackages": "Loot package override table",
    "CustomLootOverrideData:ExperimentalLootPackages": "Loot package override table when the \"experimental selection\" is set",
    "LootTableSource:LootPackages": "Loot packages from this source. DEPRECATED (use Excel import directly)",
    "FortTileLootData:LootDrops": "Loot quotas for the current tile",
    "EFortLevelStreamingState.LSS_AllUpdated": "Loot quotas have been applied and all actors have been updated by the persistence system",
    "FortAthenaMutator_Skyfire:InitialLootRarity": "Loot rarity a squad starts with.",
    "ChosenQuotaInfo:LootTier": "Loot tier chosen by the world manager",
    "FortGameModeAthena:GameFeatureLootTierData": "Loot tier data that is being loaded",
    "FortAIBaseLootDropRow:AccountItemLootTierGroup": "Loot tier group that will be used if the account item drop chance check passes",
    "FortAIBaseLootDropRow:WorldItemLootTierGroup": "Loot tier group that will be used if the world item drop chance check passes",
    "FortAILootDropModifierRow:WorldItemLootTierGroup": "Loot tier group that will be used if the world item drop chance check passes",
    "FortAIBaseLootDropRow:WorldItemInstancedLootTierGroup": "Loot tier group that will be used if the world item drop chance check passes that will spawn instanced loot",
    "FortTaggedDeployableBaseLootUnlock:LootTierGroup": "Loot tier group to grant in the neighborhood",
    "BuildingContainer:SearchLootTierGroup": "Loot tier group to select the loot from.",
    "BGAConsumableSpawner:SpawnLootTierGroup": "Loot tier group to use for picking which consumables to spawn; If result returns zero choices, spawner will destroy itself",
    "ChosenQuotaInfo:LootTierKey": "Loot tier key chosen by the world manager",
    "CustomLootOverrideData:LootTierData": "Loot tier override table",
    "CustomLootOverrideData:ExperimentalLootTierData": "Loot tier override table when the \"experimental selection\" is set",
    "FortQuestPoolTableRow:LootTier": "Loot tier to use when rolling quests",
    "LootTableSource:LootTierData": "Loot tiers from this source. DEPRECATED (use Excel import directly)",
    "EFortBuildingType.Container": "Lootable container that randomly spawns",
    "FortPhysicsBall:DragFactor": "Lose this fraction of current velocity per second while applying drag. This is non-linear, so 1 does not mean you lose it in a second.",
    "EStimType.Seen": "Lost LOS on the actor from sight perception",
    "EMatchConditionMutatorTeamStatus.Lost": "Lost the current segment of the match",
    "ETagGoalScoringCategory.HighInterest": "LowInterest,\nMediumInterest,",
    "EMotdGovernanceEventType": "Lower case because of backend",
    "EFortConnectivityCubeFace.Lower": "Lower floor cube face",
    "EFortPrioritizedWidgetPriority": "Lower is higher priority",
    "FortSkyTube:ProjectileTangentialMinSpeed": "Lower limit for projectile tangential speed, if projectile usually goes slower.",
    "FortMission_RiftSpawners:MinEncounterIndex": "Lowest encounter index",
    "EFortAIPawnGender.FAPG_MAX": "MAXIMUM",
    "EFortSharedAnimationState.Anim_MAX": "MAXIMUM",
    "EFortTileEdgeType.MAX": "MAXIMUM",
    "EFortressAIType.FAT_MAX": "MAXIMUM",
    "AthenaSeasonItemMCPState": "MCP data for a season item state",
    "EFortItemType.BattleLabDeviceAccount": "MCP tie to BattleLab Devices used in \"my playgrounds (ties to BattleLabDevice)\"",
    "ELoginResult.AuthFailed_InvalidMFA": "MFA verification failed",
    "ELoginResult.AuthFailed_RequiresMFA": "MFA verification required",
    "FortMissionStormShield:StormMainMapMaterialMID": "MID For Main Map storm",
    "FortMissionStormShield:StormMiniMapMaterialMID": "MID For MiniMap storm",
    "FortTimeOfDayManager:PostProcessMaterialMID": "MID created from the BasePostProcessMaterial and modified by code",
    "FortDaySequenceActor:OutlinePostProcessMID": "MID created from the OutlinePostProcessMaterial and modified by code",
    "BuildingSMActor:BlueprintMIDs": "MID for the blueprint visualization while a building is not at full HP",
    "FortWeap_BuildingTool:BlueprintPaperMID": "MID to apply for the blueprint paper",
    "FortPlayerPawn:BlueprintPaperMID": "MID to apply to the blueprint paper component",
    "DiscoCaptureUIData:CurrMID": "MID to draw",
    "FortTheaterMapTile:AdjacencyMIDs": "MID's that we apply the adjacency params to",
    "OldMusicTempometerComponent:BeatTickParameterName": "MIDI tick from the beginning of the beat.",
    "OldMusicTempometerComponent:MeasureTickParameterName": "MIDI tick from the beginning of the measure.",
    "MinimalHighlightShot": "MInimum representation of a replay highlight camera shot",
    "RatingExpansion": "MMR expansion windows used for ranked/tournament matchmaking.",
    "PlayerDamageData:TeamMMR": "MMR of damage dealer.",
    "FortPartyRepData:CustomMatchKey": "MMS Custom matchmaking key for private matches",
    "ContentInstallError:ErrorCode": "Machine-readable code describing error, not localized",
    "FortGameFeatureStatusBase:ErrorCode": "Machine-readable code describing error, not localized",
    "FortGameFeatureResponse:ErrorCode": "Machine-readable code describing error, not localized. Empty means this is not an error",
    "FortGameFeatureStatusBase:PauseReason": "Machine-readable code describing pause reason, not localized",
    "ELevelSaveRecordVersion.SoftActorClassReferences": "Made actor class references soft so they are not loaded automatically",
    "ELevelSaveRecordVersion.SoftActorComponentClassReferences": "Made actor component class references soft so they are not loaded automatically",
    "HomebaseNodeGameplayEffectDataTableRow:Magnitude": "Magnitude for the gameplay effect",
    "FortGameplayEffectContext:ChargeMagnitude": "Magnitude of charge of this effect, from 0.0 to 1.0",
    "FortCurieExecutionParams:Magnitude": "Magnitude of the Curie interaction",
    "FortBattlePassVideoAnnotation:EntryMagnitude": "Magnitude of the entry animation. 0 means no movement, 1.f means max movement defined by UI.BPVideo.AnnotationAnimMultiplier",
    "PhysicsMagneticForceData:Magnitude": "Magnitude of the force",
    "ChaseExternalForce:Magnitude": "Magnitude of the force. Used for constant magnitude if there is no MagnitudeCurve",
    "HomebaseNodeGameplayEffectDataTableRow:Operation": "Magnitude operation for the gameplay effect",
    "FortCurieSettings:WaterBodyInteractionMagnitude": "Magnitude to provide to an interaction started by a water body or ocean actor",
    "EFortUIFeature.ShowHome": "Main Tabs",
    "PlaylistPropertyArray": "Maintains an \"override\" playlist instance and records of applied property overrides, allowing for generalized replication to clients",
    "PropertyOverrideData": "Maintains records of property overrides applied to a target object, allowing for generalized replication to clients",
    "PartyFailureLogSubmitReason:Reason": "Major reason to submit a log (or \"All\")",
    "EFortVoteArbitratorType.Majority": "Majority of voters need to be in agreement",
    "EMatchmakingFlags.UseWorldDataOwner": "Make a private game",
    "FortMinigameLogicComponent:bIsRelevantForMinigameInitialization": "Make it so client is not considered finished loading until this actor is replicated to them",
    "TowhookParams:bEnableParentDominates": "Make parent dominate the physic constraint (the parent won't be affected by the constraint",
    "PartyMemberSquadAssignmentRequest:Version": "Make sure to force event every time a change is requested, even if it's the same change as last time",
    "EContentChanges.Verse": "Make sure to keep compund flags up to date",
    "ELevelSaveRecordVersion.RemoveInvalidEventBindings": "Make sure to remove any event bindings that don't have valid actors after fulling loading the level",
    "FortMinigameLogicComponent:bForceAlwaysRelevantInVolume": "Makes actor always relevant to the creative volume",
    "SkyAtmosphereValues:AerialPespectiveViewDistanceScale": "Makes the aerial perspective look thicker by scaling distances from view to surfaces (opaque and translucent).",
    "FortCreativeInteractVisualizationComponent": "Makes the interaction of the owning actor larger than itself. e.g. allowing a button to have a huge interaction sphere\nVisual mesh is only showing during edit time to represent the interact collision during the game.",
    "EPlayspaceCreationType.RootDestroy": "Makes this Playspace the root and destroys the existing root",
    "EPlayspaceCreationType.RootInserted": "Makes this Playspace the root and the former root becomes its child",
    "EPlayspaceCreationType.RootDoNotClobber": "Makes this playspace the root of there is no root, will not spawn if a root playspace already exists.",
    "FortAnimInput_PlayerGliderAnimAsset:Default_BodyAdditive_MaleLarge_BS": "Male Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Default_TurnAdditive_MaleLarge_BS": "Male Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Into_BodyAdditive_MaleLarge_BS": "Male Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Into_TurnAdditive_MaleLarge_BS": "Male Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:LeanAdditive_Center_MaleLarge_Pose": "Male Medium will be used if this is blank.",
    "FortAnimInput_PlayerGliderAnimAsset:Lean_MaleLarge_BS": "Male Medium will be used if this is blank.",
    "DeploymentConsoleTeamData": "Managed data for grouped team spawning.",
    "DeploymentConsoleAircraftData": "Managed data for team aircraft spawning.",
    "DagwoodNetworkPhysicsComponent:ReplicatedManagedState": "Managed state should not be publically exposed",
    "FortAthenaMutator_CharacterCosmeticManager:BlockManagedCosmeticTypes": "ManagedCosmeticTypes for which we should block the loading of assets",
    "FortLightweightProjectileManager": "Manager class for the lightweight projectile system. Responsible for managing lightweight projectiles\nincluding registering, ticking, replication etc.",
    "FortDeployableBaseManager": "Manager class responsible for handling all deployable bases in a zone",
    "FortVehicleOverrideManager": "Manager component that handles vehicle overrides on the server/client depending on if the vehicle has a driver\nSupports multiple overrides per owner and multiple overrides per vehicle and replicates the merged override results to the client",
    "FortPlayerStateComponent_EventGameplayAbilityManager": "Manager for adding and removing Gameplay abilities and effects when needed for specific events.\nKeeps maps of GAs and GEs with a list of all events currently using them, so the same GA can be shared across events, and only removed when no longer in use.\nAlso handles re-triggering GAs and re-applying GEs on pawn changes.",
    "StreamingRadioManagerNative": "Manager for the Streaming Radio. Handles logic that can't otherwise be handled in BP.",
    "FortGameStateComponent_WeaponModOverrideManager": "Manager to override weapon mod's config data for specific weapons",
    "ValkyrieFortniteAssetCollectionSettings": "Manages a loaded asset collection for filtering asset aliases to match what would be seen in-game.",
    "FortPropertyOverrideReplShared": "Manages a replicated registry of property override data",
    "CreativeRoyaleIslandPlayspace:CreativeModifyEmotesComponent": "Manages and overrides available emotes from the Emote Controller Device",
    "VKEditPlayspace:CreativeModifyEmotesComponent": "Manages and overrides available emotes from the Emote Controller Device.",
    "VKEditPlayspace:CreativeInventoryComponent": "Manages and overrides what inventory is available by players in the experience for creating with.",
    "FortControllerComponent_EliminationFeed": "Manages replication of Elimination Feed Messages through a ring buffer.  Works hand-in-hand with Device_EliminationFeed",
    "FortPoiSwapManager": "Manages swapping out POIs (Point's of Interest) on the BR map with user generated content in Creative Royale",
    "FortPlayerCameraSpectator": "Manages the camera for Fortnite Spectator",
    "FortAthenaLivingWorldManager:GlobalConditionContainer": "Manages the world condition state of the global runtime datas (Category, Event, etc...).",
    "FortMangDataTrackerComponent": "Mang specific version of a data tracker component",
    "VkModuleBinaries:Manifest": "Manifest file name. This is used for BPS to download via chunks.",
    "FortMantisPawnComponent:MantisData": "Mantis data currently being used.",
    "FortMantisWeaponComponent:MantisData": "Mantis data to use for this weapon.",
    "FortRootMotionSource_Mantis": "Mantis force - extracts root motion from animation, acting as a replacement for AnimRootMotion",
    "FortMantisWeaponComponent:MantisPawnComponent": "Mantis pawn component currently using this weapon.\nUses a weak pointer because the component is owned by a pawn actor so only the pawn owner should have a strong pointer to the component.",
    "EFortScriptedActionSource.Manual": "Manually added action, called from blueprint to register specific actions",
    "UserOptionDefinition:AdditionalCategoryTags": "Manually added gameplay tags describing the in-game categorization of this option.",
    "FortMcpQuestObjectiveDisplayInfo:DisplayMaxStage": "Manually set max stage number to be showing in the UI",
    "FortQuestObjectiveDisplayInfo:DisplayMaxStage": "Manually set max stage number to be showing in the UI",
    "FortMcpQuestObjectiveDisplayInfo:DisplayStage": "Manually set stage number to be showing in the UI",
    "FortQuestObjectiveDisplayInfo:DisplayStage": "Manually set stage number to be showing in the UI",
    "FortDagwoodVehicle:MapSelfDestructActionDefForUI": "Map Seat index to custom self-destruct prompts",
    "FortGenericDataStoreMapWrapper:NamedStoreMap": "Map a name to arbitrary data-holding UObjects",
    "FortMovementComp_CharacterAthenaWithMover:MoverMovementModeToCharacterMovementMode": "Map between movement modes defined in the mover component and built in character movement component modes",
    "SafeZoneLocationParams:MapCenter": "Map center location. Used to ensure the safe zone stays within the map",
    "FortPlayerPawn:MaterialOverrideStateMap": "Map containing the original materials that have been overridden",
    "FortEventLevelNavigationActor:AdditionalHighlightObjects": "Map from Camera Tag To Additional nav objects to highlight",
    "FortEventLevelNavigationActor:CameraToNavigateTo": "Map from Camera Tag To Camera - A Camera can have multiple camera tags",
    "FortPartyRiftPortalManager:PortalMap": "Map from players to portals they own",
    "AshtonStoneData:MapIconScale": "Map icons scale",
    "AthenaMarkerComponent:RemotePlayableMarkerSoundsPerPlayerIDMap": "Map key is PlayerID & value is remaining sounds playable during current rate",
    "FortDamageNumbersActor:OffsetAlongNormalByDamageNumberTypeMap": "Map keyed by damage number type, values are offsets along the camera normal.",
    "FortDamageNumbersActor:VerticalOffsetByDamageNumberTypeMap": "Map keyed by damage number type, values are vertical offsets.",
    "FortInteriorAudioComponent_Ambient:AmbientBanks": "Map of AmbientBanks to use per dominant surface type",
    "FortEventLevelNavigationActor:NavWidgetSettings": "Map of Camera to nav widget position",
    "ValkyrieEditorPermissionSettings_Editor:AllowedEditorPreferencesSections": "Map of CategoryName->SectionNames for which sections should be visible in Editor Preferences. If a category is not in the map, all its sections are hidden.",
    "FortPawn:LODToFrameSkipMap": "Map of LOD levels to frame skip amounts.",
    "GroundTrailsMap:GroundTrails": "Map of Physical Material to Niagara Systems to play when driving on terrain",
    "FortAthenaMutator_Uranium:GameMessages_Defenders": "Map of UI Messages for players on the defending team sorted by EUraniumEventIds",
    "FortAthenaMutator_Uranium:GameMessages_Pushers": "Map of UI Messages for players on the pusher team sorted by EUraniumEventIds",
    "BulletWhipTrackerSystem:SystemDataMap": "Map of an id to whip tracker data associated with a given projectile/tracer/bullet/etc\nId is unique per projectile/bullet, array is all of the data associated",
    "PartyMemberSharedQuestData:BcktMap": "Map of buckets and quests for this party member",
    "MilkshakeControllerComponent:RecentDamageFXBuildings": "Map of building actor and timestamp that building damage FX was spawned on them",
    "LacklusterData:ChromeSoundComponents": "Map of chromed actors to their sound components",
    "FortPawnComponent_Convert:ConvertedPawnComponents": "Map of current converted pawn components by Type",
    "SpecialEventCursorPawnComponent:CursorModes": "Map of cursor mode data that we can switch between, looked up by tag",
    "FortAthenaMutator_GG:PlayerData": "Map of data for players",
    "GameplayEventHandlerFunction:EventHandlerFunctionDefaultValues": "Map of default values (in ExportText form) for the function arguments and local variables.",
    "PlayspaceControllerComponent_DeviceTracking:DeviceGuidToBasicDeviceInfo": "Map of device guid to device info",
    "FortAthenaMutator_Skyfire:LootRoomTeleportPointMap": "Map of each loot room's teleport point data by rarity. This is filled at runtime.",
    "CurieManager:ElementAllocationHandlers": "Map of element tag to allocation handlers",
    "CurieManager:ElementAttachmentConditionHandlers": "Map of element tag to attachment condition handlers",
    "CurieManager:ElementAttachmentHandlers": "Map of element tag to attachment handlers",
    "CurieManager:ElementInteractWithContainerHandlers": "Map of element tag to container interact handler",
    "CurieManager:ElementInteractWithMaterialHandlers": "Map of element tag to material interact handler",
    "CurieManager:ElementInteractWithElementHandlers": "Map of element/interacting element pair to interact handler",
    "FortCurieCableSocket:ReceivedElementToMagnitudeMap": "Map of elements to their magnitude received on the socket",
    "FortAthenaMutator_PlayerAbilitiesOnGamePhase:AbilitySetsToGiveOnGamePhaseMap": "Map of game phases and ability sets to equip/unequip from players when those phases are reached.",
    "FortAthenaMutator_Skyfire:LootRoomTagByRarityMap": "Map of gameplay tags by rarity that are used to identify a loot room as being of that rarity. (eg A loot room's teleport point is tagged with one of these.)",
    "FabricMetaSoundNodeInfo:InputNodeNamesToHandles": "Map of input names to the input nodes spawned for this node",
    "FortAthenaMutator_GamePhaseMessage:GamePhaseMessageData": "Map of messages to send when each game phase is reached",
    "FortNamedWeightRow:NamedWeightMap": "Map of named weight strings to weight multipliers; Synthesized from data parsed from NamedWeightString",
    "FortGameStateComponent_RealitySapling:SaplingSpawnEnvQueryFloatParamMap": "Map of param name and corresponding float value to pass to the sapling spawn query",
    "VkProjectUserInfo:Access": "Map of permissions the calling user has for this project\n\n\"read\" - ability to view the project on content service and link to it\n\"edit\" - all content creation operations. Uploading new versions, publishing for playtest, editing metadata etc\n\"publish\" - publishing new versions of the live link code.\n\"operate\" - post-publishing operations like submitting metadata moderation, editing player inventories, etc\n\"admin\" - ability to transfer ownership of the project and promote/demote admins",
    "VkTeamMembershipResult:Access": "Map of permissions the calling user has for this team",
    "ValkyrieProjectBindingsDescriptor:Modules": "Map of project plugin name to module guid",
    "DataDrivenServiceBriefConfig:CannotUseReasonParameterToDisplayText": "Map of service's 'cannot use' reasons, to text to display in place of main widget e.g. \"outofstock\" -> \"Out Of Stock!\" / \"FullHealth\" -> \"No Healing Needed!\"",
    "SkyfireSquadDataEntry:SquadMembersInMothershipData": "Map of squad members in the mothership and corresponding data. (Partial squads can be abducted)",
    "FortAthenaAIBotController:AppliedInGameModifierAbilitySetHandles": "Map of the item guids on the controller to the ability set (handle) added by that item. Note: Items are gadget items.",
    "VoteBroadcasterComponent:PlayerCastedVotesMap": "Map of the players to the vote selections they've made on the active vote",
    "FortCustomTickComponent:ClientPlatformQualitySettingsTagMap": "Map of which QualitySettings tag to use per platform on client",
    "FortMapQuestMapMarkerData:OverridePlaylistForPluginsActivation": "Map specific playlist override the Map Marker Update Commandlet uses for plugins activation during the actor location caching.\nThis overrides the default PlaylistForPluginsActivation if it is set. If this is empty, then the default PlaylistForPluginsActivation\nwill be used for the map",
    "FortAthenaLivingWorldManager:TaggedSpawnActionClassMap": "Map that link tags to spawn action. Can be dynamically populated by gamefeature actions.",
    "FortAthenaMutator_Wax:StatDataNumTokensCollectedByPlayerMap": "Map that stores how many tokens have been collected by any place since the last time stats were pushed to the quest system\n     Tracking this data allows the stat system to be updated properly once the timer for it finishes.",
    "FortDagwoodVehicle:SeatToWindowShapeNames": "Map to window shape names in DamageableParts to break when leaving",
    "FortControllerComponent_TransientQuests:AbilityHandleQuestDefinitions": "Map used to track quest definitions associated with ability handles passed into OnAbilityGiven",
    "FortActionKeyMapping:ActionName": "Mapped action name",
    "PhoneixXPStats": "Mapping from active Phoenix event flag to various important stats. Generated automatically from the Phoenix XP tables.",
    "DaySequenceActor:BindingOverrides": "Mapping of actors to override the sequence bindings with",
    "AlterationGroup:RarityMapping": "Mapping of alteration slot rarity to alteration weight data.",
    "FortGameSessionDedicated:ClientIdRestrictions": "Mapping of client ids to any platform restrictions they have",
    "EIndicatorStateImage": "Mapping of icons in the indicator atlas",
    "PlaysetPropSettings:ActorsPlaysetPropHashV2": "Mapping of level actors to the ID/hash of the playset prop it's associated with;\ni.e the hash value of the recorded actor data that is stored in the Playset Prop Item Definition.\nThe ID can be zero which means there's no instance data; in that case, the playset prop is just the actor class default object.",
    "PlaysetPropSettings:PlaysetProps": "Mapping of playset prop ID/hash to Playset Prop Item Definition.",
    "AlterationSlotRarity:RarityWeights": "Mapping of slot rarity to initial roll weights.",
    "FortCurieManager:StateIdentifierToIdxMap": "Mapping of state identifier to index in the valid state identifiers array; Acceleration structure for compressing replication traffic for Fort Curie components",
    "FortCreativeCreatureManagerComponent:EnabledCreatureManagerInfos": "Mapping of the \"active\" Creature Manager Info Component to use for each relevant class",
    "ValkyrieConcertTransactionFinalizedEvent:PlaceholderAssetMappings": "Mapping of the actual asset path to its placeholder index in PlaceholderAssets",
    "FabricSequencerSustainComponent:StepToInstanceMapping": "Mapping of the instance index to the grid position (step index, track index)",
    "FortCurieManager:ToggleComponentGroups": "Mapping of toggle group name to active toggle group members",
    "FortAIDirector:DiscreteEncounterUtilityDesireMappings": "Maps EFortUtilityDesire settings to float values",
    "ReplicatedMontageIndexPair": "Maps Montage to index",
    "PlayerMarkerMutatorEffectData": "Maps PlayerMarker GameplayEffect to Player with one life left.\nAlso used to replicate information that the client is lacking.",
    "FortGameFeatureDataBaseCurveTableOverrides": "Maps a base table to a specific override table.",
    "FortPlaylistBaseCurveTableOverride": "Maps a base table to a specific override table.",
    "FortPlaylistBaseDataTableOverride": "Maps a base table to a specific override table.",
    "FortGameFeatureDataBaseDataTableOverrides": "Maps a base table to a specific override table. This exists because UHT can't nest containers.",
    "FortVehicleModConfigEntries:VehicleTagToModConfig": "Maps a mod tag to mod data for the VehicleConfig associated with this struct.",
    "FortVehicleModConfigEntries": "Maps a vehicle mod tag to one of many mod configs; since each vehicle may use its own unique mod config for a shared mod tag.",
    "FortAthenaMutator_PlayerClassSettings:ClassSettingsDataMap": "Maps class indices to corresponding player-class settings components",
    "PaybackMutatorEffectData": "Maps payback GameplayEffects to killer/victim-team pairs.\nAlso used to replicate information that the client is lacking.",
    "FortAthenaMutator_GiveCosmeticsOnItemPickup:PickupToSkinDataMap": "Maps pickups to the skin that should be applied to a player obtaining that pickup",
    "FortSurfaceDamageRatioStats:GenericSurfaceTag": "Maps surface type tag to team affiliation, only recognizes tag with 'Fort.DamageSurfaceType' prefix",
    "FortAthenaMutator_PlayerTeamSettings:TeamSettingsDataMap": "Maps team indices to corresponding team settings components",
    "FortPlayerParachute:TrailComponentDefinitionMap": "Maps trail effect components to the index of the trail effect defintion on the glider",
    "VolumePerformanceMetrics:PerformanceValueMargin": "Margin given to the performance metric, which adds to the max value.",
    "EFortPhysicsObjectActivationType.AlwaysInstant": "Mark this activation as a candidate for delayed activation",
    "FortObjectiveFilter_SetMarker:RequiredMarkerTypes": "Marker must be one of these for this objective to progress",
    "AthenaMarkerComponent:MarkerStream": "Marker stream holds the markers currently alive for this player, can vary per player, even on the same squad.",
    "EFortReplayEventType.UserPlaced": "Marker that the user placed during playback. Initially for broadcast only",
    "ESocialTutorialType.ContentRatingSettings": "Marks a Panel associated with Content Ratings",
    "ESocialTutorialType.ContentUnlockedSettings": "Marks a Panel associated with Unlocked Content",
    "ESocialTutorialType.VoiceReport": "Marks a Panel associated with Voice Reporting",
    "ESocialTutorialType.CreativeContentSettings": "Marks a Panel associated with unlocking Creative Content",
    "MinimapHiddenComponent": "Marks actors as being hidden when capturing the minimap",
    "ESocialTutorialType.KWSSidebarSupervisedSettings": "Marks as Panel K3S Settings shown in the sidebar",
    "ESocialTutorialType.KWSVoiceChannelPanelSupervisedSettings": "Marks as Panel K3S Settings shown in the sidebar voice channel panel",
    "ESocialTutorialType.LikeIsland": "Marks as Panel associated with \"Like Island\" button",
    "ESocialTutorialType.LookingForParty": "Marks as Panel associated with Looking For Party Tab",
    "ESocialTutorialType.TagsEditor": "Marks as Panel associated with Profile Taband Tags Editor",
    "ESocialTutorialType.RebootRallyUsers": "Marks as Panel associated with the Reboot Rally user list",
    "FortAthenaMutator_Mash:bInitRequirementAllAdditionalPlaylistLevelsVisible": "Marks that all playlist levels have become visible.\n     All init requirement bools need to be true before we can run InitMash().",
    "FortAthenaMutator_Mash:bInitRequirementSafeZoneLocationsInitialized": "Marks that all safe zone locations have been initialized.\n     All init requirement bools need to be true before we can run InitMash().",
    "FortAthenaMutator_Mash:bScoresAreFinal": "Marks when all scoring is done. Is used by the end of game UI to make sure all scores are complete before setting score text.",
    "RockBoxSpringSetup:Mass": "Mass of the point mass.\nUseful if you want to keep the same Strength and Damping settings but want to pretend there is something heavier.",
    "PhysicsPawnObjectInitialParameters:OverrideMassInKG": "Mass to override the default. 0 will keep the initial mass.",
    "MassDeltaVelocityDamageHandlerData:MassDamageCurve": "Mass vs Damage Curve",
    "FortAthenaLoadout:CharmOverride": "Master override for easy testing of charms - applies to every charm slot",
    "FortAthenaLoadout:ItemWrapOverride": "Master override for easy testing of item wraps - applies to every wrap slot",
    "FortNDCImpactInfo:bUseNDCImpacts": "Master switch for using NDCs for impact FX or not.",
    "RandomUpgradeData:Enabled": "Master toggle switch. If disabled it will never apply.",
    "CobaltWidgetRoundData:CurrentRoundMatches": "Match data for the current round",
    "EAthenaRoundsMutatorPhase.MatchEndUI": "Match end UI is displayed",
    "FortAthenaMutator_MusicEvents:MatchEndNeutralEvent": "Match end fallback event if the appropriate Win/Lose event was not defined.",
    "McpMatchResults": "Match results (per player) used to update the player's MMR when their current session ends.",
    "FrameTimeSnapshot:EndTimeSeconds": "Match time from start of aircraft phase at the end of this snapshot.",
    "FortAthenaMutator_MatchCondition_DeadTeams": "MatchCondition class that is satisfied when a certain number of teams die during the current match segment",
    "FortAthenaMutator_MatchCondition_ConnectedTeams": "MatchCondition that is satisfied when there is <= N connected teams remaining.\nIf all of a team's players disconnect from the match, the team is considered NOT connected.",
    "HitBuildingDamageOverride:VehicleDriverTagQuery": "Matching gameplay tag to override damage.",
    "FortPlayerPawn:RootMotionInterruptMontageStack": "Matching stack of Montage references",
    "FortLobbyBeaconPlayerState:MatchmakingLevel": "Matchmaking Level",
    "VkGenerateTestcodeRequest:MatchmakingConfig": "Matchmaking configuration",
    "VkProjectSnapshot:MatchmakingConfig": "Matchmaking configuration",
    "VkSnapshotSaveRequest:MatchmakingConfig": "Matchmaking configuration",
    "EFortItemType.AthenaEventToken": "Matchmaking event tokens",
    "MatchmakingParams:Flags": "Matchmaking flags",
    "FortGameMode:MatchmakingRegionId": "Matchmaking group ID assigned to this game derived from matchmaking info",
    "PartyMemberCampaignInfo:MatchmakingLevel": "Matchmaking level of the member - used to roughly match difficulty/advancement.",
    "MatchmakingParams:MatchmakingLevel": "Matchmaking level of the party, to be used for finding other parties of a similar level.",
    "FortCachedMatchmakingSearchParams:MatchmakingParams": "Matchmaking parameters that were used",
    "FortPlayerStateAthena:KeepPlayingTogetherMatchmakingRegion": "Matchmaking regions are only valid on the client of a party leader, so we use this to propagate to other squad/party members",
    "FortPlayspaceMatchmakingSettings:MatchmakingRule": "Matchmaking rules used by this Playspace",
    "EFortPlayspaceUserAcceptanceType.Matchmaking": "Matchmaking service",
    "EMatchmakingFlags.NoReservation": "Matchmaking should only search for new sessions",
    "FortSearchPassState:MatchmakingState": "Matchmaking state",
    "MMAttemptState:State": "Matchmaking state",
    "FortCachedMatchmakingSearchParams:MatchmakingType": "Matchmaking type that was used",
    "SkyfireBackpackComponent:BackBlingMaterialIndex": "Material Indices",
    "FortCurieFXSettings:MaterialParameterCollection": "Material Parameter Collection for setting CurieLandscapeBias and CurieLandscapeDivisor",
    "FortAthenaMutator_Uranium:MinimapMaterialParameterCollection": "Material Parameters used for drawing the storm shield on the minimap UI",
    "BuildingTimeOfDayLights:FourLayerColorInfo": "Material and lighting properties for four-layer materials.",
    "FortCosmeticModification:CosmeticMaterial": "Material change to apply",
    "ECurieEntityType.Material": "Material entities cannot cause state changes or be applied to other materials",
    "LacklusterData:ChromeAnimChestMaterial": "Material for animated chests",
    "LacklusterData:ChromeNoAnimChestMaterial": "Material for non-animated chests",
    "FortCreativeInteractVisualizationComponent:StaticMeshMaterial": "Material for the StaticMesh.",
    "FortPlayerMarkerBase:MID_Target": "Material from the marker target's static mesh",
    "FortPlayerMarkerBase:MID_Main": "Material from the marker's static mesh",
    "FortBluGloManager:BluGloIcon": "Material icon to use for bluglo",
    "FortMissionWeightedReward:LootIcon": "Material icon to use for in-world display to the user to advertise rewards for the mission",
    "FortPawnStats:CurieMaterialIdentifier": "Material identifier in Curie for this pawn, if any; Parsed from CurieMaterialIdentifierString on import",
    "AthenaCapturePoint:HUDIndicatorMID": "Material instance being used by the capture point",
    "FortAthenaMutator_PreloadAssets:MaterialInstances": "Material instances to preload",
    "FortAIPawnSkeletalMeshAsyncLoadData:OverrideMaterials": "Material overrides (optional).",
    "FortAthenaMutator_Bagel:StormMaterialOverrides": "Material overrides to apply to the storm",
    "FortAthenaMutator_Mash:StormMaterialOverrides": "Material overrides to apply to the storm",
    "FortAthenaMutator_StormAlteration:MaterialOverrides": "Material overrides to apply to the storm",
    "BuildingContainer:SearchedMaterialOverrides": "Material overrides to use on the searched mesh",
    "FortMaterialProgressBarSectionStyle:BarParamName": "Material parameter name of the bar section",
    "FortMaterialProgressBarSectionStyle:BarColorOneParamName": "Material parameter name of the bar section's first color",
    "FortMaterialProgressBarSectionStyle:BarColorTwoParamName": "Material parameter name of the bar section's second color",
    "AthenaCapturePoint:IconMaterialIndexParameter": "Material parameter value needed for the UI to represent this control point",
    "FortPlayerControllerSpectating:SpectatorPostProcessMaterial": "Material specific to spectator to use to override the post-process MID controlled by the FortTimeOfDayManager",
    "PlaysetPreview:PlaysetMaterial": "Material that will be applied to the spawned StaticMeshActor.",
    "FortAnimNotifyMaterialOverride_ScalarParameter:TargetMaterials": "Material to apply the parameter to",
    "IceGroundPath:Material": "Material to apply to segment meshes",
    "AthenaCosmeticMaterialOverride:OverrideMaterial": "Material to override the material at the specified index.",
    "CustomPartMaterialOverrideData:OverrideMaterial": "Material to override the material at the specified index.",
    "AshtonStoneData:StoneIconBrush": "Material to use for the map icon",
    "FortPOIInjector:StencilMaterialToUse": "Material to use in place of the Athena PlayerController's MapDiscoverability component's StencilMaterial",
    "RufusWeeklyMapUpdater:StencilMaterial": "Material to use in place of the Athena PlayerController's MapDiscoverability component's StencilMaterial",
    "FortAthenaLivingWorldStaticPointProvider:EditorPreviewMeshOverrideMaterial": "Material to use on the spawner in-editor; allows overriding the mesh's default material so the spawners can be easily identified in editor.",
    "FortAthenaVehicleSpawner:EditorPreviewMeshOverrideMaterial": "Material to use on the spawner in-editor; allows overriding the mesh's default material so the spawners can be easily identified in editor.",
    "SurvivorPresigeData:LargeIconMaterial": "Material to use while large",
    "SurvivorPresigeData:SmallIconMaterial": "Material to use while small",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:FullMapDebugCircleDrawingMaterial": "Material used for drawing debug safezone circles on the map.",
    "FortGameStateAthena:MiniMapCircleDrawingMaterial": "Material used for drawing the current safezone circle on the minimap and full map.",
    "FortGameStateAthena:MiniMapNextCircleDrawingMaterial": "Material used for drawing the next safezone circle on the minimap and full map.",
    "AIDebuggerRendererComponent:NavMeshMaterial": "Material used to render the NavMesh polygons",
    "FortAnimNotifyMaterialOverride_MaterialPair:OverrideMaterial": "Material we have after the override",
    "FortAnimNotifyMaterialOverride_MaterialPair:TargetMaterial": "Material we have before the override",
    "FortWindMaterialData:IntenseStateMID": "Material with parameters to interpolate TO...",
    "SidewaysStateComponent_Player:SidewaysMaterialParameterCollection": "MaterialParameterCollection that holds the material parameters related to the Sideways (i.e. Location and\nRadius parameters for each local player; see parameters names below.",
    "LacklusterData:MaterialsAndTypes": "Materials and types stored for chromed actors without components",
    "FortWeapon:DefaultWeaponMaterials": "Materials applied to this weapon before a temporary material override",
    "BuildingSMActor:AnimatingMaterialMappings": "Materials to apply to the mesh for this piece when it is animating construction/destruction",
    "BuildingSMActor:DamagedButNotAnimatingMaterialMappings": "Materials to apply when the actor is damaged but not currently animating",
    "AthenaCapturePoint:CapturePointMat_Neutral": "Materials used for HUD indicators of the capture points",
    "CachedRealitySaplingData:maturity_level": "Maturity level of the sapling.",
    "FortAIAssignmentSettings:MaxAIAllowedPerGoal": "Max AI allowed for each goal on this assignment.  If non-positive, it's unlimited!",
    "FortPawnStats:MaxAcceleration": "Max Acceleration (rate of change of velocity)",
    "FortMovementComp_CharacterAthena:MaxAccelerationFlying": "Max Acceleration Flying (rate of change of velocity)",
    "LiquidRibbonManager:CurlingMaxClosenessToBreakage": "Max ClosenessToBreakage value to use as a multiplier when calculating curling at a detachment.",
    "FortQuestObjectiveStatXPTableRow:MaxCount": "Max Count for triggering - don't allow the XP event row to fire more than this number of times for a particular player in a match.  If has default 0 value, the count is unlimited.  This isn't setup to be used with CountThreshhold.",
    "FortPawnComponent_PassiveHealer:GreetingDistanceSqr": "Max Distance to display the greeting text",
    "FortPawn:MaxEvalRateForInterpolation": "Max Evaluation Rate allowed for interpolation to be enabled. Beyond, interpolation will be turned off.",
    "FortPawnStats:MaxAccelerationFlying": "Max Flying Acceleration (rate of change of velocity)",
    "FortEncounterSettingsFixedPace:SpawnAIIntervalCount": "Max Number of AI to spawn in each interval until AIMaxCount is reached.",
    "FortWorldManager:MaxTiles": "Max Number of Tiles to use",
    "FortAthenaCompassIcon:MaxPawnDistanceForScaling": "Max PawnDistance for scaling for displaying the icon in the compass",
    "FortAthenaMutator_Skyfire:MaxLootRarity": "Max Rarity a squad can earn.",
    "FortRangedWeaponStats:FortHomingTurnSpeedMax": "Max Turn speed used for fortnite homing",
    "EFortHUDElementVisibiltyPriority.COUNT": "Max Value",
    "WaterJumpParams:WaterJumpMaxVelocityZ": "Max Velocity Z to accelerate to when jumping.",
    "BuildingFoundation:NavExclusionMaxX": "Max X coord (in grid cells) of excluded area",
    "BuildingFoundation:NavExclusionMaxY": "Max Y coord (in grid cells) of excluded area",
    "AirControlParams:TerminalVelocity": "Max Z velocity when falling down. Ignored if set to 0.",
    "AirControlParams:UpwardTerminalVelocity": "Max Z velocity when moving upward. Ignored if set to 0.",
    "FortGravityGunHolder:TargetRotationTorqueMaxAccel": "Max acceleration when calculating rotation torque using ComputeTorqueForTargetRotation.",
    "WaterControlParams:MaxAccelerationSprinting": "Max acceleration while sprinting.",
    "WaterControlParams:MaxAcceleration": "Max acceleration.",
    "FortAthenaLivingWorldDensityCondition:MaxDensity": "Max allowed density : will return false if the density in range is higher than that.",
    "FlightParams:MaxRotationalDampingTorque": "Max amount of damping torque that can be applied",
    "SphericalDriveParams:MaxAirControlForce": "Max amount of force that can be applied to the object in air",
    "FortVehicleFuelComponent:MaxFuelAtSpawn": "Max amount of fuel at spawn time",
    "LevelInstanceListElement:MaxMemory": "Max amount of memory that the level can use.",
    "FlightParams:MaxHorizontalStabilizationTorque": "Max amount of torque the tail can provide for horizontal stabilization.",
    "FlightParams:MaxVerticalStabilizationTorque": "Max amount of torque the tail can provide for vertical stabilization.",
    "FortComponent_Energy:RechargePercentageLimit": "Max amount to recharge to using normal recharge.  To go above this value requires some other item or effect.",
    "FortRangedWeaponStats:AthenaRecoilAngleMax": "Max angle range used for the random pitch/yaw recoil direction.\n      0 is straight up.  180 is straight down.\n      Negative is to the left.  Positive is to the right.",
    "SphericalDriveParams:MaxSpeedKmh": "Max angular speed (deg/s) achievable by the motor. Faster speeds can be\n              achieved by rolling down hills, but the engine will stop providing torque\n              past this speed.",
    "DigestedWeaponAccuracy:MaxAttackRange": "Max attack range to attack target, bot will move towards its target if farther than that (cm)",
    "FortGravityGunHolder:TrajectorySplineMaxBounces": "Max bounces when calculating the trajectory spline using CalculateProjectileTrajectorySplineWithHit.",
    "FortScoutDronePickupManager:MaxExtraCapsuleDimensions": "Max capsule dimension offsets we can get to when dynamically expanding the collision capsule",
    "CreativeRoyaleIslandPlayspace:MaxMemorySamplingCellSize": "Max cell size allowed when calculating memory sampling locations",
    "FortPluginActorSpawner:MaxSpawnChance": "Max chance to spawn the actor (0 - 1 values expected and > MinSpawnChance)",
    "SlipperySlopeParams:SlopeLandingMaxHorizontalForce": "Max contribution of vertical landing to horizontal speed.",
    "CumulativeFrameTimeWithoutSleepLimits:MaxCumulativeFrameTimeAboveThreshold": "Max cumulative frame time above threshold",
    "PickedTurnTransitionData:MaxUpdateRotationAngle": "Max degrees that the scaled rotation can differ from the initial scale",
    "TurnTransitionData:MaxUpdateRotationAngle": "Max degrees that the scaled rotation can differ from the initial scale",
    "ElevationArrowData:MaxDistanceToDisplay": "Max distance allowed between the player and the object for the arrow to display.\nOutside of this range no elevation data will be shown.",
    "FortGameStateAthena:EliminationMarkerHUDMaxDistance": "Max distance an elimination can happen to display the marker on the HUD (in meters)",
    "RepGraphMutatorSpatializationZone:MaxDistPct": "Max distance as percent of per-connection cull distance, to map to MaxRepHz",
    "FortSplineAudioActor:MaxAudibleRange": "Max distance at which audio from this actor can be heard",
    "FortSoundIndicatorComponent:DefaultMaxVisibilityDistance": "Max distance at which the sound indicator will be visible if not based off a USoundBase (i.e. if there is no Default Sound linked to the indicator). If this is set to 0 and the DefaultSoundLinkedToIndicator is not specified, the sound indicator will simply not be displayed.",
    "FortGravityGunHolder:TrajectorySplineMaxDistanceBetweenSplinePoints": "Max distance between spline points when calculating the trajectory spline using CalculateProjectileTrajectorySplineWithHit.",
    "HurdleInputConfig:Phase4_MaxDownDistance": "Max distance down to transition to ground after the hurdle, if we have nothing at that height, we will transition to fall",
    "HurdleInputConfigCache:Phase4_MaxDownDistance": "Max distance down to transition to ground after the hurdle, if we have nothing at that height, we will transition to fall",
    "FortAIDirector:MaxNormalLODDistanceToPlayer": "Max distance from the closest player to use Normal LOD.  We will use a lower LOD at distances above this value.",
    "FortMeleeWeaponStats:RangeVSEnemies": "Max distance melee can hit an enemy.",
    "FortMeleeWeaponStats:RangeVSWeakSpots": "Max distance melee can hit an enemy.",
    "FortHealthBarComponent:MaxDistance": "Max distance this health bar will draw at.",
    "AIDebuggerRendererComponent:NavLinkMaxDrawDistance": "Max distance to draw NavLink from player",
    "FortPawnComponent_SpeechBubble:SpeechBubbleMaxDrawDistance": "Max distance to draw the SpeechBubble on the client",
    "FortPlayerPawnAthena:LandFXMaxDrawDistance": "Max draw distance for land FX",
    "FortPawnComponent_Disguise:RevealPlayerProximityDuration": "Max duration with a player in proximity radius before trigger the reveal",
    "MontageBeatSyncComponent:MaxPlayRateBeforeHalf": "Max factor to apply to play rate before /= 2. Must be >0 and >= (Min*2).",
    "FortCurieFXSettings:ElectricityArcWPONoiseRandMax": "Max for random arc world position offset noise",
    "FortCurieFXSettings:ElectricityArcRandScaleMax": "Max for random scale multiplier applied to arc mesh component world scale",
    "DigestedWeaponAccuracy:MaxTrackingHeightOffsetError": "Max height offset error to apply to aiming. This doesn't scale based on distance and should only be used to add a bit of noise. (cm)",
    "WeaponAccuracy:MaxTrackingHeightOffsetError": "Max height offset error to apply to aiming. This doesn't scale based on distance and should only be used to add a bit of noise. (cm)",
    "AirControlParams:MaxAcceleration": "Max horizontal acceleration. Diminished when diving down in custom falling modes.",
    "SlipperySlopeParams:MaxLateralSpeedMultiplierInWater": "Max horizontal speed multiplier while slipping around in water",
    "SlipperySlopeParams:MaxLateralSpeed": "Max horizontal speed while slipping around",
    "AirControlParams:MaxLateralSpeed": "Max lateral speed in the horizontal direction. Diminished when diving down in custom falling modes.",
    "CrashpadStaticParams:MaxPhysicsObjectLaunch": "Max launch velocity for physics object launch",
    "CrashpadStaticParams:MaxNonPawnVelocity": "Max launch velocity magnitude for non-pawns",
    "LiquidRibbonManager:MaxSegmentLengthBeforeBreak": "Max length a segment can be before it breaks/splits",
    "FortGameStatePvE:MaxMatchLength": "Max length of time players can be in a mission before automatically ending the match",
    "FortAthenaMutator_Bagel:StreakScoreMultiplierMaxLevel": "Max level for streak multiplier",
    "FortAthenaMutator_Mash:StreakScoreMultiplierMaxLevel": "Max level for streak multiplier",
    "SkyTubeAsyncInPersistent:MaxTubeAcceleration": "Max linear acceleration in tube. (auto-marshaled)",
    "SkyTubeAsyncInPersistent:MaxTubeSpeed": "Max linear speed in tube. (auto-marshaled)",
    "FortGravityGunHolder:MaxMoveSpeedToGoal": "Max move speed to goal is used against the change velocity vector, so we can never go faster then this speed towards the goal (size indexes into scalable float 0=small to 3=large)",
    "FortEncounterSettingsFixedPace:AIMaxCount": "Max number of AIs that can be spawned by this encounter",
    "FortAIDirector:MaxActiveAlive": "Max number of active pawns that are allowed to be alive, including awakened dormants",
    "FortAthenaLivingWorldPointProviderSpawnLimiter:MaxNumberOfSpawn": "Max number of actors that can be spawned with this point provider. -1 is infinite.",
    "CumulativeFrameTimeWithoutSleepLimits:MaxNumberOfFramesAboveThreshold": "Max number of frames above threshold",
    "FortAthenaLivingWorldPointProviderSpawnLimiter:MaxNumberOfEventInstance": "Max number of instance (group) that can be spawned with this point provider. -1 is infinite.",
    "FortGameStateZone:MaxPlayerStructures": "Max number of player structures allowed (-1 for infinite - default value)",
    "FortSearchPassParams:MaxProcessedSearchResults": "Max number of search results processed before we give up",
    "RadiusTrackingInitializer:MaxCenterOffset": "Max number of units the center can be offset from the actual location of the player.  If this exceeds the current radius, it will be clamped back to the radius to guarantee the player remains in the circle.",
    "FortAthenaPartyRiftPortal:MaxPartySize": "Max party size for this portal",
    "FortGameModeAthena:MaxPlayerCount": "Max players allowed to join.",
    "LiquidRibbonManager:MaxPointSize": "Max point size (max size of the ribbon FX at a point)",
    "FortProjectileMoveComp_Drunk:DrunkBlendOutMaxRange": "Max range for drunk blending out.",
    "FortPicklePortal:MaxDistance": "Max range of the portal effect. Will affect the size of the collision volume attached to the portal.",
    "FortRangedWeaponStats:AthenaRecoilMagnitudeMax": "Max range used for random pitch/yaw recoil magnitude.",
    "FortRangedWeaponStats:AthenaRecoilRollMagnitudeMax": "Max range used for random roll kick magnitude.\n      Negative is to the left.  Positive is to the right.",
    "LivingWorldCalendarEventCondition:RatioMaxValue": "Max ratio value used in the InBetween Behavior.",
    "TowhookParams:SpringMaxStiffnessForce": "Max rope force due to stretching",
    "PickedTurnTransitionData:MaxRotationScaleToMatchDesired": "Max rotation scale to match desired rotation",
    "TurnTransitionData:MaxRotationScaleToMatchDesired": "Max rotation scale to match desired rotation",
    "DigestedWeaponAccuracy:MaxRotationInterpSpeed": "Max rotation speed to control bot rotation (degrees/sec)",
    "WeaponAccuracy:MaxRotationInterpSpeed": "Max rotation speed to control bot rotation (degrees/sec). Interpolation is deactivated if speed <= 0.0f",
    "LiquidRibbonManager:CalculateBaseCurlOffset_MaxSegmentLength": "Max segment length to use in CalculateBaseCurlOffset.",
    "FabricSignificanceBasedUpdateBucketRuntime:ActualMaxSignificance": "Max significance value for bucket.",
    "BuildingGameplayActorPetrol:SplatterMaxDecalWidth": "Max size this splatter will reach.  Calculated once at start up.",
    "TrackingOffsetModifierInfo:MaxSkill": "Max skill level for this bracket",
    "FortCharacterMovementMutatorComponent:BuffetFlyingMaxSpeed": "Max speed",
    "FortAthenaVehicle:VehicleMaxHorSpeedToDamage": "Max speed (km/h) before a collision damages the vehicle",
    "FortMovementComp_Character:FallingSlopeSafeSlideMaxSpeedScalable": "Max speed clamp when sliding on a \"safe\" slope, as defined by FallingSlopeSafeSlideAngle. Set to 0 to disable this feature.",
    "FortSkyTube:TangentialMaxSpeed": "Max speed target along tube spline when passively moving along the tube.",
    "WaterControlParams:MaxNormalSpeed": "Max speed when not sprinting and moving normally (before water velocity is applied)",
    "WaterControlParams:MaxTargetingSpeed": "Max speed when targeting (before water velocity is applied)",
    "SphericalDriveParams:MaxAirControlSpeedKmh": "Max speed you can get to in any direction using air control",
    "WaterControlParams:MaxSprintSpeed": "Max sprint speed (before water velocity is applied)",
    "FortGravityGunHolder:TrajectorySplineMaxSteps": "Max steps when calculating the trajectory spline using CalculateProjectileTrajectorySplineWithHit.",
    "BuildingGameplayActorSpawnDetails:MaxTimeToStartSpawnningBGAs": "Max time after the start of a phase before we start spawning any BGAs (index into this table row is the phase #)",
    "FortGameMode:MaxIdleTime": "Max time allowed to be idle",
    "FortAthenaMutator_SpawningPolicyBase:MaxRespawnTime": "Max time before we respawn an item to maintain the \"NumItemsToSpawn\" count of items if \"bShouldMaintainItemCount\" is true",
    "BuildingGameplayActorSpawnDetails:MaxTimeBetweenBGASpawns": "Max time between each BGA spawn before we spawn the next one (index into this table row is the phase #)",
    "MilkshakeControllerComponent:MaxTimeBetweenBuildingDamageFX": "Max time between spawning building damage FX",
    "BagelScoreMultiplierSpawnData:MaxSpawnTime": "Max time for this to spawn",
    "MashScoreMultiplierSpawnData:MaxSpawnTime": "Max time for this to spawn",
    "LiquidRibbonManager:TimeSinceDetachmentCurlCurve_MaxTime": "Max time since detachment to use as a TimeSinceDetachmentCurlCurve input when calculating curling at a detachment",
    "LiquidRibbonManager:CalculateBaseCurlOffset_MaxTimeSinceDetachment": "Max time since detachment to use in CalculateBaseCurlOffset",
    "WaterControlParams:WaterSimMaxTimeStep": "Max time step allowed, to prevent huge forces on hitches.",
    "FortCowVehicle:MaxSquashTime": "Max time that we'll continue to squash.",
    "DigestedSightReactionSpecialization:SightMaxAdditionTime": "Max time to add to sight reaction time based on distance",
    "SightReactionSpecialization:SightMaxAdditionTime": "Max time to add to sight reaction time based on distance",
    "FortDelayRTMMData:MaxRTTMDelay": "Max time to delay the RTTM",
    "FortTouchAimAssistSettings:ProjectileMaxLookAheadTime": "Max time to look ahead at where a target is going.  Target look ahead is only used when firing projectiles.\nTarget look ahead extends the targeting bounds based on the target's velocity, distance, and projectile speed.",
    "FortAthenaAIBotController:SpectateOnDeathMaxTime": "Max time to spectate when dead",
    "BuildingGameplayActorSpawnDetails:MaxTimeToRepeatSpawningBGAs": "Max time to wait before repeating the spawning of bgas with in the same phase (index into this table row is the phase #)",
    "TurretCosmeticData:ReplicateOverheatMax": "Max value for replicated overheat",
    "MilkshakeControllerComponent:CameraShakeRotOscillationRollFrequencyMax": "Max value for the Camera Shake's Rot Oscillation Pitch Frequency",
    "MilkshakeControllerComponent:CameraShakeRotOscillationPitchFrequencyMax": "Max value for the Camera Shake'sRot OscillationPitch Frequency",
    "EDynamicUIZOrder.Loading": "Max value of the custom z order",
    "CrashpadStaticParams:MaxPhysicsObjectStartVelZ": "Max vert start velocity for physics objects",
    "SlipperySlopeParams:MaxVerticalLaunchSpeed": "Max vertical component of velocity when sliding off a ramp",
    "CrashpadStaticParams:MaxLaunch": "Max vertical launch velocity",
    "CrashpadStaticParams:MaxLaunchCrashpadPlus": "Max vertical launch velocity when using Crashpad+",
    "WaterControlParams:MaxWaterForce": "Max water force, after WaterVelocity * (WaterForceMultiplier * WaterForceSecondMultiplier).",
    "WeaponAccuracy:MaxTrackingDistanceFarError": "Max weapon tracking distance error farther than the target in cm",
    "WeaponAccuracy:TargetingMaxTrackingDistanceFarError": "Max weapon tracking distance error farther than the target in cm when using targeting (ADS)",
    "WeaponAccuracy:MaxTrackingDistanceNearError": "Max weapon tracking distance error nearer than the target in cm",
    "WeaponAccuracy:TargetingMaxTrackingDistanceNearError": "Max weapon tracking distance error nearer than the target in cm when using targeting (ADS)",
    "WeaponAccuracy:MaxTrackingOffsetError": "Max weapon tracking offset error in cm",
    "WeaponAccuracy:TargetingMaxTrackingOffsetError": "Max weapon tracking offset error in cm when using targeting (ADS)",
    "FortAbilityTargetSelectionList:MaxYawAngleToTarget": "Max yaw angle, in degrees, that we will use to determine if we are rotated enough to do targeting",
    "DigestedEvasiveManeuverSkillSettings:DodgeDistanceMax": "Maximal distance to travel when dodging",
    "EvasiveManeuverSkillSettings:DodgeDistanceMax": "Maximal distance to travel when dodging",
    "OutpostUpgradeAndPrestigeBuildingData:MaxPrestigeLevel": "Maximal prestige level for outpost",
    "DigestedEvasiveManeuverSkillSettings:CrouchTimeMax": "Maximal time to stay in crouch in evasive maneuver",
    "EvasiveManeuverSkillSettings:CrouchTimeMax": "Maximal time to stay in crouch in evasive maneuver",
    "FortPlayerPawnAthenaMovementNoiseOverride:MaxNoiseGenerationRange": "Maximium range of the noise generated when the pawn is moving. It will be interpolated with MinNoiseGenerationRange based on the speed of the Pawn.",
    "EIndicatorStateImage.MAX": "Maximum",
    "FortAthenaPatrolPath:WaterLevelIndexMax": "Maximum Flood water level index allowed for this path, Set at -1 to invalid.",
    "FortAthenaLivingWorldVolume:WaterLevelIndexMax": "Maximum Flood water level index allowed for this volume, set at -1 to ignore water level.",
    "MountedWeaponInfo:MaximumPitchAimingAngle": "Maximum Pitch aiming angle for the mounted weapon",
    "FlyingRidableControlParams:MaxAccelerationBoost": "Maximum acceleration boost when flying downwards",
    "FortAthenaPatrolPath:MaxConcurrentUsage": "Maximum actors count that can be assigned on same time on this patrol path. -1 = No limit.",
    "FortAthenaLivingWorldEventDespawnCondition:MaxStimulusAgeToBeConsideredInCombat": "Maximum age of the last perceived stimulus of an hostile player to consider it in combat.",
    "FortWeaponRanged:MaxTargetingAimAdjustment": "Maximum aim adjustment rotation to apply while entering / exiting targeting if bMaintainAimLocationDuringTargeting == true, if using old calculation",
    "PatrolPathLeash:Width": "Maximum allowed XY distance from patrol path",
    "PatrolPathLeash:Height": "Maximum allowed Z distance from patrol path",
    "FortGameModeAthena:ScoreMaxMinutesAliveCounted": "Maximum amount of minutes that count towards score; must be kept in sync with MCP Java code!",
    "FortSupplyDropGamePhaseData:SupplyDropMaxSpawnHeight": "Maximum amount of time between each individual supply drop spawn to wait before spawning the next one",
    "FortSupplyDropGamePhaseData:SupplyDropMinSpawnHeight": "Maximum amount of time between each individual supply drop spawn to wait before spawning the next one",
    "FortSupplyDropGamePhaseData:SupplyDropSpawnMaxWaitTime": "Maximum amount of time between each individual supply drop spawn to wait before spawning the next one",
    "FlightParams:HeadingStabilizationMaxDegPerSecond": "Maximum angular rate by which heading stabilization is allowed to change\n              the heading.",
    "BuildingActorClassData:MaximumBuildingLevel": "Maximum building level allowed for this building; Negative value implies unbounded",
    "UserOptionDefinitionClassSlotMetaData:MaxClassSlot": "Maximum class slot value for this option, or INDEX_NONE to use the default.",
    "FortAthenaLivingWorldEvent:MaxCount": "Maximum concurrent (in same time) number of Actors we can spawn with this Event. Defined per SafeZonePhase",
    "FortAthenaLivingWorldEvent:EventInstanceMaxCount": "Maximum concurrent (in same time) number of event instance we can spawn with this Event. Defined per SafeZonePhase. Use -1 to deactivate this feature.",
    "FortPawnStats:MaxControlResistance": "Maximum control resistance for the pawn",
    "FortAIPawnStats:MaxConvertResistance": "Maximum convert resistance for the pawn",
    "FortAthenaAIBotController:EmotesMaxCount": "Maximum count of emotes pushable in the bot cosmetic loadout",
    "CreativeIslandResource:MaxCount": "Maximum count of this resource.",
    "FortPhysicsVehicleDamageOverrideConfigs:MaxDamageOverride": "Maximum damage applied by this vehicle",
    "RockVehicleAbility_Flip:ContactNormalThresholdDegrees": "Maximum difference in angle between ground contact normal and vehicle up.",
    "PerDifficultyMissionGenerationInfo:MaxDifficulty": "Maximum difficulty for which this list of missions to generate is valid.  If left empty, no maximum difficulty is required, so it will apply to any difficulty.",
    "FortNonPrimaryMission:MaxDifficulty": "Maximum difficulty for which this mission is valid.  If left empty, no maximum difficulty is required, so it will apply to any difficulty at or above the specified minimum.",
    "FortGlobalMission:MaxDifficultyLevel": "Maximum difficulty level this mission may run in.",
    "MatchmakingParams:MissionDifficultyMax": "Maximum difficulty of the mission to match with.",
    "FortPlayerPawn:MaxIndicatorVisibilityDistForAllies": "Maximum distance at which this pawn's name indicator is visible to allies.",
    "FortPlayerPawn:MaxIndicatorVisibilityDistForEnemies": "Maximum distance at which this pawn's name indicator is visible to enemies",
    "FortPlayerPawnAthena:MaxIndicatorVisibilityDistForReplays": "Maximum distance at which this pawn's name indicator is visible to replay spectator.",
    "FortAthenaLivingWorldEvent:MaxDistanceToPlayer": "Maximum distance from atleast a player this event must be to be able to spawn.",
    "FortPawn:TeamBeaconMaxDist": "Maximum distance from camera position for this pawn to have its beacon displayed on the HUD",
    "AthenaNavMesh_Big:MaximumDistanceToWaterForShallow": "Maximum distance from the navmesh polygon to the water for a nav polygon to be flagged as shallow water.",
    "IndicatedActorScaleAndOpacityData:MaxScaleAndFadePercent": "Maximum distance percentage to scale and fade for after passing max distance.\n              The lower the percent, the faster we scale and fade.",
    "FortAthenaMutator_Wax:WaxLeadersMaximumCompassDistance": "Maximum distance the wax leaders will appear on the compass when drawn in a a special way",
    "FortSafeZoneDefinition:ForceDistanceMax": "Maximum distance to push out the zone's location relative to the previous zone.",
    "FortRespawnLogicData:MaxDistFromCenterPercent": "Maximum distance to respawn the players as a percentage from the center of the SafeZone",
    "FortPawnStats:PawnDamagedTeamNotificationDistance": "Maximum distance to send team events to nearby teammates when the pawn is damaged",
    "FortPieSliceSpawnData:MaxSpawnDistanceFromCenter": "Maximum distance to spawn the craft as a percentage from the center of the SafeZone",
    "FortPawnComponent_AIFormation:MaxDistanceFromSlotToSprint": "Maximum distance use as threshold to start to sprint to catch up with the leader",
    "FortPawnComponent_AIFormation:MaxDistanceFromSlotToSprintSqr": "Maximum distance use as threshold to start to sprint to catch up with the leader",
    "FortAthenaStateTreeLookAroundTaskInstanceData:LookAtDurationMax": "Maximum duration between look at",
    "FortAICombatTokenConsumerComponent:TokenHoldMaxDuration": "Maximum duration the consumer can hold a token",
    "RidableComponent:MaxHalfAimingAngle": "Maximum half aiming angle when riding, in degrees",
    "FortPawnStats:MaximumHealth": "Maximum health for the pawn",
    "FortTeamPerkLoadoutCondition:MaximumHeroTier": "Maximum hero tier required to satisfy this condition.  If unchecked (read-only), this value will be ignored.",
    "FortPartyRiftPortalManager:LongRangeInteractionCutoffAngle": "Maximum horizontal angle to consider for raycasts.  Reduces amount of raycasts generated.",
    "FortSmartObjectComponent:MaxAbsoluteAngles": "Maximum initial euler angle rotations the actor must be to be active. Angles set at <= 0 will be ignored. X is Roll, Y is Pitch, Z is Yaw.",
    "FortCurieFXSettings:ElectricityArcMaxPropagationLength": "Maximum length arc is allowed to propagate before VFX won't be shown",
    "TowhookParams:RopeBreakLength": "Maximum length the rope can be stretched to before breaking. Should generally be greater than MaxCableLength. 0 == infinite",
    "TieredWaveSetCollectionData:MaxLvl": "Maximum level required to use the wave set represented",
    "SpyTechLevelUpgradeData:MaxLevelUpgrade": "Maximum level this item can attain via upgrades",
    "SourceDriver:RangeMax": "Maximum limit of the input value (mapped to RemappedMax, only used when limiting the source range)\nIf this is rotation, the unit is radian",
    "FortAnimNode_Flap:TargetClampMax": "Maximum limit of the target value (after mapped to RemappedMax if using UseRange in Source). In the case of rotation, use radian.",
    "FortPhysicsObjectComponent:MaxLinearVelocityOverride": "Maximum linear velocity allowed override we apply if >= 0.0f",
    "PickupManagementSettings:PickupsAllowedMax": "Maximum managed pickups in the world. 1 to 100",
    "CrashpadStaticParams:MaxPhysicsObjectMass": "Maximum mass for a physics object",
    "AircraftFlightConstructionInfo:CustomMaxMidlineAngle": "Maximum midline angle used if bUseCustomPathSelection is true",
    "FortAIAssignmentSettings:MaxAIAllowedForAssignment": "Maximum number of AI allowed on this entire assignment at once.  If non-positive, it's unlimited.",
    "FortAthenaLivingWorldEncounterStage:MaximumConcurrentNumberOfAI": "Maximum number of AI that can exist at the same time in the encounter for this stage. Actor from previous stage that are not yet destroyed are counted in this.",
    "HomebaseSquad:MaxNumDefendersAllowedInGroupLevel": "Maximum number of Defenders allowed in the level for group content for this Squad, across all players.",
    "HomebaseSquad:MaxNumDefendersAllowedInLevel": "Maximum number of Defenders allowed in the level for this Squad, across all players.",
    "FortAthenaMutator_ItemDropOnDeath:MaxAmmoTypeDrops": "Maximum number of ammo types that can be dropped at a time",
    "FortGameSession:MaxBroadcasters": "Maximum number of broadcasters allowed by this server.",
    "ValkyrieBeaconClient:MaxTransactionQueueBytes": "Maximum number of bytes that can be queued for live edit during match before requiring re-upload of project",
    "FortAthenaMutator_Mash:MaxNumFriendsForSingleLeaderboardQuery": "Maximum number of friends to query scores for at once",
    "FortAthenaMutator_Mash:MaxTotalNumFriendsForLeaderboardQuery": "Maximum number of friends to query scores for.",
    "FortCreativeBudgetClassInstanceLimit:MaxNumberOfInstances": "Maximum number of instances of ActorClass allowed inside of a volume",
    "FortAthenaMapInfo:LlamaQuantityMax": "Maximum number of llamas to spawn on the map",
    "AutoAimWeaponPawnComponent:MaxLockOns": "Maximum number of lock-ons allowed for this weapon.",
    "FortCreativeBudgetPickupInstanceLimit:MaxNumberOfInstances": "Maximum number of pick up instances of ItemDefinition allowed inside of a volume",
    "FortSafeZoneDefinition:PlayerCapDuo": "Maximum number of player allowed to be alive during the hold phase of the storm if the StormCap is being used (<= 0, no cap specified for this safe zone)",
    "FortSafeZoneDefinition:PlayerCapSolo": "Maximum number of player allowed to be alive during the hold phase of the storm if the StormCap is being used (<= 0, no cap specified for this safe zone)",
    "FortSafeZoneDefinition:PlayerCapSquad": "Maximum number of player allowed to be alive during the hold phase of the storm if the StormCap is being used (<= 0, no cap specified for this safe zone)",
    "FortMinigameSettingsBuilding:Matchmaking_MaxSocialPartySize": "Maximum number of players allowed in a party when players attempt to queue for this experience.",
    "FortMinigameSettingsBuilding:MaxPlayers": "Maximum number of players allowed into the game.",
    "FortSafeZonePhaseInfo:PlayerCap": "Maximum number of players allowed to be alive during the hold phase of the storm if the StormCap is being used (<= 0, no cap specified for this safe zone)",
    "FortMinigameSettingsBuilding:Matchmaking_MaxPlayersPerSession": "Maximum number of players matchmaking will allow to join a session.",
    "FortLootTierData:StreakBreakerPointsMax": "Maximum number of points added when this tier row is selected",
    "LootTierDataRow:StreakBreakerPointsMax": "Maximum number of points added when this tier row is selected",
    "FortAthenaMutator_ItemDropOnDeath:MaxResourceTypeDrops": "Maximum number of resource types that can be dropped at a time",
    "MatchmakingParams:MaxSearchResultsOverride": "Maximum number of search results to retrieve from the backend",
    "LootPackageRow:MaxCount": "Maximum number of stacks of this item/subpackage to drop.",
    "FortSupplyDropSubPhaseData:SupplyDropMaxCount": "Maximum number of supply drops to spawn per time interval for this safezone",
    "FortQuestMissionCreationContext:MaxNumberToSpawnInWorld": "Maximum number of this MissionInfo to spawn in the world - This includes generated mission counts. -1 implies infinite amount. It is possible for multiple\nquests to want to spawn the same mission but we only want a specific number, especially unique missions.",
    "AbilityTrackedActorSettings:MaximumTrackedActors": "Maximum number of tracked actors to allow",
    "TrapItemDefintionDesignerData:MaxStackSize": "Maximum number of traps per stack in the users inventory",
    "MissionVehicleSpawnSet:MaxSpawnCount": "Maximum number of vehicles to spawn",
    "HmxSettings:maxActiveVorbisDecoders": "Maximum number of vorbis decoders to service at one time.",
    "FortWeaponComponent_ScopeAnimation:XStrafeOffsetMax": "Maximum offset along X due to strafing",
    "FortWeaponComponent_ScopeAnimation:XRotOffsetMax": "Maximum offset along X due to yaw rotation",
    "FortWeaponComponent_ScopeAnimation:YRotOffsetMax": "Maximum offset along Y due to pitch rotation",
    "FortGameModePvE:BigBenPvEAdjust": "Maximum offset in seconds from BigBenPvE to randomize mission completion.",
    "FortPawnStats:MaxOvershield": "Maximum overshield for the pawn",
    "BuildingGameplayActorChaser:PatrolMoveSpeedMax": "Maximum patrol movement speed",
    "TrapItemDefintionDesignerData:DisassembleDurabilityDegradeMaxLootPercent": "Maximum percentage of cost that goes back to player on recycle",
    "FortExCaliberProjectile:MaxPitchForRotationAdjustment": "Maximum pitch value at which the projectile will need rotation adjustments to not land completely straight forward (inclusive)",
    "SubmixEffectDynamicQuadDelaySettings:MaximumDelayLength": "Maximum possible length for a delay, in milliseconds. Changing this at runtime will reset the effect.",
    "AIRuntimeParametersSmartObjectActivityConfig:MaxDetectionRadius": "Maximum radius from AI to detect a SmartObject",
    "FortAthenaAISmartObjectActivityConfig:MaxDetectionRadius": "Maximum radius from AI to detect a SmartObject",
    "FortWindImpulseCylinderDelta:MaximumRadius": "Maximum radius of the rippling change.",
    "FabricInteractionTool:MaxRange": "Maximum range for Hit casts done by the interaction tool.",
    "FortCreativeMoveTool:MaxRange": "Maximum range for Hit casts done by the move tool.",
    "FortPartyRiftPortalManager:LongRangeInteractionMaximumDistance": "Maximum range for long-range interaction",
    "BuildingGameplayActorChaser:TargetingRangeMax": "Maximum range for target selection",
    "BuildingGameplayActorCrashpad:UseNativeCollisionHandling": "Maximum range for target selection",
    "DigestedFiringPattern:MaxRange": "Maximum range to use this pattern",
    "FiringPattern:MaxRange": "Maximum range to use this pattern, 0 means not taken into account",
    "FortKeepItemGroup:MaxTier": "Maximum rarity of items to choose from",
    "RepGraphMutatorSpatializationZone:FastPath_MaxRepHz": "Maximum replication frequency for FastShared replication",
    "RepGraphMutatorSpatializationZone:MaxRepHz": "Maximum replication frequency for Normal replication",
    "BuildingGameplayActorChaser:PatrolNewDirectionMax": "Maximum rotation on turn during patrol",
    "HoverDroneMovementComponent:MaxPitchRotSpeed": "Maximum rotational speed, pitch",
    "HoverDroneMovementComponent:TurboMaxPitchRotSpeed": "Maximum rotational speed, pitch, while in turbo mode.",
    "HoverDroneMovementComponent:MaxYawRotSpeed": "Maximum rotational speed, yaw",
    "HoverDroneMovementComponent:TurboMaxYawRotSpeed": "Maximum rotational speed, yaw, while in turbo mode.",
    "FortPawnStats:MaxShield": "Maximum shield for the pawn",
    "ValkyrieEditorConfig:ReferencedContentCacheSizeGB": "Maximum size (in GB) of the local cache that stores downloaded Referenced Content (defaults to 5.0 GB)",
    "SlipperySlopeParams:MaxInhibitingSlopeSpeedFactor": "Maximum speed reduction factor that will be applied to the player",
    "BuildingTrapFloor_Turret:MaxRotationSpeed": "Maximum speed the turret will rotate towards its target",
    "FortSupplyDropGamePhaseData:SupplyDropMaxSpeed": "Maximum speed to spawn this supply drop at",
    "FlyingRidableControlParams:MaxSpeed": "Maximum speed when flying",
    "AIRuntimeParametersSmartObjectActivityConfig:MaxDetectionRadiusSqr": "Maximum square radius from AI to detect a SmartObject",
    "FortPlayerPawnStats:MaxStamina": "Maximum stamina for the player",
    "StorageVaultBuildingData:ItemCapacityPerLevel": "Maximum stash size per Storage Vault level",
    "UserOptionDefinitionTeamIndexMetaData:MaxTeamIndex": "Maximum team index value for this option, or INDEX_NONE to use the default.",
    "ActiveTieredCollectionLayout:MaxTierUnlocked": "Maximum tier unlocked based on all players' progress",
    "FortRangedWeaponStats:AIFireDurationMax": "Maximum time AIs fire while using this weapon.",
    "FortRangedWeaponStats:AIDelayBeforeFiringMax": "Maximum time AIs wait before using this weapon.",
    "FortGameMode:NoScoreKickTime": "Maximum time allowed to earn no score before getting kicked. Ignored if set to <= 0",
    "FortAthenaMutator_Skyfire:MaxTimeBeforeLootRoomTeleport": "Maximum time before loot room teleport that players can acquire by collecting loot orbs. If an orb is collected that would put the player/squad over this time, the time will be capped.",
    "FortRangedWeaponStats:AIMaxSpreadDuration": "Maximum time since an AI's target was acquired to create additional weapon spread.",
    "FortQueryGenerator_PerceivedActors_Settings:MaxTimeSincePerceived": "Maximum time since the most recent perception event to still consider the actor to be 'perceived.'  After this time has expired with no perception, the actor is no longer considered 'perceived'.",
    "FortPlayerPawnStats:MaxJumpTime": "Maximum time the player is allowed to hold the jump button",
    "CreativeRoyalePlayspaceComponent_LoadingScreen:FailsafeTimeoutLength": "Maximum time to extend the loading screen before disabling.",
    "FortAthenaLivingWorldEvent:InstantDeathMaxRespawnTime": "Maximum time to wait before re-spawning after an Instant Death. Defined per SafeZonePhase",
    "FortAthenaLivingWorldEvent:MaxRespawnTime": "Maximum time to wait before re-spawning. Defined per SafeZonePhase",
    "FortAthenaLivingWorldEvent:ActivationMaxDelay": "Maximum time to wait before the activation of the event.",
    "FortAthenaLivingWorldEvent:DeactivationMaxDelay": "Maximum time to wait once an event is active to deactivate it. -1.f means no deactivation.",
    "FortAthenaLivingWorldCategory:EventInstanceMaxCount": "Maximum total number of Event Instance we can spawn in this category at the same time. Use -1 to deactivate this feature.",
    "FortAthenaLivingWorldCategory:MaxCount": "Maximum total number of actors we can spawn in this category at the same time.",
    "FortAthenaLivingWorldCategory:EventInstanceMaxSpawnedCount": "Maximum total number of event instance that can be spawned in this category. Use -1 to deactivate this feature.",
    "FortAthenaLivingWorldEvent:EventInstanceMaxSpawnedCount": "Maximum total number of spawn event instances of this Event. Use -1 to deactivate this feature. Defined per SafeZonePhase. Use -1 to deactivate this feature.",
    "FortAthenaLivingWorldEvent:MaxSpawnedCount": "Maximum total number of spawned actor of this Event. Defined per SafeZonePhase. Use -1 to deactivate this feature.",
    "FortAthenaLivingWorldCategory:MaxSpawnedCount": "Maximum total number of spawned actors in this category. Use -1 to deactivate this feature.",
    "FortPlayerPawnAthena:LandFXRotateYawMaxDegrees": "Maximum value of rotation's Yaw addition for spawning land FX, addition is randomized from [-x, x] degrees",
    "SourceDriver:RemappedMax": "Maximum value to apply to the destination (remapped from the input range)\nIf this is rotation, the unit is radian",
    "FortFeedbackEventData:MaxWitnessDistance": "Maximum witness distance to ensure that witnesses are not halfway across the world",
    "MinimapZoomBounds:MaxZoom": "Maximum zoom level",
    "FortPickupsParent:BackgroundParticleSystem": "May be the same as the BackgroundParticleSystemComponent from below.",
    "FortUIProxyActor:ItemDef": "May be used to support damage source interface",
    "FortPlayerController:bLoadingScreenDropped": "May never become true if load screens are disabled, only really useful for analytics",
    "FortItemPreviewOffPawnActor:GliderSpawnComponent": "Maybe this can be genericized?",
    "FortVehicleAimingWeaponComp:bUseClientMuzzleLocationAuthority": "Meaning, the muzzle location is animated, so the client is the authority on the position.\nWe don't animate on the server, so the client location will be set from the client to the server via rpc.",
    "EFortFrontendInventoryFilter": "Meaningful groupings of item types used as the top-level filter for the item management screen.\nIn practice this is used as a sort of ItemManagementScreen type and is not restricted to the frontend.",
    "MusicLength:Measure": "Measure",
    "EFortItemType.MedalsPunchCard": "Medal Punch Cards",
    "EFortAmmoType.Sniper": "Medium",
    "UnicornDriver:MediumReelMaxClipDuration": "Medium highlight reel",
    "UnicornDriver:MediumExtendedReelMaxClipDuration": "MediumExtended highlight reel",
    "EPerceptionSoundType.MeleeImpact": "MeleeImpact",
    "FortAthenaPartyRiftPortal:CachedPartyMemberPlayerStateList": "Member player states for this portal, not including the owner",
    "PlayspaceComponent_BuildingLocalization:BuildingActorLocalization": "Member variable for storing the BuildingActorLocalization data. Needed to include the loc data in the cook\nand loading it.",
    "FortAthenaMutator_PartyRiftEmotes:ActiveEmoteList": "Member variable used to store the a subset of GlobalEmotes for a given player in GetActivePartyRiftGlobalPlayerEmotes\n     so that they may be passed by reference to the given player's UFortControllerComponent_ExternalEmote when we try to\n     add emotes to the player.",
    "FortWindManager:bAllowWindImpulses": "Member variables",
    "VkEditDynamicUIDirector:MemorySamplingScene": "Memory Sampling",
    "EResourceSizeMemoryCategory": "Memory category flags for FResourceSizeEx's memory classification.\n\nThis enum allows to estimate an object resource's memory cost taking into account the desired categories.",
    "EFortBudgetCategory.Memory": "Memory cost",
    "FortControllerComponent_MemorySampler": "Memory sampler controller component.\n\nThis class uses the spatial sampler and the actor memory tracker to generate actor memory usage stats at different\nsampling locations. The sampling locations are uniformly distanced and their number depends on the spatial\ndistribution of the actors tracked.",
    "MemorySamplingLocationStats": "Memory sampling location stats.\n\nThis struct is filled by UFortControllerComponent_MemorySampler for each location sampled.",
    "ChoiceData:MenuIdentifier": "Menu identifier that will be passed to OnUiChoiceCompleted",
    "RepFortMeshAttachment": "Mesh Attachment Replication struct",
    "FortCurieActiveElectricityArc:Mesh": "Mesh component actively being used for the electricity arc",
    "FortFlag:FlagMeshComp": "Mesh component for the Flag",
    "BuildingWall:DoorBlueprintMeshComp": "Mesh component for the blueprint visualization of a door that is being constructed",
    "BuildingWall:DoubleDoorBlueprintMeshComp": "Mesh component for the blueprint visualization of a door that is being constructed",
    "BuildingWall:SlidingDoorBlueprintMeshComp": "Mesh component for the blueprint visualization of a door that is being constructed",
    "FortDecoPreview_GenericTrap:TrapRangeMeshComponent": "Mesh component for trap range preview",
    "FortDecoPreview_GenericBuildingSMActor:PrimaryMeshComponent": "Mesh component representing the primary mesh of a BuildingSMActor",
    "FortDecoPreview_StaticMesh:PrimaryMeshComponent": "Mesh component representing the primary mesh of a BuildingSMActor",
    "FortWeap_BuildingToolBase:PencilMeshComponent": "Mesh component to use for the pencil",
    "FortSkyTube:NonSkyTubeMeshComponents": "Mesh components that are not part of the skytube.",
    "FabricMeshInstanceReference:MeshReference": "Mesh reference use for these instances",
    "FortCreativeInteractVisualizationComponent:StaticMesh": "Mesh representation of the interact collision.",
    "FortTracerBase:MeshScaleMult": "Mesh scale multiplier - makes the tracers stretch further",
    "FortBulletPatternEntryData:SocketName": "Mesh socket to visually originate from.  Also used to offset this bullet's damage trace from the central fire line.",
    "PlaysetPreview:PlaysetMesh": "Mesh that will be applied to the spawned StaticMeshActor.",
    "BuildingSMActor:BlueprintMeshComp": "Mesh to show future blueprint",
    "AuxiliaryEditTileMeshData:TileMesh": "Mesh to use for a tile",
    "FabricMeshProviderMeshReference:Mesh": "Mesh used as reference",
    "TrapItemDefintionDesignerData:PickupStaticMesh": "Mesh used to pickup this trap",
    "BuildingTrapCeiling_Falling:VisibleMeshComponent": "Mesh visible after trap is placed by the player",
    "PapayaTimedEvents:MeshEventResponder": "MeshResponder for handling Papaya.TimedEvents MeshEvents",
    "FortCheckPointCosmeticActor:MidPointMeshes": "Meshes used for most checkpoints",
    "FortCheckPointCosmeticActor:EndPointMeshes": "Meshes used for the last checkpoint",
    "FortAthenaMutator_Ashton:GameMsg_HeroFollowMap": "Message displayed to tell hero players to follow their map (Hero-Only)",
    "FortAthenaMutator_Ashton:GameMsg_StonesCompleteHero": "Message displayed when Thanos completes the gauntlet and heroes can't respawn anymore (Hero)",
    "FortAthenaMutator_Ashton:GameMsg_StonesCompleteVillain": "Message displayed when Thanos completes the gauntlet and heroes can't respawn anymore (Villain)",
    "FortAthenaMutator_Ashton:GameMsg_EliminatedThanosHero": "Message displayed when Thanos has been eliminated (Hero)",
    "FortAthenaMutator_Ashton:GameMsg_EliminatedThanosVillain": "Message displayed when Thanos has been eliminated (Villain)",
    "FortAthenaMutator_Ashton:GameMsg_RespawnThanosHero": "Message displayed when Thanos is respawning (Hero)",
    "FortAthenaMutator_Ashton:GameMsg_RespawnThanosVillain": "Message displayed when Thanos is respawning (Villain)",
    "FortAthenaMutator_Ashton:GameMsg_StoneComingHero": "Message displayed when a stone, that isn't the first one, is arriving (Hero)",
    "FortAthenaMutator_Ashton:GameMsg_StoneComingVillain": "Message displayed when a stone, that isn't the first one, is arriving (Villain)",
    "FortAthenaMutator_Ashton:GameMsg_IntroHero": "Message displayed when explaining the goal of the game (Hero)",
    "FortAthenaMutator_Ashton:GameMsg_IntroVillain": "Message displayed when explaining the goal of the game (Villain)",
    "FortAthenaMutator_Ashton:GameMsg_RespawnHero": "Message displayed when explaining the respawn rules of the game (Hero)",
    "FortAthenaMutator_Ashton:GameMsg_RespawnVillain": "Message displayed when explaining the respawn rules of the game (Villain)",
    "FortAthenaMutator_Ashton:GameMsg_StoneCapturedHero": "Message displayed when the 2nd, 3rd, and 4th stones are captured (Hero)",
    "FortAthenaMutator_Ashton:GameMsg_StoneCapturedVillain": "Message displayed when the 2nd, 3rd, and 4th stones are captured (Villain)",
    "FortAthenaMutator_Ashton:GameMsg_FirstStoneComingHero": "Message displayed when the first stone is arriving (Hero)",
    "FortAthenaMutator_Ashton:GameMsg_FirstStoneComingVillain": "Message displayed when the first stone is arriving (Villain)",
    "FortAthenaMutator_Ashton:GameMsg_FirstStoneCapturedHero": "Message displayed when the first stone is captured (Hero)",
    "FortAthenaMutator_Ashton:GameMsg_FirstStoneCapturedVillain": "Message displayed when the first stone is captured (Villain)",
    "FortAthenaMutator_Ashton:GameMsg_FinalStoneComingHero": "Message displayed when the last stone is arriving, and all other stones have already been captured (Hero)",
    "FortAthenaMutator_Ashton:GameMsg_FinalStoneComingVillain": "Message displayed when the last stone is arriving, and all other stones have already been captured (Villain)",
    "FortAthenaMutator_Ashton:GameMsg_OneStoneLeftHero": "Message displayed when there is only one stone left to be captured (Hero)",
    "FortAthenaMutator_Ashton:GameMsg_OneStoneLeftVillain": "Message displayed when there is only one stone left to be captured (Villain)",
    "FortAthenaMutator_Ashton:GameMsg_VillainArmyDepletedHero": "Message displayed when villains run out of respawns (Hero)",
    "FortAthenaMutator_Ashton:GameMsg_VillainArmyDepletedVillain": "Message displayed when villains run out of respawns (Villain)",
    "FortCreativeTeleporter:TeleportToWhenReceived": "Message receiver that causes the sender/instigator to be teleported to this teleporter",
    "FortLocalizableMessageComponent:MessageProperties": "Message set in LocalizeAndSetMessage and localized in OnRep_Message",
    "FortAthenaMutator_Cobalt:RoundGameMessageData": "Message that will fire at the start of each round for the player whenever they land in the POI.\nThe index indicates the round index\nThe FAthenaGameMessageData holds information regarding the message to be displayed.",
    "ConversationSettingDialogMarkerData": "Message to basically change the basic dialog marker for the conversation ui component.",
    "FortAthenaMutator_Wax:GameMsg_WaxLeaderChanged": "Message to send when some other player took the lead",
    "FortAthenaMutator_Wax:GameMsg_PlayerLostWaxLead": "Message to send when the player lost the lead",
    "FortAthenaMutator_Wax:GameMsg_PlayerTookWaxLead": "Message to send when the player took the lead",
    "ContextualMessageConfig:ContextualMessages": "Message variants which require Participant/Speaker to meet certain requirements, can be assigned here",
    "FortAthenaMutator_GG:IntroMessages": "Messages dispatched all together in the same frame (so might stomp)",
    "FortAthenaMutator_GamePhaseMessageData:Messages": "Messages to send",
    "FortAthenaMutator_Barrier:GameMsg_NoMoreRespawns_Enemy": "Messaging when the enemy team can no longer respawn",
    "FortAthenaMutator_Barrier:GameMsg_NoMoreRespawns_Friendly": "Messaging when your own team can no longer respawn",
    "CatalogMetaAssetInfo": "Meta asset that can get JSON from the server and convert to a UStruct for display",
    "ScriptedObjectMovement_StaticPathTravelerData:StepMetaData": "Meta data",
    "FortCalendarEventInventoryTransformData:Metadata": "Meta data for calendar event transform",
    "PlayerMetaInfo": "Meta information of a player state at a given time. Typically recorded only when something changes with the player state",
    "CosmeticMetaTagStack": "Meta tag stack (used to prepare the final cosmetic meta tags)\nUsed in LTMs which want to apply custom part overrides (Wick/Bounty)\n\nMetaTags are applied with the main cosmetic definition tags as a base.\nAny currently active MetaTags can either add additional tags or remove tags.\nAll active variants can remove/add tags (processed in a loop)",
    "CosmeticMetaTagContainer": "Meta tags around this cosmetic -- Traits/Style type things.",
    "VkLinkCodeInfo:Metadata": "Metadata",
    "VkModuleDoc:Meta": "Metadata",
    "VkModuleVersionDoc:Meta": "Metadata",
    "VkProjectDoc:Meta": "Metadata",
    "VkProjectSearchResult:Meta": "Metadata",
    "GameplayStatMetadataTableRow": "Metadata about an FGameplayStatTag. Primarily this determines how/if a stat is exported to the backend.",
    "WarEffortFundingMetadata": "Metadata blob that gets replicated thru the mesh network",
    "BakedMetadataCacheMember:MetadataKeyValuePairs": "Metadata key and value pair - value can be left blank",
    "CatalogItemSalePrice:SaleType": "Metadata on how to decorate this sale type",
    "FortCalendarEventInventoryTransformData:MetadataString": "Metadata string data for the event (\"<mapkey>=<mapvalue>\")",
    "EFortReplicatedStat.BuildingsBuilt_Metal": "Metal buildings built",
    "EFabricMetaSoundPinDirection": "Metasounds uses EEdGraphPinDirection, but that's not a blueprint type, so we use a custom enum",
    "FortGameplayEffectDeliveryActor:AdditionalExplodeEffectContainers": "Method to add more effect container specs to process on explosion",
    "RankingType": "Method used to calculate standings for teams that are tied on the scoreboard",
    "ECollectionSelectionMethod": "Methods for selecting a collection/progression",
    "ESynchronizedTeleportHealthAndShieldResetType": "Methods of resetting health and/or shield for alive players on teleport",
    "SkyAtmosphereValues:MieAbsorptionScale": "Mie absorption coefficient scale.",
    "SkyAtmosphereValues:MieScatteringScale": "Mie scattering coefficient scale.",
    "FortEventLevelNavigationActor:bAutoClick": "Might need to make this a TMap<FGameplayTag, bool> for auto click",
    "EFortQuestSubtype.Milestone": "Milestone quest",
    "AutoAimWeaponBoneSegmentData:BoneCollisionCapsuleRadiusAproximation": "Mimics the capsule radius of the collision on the bone we are using as a target.\n     TODO remove this value and get the capsule radius on that pawn's bone.",
    "FortRangedWeaponStats:FortHomingTurnSpeedMin": "Min Turn speed used for fortnite homing",
    "BuildingFoundation:NavExclusionMinX": "Min X coord (in grid cells) of excluded area",
    "BuildingFoundation:NavExclusionMinY": "Min Y coord (in grid cells) of excluded area",
    "FortAthenaLivingWorldDensityCondition:MinDensity": "Min allowed density : will return false if the density in range is lower than that.",
    "FortVehicleFuelComponent:MinFuelAtSpawn": "Min amount of fuel at spawn time",
    "RockVehicleWheelAnimInfo:SpringTravelRange": "Min and max range that the spring can travel",
    "FortRangedWeaponStats:AthenaRecoilAngleMin": "Min angle range used for the random pitch/yaw recoil direction.\n      0 is straight up.  180 is straight down.\n      Negative is to the left.  Positive is to the right.",
    "FortPluginActorSpawner:MinSpawnChance": "Min chance to spawn the actor (0 - 1 values expected and < MaxSpawnChance)",
    "FortMovementComp_Character:FallingSlopeDamageScalarMinScalable": "Min damage scalar when falling on slopes. The final value is lerped from (ThisValue, 1) based on the angle of the slope we hit compared to perfectly horizontal (angle 0).",
    "RepGraphMutatorSpatializationZone:MinDistPct": "Min distance as percent of per-connection cull distance, to map to MinRepHz",
    "MontageBeatSyncComponent:MinPlayRateBeforeDouble": "Min factor to apply to play rate before *= 2. Must be >0 and <= (Max*2).",
    "FortCurieFXSettings:ElectricityArcWPONoiseRandMin": "Min for random arc world position offset noise",
    "FortCurieFXSettings:ElectricityArcRandScaleMin": "Min for random scale multiplier applied to arc mesh component world scale",
    "CrashpadStaticParams:MinNonPawnVelocity": "Min launch velocity magnitude for non-pawns",
    "MotorcycleWheel:WheelieMinSpringLength": "Min length of spring when performing wheelie/stoppie",
    "VehicleDigestedTurnInPlace:MinMovingSpeed": "Min moving speed",
    "VehicleTurnInPlace:MinMovingSpeed": "Min moving speed",
    "LiquidRibbonManager:MinPointSize": "Min point size (min size of the ribbon FX at a point)",
    "FortSplineGroundPath:MinDistanceForAddingRawPoint": "Min radius Pathway Points should be from space along the spline from each other.  This is to prevent us from adding to paths when points come in too close together.",
    "FortRangedWeaponStats:AthenaRecoilMagnitudeMin": "Min range used for random pitch/yaw recoil magnitude.",
    "FortRangedWeaponStats:AthenaRecoilRollMagnitudeMin": "Min range used for random roll kick magnitude.\n      Negative is to the left.  Positive is to the right.",
    "PickedTurnTransitionData:MinRotationScaleToMatchDesired": "Min rotation scale to match desired rotation",
    "TurnTransitionData:MinRotationScaleToMatchDesired": "Min rotation scale to match desired rotation",
    "DigestedWeaponAccuracy:MinRotationInterpSpeed": "Min rotation speed to control bot rotation (degrees/sec)",
    "WeaponAccuracy:MinRotationInterpSpeed": "Min rotation speed to control bot rotation (degrees/sec). Interpolation is deactivated if speed <= 0.0f",
    "FortScoutDroneAnalyticsComponent:MinSessionLength": "Min session length in seconds to take it into account as \"meaningful\". Shorter sessions will not be sent. A value of 0.f will send all sessions.",
    "FabricSignificanceBasedUpdateBucketRuntime:ActualMinSignificance": "Min significance value for bucket",
    "BuildingGameplayActorPetrol:SplatterMinDecalWidth": "Min size this splatter will reach after first created.  Calculated once at start up.",
    "TrackingOffsetModifierInfo:MinSkill": "Min skill level for this bracket",
    "SlipperySlopeParams:SlopeLaunchMinRequiredAngleChange": "Min slope change away from current slope required to launch off a bump in to the air. Values < 0 would disable this.",
    "FortAthenaVehicle:VehicleMinHorSpeedToDamage": "Min speed (km/h) before a collision damages the vehicle",
    "WaterControlParams:MinSprintJumpSpeed": "Min speed required (relative to water) to maintain sprint while jumping, otherwise will stop sprint (and change anims).",
    "SlipperySlopeParams:SlopeLaunchMinRequiredSpeed": "Min speed required to launch off a bump in to the air. A value <= 0 disables the ability to launch.",
    "FortSkyTube:TangentialMinSpeed": "Min speed target along tube spline. Not used if <= 0.",
    "BuildingGameplayActorSpawnDetails:MinTimeToStartSpawnningBGAs": "Min time after the start of a phase before we start spawning any BGAs (index into this table row is the phase #)",
    "BagelScoreMultiplierSpawnData:MinSpawnTime": "Min time before this spawns",
    "MashScoreMultiplierSpawnData:MinSpawnTime": "Min time before this spawns",
    "FortAthenaMutator_SpawningPolicyBase:MinRespawnTime": "Min time before we respawn an item to maintain the \"NumItemsToSpawn\" count of items if \"bShouldMaintainItemCount\" is true",
    "BuildingGameplayActorSpawnDetails:MinTimeBetweenBGASpawns": "Min time between each BGA spawn before we spawn the next one (index into this table row is the phase #)",
    "MilkshakeControllerComponent:MinTimeBetweenBuildingDamageFX": "Min time between spawning building damage FX",
    "DigestedSightReactionSpecialization:SightMinAdditionTime": "Min time to add to sight reaction time based on distance",
    "SightReactionSpecialization:SightMinAdditionTime": "Min time to add to sight reaction time based on distance",
    "FortDelayRTMMData:MinRTTMDelay": "Min time to delay the RTTM",
    "FortAthenaAIBotController:SpectateOnDeathMinTime": "Min time to spectate when dead",
    "BuildingGameplayActorSpawnDetails:MinTimeToRepeatSpawningBGAs": "Min time to wait before repeating the spawning of bgas with in the same phase (index into this table row is the phase #)",
    "MilkshakeControllerComponent:CameraShakeRotOscillationPitchFrequencyMin": "Min value for the Camera Shake's Rot Oscillation Pitch Frequency",
    "MilkshakeControllerComponent:CameraShakeRotOscillationRollFrequencyMin": "Min value for the Camera Shake's Rot Oscillation Pitch Frequency",
    "EDynamicUIZOrder.CustomMax": "Min value of the custom z order",
    "WaterControlParams:WaterVelocityMinMultiplier": "Min velocity multiplier applied when depth equals min swimming depth (where they transition from wading to swimming). Interps between this and 1.0 at WaterVelocityDepthForMax.",
    "CrashpadStaticParams:MinPhysicsObjectStartVelZ": "Min vert start velocity for physics objects",
    "CrashpadStaticParams:MinLaunch": "Min vertical launch velocity",
    "CrashpadStaticParams:MinLaunchCrashpadPlus": "Min vertical launch velocity when using Crashpad+",
    "VehicleAppendToPath:MinTimeSinceLastAppend": "Min wait time to append the next path point",
    "VehicleDigestedAppendToPath:MinTimeSinceLastAppend": "Min wait time to append the next path point",
    "FortCurieFXSettings:ElectricityArcWPONoiseScaleRand": "Min/max for intensity/strength scaling of distortion in arcs (higher values mean stronger displacement)",
    "FortCurieFXSettings:ElectricityArcWPONoiseWorldTileScaleRand": "Min/max for tiling scale of WPO noise of spline arc (lower values mean more noise detail)",
    "FortCurieFXSettings:ElectricityArcTilingDivisorRand": "Min/max to use for arc tiling divisor",
    "TrapItemDefintionDesignerData:MiniMapViewableDistance": "Mini map view distance",
    "FortMiniMapComponent_TagsAndDistance": "MiniMap Component whose visibility is dependent on distance to the player and in possession of validity tags",
    "FortMiniMapComponent_Discoverable": "MiniMap Component whose visibility is tracked for each individual player.\n    This way different players will see the icon as discovered, not discovered, or not even visible.",
    "FortMinigameVolumeComponent": "Minigame Volume Component\n   Manages minigame functionality for the attached volume component",
    "GameplayEventCachedBinding": "Minimal binding reference to a given object and property.\n@note This is akin to FGameplayEventSubscription, but can be used for both FGameplayEventFunction and FGameplayEventDescriptor.",
    "GameplayEventCachedPropertyBindings": "Minimal binding references for a series of properties (ie, the list of bindings for each property on an object).",
    "GameplayEventCachedBindings": "Minimal binding references from a given property (ie, the list of bindings a property has).",
    "CreativeDeviceCached": "Minimal data needed to cached for filling in subscription data",
    "DigestedEvasiveManeuverSkillSettings:DodgeDistanceMin": "Minimal distance to travel when dodging",
    "EvasiveManeuverSkillSettings:DodgeDistanceMin": "Minimal distance to travel when dodging",
    "GameplayEventCachedPropertyId": "Minimal reference to a given property via its name and GUID (when available).\n@note This is akin to FMemberReference, but contains far less data.",
    "DigestedEvasiveManeuverSkillSettings:CrouchTimeMin": "Minimal time to stay in crouch in evasive maneuver",
    "EvasiveManeuverSkillSettings:CrouchTimeMin": "Minimal time to stay in crouch in evasive maneuver",
    "FortPlayerPawn:MinimapIconColorEnemy": "Minimap icon color for this pawn when it is the local player's enemy",
    "FortPlayerPawn:MinimapIconColorTeammate": "Minimap icon color for this pawn when it is the local player's teammate",
    "FortPlayerPawn:MinimapIconColorSelf": "Minimap icon color for this pawn when locally controlled",
    "FortAthenaPatrolPath:WaterLevelIndexMin": "Minimum Flood water level index allowed for this path, Set at -1 to invalid.",
    "FortAthenaLivingWorldVolume:WaterLevelIndexMin": "Minimum Flood water level index allowed for this volume, set at -1 to ignore water level.",
    "DigestedVehicleDriving:MinimumForwardPIDValueForStopping": "Minimum Input for Stopping, limits the forward stick values we send to prevent oscillation when PID target changes too much",
    "MountedWeaponInfo:MinimumPitchAimingAngle": "Minimum Pitch aiming angle for the mounted weapon",
    "FortRechargingActionTimer:MinActivationCharge": "Minimum amount of accumulated charge necessary to activate",
    "FortRechargingActionTimerConfig:MinActivationCharge": "Minimum amount of accumulated charge necessary to activate",
    "FortSupplyDropGamePhaseData:SupplyDropSpawnMinWaitTime": "Minimum amount of time between each individual supply drop spawn to wait before spawning the next one",
    "FortRechargingActionTimer:ActiveCooldownTime": "Minimum amount of time since previous activation before\n              another activation is possible",
    "FortRechargingActionTimerConfig:ActiveCooldownTime": "Minimum amount of time since previous activation before\n              another activation is possible",
    "FortFeedbackEventData:MinReplayTimeForSpeaker": "Minimum amount of time to wait before this piece of feedback can be replayed by an individual speaker.",
    "FortFeedbackEventData:MinReplayTime": "Minimum amount of time to wait before this piece of feedback can be replayed by any speaker.",
    "BuildingSMActorClassData:RandomScaleRange": "Minimum and maximum scale for random scale on placement",
    "FortBaseWeaponStats:BaseLevel": "Minimum base level the weapon can exist at",
    "UserOptionDefinitionClassSlotMetaData:MinClassSlot": "Minimum class slot value for this option, or INDEX_NONE to use the default.",
    "FortPhysicsVehicleDamageOverrideConfigs:MinDamageOverride": "Minimum damage applied by this vehicle",
    "PerDifficultyMissionGenerationInfo:MinDifficulty": "Minimum difficulty for which this list of missions to generate is valid.  If left empty, no minimum difficulty is required, so it will apply to any difficulty.",
    "FortNonPrimaryMission:MinDifficulty": "Minimum difficulty for which this mission is valid.  If left empty, no minimum difficulty is required, so it will apply to any difficulty up to the specified maximum (inclusive).",
    "FortGlobalMission:MinDifficultyLevel": "Minimum difficulty level this mission may run in.",
    "MatchmakingParams:MissionDifficultyMin": "Minimum difficulty of the mission to match with.",
    "FortSurfaceTrackingComponent:MinimumCheckDistance": "Minimum distance actor must move before automatically updating surface type",
    "DigestedVehicleDriving:MinimumDistanceLeftForBoosting": "Minimum distance before stopping to allow boosting",
    "VehicleDriving:MinimumDistanceLeftForBoosting": "Minimum distance before stopping to allow boosting",
    "FortPartyRiftPortalManager:MinimumSpawnSeparation": "Minimum distance between portals",
    "FortAthenaLivingWorldEvent:MinDistanceToPlayer": "Minimum distance from a player this event must be to be able to spawn.",
    "FortRespawnLogicData:MinHeightFromGround": "Minimum distance from ground to respawn the players",
    "FortRespawnLogicData:MinHeightFromZero": "Minimum distance from zero to respawn the players",
    "FortAIDirector:MinAISpawnDistanceFromPlayers": "Minimum distance that we can spawn an ambient threat AI from a player.",
    "ButterCakeUnstuckComponent:DistanceMinToUnstuck": "Minimum distance that we need to do after collecting all location samples to be considered not stuck",
    "PlaysetSettings:GroundSnapTolerance": "Minimum distance the playset can be in the ground before snapping upwards",
    "DigestedWeaponAccuracy:MinimumDistanceForAiming": "Minimum distance to our target to try and target them",
    "FortSafeZoneDefinition:ForceDistanceMin": "Minimum distance to push out the zone's location relative to the previous zone.",
    "FortRespawnLogicData:MinDistFromCenterPercent": "Minimum distance to respawn the players as a percentage from the center of the SafeZone",
    "FortPieSliceSpawnData:MinSpawnDistanceFromCenter": "Minimum distance to spawn the craft as a percentage from the center of the SafeZone",
    "WeaponAccuracy:MinimumDistanceForAiming": "Minimum distance to try to aim with this weapon",
    "WeaponAccuracy:MinimumDistanceForPawnAiming": "Minimum distance to try to aim with this weapon",
    "FortAthenaStateTreeLookAroundTaskInstanceData:LookAtDurationMin": "Minimum duration between look at",
    "FortAICombatTokenConsumerComponent:TokenHoldMinDuration": "Minimum duration the consumer can hold a token",
    "FortAthenaMutator_Uranium:MinRespawnHeightAboveGround": "Minimum height a player can respawn above the ground. This is used when moving a respawn location above ground if it was originally in terrain.\nIf the value is <= 0, respawn heights will not be adjusted.",
    "HeroPerkDefaultRequirements:MinimumHeroLevel": "Minimum hero level required for the commander perk to be active by default.  (Can be overridden case-by-case in the HeroGameplayDefinition).",
    "FortHeroGameplayPiece:MinimumHeroLevel": "Minimum hero level required for this piece to be active.",
    "FortSpecializationSlot:MinimumHeroLevel": "Minimum hero level required for this specialization slot to be active",
    "FortTeamPerkLoadoutCondition:MaximumHeroLevel": "Minimum hero level required to satisfy this condition.  If unchecked (read-only), this value will be ignored.",
    "FortTeamPerkLoadoutCondition:MinimumHeroLevel": "Minimum hero level required to satisfy this condition.  If unchecked (read-only), this value will be ignored.",
    "HeroPerkDefaultRequirements:MinimumHeroRarity": "Minimum hero rarity required for the commander perk to be active by default.  (Can be overridden case-by-case in the HeroGameplayDefinition).",
    "FortHeroGameplayPiece:MinimumHeroRarity": "Minimum hero rarity required for this piece to be active.",
    "FortHeroTierAbilityKit:MinimumHeroRarity": "Minimum hero rarity required for this piece to be active.",
    "FortTeamPerkLoadoutCondition:MaximumHeroRarity": "Minimum hero rarity required to satisfy this condition.  If unchecked (read-only), this value will be ignored.",
    "FortTeamPerkLoadoutCondition:MinimumHeroRarity": "Minimum hero rarity required to satisfy this condition.  If unchecked (read-only), this value will be ignored.",
    "HeroPerkDefaultRequirements:MinimumHeroTier": "Minimum hero tier required for the commander perk to be active by default.  (Can be overridden case-by-case in the HeroGameplayDefinition).",
    "FortHeroGameplayPiece:MinimumHeroTier": "Minimum hero tier required for this piece to be active.",
    "FortTeamPerkLoadoutCondition:MinimumHeroTier": "Minimum hero tier required to satisfy this condition.  If unchecked (read-only), this value will be ignored.",
    "RidableControlParams:MinimumInputAnalogModifier": "Minimum input analog modifier to consider a backward motion",
    "TieredWaveSetCollectionData:MinLvl": "Minimum level required to use the wave set represented",
    "SourceDriver:RangeMin": "Minimum limit of the input value (mapped to RemappedMin, only used when limiting the source range).\nIf this is rotation, the unit is radian",
    "FortAnimNode_Flap:TargetClampMin": "Minimum limit of the target value (after mapped to RemappedMin if using UseRange in Source). In the case of rotation, use radian.",
    "FlightParams:ControlSpeedKmh": "Minimum linear speed that the control surfaces must be traveling\n              in order to provide their maximal torques.",
    "CrashpadStaticParams:MinPhysicsObjectMass": "Minimum mass for a physics object",
    "AircraftFlightConstructionInfo:CustomMinMidlineAngle": "Minimum midline angle used if bUseCustomPathSelection is true",
    "FortInteriorAudioComponent_Ambient:TotalBuildingCountRequiredForPartialExterior": "Minimum number of Solid, Line Traced, Distant Partial, and Ceiling Checks to be considered partially outdoors",
    "FortInteriorAudioComponent_BuildingGrid:TotalCeilingCountRequiredAlongHorizontalScan": "Minimum number of ceiling pieces required along a horizontal scan",
    "FortAthenaMapInfo:LlamaQuantityMin": "Minimum number of llamas to spawn on the map",
    "FortLootTierData:StreakBreakerPointsMin": "Minimum number of points added when this tier row is selected",
    "LootTierDataRow:StreakBreakerPointsMin": "Minimum number of points added when this tier row is selected",
    "LootPackageRow:MinCount": "Minimum number of stacks of this item/subpackage to drop.",
    "FortSupplyDropSubPhaseData:SupplyDropMinCount": "Minimum number of supply drops to spawn per time interval for this safezone",
    "MissionVehicleSpawnSet:MinSpawnCount": "Minimum number of vehicles to spawn",
    "FortAthenaMutator_SpecialEvent:MinimumScoreBumpForAutomadeGoal": "Minimum offset to apply while adjusting the score",
    "VehicleAppendToPath:MinimumPathLengthToEndOfPath": "Minimum path distance to end of path",
    "VehicleDigestedAppendToPath:MinimumPathLengthToEndOfPath": "Minimum path distance to end of path",
    "BuildingGameplayActorChaser:PatrolMoveSpeedMin": "Minimum patrol movement speed",
    "FortRechargingActionTimer:MinActiveDuration": "Minimum percent of charge spent once active",
    "FortRechargingActionTimerConfig:MinActiveDuration": "Minimum percent of charge spent once active",
    "TrapItemDefintionDesignerData:DisassembleDurabilityDegradeMinLootPercent": "Minimum percentage of cost that goes back to player on recycle",
    "FortExCaliberProjectile:MinPitchForRotationAdjustment": "Minimum pitch value at which the projectile will need rotation adjustments to not land completely straight forward (inclusive)",
    "FortPartyRiftPortalManager:LongRangeInteractionMinimumDistance": "Minimum range for long-range interaction",
    "FortPlayerPawnAthenaMovementNoiseOverride:MinNoiseGenerationRange": "Minimum range of the noise generated when the pawn is moving. It will be interpolated with MaxNoiseGenerationRange based on the speed of the Pawn.",
    "DigestedFiringPattern:MinRange": "Minimum range to use this pattern",
    "FiringPattern:MinRange": "Minimum range to use this pattern, 0 means not taken into account",
    "RepGraphMutatorSpatializationZone:FastPath_MinRepHz": "Minimum replication frequency for FastShared replication",
    "RepGraphMutatorSpatializationZone:MinRepHz": "Minimum replication frequency for Normal replication",
    "BuildingGameplayActorChaser:PatrolNewDirectionMin": "Minimum rotation on turn during patrol",
    "EFoundationOrdering.MSTOverlap": "Minimum spanning tree by distance between foundation centers",
    "EFoundationOrdering.Radial": "Minimum spanning tree where edge weight is the negation of the area of the overlap of foundation streaming areas",
    "FortTouchAimAssistSettings:ProjectileMinSpeedForAssist": "Minimum speed required for projectile weapons to have aim assist.",
    "BuildingTrapFloor_Turret:MinRotationSpeed": "Minimum speed the turret will rotate towards its target",
    "FortSupplyDropGamePhaseData:SupplyDropMinSpeed": "Minimum speed to spawn this supply drop at",
    "UserOptionDefinitionTeamIndexMetaData:MinTeamIndex": "Minimum team index value for this option, or INDEX_NONE to use the default.",
    "FortRangedWeaponStats:AIFireDurationMin": "Minimum time AIs fire while using this weapon.",
    "FortRangedWeaponStats:AIDelayBeforeFiringMin": "Minimum time AIs wait before using this weapon.",
    "FortDagwoodVehicle:MinimumTimeBetweenSelfDestructPromptChanges": "Minimum time between self-destruct UI prompt changes",
    "FabricInteractionTool:MinDragAndDropTriggerTime": "Minimum time in seconds for trigger down to be considered a drag-and-drop.",
    "FortRangedWeaponStats:AIMinSpreadDuration": "Minimum time since an AI's target was acquired to create additional weapon spread.",
    "FortAthenaLivingWorldEvent:InstantDeathMinRespawnTime": "Minimum time to wait before re-spawning after an Instant Death. Defined per SafeZonePhase",
    "FortAthenaLivingWorldEvent:MinRespawnTime": "Minimum time to wait before re-spawning. Defined per SafeZonePhase",
    "FortAthenaLivingWorldEvent:ActivationMinDelay": "Minimum time to wait before the activation of the event.",
    "FortAthenaLivingWorldEvent:DeactivationMinDelay": "Minimum time to wait once an event is active to deactivate it. -1.f means no deactivation.",
    "SourceDriver:RemappedMin": "Minimum value to apply to the destination (remapped from the input range)\nIf this is rotation, the unit is radian",
    "VkBuildVersion:Minor": "Minor Version",
    "FortPlayerScoreReport:ReplicatedStats_Campaign": "Mirror of the stats last received for this player",
    "FortPlayerScoreReport:ReplicatedStats_Zone": "Mirror of the stats last received for this player",
    "EFortBangType.PlayerBanners": "Misc",
    "EValkyrieValidationErrorCode.MissingRequiredFile": "Missing a required file",
    "EFortCraftFailCause.NotEnoughResources": "Missing one of the required resources",
    "FortZoneInstanceInfo:TheaterMissionAlertId": "Mission Alert ID within the selected theater; may be empty if the current zone does not contain a mission alert",
    "FortTheaterMapTile:MissionData": "Mission Data on this tile",
    "FortZoneInstanceInfo:TheaterMissionId": "Mission ID within the selected theater (technically this implies ZoneThemeClass, MissionGenerator, and ZoneDifficulty)",
    "FortRewardReport:MissionName": "Mission Name",
    "FortTheaterMapMissionAlertData:AvailabilityDataPerRegion": "Mission alert availability data, grouped by region.",
    "FortTheaterMapTile:MissionAlertData": "Mission alert data on this tile",
    "FortZoneInstanceDetails:MissionAlertRewards": "Mission alert rewards for the zone, as a result of a loot roll",
    "FortMissionCompletionNotification": "Mission completion notification",
    "FortMissionConfigDataParams": "Mission configuration data parameters",
    "FortMissionPopupWidgetData:Description": "Mission description override for the popup menu",
    "EFortEventNameType.Mission": "Mission events, valid on server",
    "AthenaDeveloperSettings:DefaultMissionGen": "Mission gen to use if playlist didn't supply one",
    "FortPIEMissionOverrideData:MissionGenerator": "Mission generator to use for PIE",
    "FortGameState:MissionManager": "Mission manager pointer",
    "MissionGenerationInfo:MissionTagRequirements": "Mission must match these tag requirements (and otherwise be viable) to be able to be used by this mission generation.  This tag query only checks tags on the mission info itself.",
    "FortMissionPopupWidgetData:DisplayName": "Mission name override for the popup menu",
    "FortZoneInstanceDetails:DifficultyIncreaseMissionRewards": "Mission rewards for increasing the difficulty",
    "FortZoneInstanceDetails:MissionRewards": "Mission rewards for the zone, as a result of a loot roll",
    "EFortPickupSourceTypeFlag.Player": "Mission rewards, scripted gifting, crafting, Llamas (in StW, not sure about BR), Loot Drops (StW gadget, not sure about BR), etc.",
    "FortMission_ActiveThreat": "Mission to spawn AI to actively threaten players",
    "FortMission_CreativeRiftSpawners": "Mission to spawn AI to actively threaten players",
    "FortMission_RiftSpawners": "Mission to spawn AI to actively threaten players",
    "TieredWaveSetData:WaveMissions": "Missions to spawn when the wave starts.\nalso if WaveRules == EWaveRules::Mission then completing these missions will end the wave",
    "FortMission:UIIndex": "Missions vertical order in the UI",
    "ESeatSelectionRule.TwoClosestThenClosestToPlayer": "Mixed of Default and then ClosestToPlayer if Default fails.",
    "SlopeModData": "Mod data for slope",
    "FortAthenaLivingWorldVehiclePointProvider:ForceMods": "Mod tag to be added to the spawned vehicle.",
    "EDanceBeatSyncMode": "Mode that the DanceSynchronizer will use to sync an emote's play rate",
    "FortAthenaAIBotController:ReachLocationValidationMode": "Mode used by the bot to know if it can/should reach a location (storm = uses storm to know if it's safe, leash = takes leash radius to know if it's in range)",
    "FortGameplayEffectContext:ModifiedDamage": "Modified Damage for downstream processing",
    "MeshCosmeticsTempMannequin": "Modified version of FortPlayerMannequin that adds hard-coded support for some mesh cosmetics features. Intended to\nbe used for things like cinematics, only until we have full support for mesh cosmetics on mannequins!\n\nCurrently only supports the features required for Jumpsuit\n\nNot for in-game use!",
    "DynamicXpCalibrationResult:XpVarianceMult": "Modifier calibration system can put on XP being awarded.",
    "FortAIEncounterPawnDifficultyLevelModifier": "Modifier for difficulty level for the pawns an encounter spawns. Does not effect the encounter itself",
    "TrackingOffsetModifierInfo:Modifiers": "Modifier info for this bracket",
    "ActiveGameplayModifier:ModifierDef": "Modifier item definition",
    "PendingSpawnInfo:ModifiersToApplyOnSpawn": "Modifier item definitions to apply to the pawn upon its spawning",
    "TieredModifierSetData:ModifierLootTierGroup": "Modifier loot tier group to apply",
    "FortTierCollectionLayoutOutput:ModifierProgressionName": "Modifier progression collection name to use",
    "HomebaseNodeGameplayEffectDataTableRow:RequiredSourceTagsContainer": "Modifier-level tags which are required for the synthesized modifier to be applied during a calculation",
    "HomebaseNodeGameplayEffectDataTableRow:RequiredTargetTagsContainer": "Modifier-level tags which are required for the synthesized modifier to be applied during a calculation",
    "HomebaseNodeGameplayEffectDataTableRow:IgnoreSourceTagsContainer": "Modifier-level tags which prevent the synthesized modifier from being applied during a calculation",
    "TieredModifierSet:ModifierData": "Modifiers",
    "FortAvailableMissionAlertData:MissionAlertModifiers": "Modifiers applied to the zone/mission from the backend",
    "FortClientAnnouncementData_ZoneModifiers:Modifiers": "Modifiers data",
    "FortZoneInstanceDetails:ZoneModifiers": "Modifiers on the zone, as a result of a loot roll",
    "SpawnGroupInstanceInfo:ModifiersForAllPawns": "Modifiers that are applied to all pawns",
    "TornadoObjectForceModifiers": "Modifiers when calculating/applying forces to an object of a given size",
    "EFortAlteration.ColorSlot": "Modifies color of the weapon",
    "EFortAlteration.GameplaySlot": "Modifies gameplay of the weapon, such as elemental effects",
    "FortProjectileMoveComp_Slider:SuspensionTensionBuildUpExponent": "Modifies how much additional tension is added based on the current amount of tension.\n     Set to < 1.0 to make tension build up slower the more tension already exists.\n     Set to > 1.0 to make tension build up more quickly the more tension already exists.\n     Set to == 1.0 for constant tension build up regardless of already existing tension.",
    "EFortAlteration.ComplexCosmeticSlot": "Modifies material or VFX of the weapon",
    "EFortAlteration.UserPickedCosmeticSlot": "Modifies material or VFX of the weapon (budgeted, OK to not load if we run out of the budget)",
    "EFortAlteration.AttributeSlot": "Modifies stats of the weapon",
    "EMaterialStyleParameterType.Scalar": "Modify a scalar parameter of a dynamic material instance",
    "EMaterialStyleParameterType.Texture": "Modify a texture parameter of a dynamic material instance",
    "EMaterialStyleParameterType.Vector": "Modify a vector parameter of a dynamic material instance",
    "FortMovementComp_Character:SkyTubeDownwardAccelerationScalar": "Modify downward acceleration by this multiplier.",
    "EFortMaterialProgressBarSectionOverflowBehavior.ReverseCollapse": "Modify the section percentages in reverse so that the only sections visible are those that would be in the last \"whole\" bar;\nExample:\nPrimary Pct: 0.9\nSecondary Pct: 0.5\nresults in\nNew Primary Pct: 0\nSecondary Pct: 0.4\n\nUseful for previewing level growth/roll-over, such as with previewing XP gain rolling to a new level",
    "DynamicUIAllowed:SizeModifier": "Modify the size of this widget when putting it on screen.",
    "DynamicUIAdjust:SizeModifier": "Modify the size of this widget when putting it on screen.  Takes precedence over layout size modifiers in a DynamicUIScene's Allowed array.",
    "FortMovementComp_Character:SkyTubeUpwardAccelerationScalar": "Modify upward acceleration by this multiplier.",
    "ESequencerType.MultiTrack": "ModularSequencer",
    "FMInWorldKnobOptionsComponent:ReplicatedModulatorPorts": "Modulator port components dynamically added\nWhen a port replicates, the in world knob it's associated with should be notified",
    "FabricChildActorComponent:InWorldKnobModulatorPort": "Modulator port. Null if the child actor is not a InWorldKnobActorBase.\nThis reference to the port only exists on the server for serialization.",
    "VkModuleVersion": "Module+Version tuple",
    "VkModuleVersionRef": "Module+Version tuple\n@fixme FVkModuleVersionRef should be deprecated as it's exactly the same as FVkModuleVersion",
    "VkModuleVersionDoc:Dependencies": "Modules on which this module version is dependent",
    "EFortReplicatedStat.MonsterKills": "Monster kills",
    "BuildingGameplayActorConsumable:OnConsumeMontage": "Montage for prototyping; Likely needs to be fleshed out into more robust support and integrated into something like the emote system, but currently no good way to do dynamic action tag injection",
    "FortAIPawn:RepAnimMontageInfo": "Montage info replicated on the AI Pawn when bUseFastAbilityReplication is true and FastReplicationSettings::SkipAllSubobjects == 1",
    "PickedTurnTransitionData:PlayRate": "Montage play rate",
    "SlopeModData:MontageSectionName": "Montage section Name to replace if valid",
    "PickedTurnTransitionData:StartSection": "Montage start section",
    "PickedTurnTransitionData:MontageToPlay": "Montage to play",
    "FortMantisTechniqueData:Montage": "Montage to play for this technique if the AnimationType is SingleMontage.",
    "FortCharacterPartMontageInfo:AnimMontage": "Montage to play on the specified character part",
    "RidingPettingData:RidablePettingMontageInfo": "Montage used on Creature during the Petting",
    "RidingPettingData:RiderFemalePettingMontageInfo": "Montage used on Player during the Petting (Female)",
    "RidingPettingData:RiderMalePettingMontageInfo": "Montage used on Player during the Petting (Male)",
    "PickedTurnTransitionData:RotateCurve": "Montage's rotation curve name",
    "TurnTransitionData:CurveNameForRotation": "Montage's rotation curve name",
    "FortCharacterPartsRepMontageInfo:CharPartMontages": "Montages associated with animating character parts",
    "FabricStepPagePacked": "More compact representation of a page",
    "FabricStepTablePacked": "More compact representation of a step sequencer state",
    "FabricStepTrackPacked": "More compact representation of a track",
    "FortAICloudVortex:NumberOfSplinePoints": "More points, more twists and turns in the tornado, less points (much) better performance",
    "FortAthenaAIObjectTrackerQuery:StartLocation": "Most likely set to where the Querier is currently located.",
    "EFortActorTemplateCostUpdateMethod.Smallest": "Most recent cost value.",
    "CraftingObjectComponent:LastResultsStringForAnalytics": "Most recent crafting result - saved for analytics",
    "EmporiumSettings:MostRecentDownloadDirectory": "Most recent save directory for direct-download assets\nThis can change from download to download",
    "PapayaServerMigrationComponent:LastRequestedTimeForMigrationTimerPushback": "Most recent time on the server (in seconds) that the migration times were told to push out",
    "FortPlayerPawn:SprintCancelTime": "Most recent time that a sprint was cancelled by another action",
    "SphericalDriveParams:LowSpeedAccelerationForce": "Most torque that can be applied to accelerate towards target heading,\n              when the sphere is not spinning around the target axis.",
    "SphericalDriveParams:HighSpeedAccelerationForce": "Most torque that can be applied to accelerate towards target heading,\n              when the sphere is spinning at the max speed around the target axis.",
    "EFortRpcCategory.GameplayActions": "Mostly input mapping stuff etc, shooting, building, moving",
    "MountedWeaponInfo": "Mounted weapon data.",
    "EFortAthenaTutorialSubstep.ScreenUseLeftStick": "Move",
    "FortCreativeSplineControlPoint:CopiedFrom": "Move Tool Functionality",
    "FortAIPawn:MoveSoundStimulusMaxRange": "Move sound max radius based on AI speed",
    "PlayspaceComponent_CreativeToolsPermission:MoveToolInteractionCollection": "Move tool interaction is restricted to actors in this collection when bShouldRestrictMoveToolToInteractionCollection is true.",
    "FortPhysicsObjectComponent:MovementStateData": "Movement State Data",
    "EFortMovementStyle": "Movement Style for characters",
    "PickedTurnTransitionData:RequiredMovementUrgency": "Movement Urgency filter (Disabled if None)",
    "TurnTransitionData:RequiredMovementUrgency": "Movement Urgency filter (Disabled if None)",
    "ETempestMovementMode.EnvQuery": "Movement along points generated by a specified environment query",
    "ETempestMovementMode.Path": "Movement along points provided by a specified movement path",
    "ESkyTubeMovementDirection.BothWays": "Movement backward or forward through the tube",
    "FortProjectileMoveComp_Slider": "Movement component for projectiles whose primary movement is sliding along the ground.\n    This movement component is less likely to get stuck in place because it attempts to resolve stuck movement more times before allowing gravity to be re-added.\n    Additional features:\n    - The ability to favor Z velocity when limiting speed (this makes gravity act more consistently for the projectile.)\n    - A simple suspension system to reduce bounces and counteracts small curbs acting like ramps.",
    "MovementComp_Tracer": "Movement component updates position of associated PrimitiveComponent during its tick",
    "ESkyTubeMovementDirection.Forward": "Movement in the direction of the spline tangent",
    "ESkyTubeMovementDirection.Reverse": "Movement in the opposite direction of the spline tangent.",
    "FortCreativeLinearMoverComponent:MovementMode": "Movement mode of the linear mover",
    "FortAIPawn:MovementStyles": "Movement style per urgency level",
    "FortCharacterMovementMutator:MovementMutatorComponentClass": "MovementMutatorComponent class to give to a character that requests an EMutatorMovementMode",
    "EMutatorMovementMode.Rewind": "Moves backward through recorded movement history, without player input",
    "VehicleDigestedTurnInPlace:MovingAngleBegin": "Moving angle begin",
    "VehicleTurnInPlace:MovingAngleBegin": "Moving angle begin",
    "VehicleDigestedTurnInPlace:MovingAngleEnd": "Moving angle end",
    "EFortMinigameState.Transitioning": "Moving players to starting positions, waiting for important actors to replicate, and potentially waiting on nav mesh to generate",
    "FlyingRidableControlParams:MovingTurnRate": "Moving turn rate",
    "CursorSettings:lookAheadMs": "Ms in the future (negative for the past)",
    "EFortMtxPlatform.Shared": "Mtx that was not purchased",
    "EFortMtxPlatform.EpicAndroid": "Mtx that was purchased on Android through the Epic storefront",
    "EFortMtxPlatform.GooglePlay": "Mtx that was purchased on Android through the Google Play App Store",
    "EFortMtxPlatform.IOSAppStore": "Mtx that was purchased on IOS",
    "EFortMtxPlatform.Nintendo": "Mtx that was purchased on Nintendo platforms",
    "EFortMtxPlatform.EpicPC": "Mtx that was purchased on PC (Worldwide)",
    "EFortMtxPlatform.EpicPCKorea": "Mtx that was purchased on PC in Korea",
    "EFortMtxPlatform.PSN": "Mtx that was purchased on PlayStation4 or PlayStation5",
    "EFortMtxPlatform.Samsung": "Mtx that was purchased on Samsung devices",
    "EFortMtxPlatform.WeGame": "Mtx that was purchased on WeGame",
    "EFortMtxPlatform.Live": "Mtx that was purchased on XboxOne or Xbox Series",
    "EFortMtxPlatform.Epic": "Mtx that was purchased on an Epic platform",
    "CardPackOffer:MtxPrice": "MtxPrice is populated ONLY if the offer is actually priced in MTX currency. (default -1)",
    "FortCosmeticLockerSlotInformation:bMustBeUniqueInArray": "Much each selected item in the slot array be unique?",
    "FortAthenaMutator_ButterflyEvent:OnPawnBroadcast": "Multicast delegate fired when this mutator is broadcasting pawns",
    "FNE_VolumeComponent:OnPlayerStateBeginOverlap": "Multicast delegate that broadcasts when a PlayerState begins overlap",
    "FNE_VolumeComponent:OnPlayerStateEndOverlap": "Multicast delegate that broadcasts when a PlayerState ends overlap",
    "FNE_VolumeComponent:OnOtherActorBeginOverlap": "Multicast delegate that broadcasts when an Actor begins overlap",
    "FNE_VolumeComponent:OnOtherActorEndOverlap": "Multicast delegate that broadcasts when an Actor ends overlap",
    "FortVehicleSeatWeaponComponent:OnSeatedPlayerTargetingChanged": "Multicast delegate to let client BPs know when the player in this seat enters or exits targeting/aim down sights *",
    "Playspace:NotifyPlayspaceUserAdded": "Multicast delegate triggered when a new user is added to this Playspace",
    "Playspace:NotifyPlayspaceUserRemoved": "Multicast delegate triggered when a user is removed from this Playspace",
    "Playspace:NotifyEndMatch": "Multicast delegate triggered when the Playspace has ended the match",
    "Playspace:NotifyStartMatch": "Multicast delegate triggered when the Playspace has started the match",
    "Playspace:NotifyPlayspaceCreatedAndReady": "Multicast delegate triggered when this Playspace has been Created and ready.\nThis is the earliest code can assume that the Playspace is created and can be used for logic requiring it to be in its proper place in the manager.",
    "Playspace:NotifyPlayspaceInitialized": "Multicast delegate triggered when this Playspace has been initialized",
    "FortFeedbackEventData:MultiplayerBroadcastFilter": "Multiplayer broadcast filter for for this event",
    "EFortRichColorConflictResolutionRules.BlackOrWhiteCannotConflict": "Multiple colors cannot be black or white",
    "BagelDifficultySettings:AIEffectPlayerCountMultiplier": "Multiplier applied on chance of applying a gameplay effect to an AI based on number of players",
    "MashDifficultySettings:AIEffectPlayerCountMultiplier": "Multiplier applied on chance of applying a gameplay effect to an AI based on number of players",
    "BagelDifficultySettings:AIEffectDifficultyMultiplier": "Multiplier applied on chance of applying a gameplay effect to an AI based on selected difficulty",
    "MashDifficultySettings:AIEffectDifficultyMultiplier": "Multiplier applied on chance of applying a gameplay effect to an AI based on selected difficulty",
    "WaterControlParams:WaterForceSecondMultiplier": "Multiplier applied on the top of WaterForceMultiplier, to water force acceleration in direction of current. Used only for inherited objects.",
    "FortGameStateComponent_EventLevel:AnalogInputModifier": "Multiplier applied to analog stick input values.",
    "FortAILootDropModifierRow:ItemDropChanceMultiplier": "Multiplier applied to drop chance for items when an AI with matching tags is killed.",
    "FortGamepadBasicOptions:LookBuildModeMultiplier": "Multiplier applied to look sensitivity when in build mode.",
    "FortGamepadBasicOptions:LookEditModeMultiplier": "Multiplier applied to look sensitivity when in edit mode.",
    "FortPlayerAthenaGravityAttributeReplicationProxy:GravityZScale": "Multiplier applied to the pawn's gravity.",
    "FortPlayerAthenaGravityAttributeReplicationProxy:JumpHorizontalAcceleration": "Multiplier applied to the pawn's horizontal jump acceleration",
    "FortPlayerAthenaGravityAttributeReplicationProxy:JumpHorizontalVelocity": "Multiplier applied to the pawn's horizontal jump velocity",
    "FortPlayerAthenaGravityAttributeReplicationProxy:JumpZVelocity": "Multiplier applied to the pawn's jump Z velocity",
    "FortAnimInput_TurnCorrection:CurveMultiplier": "Multiplier applied to the value from the animation curve. Should normally be 1.",
    "FortMission:LeecherTimeScalingPenaltyMultipler": "Multiplier for match duration scaling. Lets us tune for having some penalty for late joiners. Range: 0+",
    "AccountIdAndMatchEndData:MissionLeechScaling": "Multiplier for scaling reward overrides for leeching players",
    "EndZoneScoreAndAwards:MissionLeechScaling": "Multiplier for scaling reward overrides for leeching players",
    "GameDifficultyInfo:ScoreBonus": "Multiplier for scored player actions.",
    "FortRangedWeaponStats:AIDurationSpreadMultiplier": "Multiplier of additional AI weapon spread based on the AI acquisition duration.",
    "FortGameModeAthena:ScoreMultiplier": "Multiplier on score",
    "FortAIPawn:LocomotionPlayRateScale": "Multiplier to adjust the Animation locomotion used movespeed by",
    "FortPawnStats:SpeedBackwardsMultiplier": "Multiplier to apply to pawn's desired speed if they are moving backwards",
    "FortPawnStats:AccelerationStrafeMultiplierSprint": "Multiplier to apply to strafe acceleration when pawn is sprinting.  Will be clamped [0,1]",
    "SourceDriver:Multiplier": "Multiplier to apply to the input value (Note: Ignored when a curve is used)",
    "BuildingFoundation:ProxyMeshMaxDrawDistanceMultiplier": "Multiplier to apply to the max draw distance of proxy meshes standing on this foundation",
    "FortServiceDiscountBenefitSettings:ServiceCostMultiplier": "Multiplier to be applied to cost",
    "FortCurieMaterialElementIntensityDecayMultiplier:DecayMultiplier": "Multiplier to the decay rate, 0 will disable decay",
    "PhysicsPawnObjectInitialParameters:PlayerForceMultiplier": "Multiplier to the force the player can apply to the ball by colliding or hitting it.",
    "PhysicsPawnObjectInitialParameters:PawnKnockbackMultiplier": "Multiplier to the impulse the ball will apply to the pawn when colliding. The Knockback Multiplier.",
    "WaterControlParams:WaterForceMultiplier": "Multiplier to water force acceleration in direction of current.",
    "LiquidRibbonManager:CalculateBaseCurlOffset_TowardRandomMult": "Multiplier used in CalculatBaseCurlOffset that determines how much to curl towards a random vector.\n(This random vector is determined at begin play and replicated for server-client sync)",
    "LiquidRibbonManager:CalculateBaseCurlOffset_TowardPerpendicularMult": "Multiplier used in CalculatBaseCurlOffset that determines how much to curl towards the cross product of the segment vector and the segment's projectile's stop normal.",
    "LiquidRibbonManager:CalculateBaseCurlOffset_TowardEndMult": "Multiplier used in CalculatBaseCurlOffset that determines how much to curl towards the end of the segment.\n(For the second half of a detachment, the \"end\" is the start of the segment)",
    "FortAthenaMutator_Bagel:StreakScoreMultiplierValue": "Multiplier value for streak multiplier (per streak level)",
    "FortAthenaMutator_Mash:StreakScoreMultiplierValue": "Multiplier value for streak multiplier (per streak level)",
    "SphericalDriveParams:TractionMultiplier": "Multiplier which affects traction on all contacts",
    "FortMission:LeecherCombatScoreMultiplier": "Multipliers for scaling down relative value between score and contribution.",
    "FortAthenaMutator_PlayerDamage:HeightRatioDamageMultiplier": "Multiplies against the incoming damage number if hit is in the desired height ratio of the character (< 0.0 = Instant death)",
    "FortAthenaMutator_PlayerDamage:DamageMultiplier": "Multiplies against the incoming damage number, should all other filter criteria be met (< 0.0 = Instant death)",
    "FortAthenaMutator_EnvironmentalDamage:DamageMultiplier": "Multiplies against the incoming damage number, should all other filter criteria be met (< 0.0 = Max Damage)",
    "ERollModifierOperation.Multiply": "Multiplies sum up to multiply against the final weight. These are more complex and generally should be avoided in favor of Add operations.",
    "FortBaseWeaponStats:AimAssistPullStrengthMultiplier": "Multiplies the applied aim assist pull strength by this value",
    "FortBaseWeaponStats:AimAssistSlowStrengthMultiplier": "Multiplies the applied aim assist slow strength by this value",
    "FortAthenaMutator_CreativeCombineMinigameStats:StatMultiplier": "Multiplies the changing stat value and re-transmits a new stat event based on the `StatEventFilter`",
    "FortAthenaMutator_RespawnWave:WaveTeamImbalanceTimeMultiplier": "Multiply a team's respawn time by this amount, based on the ratio of this team's player count to the fullest team's",
    "EAthenaMutatorEvaluators.Multiply": "Multiply the mutator value to the existing value",
    "HmxSettings:verbosePrint": "Music Generator Manager Configs",
    "FortMusicManager:MusicBank": "Music bank",
    "EMusicChannel": "Music channels",
    "FortMutatorGamePhaseMusicEvent:Event": "Music event to trigger.",
    "FortMutatorGamePhaseStepMusicEvent:Event": "Music event to trigger.",
    "SynchronizedTeleportPlayerComponent:TeleportScreenFadeoutTime": "Music fadeout time upon leaving the synchronized Teleport screen.",
    "FortAthenaLoadout:MusicPack": "Music pack (frontend music, etc...) (this can be nullptr)",
    "EFortItemType.AthenaMusicPack": "Music pack for the front end",
    "SynchronizedTeleportPlayerComponent:TeleportScreenMusicCue": "Music to play when we enter the Synchronized Teleport screen.",
    "OldMusicTempometerComponent:Music": "Music whose tempo to detect.",
    "SparksMusicPlayspace:MusicClock": "MusicClock for reading back the song position",
    "SBMusicalTargetsTimerComponent:MusicClock": "MusicClock we use to update our cues.",
    "FortAthenaMutator_Wax:GameEndMusicSound": "Musical sting that starts playing when the game nears its end",
    "AthenaMatchStats": "Must Match the Backend Version of this class. It is mirrored with the data storage in MCP file AthenaMatchStats.java and backwards compatability must be maintained *",
    "AthenaWeaponStats": "Must Match the Backend Version of this class. It is mirrored with the data storage in MCP file AthenaWeaponStats.java and backwards compatability must be maintained *",
    "AthenaXPStats": "Must Match the Backend Version of this class. It is mirrored with the data storage in MCP file AthenaXPStats.java and backwards compatability must be maintained *",
    "FortAthenaPickRandomMontageConfig:RandomWeight": "Must be >= 0. The weight this montage config will have, the higher the more likely to be picked.",
    "ElevationArrowData:bShowElevationArrow": "Must be enabled to allow elevation arrows to display.",
    "FortWorldConditionGameplayTagActor:ActorContextRef": "Must be set, will check the provided GameplayTags on this Actor. The Actor must also implement IGameplayTagAssetInterface AND have an AbilitySystemComponent.",
    "FortWorldConditionPlayerHasConvertedNPC:ActorRef": "Must be set. Will find a converter component on this actor and return if it has converted any NPC.",
    "MimicConverterAbilityData:RequiredConverterAbilityTags": "Must be set: used when the converter pawn runs an ability, to check if it matches over the ability's 'AbilityTags'.",
    "MimicConverterAbilityData:AbilitiesToApply": "Must be set: will find abilities matching this container and activate them when the matching ability is activated. Deactivate when the matching activity is deactivated.",
    "FortAIPawn:bCanUseWeapon": "Must be true if this AI want use weapons",
    "LockedQuestConfigData:bShowLockedQuestWidgets": "Must be true to allow locked quests to be generated from this source.",
    "RepGraphMutatorSpatializationZone:MinDotProduct": "Must have dot product >= to this to be in this zone",
    "FortAthenaMutator_Encounter": "Mutator Encounter\n\nA small Mutator to allow spawning a quick Encounter in the world using your own EQS for spawning Rifts and your actual Encounter (Deimos AI).",
    "FortAthenaMutator_MatchCondition": "Mutator base class for tracking a round/match condition",
    "FortAthenaMutator_MultiInteraction": "Mutator class created to modify MultiInteraction behavior in Creative",
    "FortAthenaMutator_Rounds": "Mutator class for rounds-based LTMs to control round logic",
    "FortAthenaMutator_BlockEmotes:bGlobalEmoteBlock": "Mutator default config, if true, all emotes will be blocked",
    "FortAthenaMutator_BlockEmotes:SpecificEmotesToBlock": "Mutator default config, list of emotes references to specifically block",
    "FortAthenaMutator_BlockEmotes:BlockEmotesWithTags": "Mutator default config, used to block all emotes with any of these tags, like category \"Toys\"...",
    "FortAthenaMutator_Skyfire": "Mutator for Skyfire which handles the experience that occurs when players are beamed up into the Mothership in s17.\n   Players collect time pickups that increase their time before they are teleported to a loot room. This allows them more time\n   to collect loot rarity pickups which increase the loot rarity of their loot room. Once their time is up, or they have achieved max loot\n   rarity, players are teleported to a loot room and have a set amount of time to gather loot before they are teleported out of the\n   mothership and back to the main map.",
    "FortAthenaMutator_GiveCosmeticsOnItemPickup": "Mutator for applying a skin on players when they pick up certain items",
    "FortAthenaMutator_CustomStormMovement": "Mutator for defining multiple SafeZone routes, selecting a random route, and initiating it",
    "FortAthenaMutator_AdHocSquads": "Mutator for game modes where players start as the sole member of their team/squad but can join together to form team/squads on the fly, and can also leave those teams.",
    "FortAthenaMutator_HideHUDElements": "Mutator for hiding HUD elements at the start of certain game phases",
    "FortAthenaMutator_EditModeHUDElements": "Mutator for hiding HUD elements during Edit Mode, both Creative and VKEdit",
    "FortAthenaMutator_MarkerUtilities": "Mutator for marking players\nProvides methods to easily mark players. Currently the GetIndicatedActorManagementComponent data is used for marking so all marked actors will receive an indicator.\nMap and compass markers are optional.",
    "FortAthenaMutator_CharacterCosmeticManager": "Mutator for modifying the behavior of UFortCharacterCosmeticManager",
    "FortAthenaMutator_HenchmanSpawner": "Mutator for the Henchman spawner device in Creative",
    "PartyRiftEmotesPlayerComponent:MutatorPartyRiftEmotes": "Mutator that adds/removes player party rift emotes",
    "FortAthenaMutator_OverrideSupplyDropRadius": "Mutator that allows design to override the radius around the safe zone center that supply drops will spawn.",
    "FortAthenaMutator_EQSActorSpawner": "Mutator that allows for 1 or more actors types to be spawned in the world based on the current state of the SafeZone.\n    To use add one or more entries to ActorSpawningDatas.",
    "FortAthenaMutator_ControlOnVictoryTimeDilation": "Mutator that allows for modifying the time dilation that happens at the end of a match or minigame",
    "FortCharacterMovementMutator": "Mutator that allows support for implementing new movement modes listed in EMutatorMovementMode, via UFortCharacterMovementMutatorComponent.\nThese modes are still activated by calling UCharacterMovementComponent::SetMovementMode(MOVE_Custom, uint8 CustomMovementMode),\nbut using a member of EMutatorMovementMode for CustomMovementMode, rather than EFortCustomMovement.",
    "FortAthenaMutator_SpecialEventTODM": "Mutator that allows us to modify the TimeOfDayManager (TODM) throughout a special event",
    "FortAthenaMutator_PlayerIndicators": "Mutator that allows us to override the logic for displaying player indicators",
    "FortAthenaMutator_GameplayEffect": "Mutator that applies a given gameplay effect.",
    "FortAthenaMutator_Knockback": "Mutator that causes weapons to do knockback to players instead of damage.\n\nTo make use of this system, add this mutator and the Mutator_Knockback_ReroutePlayerEvent BP to your playlist.\n(The reroute mutator handles combining damage that is applied in multiple events (eg shotgun shots) into one damage event for knockback use.)\nApply the following GAs to all players. You may want to create child GAs in order to set the scalable float values to table rows.\nGA_HandlePlayerKnocback, GA_KnockbackVehicles, GA_ReimburseHealthOnKnockback, GA_StructureDestruction)\nYou may also want to create/apply a GE that modifies weapon's damage (eg PhosphorusWipeout/Shockwave scaled shotgun damage by 1.25).",
    "FortAthenaMutator_TeamPawnColor": "Mutator that colorizes pawns based on which team they belong to.",
    "FortAthenaMutator_SynchronizedTeleport": "Mutator that coordinates teleports so that all players arrive at the same time.\nPlayers that load faster are placed in stasis until all players are ready or the failsafe timer is reached",
    "FortAthenaMutator_InteractionDistance": "Mutator that overrides the interaction component's interaction distance.",
    "FortAthenaMutator_LootChoice": "Mutator that overrides the loot tables of the playlist based on indexing a list of options",
    "FortAthenaMutator_CR_LootChoice": "Mutator that overrides the loot tables of the playlist based on indexing a list of options.\nNote: The current LootSelection is now held in Blueprint and based on the Blueprint Enum\nECustomLootSelectionCreativeRoyale. This will allow Design to make more changes quicker\nthat will be data only. Access to the Getter and Setter of the LootSelection is limited to\ncasting this parent class mutator to LootControllerDeviceMutator and using the GetLootSelection\nand SetLootSelection. These are not defined here due to using the Blueprint Enum.",
    "FortAthenaMutator_RespawnAndSpectateSelect": "Mutator that shows a UI menu where dead players can choose to spectate respawn targets and choose which respawn target to respawn near.\n\nThis mutator keeps a list of Respawn Targets which are actors where players can respawn at. Normally players can respawn on any enabled respawn target that their team has access to, and there is no limit to how many players can respawn at one respawn target.\nRespawn targets can be added/removed at anytime.\nRespawn targets must be added on the server, there are 2 ways to add them:\n 1) By turning on flags like bAllowRespawnOnLivingTeammates and bAllowRespawnOnLivingSquadmates which will automatically generate specific respawn targets,\n 2) By manually adding respawn locations using AddRespawnTargetData()\nOnce added respawn targets persist until the game is over or they are manually removed from the server by calling: RemoveRespawnTargetData()\n\nTo use this mutator you will need to add a widget derived from RespawnAndSpectateContainerWidget to the Playlist. This widget will act as the UI for this mutator.\n\nYou can implemenmt special respawning location/transform rules by making a class implement IRespawnAndSpectateSelectManager and then using SetManager() to set it to manage this class\n\nWhen implementing this class you will probably want to use AddRespawnTargetData() to add at least 1 default respawn target for each team at all times. This respawn target can be shared among all teams or it can be specific to 1 team.\nMultiple default respawn targets are possible, but not advised (there is no randomization so one would become the effective default while the other might never get used that way).\nThe default respawn target should be a replicated and always relevant actor that is at a location it is always viable for a player of the corresponding team to respawn at.\nThe default respawn target is set by using AddRespawnTargetData(InputData) where InputData.bShouldBeSelectedByDefault == true.\nThe default respawn target is used:\n    1) to set the player's spectate target if they do NOT have a spectate target or the player's spectate target has becomes invalid (this often happens with player disconnects/death).\n 2) when the player has waited on the respawn screen so long that they are forced to respawn, if they do NOT have a valid spectate target they will respawn at the default respawn target.\n\n   NOTE: The console command cheat \"RespawnScreenToggleMakeAllRespawnTargetsAvailableToAllPlayers\" is very useful for testing. It makes the screen function correctly with just 1 player where normally you would need multiple players on 1 squad or 1 team.",
    "FortAthenaMutator_TeamPerformanceMessage": "Mutator that tracks specified stats for teams. When a specified threshold is hit a message is then broadcasts to all client UI using AFortGameStateAthena::GameModeMessageRequest",
    "FortAthenaMutator_AllowPostGameTiePlacement": "Mutator to allow \"Tie\" scores to be shown on the Creative Post Game flows",
    "FortAthenaMutator_ReplicationGraph": "Mutator to allow overriding of UFortReplicationGraph.\nFor example, reducing the RepPeriods of the spatialization zones to improve server perf.",
    "FortAthenaMutator_WeaponTraceIgnoreActors": "Mutator to allow us to specify additional actors to ignore in weapons' traces.\nLooks for UFortWeaponTraceIgnoreActorsComponents on the weapon, its owning pawn, or this mutator,\nand calls its GetAdditionalIgnoreActors().",
    "FortAthenaMutator_Payback": "Mutator to award extra points for quickly killing the killer of a teammate",
    "FortAthenaMutator_TournamentStats": "Mutator to be applied to playlists where we want to track tournament stats.",
    "FortAthenaMutator_InfiltrationRoundPlacard": "Mutator to be used by a IInfiltrationRoundInfoMutatorInterface to show the Round Intro screen (ULTMPreRoundWidgetBase) when ShowScreen() is called",
    "FortAthenaMutator_FakeKillRelevancy": "Mutator to fake the killing of other players from the perspective of each client, using the SpecialRelevancy system",
    "FortAthenaMutator_StormSicknessControl": "Mutator to globally control the Storm Sickness and its options",
    "FortAthenaMutator_HUDElementVisibility": "Mutator to globally control which HUD elements to show or hide. Used by the Creative HUD Controller Device",
    "FortAthenaMutator_MatchConditionManager": "Mutator to handle central functionality for AFortAthenaMutator_MatchCondition objects,\nwhich can be used to trigger the end of a round or match.\nContains wrapper functions to manipulate MatchConditions, or to get data from MatchConditions.\nYou do NOT need to add it to your LTM GameplayModifier's Mutators list.\nIt is automatically spawned if the Mutators list has at least one AFortAthenaMutator_MatchCondition.",
    "FortAthenaMutator_PlayerMarker": "Mutator to place a marker on Player's with one life left",
    "FortAthenaMutator_CenterSafezonesOnPOIs": "Mutator to provide safezone centering based on tagged volumes or specific map coordinates.",
    "FortAthenaMutator_TournamentKillStats": "Mutator to record tournament kill stats, broken per weapon type",
    "FortAthenaMutator_DrawTaggedPlayerIndicators": "Mutator to used to draw icons at the locations of players who have specific gameplay tags.\n    Can support multiple gameplaytags drawing multiple icons.",
    "FortAthenaMutator_SpecialEvent": "Mutator used by special events to configure/alter the game for the needs of the event (such as manually setting a final destination for the storm circles)",
    "FortAthenaMutator_DestroyActorsAndComponents": "Mutator used for specifying actors and components to destroy, and when.\nThis can be useful for blocking functionality or improving performance, by removing\nactors/components that are not utilized or are deemed non-critical for an LTM or special event.\nActors are processed for destruction at these points in time:\n 1. [All preexisting actors] AFortAthenaMutator_DestroyActorsAndComponents::BeginPlay().\n 2. [Placed actors only] FWorldDelegates::LevelAddedToWorld, which we bind our OnLevelAddedToWorld() to.\n 3. [Spawned actors only] UWorld::OnActorSpawned, which we bind our OnActorSpawned() to.\n 4. [Server] Upon enabling/reenabling a corresponding ActorDefinition with SetActorDefinitionsEnabled().\n 5. [Client] OnRep_ActorDefinitions(), after enabling/reenabling an ActorDefinition on the server.\nComponents created dynamically after any of the above cases are not currently monitored for,\nas there is not an on-component-created delegate to bind to, and periodic checks could be costly.",
    "FortAthenaMutator_AI": "Mutator used to optimize AI processing in Athena.",
    "FortAthenaMutator_SafeZoneOrderOptimize": "Mutator whose goal is to reduce load times between SafeZone routes for round-based LTMs.\nProvided an unordered list of SafeZone routes, it asynchronously processes random potential\norderings, in search of smaller route orders (based on total distance covered).",
    "EFortItemType.GameplayModifier": "Mutator/modifier items",
    "FortMutatorListComponent:MutatorDefs": "Mutators to apply while active.",
    "FortCosmeticModification:MuzzleNiagaraSystem": "Muzzle particle system override for this alteration",
    "FortCosmeticModification:MuzzleParticleSystem": "Muzzle particle system override for this alteration",
    "AthenaRewardItemReference:AdditionalPreviewVariants": "NO LONGER USED FOR NEW BATTLE PASS. Additional preview variants used for paged track variants",
    "ReplayDataSinglePlayerMove": "NOT Serialized nor serializable, used only to create runtime single event per movement sample, from a FReplayDataPlayerMoves",
    "EColorPickerColorRepresentation.Max_NONE": "NOT Supported yet!",
    "FortAIDirector:MaxAliveCurve": "NOTE Should be using enocunter spawn points profiles now instead. The maximum spawn points for encounters when an encounter spawn points profile is not found. Looked up by Difficulty Level",
    "FortAIDirector:MinAliveCurve": "NOTE Should be using enocunter spawn points profiles now instead. The minimum spawn points for encounters when an encounter spawn points profile is not found. Looked up by Difficulty Level",
    "SkyfireBackpackComponent:SFX_Tick_1P_Prison": "NOTE: 3P versions of the SFX_Tick and SFX_CountdownStart variables are not used in the BP.",
    "FortDagwoodVehicle:HandbrakeStartTime": "NOTE: Deprecated, replaced by HandbrakeStartTime",
    "FortEditorTheaterMapRegionColor": "NOTE: Editor only struct! This is used by the editor to color regions for distinguishing regions easily.",
    "EAthenaGamePhaseStep": "NOTE: If you modify this, please also update GAthenaGamePhaseStepNames",
    "EAthenaGamePhase": "NOTE: If you modify this, please also update the LexToString implementation below.",
    "EFortAnalyticsClientEngagementEventType": "NOTE: If you modify this, please also update the LexToString implementation below.",
    "BiplaneSimAux:AileronRoll": "NOTE: It's really terrible to have action timers\nin here! We need to update them so that we're really only\nserializing the essential state.",
    "FortScriptedAction:bAllowOtherActionsWhenActive": "NOTE: Please do not use unless you have spoken to an engineer since it may have dire consequences!\nThis will allow other scripted action(s) to run if we are running and the event to trigger the other scripted action(s)\nis fired.",
    "FortTimeOfDayManager:bHasClonedPPVs": "NOTE: Since this boolean must be DuplicateTransient, it cannot be part of the bitfield below, which apparently\nwould cause it to be copied DESPITE being labeled as DuplicateTransient.\nAlso NOTE: This must be a uint32, not a bool.  As a bool, it will be (apparently) packed in with the uint32:1\nbitfield below, which again will cause DuplicateTransient to fail.",
    "CustomizableObjectSprayVariantFixedProperties:BaseRotation": "NOTE: THESE DO NOTHING BECAUSE CONTENT CHANGED",
    "CustomizableObjectSprayVariantFixedProperties:BaseScale": "NOTE: THESE DO NOTHING BECAUSE CONTENT CHANGED",
    "CustomizableObjectSprayVariantFixedProperties:Direction": "NOTE: THESE DO NOTHING BECAUSE CONTENT CHANGED",
    "CustomizableObjectSprayVariantFixedProperties:Position": "NOTE: THESE DO NOTHING BECAUSE CONTENT CHANGED",
    "CustomizableObjectSprayVariantFixedProperties:UpDirection": "NOTE: THESE DO NOTHING BECAUSE CONTENT CHANGED",
    "ECrewDetailsTag": "NOTE: The tile structs should only be used for the crew upsell screen.",
    "EColorSwatchType": "NOTE: These values MUST match the more limited ECharacterColorSwatchType values above!  (Again, lamenting the\ninability to multi-define enums or limit which ones display in the editor.  :( )",
    "EFortDagwoodSimEvent": "NOTE: This is shit, and won't work with net prediction.\nWe need to find a way to enable net prediction features\nalongside async features",
    "FortWorldSettings:bShowTimeOfDayManager": "NOTE: This property is saved with the map.  Please don't leave this turned off unless it's a map that has fully custom lighting and so should never show Time of Day.",
    "MeatballInPersistent:FortMeatballVehicleConfigs": "NOTE: This should move to InContinuous",
    "EFortOctopusSimEvent": "NOTE: This won't work with net prediction.\nWe need to find a way to enable net prediction features\nalongside async features",
    "EFortFrontendInventoryFilter.Schematics": "NOTE: Update the enum range macro if you add a new value immediately after this comment!!!",
    "RockVehicleAbility:ActiveSeconds": "NOTE: if this property is renamed, be sure to change the property name in FRockVehicleAbilityOutPersistent in RockVehicleAbility_Physics.h",
    "FortAthenaMutator_WeaponSettings:Enabled": "NOTE: josh.may - Added to appease content validator when migrating scoped options.",
    "EPublishStatus.Banned": "NOTE: ordering of these is relevant, be careful!",
    "FortAthenaVehicle:bIsFullyInWaterBody": "NOTE: this is a temporary measure for compatibility with net prediction in main, and should be removed.",
    "QualitativePerfMetricScale:ScaleValues": "NOTE: we could add a type here (eg. histogram) that then lets you set the threshold for the values. Then the scale is % of values over that threshold.\nThis might be useful for things like FT.",
    "ProfileUpdateSingle:ProfileRevision": "NOTE: we only have 53-bits precision here (double), but unexpected for profile revision number to get anywhere near that high",
    "BountyQuestSettings:NPCIcon": "NPC Icon to show when a bounty quest is complete.",
    "FortAthenaAILeashVolume:IsInsideTolerance": "NPC that distance away from the volume will be considered inside the volume.",
    "EFortAILODLevel.AboveNormal": "NPC's either very close or close and in the players view",
    "EFortAILODLevel.AboveLower": "NPC's that are barely if at all visible, this is a large bucket of NPC's",
    "EFortAILODLevel.MAX": "NPC's that are either targeted by or very very close to and in a narrow viewcode to the player",
    "EFortAILODLevel.Lower": "NPC's that are far from the player and not visible, this bucket has an unlimited number of NPC's",
    "FortPawnComponent_Disguise:CachedNPCBehaviorParameters": "NPCBehavior Runtime Parameters",
    "BuildingTrapFloor_Launch:ForceFeedbackName": "Name  used when triggering force feedback from this trap",
    "FortKeepResourceGroup:Container": "Name and level of the container",
    "FortTheaterMapData:DisplayName": "Name displayed by the UI when selecting this theater",
    "FortAthenaMutator_Encounter:LootTierGroupOverride": "Name for the Loot Tier override (if None, we will not override Loot Tier information on spawned AI).",
    "FortAthenaMutator_Bagel:CurrentLootTierGroupOverride": "Name for the current loot tier group override (if None, it means there's no active override",
    "FortAthenaMutator_Mash:CurrentLootTierGroupOverride": "Name for the current loot tier group override (if None, it means there's no active override",
    "PlaylistOptionLevelValue:LevelName": "Name for the level",
    "GlobalWeatherData:WeatherEventName": "Name for the weather event, makes the data easier to read in the editor",
    "QuestDrivenMissionSubList:MissionSubListName": "Name for this quest-driven sublist.",
    "FortMapMarkerTagNameData:TagName": "Name is used to RequestGameplayTag and has to match existing tag names in the project",
    "FortAthenaMutator_Mash:TeamScoreTournamentStatName": "Name of \"TeamScore\" tournament stat",
    "UserOptionDefinitionIntMetaData:RegistryType": "Name of Data Registry we potentially want to populate with our UserOptions. If set as None, we don't do anything with data registry",
    "UserOptionDefinitionEnumMetaData:RegistryType": "Name of Data Registry we potentially want to use to populate UserOptions. If set as None, we don't do anything with data registry",
    "InfiltrationPOIInfo:POIOverrideName": "Name of POI to use in UI if name cannot be found via gameplay tag",
    "LinearWindField:PawnForceName": "Name of Root Motion Source applied to player (does not need to be unique)",
    "RadialWindField:PawnForceName": "Name of Root Motion Source applied to player (does not need to be unique)",
    "HeroSpecializationDesignerData:AssetName": "Name of asset. Do NOT include any other prefixes. Examples: 008, 009, 010, ShadowSword, GrenadeMaster",
    "FortQuestPoolTableRow:PrerequisiteEventName": "Name of calendar event used for activation or scheduling",
    "FortEventName:CategoryName": "Name of category from which the event comes from",
    "AthenaCarPlayerSlot:SeatCollision": "Name of collision shape which is active when slot is occupied",
    "KeepItemContainer:ContainerNameKey": "Name of container, must match entry in Keep container data tables",
    "FortQuestPackInfo:DefaultQuestPack": "Name of default quest pack to pick from (for recurring quests)",
    "FortLayeredAudioFloatParam:Name": "Name of float parameter",
    "FortAIPawn:HeadBoneName": "Name of head bone, used for scaling weapon collision component",
    "FortGameStateAthena:RadiusTrackerCircleCenterAndRadiusParameterName": "Name of parameter in MiniMapRadiusTrackerCircleDrawingMaterial that defines the circle center and radius.",
    "FortGameStateAthena:RadiusTrackerCircleColorParameterName": "Name of parameter in MiniMapRadiusTrackerCircleDrawingMaterial that defines the circle's color.",
    "FortAIPawn:PelvisBoneName": "Name of pelvis bone, used for scaling weapon collision component",
    "AthenaLeaderboardData:PlaylistName": "Name of playlist",
    "FortCameraPrototype:PrototypeName": "Name of prototype. Can be set by console command SetCameraPrototype <Name>",
    "CustomPartScalarParameter:ScalarParameterNameForMaterial": "Name of scalar parameter to set in all materials on this character part.",
    "FortDisconnectedPlayerReservation:SessionName": "Name of session",
    "FortHostSessionParams:SessionName": "Name of session settings are stored with",
    "FortSearchPassParams:SessionName": "Name of session settings are stored with",
    "AudioDynamicSoundData:Name": "Name of sound object to override",
    "FortLootTierData:RequiredTag": "Name of tag that is required for this item to drop. If the tag doesn't apply weight is treated as 0. Editor-only representation, parsed at import time into RequiredGameplayTag",
    "CustomPartTextureParameter:TextureParameterNameForMaterial": "Name of texture parameter to set in all materials on this character part.",
    "RepGraphActorClassSettings:ActorClassName": "Name of the Class the settings will be applied to",
    "FMOutgoingCableConnection:ComponentName": "Name of the Component on the Target Device\nThis name can be a simple UFMDeviceCablePortComponent for basic Ports\nOr it can be a FabricChildActorComponent for Modulators\nSFMPortPicker Populates this, and also determines what can be populated here",
    "FortPlayerControllerComponent_RespawnOnDeath:ItemsToGiveOnRespawnLootTier": "Name of the Loot Tier of items we will grant to a newly respawned player.",
    "MashTableRowPoiRoute:Name": "Name of the POI Route for easy identification and logging.",
    "RepGraphActorTemplateSettings:TemplateName": "Name of the Settings Template that can then be assigned to MapToTemplate in FRepGraphActorClassSettings for multiple different FRepGraphActorClassSettings.",
    "RepGraphActorClassSettings:MapToTemplate": "Name of the Template to use for this Class' settings.",
    "FortPlayerControllerZone:VoiceChatChannel": "Name of the Voice Chat channel that the player should be in. Only replicated to owner",
    "FortCreativeOptionDestructiveAction:ConfirmActionName": "Name of the action to do when confirm is pressed.",
    "VkProjectInfoSlim:RcsProvider": "Name of the active source control provider for this project",
    "FabricMetaSoundNodeInfo:AnalyzerName": "Name of the analyzer attached to this node",
    "FortSimpleWidgetAnimations:Name": "Name of the animations bundle to use for reference in blueprint",
    "VkFoundMatchingArtifact:Name": "Name of the artifact",
    "SpecialEventScriptMeshActor:CalendarEventName": "Name of the calendar event we check",
    "ItemCategory:CategoryName": "Name of the category",
    "ItemCategoryMappingData:CategoryName": "Name of the category",
    "MyFortCategoryData:CategoryName": "Name of the category",
    "GameDifficultyInfo:ColorParamName": "Name of the color param used to show this difficulty.",
    "AthenaCosmeticMaterialOverride:ComponentName": "Name of the component to apply to (if none, this will be applied to all components when using ApplyMaterialOverridesToActor)",
    "FortAnimNode_GrindRailSlopeWarping:LFootOnGroundCurveName": "Name of the curve signalling when the left foot is up/down WRT the ground.",
    "FortAnimNode_PredictiveSlopeWarping:LFootOnGroundCurveName": "Name of the curve signalling when the left foot is up/down WRT the ground.",
    "FortAnimNode_GrindRailSlopeWarping:RFootOnGroundCurveName": "Name of the curve signalling when the right foot is up/down WRT the ground.",
    "FortAnimNode_PredictiveSlopeWarping:RFootOnGroundCurveName": "Name of the curve signalling when the right foot is up/down WRT the ground.",
    "GameDifficultyInfo:PlayerStatClampRowName": "Name of the data table row containing the stat clamping info for this difficulty level. This should match a row in the table returned by UFortGameData::GetPlayerStatClampingData()",
    "FortEventName:EventName": "Name of the event",
    "LivingWorldCalendarEventCondition:CalendarEventName": "Name of the event this condition will check.",
    "AutoAimWeaponBoneSegmentData:BoneName1": "Name of the first pawn bone.",
    "QuestCategoryHeaderData:HeaderName": "Name of the header to display in the UI",
    "FabricMetaSoundNodeInfo:AnalyzerNodeVisibleInput": "Name of the input node for the Analyzer that enables/disables the analyzer's visibility dependent nodes",
    "FabricMetaSoundNodeInfo:NodeEnabledInput": "Name of the input node for the Switcher that switches between this node and the passthrough",
    "FortMinigameSettingsBuilding:GameNameData": "Name of the island game that will be displayed to the user.",
    "FortUserInputSettingsPerInputType:TemplateLayoutPresetNameForCustom": "Name of the layout used as a template when building custom bindings",
    "FortLootPackageData:LootPackageID": "Name of the loot package",
    "LootPackageRow:LootPackageID": "Name of the loot package",
    "FortLootTierData:LootPackage": "Name of the loot package to spawn",
    "LootTierDataRow:LootPackage": "Name of the loot package to spawn",
    "FortLootPackageData:LootPackageCall": "Name of the loot sub package to drop",
    "LootPackageRow:LootPackageCall": "Name of the loot sub package to drop",
    "FortLootTierData:TierGroup": "Name of the loot tier",
    "LootTierDataRow:TierGroup": "Name of the loot tier",
    "GameRewardOverridesInfo:LootTierGroup": "Name of the loot tier group that will be overridden for this difficulty.",
    "GameDifficultyInfo:BonusLootTierGroup": "Name of the loot tier group that will be spawned for this difficulty if you are eligible to receive bonus loot.",
    "GameDifficultyInfo:DifficultyIncreaseLootTierGroup": "Name of the loot tier group that will be spawned for this difficulty if you are eligible to receive loot from increasing game difficulty.",
    "GameDifficultyInfo:LootTierGroup": "Name of the loot tier group that will be spawned for this difficulty.",
    "BagelLootTierOverrideAssetData:TieredGroup": "Name of the loot tier group to use passed the safe zone index",
    "MashLootTierOverrideAssetData:TieredGroup": "Name of the loot tier group to use passed the safe zone index",
    "FortMaterialStyleParameterData:Name": "Name of the material parameter this data will be changing",
    "FortMiniMapIconMaterialParameterData:Name": "Name of the material parameter this data will be changing",
    "FortCosmeticModification:ColorParameterName": "Name of the material parameter used to apply the ColorAlteration",
    "QuestItemDefinitionDesignerData:QuestMissionInfoName": "Name of the mission asset, used for naming the files",
    "FortMissionCompletionNotification:MissionName": "Name of the mission that was completed",
    "GameRewardOverridesInfo:MissionName": "Name of the mission to override rewards for.",
    "ValkyrieModuleDependencySizeStats:ModuleName": "Name of the module these stats are for",
    "MorphValuePair:MorphName": "Name of the morph whose value you'd like to set.",
    "FortUpdatedObjectiveStat:BackendName": "Name of the objective that has been updated",
    "UpdatedQuestObjectiveData:BackendName": "Name of the objective that has been updated",
    "DAD_BaseCreativeUserOption:Name": "Name of the option this represents. Used to find this specific listing in the DataAssetDirectory object.",
    "FortExposedContentValidatedPackage:PackageName": "Name of the package that was validated",
    "RealitySaplingEnvQueryParam:Name": "Name of the param",
    "FortWeaponPickaxeAthena:FrontendFXParameterName": "Name of the parameter on FX systems that indicates if the pickaxe is being displayed in the frontend",
    "FortHighlightColorsContainer:ParamProfileName": "Name of the parameter profile to use",
    "FortAnimNotifyMaterialOverride_ScalarParameter:ParameterName": "Name of the parameter to set",
    "FortPlayerRecord:DisplayName": "Name of the player (not necessarily accurate if player changed name since last login, but good enough for management purposes)",
    "ValkyriePluginReferenceDescriptor:Name": "Name of the plugin",
    "FortUserInputSettingsPerInputType:LayoutPresetName": "Name of the preset layout selected for this input type",
    "MaterialParamterLerpInfo:PropertyName": "Name of the property that will get interpolated",
    "LocalizableProperty:Name": "Name of the property the localized message should be set in",
    "FetchQuestData:QuestPropBlueprintName": "Name of the quest prop blueprint, used for naming the files",
    "PFWDataRegistrySourceToAdd:RegistryToAddTo": "Name of the registry to add to",
    "FortCreativeItemListData:Category": "Name of the row in the category data table that this item belongs to",
    "GameRewardOverridesInfo:OverrideRewardsTag": "Name of the row used to determine reward override data.",
    "FortSplineGroundPath:OpacityParameterName": "Name of the scalar parameter value used for fade",
    "FortSplineGroundPath:GrowthParameterName": "Name of the scalar parameter value used for initial growth of the path, and to be used when the path is eaten.",
    "AutoAimWeaponBoneSegmentData:BoneName2": "Name of the second pawn bone, should be connected to BoneName1.",
    "SecondaryXpGained:Type": "Name of the secondary xp category",
    "FortPlayerInputSettings:FriendlyName": "Name of the settings",
    "FortMaterialStyleComponent:DynamicMaterialSlotName": "Name of the slot of the material to be dynamically instanced for default styles",
    "FortHeroLoadoutPedestal:SlotName": "Name of the slot to represent within any hero loadout.",
    "FortTankVehicle:BarrelSocketName": "Name of the socket that the BarrelCollision should attach to",
    "FortGameStateComponent_MidMatchObjectiveParent:ObjectiveCompletedStatName": "Name of the stat to be set on the players of the squad who completed the objective.",
    "FortMantisTechniqueBranch:FromTechnique": "Name of the technique being branched from.",
    "FortMantisTechniqueBranch:ToTechnique": "Name of the technique being branched to.",
    "FortMissionAlertData:ModifierTierGroup": "Name of the tier group that will be used to generate modifiers for this mission alert.",
    "TieredWaveSetCollectionData:WaveSet": "Name of the wave set to use",
    "FortSimpleWidgetAnimation:TargetName": "Name of the widget to animate, used to grab the UWidget on load and after a blueprint compile",
    "FortHabaneroTier:Name": "Name of this Habanero tier",
    "FortPerModeInputConfig:InputConfigName": "Name of this config, used as the identifier in the record for switching normal layouts to the ones in this struct",
    "FortSavedModeLoadout:LoadoutName": "Name of this loadout, empty name is an invalid loadout",
    "FortQuestObjectiveCompletion:StatName": "Name of this objective stat on the backend",
    "GrantPackage:PackageName": "Name of this package (may be looked up by name or index)",
    "FortTeamMemberInfo:PlayerName": "Name of this player",
    "QuestItemDefinitionDesignerData:QuestItemDefinitionName": "Name of this quest asset, used for naming the files",
    "FortQuestPackInfo:Name": "Name of this quest info.",
    "FortTheaterMapRegionData:DisplayName": "Name of this region",
    "TrapItemDefintionDesignerData:DisplayName": "Name of this trap",
    "WeaponItemDefinitionDesignerData:DisplayName": "Name of this weapon",
    "WeaponItemDefinitionDesignerData:AssetName": "Name of this weapon asset, used for naming the files",
    "TournamentWeaponKillStat:StatName": "Name of tournament stat",
    "CustomPartVectorParameter:VectorParameterNameForMaterial": "Name of vector parameter to set in all materials on this character part.",
    "DAD_BaseCreativeUserOption:DisplayName": "Name to display when this listing is viewed as a user option.",
    "RepGraphActorSettingsBase:CSVStatNamePrefix": "Name to give a CSV Stat Name Prefix for a Class",
    "HomebaseBannerColorData:ColorKeyName": "Name to use as a lookup into static color data to find associated artist-created colors; Intentionally separate from spreadsheet data so that art can't unintentionally affect template ids on backend",
    "FortAthenaTeamHUDInfo:DisplayName": "Name to use for this team in the UI",
    "CurieManager:ElementDataRegistryName": "Name to use to access the element data registry, default name is Curie.Elements",
    "CurieManager:EntityStateDataRegistryName": "Name to use to access the entity state data registry, default name is Curie.EntityStates",
    "CurieManager:CurieManagerRegistryName": "Name to use to access the manager data registry, default name is Curie.Manager",
    "CurieManager:MaterialDataRegistryName": "Name to use to access the material data registry, default name is Curie.Materials",
    "CatalogOffer:DevName": "Name used for development",
    "EQSActorSpawnerData:NameId": "Name used to identify this data set. This information is used to create more informative logs",
    "BuildingGameplayActorAbilityDeliveryInfo:DeliveryBuckets": "Named buckets of ability system-related items to apply",
    "CreativeDataChannelEvents": "Named collection of FCreativeDataChannelEvent.\nExists to mirror JSON specs and allow multiple events to process in a single frame.",
    "LootPackageRow:NamedWeightMult": "Named multiplier to skew weights for some package sampling",
    "VkProfileBuildResult_Server:Stat": "Named stats for the server side",
    "VkProfileBuildResult_Client:Stat": "Named stats for this client",
    "FortEventResponderComponent:MeshEventTags": "Names of Events that are sent to the Mesh Network system that we want to respond to, these will come through the OnMeshNetEvent event in blueprint",
    "SidewaysStateComponent_Player:SidewaysBubbleLocationParameterNamesForLocalPlayers": "Names of parameters for each local player, for that player's current Sideways Bubble Location (if any)",
    "SidewaysStateComponent_Player:SidewaysBubbleRadiusParameterNamesForLocalPlayers": "Names of parameters for each local player, for that player's current Sideways Bubble Radius (if any); MOTE: These\nparameters will have the actual Radius plus the ExtraCorruptionRadius added to it.",
    "LacklusterData:SetParameterNames": "Names of texture parameters that we are setting into chrome materials",
    "TireInfo:DamageablePartShapeNames": "Names of the damagable parts these tires should be associated with. Index ordering corresponds to UFortDagwoodVehicleConfigs::TireSocketNames",
    "FabricMetaSoundNodeInfo:AnalyzerOutputNames": "Names of the output nodes attached to this node's analyzer",
    "TieredNamedCollectionProgressionData:CollectionNames": "Names of tiered collections",
    "FortEntitlementConfig:Namespace": "Namespace of the entitlement",
    "GasEventHistoryItem:NativeCallStackAsString": "Native Callback as a cached string. Provided via GetOrGenerateNativeCallStackAsString. Mutable so it can be cached, and not replicated.",
    "FortCurieEntityStateDefinition:NativeFXTag": "Native VFX type as a tag caused by this state, if any",
    "FortCurieEntityStateDefinition:NativeVFXType": "Native VFX type caused by this state, if any",
    "GasEventHistoryItem:NativeCallStack": "Native call stack at the time, if available. THIS DIFFERS ACROSS BUILDS OF THE GAME.",
    "GasDebugReplicatableCallStack:NativeCallStack": "Native call stack, as pointer array. THIS DIFFERS ACROSS BUILDS OF THE GAME and won't be correct if the client/server executables are different.",
    "BuildingPropAtlas": "Native class for atlas BP handling some of more expensive functionalities",
    "FortCreativeItemProp": "Native class for legacy Creative devices built from BuildingProp and override the primary asset ID so it can be applied with Creative Beta Permission System",
    "SpookyEventEmotePad": "Native class for s22 fortnitemares BP_SpookyEvent_EmotePad which is a pad players step on and emote to perform a ritual",
    "FortLiquidGunProjectile": "Native class for the liquid gun's projectiles.\nThe liquid gun shoots projectiles that are connected visually by a \"liquid ribbon\" spline such that it looks\nlike the gun is shooting a stream of liquid/goo.",
    "CustomCharacterPartModifier_PliantBody": "Native class to optimize part modifier functionality for Pliant character bodies",
    "PulseIndicatorComponent": "Native component for triggering a pulsing indicator effect.",
    "LiquidRibbonManager": "Native parent class for BP_RibbonManager which handles the ribbon spline used by the unstable liquid gun",
    "GameplayCueNotify_Jetpack_Hovering": "Native parent for BoostJumpPack GCN",
    "FortSpicySakeGameplayCueNotifyLoop_Alive": "Nativization of the alive gameplay cue loop for SpicySake\nThis manage the audio component as well as water & land FXs",
    "FortGameplayCueNotifyLoop_Goop": "Nativized gameplay cue for the goop low gravity area.",
    "ReactorGradeGameplayCue_ChargeUp": "Nativized gameplay cue for the reactor grade chargeup effect",
    "FortGameplayCueNotifyLoop_SpookyMist": "Nativized gameplay cue for the spooky mist/shadowstone VFX",
    "FortAscenderZipline:ZiplineLinkComponent": "Nav Link for AI navigation using zipline ascenders",
    "ENavOptionFallbackDir": "Navigation context for fallback objects - keeping separate from 'EUINavigation', in case we want to generalize further (up&left, etc)",
    "AIHotSpot:FilterClass": "Navigation filter for slots projection",
    "FortAthenaAICoverComponent:CoverPositionFilterClass": "NavigationFilter use to check cover position",
    "BuildingActorNavArea": "Navmesh area marking for building actors",
    "FortPicklePortal:NearDistance": "Near distance at which the portal effect begins to fall off close to the portal.",
    "FortAIPawn:NearbyPickups": "Nearby pickups",
    "FortWindManager:NearbyCacheIndicesForUpdates": "Nearby responders that are potentially visible to the user and need to be updated",
    "FortWindManager:NearbyCacheIndicesForAudio": "Nearby responders that might need to play audio",
    "CosmeticScreenshotChannelArray": "Necessary to nest TArray inside a TMap",
    "ConsolidatedQuestComponent": "Need this to be a scene comp so we can have components as children to know what to hide/show",
    "FortAthenaAIBotController:PendingEquipWeapon": "Need to equip the weapon prevented by the ForceUsingBuildTool, since the whole system is event base and will not be equip",
    "FortAthenaAIBotController:PreviousStasisMode": "Need to track the last stasis mode to allow resetting movement correctly",
    "FortPlayerController:PreviousStasisMode": "Need to track the last stasis mode to allow resetting movement correctly",
    "OwnedRealitySaplingData:bHasSaplingOnAuthority": "Needed because the sapling may not be relevant to us on client.",
    "FortLobbyBeaconPlayerState:HeroType": "Needed for other clients to be able to update their UIs appropriately since they can't look up your HeroID",
    "EMissionGenerationCategory.Tertiary": "Needed to complete the zone",
    "WeaponAmmoCheat:CheckLoadedAmmoForInfiniteAmmo": "Needs to check for loaded ammo when using infinite ammo?",
    "FortSplineGroundPath:CurrentFadeOutTime": "Negative means disabled.",
    "FortScriptedObjectMovement_MovableObjectBase:Editor_SkipMasterPathIndex": "Negative values are ignored",
    "FortScriptedObjectMovement_MovableObjectBase:Editor_SkipSubPathIndex": "Negative values are ignored",
    "EDeployableBaseUseType.Neighborhood": "Neighborhood/building only",
    "NeighboringCenterCellInfo:NeighboringActor": "Neighboring actor",
    "NeighboringFloorInfo:NeighboringActor": "Neighboring actor",
    "NeighboringWallInfo:NeighboringActor": "Neighboring actor",
    "DeployableBasePlot:OccupantNetID": "Net ID of the occupant",
    "PendingDeployableBaseUser:UserNetID": "Net ID of the pending user",
    "FortComponent_Energy:NetEnergyDeltaPerSecond": "Net amount from all sources/users of energy being added/removed per frame, to keep the action as cheap and simple\nas possible.",
    "FortGameModeAthena:OverloadedInitialConnectTimeout": "Net driver connection timeout overloaded specifically for this game mode.",
    "FortDeployableBasePickup:AssociatedPlotOccupant": "NetId of the occupant of the plot associated with the pickup",
    "FortAthenaLocalGameplayBehavior:bNeedToAwakeDuringExecution": "Network optimization : Activate this option to set the NetDormancy to Awake during the LGB execution and reset it to DormantAll when the execution is finished.",
    "FortDagwoodCmd": "Network prediction states",
    "FortOctopusCmd": "Network prediction states",
    "PredictionReplicationProxy_AP": "NetworkPrediction2",
    "EFortMissionStatus.NeutralCompletion": "Neutral completion of the mission (neither win nor loss)",
    "EFortObjectiveStatus.NeutralCompletion": "Neutral completion of the objective (neither win nor loss)",
    "EDBNOType.Off": "Never any DBNO",
    "EBuildingActorComponentCreationPolicy.Never": "Never create a component.",
    "EFortCurieToggleComponentDeactivationBehavior.NeverDeactivate": "Never deactivate the component after activation",
    "EAlertLevel.Unaware": "Never saw a menace: idling & chilling (default perception)",
    "EFortCreativeDiscoveryDeterminism.Never": "Never select.",
    "EFortCreativeDiscoverySkippedEntries.None": "Never skip over entries.",
    "AlterationIntrinsicMapping:NewAlteration": "New AID.",
    "AlterationMapping:NewAlteration": "New AID.",
    "EFortBangType.SocialButton": "New MPLobby SocialButton Frontend",
    "EMatchmakingUtilityState.NewReadiness_Begin": "New Readiness flow ends up with the player just ready up in a social party OR calling to do a server transfer.\nUtility should not try to run the 3-phase commit ready check logic.",
    "EFortBangType.STWCommand": "New STW Frontend",
    "FortPlayerController:VoiceChatMethod": "New VoiceChatMethod (OpenMic/PTT/Mute",
    "FortMigrationDataTableRow:NewItemTemplate": "New asset",
    "EFortItemType.CampaignHeroLoadout": "New campaign hero loadout",
    "EFortCollectedState.NewBest": "New personal best",
    "CatalogItemSalePrice:SalePrice": "New price for this item",
    "EFortCollectedState.NewRecord": "New record amongst friends",
    "FortAnimNode_PredictiveSlopeWarping:MaxMovementDistBeforeNewTrace": "New traces will only be performed once the position has moved more than this amount.",
    "FortAnimNode_QuadrupedSlopeWarping:MaxMovementDistBeforeNewTrace": "New traces will only be performed once the position has moved more than this amount.",
    "FortActorRecord:bSpawnedActor": "Newly created actor",
    "FortActiveSubscription:NextRewardDate": "Next date the client should attempt to claim rewards",
    "FortAthenaMutator_Disco:GameMsg_CapturePointsEnabled": "Next group of control points enabling",
    "FortAthenaMutator_Disco:GameMsg_SecondCapturePointsEnabled": "Next group of control points enabling",
    "FortAthenaMutator_Disco:GameMsg_ThirdCapturePointsEnabled": "Next group of control points enabling",
    "FortCreativeStormShield:NextTargetLocation": "Next location that this storm shield will be at.",
    "FortCreativeStormShield:NextNextTargetLocation": "Next next location that this storm shield will be at.",
    "FortCreativeStormShield:NextNextTargetRadius": "Next next radius that this storm shield will be at.",
    "EFortBudgetType.Preview": "Next potential budget",
    "FortCreativeStormShield:NextTargetRadius": "Next radius that this storm shield will be at.",
    "SpecialActorRepData:NextReplicationTime": "Next time this actor should be replicated",
    "FortCurieWorldFirePlayerSystem:ActiveWorldFireSystem": "Niagara component being tracked",
    "FortMotorcycleVehicle:RoadAndExhaustNiagaraComponentName": "Niagara component name so we can get it and cache it for usage in the tick.",
    "FortTankVehicle:RoadAndExhaustNiagaraComponentName": "Niagara component name so we can get it and cache it for usage in the tick.",
    "FortDagwoodVehicle:RoadAndExhaustPeelOutColorIndexName": "Niagara component parameter name.",
    "FortMotorcycleVehicle:RoadAndExhaustDustAlphaMultiplierName": "Niagara component parameter name.",
    "FortMotorcycleVehicle:RoadAndExhaustDustColorLerpName": "Niagara component parameter name.",
    "FortMotorcycleVehicle:RoadAndExhaustDustRearName": "Niagara component parameter name.",
    "FortMotorcycleVehicle:RoadAndExhaustIsInAirName": "Niagara component parameter name.",
    "FortMotorcycleVehicle:RoadAndExhaustIsPeelOutOnRoadName": "Niagara component parameter name.",
    "FortMotorcycleVehicle:RoadAndExhaustIsPeelOutOnRoadRewindName": "Niagara component parameter name.",
    "FortMotorcycleVehicle:RoadAndExhaustPeelOutColorIndexName": "Niagara component parameter name.",
    "FortMotorcycleVehicle:RoadAndExhaustPeelOutRearName": "Niagara component parameter name.",
    "FortMotorcycleVehicle:RoadAndExhaustSlideDirectionName": "Niagara component parameter name.",
    "FortMotorcycleVehicle:RoadAndExhaustVehicleSpeedName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustDustAlphaMultiplierName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustDustColorLerpName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustDustFrontLeftName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustDustFrontRightName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustDustMiddleLeftName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustDustMiddleRightName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustDustRearLeftName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustDustRearRightName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustIsOnDirtName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustPeelOutLeftName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustPeelOutRightName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustSlideDirectionName": "Niagara component parameter name.",
    "FortTankVehicle:RoadAndExhaustVehicleSpeedName": "Niagara component parameter name.",
    "FortMotorcycleVehicle:RoadAndExhaustDustAlphaMultiplier": "Niagara component parameter value.",
    "FortMotorcycleVehicle:RoadAndExhaustDustColorLerp": "Niagara component parameter value.",
    "FortMotorcycleVehicle:RoadAndExhaustMinSpeedForDust": "Niagara component parameter value.",
    "FortTankVehicle:RoadAndExhaustDustAlphaMultiplierOffRoad": "Niagara component parameter value.",
    "FortTankVehicle:RoadAndExhaustDustAlphaMultiplierOnRoad": "Niagara component parameter value.",
    "FortTankVehicle:RoadAndExhaustDustColorLerpOffRoad": "Niagara component parameter value.",
    "FortTankVehicle:RoadAndExhaustDustColorLerpOnRoad": "Niagara component parameter value.",
    "FortTankVehicle:RoadAndExhaustMinSpeedForDust": "Niagara component parameter value.",
    "FortCowVehicle:SpeedLinesNSComponent": "Niagara component.",
    "FortLightweightProjectileConfig:ProjectileFXDataChannel": "Niagara data channel for projectile FX",
    "LiquidRibbonManager:FlashIntensitiesNiagaraParamName": "Niagara param name that corresponds to the array of flash intensity per point",
    "LiquidRibbonManager:RibbonSizesNiagaraParamName": "Niagara param name that corresponds to the array of ribbon size (thickness) per point",
    "LiquidRibbonManager:RibbonVisibilitiesNiagaraParamName": "Niagara param name that corresponds to the array of ribbon visibility per point",
    "LiquidRibbonManager:PositionsNiagaraParamName": "Niagara param name that corresponds to the array that holds the point locations",
    "LiquidRibbonManager:RibbonIDsNiagaraParamName": "Niagara param name that corresponds to the array that holds the ribbon ids per point",
    "FortCowVehicle:NSUseWorldImpactPointName": "Niagara paramenter name for the impact point interp.",
    "FortCowVehicle:NSRippleLengthInterpName": "Niagara paramenter name for the ripple length interp.",
    "FortCowVehicle:NSRippleStartName": "Niagara paramenter name for the ripple start.",
    "FortCowVehicle:NSParamSpeedLinesThresholdName": "Niagara paramenter name for the speed lines threshold.",
    "FortCowVehicle:NSParamSquashAmountName": "Niagara parameter name for the squash amount.",
    "FortNavPathRendererComponent:PathVFX": "Niagara system VFX that will draw the path",
    "GliderTrailParticleDefinition:NiagaraSystem": "Niagara system to be spawned for this glider trail",
    "FortWeaponRanged:TracerBeamFX": "Niagara tracer beam effect",
    "FortCosmeticModification:ImpactNiagaraPhysicalSurfaceEffects": "Niagara versions of effects to play for weapon attacks against specific surfaces",
    "EConsoleAuthLinkState.ConsoleNotLoggedIn": "No Console auth available",
    "EConsoleAuthLinkState.EpicNotLoggedIn": "No Epic Auth is available yet, UI needs user to attempt linking then check again",
    "ECheckoutType.None": "No Validation",
    "ECreateAccountResult.NotStarted": "No account creation attempt was made",
    "EActionOnSaveDataFailed.Skip": "No action upon save data failure",
    "EManagedPickupContext.PlayerDropped": "No additional context available",
    "EAnimInstanceClassSwapType.None": "No anim instance swap",
    "EValkyrieReadOnlyAssetsPermission.VkAssetsOnly": "No asset can be opened in read only mode",
    "ScorePlacementTable:Default": "No bonus",
    "EFortFeedbackBroadcastFilter.FFBF_None_Max": "No broadcast filter",
    "EInventoryPersistenceMode.ReadOnly": "No changes to this inventory are allowed",
    "EInventoryPersistenceMode.Disabled": "No changes to this inventory are persisted",
    "ESavedAccountType.None": "No choice made yet",
    "EFortPoiSwapUserContentState.Loading": "No content is loaded or in the process of loading",
    "EFortCostInfoTypes.None": "No cost info",
    "ELevelSaveRecordVersion.Unused": "No data added at this point (version shouldn't have been added)",
    "EFortPartyMemberLocation.PreLobby": "No destination yet",
    "ELiquidRibbonDetachmentReason.NotDetached": "No detachment",
    "ESubscriptionCancellability.NotCancellable": "No direct way to cancel. we just have to show instructions how to do it manually with the platform.",
    "EConsoleAuthLinkState.NoEpicAccountLinked": "No epic account is linked to this console auth yet",
    "ECraftingIngredientReqError.NoItem": "No error was found",
    "EAthenaScoringEvent.None": "No event set",
    "FortGameplayEffectDeliveryActor:bIsBeingKilled": "No events should be fired while being killed. While in the process of being killed, we are only waiting for replication to finish",
    "EMatchmakingFlags.CreateNewOnly": "No flags",
    "EFortMinigameState.PreGame": "No game has started yet",
    "EFortMantisNotifyTranslationWarpLimitRule.None": "No limit is applied during translation warping.",
    "ELoginResult.NotStarted": "No login attempt was made",
    "EIndexNavigationResult.NoMove": "No movement was attempted",
    "EMutualFriendsPrivacyPolicy.None": "No one can see their mutual friends with you.",
    "ESkyfirePhase.None": "No phase, skyfire hasn't started yet",
    "EBuildingStairsRailing.None": "No railings, all dropdown links have default cost",
    "EFortPartyMemberReadyCheckStatus.None": "No ready check is active or completed at this time.",
    "EMatchmakingFlags.Private": "No reservation beacon connection is required (party leader already made one)",
    "EFortPawnStasisMode.None": "No restrictions on pawn movement nor actions.",
    "EGridSortKind.None": "No sorting",
    "EFabricCloneTransformBehavior.Uniform": "No special clone transformation behavior",
    "EFortGameplayCueSourceCondition.AnySource": "No special condition: this always spawns for everyone",
    "EFortFrontEndFeatureStateReason.Default": "No specific reason provided.  Generally for Enabled states.",
    "EFortUIFeatureStateReason.Default": "No specific reason provided.  Generally for Enabled states.",
    "EValkyrieSubclassRule.None": "No subclasses allowed",
    "EFortContextualReticleTypes.FCR_NoTarget": "No target",
    "EFortScoutDroneTargetStatus.TooFar": "No target",
    "EPropertyOverrideTargetType.Default": "No target object will be tracked",
    "ELockOnState.TargetAcquired": "No targets under the reticle",
    "EReachLocationValidationMode.None": "No test, automatically valid",
    "EFortAthenaLivingWorldEventRuntimeDeactivationReason.RandomDeactivation": "No valid event data where found for this event.",
    "EFortRequestedGameplayAction.Invalid": "No valid option",
    "EFortGameplayState.Invalid": "No valid state",
    "FabricLoadedUtilityPatches:AnalyzerNode": "Node for analyzers that should be used for every node of the type",
    "FabricMetaSoundUtilityPatches:AnalyzerNode": "Node for analyzers that should be used for every node of the type",
    "FabricLoadedUtilityPatches:SwitcherNode": "Node for choosing to send an input to one of two outputs",
    "FabricMetaSoundUtilityParams:SelectEnabledParam": "Node for choosing to send an input to one of two outputs",
    "FabricMetaSoundUtilityPatches:SwitcherNode": "Node for choosing to send an input to one of two outputs",
    "FabricLoadedUtilityPatches:SelectNode": "Node for choosing to send one of two inputs to an output",
    "FabricMetaSoundUtilityPatches:SelectNode": "Node for choosing to send one of two inputs to an output",
    "FabricLoadedUtilityPatches:CombinerNode": "Node for combining two outputs into one input",
    "FabricMetaSoundUtilityParams:SwitcherEnabledParam": "Node for combining two outputs into one input",
    "FabricMetaSoundUtilityPatches:CombinerNode": "Node for combining two outputs into one input",
    "FabricMetaSoundManagerComponent:MidiStreamUtilityPatches": "Nodes for allowing multiple outputs to connect to one input",
    "FortAnimInput_SkydivingExternalForce:bUseNoisyClothGravity": "Noisy Cloth Gravity will soon be deprecated due to conflicts with the Blueprint use of the ClothingSimulationInteractor",
    "AssetBundleFilter:PrimaryAssetTypeName": "Nome => any type of primary asset associated with AssetBundleName",
    "FortLocomotionAnimSet:MovementBlendSpace": "Non targeting Movement",
    "VortexParams:Transform": "Non volume vortex: Contains Gravity floor altitude as position.Z\nVolume vortex: Transform that contains the volume center as position, volume extent as scale, and volume rotation",
    "AthenaDynamicRestedXpProgression:NonBRDynamicRestMult": "Non-BR rest XP multiplier",
    "EFortPlaylistType.Playground": "Non-Creative non Playground type",
    "EFortTheaterType.Elder": "Non-normal PvE sessions with varying degrees of persistence",
    "KatanaTargetingComponent:BuildingRemainingHealthToDestroy": "Non-prop buildings with this much health or less will be dashed through and destroyed.",
    "CustomCharacterPartModifier_SlurpLegendsBody:ShieldOverride": "Non-reactive overrides",
    "VoteSelectionResults:Shadow_AllServersVoteTotal": "Non-replicated property for clients to know when AllServersVoteTotal has replicated",
    "VoteSelectionResults:Shadow_ServerVoteTotal": "Non-replicated property for clients to know when ServerVoteTotal has replicated",
    "VoteRuntime:Shadow_VoteSelectionWinningResult": "Non-replicated property for clients to know when VoteSelectionWinningResult has replicated",
    "VoteSessionRuntime:Shadow_VoteSessionState": "Non-replicated property for clients to know when VoteSessionState has replicated",
    "VoteRuntime:Shadow_VoteState": "Non-replicated property for clients to know when VoteState has replicated",
    "LimitedLifeByTeamData": "Non-replicated, by-team data",
    "DaySequenceModifierComponent:TargetActor": "Non-serialized target actor we are currently bound to",
    "DaySequenceModifierComponent:bIsEnabled": "Non-serialized variable for tracking whether our overrides are enabled or not",
    "FortAIDirector:NonPlayerBotPawns": "NonPlayerBotPawns that have Registered with the system. This will only contain Pawns that have a Controller attached. Order is not preserved (RemoveAtSwap is used).\nCurrently this is only enabled for Athena",
    "AssetBundleFilter:AssetBundleName": "None => Any asset bundle associated with a primary asset of type PrimaryAssetTypeName",
    "FortCreativeDiscoveryContentPanel:PanelLinkCodeBlacklist": "None of these link codes will ever show up in this panel's result set.",
    "EFortCreativePatrolPathGroup.Group_1": "None value not really used but is to match logic & values in devices BP",
    "EWebCameraMessageType.None": "None.",
    "EFortVolumeType.Published": "Normal Creative volume that allows saving.",
    "EDBNOType.On": "Normal DBNO rules",
    "EFortTheaterType.Standard": "Normal PvE session with persistence",
    "EFortZoneType.PVE": "Normal PvE session with persistence",
    "EFortDamageZone.Normal": "Normal damage zone, this is the default and should apply 1.0x damage",
    "EUraniumGameEndedReason.AllRoundsPlayed": "Normal end condition, every round that was expected has played",
    "EFortGameplayState.NormalGameplay": "Normal gameplay is occurring",
    "EFortMatchmakingType.Gathering": "Normal matchmaking",
    "EFortSwimmingAudioType.SprintBoostStart": "Normal swimming while DBNO",
    "FortVehicleInPersistent:TireStates": "Normal to the ground triangle if applicable",
    "EFortSwimmingAudioType.Sprint": "Normal tread water event, triggered when feet kick",
    "FortAISharedRepMovement:RepMovement": "Normal world position movement data",
    "SharedRepMovement:RepMovement": "Normal world position movement data",
    "FortVehicleAudioOneshotGate:GateValue": "Normalized value to trigger this sound at",
    "BuildingContainer:MarkerPositionOffset": "Normally markers appear at the actors location unless otherwise offset.\n     Only used when bCanBeMarked == true.",
    "BuildingGameplayActor:MarkerPositionOffset": "Normally markers appear at the actors location unless otherwise offset.\n     Only used when bCanBeMarked == true.",
    "BuildingRealitySapling:MarkerPositionOffset": "Normally markers appear at the actors location unless otherwise offset.\n     Only used when bCanBeMarked == true.",
    "BuildingRealitySeedPod:MarkerPositionOffset": "Normally markers appear at the actors location unless otherwise offset.\n     Only used when bCanBeMarked == true.",
    "BuildingRift:MarkerPositionOffset": "Normally markers appear at the actors location unless otherwise offset.\n     Only used when bCanBeMarked == true.",
    "BuildingTrap:MarkerPositionOffset": "Normally markers appear at the actors location unless otherwise offset.\n     Only used when bCanBeMarked == true.",
    "FortHeistDisplayCase:MarkerPositionOffset": "Normally markers appear at the actors location unless otherwise offset.\n     Only used when bCanBeMarked == true.",
    "FortPlayerPawnAthena:MarkerPositionOffset": "Normally markers appear at the actors location unless otherwise offset.\n     Only used when bCanBeMarked == true.",
    "MidMatchRiftPoiManagerActor:MarkerPositionOffset": "Normally markers appear at the actors location unless otherwise offset.\n     Only used when bCanBeMarked == true.",
    "MidmatchRiftPoiSpawnIndicator:MarkerPositionOffset": "Normally markers appear at the actors location unless otherwise offset.\n     Only used when bCanBeMarked == true.",
    "SpookyEventEmotePad:MarkerPositionOffset": "Normally markers appear at the actors location unless otherwise offset.\n     Only used when bCanBeMarked == true.",
    "AircraftFlightConstructionInfo:bDropOnlyWithinSafeZone": "Normally, dropping is allowed over a drop zone that doesn't reside entirely within a safe zone. Enable this to force only dropping within a safe zone",
    "FortAnimWorldStriderComponent:StartEarlyOutThresold": "NorthAnim: OstrichVehicle_Jog_N_Start\nSouthAnimLeft: OstrichVehicle_Jog_S_Start_Left\nSouthAnimRight: OstrichVehicle_Jog_S_Start_Right\nEastAnim: OstrichVehicle_Jog_E_Start\nWestAnim: OstrichVehicle_Jog_W_Start",
    "EQualitativePerfMetric.BootTime": "Not Implemented",
    "EQualitativePerfMetric.FrameTime": "Not Implemented",
    "EQualitativePerfMetric.MapLoadTime": "Not Implemented",
    "EQualitativePerfMetric.MemoryRisk": "Not Implemented",
    "EFortWorldMarkerType.None": "Not a real marker type, I just use it to detect uninitialized markers, and errors in setup.",
    "EOrbSpawnerConfigCategory.None": "Not a valid config category.",
    "EFortCollectedState.Unknown": "Not collected and not known to player",
    "EFortCollectedState.New": "Not collected but known to player, state not yet seen by player",
    "EFortCollectedState.Known": "Not collected but known to player, state seen by player",
    "FortAthenaMutator_Barrier:ObjectiveDestructionTimer": "Not currently used",
    "EFortMissionType.Max_None": "Not defined yet or used for array length counts",
    "EMissionGenerationCategory.Max_None": "Not defined yet or used for array length counts",
    "EAthenaSeasonMapIconState.Unknown": "Not discovered by the player",
    "ModulatorPortSaveData:ConnectionGuid": "Not editable, These have EditInstanceOnly to work with LiveEdit in UEFN",
    "ManagedGameplayTagDataTableItem:RootTag": "Not edited by user, this is setup via UGameplayTagTableManager::UpdateManagedTablesList",
    "StatPageData:CurrentRank": "Not filled for career page entry",
    "EMutatorMovementMode.None": "Not in a mutator movement mode",
    "EFortPartyMemberInGameMode.None": "Not in a specific mode",
    "EFortSessionHelperJoinState.NotJoining": "Not in any attempt (not started)",
    "EMatchmakingState.NotMatchmaking": "Not in any matchmaking (begin/end state machine)",
    "ENaturalSlideState.Entering": "Not in power slide",
    "EPowerSlideState.Entering": "Not in power slide",
    "ServerRollQuestTableRow:QuestPAID": "Not intended for modifying in editor. Will mirror what is set in Quest (via OnDataTableChanged). QuestPAID allows bulk editing in csv format for later reimport",
    "FortReplaySpectatorAthena": "Not much here right now, but we'll probably want Athena-specific replay functionality and this lets us easily determine which game mode we're in\nto show custom UI etc. in Athena replays",
    "ECatalogSaleType.NotOnSale": "Not on sale",
    "ESpecialEventRewindComponentState.Stop": "Not performing any functionality",
    "CatalogOffer:Requirements": "Not purchasable unless the user has met all requirements in this list (enforced ONLY BY UI for real money purchases, since they are outside our control on some platforms)",
    "CatalogOfferDefinition:OfferRequirements": "Not purchasable unless the user has met all requirements in this list (enforced ONLY BY UI for real money purchases, since they are outside our control on some platforms)",
    "EPersistenceFrameworkState.NotReady": "Not setup done",
    "FortMissionStormShield:ShieldRing": "Not the root because we scale this often and don't want to scale the entire Actor with it.",
    "FortControllerComponent_SharedQuests:bUseSquadForPartyAssist": "Not to be confused with DebugSquadMembersSharedQuests (this isn't a debug variable).\nOnly affects quests with PartyAssist tag",
    "FortControllerComponent_SharedQuests:bBlockPartyAssist": "Not to be confused with shared quests. Only prevents assisted progress on quests with PartyAssist tag",
    "EUIExtensionSlot.Invalid": "Not used",
    "FortNevadaVehicle:bBeamButtonReleased": "Not used on the AI",
    "EMatchConditionMutatorTeamStatus.None": "Not yet designated as winner or loser in the current segment of the match",
    "FortTheaterColorInfo:bUseDifficultyToDetermineColor": "Note",
    "AthenaLoadoutEntry:DesiredSlot": "Note that -3 refers to AFortQuickBars::FIRST_EMPTY_SLOT in code.",
    "PlayerLoudoutEntry:DesiredSlot": "Note that -3 refers to AFortQuickBars::FIRST_EMPTY_SLOT in code.",
    "EFortUIState": "Note that order and placement matters in this enum, there's a fixed sized array UFortUIDataConfiguration::StateWidgetClasses keyed off of it",
    "AthenaAISettings:DeAggroRange": "Note that this needs to be coordinated with MaxHearingRange to avoid\n    AI looking dumb if aggroed one tick due to sound and deaggroing the next\n    due to distance",
    "EFortPlayerWorkOverFramesMode": "Note these are listed in the order they should occur in general",
    "EFortPlayerWorkOverFramesStage": "Note these are listed in the order they should occur in general",
    "EFortPlayerPartState": "Note these are listed in the order they should occur in general\nThere is some verification for this in this file's cpp and it might need to be updated if a change is made after\nInitializationComplete.",
    "EAthenaCustomizationCategory": "Note: Be wary of the order here and make sure to update the ENUM_RANGE_BY_FIRST_AND_LAST if required",
    "EValkyrieAssetTypeRule": "Note: Modified mapping to EAssetClassAction in IAssetTools, code will break if ordering is not maintained\n      Duplicated here instead of using original struct to simplify enum name in config file\n      Add any new entries beyond EAssetClassAction to the end",
    "EncounterGetKillCountStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EncounterGetRemainingCountStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EncounterGetVariableActorClassStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EncounterGetVariableBoolStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EncounterGetVariableFloatStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EncounterGetVariableGameplayTagStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EncounterGetVariableIntStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EncounterGetVariableItemDefinitionStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EncounterGetVariableLWMEncounterStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EncounterGetVariableTagQueryStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EncounterGetVariantTagQueryStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EncounterSelectLWMEncounterStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EncounterVerbTransitionStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "EndAllMobEncountersStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "PauseMobEncounterStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "ResumeMobEncounterStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "StartMobEncounterStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "StopMobEncounterStateTreeTask": "Note: as most of the tasks, this will keep running forever until a transition happens.",
    "FortWeaponRanged:bActivateRangeAbilityPerBurstShot": "Note: for typical fast burst weapons, this should probably be left false for performance, false only activates the ranged ability once per burst.\nBut for slow bursting weapons, setting this to true will activate the ranged weapon ability per shot.\nMuzzle FX (PlayWeaponFireFX) is played from ranged ability activation gameplaycue (AFortWeapon::GameplayCue_Weapons_Activation). This allows for a muzzle effect per burst shot",
    "BuildingFillFloor:bIsMoving": "Note: keep this a bool (not a bitfield), or OnRep breaks.",
    "GameplayStatMetadataTableRow:DeveloperComment": "Notes about this stat, if any",
    "EFortSessionHelperJoinResult.NoResult": "Nothing started, mostly an init placeholder",
    "FriendCodeIssuedNotification": "Notification for an issued code",
    "FortWeapon:OnTargetingChanged": "Notification for any system that the owning player has started/stopped targeting down sight",
    "FortWeapon:OnVisibilityChanged": "Notification for changes on weapon visibility",
    "FortWeapon:OnSecondaryAbilityToggled": "Notification for changes to the state of secondary ability toggled",
    "FortWeapon:OnLocalReloadCancelled": "Notification for the UI that a reload has started",
    "FortWeapon:OnLocalReloadStarted": "Notification for the UI that a reload has started",
    "FortWeapon:OnLocalAmmoChanged": "Notification for the UI that the ammo has changed",
    "FortWeapon:OnLocalTargetingChanged": "Notification for the UI that the owning player has started/stopped targeting down sight",
    "FortClientAnnouncement_Cinematic": "Notification for when when a cinematic is played. Allows skipping and informing server of cinematic completion",
    "FortGameFeatureResponse": "Notification or error that is generated from a game error like failure to download",
    "FortBanHammerStrike": "Notification sent when a player is kicked from a match",
    "EFortSessionHelperJoinState.WaitingOnGame": "Notified the game of the reservation result, waiting for cleanup and continue",
    "EWebCameraMessageType.SC_Welcome": "Notifies a new connection has joined",
    "FortMinigame:PlayerAddedDelegate": "Notifies when a player has been added to the minigame",
    "FortMinigame:PlayerRemovedDelegate": "Notifies when a player has been removed from the minigame",
    "FortMinigame:OnFinishedAddingMinigamePlayerDelegate": "Notifies when a player has finished adding themselves to the minigame.",
    "FortMinigame:OnPrePlayerJoinInProgress": "Notifies when a player has started to Join In Progress to the minigame",
    "FortMinigame:PlayerPreRemovedDelegate": "Notifies when a player is about to be removed from the minigame",
    "FortMinigame:PlayerLastChanceToSave": "Notifies when a player's persistent inventory is about to be released / checked in",
    "FortMinigame:MinigameClassConfigUpdated": "Notifies when the class configuration has changed on the server or has been replicated to the client",
    "FortMinigame:MinigameTeamConfigUpdated": "Notifies when the team configuration has changed on the server or has been replicated to the client",
    "FortAthenaLivingWorldVolume:OnActorSpawnedResult": "Notify listeners if a spawn request succeeded or failed",
    "FortAthenaPatrolPathPointProvider:OnActorSpawnedResult": "Notify listeners if a spawn request succeeded or failed",
    "FortAthenaPointAroundPlayerProvider:OnActorSpawnedResult": "Notify listeners if a spawn request succeeded or failed",
    "FortAthenaLivingWorldStaticPointProvider:OnActorSpawned": "Notify listeners of a Spawn on this point.",
    "FortAthenaMutator_CreativeTutorial:ServerShutdownInitiated": "Notify that the server has starte its graceful shutdown",
    "FortGameplayCueNotify_Looping": "Notify to be used when you want to do a one shot effect and sound to handle a gameplay cue",
    "EFortItemType.Npc": "Npcs",
    "EFortCustomTickComponentCondition.CameraDistance": "NumFramesToSkipBetweenCustomTicks is scaled between Min/MaxFramesToSkipBetweenCustomTicks across Inner/OuterDistance\nto the nearest camera location of locally controlled players (or ALL players on authority)",
    "EFortCustomTickComponentCondition.LocalPlayerDistance": "NumFramesToSkipBetweenCustomTicks is scaled between Min/MaxFramesToSkipBetweenCustomTicks across Inner/OuterDistance\nto the nearest location of locally controlled players (or ALL players on authority)",
    "McpAddItemRequest:Quantity": "Number in the stack",
    "CrucibleSegmentData:NumAI": "Number of AI available for the player to eliminate in this segment",
    "CrucibleSegmentResults:NumAIElims": "Number of AI the player successfully eliminated this segment",
    "FortGameFeatureStatusBase:BundlesToInstall": "Number of Bundles installing",
    "SupplyDropZoneBasedSpawnData:NumDropsRemainingInWave": "Number of Drops remaining to be spawned for this wave",
    "FortEncounterSettingsFixedPace:RiftSpawnCount": "Number of Rift to use",
    "FortAIPawn:NumRunVariations": "Number of Run variations available to choose from.",
    "CrucibleSegmentData:NumTargets": "Number of Targets available for the player to eliminate in this segment",
    "CrucibleSegmentResults:NumTargetElims": "Number of Targets the player successfully eliminated this segment",
    "FortAthenaMutator_Payback:ExtraPointsPerPaybackKill": "Number of additional points to award per payback kill",
    "MatchmakingParams:NumAttempts": "Number of attempts to make before giving up, -1 for infinite",
    "FortDeployableBaseManager:NumExpectedPlots": "Number of base plots expected/required by the game",
    "MoggMusicInfo:TimeSignatureNumerator": "Number of beats in a bar",
    "FortClientEventsState:MatchXpBonusPoints": "Number of bonus percentage points to apply to gained match XP",
    "AthenaRewardResult:BookLevelsGained": "Number of book levels gained",
    "TotalPlayers:Bots": "Number of bot players",
    "PlayersLeft:Bots": "Number of bot players left",
    "AthenaDeveloperSettings:NumberOfBotsToSpawn": "Number of bots to spawn",
    "FortRangedWeaponStats:BulletsPerCartridge": "Number of bullets/traces to use when firing a cartridge",
    "FortBaseWeaponStats:CartridgePerFire": "Number of cartridges each \"fire\"",
    "FortBaseWeaponStats:InitialClips": "Number of clips to start with when weapon is first picked up",
    "FortCreativeItemListData:Count": "Number of copies of the entry in the table",
    "BattlePassOfferData:DaysAfterSeasonStartUnlockTime": "Number of days after season start after which offer becomes claimable",
    "ThreatCloud:MiniMapFarOffIconDegreesOfArc": "Number of degrees of arc at which icons will try to be spaced.  NOTE: In the worst case, icons may nearly completely overlap, but that would only happen when needing to show an arc fractionally larger than one icon arc size.",
    "EFortLeaderboardMetric.Kills": "Number of eliminations.",
    "FortDeployableBaseManager:NumEnvPiecesRestoredPerUpdate": "Number of environment actors to restore per restoration update",
    "CreativeDeviceCached:NumBoundEvents": "Number of events from FBasicDeviceTrackingInfo",
    "CreativeDeviceInfo:NumBoundEvents": "Number of events from FBasicDeviceTrackingInfo",
    "FortAthenaMutator_Heist:NumDepartedExitCrafts": "Number of exit crafts that have departed",
    "FortAthenaMutator_Heist:NumPlayersAliveOnDeparture": "Number of exit crafts that have departed",
    "FrameTimeSnapshot:NumFrames": "Number of frames included in this snapshot.",
    "HmxSettings:preBufferFramesOnAsyncLoad": "Number of frames to decompress immediately before asynchronously decompressing the rest.",
    "CreativeDeviceCached:NumBoundFunctions": "Number of functions from FBasicDeviceTrackingInfo",
    "CreativeDeviceInfo:NumBoundFunctions": "Number of functions from FBasicDeviceTrackingInfo",
    "FortControllerAIBotComponentTelemetryData_Damage:NumberOfHitsIdleDetection": "Number of hits per idle detection buckets",
    "TotalPlayers:Humans": "Number of human players",
    "PlayersLeft:Humans": "Number of human players left",
    "CraftingIngredientQueryState:Missing": "Number of ingredient missing that match the requirements.",
    "CraftingIngredientQueryState:Owned": "Number of ingredient the player owns that match the requirements.",
    "FortItemInstanceQuantityPair:Quantity": "Number of items in the stack",
    "EFortItemEntryState.NewItemCount": "Number of items in this stack that are new, to be displayed in the UI",
    "CraftingIngredientRequirement:Count": "Number of items that must match the tag requirements",
    "FortKeepItemGroup:Items": "Number of items to choose from",
    "FortKeepResourceGroup:ItemCount": "Number of items to drop",
    "GrantItemMultiData:NumberOfItemsToGrant": "Number of items to grant",
    "FortAthenaMutator_Heist:JewelsLostToStorm": "Number of jewels lost to the storm",
    "FortAthenaMutator_SpyRumble:NumKillsForPerkUnlock": "Number of kills required by a team to unlock a perk",
    "FortAthenaMutator_TDM:NumKillsForVictory": "Number of kills required by a time to win the game",
    "FortPresenceGameplayStats:NumKills": "Number of kills they currently have (if applicable)",
    "FortEmporiumItemData:MaterialCount": "Number of materials in item",
    "VkTeamDoc:MemberCount": "Number of members in team",
    "SubmixEffectDynamicQuadDelaySettings:InterpolationTime": "Number of milliseconds over which a tap will reach it's set length and gain. Smaller values are more responsive, while larger values will make pitching less dramatic.",
    "CrucibleSegmentResults:CalculatedMissedTargets": "Number of missed targets during this segment, used for penalty scoring, calculated at finish of segment",
    "FortAxisSmoothing:TotalSampleTime": "Number of mouse samples since axis movement has been zero",
    "ENavOptionFallbackDir.Num": "Number of navigation types",
    "BattlePassOfferData:CategoryOffersNeededForUnlock": "Number of offers in the same offer category that need to be purchased in order to unlock this offer",
    "BattlePassOfferData:SectionOffersNeededForUnlock": "Number of offers in the same offer section that need to be purchased in order to unlock this offer",
    "FortKeepAmmoStash:Max1": "Number of pickups this can spawn in 1 player game",
    "FortKeepAmmoStash:Max2": "Number of pickups this can spawn in 2 player game",
    "FortKeepAmmoStash:Max3": "Number of pickups this can spawn in 3 player game",
    "FortKeepAmmoStash:Max4": "Number of pickups this can spawn in 4 player game",
    "FortGameStateZone:TotalPlayerStructures": "Number of player structures already built",
    "FrameTimeSnapshot:PlayersLeft": "Number of players alive in the match at the end of this snapshot.",
    "MatchmakingParams:PartySize": "Number of players in the party",
    "LiquidRibbonManager:PointsPerSegment": "Number of points generated per spline segment. Only EVEN number of points per segment is supported for ease of detachment and collision",
    "FortLootTierData:StreakBreakerPointsSpend": "Number of points required to automatically select this tier row, weighted against other rows with a point spend",
    "LootTierDataRow:StreakBreakerPointsSpend": "Number of points required to automatically select this tier row, weighted against other rows with a point spend",
    "FortEmporiumItemData:PolygonCount": "Number of polygons in item",
    "LevelInstanceListElement:NumPortals": "Number of portals in the level.",
    "WorkerSetBonusData:PowerPoints": "Number of power points this set bonus is worth",
    "FortMinigame:NumMinigameComponentsServer": "Number of required actors in the volume",
    "FortAthenaMutator_Ashton:NumVillainRespawnsRemaining": "Number of respawns remaining for villains",
    "FortAthenaMutator_Ashton:NumVillainRespawns": "Number of respawns the villains have",
    "FortGameModeAthena:MaxAdditionalRevivesToScore": "Number of revives after the first that will count for scoring; must be kept in sync with MCP Java code!",
    "AthenaSeasonPageGrid:RewardsNeededForUnlock": "Number of rewards throughout the battle pass that need to be purchased to unlock this page (this is an OR with LevelsNeededForUnlock)",
    "FortPlayerController:BuildPreviewRotationIterations": "Number of rotation iterations applied to the build preview marker",
    "EditModeState:RotationIterations": "Number of rotation iterations away from the starting rotation",
    "FortAthenaMutator_Heist:SafesLostToStorm": "Number of safes lost to the storm",
    "FabricStepSequencerComponent:RandomizationCommonSampleSize": "Number of samples to choose when randomizing the set of common pitches",
    "FortMatchmakingConfig:MaxProcessedSearchResults": "Number of search results to actually work through before moving on in the search flow",
    "FortMatchmakingConfig:MaxSearchResultsOverride": "Number of search results to retrieve from the backend.  The larger the number the larger the random pool the results are pulled from",
    "AthenaRewardResult:LevelsGained": "Number of season account levels gained",
    "AthenaSeasonPageGrid:LevelsNeededForUnlock": "Number of season levels needed to unlock this page (this is an OR with RewardsNeededForUnlock unless it's -1)",
    "BattlePassOfferSectionData:NumLevelsNeededForSectionUnlock": "Number of season levels needed to unlock this section of battle pass offers (this is an OR with NumCategoryRewardsNeededForSectionUnlock)",
    "LevelSaveBaseComponent:TimeBetweenSaves": "Number of seconds between an async save to disk",
    "StormShieldRadiusGrowthData:GrowthRate": "Number of seconds for the shield to grow or shrink when radius has changed\n      Is used in division so it must NEVER be zero",
    "StormShieldMoveData:MoveRate": "Number of seconds for the shield to move to over time when TargetLocation has changed",
    "ServerExpirationAlertData:SecondsRemainingStart": "Number of seconds remaining to broadcast this event",
    "ServerMigrationAlertData:SecondsRemainingStart": "Number of seconds remaining to broadcast this event",
    "ServerMigrationAlertData:SecondsRemainingEnd": "Number of seconds remaining to stop this event",
    "PartyMemberLobbyState:HiddenMatchmakingDelayMax": "Number of seconds the user wants to delay matchmaking for streamer features",
    "ServerExpirationAlertData:SecondsVisible": "Number of seconds to display this event",
    "DynamicXpProfileStats:Timespan": "Number of seconds tracking TimespanXp. MCP is only updated if Timespan is >= 0.",
    "RemoteViewRotSnapshotManager:BufferSize": "Number of snapshots stored.",
    "FortAthenaMutator_Heist:NumSpawnedExitCrafts": "Number of spawned exit crafts (includes spawners)",
    "FortSpawnActorData:NumSpawnsRemaining": "Number of spawns still remaining",
    "FortAthenaMutator_Omaha:SpecialTeamMembersCount": "Number of special team members that we want per team.",
    "FortAthenaAircraft:NumSpawnSlots": "Number of spots in a circle of radius SpawnOffsetRadius to cycle spawns through. If this is 1, no offsets will be used.",
    "FortLootPackageData:Count": "Number of stacks of this item to drop, for things like resources. Only useful for item data",
    "BagelScoreMultiplierSpawnData:SpawnCount": "Number of sub objective actors to spawn (per-index)",
    "MashScoreMultiplierSpawnData:SpawnCount": "Number of sub objective actors to spawn (per-index)",
    "FortEmporiumItemData:ChildAssetCount": "Number of sub-assets contained in item",
    "FortGameState:TeamCount": "Number of teams in the game",
    "FortGamePvPBase:NumTeams": "Number of teams to spawn for this game",
    "BuildingGameplayActorSpawnData:NumSpawnedBGAs": "Number of the BGAs that have been spawned in the current phase",
    "BuildingGameplayActorSpawnData:NumBGAsToSpawn": "Number of the BGAs that will be spawned in the current phase",
    "BuildingSMActorClassData:NumFrameSubObjects": "Number of the animated material sub-objects that make up the base \"frame\" of the actor",
    "DynamicXpPlayerSessionTransient:NumTimesBoosted": "Number of time spans player had his XP boosted",
    "DagwoodRuntimeModifiers:TireModVersion": "Number of times a tire mod has been applied, used to only apply FX once per encountered tiremod",
    "DynamicXpPlayerSessionTransient:NumTimesAfkMax": "Number of times it was determined this player went AFK and stayed away to get max penalty.",
    "DynamicXpPlayerSessionTransient:NumTimesAfk": "Number of times it was determined this player went AFK.",
    "FortWorldProfileUpdateRequest:NumberOfRequests": "Number of times it's been tried so far",
    "GameDifficultyInfo:NumDifficultyIncreases": "Number of times that difficulty can be increased for extra rewards.",
    "FortCloudSaveInfo:SaveCount": "Number of times the cloud save for this item has been saved total",
    "FortFallTeleportComponentBase:TeleportCount": "Number of times the pawn has been teleported consecutively (without hitting the ground)",
    "FortAFKComponent:NumTimesPlayerWentAFK": "Number of times the player has gone AFK since the gameplay state started",
    "AthenaScoreData:NumOccurrencesForScore": "Number of times the scoring event must occur to attain the score rewarded for it",
    "DynamicXpSessionAccoladeStats:Triggers": "Number of times this XP Event was triggered for player while on Team/Class.",
    "DynamicXpAggregatedAccoladeStats:TriggersPerMinute": "Number of times this accolade triggers per minute",
    "AthenaScoreData:NumOccurrencesPermitted": "Number of times this event can grant a score (-1 = infinite)",
    "LevelInstanceListElement:NumRefs": "Number of times this level is referenced in the volume.",
    "HUDWidgetRegistryEntry:MaximumAmountOfInstances": "Number of times we can have the same widget on screen.\n-1 means no limit.",
    "TokenType:NumberOfTokens": "Number of tokens in this pool",
    "CrucibleCourseResults:CalculatedMissedTargets": "Number of total missed targets during this course run, used for penalty scoring, calculated at finish of course run",
    "BattlePassOfferSectionData:NumCategoryRewardsNeededForSectionUnlock": "Number of total offers that need to be purchased in this category of battle pass offers in order to unlock this section of battle pass offers (this is an OR with NumLevelsNeededForSectionUnlock)",
    "MMAttemptState:NumSearchResults": "Number of total search results in the query",
    "CrucibleCourseResults:CalculatedSpawnedTargets": "Number of total spawned targets during this course run, used for penalty scoring, calculated at finish of course run",
    "ERespawnAndSpectateClientEventId.MAX": "Number of total values, not to be used",
    "FortPlayerInputSettings:NumActiveTrapSlots": "Number of trap slots to show in this configuration",
    "FortAthenaMutator_Heist:NumUnspawnedExitCrafts": "Number of unspawned exit crafts (includes spawners)",
    "FortEmporiumItemData:VertexCount": "Number of vertices in item",
    "FortPlayerInputSettings:bWeaponSlotsAreSharedWhenUsingGamepad": "Number of weapon slots to show in this configuration when a gamepad is active",
    "QuestEntryVisualData:PreallocationCount": "Number of widgets to preallocate for performance purposes",
    "McpChangeQuantityRequest:DeltaQuantity": "Number to add or remove from the stack",
    "FortRewardReport:DifficultyValue": "Numeric difficulty value",
    "ESupervisedSettingsValueType.Numeric": "Numeric not supported yet, to do when a numeric setting is needed",
    "CachedRealitySaplingData:nurturing_level": "Nurturing level of the sapling.",
    "OwnedRealitySaplingData:NurturingLevel": "Nurturing level of the sapling. This corresponds to the rarity of the fruit the sapling produces",
    "NyxGlassWeaponComponent_Swinging": "NyxGlassWeaponComponent_Swinging handles custom targeting for the NyxGlass weapon.",
    "ESettingType.SprintCancelsReload": "OBSOLETE!  @Owner Nick.Cooper",
    "DamageDoneInfo": "OLD AND DEPRICATED, WILL BE REMOVED WITH SEASON 9...",
    "CraftingObjectComponent:CraftingObjectTag": "OLD, this tag is copied into CraftingObjectTags in PostLoad to preserve old data, but is no longer edited.",
    "FortGameStateComponent_WorldReactionsManager:DebugWorldStates": "ONLY POPULATED IF ENABLE_WORLDREACTIONMANAGER_DEBUG_DRAW",
    "FortGameStateComponent_WorldReactionsManager:WorldReactionsArray": "ONLY POPULATED IF ENABLE_WORLDREACTIONMANAGER_DEBUG_DRAW",
    "FortGameStateComponent_WorldStatManager:WorldStatsArray": "ONLY POPULATED IF ENABLE_WORLDSTATMANAGER_DEBUG_DRAW",
    "EClassRepNodeMapping.Spatialize_Static": "ONLY SPATIALIZED Enums below here! See UFortReplicationGraph::IsSpatialized",
    "FortPlayerPawnAthena:bEnableGroundInteractionEffects": "OPTIM: Set if this player pawn should have ground interaction effects",
    "FortPlayerPawn:bEnableWaterInteractionEffects": "OPTIM: Set if this player pawn should have water interaction effects",
    "FortPawnComponent_CustomDepth:bEnableRenderCustomDepth": "OPTIM: Set if this player pawn should not even be checked to be rendered for custom depth",
    "EQSActorSpawnerData:SpawnActorPlacementQueryParams": "OPTIONAL Environment query parameters that can be setup for the SpawnActorPlacementQuery.",
    "EQSActorSpawnerData:BasePlacementQuery": "OPTIONAL Environmental query run at the game start to produce result locations that can be\n     accessed during the SpawnActorPlacementQuery EQS when if SpawnActorPlacementQuery uses the UFortQueryGenerator_MutatorBaseQueryResults generator.\n     This allows spawn locations to be prerolled so they do NOT have to be calculated during gameplay.",
    "FortAthenaMutator_EQSActorSpawner:MutatorBasePlacementQuery": "OPTIONAL Environmental query run at the game start to produce result locations that can be\n     accessed during the all EQSActorSpawners' SpawnActorPlacementQuery EQS if that SpawnActorPlacementQuery uses the UFortQueryGenerator_MutatorBaseQueryResults generator.\n     This allows spawn locations to be prerolled so they do NOT have to be calculated during gameplay.",
    "EQSActorSpawnerData:SpawnedActorRemovalQuery": "OPTIONAL Environmental query used to decide which spawned actors to remove.\n     This Query should use a UFortQueryGenerator_MutatorBaseActorQueryResults generator to get the list of spawned actors.",
    "FabricChildActorComponent:CableManagerClassForModulatorPorts": "OPTIONAL: If a device doesn't have any ports, the created modulator ports won't be able to find the Cable Manager. We can manually specify it here for those cases (GlobalMusicController)\nSee UFMDeviceCableModulatorPortComponent::BeginPlay",
    "FortPhysicsObjectComponent:EffectsDataOverride": "Object Collision Effects data overridden from what is defined in the preset",
    "FortVehicleAudioController:VehicleSoundData": "Object Pointer to the (sound) asset data for our Vehicle",
    "BuildingSMActor:bCameraOnlyCollision": "Object collides only with the camera",
    "EHeldObjectState.Unheld": "Object has no current relation to any pawn. It is just existing in the world, a subject to physics.",
    "EHeldObjectState.Held": "Object is held by a pawn",
    "EHeldObjectState.HeldInVehicle": "Object is held by a pawn that is in a vehicle",
    "DaySequenceBindingReference:ObjectPath": "Object path relative to a passed in context object, this is used if ExternalObjectPath is invalid",
    "ActorTemplateRecord:ActorDataReferenceTable": "Object references serialized in ActorData externalized into an array property to properly support reference collection and replacement",
    "ActorComponentRecord:ComponentDataReferenceTable": "Object references serialized in ComponentData externalized into an array property to properly support reference collection and replacement",
    "TransientOverride:ObjectName": "Object scope the Transient Override should be applied to. Generally assumed to be a sub-object, but will apply to the top-level object of the save context if None",
    "BuildingActor:bForceBlockBuildings": "Object should ALWAYS block interactive building, even if the game has bAllowBuildingThroughBlockingObjects enabled",
    "BuildingSMActor:bNoCameraCollision": "Object should be ignored for camera collision",
    "BuildingSMActor:bNoPawnCollision": "Object should be ignored for player. Please consider checking NoAIPawnCollision as well as having AI collision but not Pawn collision will cause the object to not modify the navmesh, but still block the AI.",
    "BuildingSMActor:bNoProjectileCollision": "Object should be ignored for projectile collision",
    "BuildingSMActor:bNoRangedWeaponCollision": "Object should be ignored for ranged weapon collision",
    "BuildingSMActor:bNoVisibilityCollision": "Object should be ignored for visibility collision.",
    "BuildingSMActor:bNoWeaponCollision": "Object should be ignored for weapon collision",
    "BuildingSMActorClassData:bBlocksCeilingPlacement": "Object should block ceiling-placement of other buildings above it",
    "BuildingSMActor:bNoCollision": "Object should have no collision",
    "BuildingSMActor:bDoNotBlockInteract": "Object should not block interact traces, should allow them to pass through",
    "BuildingActor:bDoNotBlockBuildings": "Object should not block other buildings from being placed",
    "DynamicXpAggregatedAccoladeStats": "Object that describes XP stats for a creative accolade.  This will be reported to Analytics that can then aggregate the data\nto allow Dynamic XP to be eventually granted.",
    "DynamicXpAggregatedStats": "Object that describes aggregated XP stats for a creative island",
    "FortGameStateAthena:SpecialActorData": "Object that manages special actors that clients need to know data for that might not always be relevant",
    "BuildingWeakSpotData:ParentObject": "Object weak spot is attached to",
    "FortAthenaMutator_Barrier:GameMsg_ObjectiveDamageState_Friendly": "Objective Damage State messages. These go off at the corresponding health percentage",
    "ObjectiveExtensionMapMarkers:QuestObjectiveLocationTags": "Objective Specific Map Markers (Only show up if the objective is active). This must have at least 1 tag, otherwise a validation error is thrown",
    "FortTransientQuestGrant:Objectives": "Objective completion data used to advance this quest after its created",
    "FortAthenaMutator_Barrier:ObjectiveFlag": "Objective flag class. The flag should spawn the objective",
    "FortMcpQuestObjectiveInfo:HudIcon": "Objective icon used in the HUD",
    "TrackedObjective:ObjectiveType": "ObjectiveType used to define what badge to use on HUD and what to do when states change",
    "FortMcpQuestObjectiveInfo:ObjectiveFilters": "Objectives are essentially just a name and a count.  Determining when to increment an objectives progress is\nwhere these come in to play.  You define the rules for when to increment this objective here.  Any sensor\nwill make progress on this objective, they don't all have to agree or anything like that.",
    "QuestItemDefinitionDesignerData:Objectives": "Objectives required to complete the quest",
    "EStimType.Obstacle": "Obstacle that is blocking us or ahead of us",
    "NavDataSetVariantSettings:OceanFloodLevel": "Ocean flood level. Will be multiplied by the height of a building grid cell and passed to the water system.",
    "OctopusInPersistent:FortOctopusVehicleConfigs": "Octopus vehicle configs",
    "AITrackedObjectsSet": "Octree end",
    "FortAIPawnLootDropData:LootDropChance": "Odds loot will drop, 0-1.",
    "DigestedRangedWeaponSkill:InterruptReloadToShootOdds": "Odds that the bot will attempt to interrupt reloading a weapon when trying to shoot. If negative value, will use the general default value from the ranged attack skillset (0 = never, 1 = always)",
    "RangedWeaponSkill:InterruptReloadToShootOdds": "Odds that the bot will attempt to interrupt reloading a weapon when trying to shoot. If negative value, will use the general default value from the ranged attack skillset (0 = never, 1 = always)",
    "BattlePassLevelReward:OfferId": "Offer ID if this reward is part of the battle pass offer list",
    "EpicOfferGrantInfo:OfferNamespace": "Offer Namespace Override (or blank for application default)",
    "EpicOfferGrantInfo:OfferId": "Offer id for this grant (or blank if no epic grant)",
    "SpecialEventScriptMeshActor:CalenderEventOffsetInSeconds": "Offset added to the end of the calendar event. Can be negative.",
    "FortSnapOnSurfaceComponent:LocalOffset": "Offset applied in local space after the snap.",
    "FortSnapOnSurfaceComponent:WorldOffset": "Offset applied in world space after the snap.",
    "FortAthenaMutator_Uranium:RespawnLocationOffset_PusherTeam": "Offset away from the other team's spawn that is added to the relevant checkpoint location (last reached checkpoint for pushers) when determining respawn location for the PUSHER team\nThis is used BEFORE the respawn locations start moving",
    "FortAthenaMutator_Uranium:RespawnLocationOffset_DefenderTeam": "Offset away from the other team's spawn that is added to the relevant checkpoint location (next checkpoint for defenders) when determining respawn location for the DEFENDER team\nThis is used BEFORE the respawn locations start moving",
    "FortNPCConversationParticipantComponent:ConversationInteractionBoxOffset": "Offset for the ConversationInteractionBox",
    "FortPawnComponent_PassiveHealer:PassiveHealerInteractionBoxOffset": "Offset for the ConversationInteractionBox",
    "BuildingActor:CentroidOffset": "Offset from actor's position to the logical center of the object",
    "BuildingActor:SnapOffset": "Offset from actor's position to the position used to determine which grid square it belongs to",
    "FortWeapon:TargetSourceOffset": "Offset from pawn's location to use for target source",
    "FortWeapon:TargetSourceOffsetWhileCrouched": "Offset from pawn's location to use for target source while player is crouched",
    "FortWeapon:TargetSourceOffsetWhileTargeting": "Offset from pawn's location to use for target source while player is targeting",
    "FortAthenaGoatVehicle:BounceOffsetBL": "Offset from the center of the vehicle where the back left bounce force should applied",
    "GoaFInPersistent:BounceOffsetBL": "Offset from the center of the vehicle where the back left bounce force should applied",
    "FortAthenaGoatVehicle:BounceOffsetBR": "Offset from the center of the vehicle where the back right bounce force should applied",
    "GoaFInPersistent:BounceOffsetBR": "Offset from the center of the vehicle where the back right bounce force should applied",
    "FortAthenaGoatVehicle:BounceOffsetFR": "Offset from the center of the vehicle where the front right bounce force should applied",
    "GoaFInPersistent:BounceOffsetFR": "Offset from the center of the vehicle where the front right bounce force should applied",
    "BuildingActor:BaseLocToPivotOffset": "Offset from the grid location center to the pivot location of the actor",
    "FortIntensityCurve:EndIntensityOffsetFloor": "Offset from the intensity curve used to clamp the lower limit of spawn points. Lerps between the start and end values over the max ramp time.\nShould be in the 0 to -1 range to be valid. Positive values will leave the spawn points unbounded",
    "FortIntensityCurve:StartIntensityOffsetFloor": "Offset from the intensity curve used to clamp the lower limit of spawn points. Lerps between the start and end values over the max ramp time.\nShould be in the 0 to -1 range to be valid. Positive values will leave the spawn points unbounded",
    "FortIntensityCurve:EndIntensityOffsetCeiling": "Offset from the intensity curve used to clamp the upper limit of spawn points. Lerps between the start and end values over the max ramp time.\nShould be in the 0 to 1 range to be valid. Negative values will leave the spawn points unbounded",
    "FortIntensityCurve:StartIntensityOffsetCeiling": "Offset from the intensity curve used to clamp the upper limit of spawn points. Lerps between the start and end values over the max ramp time.\nShould be in the 0 to 1 range to be valid. Negative values will leave the spawn points unbounded",
    "IceGroundPath:SplineOffset": "Offset from the mesh to place the ridden spline (for zipline behavior)",
    "FortNavPathRendererComponent:PathVFXOffset": "Offset from the navpoint to attach the VFX",
    "FortPawn:SpottedIconOffset": "Offset from the pawn's collision cylinder to display spotted visuals",
    "BuildingTrap:TrapPlacementOffset": "Offset from the trap location to the center of the actual trap mesh. Intended for traps that aren't placed on the center of a tile, such as player jump pads",
    "FortMapIconDefinition:LocationOffset": "Offset in local-space from the associated actor where this icon should display.",
    "FortAthenaAIBotBuildDescriptor:Location": "Offset in the target direction to apply to the build.",
    "FortMiniMapData:LocationOffset": "Offset in world-space from the associated actor where this icon should display.",
    "BuildingWall:DoorLinkOffset": "Offset of door link to be added to regular door offset for adjustment",
    "BuildingWall:DoorOffset": "Offset of door within tile",
    "AircraftFlightConstructionInfo:PathOffsetFromMapCenterMax": "Offset of midpoint selection circle from the map center. Randomly chosen between min and max.",
    "AircraftFlightConstructionInfo:PathOffsetFromMapCenterMin": "Offset of midpoint selection circle from the map center. Randomly chosen between min and max.",
    "BuildingWall:SlidingDoorOffset": "Offset of the sliding / extra door. This Offset will be ADDED to the Original Door Offset",
    "FortWeapon:PoseOffsetAnimSequence": "Offset pose for consumables",
    "FortPoiSwapManager:PoiPlotLocationOffset": "Offset to add to the location of where the plot loads from the ground at the POI.\nThe ground of some plots are much higher than their origin, so this can be used to make sure the\nloaded island's ground matches the height of the terrain it is loaded over.",
    "EventModeFocusActor:Offset": "Offset to add when focusing this actor",
    "SmartBuildingActor:BuildDistanceOffset": "Offset to adjust ideal build distance from player",
    "FortDecoPreview:FreePlacementOffset": "Offset to apply to placement location while in free-placement in the direction of the normal",
    "ShielderCollisionHelperComponent:AimOffset2D": "Offset to apply to the collision location using the 2d aim rotation of the player.",
    "ShielderCollisionHelperComponent:AimOffset": "Offset to apply to the collision location using the aim rotation of the player.",
    "FortMarkActor:AttachmentOffset": "Offset to attach at",
    "FortTamedNpcWidgetComponent:VerticalOffsetToHealthBar": "Offset to display indicator widget relative to the health bar widget component, if exists",
    "ProjectileHomingData:TargetOffset": "Offset to home towards during lock on. If the target is a FortPawn, the offset is relative. If not, the offset is absolute.",
    "GliderTrailParticleDefinition:Offset": "Offset to use when attaching the Niagara system to this glider",
    "TowhookParams:TractorBeamHeightModifierStartPositionExtraDistance": "Offset under the parent actor under which we start applying the HeightScalingForce",
    "IndicatedActorData:IndicatorDBNOOffset": "Offset value for the indicator used when players are DBNO",
    "IndicatedActorData:IndicatorOffset": "Offset value for the indicator. Ignored when the actor is a player.",
    "IndicatedActorParticleSystemData:ParticleSystemDBNOOffset": "Offset value for the particle system when a player is DBNO.",
    "IndicatedActorParticleSystemData:ParticleSystemOffset": "Offset value for the particle system.",
    "BuildingGameplayActorLaserGrid:LaserConnectionOffset": "Offsets applied to Laser Connection meshes so that they render correctly.\n     Note: Scale X/Y is the thickness of the laser, Scale Z is a scalar for the length of the laser.",
    "FortAthenaMutator_Wax:SquadPlacementOffsetPct": "Offsets the squad placement icon",
    "FortMigrationDataTableRow:OldItemTemplate": "Old asset",
    "PFWExample_GameObject_PersistentInfo_Version0": "Older version of FPFWExample_GameObject_PersistentInfo. Now called version 0, which makes the current version version 1\nYou can see the difference in data between the two versions\n  // <<= ** The structs that are written and read from services HAVE to be USTRUCTS for the underlying services. They iterate the properties and write them\n// Older version",
    "PersistenceFrameworkSaveData_Quest_Version0": "Older version of backend data. Version 0. Still used during data migration.",
    "EQuestVisibilityResponse.Show": "On Quest Completed or Objective Completed hide the child comps",
    "EQuestVisibilityResponse.Custom": "On Quest Completed or Objective Completed show the child comps",
    "EFortQuestObjectiveStatEvent.DistanceTraveled": "On an interval track the distance the player has moved over that time. Target is empty.",
    "EFortQuestObjectiveStatEvent.GlideDistance": "On an interval track, the distance the player has glided after being launched into the air. Target is the player. Source is the object that launched the player.",
    "EFortQuestObjectiveStatEvent.DistanceTraveledWhileMounted": "On an interval, track the distance the player has moved over that time if riding a tamed mount. Distance is in METERS and NOT unreal units (centimeters) as opposed to the generic DistanceTraveled. Target is the gameplay tags of the mounted creature.",
    "FortPawn:DeathStatTags": "On death will increment these stats on the killing player",
    "ValkyrieEditorConfig:bStartupWithLastProject": "On editor startup loads the last project",
    "EBTSetBlackboardBoolExitActions.Invert": "On exit, inverse the value that was set. (true becomes false, false becomes true).",
    "EBTSetBlackboardBoolExitActions.Keep": "On exit, keep the value that was set (i.e. do nothing).",
    "EBTSetBlackboardBoolExitActions.Revert": "On exit, revert to the value that it was before.",
    "FortVehiclePhysicsCollisionDamageComponent:MaxDestructionAngle": "On impact, the maximum angle we can be to damage the hit building.",
    "HitBuildingDamageOverride:DestructionAngle": "On impact, the maximum angle we can be to damage the hit building.",
    "FortVehiclePhysicsCollisionDamageComponent:MinDestructionSpeedKmh": "On impact, the minimum speed we can be to damage the hit building.",
    "HitBuildingDamageOverride:MinDestructionSpeedKmh": "On impact, the minimum speed we can be to damage the hit building.",
    "FortRangedWeaponStats:BulletsPerBulletFireFX": "On non-local clients, how often do you see the tracer, muzzle flash, and impact effect of a bullet?\nUsed for perf, almost all weapons want this to be 1",
    "SpecialEventCursorPawnComponent:NonOwningInterpSpeed": "On non-owning clients, smooth the cursor from LocalNormalizedLocation toward ReplicatedWorldLocation (converted to screen space)",
    "TurretCosmeticData:OnOverheatAudio": "On overheat audio component",
    "FortGameStateAthena:EliminationScaleInCurve": "On show scale curve for the elimination indicators (For World Map, Minimap & Compass only)",
    "FortGameStateAthena:EliminationScaleOutCurve": "On show scale curve for the elimination indicators (For World Map, Minimap & Compass only)",
    "FortPlayerControllerAthena:bClientNotifiedOfTeamWin": "On the client marks that this player controller client has been notified that their team won the game.",
    "FortPlayerControllerAthena:bClientNotifiedOfLoss": "On the client marks that this player controller client has been notified that they lost the game.",
    "FortPlayerControllerAthena:bClientNotifiedOfWin": "On the client marks that this player controller client has been notified that they won the game.",
    "FortCreativeMoveTool:AlreadyProcessedNewlyPlacedActorsOnClient": "On the client, a set of actors that we've already fired 'OnObjectPlacement' callbacks for, to\n          avoid doing it twice.  This list is pruned whenever NewlyPlacedActors is replicated.",
    "FortSnapOnSurfaceComponent:TraceChannel": "On what channel should the trace snap be conducted.",
    "BuildingContainer:bSpawnedActor": "OnConstruction will set this to true (as long as it isn't placed in editor) when it spawns",
    "EAthenaAIServicePOIList.OnGround": "OnGroundTagQueryPOIList",
    "EFortAnnouncementChannel.Max_None": "Onboarding/Tutorial announcement, runs with the tutorial widget",
    "DynamicXpCircuitBreaker:XpCutoffRewardMult": "Once a player exceeds the XPCutoffThreshold in a day, subsequent XP acquisition from accolades will be reduced.\nFinalXPReward = XPReward * XPCutoffRewardMult",
    "DynamicXpAfkPenalty:AfkThresholdSecs": "Once a player is AFK, how long do we continue to decrease XP until we hit AfkMinRewardMult",
    "FortMinigame:SpawnPadSelection": "Once all viable spawn pad locations are found, how should the final location be selected. This is not used in initial spawn.",
    "FortPlayerStateComponent_CustomFeedMessage:CustomFeedMessageGeneratorsInternal": "Once assets have been loaded, store them here for the duration mapped by absolute tag e.g. \"CustomFeedMessage.NPCServices.TipBusDriverLarge\"",
    "EFrontEndCamera.Party": "Once everyone has picked a hero we show the party",
    "FortAthenaAIRuntimeParametersComponent:ExtractedRuntimeParameters": "Once extracted, the parameters resulting values are stored in the runtime version",
    "SoundPerceptionDigestedSetting:OverrideReactionDistanceSq": "Once received an event, check to see if the reaction distance is overridden, -1 = !overridden",
    "SoundPerceptionSetting:OverrideReactionDistance": "Once received an event, check to see if the reaction distance is overridden, -1 = !overridden",
    "SoundPerceptionDigestedSetting:IgnoreTime": "Once received an event, ignore time for subsequent same sound type (seconds)",
    "SoundPerceptionSetting:IgnoreTime": "Once received an event, ignore time for subsequent same sound type (seconds)",
    "EPortalLinkCodeLockMode.AlwaysLocked": "Once set, The link code is always locked and cannot be changed",
    "EPortalLinkCodeLockMode.WindowLocked": "Once set, the link code is locked for a time window determined by Portal.WindowLockExpirationSeconds (cvar)",
    "ControlPointInstanceData:ControlPoint": "Once the control point is spawned this is a reference to it",
    "BuildingFoundation:DynamicFoundationRepData": "Once the level streams in, we can't update the position of it. We need enable state and dynamic transform to show up in the same packet.",
    "FortAthenaMapInfo:GoldenPoiPercentOfSelectedAtBusPathEnd": "Once the number of golden poi's are figured out, what percentage of them will be at the end of the bus path?",
    "DynamicXpAfkPenalty:AfkMinRewardMult": "Once the player is AFK beyond the time defined in SecondAFKThreshold, XP rewards from Accolades will be multiplied by this parameter. Expressed as a percentage.",
    "HeistExitCraftData:ExitCraftSpawner": "Once the spawner is created this is a reference to it",
    "HeistExitCraftData:SpawnedExitCraft": "Once the vehicle is spawned this is a reference to it",
    "RepeatableMusicalAssetPlayerComponentBase:mContinuationMode": "Once this starts playing, should it play repeatedly?",
    "AshtonStoneSpawnData:SpawnDelay": "Once this stone is ready to spawn, this is the delay before doing so",
    "AshtonStoneState:SpawnTime": "Once this stone is ready to spawn, this is the delay before doing so",
    "FortPlayerPawn:ParachuteDeployTraceForGroundDistance": "Once under the map's ParachuteForceDeployWorldZ, trace this far to see if we are close enough to the ground to force deployment.",
    "EAirCraftBehavior.FlyTowardFirstCircleCenter": "One aircraft is flying over the first circle center",
    "BagelLeaderboardEntry": "One entry (raw) of the Bagel Leaderboard",
    "MashLeaderboardEntry": "One entry (raw) of the Mash Leaderboard",
    "PlayerLoadout:RandomlyGrantedLoadoutItems": "One item per entry in this array is granted",
    "EMatchAbandonState.CanAbandon": "One or more team members failed to connect and so you can abandon the match.",
    "InteriorAudioPlayerInfo:Directions": "One per direction (Left/Right/Front/Back/Up)",
    "CaptureComponent:ProgressDecaySpeed": "One speed used to decay progress will decay on ECaptureState::Decapturing or ECaptureState::Deneutralizing states",
    "CaptureComponent:ProgressReverseSpeed": "One speed used to revert progress will be reverted while Decapturing or Deneutralizing",
    "FortCosmeticAdaptiveStatPair": "One stat name/value pair",
    "ETimerDeviceState.Disabled": "Ongoing timer paused and ignore all commands other than enable",
    "EEventTournamentType.Online": "Online tournament",
    "ESharedQuestScopePolicy.Party": "Only (friendly) Party members can participate.",
    "EFortAthenaPlaylist.AthenaSolo": "Only 1 allowed in party",
    "EValkyrieSubclassRule.NativeOnly": "Only C++ subclasses, eg /Script",
    "FortBroadcastRemoteClientInfo:bActive": "Only active when there is at least 1 currently watching broadcast spectator.",
    "FortPlacementActorFinderEntry:RequiredProperties": "Only actors with the supplied properties set to the specified values will be found. Not exposed to designers due to a lack of usable UI.",
    "FortObjectiveFilter_GainShields:AmountOfShieldsGained": "Only actual increase, does not include amounts gained past full shields",
    "FortAthenaMutator_PlayerMarker:MaxTeamAliveCountForMarker": "Only add the marker for one live left if there are <= MaxTeamAliveCountForMarker",
    "DigestedWeaponAccuracy:FiringRestrictedToTargetingActive": "Only allow firing when targeting is active",
    "WeaponAccuracy:FiringRestrictedToTargetingActive": "Only allow firing when targeting is active",
    "AthenaCarPlayerSlot:bCanOnlyFireWhenTargeting": "Only allow firing while targeting",
    "EValkyrieSyncProjectOptions.ForceFullValidation": "Only applicable if AllowUpload is set, will update connected clients",
    "BuildingGameplayActorSentry:TrackingYawLimit": "Only applicable if byawLimitWhileTracking is true.\n     Limits how much yaw in degrees the sentry may rotate from its starting location during tracking and aggro states.",
    "AircraftFlightConstructionInfo:bUseSameDirectionForOpposingAircraft": "Only applicable when there are 2 opposing aircraft, determines whether they should face the same direction or against each other.",
    "SpecialEventCursorPawnComponent:bUseGyroInput": "Only applies to Gamepad and Touch input types.  If true, use the device's gyro input.  Can be used in conjunction with bUseGamepadMoveInput and bUseGamepadLookInput.",
    "SpecialEventCursorPawnComponent:bUseGamepadLookInput": "Only applies to Gamepad input type.  If true, use the gamepad's look input.  Can be used in conjunction with bUseGamepadMoveInput and bUseGyroInput.",
    "SpecialEventCursorPawnComponent:bUseGamepadMoveInput": "Only applies to Gamepad input type.  If true, use the gamepad's move input.  Can be used in conjunction with bUseGamepadLookInput and bUseGyroInput.",
    "ECreativeVideoPlayerFullscreenEffects.NoCollisionOnly": "Only apply No Collision",
    "ECreativeVideoPlayerFullscreenEffects.NoDamageOnly": "Only apply No Damage",
    "FortBulkFindAndReplaceAssetFilter:Paths": "Only assets within these paths will searched (should never be empty)",
    "EFortStructuralGridQueryResults.BuildingOtherThanRequirementsDisabled": "Only building within layout requirements is allowed; all other building is disabled.",
    "FortGameplayEffectDeliveryActor:LifespanAfterKill": "Only change this if this actor needs more time to display effects than it has",
    "FortMcpQuestObjectiveInfo:bRequirePrimaryMissionCompletion": "Only commit objective progress when the primary mission objective is completed",
    "AthenaAIController:bAutomaticallyChooseClosestTargetAsGoal": "Only considered if AIGoalComponent is null. When true, the closest perceived target will be used as the AI's goal.",
    "FortTheaterDifficultyWeight:LootTierGroup": "Only exists for exporting to json, it derived from the DifficultyInfo",
    "EFortScriptedActionEnvironment.FrontEnd": "Only exists in the frontend",
    "EFortCreativeDiscoveryPlayHistoryType.Favorites": "Only favorite links are shown, interaction date.",
    "StatPageData:CarrerRankData": "Only filled for carrer page entry",
    "FortSplineGroundPath:RawPointsToLastServerIndicesPlusAlpha": "Only filled on server.  Contains an ReppedPointIdx (when cast to an int32), decimal part represents the alpha factor to the next point.",
    "FortClassTrackerComponent:bEnabled": "Only filter actors when enabled",
    "EMutualFriendsPrivacyPolicy.Friends": "Only friends can see their mutual friends with you.",
    "FortBulkFindAndReplaceAssetFilter:OnlyIncludeClasses": "Only include assets of the given classes (can be empty)",
    "EFortActorTemplateCostUpdateMethod.Double": "Only missing template cost values are added. Pre-existing values are preserved.",
    "ETypeOfBuildingActor.NonPlayerBuilt": "Only non-player built building actors (or player built that have an invalid BuildingType)",
    "EFortMissionType.Primary": "Only one Primary mission can be running at a time",
    "EMissionGenerationCategory.Primary": "Only one Primary mission can be running at a time",
    "FortItemPreviewOffPawnActor:PreviewActorComponent": "Only one of these components should be populated an visible at any one time",
    "EAthenaGamePhase.EndGame": "Only one player left.  Match is over.",
    "ETypeOfBuildingActor.PlayerBuilt": "Only player built building actors (that have a valid BuildingType)",
    "EFortCreativeDiscoveryPlayHistoryType.Queued": "Only queued links are shown, sorted by interaction date.",
    "EFortCreativeDiscoveryPlayHistoryType.RecentlyPlayed": "Only recently played links are shown, sorted by interaction date.",
    "BuildingWall:bProhibitPassOverLowEndOfTriangleWall": "Only relevant for triangle walls.  Should be true if the low end is blocked by a railing or something similar in the wall.",
    "BuildingContainer:TimeUntilLootRegenerates": "Only relevant if 'Regenerate Loot' is checked.  In that case, the number of seconds until the container becomes 'unsearched' and can be looted again.",
    "FortVisibilityComponent:bRevealWithMap": "Only relevant if VisibilityBehavior is OnceSeenAlwaysSeen; in that case, if true, it will be marked as 'seen' when the map is revealed.  Otherwise, it won't be.  (NOTE: This behavior is NOT retroactive.  Instances created after the map is fully revealed will not be marked as 'seen'.",
    "AthenaVariantFilterTabInfo:ZoomLevel": "Only relevant on leaf tabs",
    "MusicClipSyncConfig:timelineMapping": "Only relevant when set up as a Time Follower. How should this music lay itself out on its Time Authorities timeline?\"",
    "FortAthenaMutator_Bagel:OnlyRespawnAtNewPhase": "Only repawns player when reaching a new phase (instead of classic 5s respawn after death)",
    "FortAthenaMutator_Mash:OnlyRespawnAtNewPhase": "Only repawns player when reaching a new phase (instead of classic 5s respawn after death)",
    "ECosmeticsEventBindingFlags.ExecuteOnce": "Only run the delegate once. If the delegate is bound with both ExecuteImmediately and ExecuteOnce and the event\nis not blocked, then the delegate will *only* run immediately and not on subsequent broadcasts.",
    "SmartBuildingActor:SelectOnlyIfPlayerLocationInCell": "Only select this building piece if the player is in this location",
    "FortMcpQuestObjectiveInfo:ItemEvent": "Only set if using ItemReference, this is the action that will take place to the specified item",
    "EAthenaInventorySpawnOverride.AfterWarmup": "Only set inventory after the warmup phase (aircraft phase and on)",
    "EAthenaInventorySpawnOverride.AircraftPhaseOnly": "Only set inventory during the Aircraft phase",
    "EAthenaInventorySpawnOverride.IntialSpawn": "Only set inventory on initial spawn",
    "FortWeaponRanged:bHideAmmoCounterDuringTargeting": "Only shows ammo counter during hip fire.",
    "EComboSlotType.Secondary": "Only shows primary slot",
    "EComboSlotType.Combo": "Only shows secondary slot",
    "EFortGameplayCueSourceCondition.NonLocalPlayerSource": "Only spawn if this effect was NOT instigated from a locally controlled player",
    "EFortGameplayCueSourceCondition.LocalPlayerSource": "Only spawn if this effect was instigated from a locally controlled player",
    "CatalogOffer:CatalogGroup": "Only the highest priority item in a given catalog group will be shown by the UI",
    "CatalogOffer:CatalogGroupPriority": "Only the highest priority item in a given catalog group will be shown by the UI",
    "EFortFeedbackSelectionMethod.FFSM_EnemyWitness": "Only try and play the enemy witness feedback, if possible",
    "EFortFeedbackSelectionMethod.FFSM_Instigator": "Only try and play the instigator feedback, if possible",
    "EFortFeedbackSelectionMethod.FFSM_Recipient": "Only try and play the recipient feedback, if possible",
    "EFortFeedbackSelectionMethod.FFSM_TeamWitness": "Only try and play the team witness feedback, if possible",
    "EBuildingAttachmentType.ATTACH_StairsBothSides": "Only use when placing from top or underside of stairs does NOT matter (e.g. when replacing the building on place). Traps using this attachment type must have a StairTrap TID.",
    "PlayerLoudoutEntry:RandomWeight": "Only used by FRandomItemEntries",
    "EncounterEnvironmentQueryInstance:ChosenDirection": "Only used by encounter directional contexts",
    "BuildingGameplayActorSpawnData:LastSpawnSide": "Only used during the Aircraft phase, stores which side the last BGA was spawn on in big team games",
    "DateFormat.CountdownNumericDilatable": "Only used for short duration timers that are calendar independent (and thus should react to time dilation)",
    "SpecialEventCursorMode:TraceChannel": "Only used if SpecialEventCursorTrace() is not implemented or returns false.\nDefault trace is performed against this channel.",
    "SpecialEventCursorMode:SweepRadius": "Only used if SpecialEventCursorTrace() is not implemented or returns false.\nIf > 0, sweep a sphere of this size using SweepSingleByChannel().  If <= 0, use LineTraceSingleByChannel().",
    "SpecialEventCursorMode:bTraceComplex": "Only used if SpecialEventCursorTrace() not implemented or returns false.\nSpecifies whether our default trace should test against complex collision.",
    "SpecialEventCursorMode:TraceDistance": "Only used if SpecialEventCursorTrace() not implemented or returns false.\nThe length of the default trace to perform.",
    "ScriptedObjectMovement_StaticPath:CheatCalendarEventDefinition": "Only used in test builds to quickly test movement events",
    "FortTooltipMapEntry:SecondaryObjectClass": "Only used when the ObjectClass is a FortItem. Should be an item definition",
    "FortAthenaLivingWorldVolume:bWaitForNavigation": "Only valid for STW. If true will wait for the first callback of Navigation's OnNavigationGenerationFinishedDelegate. Before enabling & registering the volume to the LWM.",
    "FortPlayerStateAthena:bIsMuted": "Only valid local",
    "FortPlayerStateAthena:bIsTalking": "Only valid local",
    "CustomizableObjectMultilayerProjectsVirtualLayer:bModifyOpacity": "Opacity.",
    "EFortQuestObjectiveItemEvent.OpenCardPack": "Open and use up a card pack",
    "EFortQuestObjectiveStatEvent.OpenCardPack": "Open and use up a card pack",
    "EEventTournamentRound.Open": "Open-to-all tournament",
    "EAthenaScoringEvent.ChestOpened": "Opened a chest",
    "EAthenaScoringEvent.SupplyDropOpened": "Opened a supply drop",
    "EAthenaScoringEvent.SupplyLlamaOpened": "Opened a supply llama",
    "EAthenaScoringEvent.AmmoCanOpened": "Opened an ammo can",
    "BuildingGameplayActorPlayerPropAttachment:bClientAttachmentErrorCorrectionEnabled": "Opt this actor type into client attachment error correction if appropriate CVars are also set",
    "FortCurieComponent:ActiveStateBitfield": "Optimized means of replicating active states on the component; Used by the client to reconstruct a client-side version of EntityStateArray",
    "FortBanHammerStrike:Action": "Option for kicking player: mark for ban or kick",
    "BuildingGameplayActorPlayerPropAttachment:bUseTransformedCalcBounds": "Option for transformed/untransformed meshes when calculating bounds",
    "FortLiquidGunProjectile:bDrawDebugCollisionOnlyCapsuleTraceHits": "Option to debug draw only capsule trace hits instead of all collision drawn with bDrawDebugCollision",
    "CatalogRedeemRealMoneyPurchasesInfo:ReceiptIds": "Optional - For receipt based systems, the receiptIds we should verify",
    "CatalogRedeemRealMoneyPurchasesInfo:CatalogItems": "Optional - catalogItems to send for eligible players based on configs to test certain features",
    "DaySequencePropertyTrackSettings:ComponentPath": "Optional ActorComponent tag (when keying a component property).",
    "FortWeaponRanged:FireFromCrouchWalkAnimation": "Optional AnimMontage to play firing animation while crouch walking. If not set, regular fire animation will play instead.",
    "FortPlayerMannequin:AthenaCharacter": "Optional AthenaCharacterItemDefinition to specify instead of specifying all character parts individually.  Specifying this property will set all of the character parts appropriately minus the back pack.",
    "FortTopBarTabButtonInfo:PersistentTabObjects": "Optional BP-implemented object(s) that exists for the lifetime of the tab",
    "ConfirmationDialogAction:DisplayName": "Optional Display name to use instead of the input action's display name.",
    "FortWeapon:FireModeData_AimDownSight": "Optional Fire Mode data to apply when aiming down sights. If any data is provided here, one should provide data\nfor the other fire modes too.  NOTE: This data can be overridden in blueprint using SetOverrideFireModeData.",
    "FortWeapon:FireModeData_HipFire": "Optional Fire Mode data to apply when in hip-fire state. If any data is provided here, one should provide data\nfor the other fire modes too.  NOTE: This data can be overridden in blueprint using SetOverrideFireModeData.",
    "CatalogReceiptInfo:PurchaseCorrelationId": "Optional GUID to match the in app purchase to the fulfillment of this entitlement. Used by analytics. Note that this does not exist for entitlements obtained outside the application",
    "CatalogRedeemRealMoneyPurchasesInfo:PurchaseCorrelationId": "Optional GUID to match the in app purchase to the fulfillment of this entitlement. Used by analytics. Note that this does not exist for entitlements obtained outside the application",
    "FortPlayerMannequin:FortHeroType": "Optional Hero to specify instead of specifying all character parts individually.  Specifying this property will set all of the character parts appropriately.",
    "FortCalendarEventInventoryTransformData:PrerequisiteHomebaseProperties": "Optional Homebase properties required for this calendar event inventory transform to be active",
    "ItemQuantity:Attributes": "Optional JSON representing item specific attributes applied on grant",
    "FortAIAssignmentIdentifier:AssignmentTeam": "Optional Team which might be required to uniquely identify the assignment.  Example: This _might_ be used for assignments that find enemies of a specific team if they are 'world' assignments.  If set as 'Spectator', this field is ignored!",
    "FortPlayerMannequin:AthenaBackBling": "Optional UAthenaBackpackItemDefinition to specify instead of specifying all character parts individually.  Specifying this property will set the back pack character parts appropriately.",
    "CatalogPurchaseInfoGift:AdditionalData": "Optional additional data",
    "CatalogPurchaseInfo:AdditionalData": "Optional additional data for this purchase.",
    "CatalogRedeemRealMoneyPurchasesInfo:AdditionalData": "Optional additional data for this purchase.",
    "CharacterTypePreset:AdditionalData": "Optional additional data that we would want to access for this AI (editor mesh, materials, etc)",
    "FortAthenaVehicle:DriverAnimLayerOverlayClass": "Optional animation blueprint that can override certain layers of the main animation blueprint when the character is driving a vehicle.",
    "FortCharacterVehicle:DriverAnimLayerOverlayClass": "Optional animation blueprint that can override certain layers of the main animation blueprint when the character is driving a vehicle.",
    "FortAthenaVehicle:PassengerAnimLayerOverlayClass": "Optional animation blueprint that can override certain layers of the main animation blueprint when the character is the passenger in a vehicle.",
    "FortCharacterVehicle:PassengerAnimLayerOverlayClass": "Optional animation blueprint that can override certain layers of the main animation blueprint when the character is the passenger in a vehicle.",
    "FortCurieActiveAmbientAudio:AudioClusterCount": "Optional audio parameter for intensity, based on visual fx density",
    "IndicatedActorData:OnActorAdded": "Optional callback to respond to a new actor being added to the indicated list with this info.",
    "PulseIndicatorComponent:OnActorAdded": "Optional callback to respond to a new actor being added to the indicated list with this info.",
    "IndicatedActorData:OnActorRemoved": "Optional callback to respond to an actor being removed from the indicated list with this info.",
    "PulseIndicatorComponent:OnActorRemoved": "Optional callback to respond to an actor being removed from the indicated list with this info.",
    "AthenaCollectionScreenContainerTabInfo:TabCategoryTags": "Optional category tag to allowlist objects with certain tags. By default this does nothing.",
    "FortMapIconDefinition:Color": "Optional color override for quest icon",
    "FortAthenaMutator_CustomStormMovement:PhaseProgressCurve": "Optional curve to use to control SafeZone progress in FortGameStateAthena_OverrideSafeZonePhaseProgressPercent().\nX axis is the original progress percent computed by the base class (0 - 1), linear over time.\nY axis is the desired override progress percent.",
    "FortVehicleAudioVoice:FloatParams": "Optional curve/attack/release values for N number of float params to be passed to the sound cue",
    "FortDailyRewardScheduleDefinition:EndDate": "Optional day after schedule finishes (will finish at 0:00 UTC on this day)",
    "FortDailyRewardScheduleDefinition:BeginDate": "Optional day schedule becomes available (will always start at 0:00 UTC)",
    "FortMinigameProgressComponent:ActivationTime": "Optional delay before actual progress is handled",
    "AthenaGameMessageData:MsgDelay": "Optional delay when this message should trigger",
    "FortTheaterGameplayModifier:EventFlagName": "Optional event flag.  If not empty, the event flag must be active for this gameplay modifier to be applied.",
    "FortGameplayDataTrackerThreshold:ExitValue": "Optional exit value that can be set differently to prevent rapid pinging of events for in/out of a range",
    "StatEventFilter:ContextTagsQuery": "Optional filter for incoming context tags",
    "StatEventFilter:SourceTagsQuery": "Optional filter for incoming source tags",
    "StatEventFilter:TargetTagsQuery": "Optional filter for incoming target tags",
    "ContextualMessageCandidate:MetadataTags": "Optional gameplay tags to send to the handler for bespoke behaviour.",
    "ContextualMessageConfig:DefaultMetadataTags": "Optional gameplay tags to send to the handler for bespoke behaviour.",
    "IndicatedActorData:GroupIdentifier": "Optional group identifier. Used to add actors into lists with an identifier so you can remove a group instead of individual actors.",
    "StenciledActorData:GroupIdentifier": "Optional group identifier. Used to add actors into lists with an identifier so you can remove a group instead of individual actors.",
    "FortCalendarEventInventoryTransformData:PrerequisiteHomebasePropertyString": "Optional homebase properties required for this calendar event inventory transform to be active (\"<property name>;<property name>;...\")",
    "UserOptionDefinitionEnumValueEntry:OptionalDisplayIcon": "Optional icon that can be use to be displayed to represent this option in an image based edit widget.",
    "PlaylistOptionValue:OptionalDisplayIcon": "Optional icon that can be use to be displayed to represent this option in an image based edit widget. Ignored by IconEnum options",
    "ConfirmationDialogAction:Icon": "Optional icon.",
    "ConfirmationDialogAction:ActionName": "Optional input action.",
    "FortCalendarEventInventoryTransformData:PrerequisiteUnownedItems": "Optional list of items that are required to not be present in the inventory to pass the prerequisite",
    "ApplyWrapVariant:AllowedMeshes": "Optional list of meshes that this wrap variant can apply to. If this list is empty then any mesh can be used.",
    "FortCalendarEventInventoryTransformData:PrerequisiteIncompleteOrUngrantedQuests": "Optional list of quests that are required to either not be present or not be completed in order to pass the prerequisite",
    "HomebaseSquadSlot:TagFilter": "Optional list of tags that we look for one of on the slottable item.  NOTE THAT TAGS DO NOT INHERIT IN MCP.  One of these tags must exactly match the slottable item's tags.",
    "VoteSelectionSettings:VoteSelectionText": "Optional localized text that describes this vote selection",
    "VoteSessionSettings:VoteSessionText": "Optional localized text that describes what this entire voting session is for",
    "VoteSettings:VoteText": "Optional localized text that describes what this vote is for",
    "AthenaGameMessageData:MsgMediaSource": "Optional media source that should play when this message is displayed",
    "FortPlayerPawn:TransformationMontage": "Optional montage to play when the character is finished customizing (i.e. transforming).",
    "PhaseLevelEntry:LevelName": "Optional name to give the level when it is loaded",
    "FortQuestPoolTableRow:RerollLimit": "Optional number of quests that can be replaced per interval (invalid for global pull)",
    "FortGliderLayeredAudioFloatParam:Oneshots": "Optional oneshot gates to use for this parameter",
    "FortLayeredAudioFloatParam:Oneshots": "Optional oneshot gates to use for this parameter",
    "PulseIndicatorComponent:IndicatorGroupIdentifierOverride": "Optional override for replacing the indicator group identifier",
    "PulseIndicatorComponent:StencilGroupIdentifierOverride": "Optional override for replacing the stencil group identifier",
    "BuildingWall:DoorAnimatingMaterial": "Optional override material to apply to the door mesh,  This material is used for both animating construction/destruction\nand for general use if overriding the material for any reason.",
    "FortCalendarEventInventoryTransformData:PrerequisiteObjective": "Optional quest objective that is required (otherwise whole quest must be complete)",
    "FortCalendarEventInventoryTransformData:PrerequisiteQuest": "Optional quest that must be completed for this calendar event inventory transform to be active",
    "FortVariantData:RequiredTags": "Optional required tags to further filter out anything that doesn't have these tags.",
    "GoalDistanceData:CurveDistanceScale": "Optional scale for distance.  If 1, the curve needs to be in actual Unreal Units (i.e. cm).  Otherwise, the curve should specify distance (X-value) as a percentage (0-1).  Note that in the percentage case, it will be clamped based on the scoring",
    "FortSaveFileBuildingInstructionsHandler:LoadedBuildingsScale": "Optional scale of loaded buildings (setting to something different than 1.0f will cause them to spawn off the grid!)",
    "AthenaGameMessageData:MsgSound": "Optional sound that should play when this message is displayed",
    "FortEventLevelNavigationActor:CameraNavOptions": "Optional spatial nav rules that can be used to override the default auto-detection.",
    "FortSafeZonePhaseInfo:TravelSplineComponent": "Optional spline component, used to make the safe zone move through a more complicated path instead of just traveling from the last phase's center to this phase's center.\n     If this component is not present the safe zone will travel from the previous safe zone's center to this safe zone's center.",
    "CatalogPurchaseInfo:GameContext": "Optional string indicating the UI context in which the purchase is made. Sent to analytics. Interpretation is game-specific.",
    "CatalogPurchaseInfoGift:GameContext": "Optional string indicating the UI context in which the purchase is made. Sent to analytics. Interpretation is game-specific.",
    "FortCalendarEventInventoryTransformData:PrerequisiteUnownedItemsString": "Optional string list of items that are required to not be present in the inventory to pass the prerequisite (\"<item def asset path>;<item def asset path>;...\")",
    "FortCalendarEventInventoryTransformData:PrerequisiteIncompleteOrUngrantedQuestsString": "Optional string list of quests that are required to either not be present or not be completed in order to pass the prerequisite (\"<item def asset path>;<item def asset path>;...\")",
    "CreativeDataChannelEvent:TriggerCondition": "Optional string that affects whether this instance of the event should generate a FireMessageOnChannel.\nIf it is not an expected value, it will not fire.\n\"Always\" means it will fire no matter our past state.\n\"Once\" means it will fire if no event with this name exists in our cache.\n\"OnParameterChange\" means it will fire if the event is not in our cache, or if the cached Parameters is different from this instance of the event.",
    "CreativeDataChannelEvent:Parameters": "Optional string that affects whether to fire in the case our TriggerCondition is OnParameterChange",
    "LWMEncounterStartStateTreeTaskInstanceData:EncounterIdentifierTags": "Optional tag container to identify this encounter instance for later use",
    "LWMEncounterAddGameplayEffectStateTreeTaskInstanceData:IdentifierTags": "Optional tag container to identify this gameplay effect for later removal",
    "SpawnActorStateTreeTaskInstanceData:ActorIdentifierTags": "Optional tag container to identify this spawned actor to be modified later",
    "FortNonPlayerConversationParticipantComponent:ConditionalBenefitsConfigIDTag": "Optional tag indicating an override 'key' that should be used to lookup benefits for this specific NPC from\nany assigned conditional benefits config. e.g. find benefits assigned to the key \"Tandem.Reputation.Benefits.Peely\"\nIf left empty the ServiceProviderIDTag (above) will be attempted as a 'default' lookup key",
    "FabricTextureProviderTexture:Tint": "Optional tint provider, to be applied to the texture",
    "FortSaveFileBuildingInstructionsHandler:LoadedBuildingsAdditionalTranslation": "Optional translation of loaded buildings",
    "DynamicUIWidgetTarget:UniqueID": "Optional unique ID of the widget to attach to.",
    "FortDialogDescription_NUI:AdditionalContent": "Optional widget for the content area of the dialog.",
    "FortDialogDescription_NUI:LeftAdditionalContent": "Optional widget for the left content area of the dialog.",
    "FortAthenaMutator_GenerateOverlapEventsOverride:CenterLocation": "Optional: Center location of the 2D distance check when Radius is provided",
    "FortWeapon:CustomReloadAnimationPerAmmoToFill": "Optional: Custom reload montages to play based on the amount of ammo that needs to be loaded. Sorted by amount to reload (single bullet should be first in the list, full reload should be last).\n              If empty, ReloadAnimation will be used.",
    "FortAthenaMutator_GenerateOverlapEventsOverride:Radius": "Optional: Radius of the 2D distance check from CenterLocation the locations of building actors to override generate overlaps",
    "CraftingFormula:OverrideCraftingTime": "Optionally override the CraftingObject's CraftingTimeLength. Will take this many seconds to craft",
    "RandomUpgradeData:MarkerDisplayInfoOverride": "Optionally, the marker display info to override this container with.\nNote: more than one entry in the array does nothing!",
    "BuildingProp_DeimosSpawner:DeimosSpawnerOptions": "Options for the class of the deimos spawner we want to spawn",
    "SourceDriver:UseQuaternion": "Options to decompose in rotation axis - if this is false, it will use matrix",
    "FortMissionRecord:UIIndex": "Order this mission is displayed in the UI",
    "CustomizableObjectMultilayerProjectsVirtualLayer:bModifyOrder": "Order.",
    "FortCreativeMoveTool:AllMIDs": "Ordered list of all of the MIDs we've created (these are actually outered to us.)  The list is ordered with\n          most recently used MIDs at the end.",
    "MashTableRowPoiRoute:PoiTags": "Ordered list of gameplay tags that will mark each POI Objective to be used. This list should be the size of the number of moving phases in the Mash game + 1.",
    "MashTableRowPoiRoute:MoveSplineTags": "Ordered list of gameplay tags that will mark each spline actor we use to manually move the safe zone during move phases.\n     Spline actors must appear in the order of the POIs they move you between. Each spline actor should start at the exact 2d location of one POI and end at the exact 2d location of the next POI.\n     If a spline can't be found for a move phase the safe zone is moved in a straight line.",
    "FortMaterialStyleComponent:PendingRequestQueue": "Ordered list of requests pending processing into the ActiveStyleInfo",
    "EChallengeListEntryType": "Organized by sort order",
    "AttachableWheel:WheelOrientation": "Orientation of the SM to the attach axis",
    "ReplicatedSpawnInfo:SpawnRotation": "Orientation the player will be in upon spawning",
    "BuildingTrap:OriginalTrapLevel": "Original Level of the trap",
    "FortCreativeLinearMoverComponent:OriginalActorLocation": "Original actor location of the target.",
    "FortCreativeLinearMoverComponent:OriginalActorRotation": "Original actor rotation of the target.",
    "CatalogItemPrice:RegularPrice": "Original price in whatever currency. If this is a real money price use the smallest denomination (i.e. cents for USD so 100 = $1)",
    "FortCreativeLinearMoverComponent:OriginalRotationDirection": "Original rotation direction.",
    "FortCreativeLinearMoverComponent:OriginalTranslationType": "Original translation type.",
    "FortGameplayEffectContext:UnmodifiedDamage": "Original unmodified Damage for downstream processing",
    "FortAnimWorldStriderComponent:PivotAnimationRight": "OstrichVehicle_Jog_N_PivotLeft",
    "FortAnimWorldStriderComponent:PivotEarlyOutAngleThreshold": "OstrichVehicle_Jog_N_PivotRight",
    "EFortUIFeature.ShowCampaign": "Other UI Features",
    "FortQuestObjectiveStatTableRow:ContextTagContainer": "Other context information, such as location",
    "FortQuestObjectiveStatTableRow:ContextTags": "Other context information, such as location",
    "FortQuestObjectiveStat:ExcludeContextTags": "Other context information, such as location - all specified tags must be missing on checked stat event",
    "FortQuestObjectiveStat:ContextTags": "Other context information, such as location - all specified tags must be present on checked stat event",
    "FortQuestObjectiveStatXPTableRow:ContextTags": "Other context information, such as location.  All these tags MUST be present in order for the stat to fire.",
    "FortMcpQuestObjectiveInfo:AlternativeStatHandles": "Other stats that can complete this objective in addition to ObjectiveStatHandle. These do not need to be unique across objectives",
    "BuildingSMActorClassData:InfluenceMapWeight": "Our Weight in the Influence Map used for AIs to determine Dormant spawning.\n              Generally this is going to be set for things that have some importance in the world where AIs should be spawned.\n              This can be set in the editor, except for BuildingSMActors that have loot chosen for them.",
    "BuildingGameplayActor:AbilitySourceLevel": "Our ability source level",
    "FortPlayerController:BotManager": "Our bot manager object. Should only be initialized with -bot flag passed in, on non shipping builds only.",
    "FortPlayerController:BotPilot": "Our bot manager object. Should only be initialized with -bot flag passed in, on non shipping builds only.",
    "FortAthenaAntelopeVehicle:FortAntelopeVehicleConfigs": "Our cached version of the CDO.",
    "FortAthenaFerretVehicle:FortFerretVehicleConfigs": "Our cached version of the CDO.",
    "FortAthenaGoatVehicle:FortGoatVehicleConfigs": "Our cached version of the CDO.",
    "FortAthenaJackalVehicle:FortJackalVehicleConfigs": "Our cached version of the CDO.",
    "FortAthenaSKPushVehicle:SKPushVehicleConfigs": "Our cached version of the CDO.",
    "FortDagwoodVehicle:FortDagwoodVehicleConfigs": "Our cached version of the CDO.",
    "FortHoagieVehicle:FortHoagieVehicleConfigs": "Our cached version of the CDO.",
    "FortMeatballVehicle:FortMeatballVehicleConfigs": "Our cached version of the CDO.",
    "FortMountedTurret:FortMountedTurretConfigs": "Our cached version of the CDO.",
    "FortNevadaVehicle:FortNevadaVehicleConfigs": "Our cached version of the CDO.",
    "FortOctopusVehicle:FortOctopusVehicleConfigs": "Our cached version of the CDO.",
    "FortSpaghettiVehicle:FortSpaghettiVehicleConfigs": "Our cached version of the CDO.",
    "FortCameraInstanceEntry": "Our camera objects.",
    "FortAIPawn:Inventory": "Our inventory, if we have one.",
    "FortAIDirector:PatrolWards": "Our list of patrol wards.  All of these implement IFortPatrolWardInterface.",
    "FortPickup:MiniMapIndicator": "Our minimap indicator",
    "FortAIPawn:PlayerManager": "Our player \"manager\".  Useful for Defenders.",
    "RidableControlRuntimeData:PreviousControlYaw": "Our previous control rotation",
    "FortAthenaAIBotController:PreviousVehicle": "Our previous vehicle",
    "FortPawn:PushSize": "Our size, AIs will push pawns out of the way that are not their goal automatically",
    "CreativeItemTemplate:TemplateObj": "Our spawned item template object, kept in sync between server and client",
    "EFortScoutDroneTargetStatus.Pending": "Out of range, but enough range for UI warning",
    "LeashInfoOverride:LeashOuterRadius": "Outer (external) radius for the leash",
    "EFortTileEdgeType.Outer_1": "Outer edge",
    "EncounterMobSpawnInfo:LeashRadiusOuter": "Outer leash radius for a mob spawned in this . If left at zero, leash will be ignored",
    "LWMEncounterStartStateTreeTaskInstanceData:LeashRadiusOuter": "Outer leash radius for a mob spawned in this . If left at zero, leash will be ignored",
    "AircraftFlightConstructionInfo:PathMidpointSelectionRadiusMax": "Outer radius of circle defining midpoint selection for the aircraft path.",
    "FortWindImpulseCylinderDelta:OuterSectionRadius": "Outer radius of the current section",
    "EFortTextureDataSlot.Primary": "Outer wall and floor",
    "EFortTextureDataType.OuterWall": "Outer wall texture, or both if no inner",
    "CreativeDeviceInfo:OutgoingEvents": "Outgoing events from FCreativeDeviceInstanceInfo",
    "FortCurieCableSocket:SocketConnection": "Outgoing socket connection information used to route the signal sent on this socket",
    "FortHighlightColors:OutlineColor": "Outline color",
    "EFortQuestObjectiveStatEvent.AthenaOutlive": "Outlive other players in an Athena match. Target is empty.\n\nNOTES: This verb doesn't update progress mid-match. Grants all progress after the player has been eliminated.\n\nDoes NOT grant progress if the player quits the match before dying (Return to Lobby included).\n\nThis verb will NOT grant any progress if there isn't an Aircraft phase (e.g. PIE Gameplay).",
    "OutpostItemUpgradeData:ItemDefinition": "Outpost item definition",
    "OutpostUpgradeAndPrestigeBuildingData:PerTheaterOutpostBuildingUpgradeData": "Outpost upgrade data specified per theater",
    "EmporiumProjectsCatalogEntry:InputFile": "Output",
    "EmporiumProjectsCatalogEntry:bProjectProcessed": "Output",
    "ConstantForceAsyncOutContinuous": "Output from the physics thread that changes every frame",
    "PhysicsMagneticForceAsyncOutContinuous": "Output from the physics thread that changes every frame",
    "PhysicsWindSplineAsyncOutContinuous": "Output from the physics thread that changes every frame",
    "SkyTubeAsyncOutContinuous": "Output from the physics thread that changes every frame",
    "VkResolvedVersePath": "Output from verse path resolution",
    "Recipe:RecipeResults": "Output of the recipe",
    "FortTierCollectionLayoutOutput": "Output struct from a generated tier collection layout",
    "OctopusOutContinuous": "Output values that do not persist between frames",
    "FortSphericalVehicleOutContinuous": "Output values that do not persist between frames.",
    "OctopusOutPersistent": "Output values that do persist between frames",
    "FortSphericalVehicleOutPersistent": "Output values that do persist between frames.",
    "DagwoodOutContinuous": "Outputs from the physics thread to the game thread which\nare always provided after a physics tick.",
    "NevadaOutContinuous": "Outputs from the physics thread to the game thread which\nare always provided after a physics tick.",
    "HoagieOutContinuous": "Outputs from the physics thread to the game thread which are always provided after a physics tick.",
    "DagwoodOutPersistent": "Outputs from the physics thread which are not always provided every frame",
    "HoagieOutPersistent": "Outputs from the physics thread which are not always provided every frame",
    "NevadaOutPersistent": "Outputs from the physics thread which are not always provided every frame",
    "AudioWorldizationGlobalSettings:EnclosureBus": "Outputs normalized value representing how enclosed the player is in a space",
    "EMoveToolPlacementCheckResult.OverBudget": "Over Budget",
    "MinigamePostGameSettings:PostGameType": "Overall Post Game Type",
    "VkProfileBuildResult:Score": "Overall score (0, 100)",
    "SubmixEffectDynamicReverbSettings:DryLevel": "Overall wet level of the reverb effect",
    "SubmixEffectDynamicReverbSettings:WetLevel": "Overall wet level of the reverb effect",
    "TurretCosmeticData:OverheatAlphaParamName": "Overheat alpha param name",
    "TurretCosmeticData:OverheatAudio": "Overheat audio component",
    "TurretCosmeticData:OverheatAudioCurve": "Overheat audio curve",
    "TurretCosmeticData:OverheatColorExponent": "Overheat color exponent - Overheat value is raised to this power, the result is used to interp between WarmColor and HotColor",
    "TurretCosmeticData:OverheatColorParamName": "Overheat color param name",
    "TurretCosmeticData:OverheatParamName": "Overheat param name",
    "TurretCosmeticData:OverheatParticleSystems": "Overheat particle systems that all take the same params",
    "EFortRecoilCurveType.WithOverheat": "OverheatAlpha will increment with time.  Call StartRecoilCurve to start.  EndRecoilCurve if it needs to stop before CurveLengthInSeconds.",
    "SpatialGameplayOverlapComponent": "Overlap component that broadcasts messages for spatial gameplay. (e.g. FortVolumeTimeOfDayComponent)",
    "FortPhysicsOverlapComponent:OverlapRadius": "Overlap radius to be set at begin play when the component is created",
    "EUIExtensionSlot.PlayerHealthbarOverlay": "Overlay behind the Player's Health Bar",
    "EUIExtensionSlot.FullScreenMapStormInfo": "Overlay for the Athena Map Storm Info widget in BP_AthenaMapStormInfo",
    "EUIExtensionSlot.FullScreenMapSquadEliminationsOverlay": "Overlay for the SquadEliminations widget in BP_AthenaMapGameInfo",
    "EUIExtensionSlot.PlayerOverHealthbarOverlay": "Overlay on top of the Player's Health Bar",
    "EUIExtensionSlot.AboveResourcesOverlay": "Overlay that Sits above the resources, ingredients, and backpack icon",
    "EUIExtensionSlot.UnderResourcesOverlay": "Overlay that Sits under the resources, ingredients, and backpack icon, used for the no build icon",
    "EUIExtensionSlot.MiniMapOverlay": "Overlay that includes the Minimap, MapKey, and SkydivingInfoWidget",
    "FortPlayerController:OverriddenBackpackSize": "Overridden backpack size",
    "FortSoundLibraryPlaybackSettings:AttenuationSettings": "Override Attenuation settings package",
    "FortSoundLibraryPlaybackSettings:ConcurrencySettings": "Override Concurrency settings package",
    "TieredWaveSetData:OverrideDirectionNumber": "Override Direction Number",
    "TieredWaveSetData:OverrideDistance": "Override Distance",
    "TieredWaveSetData:OverrideModifierTags": "Override Optional Encounter Modifier Tags",
    "TieredWaveSetData:OverrideTimedModifierTags": "Override Optional Encounter Timed Modifier Tags",
    "TieredWaveSetData:OverrideSpawnPointsCurve": "Override Spawn Points Multiplier Option",
    "TieredWaveSetData:OverrideSpawnPointsMultiplier": "Override Spawn Points Multiplier Option",
    "TieredWaveSetData:OverrideSpawnProgression": "Override Spawn Progression Option",
    "TieredWaveSetData:OverrideUtilitiesAdjustment": "Override Utilities Adjustment Option",
    "TieredWaveSetData:OverrideUtilitiesFree": "Override Utilities Free Option",
    "TieredWaveSetData:OverrideUtilitiesLocked": "Override Utilities Locked Option",
    "BotDataOverrideCosmeticMode": "Override cosmetic mode use if OverrideCharacterCustomization is checked",
    "FortServiceTransactionInfo:CurrencyItem": "Override currency item definition",
    "LockedQuestOverrideData": "Override data for locked quest widgets.",
    "EFortHandIKOverrideType.ForceFK": "Override default behavior and always use FK",
    "EFortHandIKOverrideType.ForceFKSnap": "Override default behavior and always use FK without blending",
    "EFortHandIKOverrideType.ForceIK": "Override default behavior and always use IK",
    "FortAthenaAIBotRunTimeCustomizationData:CullDistanceSquared": "Override default pawn Cull distance Squared for replication",
    "PlaysetLevelStreamComponent:MaxStreamInDistance": "Override distance to allow the playspace manager to stream this in even when the player is far away. Must be larger than the default streaming distance to take effect.",
    "UrgentQuestData:EventDescriptionGamepad": "Override for EventDescription while using gamepad. If empty, will fall back to EventDescription.",
    "UrgentQuestDataDescOverrides:EventDescriptionGamepad": "Override for EventDescription while using gamepad. If empty, will fall back to EventDescription.",
    "UrgentQuestSettings:EventDescriptionGamepad": "Override for EventDescription while using gamepad. If empty, will fall back to EventDescription.",
    "UrgentQuestData:EventDescriptionTouch": "Override for EventDescription while using touch. If empty, will fall back to EventDescription.",
    "UrgentQuestDataDescOverrides:EventDescriptionTouch": "Override for EventDescription while using touch. If empty, will fall back to EventDescription.",
    "UrgentQuestSettings:EventDescriptionTouch": "Override for EventDescription while using touch. If empty, will fall back to EventDescription.",
    "FortMapIconDefinition:MapIconPinned": "Override for MapIcon if the owning quest is pinned by the player",
    "OutpostUpgradeAndPrestigeBuildingData:POSTPerTheaterData": "Override for P.O.S.T. setup, defined for each theater.",
    "FortCurieExecutionParams:PropagationFuelOverride": "Override for fire propagation; If >= 0, will override how much fuel should be granted to spawned fires for the sake of propagation",
    "GameDifficultyInfo:DifficultyMatchmakingMaxOverride": "Override for matchmaking difficulty max range; Applies if >= 0",
    "GameDifficultyInfo:DifficultyMatchmakingMinOverride": "Override for matchmaking difficulty min range; Applies if >= 0",
    "OutpostUpgradeAndPrestigeBuildingData:PrestigePerTheaterData": "Override for prestige setup, defined for each theater.",
    "FortAIPawn:PickupDirectionOverride": "Override for the base pickup direction to use instead of the UpVector",
    "LockedQuestOverrideData:CategoryName": "Override for the category name injected into the display text on the widget. If empty, will fall back to the category's DisplayName.",
    "FortAISpawnGroupUpgradeUIData:HealthBarColorOverride": "Override for the color of this AI's health bar",
    "UserOptionDefinition:EditWidget": "Override for the in-game edit widget.",
    "ValkyrieEditorPermissionSettings_Editor:AdditionalClassPickerDefaults": "Override list of common classes in the class picker dialog *",
    "ValkyrieEditorPermissionSettings_Editor:AdditionalTemplateMaps": "Override list of info for all known template maps",
    "ValkyrieEditorPermissionSettings_Editor:AllowedMenus": "Override list of menus to customize",
    "ValkyrieEditorPermissionSettings_Editor:AllowedTabs": "Override list of tab managers to customize",
    "FortVariantData:OverrideMaterials": "Override materials that should map directly to the material index on the mesh.",
    "TaggedPOI:POIOverrideName": "Override name for the POI used in Cobalt UI",
    "EncounterManagerComponent:CenterActorOverride": "Override object to use as encounter center location  *",
    "FortAnimInput_PlayerAnimAsset:RidingNonTargetingPose": "Override pose for riding, will only be used if not null",
    "FortComponent_Energy:EnergyRegenOverrides": "Override settings for energy regeneration data",
    "FortGameModeAthena:GCSettingsOverrideList": "Override settings per playlist for garbage collection",
    "AthenaCreativeRift:OverrideEncounterSettings": "Override settings that will be overridden",
    "FortObjectiveBase:VisibilityOverride": "Override that forces visibility of the objective",
    "FortAthenaMutator_SurvivalObjectiveData:ClearAreaHalfHeightOverride": "Override the Capsule Height to use when Clearing the Area. Set to 0 to not use, else it will use the SimplifiedCollision of the Objective Class, which can be very big.",
    "FortAthenaMutator_SurvivalObjectiveData:ClearAreaRadiusOverride": "Override the Radius to use when Clearing the Area. Set to 0 to not use, else it will use the SimplifiedCollision of the Objective Class, which can be very big.",
    "QuestCategoryButtonOverrides:BackgroundMaterialOverride": "Override the background material",
    "FortAthenaMutator_BasicLimitedLives:SpecificTeamData": "Override the default data for a specific team. 0 for first BR team, 1 for second, etc",
    "FortRangedWeaponStats:AutoReloadDelayOverride": "Override the default delay time before automatic reload of weapons. -1 indicates use default (0.3s)",
    "FortExposedAsset:bUseCustomEntitlement": "Override the entitlement required for this specific asset. If disabled, it will revert back to the default value the next time the rule is refreshed.",
    "EAthenaMutatorEvaluators.ForceOverride": "Override the existing value with the mutator value",
    "FortExposedAsset:bUseCustomExposureType": "Override the exposure type for this specific asset. If disabled, it will revert back to the default value the next time the rule is refreshed.",
    "FortZiplineLinkComponent:bOverrideSnapHeight": "Override the height at which the link generation will look for a connection. By default, the height used is the bot \"InteractionDistance\" + the \"ExtraInteractTraceRange\" on the Interactable.",
    "FortAthenaPatrolPath:RadialLeashInnerRadiusOverride": "Override the radial leash inner radius. -1 = No override.",
    "FortAthenaPatrolPath:RadialLeashOuterRadiusOverride": "Override the radial leash outer radius. -1 = No override.",
    "FortZiplineLinkComponent:bOverrideSnapRadius": "Override the radius at which the link generation will look for a connection. By default, the radius used is the bot \"InteractionDistance\" + the \"ExtraInteractTraceRange\" on the Interactable.",
    "FortMission:AnnouncementClassOverride": "Override to specify the announcement class this mission should use for all announcement when this mission is the primary mission",
    "FortWeapon:UnableToPerformActionMontageOverride": "Override to the Unable To PerformAciton Montage played in FortPlayerPawn",
    "FortPhysicsObjectComponent:BuoyancyAssetOverride": "Override to the buoyancy data defined in the preset",
    "FortPhysicsObjectComponent:ImpactDamageDataOverride": "Override to the impact damage data defined in the preset",
    "FortPhysicsObjectComponent:PhysicalMaterialOverride": "Override to the physical material to apply to the owner's body",
    "SkyAtmosphereWeatherData:MieAbsorptionScale": "Override values for the absorption scale curve (based on time of day [0-24]) we are targeting during this weather event",
    "SkyAtmosphereWeatherData:HeightFogContribution": "Override values for the atmosphere height fog contribution curve (based on time of day [0-24]) we are targeting during this weather event",
    "SkyAtmosphereWeatherData:MieScatteringScale": "Override values for the mie scattering scale curve (based on time of day [0-24]) we are targeting during this weather event",
    "FortCreativeRoundSettings:bKeepItemsBetweenRoundsOverride": "Override whether players should keep items between rounds.",
    "FortCreativeRoundSettings:bReloadAndRestockWeaponsEachRoundOverride": "Override whether to reload and restock weapons between rounds.",
    "FortCreativeRoundSettings:bLastStandingWinsOverride": "Override whether to set the winner of the round to the last one standing",
    "FortAthenaMutator_Bagel:MaxAIPerClient": "Overrides MaxAIPerClient that is used to set the maximum of AIs that are relevant to clients",
    "FortAthenaMutator_Mash:MaxAIPerClient": "Overrides MaxAIPerClient that is used to set the maximum of AIs that are relevant to clients",
    "FortCharacterMovementMutatorComponent:BuffetFlyingRotationRate": "Overrides RotationRate, the speed at which the character rotates toward the current movement direction",
    "FortCharacterMovementMutatorComponent:BuffetBubblesMaxAcceleration": "Overrides UCharacterMovementComponent::MaxAcceleration",
    "FortCharacterMovementMutatorComponent:BuffetBubblesRotationRate": "Overrides UCharacterMovementComponent::RotationRate, the speed at which the character rotates toward the current movement direction.  < 0 for instant rotation.",
    "FortPhysicsObjectBaseDamageOverrides:EnvironmentDamageOverride": "Overrides damage to environment.",
    "FortPhysicsObjectBaseDamageOverrides:PlayerDamageOverride": "Overrides damage to players.",
    "FortPhysicsObjectBaseDamageOverrides:VehicleDamageOverride": "Overrides damage to vehicles.",
    "FortPhysicsObjectBaseDamageOverrides:WildlifeDamageOverride": "Overrides damage to wildlife.",
    "FortSoundIndicatorComponent:IconOverrides": "Overrides for the icon used by the sound indicator depending on the tags of the actor.\nIf the tag requirements of multiple overrides are met, the FIRST override whose tag requirements are met in the list will be used.",
    "FortSoundIndicatorComponent:SoundIndicatorTypeOverrides": "Overrides for the sound indicator type used by the sound indicator depending on the tags of the actor.\nIf the tag requirements of multiple overrides are met, the FIRST override whose tag requirements are met in the list will be used.",
    "GameDifficultyInfo:RatingsEnforcement": "Overrides for which ratings requirements will be enforced.",
    "FortAthenaMutator_Bagel:ReplicateGameplayCues": "Overrides if gameplay cues are replicated (overrides Net.FortAI.FastRep.ReplicateGameplayCues cvar)",
    "FortAthenaMutator_Mash:ReplicateGameplayCues": "Overrides if gameplay cues are replicated (overrides Net.FortAI.FastRep.ReplicateGameplayCues cvar)",
    "PlotTwistForcePowersInput": "Overrides inputs to be used with force powers.",
    "FortWeapon:NoSpareAmmoToReloadTextOverrideFailTag": "Overrides the 'no ammo' text when pressing reload button. Must not be empty and must have text set in UnableToPerformActionMessages within subgame's GameData",
    "FortGameMode:DeathPenaltyDataOverride": "Overrides the Death Penalty set for this specific gamemode.\nUseful for changing the death penalty on the fly without having to worry about losing the original value.",
    "FortAthenaMutator_GameDifficulty:GameDifficultyOverride": "Overrides the GameDifficulty when the mutator is registered with the GameStateAthena. Does not enforce this through the game.",
    "WeaponItemDefinitionDesignerData:WeaponMeshOverride": "Overrides the default mesh used by the weapon blueprint if set",
    "AircraftFlightConstructionInfo:CustomDropZoneBox2D": "Overrides the drop zone center and extents if bUseCustomDropZone is true.",
    "FortWeapon:OutOfAmmoTextOverrideFailTag": "Overrides the reload text on trigger press. Must not be empty and must have text set in UnableToPerformActionMessages within subgame's GameData",
    "FortGameStateAthena:DefaultAllowNeutralWallEditing": "Overrides the team check for building piece editing",
    "BuildingSMActor:EditorOnlyInstanceMaterialParameters": "Overrides to material parameters specified per actor instance",
    "BuildingStaticGeo:EditorOnlyInstanceMaterialParameters": "Overrides to material parameters specified per actor instance",
    "FortPlayerDeathReport:KillerOvershieldPercent": "Overshield of the pawn that killed you",
    "FortAthenaAICoverComponent:CachedController": "Owner AIBotController",
    "FortAthenaNpcGalileoComponent:CachedBotController": "Owner AIBotController",
    "FortAthenaNpcPatrollingComponent:CachedAIController": "Owner AIController",
    "SkyfireBackpackComponent:BackpackCharacterPartModifier": "Owner as CustomCharacterPartModifier",
    "FortAmbientAudioController:PlayerController": "Owner is player controller",
    "VkTeamDoc:Owner": "Owner of team",
    "EmptyServerReservation:WorldDataOwner": "Owner of the world data",
    "MatchmakingParams:WorldOwnerId": "Owner of the world data",
    "StateTreeRuntimeData:Owner": "Owner used to initialize the StateTree.",
    "FortVehicleFuelComponent:OwnerVehicle": "Owner vehicle of this fuel component",
    "TickSpan": "Owner: Jake Burga\n\nDefines an Offset tick and a Length\n\nTick spans should always be non-negative",
    "FortCurieActiveElectricityArc:OwningComponent": "Owning Curie component that the VFX request is for",
    "FortAthenaPartyRiftPortal:CachedOwningPlayerState": "Owning player state for this portal",
    "FortAthenaPartyRiftPortal:OwningPlayerNetId": "Owning player's UniqueNetId",
    "OutpostPOSTPerTheaterData:POSTData": "P.O.S.T. setup",
    "PersistenceFrameworkSaveData_VersionTable:HighestVersion": "PFWVersionToGuidMap",
    "FortAIEncounterPIDController": "PID Controller struct",
    "FortPIEMissionOverrideData": "PIE specific override data for mission generation",
    "BotPOI:ID": "POI Unique ID",
    "BotPOIDebugInfo:ID": "POI Unique ID",
    "FortAthenaMutator_Skyfire:BuildingFoundationsToActivateTags": "PROTOTYPE - A list of building foundation tags to activate once the additional playlist levels are streamed in. (This will eventually not be needed as the POI will be part of apollo_terrain.)",
    "FortAthenaLoadout:CallingCard": "PROTOTYPE: Calling cards left to show off your prowess to someone you eliminated / when you win a match (this can be nullptr)",
    "FortAthenaLoadout:PetSkin": "PROTOTYPE: Pet skin (this can be nullptr)",
    "FortAthenaLoadout:BattleBus": "PROTOTYPE: The battle bus to ride in on (this can be nullptr, in which case the default bus defined in the aircraft blueprint will be used)",
    "FortAthenaLoadout:MapMarker": "PROTOTYPE: The map marker style to apply (this can be nullptr)",
    "FortAthenaLoadout:VehicleDecoration": "PROTOTYPE: The vehicle decoration to apply when driving/steering a vehicle (this can be nullptr)",
    "FortAthenaLoadout:VictoryPose": "PROTOTYPE: The victory pose emote asset to use (this can be nullptr, in which case the player won't do anything special on victory)",
    "FortQuestAchievementTableRow:PS4TrophyID": "PS4 TrophyID",
    "FortMinigameSettingsBuilding:MatchmakingPrivacy": "PUBLIC - Anyone can use the island code. PRIVATE - Only the owner of the island can use the code.",
    "FortLobbyBeaconPlayerStatePvE": "PVE Specific data and functionality for representing AFortLobbyBeaconPlayerState.\nCurrently Gadgets are represented here but may need to move to base class",
    "MtxPackage:Description": "Package description",
    "FortLevelRecord:PackageName": "Package name attached to this level, can be stripped to find mapname",
    "FortLevelStreamingInfo:PackageName": "Package name attached to this level, can be stripped to find mapname",
    "MtxPackage:Title": "Package title Ex. \"Medium Currency Pack\"",
    "FortPartyCampaignInfo:TileStates": "Packed tile states of the leader",
    "FortPackedTileStates": "Packs the bool array of tile states to serialize more efficiently",
    "FortAthenaMutator_ContextTutorial:WorldMarkerPadding": "Padding added to the world marker on top of the marked actor, in centimeters.",
    "FortMiniMapIndicatorTextProperties:DisplayTextOffset": "Padding between the icon and the text",
    "EFortCollectionBookState.Claimed": "Page or section completed and rewards claimed",
    "FortCollectionBookClaimRewardNotification:Page": "Page template ID - if null, this is a book reward",
    "DeviceTrackingPageBase:PageRequestCounter": "PageRequestCounter should be incremented on the Server each time a page request comes in.\nThis way we will always be able to replicate back to the client and hit it's OnRep to complete the request even if nothing changed on the page",
    "QuickBarAndSlot": "Pair of quickbar type and slot",
    "NPCDynamicServiceRow:bShowAsLockedIfUnavailable": "Pairs with AdditionalRequirementTag\nIf true, will display the service as locked when it is unavailable\nIf false, will hide the service completely when it is unavailable",
    "ValkyrieEditorPermissionSettings_UMG:AllowedPaletteCategories": "Palette categories to allow all widgets within",
    "PapayaPlayspaceHub": "PapayaHub implementation of Playspace (once we have a scripting language, this would be created there)",
    "FortPlayerPawn:ParachuteAudioLoop": "Parachute and Skydive audio properties",
    "EFortDisplayGender": "Parallel gender enum to use for for arrays and displaying gender. Engine doesn't let us declare a bitfield and linear enum in the same UENUM",
    "FortHighlightParamProfile:StencilParamName": "Param name dictating the stencil look-up for the highlight; Options derived from game data's param collection; @NOTE: Types that share stencils will actively overwrite each other's colors according to their respective priorities; drawback in service to material optimization",
    "FortHighlightParamProfile:SceneModulationColorOneParamName": "Param name for the first scene modulation color (used for a blinking effect between the two), if supported",
    "FortHighlightParamProfile:OutlineColorParamName": "Param name for the outline color",
    "FortHighlightParamProfile:SceneModulationColorTwoParamName": "Param name for the second scene modulation color (used for a blinking effect between the two), if supported",
    "FortAthenaFerretVehicle:MovementAmountParam": "Param used in Blueprint for spark effects and audio",
    "FortAthenaSKMotorVehicle:MovementAmountParam": "Param used in Blueprint for spark effects and audio",
    "FortAthenaSKPushVehicle:MovementAmountParam": "Param used in Blueprint for spark effects and audio",
    "FortAvailableScriptedAction:Params": "Paramaters action will be spawned with",
    "FortPicklePortal:OpenAmountParameterName": "Parameter name for passing the Open Amount to materials/audio/particle systems",
    "FortAthenaLivingWorldVolume:QueryConfig": "Parameter to feed to the EnvironmentQuery. SimpleGrid.GridSize is automatically handled and can not be part of this list.",
    "BuildingSMActorClassData:ShieldBuffMaterialParamValue1": "Parameter value to use when for applying a level 1 shield buff to this building",
    "BuildingSMActorClassData:ShieldBuffMaterialParamValue2": "Parameter value to use when for applying a level 1 shield buff to this building",
    "FortAthenaFerretVehicle:SparksRightParam": "Parameter values for Blueprint to use for particle and audio components",
    "FortAthenaSKMotorVehicle:SparksLeftParam": "Parameter values for Blueprint to use for particle and audio components",
    "FortAthenaSKPushVehicle:SparksLeftParam": "Parameter values for Blueprint to use for particle and audio components",
    "FortAttachableProjectileComponent:FinalizedAttachmentParams": "Parameters for final location of attachment that can be externally overridden",
    "FortParticleSystemParamBucket:Parameters": "Parameters to apply to particle system components targeted by this bucket",
    "FabricMeshProviderMeshReference:Params": "Parameters to apply to shaders",
    "FortGameplayCueNotify_Looping:StartParticleSystemParameters": "Parameters to apply to the start particle system automatically when it is spawned",
    "FortGameplayCueNotify_Looping:StopParticleSystemParameters": "Parameters to apply to the stop particle system automatically when it is spawned",
    "FortAthenaAIBotController:RespawnRuntimeParameters": "Parameters to handle how a bot respawns",
    "FortAthenaMutator_SynchronizedTeleport:DefaultBeginGroupTeleportParams": "Parameters to use when calling BeginGroupTeleportWithDefaultParams()",
    "BuildingGameplayActorCrashpad:StaticParams": "Params from blueprint to control the nativized crashpad bounce behavior.\nThese params stay constant for the lifetime of the crashpad",
    "AttachToComponentParams": "Params needed to create a FAttachmentTransformRules object for an AttachToComponent call, so it can be defined in data as a single group",
    "CreativeRoyaleRootPlayspace": "Parent class for the Creative Royale global playspace",
    "FortAthenaAILODSetting": "Parent class: single setting per (system, LODLevel)",
    "FortDecoPreview:ParentDecoHelper": "Parent deco helper actor",
    "FortClientAnnouncementData": "Parent empty data to allow for data polymorphism",
    "EFortItemType.SparksCosmeticItem": "Parent item for Sparks stuff",
    "EFortItemType.Weapon": "Parent of both types of weapon",
    "CarriedObjectAttachmentInfo:AttachParent": "Parent to attach the flag to",
    "ELoginResult.AuthParentalLock": "Parental controls",
    "FortCollectionBookPageData:Rewards": "Parsed version of item rewards",
    "FortCollectionBookSectionData:Rewards": "Parsed version of item rewards",
    "FortCollectionBookXPData:Rewards": "Parsed version of rewards",
    "EFortGameplayCueAttachType": "Particle System Attach Types",
    "BuildingSMActorClassData:DeathParticles": "Particle System to spawn on destruction",
    "FortDecoTool:SpawnEffect": "Particle effect to play on spawn",
    "FortGameplayCueNotify_Looping:ParticleSystemComponent": "Particle system component that will be active while the cue is active",
    "TurretCosmeticData:OverheatSmoke": "Particle system for overheat smoke",
    "TurretCosmeticData:OverheatScreenL": "Particle system for the left overheat screen",
    "TurretCosmeticData:OverheatScreenR": "Particle system for the right overheat screen",
    "FortCurieFXSettings:PlayerWorldFireSystemLightScalabilityParamName": "Particle system parameter name for specifying the scalability setting for light scalability",
    "RandomDayphaseFX:ParticleSystem": "Particle system shown",
    "GameplayCueNotify_Jetpack_Hovering:ParticleSystemComp": "Particle system spawned and set by blueprint",
    "BuildingSMActor:ConstructedEffect": "Particle system to spawn on creation",
    "BuildingSMActor:BreakEffect": "Particle system to spawn when pieces break from the actor",
    "BuildingSMActor:RandomDayphaseFXStates": "Particle systems to spawn randomly at different day phases",
    "BuildingSMActorClassData:RandomDayphaseFXList": "Particle systems to spawn randomly at different day phases",
    "FortAthenaFerretVehicle:PS_TrailBottom": "Particle template used to spawn emmiters for trails on the bottom wings",
    "FortAthenaFerretVehicle:PS_TrailTop": "Particle template used to spawn emmiters for trails on the top wings",
    "EmoteMontageVariantDef": "Particle variants need to support both material variants and color variants as particle systems can be built on top of materials that need to be changed",
    "ParticleVariantDef": "Particle variants need to support both material variants and color variants as particle systems can be built on top of materials that need to be changed",
    "FortGameplayCueNotify_Loop:LoopingParticles": "ParticleSystem to be played for the entire duration of the gameplaycue. This should be looping!",
    "FortBurstEffectData:BurstParticles": "ParticleSystem to be spawned on GC execution. Should never be looping effects!",
    "PulseIndicatorComponent:PlayerParticleSystemData": "ParticleSystemData to replace on groups with a matching PlayerGroupIdentifier",
    "FortCurieFXSettings:ElectricityArcImpactSystem": "Particles to play for when electricity arc VFX make impact against their target",
    "TeamBucketCosmeticLoadoutContainer:PartsToSwapInToRemoveExtras": "Parts to be swapped in to remove extras like hats, backpacks, etc if the corresponding PartsOverride entry has bShouldRemoveExtras set",
    "PartyMemberLobbyState:InGameReadyCheckStatus": "Party Rep Status variable that helps track the progress of in game ready checks initiated by the party leader.\n      This value does not track a player's \"readiness\" but whether or not we have an active check against all party members readiness occurring.\n      To check the individual ready state of a player, check their \"GameReadiness\" value.",
    "FortGameStateAthena:PartyRiftPortalManager": "Party Rift Portal manager",
    "PartyRiftEmotesPlayerComponent:LongRangeInteractionTimer": "Party Rift long range interaction polling timer.  We don't want to do this operation every frame as it involves a client-side raycast.",
    "EPartyMemberVoiceChatStatus.GameVoice": "Party member is in game voice",
    "EPartyMemberVoiceChatStatus.PartyVoice": "Party member is in party voice",
    "EPartyMemberVoiceChatStatus.PlatformVoice": "Party member is in platform voice",
    "FortPartyRepData:RawSquadAssignments": "Party member squad assignments in the form of raw NetIds and absolute indices - NOT recommended for direct use.\nInstead, use UFortSocialParty::GetPartySquads(), as it's digested to provide actual PartyMember references rather than just Ids",
    "EFortAthenaPlaylist.AthenaDuo": "Party of 1 or 2",
    "EFortAthenaPlaylist.AthenaSquad": "Party of 1-4",
    "IslandRepData": "Party rep data type to replicate islands in both party and member rep data",
    "FortPlayerControllerAthena:OwnedPartyRiftPortal": "PartyRift portal assigned to this player",
    "BulletWhipTrackerData:PassByRadiusMax": "PassByRadiusMin < Distance < PassByRadiusMax : play the PassByFarSound asset",
    "EFortWeaponChargeStateForFireFX.Max_None": "Passed full charge and we're now into overcharge.",
    "FortGravityGunHolder:CachedLayeredAudioComponent": "Passed to Native from BP, used for update logic while the holder is active",
    "DestroyActorsAndComponentsMutator_ActorDefinition:bNetForceOnActorDestroy": "Passed to the bNetForce parameter of AActor::Destroy().  If true, destroy the actor regardless of Role or bNetTemporary.\nNormally defaults to false in the Destroy() function.\nWe default to true, so that networked, non-NetTemporary actors are permitted to be destroyed on client.\nFor example, if it were false, and bDestroyActorOnServer/Client were both true, we might succeed at destroying a placed actor\non the server.  However, the destruction might not replicate, and our attempt to Destroy() on the client might fail.\nWe will log an error for any failure to destroy.\nSee how bNetForce is used in UWorld::DestroyActor().\nSpecifically, if bNetForce = false, and bNetTemporary = false, the client will fail to destroy.",
    "DestroyActorsAndComponentsMutator_ComponentDefinition:bPromoteChildrenOfDestroyedComponents": "Passed to the bPromoteChildren parameter of UActorComponent::DestroyComponent().\nIf true, promote the destroyed component's children to its parent's child array.",
    "DestroyActorsAndComponentsMutator_ActorDefinition:bShouldModifyLevelOnActorDestroy": "Passed to the bShouldModifyLevel parameter of AActor::Destroy().  If true, Modify() the level before destroying the actor.",
    "SeatStatusType.Passenger": "Passenger seat is any seat besides the driver WITH or WITHOUT a gun mount",
    "SwitchSeatType.ToPassenger": "Passenger seat is any seat besides the driver WITH or WITHOUT a gun mount",
    "FortControllerAIBotComponentTelemetryData_PassiveHealer": "PassiveHealer TelemetryData",
    "VkBuildVersion:Patch": "Patch Version (can be a CL)",
    "EFabricMetaSoundPatchWrapperQuality": "Patch wrapper attempts to provide multiple quality levels to trade off against performance needs",
    "VehicleDriving:MinimumForwardPIDValueForStopping": "Path Follow Speed Threshold to Reset Input km/h",
    "ValkyriePluginSettings:LibraryCustomPath": "Path of the plugin folder in the library hierarchy when 'Library Folder Mode' is set to 'Custom Path'",
    "FortMantisTechniqueBranch:BranchPath": "Path required for this branch to succeed.",
    "DaySequenceBindingReference:ExternalObjectPath": "Path to a specific actor/component inside an external package",
    "FortEmporiumItemData:VersePath": "Path to associated verse asset",
    "AthenaExtendedXPCurveEntry:RewardItemAssetPerLevel": "Path to the item definition granted each level",
    "AthenaSeasonalXPCurveEntry:RewardItemAsset": "Path to the item definition granted on level up",
    "ValkyrieProjectDescriptor:KeyArt": "Path to the key art image file, relative to the root plugin directory\n@fixme: should be relative to the project directory, but all we upload atm are plugins\n        (i.e. there's no project-level files on the content service)",
    "DaySequencePropertyTrackSettings:PropertyPath": "Path to the keyed property within the Actor or ActorComponent.",
    "PatrolPathSegmentDetails:Path": "Path used to track points between two AI patrol points",
    "FortAthenaNpcPatrollingComponent:PatrolPath": "Patrol path actor",
    "FortAthenaPatrolPathPointProvider:AssociatedPatrolPath": "Patrol path associated with the point provider.",
    "FortAthenaLivingWorldPrefabActorSpawner:PatrolPath": "Patrol path to assign to the spawned actor.",
    "FortAthenaPatrolPoint": "Patrol point usable in a PatrolPath",
    "FortNavLinkPattern": "Pattern identifier used by FortNavLinkDefinition class",
    "BuildingSMActorClassData:EditModePatternData": "Pattern this actor uses for edit mode identification",
    "FortControllerComponent_QuickEdit:QuickEditFloorPatterns": "Patterns that can result from a quick edit on a floor",
    "FortControllerComponent_QuickEdit:QuickEditRoofPatterns": "Patterns that can result from a quick edit on a roof",
    "FortControllerComponent_QuickEdit:QuickEditWallPatterns": "Patterns that can result from a quick edit on a wall",
    "FortControllerComponent_QuickEdit:QuickEditStairsPatterns": "Patterns that can result from a quick edit on stairs",
    "FortPawnComponent_LivingWorldSpawnAroundPlayer": "Pawn Component used to automatically spawn AIs nearby players via a per-player pair of encounter and point provider dynamic creation.\nNote: currently supports only handling of real-alive players.\nNote: currently does not support logic to avoid spawning two encounters when players are very close, but might need to",
    "BuildingProp_DeimosSpawner:SpawnLimitOptions": "Pawn Limit array. These soft class pointers will be loaded when the minigame starts",
    "SpecialEventPhase:bApplyGameplayEffects": "Pawn Stufff",
    "SpecialEventRewindComponentFrame_PlayerPawn:CompressedYaw": "Pawn actor's yaw, compressed using FRotator::CompressAxisToByte()",
    "HeroSpecializationDesignerData:OverridePawnClass": "Pawn class Blueprint",
    "FortAthenaAIBotController:CacheBotPawnClass": "Pawn class that was primary used to spawn the pawn with",
    "FortFeedbackManager:AnnouncerPawnClass": "Pawn class used as our announcer.",
    "FortPlayerControllerSpectating:SpectatorPawnBaseClass": "Pawn classes to spawn for the different camera modes",
    "SkyfireBotPlayerPawnComponent": "Pawn component added to player bots in Skyfire",
    "SkyfirePlayerPawnComponent": "Pawn component added to players in Skyfire (s17 experience inside the mothership) that handles a variety of player specific data/functionality.\nA pawn component has been used instead of a player controller component since a variety of data needs to be replicated to nearby players for backpack visuals.\n(A player controller component would not be able to replicate to other players, and replicating it on the mutator would replicate the data to all players\ninstead of those just nearby/in the mothership.)",
    "CrashpadStaticParams:PawnLaunchHorzClamp": "Pawn horizontal launch velocity is clamped to this part way through the calculation",
    "FortLauncherAthena:ReplayLaunchInfo": "Pawn launch data used for recording replays.",
    "FortLauncherAthena:ServerLaunchInfo": "Pawn launch data used for replicating from the server to client. Used to show cosmetics for the launched remote pawns.",
    "FortCharacterPartsRepMontageInfo:PawnMontage": "Pawn montage that character part montages should be sycned to",
    "SavedPosition:MovementMode": "Pawn movement mode when this position was recorded.",
    "FortPlayerPawnAthena:LandFXPawnRecentRenderTolerance": "Pawn needs to be rendered on this client in recent X second, then could land dust effects be spawned",
    "FortPlayerDeathReport:KillerPawn": "Pawn of the killer, if any",
    "QueuedItemsToDropViaPickup:DestructionPawn": "Pawn owner of the items being dropped",
    "FortPassiveHealerPawnInfo:Pawn": "Pawn registered to be heal",
    "FortAthenaAIBotController:FinisherPawn": "Pawn that killed bot pawn (could be invalid if death was not due to a pawn)",
    "FortVerbMessage_PawnEliminated:EliminatedPawn": "Pawn that was eliminated in this event",
    "FortPawn:DefaultFeedback": "Pawn vocalization feedback",
    "FortPawn:DefaultSoundTrackingVisual": "Pawn vocalization feedback",
    "SpecialEventRewindComponentFrame_PlayerPawn:Location": "Pawn's location",
    "HeistExitCraftData:DepartedPawns": "Pawns there were sent to depart from the vehicle",
    "FortCollisionResponseSwapperComponent:PawnsListenedTo": "Pawns we are listening to which haven't sent the End Overlap event yet",
    "CollisionReactionConfiguration:PawnBlacklistTags": "Pawns with one of those tags will not get any kind of reaction.",
    "VortexParams:SpinRadius": "Pawns's target distance to orbit from the center of the vortex",
    "VortexParams:SpinVelocity": "Pawns's target velocity tangential to the center of the vortex",
    "ERespawnAndSpectateServerPayloadId": "Payload Ids that signal what purpose the client has chosen a respawn/spectate option for",
    "OnFortScoutDroneMarkedEnemies": "Payload for any drone marking events",
    "FortUserCloudRequest:RequestPayload": "Payload of the request",
    "FortSprayDecalRepPayload": "Payload used to represent a spray instance so the class doesn't have to worry about replication order",
    "EFortAIWaveProgressSection.Max_None": "Peak/Fade",
    "FortAnimNode_PredictiveStrideWarping:PelvisBone": "Pelvis Bone. *",
    "FortAnimNode_SpeedWarping:PelvisBone": "Pelvis Bone. *",
    "EFortItemType.CollectedResource": "Pending Account Resources waiting to be collected",
    "FortPlayerController:PendingEnterEditModeActor": "Pending edit actor indicating we are waiting to enter edit mode... hooked up to a time out",
    "FortPartyBeaconClient:PendingEmptyReservation": "Pending empty reservation data",
    "FortPawnVocalChord:PendingSpokenLine": "Pending line, there may be a timer set",
    "FortCreativeLinearMoverComponent:PendingTarget": "Pending target building actor to move. This is detected on round start and is assigned to Target when the device is enabled.",
    "FabricSteppedPreviewFXComponent:PICDGenericFloatIndex": "Per Instance Custom Data Index for a generic float value. Many devices will have a piece of data they want to express in the instance material.\nFor example,\n - A Progressor device might want to specify a float for the progression position\n - A Note Sequencer might want to specify a float for the length of a sustain.\n - A Drum Sequencer could use it for the starting index for it's per-track note data.\n - A Step Modulator might want to feed in the stepped knob's value.\n\nBe sure this is a valid index with the NumCustomDataFloats property.",
    "FabricSequencerSustainComponent:PICDEndBeat": "Per Instance Custom Data Index for the End Beat. Be sure this is a valid index with the NumCustomDataFloats property.",
    "FabricSequencerSustainComponent:PICDLoopBeat": "Per Instance Custom Data Index for the Loop Beat. Be sure this is a valid index with the NumCustomDataFloats property.",
    "FabricSequencerSustainComponent:PICDStartBeat": "Per Instance Custom Data Index for the Start Beat. Be sure this is a valid index with the NumCustomDataFloats property.",
    "FabricSteppedPreviewFXComponent:PICDSpanLength": "Per Instance Custom Data Index for the note length span of all active notes. Be sure this is a valid index with the NumCustomDataFloats property.",
    "FabricSteppedPreviewFXComponent:PICDNoteLength": "Per Instance Custom Data Index for the note length. Be sure this is a valid index with the NumCustomDataFloats property.",
    "FabricSteppedPreviewFXComponent:PICDNoteOn": "Per Instance Custom Data Index for the note on state for all tracks for a single step \"column\". Be sure this is a valid index with the NumCustomDataFloats property.",
    "FabricSteppedPreviewFXComponent:PICDNoteTime": "Per Instance Custom Data Index for the note position within the span of all active notes. Be sure this is a valid index with the NumCustomDataFloats property.",
    "FortTimeOfDayManager:LightAndFogPhaseSettingOverrides": "Per day phase overrides",
    "FortSlopeWarpingFootDefinition": "Per foot definitions",
    "PredictiveStrideWarpingFootDefinition": "Per foot definitions",
    "SpeedWarpingFootDefinition": "Per foot definitions",
    "AttackIKHandsDefinition": "Per hand definitions",
    "FortAthenaLivingWorldPrefabActorSpawner:Guid": "Per instance unique GUID used by the LivingWorld to dispatch the spawn to the correct spawner.",
    "FortQuestPoolStats:PoolStats": "Per pool state, see FFortQuestPoolStats_PerPool",
    "FortNDCImpactInfo:PerSurfaceCachedNDCInfo": "Per surface data channels to use for spawning impact FX.",
    "FortNDCImpactInfo:PerSurfaceImpactFXDataChannel": "Per surface data channels to use for spawning impact FX.",
    "FortAthenaMutator_Barrier:MountedTurretOverrideMaterials": "Per-food team mounted turret materials",
    "FortAthenaMutator_Barrier:FoodHeadData": "Per-food team parts to replace on characters.",
    "AICustomTargetConfiguration": "Per-offset configuration.",
    "ValkyrieModuleCookedSizeStats:PerPackageSizesBytes": "Per-package cooked size (in bytes) that should be reported",
    "ValkyrieModuleCookedSizeStats:PerPackagePrimaryTypes": "Per-package primary types that should be reported",
    "FortExposedContentValidatePackagesResult:ValidatedPackages": "Per-package validation state",
    "FortPlayerMannequin:CharacterPartColorSwatches": "Per-part color swatches, i.e. clothing and accessories",
    "FortPlayerMannequin:ColorSwatchesForCharacterParts": "Per-part color swatches, i.e. clothing and accessories",
    "CrucibleCourseData:SegmentsData": "Per-segment static course data, indexed by SegmentId",
    "ValkyrieModuleCookedSizeStats:PerTypeSizesBytes": "Per-type cooked size (in bytes) that should be reported",
    "FortDagwoodVehicle:bSelfDestructEnabled": "Per-vehicle Self-destruct on-off switch",
    "FortAthenaMutator_Knockback:PercentDamageLowMaxThreshold": "Percent damage threshold where any damage below or at this threshold is still considered low, and is displayed using PercentDamageLowColor",
    "FortAthenaMutator_Knockback:PercentDamageMediumMaxThreshold": "Percent damage threshold where any damage between this and the PercentDamageLowMaxThreshold is considered medium, and is displayed using PercentDamageMediumColor\n     Any damage greater than this threshold is considered high, and is displayed using PercentDamageHighColor",
    "FortAthenaMutator_Skyfire:ExitSkydiveSafeZoneRadiusPercent": "Percent of the current safe zone's radius to use when determining a squad's exit skydive location. The skydive location is a random location within a circle centered around the\ncurrent safe zone's center with a radius that is this percent of the current safe zone's radius. (This value is 0-1)",
    "FortVerbMessage_KillContribution:PercentOfTotalDamageDone": "Percent of total Damage done by this contributor (0 - 100)",
    "FortObjectiveFilter_HealingBase:PercentHealed": "Percent of total health that was healed during this event, between 0 and 100",
    "FortObjectiveFilter_GainShields:ShieldsPercentGained": "Percent of total shields gained in this event (0-100) (ie. at 5 shields heal 15 shields to 20 out of 100, 15% gain)",
    "ECatalogSaleType.PercentOff": "Percent off",
    "ECatalogSaleType.PercentOn": "Percent on",
    "FortRechargingActionTimer:ChargeRate": "Percent per second gained when charging",
    "FortRechargingActionTimerConfig:ChargeRate": "Percent per second gained when charging",
    "FortRechargingActionTimer:ActiveExpenseRate": "Percent per second lost when expending",
    "FortRechargingActionTimerConfig:ActiveExpenseRate": "Percent per second lost when expending",
    "FortRechargingActionTimer:PassiveExpenseRate": "Percent per second lost when passively losing charge",
    "FortRechargingActionTimerConfig:PassiveExpenseRate": "Percent per second lost when passively losing charge",
    "FortMatchmakingConfig:ChanceToHostIncrease": "Percentage chance [0,100] to bump ChanceToHostOverride with every failed chance to host",
    "FortMatchmakingConfig:ChanceToHostOverride": "Percentage chance [0,100] to start searching for an empty server after failing to find an existing session",
    "FortStormShieldComponent:DistanceFromEdgeOfStormShield": "Percentage distance from the edge of the storm to trigger the \"close to the edge of the storm\" event: 0-1 scale. 0.25 == 25%",
    "FortCostValidatorOverride:PercentIncreased": "Percentage it increased by",
    "FortAthenaMutator_Wax:TokenPercentDropOnElim_Commoner": "Percentage of a non-podium player's tokens to drop on elimination - due to rounding this won't be accurate",
    "FortAthenaMutator_Wax:TokenPercentDropOnElim_Podium": "Percentage of a podium player's tokens to drop on elimination - due to rounding this won't be accurate",
    "FortGamepadAdvancedOptions:AimAssistStrength": "Percentage of aim assist applied.\nRange is [0, 100] percent.",
    "SupplyDropSubPhaseModifier:SpawnInPreviousZonePercentChance": "Percentage of drops that should use the previous SafeZone's area for spawning",
    "BotEquipWeaponInfo:DistanceEffectivenessNoThreat": "Percentage of effectiveness per distance, how likely the bot should use this weapon for specified distance when no threat",
    "DigestedBotEquipWeaponInfo:DistanceEffectivenessNoThreat": "Percentage of effectiveness per distance, how likely the bot should use this weapon for specified distance when no threat",
    "BotEquipWeaponInfo:DistanceEffectivenessWithThreat": "Percentage of effectiveness per distance, how likely the bot should use this weapon for specified distance when targeting a threat",
    "DigestedBotEquipWeaponInfo:DistanceEffectivenessWithThreat": "Percentage of effectiveness per distance, how likely the bot should use this weapon for specified distance when targeting a threat",
    "FortCreativeItemDropParams:PercentageToRemove": "Percentage of items to drop (if AmountRule is set to Percentage)",
    "FortPawnStats:ControlResistanceRegenThreshold": "Percentage of maximum control resistance at which to stop regen",
    "FortPawnStats:HealthRegenThreshold": "Percentage of maximum life at which to stop health regen",
    "FortPawnStats:ShieldRegenThreshold": "Percentage of maximum shield at which to stop shield regen",
    "AthenaDeveloperSettings:AthenaWarmupEarlyRequiredPlayerPercent": "Percentage of players required to start the early countdown (based on Max Player Count)",
    "FortMinigame:PercentageOfResourcesKeptBetweenRounds": "Percentage of resources to keep between rounds.",
    "FortAthenaMutator_ItemDropOnDeath:PercentAmmoToDrop": "Percentage of the ammo an eliminated player will drop (they don't lose that ammo)",
    "ThreatCloud:MiniMapIconPercent": "Percentage of the radar size apart to place icons in the radar's main area.  This value should be made so they will overlap sufficiently to avoid holes.  It should also auto-adjust if the radar coverage size changes.",
    "FortAthenaAIBotTargetHeuristicSettings:ThreatSeeingPerceptionSettings": "Perception setting when bot have a LOS to threat",
    "FortAthenaAIBotTargetHeuristicSettings:ThreatLKPPerceptionSettings": "Perception setting when bot lost LOS to thread",
    "FortAthenaAIBotTargetHeuristicSettings:ThreatAlertedPerceptionSettings": "Perception setting when bot never had LOS but knows the direction of the threat",
    "FortGameplayEffectDeliveryActor:bNeedsHitTargetsOnExplode": "Perf optimization that will prevent us from sending any hit results to the OnExploded broadcast to prevent serializing those over the net.\nConsider turning this on if you're not using OnExploded",
    "BuildingFillFloor:MovementTimerUpdatePeriod": "Period for internal timer updates.",
    "FortAIPawnStats:AlertPeripheralVisionAngle": "Peripheral vision angle when alert",
    "FortAIPawnStats:DormantPeripheralVisionAngle": "Peripheral vision angle when dormant",
    "PerkMutatorData:PerkScreenIntroWidgetClass": "Perk Screen Intro Widget",
    "FortAthenaMutator_Uranium:bPerkModeOn": "PerkMode will interrupt every checkpoint with a Perk Picker UI screen",
    "FortAthenaMutator_PerkSystemMutator:DefaultPerks": "Perks that are always given to everyone",
    "ValkyrieEditorPermissionSettings_Editor:ReadOnlyAssetsPermission": "Permission for opening read only assets in asset editors",
    "ValkyrieEditorConfig:EntitledPermissions": "Permissions entitled to the user",
    "ValkyrieFortniteEditorPermissionSettings": "Permissions for exposing editor features specific to Fortnite data and workflows",
    "FortWorldManager:CurrentZoneRecord": "Persistence Record for the currently loaded zone state",
    "FortWorldManager:CurrentWorldRecord": "Persistence record for the currently loaded world state",
    "FortLootPackageData:PersistentLevel": "Persistent Level - Override the level this item should be when it is dropped. only used for persistent items. Blank string indicates to use the default value",
    "BuildingGameplayActorAbilityDeliveryBucket:PawnPersistentAbilitySetBuckets": "Persistent ability sets to apply globally to pawns matching the delivery criteria",
    "FortQuestManagerAttributes": "Persistent quest manager properties",
    "FortQuestPoolStats": "Persistent quest pool properties",
    "FortQuestPoolStats_PerPool": "Persistent quest pool properties",
    "EFortItemType.PersonalVehicle": "Personal Vehicle",
    "MyTownWorkerPersonalityData:PersonalityName": "Personality display name",
    "WorkerPersonalityData:PersonalityName": "Personality display name",
    "MyTownWorkerPersonalityData:SelectionWeight": "Personality selection weight",
    "WorkerPersonalityData:SelectionWeight": "Personality selection weight",
    "MyTownWorkerPersonalityData:PersonalityTypeTag": "Personality type",
    "WorkerPersonalityData:PersonalityTypeTag": "Personality type",
    "SupplyDropZoneBasedSpawnData:CurrGamePhase": "Phase of game most recently spawned in",
    "FortWorldConditionAthenaGamePhase:PhaseStep": "Phase that has to be reached",
    "FortSupplyDropGamePhaseData:GamePhase": "Phase this data is for",
    "PhaseableBuildComponent": "PhaseableBuildComponent is an actor component that handles phaseable build gameplay.",
    "EFortPlayerPowerRatingType.Auto": "Phoenix if in a Phoenix zone or the selected theater is a Phoenix theater, Campaign otherwise.",
    "RockVehicle_PhysicsLogFrame": "Physics data for a single actor for a single frame.",
    "FortSkyTube:PhysicsEntryMultiplier": "Physics entry change scaled by this amount.",
    "FortSkyTube:PhysicsForceMultiplier": "Physics forces scaled by this amount.",
    "TempestTornadoForcesComponent:PhysicsPresetTagsAngularDampingToOverride": "Physics objects with physics presets containing any of these tags will have their angular damping adjusted while in the tornado\nThis is to provide a better look to objects spinning in the tornado",
    "FortPoiCollisionComponent:PoiBodyInstance": "Physics scene information for this component, holds a single rigid body with multiple shapes.",
    "NetworkPhysicsState": "PhysicsState that is networked and marshelled between GT and PT",
    "ESourceSelectionMode.MaxDifference": "Pick max absolute difference",
    "FortAthenaMapInfo:SupplyDropAvoidWaterTraceMinZ": "PickSupplyDropLocation() will not perform water traces that start below this altitude",
    "FortAIPawn:CurrentRunVariationIndex": "Picked run variation",
    "EFortPickerMode.BuildingCategory": "Picker for selecting a category of building pieces",
    "EFortPickerMode.SocialCategory": "Picker for selecting a category of social actions",
    "EFortPickerMode.TrapCategory": "Picker for selecting a category of traps",
    "EFortPickerMode.WeaponCategory": "Picker for selecting a category of weapons based on the player's inventory",
    "EFortPickerMode.Building": "Picker for selecting a specific building piece",
    "EFortPickerMode.DirectPickEmote": "Picker for selecting a specific emote action",
    "EFortPickerMode.Social": "Picker for selecting a specific social action",
    "EFortPickerMode.DirectPickSpray": "Picker for selecting a specific spray action",
    "EFortPickerMode.Trap": "Picker for selecting a specific trap",
    "EFortPickerMode.TrapRadial": "Picker for selecting a specific trap from a radial",
    "EFortPickerMode.Weapon": "Picker for selecting a specific weapon from the inventory",
    "EFortPickerMode.WeaponsSlotted": "Picker for selecting one of the weapons in our weapon slots",
    "EFortPickerMode.SquadQuickChat": "Picker for team comms in Athena duos/squads/LTMs",
    "EFortPickerMode.NPCCommand": "Picker which wants to select NPC command",
    "EFortPickerMode.SquadRequest": "Picker which wants to select Squad command",
    "EFortPickerMode.MusicSource": "Picker which wants to select a music source.",
    "FortAthenaPickRandomMontageStateTreeTask": "Picks a random Montage from a list.\nEach Config has a weight that is used to decide how likely is for a montage to be picked.\nEx. if you have:\n- montage A, weight 1\n- montage B, weight 2\nMontage A will have 33.33% to get picked (1/(1+2)) and Montage B will have a 66.66% to get picked (2/(1+2)).\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "ESeatSelectionRule.TwoClosest": "Picks between two closest seats, depending on view angle.",
    "EFortAthenaAIObjectTrackerQueryOrder.Distance": "Picks the closest one to the AI (from StartLocation to the object's location)",
    "EFortAthenaAIObjectTrackerQueryOrder.None": "Picks the first valid one",
    "EFortAthenaTutorialSubstep.ScreenReachPickUp": "Pickup",
    "FortAthenaPatrolPath:RadialLeashLocationActorOverride": "Pickup an Actor to override the radial leash center location. Null = No override.",
    "FortPickupCreative:OverrideDespawnTime": "Pickup despawn time in seconds",
    "FortKeepAmmoStash:PickupTier": "Pickup tier to spawn",
    "FortAthenaMutator_DadBro:PickupTimeRangeToDespawnAtOnce": "Pickups being despawned by the AoE will be despawned when their desired despawn time\nis within this time range of the current time during a despawn update",
    "FortAIPawn:UnreachablePickups": "Pickups that we haven't been able to navigate to, for whatever reason.  Stored as map so we know the last time it was unreachable.",
    "EFortTextureDataType.Pillar": "Pillar texture",
    "EFortShowdownPinState": "Pin Unlock State",
    "FortTheaterRuntimeData:WorldMapPinClass": "Pin blueprint to use on map screen",
    "ValkyrieEditorPermissionSettings_Blueprints:AllowedPinCategories": "Pin categories to allow",
    "ELoginResult.PinGrantCanceled": "Pin code process canceled",
    "SquadComsNPCCommandEntry:CommandType": "Ping Command Type associated to this entry",
    "SquadComsQuickChatEntry:MarkerType": "Ping Command Type associated to this entry",
    "PulseIndicatorComponent:PlayerPingSound": "Ping sound to replace on groups with a matching PlayerGroupIdentifier",
    "FortMeleeWeaponStats:ConePitchAngle": "Pitch component of Cone Angle",
    "AthenaVehicleShootingCone:PitchConstraint": "Pitch constraint (+- around the vehicle right axis)",
    "FlyingRidableControlParams:PitchForMaxBoost": "Pitch for maximum boost",
    "FlyingRidableControlParams:PitchForMinBoost": "Pitch for minimum boost",
    "FortGamepadAdvancedOptions:LookVerticalSpeedAds": "Pitch look speed (when aiming down sights).\nRange is [1, 100] percent.",
    "FortGamepadAdvancedOptions:LookVerticalSpeed": "Pitch look speed.\nRange is [1, 100] percent.",
    "FortPlayerFoleyContextSettings:PitchMultiplier": "Pitch multiplier for sound playback",
    "DeployableTurretBPAnimData:SurfacePitchDegrees": "Pitch of the surface the turret is on (calculated by GetSlopeDegreeAngles in the turret BGA)",
    "FortWeapon:ProjectilePitchOffset": "Pitch offset to apply to aim location for projectile weapons.\nOnly applied automatically in ranged weapons but still used by some\nnormal weapons that have projectiles in blueprint such as grenades.\nNeeds to be accessible from code for player bots.",
    "ServerSocketTransformOverride:PivotOffset": "Pivot offset from tank center",
    "FortLocomotionAnimSet:AdditivePivot_N": "Pivots",
    "FortLocomotionAnimSet:Pivot_N": "Pivots",
    "SafeZoneLocation": "Placeable actor used for defining static safe zone locations to be used in LTMs.\nThese locations are identified by gameplay tag. Only one can be active at a time.",
    "EFortBuildingInitializationReason.PlacementTool": "Placed by the placement tool",
    "EFortBuildingInitializationReason.TrapTool": "Placed by the trap tool",
    "FortSettingsFilterState": "Placeholder for the future.  The filter state is intended to be any\nand all filtering we support.",
    "SafeZoneLocation:PreviewShieldRing": "Placeholder shield ring for previewing radius in editor",
    "EFortDecoPlacementQueryResults.AbilityFailure": "Placement ability cannot be activated",
    "PartyDisplayManager:VaultPlacementActor": "Placement actor for items to display in Vault",
    "PartyDisplayManager:VaultWeaponPlacementActor": "Placement actor for items to display in Vault",
    "AbandonedCampsitePlacedSpawner": "Placement actor for preplaced abandoned tent assets. Will spawn tent\n      assets on the exact location of child UAbandonedTentSpawnPointComponents\n      after rolling against their spawn chance.",
    "BuildingActor:OriginatingPlacementActor": "Placement actor this actor was spawned at, if any",
    "EFortCostInfoTypes.Placement": "Placement cost",
    "EHUDMessagePlacement": "Placement of the message on the HUD",
    "HUDMessageData:Placement": "Placement of the message on the HUD",
    "HUDMessageData:MessageTargets": "Placement of the message on the HUD\nPossible values are:\n- All\n- Team (from 1001 to 1001 + N). The 1000 value is related to a \"shifting\" that occurs in CreativeKnobBlueprintLibrary.h.\n- Triggering Player\n- Enemies\n- Friendlies\nThese values are unified within a Knob and you can see those values at \"CreativeKnobBlueprintLibrary.h\"",
    "FortDecoPreview:FallbackPlacementType": "Placement type used in the event that the actual placement actor cannot provide a placement type",
    "FortPlacementActorFinderEntry:ExlusionTags": "PlacementActors must NOT have these tags for the building to spawn here",
    "FortPlacementActorFinderEntry:RequiredTags": "PlacementActors must have these tags for the building to spawn here",
    "FortPlacementActorFinderEntry:PreferredTags": "PlacementActors with these tages are preferred but are not required for the building to spawn here",
    "VkProfileBuildResult_Client:Platform": "Platform the server was running on",
    "VkProfileBuildResult_Server:Platform": "Platform the server was running on",
    "PlaylistAccessOverride:Platforms": "Platform(s) to override (all = all platforms for the given region(s))",
    "ECodeTokenPlatform": "Platforms allowed for each code token definition",
    "EEventTokenType": "Platforms allowed for each code token definition",
    "FortMovementComp_Character:LandHardSoundFallSpeedThreshold": "Play a hard impact sound when landing above this speed",
    "FortMovementComp_Character:LandSoundFallSpeedThreshold": "Play a normal impact sound when landing above this speed but less than the hard speed threshold",
    "EMusicClipSyncOptions.Wild": "Play at 'natural' tempo. Do not synchronize with anything.",
    "BulletWhipTrackerData:bAttachSoundToOwner": "Play sound 2D or attach to Owner's RootComponent",
    "EFortFeedbackBroadcastFilter.FFBF_HumanPvP_Team1": "Play this feedback to the human team 1 only",
    "EFortFeedbackBroadcastFilter.FFBF_HumanPvP_Team2": "Play this feedback to the human team 2 only",
    "EFortFeedbackBroadcastFilter.FFBF_SpeakerAdressee": "Play this feedback to the speaker and the addressee only",
    "EFortFeedbackBroadcastFilter.FFBF_SpeakerTeam": "Play this feedback to the speaker and their team only",
    "EFortFeedbackBroadcastFilter.FFBF_Speaker": "Play this feedback to the speaker only",
    "FortFeedbackHandle:BroadcastFilterOverride": "Play this piece of feedback to this team only",
    "EFortGameFeature.KairosLoadElectraPlayer": "Play video in Kairos via engine",
    "EFortKeyframedMovementMovementMode": "Playback mode (play once and stop, play once and repeat indefinitely, play continuously reversing direction at each end).\nNote that looping mode cause the actor to snap to its starting transform at the end of each loop. This is invisible in the case where\nthe keyframes naturally return the actor to its starting position (i.e., closed loop animations)",
    "FortFootstepComponent:DefaultFastFootstepSound": "Played for sprinting",
    "FortPawn:DefaultFastFootstepSound": "Played for sprinting",
    "FortFootstepComponent:DefaultFootstepSound": "Played for walking/jogging",
    "FortPawn:DefaultFootstepSound": "Played for walking/jogging",
    "FortWorldSettings:SoundBodyHeadshotRequired": "Played when being hit in the body when a headshot is required to kill",
    "EFortSwimmingAudioType.SwimEnd": "Played when character enters swimmable water",
    "EFortSwimmingAudioType.Max_None": "Played when character exits swimmable water",
    "FortFootstepComponent:DefaultCrouchSound": "Played when crouching",
    "FortPawn:DefaultJumpSound": "Played when jumping",
    "FortFootstepComponent:DefaultHardLandingSound": "Played when landing softly",
    "FortFootstepComponent:DefaultLandingSound": "Played when landing softly",
    "FortPawn:DefaultHardLandingSound": "Played when landing softly",
    "FortPawn:DefaultLandingSound": "Played when landing softly",
    "FortFootstepComponent:DBNOLandingSound": "Played when landing while DBNO",
    "FortPawn:DBNOLandingSound": "Played when landing while DBNO",
    "EFortSwimmingAudioType.SwimStart": "Played when sprint boost begins",
    "FortFootstepComponent:DefaultStandSound": "Played when standing",
    "MMRSpawningInfo": "Player Bot specific spawning info for a given MMR bracket row",
    "MMRSpawningPlayerBotsRuntimeInfo": "Player Bot specific spawning info for a given MMR bracket row",
    "PartyRiftEmotesPlayerComponent": "Player Component added to all players by the FortAthenaMutator_PartyRiftEmotes.\nUsed to manage what party rift emotes are available to the player based on their\nSocial Party Leader status.  Logic for determining social party status and reacting\nto it is handled on clients, as the social party only exists on the client.",
    "FortControllerComponent_MiniMapDiscoverable": "Player Component that tracks the player's specific visibility of a FortMiniMapComponent_Discoverable.\nThis is used to allow minimap icons where each player tracks if they can see/have discovered the icon.",
    "EFortQuestObjectiveStatEvent.AthenaEarnMiniGameScore": "Player Earned points in a mini game",
    "FortAthenaMutator_SynchronizedTeleport:InProgressTeleportPlayerIDs": "Player IDs of players still teleporting. Used on the client to determine whether the screen should fade back in or not.\nThis is for a temporary solution to a problem with SynchronizedTeleportPlayerComponents not always being destroyed on the client, resulting in the\nClient not knowing that they have finished teleporting",
    "FortObjectiveFilter_Interact": "Player Interacts a Building Actor. Target is the building object that was Interacted.",
    "FortObjectiveFilter_RevealedPawnDisguise": "Player Revealed a disguised pawn.",
    "EFortQuestObjectiveStatEvent.AthenaTurnInQuest": "Player Turned in the quest to the NPC. Target is empty.",
    "FortAthenaMutator_Wax:GameMsg_EnemyToWinSoon": "Player about to win, but they're an enemy",
    "FortAthenaMutator_Wax:GameMsg_PlayerToWinSoon": "Player about to win, except its you.",
    "EFortQuestObjectiveStatEvent.LevelUpAthenaSeason": "Player advanced the athena season to a new level",
    "EFortQuestObjectiveItemEvent.LevelUpAthenaSeason": "Player advanced the battle pass to a new level",
    "EFortQuestObjectiveItemEvent.LevelUpBattlePass": "Player advanced the battle pass to a new level",
    "EFortQuestObjectiveStatEvent.LevelUpBattlePass": "Player advanced the battle pass to a new level",
    "EFortQuestObjectiveItemEvent.LevelUpCollectionBook": "Player advanced the collection book to a new level",
    "EFortQuestObjectiveStatEvent.LevelUpCollectionBook": "Player advanced the collection book to a new level",
    "FortWeapon:PlayerAnimProxyTable": "Player animation proxy table to use for this weapon.",
    "FortScriptedActionParams:Player": "Player associated with this action, can be null for global actions",
    "FortControllerComponent_PlayerAugmentPersistence:LivePlayerAugmentsPersistenceData": "Player augments persistence data with possible unsaved modifications from current match.",
    "EFortQuestObjectiveStatEvent.InitiatedNPCConversation": "Player began a conversation with an NPC. Target is the NPC that we started a conversation with.",
    "EFortQuestObjectiveStatEvent.InitiatedServiceStationConversation": "Player began a conversation with an Service Station (e.g. payphone/vending machine). Target is the service station object.",
    "FortGameStateZone:PlayerBuildableClasses": "Player buildable classes per resource type. In the future, this could/should be perhaps handled by the streaming manager directly & summoned/cached on demand outside of the game state",
    "EFortDeliveryInfoBuildingActorSpecification": "Player buildable, non-player buildable, etc",
    "EMatchAbandonState.TeamLocked": "Player chose not to abandon the match and is now locked or the team is all present.",
    "EFortQuestObjectiveStatEvent.WaveComplete": "Player completed a wave. Target is the mission tags of the active mission.",
    "EFortQuestObjectiveStatEvent.AthenaCollection": "Player completed an entry to their athena collection book (like fishing), entry tag of the collected item from the collection book will be passed to the Source tags container. Target is empty.",
    "FortControllerComponent_UGCEdit": "Player controller component that handles the player's interaction with UGC edit features",
    "FortControllerComponent_Aircraft": "Player controller component that handles the player's interaction with aircrafts/buses",
    "RealitySaplingPersistentData:OwningPlayerController": "Player controller that owns this sapling",
    "TeamSpottedActorInfo:Spotter": "Player controller that performed the spotting; Not replicated and maintained exclusively on the server",
    "EFortQuestObjectiveStatEvent.AthenaVehiclePartDisabled": "Player damaged a vehicle part enough to disable it. Target is the vehicle.",
    "EFortQuestObjectiveStatEvent.Death": "Player death event. Target is the player that killed another player.",
    "EFortQuestObjectiveStatEvent.Destroy": "Player destroyed Building Actor(s). Target is the building that was destroyed. Quest.Metadata.AlliedStructure if allied.",
    "FortObjectiveFilter_DestroyBuilding": "Player destroys a Building Actor. Target is the building object that was destroyed.",
    "FortPawnComponent_Disguise:PlayerDetectedTimestamp": "Player detected timestamp to trigger a reveal",
    "EKeepPlayingTogetherVotingStatus.OptedOut_TimedOut": "Player did not make a decision before the allotted time expired and was automatically opted-out.",
    "FortObjectiveFilter_DiscoverPOI": "Player discovers a POI (Athena.Location.POI) or Landmark (Athena.Location.UnNamedPOI) at a version they hand't been before.\nTip: By definition, DiscoverPOI will always trigger alongside a Visit verb (Discover is a \"special\" type of Visit).\n // todo @nahuel.arjona Consider inheriting from Visit",
    "EFortDecoPlacementQueryResults.NoEditPermission": "Player does not have edit permission",
    "EFortStructuralGridQueryResults.NoEditPermission": "Player does not have edit permission",
    "EFortEarnedSubRewardType.Bars": "Player earned Bars upon completion",
    "EFortEarnedSubRewardType.XP": "Player earned XP upon completion",
    "EFortQuestObjectiveStatEvent.Kill": "Player eliminated something (wildlife, npc, loot llama, etc). Target is the Actor that was killed. Sent for player that is credited with the elim.\n      SourceTagContainer contains Tags from Killer - Players tamed wildlife that scores a kill will have tags from wildlife, not the player.",
    "EFortQuestObjectiveStatEvent.VisitDiscoverPOI": "Player entered a POI volume and is discovering it - separated from Visit so we can manage reset counts differently for reseting map area exploration.\n      TargetTagContainer has Gameplay.Action.Player.Discover on discovery. SourceTags are tags from player and POI volume.",
    "EFortQuestObjectiveStatEvent.Visit": "Player entered a POI volume. TargetTagContainer has Gameplay.Action.Player.Discover on discovery.\n      SourceTags are tags from player and POI volume.",
    "FortSkyTube:MaxPerpendicularEntrySpeed": "Player entering tube will have speed clamped to this magnitude, in the plane perpendicular to the spline.\nIgnored if less than zero.",
    "FortSkyTube:MaxEntrySpeed": "Player entering tube will have speed clamped to this magnitude.",
    "FortObjectiveFilter_Visit": "Player enters an Athena.Location volume during a match. Will fire again if the player leaves the volume and enters again\nTip: If you want to avoid the same location progressing the quest again on re-enter during the same match, add\nAthena.Location to Remember tags and every location visited will only progress the quest once per match.",
    "ECreativeMannequinAnalyticsInteractType.Equip": "Player equipped a skin from the mannequin",
    "EFortAIDirectorEvent.PlayerAIEnemies": "Player events // Currently STW only (only knows about STW enemy types)",
    "HeroSpecializationDesignerData:Description": "Player facing description of hero",
    "HeroSpecializationDesignerData:DisplayName": "Player facing name of hero: Penny, Ramirez, AC, Sarah, etc...",
    "EFortQuestObjectiveStatEvent.AthenaVehicleFlip": "Player flipped a vehicle. Target is empty.",
    "EFortQuestObjectiveStatEvent.AthenaCollectionFoundItem": "Player found a new entry in their athena collection book (like fish), Following tags will be passed to the source tag container:\n * tag for the collected item\n * tag identifying the collection (Collections.<collection_name>)\nVerb has retroactive processing support on MCP when granted, so any previous items in collection will count toward this goal\nVerb has game server support to verify quest count matches collection count every time player joins an athena match.\nTarget is empty.",
    "EFortQuestObjectiveStatEvent.AthenaLevelUp": "Player gained a level",
    "EFortQuestObjectiveItemEvent.GainAthenaSeasonXp": "Player gained season xp",
    "EFortQuestObjectiveStatEvent.GainAthenaSeasonXp": "Player gained season xp",
    "FortObjectiveFilter_Craft": "Player has Crafted items.",
    "FortObjectiveFilter_GainShields": "Player has Gained Shields (Added health to shields)",
    "FortObjectiveFilter_Hit": "Player has Hit an object, player, or creature.",
    "FortObjectiveFilter_RevivePlayer": "Player has Revived another Player",
    "FortObjectiveFilter_SpentBarsOnNPCService": "Player has Spent Bars On an NPC Service.",
    "FortObjectiveFilter_DamageTaken": "Player has Taken damage from an object, player, or creature.",
    "FortObjectiveFilter_UsedNPCService": "Player has Used an NPC Service.",
    "FortObjectiveFilter_AddToCollection": "Player has added an item to their collection.",
    "FortObjectiveFilter_AddToInventory": "Player has added {or picked up} an item to their inventory.",
    "EFortQuestObjectiveStatEvent.HasLeveledUpAthenaSeason": "Player has advanced the athena season to at least the given level",
    "EFortQuestObjectiveItemEvent.HasLeveledUpAthenaSeason": "Player has advanced the battle pass to at least the given level",
    "EFortQuestObjectiveItemEvent.HasLeveledUpBattlePass": "Player has advanced the battle pass to at least the given level",
    "EFortQuestObjectiveStatEvent.HasLeveledUpBattlePass": "Player has advanced the battle pass to at least the given level",
    "EFortQuestObjectiveItemEvent.HasLeveledUpCollectionBook": "Player has advanced the collection book to at least the given level",
    "EFortQuestObjectiveStatEvent.HasLeveledUpCollectionBook": "Player has advanced the collection book to at least the given level",
    "EFortQuestObjectiveItemEvent.HasConverted": "Player has an evolved item of the specified type",
    "EFortQuestObjectiveStatEvent.HasConverted": "Player has an evolved item of the specified type",
    "EFortQuestObjectiveItemEvent.HasUpgraded": "Player has an upgraded (leveled up) item of the specified type",
    "EFortQuestObjectiveStatEvent.HasUpgraded": "Player has an upgraded (leveled up) item of the specified type",
    "EFortQuestObjectiveItemEvent.HasUpgradedRarity": "Player has an upgraded item rarity of the specified type",
    "EFortQuestObjectiveStatEvent.HasUpgradedRarity": "Player has an upgraded item rarity of the specified type",
    "FortObjectiveFilter_VehicleMod": "Player has applied a mod to a vehcile.",
    "EFortQuestObjectiveItemEvent.HasAssignedWorker": "Player has assigned a worker at time of quest grant or while quest active",
    "EFortQuestObjectiveStatEvent.HasAssignedWorker": "Player has assigned a worker at time of quest grant or while quest active",
    "EFortQuestObjectiveStatEvent.AugmentAttached": "Player has attached an Augment",
    "EFortQuestObjectiveStatEvent.AugmentsAvailable": "Player has augment selections available",
    "FortObjectiveFilter_RevivedFromDBNO": "Player has been revived from DBNO from another player.",
    "EFortQuestObjectiveStatEvent.CurrencyCollected": "Player has collected currency.",
    "FortObjectiveFilter_CurrencyCollected": "Player has collected global resources (Gold Bars).",
    "EFortNotificationEntryCompletionStatus.Completed": "Player has completed the quest.",
    "EFortQuestObjectiveStatEvent.ConvertNPC": "Player has converted an AI pawn. TargetTagContainer is tags of the pawn of the player converting the NPC. Target object is null.",
    "FortObjectiveFilter_ConvertNPC": "Player has converted {Tamed} an NPC.",
    "FortObjectiveFilter_VehiclePartDisabled": "Player has destroyed a part of a vehicle by damaging that part.",
    "EFortQuestObjectiveStatEvent.MinigameDeath": "Player has died, only tracked for minigame purposes",
    "FortObjectiveFilter_PawnDied": "Player has died.",
    "EFortQuestObjectiveStatEvent.Damage": "Player has done a defined amount damage to an object, player, or creatures. The target is the object, player, or creature which was damaged.",
    "FortObjectiveFilter_Emote": "Player has done an emote",
    "FortObjectiveFilter_DamageDone": "Player has done damage to an object, player, or creature.",
    "FortObjectiveFilter_BuildingEdit": "Player has edited a building",
    "EFortQuestObjectiveItemEvent.HasCompletedQuest": "Player has ever completed quests of specified type",
    "EFortQuestObjectiveStatEvent.HasCompletedQuest": "Player has ever completed quests of specified type",
    "EFortQuestObjectiveStatEvent.Feed": "Player has fed an item to an AI pawn. Target is the item that was fed to the AI pawn.",
    "FortObjectiveFilter_VehicleFlip": "Player has flipped over a vehicle.",
    "EFortQuestObjectiveItemEvent.HasGainedAthenaSeasonXp": "Player has gained Athena seasonal xp",
    "EFortQuestObjectiveStatEvent.HasGainedAthenaSeasonXp": "Player has gained Athena seasonal xp",
    "FortObjectiveFilter_Acquire": "Player has gained one or more quest rewards.\nThis is fired a single time when a quest is completed with a list of all rewards gained.",
    "EFortQuestObjectiveStatEvent.HatchedAI": "Player has hatched an AI (such as wildlife)",
    "FortObjectiveFilter_HealingBase": "Player has healed health",
    "FortObjectiveFilter_HealingDone": "Player has healed health",
    "EFortQuestObjectiveStatEvent.MinigameAssist": "Player has helped with a kill, only tracked for minigame purposes",
    "EFortQuestObjectiveStatEvent.AthenaOpenedFriendChest": "Player has helped with open a friend chest. Target is empty.",
    "EFortQuestObjectiveStatEvent.Hit": "Player has hit another player with a damage causing source. Target is the player that was hit.",
    "EFortQuestObjectiveStatEvent.Ignite": "Player has ignited a structure",
    "EKeepPlayingTogetherVotingStatus.OptedIn": "Player has indicated they want to keep playing together with their squad from this match.",
    "FortObjectiveFilter_FinishDownedPlayer": "Player has killed an opponent who was DBNO.\nNote: Author tags will contain information about what was used to down the player.",
    "FortObjectiveFilter_LandVehicleTrick": "Player has landed a trick in a vehicle",
    "FortObjectiveFilter_LandFromBus": "Player has landed after jumping from the initial bus ride",
    "FortObjectiveFilter_Land": "Player has landed after sky diving (including landing from the Bus).",
    "EFortQuestObjectiveStatEvent.MinigameComplete": "Player has participated in a minigame to it's completion",
    "FortObjectiveFilter_SetMarker": "Player has placed a Marker",
    "FortObjectiveFilter_Build": "Player has placed a building object",
    "FortObjectiveFilter_VehicleTirePopped": "Player has popped a tire on a vehicle.",
    "FortObjectiveFilter_AugmentsRerolled": "Player has re-rolled their augments (Either for free or by paying bars).",
    "FortObjectiveFilter_PlayerReceivedGameplayEvent": "Player has received a gameplay event message matching the specified GameplayEventTag.\nNote: This will not work for gameplay events that do not have an instigator or target set.",
    "FortObjectiveFilter_HealingReceived": "Player has received healing (Not gained shields)",
    "FortObjectiveFilter_Repair": "Player has repaired an actor with a repair tool.\nNote: Repairing buildings is a separate verb and will not fire from this.\nThis event will not fire if a repairing item is used on an actor that is already at full health",
    "EFortQuestObjectiveStatEvent.Repair": "Player has repaired an item",
    "FortObjectiveFilter_PlayerRevealed": "Player has revealed another player by marking them with an item like a flare gun or tracking pistol.",
    "FortObjectiveFilter_CurrencySpent": "Player has spent global resources (Gold Bars).\nNote: This verb fires twice when currency is spent. A specific event that will have tags relevant to that event,\nand a general event fires along with it that will have Athena.GoldBars.Spent",
    "FortObjectiveFilter_InitiatedNPCConversation": "Player has started a conversation with an NPC.",
    "EFortQuestObjectiveStatEvent.TakeDamage": "Player has taken a defined amount damage from an object, player, or creatures. Target is either empty or the player that dealt damage.",
    "EFortQuestObjectiveStatEvent.Throw": "Player has thrown an object. Target is the object that was thrown.",
    "FortObjectiveFilter_TurnInQuest": "Player has turned in a quest typically during an npc conversation.",
    "FortDamageNumbersActor:CriticalHitPlayerColor": "Player hit, critical.",
    "FortDamageNumbersActor:HitPlayerColor": "Player hit, not critical.",
    "EFortQuestObjectiveStatEvent.HitWeakpoint": "Player hits a weak point. Target is empty. Weakpoints are not team/squad, only for player hitting the weak point. A GA is typically used for more precise tracking for their quest",
    "EFortBuildingState.EditMode": "Player is editing an existing building",
    "EFortBuildingState.Placement": "Player is holding a building primitive shape to place",
    "EFortDecoPlacementQueryResults.WrongZone": "Player is in wrong zone to place this type of trap",
    "EFortRequestedGameplayAction.StartPlaying": "Player is ready to start gameplay",
    "EFortReplicatedStat.PlayerKills": "Player kills",
    "EKeepPlayingTogetherVotingStatus.OptedOut_Manual": "Player manually selected that they do not want to keep playing together.",
    "EFortQuestObjectiveStatEvent.AthenaVehicleMod": "Player modded a vehicle. Target is the vehicle mod that was applied.",
    "FortPlayerStartCreative:LockedPlayerNameSubstring": "Player name must contain this substring to allow start spot to be claimed, If null anyone can claim",
    "FortReplayMovableSpotLightPilotController:OriginalPlayer": "Player object that was active before this was spawned",
    "ECreativeMannequinAnalyticsInteractType.OpenStore": "Player opened the store from the mannequin",
    "EFortQuestObjectiveStatEvent.Ability": "Player pawn performs a specified ability. Target is the tags of the used ability spec.",
    "EFortQuestObjectiveStatEvent.AthenaGainXp": "Player performed an action and received Xp",
    "EFortQuestObjectiveStatEvent.PlaceTent": "Player placed a tent. Target is the tent that was placed.",
    "EFortQuestObjectiveStatEvent.AthenaVehicleTirePopped": "Player popped a tire on a vehicle. Target is empty.",
    "EFortQuestObjectiveStatEvent.ReceivedNPCGift": "Player received an NPC gift e.g. Health / XP / Item etc. Target is the NPC service object.",
    "EPersistenceFrameworkPlayerRegistration": "Player registration state",
    "FortObjectiveFilter_BuildingRepair": "Player repaired a building",
    "EFortQuestObjectiveStatEvent.RevealedPawnDisguise": "Player revealed a pawns disguise. (i.e. brawny smasher reveal via damage/conversation progress) Target is the player that reveled the disguise.",
    "FortVehicleSeatComponent:PlayerSlots": "Player seat slots. Replicated so don't allow for public changes.",
    "EFortQuestObjectiveStatEvent.SpentBarsOnNPCService": "Player spent bars to use an NPC service e.g. Sellitem / upgradeitem / Bounty / Intel. Quantity indicates bars spent. Target is the NPC service object.",
    "FortPlayerDeathReport:KillerPlayerState": "Player state of the killer, if any",
    "HUDMessageData:PlayerState": "Player state of the player who triggered the device",
    "FortDynamicRollWeightModifierTableRow:ActivatingPlayerTag": "Player tag that will enable this modification.\n             Other source of modification are not necessarily to be avoided. Tags are just one of many potential sources.\n             Though currently no other modification sources exist, the intention is that we can support adding to this row to generate other sources.\n             Which would be done by leaving this column blank in the table row for that modification.",
    "FortMarkActor:OwningPlayer": "Player that owns this mark",
    "FortObjectiveFilter_PawnDied:Downer": "Player that put them in the DBNO state before they died if valid",
    "GameplayCueNotify_Jetpack_Hovering:PlayerPawn": "Player this GCN was last activated on",
    "FakeKillRelevancyVictim:PlayerState": "Player to be fake killed",
    "FortWeaponRangedMountedCannon:FirePlayerInSeat": "Player to launch from the cannon",
    "EFortQuestObjectiveStatEvent.UsedNPCService": "Player used an NPC service e.g. Duel / Hire / Grantquest / Sellitem / upgradeitem / Bounty / Intel. Target is the NPC service object.",
    "EFortRequestedGameplayAction.StopPlaying": "Player wants to end gameplay",
    "EFortRequestedGameplayAction.EnterZone": "Player wants to enter a zone",
    "EFortRequestedGameplayAction.QuitGame": "Player wants to quit program entirely",
    "EFortRequestedGameplayAction.LeaveZone": "Player wants to return to the lobby",
    "EFortRequestedGameplayAction.ReturnToMainMenu": "Player wants to return to the main menu",
    "EKeepPlayingTogetherVotingStatus.OptedOut_Disconnected": "Player was Opted Out because they disconnected from the match",
    "EKeepPlayingTogetherVotingStatus.OptedOut_OnlyPlayerInSquad": "Player was Opted Out because they were the only player in their squad",
    "EKeepPlayingTogetherVotingStatus.OptedOut_PartySizeIncreased": "Player was forced to opt out because a new party member joined.",
    "EKeepPlayingTogetherVotingStatus.OptedOut_PartyMemberInLobby": "Player was forced to opt out because at least one member of their party is in the lobby.",
    "EKeepPlayingTogetherVotingStatus.OptedOut_PartyMemberOptedOut": "Player was forced to opt out because at least one member of their party opted out of KPT.",
    "EKeepPlayingTogetherVotingStatus.OptedOut_PartyMemberLeft": "Player was forced to opt out because they or one of their party members left their social party.",
    "EKeepPlayingTogetherVotingStatus.OptedOut_Forced": "Player was forced to opt out for some reason.",
    "EKeepPlayingTogetherVotingStatus.OptedOut_PlayerReturnedToLobby": "Player was opted out when they returned to the lobby.",
    "EGameReadiness.SittingOut": "Player was ready, but now needs to figure out if they should set to ready or not ready",
    "EFortQuestObjectiveStatEvent.RevivedFromDBNO": "Player was revived from down but not out",
    "PendingSpawnInfo:TargetPlayer": "Player we are spawning towards",
    "EFortQuestObjectiveStatEvent.DiscoverLoot": "Player's tamed pawn has discovered loot. Target is the tamed pawn that discovered loot.",
    "MinigameClassSlot:ClassDescription": "Player-facing description for this class slot",
    "MinigameTeam:TeamDescription": "Player-facing description for this team",
    "MinigameClassSlot:ClassName": "Player-facing name for this class slot",
    "MinigameTeam:TeamName": "Player-facing name for this team",
    "QuestProductData:DisplayName": "Player-facing name to display for this experience",
    "FortAIDirector:PlayerBotPawns": "PlayerBotPawns that have Registered with the system. This will only contain Pawns that have a Controller attached. Order is not preserved (RemoveAtSwap is used).\nCurrently this is only enabled for Athena",
    "SpecialEventGameUserSettingsControllerComponent": "PlayerController component that can be used in persistent special events\nto save client-authoritative progression data via the local GameUserSettings.\nThis would allow a player to leave the event, return at a later time,\nand have various objects be restored to their previous state.\nEach type of gameplay object that saves its state is responsible\nfor restoring its state to match the save data.",
    "FortWinnerPlayerData:PlayerId": "PlayerID from the PlayerState for this player",
    "FortDisconnectedPlayerReservation:PlayerId": "PlayerId of player with a session reservation",
    "FortAIDirector:PlayerPawns": "PlayerPawns that have Registered with the system. This will only contain Pawns that have a Controller attached. Order is not preserved (RemoveAtSwap is used)",
    "BuildingSMActor:EditingPlayer": "PlayerState of the player currently editing this actor, if any",
    "LatentRepPlayerData:PlayerState": "PlayerState of the player this struct is replicating data for",
    "FortControllerComponent_FakeKillRelevancy:ClientPlayerStateKillStepMap": "PlayerStates that have been queued for killing on this client, and their current step in the kill process",
    "FortObjectiveFilter_PlacementUpdate": "Players Placement has changed, called every time a player dies or is disconnected.\nNOTE: This value can increase in cases where a player logs back in, or is revived.",
    "ESkyfirePhase.Prison": "Players are arriving in the prison cells",
    "EActionOnSaveDataFailed.KickPlayer": "Players are kicked when failing to save data",
    "EActionOnSaveDataFailed.TerminateSession": "Players are kicked when failing to save data\nSession is terminated",
    "EAthenaGamePhase.Warmup": "Players can spawn but they take no damage.",
    "ESkyfirePhase.CoreGameplay": "Players have entered the playspace and are participating in the core skyfire gameplay. (This includes the time in loot rooms as that is different for each squad)",
    "FortActorComponent_MultiInteract:InteractingPlayers": "Players interacting with the owner only modified from server's side",
    "MinigamePlayerBucket:PlayerIds": "Players that are a member of this \"group\"\nDoes not change for the duration of the game (including between rounds)\nWith the exception of when a player joins/leaves the game or manually switches teams",
    "FortDeployableBaseManager:PlayersPendingPlotReset": "Players that logged out but there plot has not been reset yet",
    "FortGameSession:PlayersToRegister": "Players waiting to be registered",
    "DrawTaggedPlayerIndicatorsData:PlayerTag": "Players with this player tag will have indicators drawn for them.",
    "ActorOverlapEvent:PlayerState": "Playerstate of the pawn that entered or exited the volume.",
    "EFortPlaylistType.Creative": "Playground",
    "EFortLevelStreamingState.LSS_Ready": "Playing",
    "EFortMinigameState.InProgress": "Playing",
    "EFortPartyMemberInGameMode.InBattleRoyale": "Playing Battle Royale",
    "EFortPartyMemberInGameMode.InCreative": "Playing Creative",
    "EFortPartyMemberInGameMode.InSaveTheWorld": "Playing Save the World",
    "ESpecialEventRewindComponentState.Rewind": "Playing back the recorded data in reverse",
    "FortGameMode:CurrentPlaylistId": "Playlist ID assigned to this game, passed on command line or derived from matchmaking info",
    "FortPresenceGameplayStats:Playlist": "Playlist being played",
    "FortCharacterVehicle_Ostrich:EmotesEnabled": "Playlist configurable data that controls whether or not mech emotes are enabled",
    "PlaylistToActivityMapping:PlaylistName": "Playlist name (eg Playlist_DefaultSolo)",
    "FortQuestMapMarkerSettings:PlaylistForPluginsActivation": "Playlist the Map Marker Update Commandlet uses for plugins activation during the actor location caching. The Commandlet\nuses similar plugin activation logic as the existing game runtime, based on FGameplayTag matching.\nThis is necessary so the commandlet can activate plugins which add placed actors to the world.",
    "PlaylistToActivityMapping": "Playlist to Activity Name Mapping for PS5",
    "GCSettingsOverride:PlaylistName": "Playlist to apply the TimeOfDay override for",
    "TimeOfDayOverride:PlaylistName": "Playlist to apply the TimeOfDay override for",
    "PlaylistOverrideData:PlaylistName": "PlaylistName identifier for the playlist",
    "FortGameMode:CurrentPlaylistName": "PlaylistName of the Playlist to this game, passed on command line only for now... will eventually also be set normally",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:SafeZonePauseTime": "PlaylistSecondsRemainingCount when the timer was paused\n if the safe zone is NOT paused, -1",
    "FortReplaySequenceComponent": "Plays back a replay sequence from a ShotSequence file located in the same directory as a replay, if enabled.",
    "PlaysetInfo:Playset": "Playset",
    "PlaysetSettings:BoundingBox": "Playset bounding box expressed in number of grid cells\nBox width/depth (X/Y) should be odd",
    "PlaysetSettings:Category": "Playset category",
    "PlaysetSettings:CreativeTags": "Playset creative tags",
    "PlaysetSettings:LargeThumbnail": "Playset large thumbnail (256x256)",
    "PlaysetSettings:LongDescription": "Playset long multi-line description",
    "PlaysetSettings:Name": "Playset name",
    "PlaysetSettings:ShortDescription": "Playset short single-line description",
    "PlaysetSettings:SmallThumbnail": "Playset small thumbnail (128x128)",
    "FortProjectEditComponent_CreativeRoyale": "Playspace component to direct loading Creative Royale island to level save component",
    "FortProjectEditComponent": "Playspace component to enable VkEdit functionality",
    "FortProjectPlayComponent": "Playspace component to kick off level streaming for VkPlay",
    "FortPlayspaceMembershipActorComponent:BoundPlayspace": "Playspace instance bound to this Actor.",
    "FortPoiSwapPlayspace": "Playspace that loads user created content in place of POIs (Point's of Interest) on the BR map\nThis is spawned by the PoiSwapManager, which also handles streaming out the POI",
    "PlayspaceComponent_Logic": "PlayspaceComponent_Logic is an actor component made for APlayspaceLogic and can receive PlayspaceLogic events.",
    "PlayspaceComponent_PlayerManager": "PlayspaceComponent_PlayerManager inheritance layer that allows the Playspace system to plug into the PlayerController hierarchy without intruding on engine classes.\nTODO: Add support for adding more types of components to players including pawn components, gameplay abilities, gameplay effects, HUD contexts, and input components.",
    "FabricButtonBase:InteractingController": "Please add a variable description",
    "FabricButtonComponentBase:InteractingController": "Please add a variable description",
    "FortGameplayCueNotify_Loop:bTickEnabled": "Please talk to a programmer before using. Enables the tick for this GameplayCue. Only use if absolutely necessary, this could be a heavy perf hit.",
    "FortGameplayCueNotify_Loop:TickInterval": "Please talk to a programmer before using. When the tick is enabled, this is how often it'll update. The lower the number the heavier the perf hit.",
    "PendingDeployableBaseUser:BasePlot": "Plot assigned to the user",
    "FortPoiSwapPlayspace:LoadedPlot": "Plot that has been set to load. May be either fully loaded or in the process of loading\nUsed to avoid initiating the load of the same plot multiple times",
    "EValkyrieLibraryPluginFolderMode.CustomPath": "Plugin folder in the library hierarchy is set to 'Library Custom Path'",
    "EValkyrieLibraryPluginFolderMode.PluginName": "Plugin folder in the library hierarchy is set to the plugin name",
    "EValkyrieLibraryPluginFolderMode.Absent": "Plugin folder is absent from the library hierarchy (default)",
    "ValkyrieProjectDescriptor:Plugins": "Plugins owned by the project",
    "EncounterMobSpawnInfo:PointProviderFilterTags": "Point Provider filter tags that will be processed depending on the MobSpawnType, these should match the filter tags set in the MobEncounterData for the mob encounters you want to spawn.\nEEncounterMobSpawnType::VolumeBased - Applies these tags to the dynamically spawned LWM point provider volume.\nEEncounterMobSpawnType::StaticPointBased - Filters the actor references in StaticPathPointProviders to ensure they match these tags before fully enabling them as LWM point providers",
    "FortAthenaPointAroundPlayerProvider:IgnorePlayerWithTag": "Point Provider will ignore player with this tag",
    "PointProviderFilterEntry:Weight": "Point provider random weight",
    "PointProviderFilterEntry:ProviderFiltersTagQuery": "Point providers must match this query to be used.",
    "FortGameStateAthena:FlightPathSelectionCenter": "Point that was used as the center of generated flight paths. Not replicated (clients don't need it).",
    "FortGameStateAthena:DropZoneCenter": "Point that was used as the center of the drop zone. Not replicated (clients don't need it).",
    "FortGameplayTagQueryPerDifficulty:DifficultyInfo": "Point to what difficulty entry to use",
    "FortMissionPlacementActorPreferredTagInfo:DifficultyInfo": "Point to what difficulty entry to use",
    "FortTheaterDifficultyWeight:DifficultyInfo": "Point to what difficulty entry to use",
    "PickupInstigatorData:ScoreValue": "Point value of items contained in the pickup",
    "FortControllerComponent_CreativeMatchmaking:MatchmakingPortalModalWidget": "Pointer to an instance of the activity details modal widget.\nTODO: Rename from MatchmakingPortalModalWidget to something better",
    "FortControllerComponent_CreativeMatchmaking:CreativeMatchmakingFeedbackWidget": "Pointer to an instance of the feedback widget.",
    "FortMissionEntry:MissionGenerator": "Pointer to another mission generator asset, for nested definitions.",
    "ActiveFortCamera:Camera": "Pointer to camera instance",
    "ActiveFortCamera:ViewTarget": "Pointer to current view target",
    "FortPawn:AbilitySystemComponent": "Pointer to our AbilitySystemComponent.\n              Not the real suboject, this is a convenience pointer.\n              Lifetime for this component is managed for players in PlayerState,\n              for AIs it is managed by FortAIPawn (AIPawnAbilitySystemComponent).",
    "SpecialEventRewindComponentRecording:RewindComponent": "Pointer to our owning RewindComponent",
    "CreativeDeviceInstanceInfo:ActorPtr": "Pointer to the Actor, may not resolve to a valid actor on the client. Resolution should not be attempted until UE-144886 is resolved.",
    "FortAthenaMutator_RespawnAndSpectateSelect:ManagerObject": "Pointer to the UObject our ManagerPointer refers to. Used for replicating the manager to the client since interface pointers themselves cannot be replicated.",
    "FortMissionStormShieldManager:StormShield": "Pointer to the active storm shield",
    "ActorInstanceRecord:ActorPtr": "Pointer to the actor that this was created with. Used for potential resaves",
    "FortGameState:FeedbackManager": "Pointer to the feedback manager",
    "DynamicUIDirectorData:Instance": "Pointer to the instance spawned in the world.",
    "CinematicSequenceDeviceBase:LevelSequenceActor": "Pointer to the level sequence actor that is dynamically spawned when the device is activated",
    "FortControllerComponent_AdHocSquads:AdHocSquadsMutator": "Pointer to the mutator that manages Ad Hoc Squads.",
    "FortControllerComponent_TeamPawnColor:TeamPawnColorMutator": "Pointer to the mutator that manages Team Pawn Coloration.",
    "RespawnAndSpectateTargetData:OwningMutator": "Pointer to the mutator that owns this respawn target\n Used for figuring out if this respawn target should be available to specific players based on the Owning Mutator's settings",
    "FortHeldObjectComponent:OwningPawn": "Pointer to the pawn that picked up the held object",
    "CinematicSequenceDeviceBase:InstigatingController": "Pointer to the player controller that initiated playback of this device, nullptr if none",
    "FortHeldObjectComponent:PreviousOwningPawn": "Pointer to the previous pawn, null when never been held or current is held",
    "AthenaResurrectionComponent:ResurrectionLocation": "Pointer to the resurrection location we plan to use",
    "FortAthenaLivingWorldPrefabActorSpawner:SpawnedActor": "Pointer to the spawned actor",
    "FortHeldObjectComponent:GrantedWeapon": "Pointer to weapon granted by EquipAbilityWeapon()",
    "FortHeldObjectComponent:GrantedWeaponItem": "Pointer to weapon world item granted by EquipAbilityWeapon()",
    "FortDynamicBuilder:AllBuiltActors": "Pointers to all ABuidingActors built with our current instructions.\n     The indexing of this array will match SortedBuildingInstructions, but it may contain nullptrs if some buildings were not able to spawn or had to be destroyed.",
    "FabricMetaSoundManagerComponent:SourceBuilder": "Pointers to the metasound system used by this manager",
    "FortRandomPrefabSpawnHelper:PrefabPool": "Pointers to the prefabs that are still available for assignment",
    "ControlPointSpawnData:PointsEarnedPerSecond": "Points awarded per second for controlling a point",
    "ControlPointSpawnData:BonusPointsEarnedPerSecond": "Points awarded per second for controlling a point and performing bonus requirements (dancing)",
    "EFortReplicatedStat.MonsterDamagePoints": "Points gained by damaging monsters",
    "FortAthenaMutator_Disco:GoalScoreToWin": "Points needed to win the game",
    "FortSafeZoneDefinition:RejectOuterDistance": "Points outside of Radius - RejectOuterDistance will be rejected.",
    "FortConversionControlKeyCosts:Common": "Points required for common-level rarity",
    "FortConversionControlKeyCosts:Epic": "Points required for epic-level rarity",
    "FortConversionControlKeyCosts:Legendary": "Points required for legendary-level rarity",
    "FortConversionControlKeyCosts:Mythic": "Points required for mythic-level rarity",
    "FortConversionControlKeyCosts:Rare": "Points required for rare-level rarity",
    "FortConversionControlKeyCosts:Transcendent": "Points required for transcendent-level rarity",
    "FortConversionControlKeyCosts:Unattainable": "Points required for unattainable-level rarity",
    "FortConversionControlKeyCosts:Uncommon": "Points required for uncommon-level rarity",
    "FortSafeZoneDefinition:RejectRadius": "Points within this radius will be rejected.",
    "EActorFilterPolicy": "Policy to define how to handle an actor that has been added to this volume",
    "FortQuestPoolStats_PerPool:PoolName": "Pool identifier",
    "DronePickUpIndicatorComponent:IndicatorPool": "Pool used to allocate and maintain indicators in general",
    "FortUIManagerComponent_VictoryCrowns:IndicatorPool": "Pool used to allocate and maintain indicators in general",
    "FabricMetaSoundManagerComponent:FreeMetaSoundNodes": "Pools for nodes added to the graph\nALso keeps track of how many of that patch have been added for naming purposes",
    "FortMissionPopupWidgetData": "Popup mission info widget data",
    "EFrontEndCamera.Home": "Portal-like home page tab",
    "FortAthenaCreativePortal:DestinationActor": "Portals with chosen Destination Actors will only travel to a specific place and will not be eligible for reassignment",
    "RockVehicleSuspensionConfig:Strength": "Porting.",
    "FortMission:LeecherTimeScalingCutoff": "Portion of match duration played to trigger time contribution scaling. Range: 0 to 1.",
    "SlipperySlopeParams:SlopeLandingForceScalar": "Portion of vertical velocity to apply to deflection when landing. Also modified by slope surface normal.",
    "MyTownWorkerPortraitData:Portrait": "Portrait",
    "WorkerPortraitData:Portrait": "Portrait",
    "MyTownWorkerGenderData:PotraitData": "Portrait data",
    "WorkerGenderData:PotraitData": "Portrait data",
    "MyTownWorkerPortraitData:SelectionWeight": "Portrait selection weight",
    "FortCollectionBookSlotData:AllowedWorkerPersonalities": "Portraits that may be placed in this slot",
    "FMDeviceCableManagerComponent:PortsInVolume": "Ports in same volume, looked up by this component",
    "FortAnimInput_StandingPawnAnimAsset:TargetingPose": "Pose when aiming down sights",
    "FortAnimInput_StandingPawnAnimAsset:NonTargetingPose": "Pose when standing and not aiming down sights",
    "EMoveToolPlacementCheckResult.Untested": "Position has not been tested yet",
    "SavedPosition:Position": "Position of pawn at time Time.",
    "FortSeasonItemMapData:WorldLocation": "Position of the actor",
    "FabricChildActorComponent:ScreenGridPosition": "Position on the Fabric Screen's grid, where (0, 0) is the top left square.",
    "FortAbilityTargetSelection:bAlignShapeEdgeToSourceLocation": "Position the sweep shape so that its edge lines up with the source location, rather than being centered on it",
    "FortAIPawn:CurrentAimLocation": "Position to aim at.",
    "LiquidRibbonSplineSegment:PointPositions": "Positions of \"points\" along this spline segment determined by CalculateSplinePointsAndSetNiagaraData",
    "FortAIComponent_Telemetry:PossessedPawn": "Possessed pawn",
    "FortPickupEffect:SkeletalMesh": "Possible Skeletal Mesh we are using",
    "EBuildingAnim": "Possible building animation states",
    "EMatchmakingCompleteResult": "Possible completion states at the end of a matchmaking request",
    "EFortDialogFeedbackType": "Possible feedback types of dialog",
    "FortItemEntryStateValue:IntValue": "Possible int value",
    "FortPickupEffect:StaticMesh": "Possible mesh we are using",
    "EFortDialogResult": "Possible results from a dialog",
    "EFortDecoPlacementQueryResults": "Possible results from a query about placing a deco/trap",
    "EFortStructuralGridQueryResults": "Possible results from a query about the validity of adding a building actor to the structural grid",
    "EFlagStatus": "Possible returns for CheckFlag",
    "EMatchmakingStartLocation": "Possible start locations within matchmaking flow",
    "EBuildingFoundationType": "Possible states for a Building Actor to be in",
    "EFortStoreState": "Possible states for the store to be in",
    "ECabinEmailViewState": "Possible view states for the FortCabinEmailManagementWidget enumerated for easier switching between views",
    "TimeOfDayController_BlueprintBase:PostProcessBlendWeight": "Post Process Settings",
    "TimeOfDayController_BlueprintBase:bOverride_PostProcessBlendWeight": "Post Process Settings",
    "FortAthenaMutator_PlayerZoneSettings:PostProcessOverrideActors": "Post Process actor override choices",
    "FortAthenaMutator_TODOverride:PostProcessOverrideActors": "Post Process actor override choices",
    "GlobalWeatherData:PostProcessBlendWeight": "Post process blend weight to use for this weather event (based on time of day [0-24])",
    "GlobalWeatherData:PostProcessSettings": "Post process settings to use for the weather event",
    "FortTimeOfDayWeatherComponent:PostProcessComponent": "Post-process component used to apply a chosen weather event's post process settings",
    "FortTimeOfDayManager:OverridePostProcessComponent": "Post-process component used to override all post-processing with a custom post-process.  This is used in\nCreative mode to allow the user to take over the entire time of day post-process with one that was selected\nin the UI.",
    "GameplayVolume:PlayspaceClassTemplate": "Potential class template of a Playspace this volume wants to bringing into the Playspace system",
    "FortAIDirector:EncounterPawnDifficultyLevelModifiers": "Potential encounter pawn difficulty level modifiers",
    "AthenaCarPlayerSlot:ExitSockets": "Potential exit locations for this slot",
    "BuildingGameplayActorChaser:PotentialTargets": "Potential targets found by async query",
    "FortAIDirector:GuaranteedUpgradeGroupUtilityBonus": "Potential upgrades that can be applied to spawn groups",
    "FortAIDirector:SpawnGroupUpgrades": "Potential upgrades that can be applied to spawn groups",
    "ObjectDebuggerMenu": "Powerful per-object debugger which can list the object's uproperties and ufunctions, and allow the user to view, change or call them.\n\nAdditional object debugging interfaces can be made by inheriting the IDebuggableObject interface, which fills the Details panel of the object.\n\nCurrently accesible via console command ObjectDebugger",
    "CreativeActorMetaData:AudioCost": "Pre-calculated audio cost assets used by the actor",
    "CreativeActorMetaData:DrawCall": "Pre-calculated draw call cost assets used by the actor",
    "CreativeActorMetaData:InstanceSize": "Pre-calculated memory size of instances of the actor, in bytes",
    "CreativeActorMetaData:AssetSize": "Pre-calculated memory size of the assets used by the actor, in bytes",
    "CreativeActorMetaData:NetworkCost": "Pre-calculated network cost assets used by the actor",
    "FortAthenaAIBotDigestedTargetHeuristicSettings:PerceptionStateSettings": "Pre-calculated perception setting per perception state",
    "CreativeActorMetaData:SimulationCost": "Pre-calculated simulation cost assets used by the actor, in micro seconds",
    "BuildingActor:TransientOverrides": "Pre-defined set of property names (potentially on sub-objects) that should be treated as \"transient\" while Saving",
    "FortControllerComponent_ClientsideLeaderboardLogic:Leaderboard": "Pre-prepared data representing the leaderboard",
    "FortAthenaMutator_Wax:TeamLeadersInOrder": "Pre-sorted, replicated array of leading team's top players.",
    "ECharacterPartAttachmentTargetType": "Predefined Attachment Targets on the custom character part",
    "UserOptionDefinitionSettings:UserOptionCategoryTagPresets": "Predefined set of CategoryTags to apply to user options within specific categories.",
    "FortAnimNode_PredictiveSlopeWarping:LFootPrediction": "Prediction IK bone for the left foot.",
    "FortAnimNode_PredictiveSlopeWarping:RFootPrediction": "Prediction IK bone for the right foot.",
    "FortPlayerPawn:bLocalIsSkydiving": "Predictive skydiving variable",
    "EAthenaQuickChatFilteringType.FacingPickupOrActiveHotbarItem": "Prefer a pickup in front of us, but failing that a hotbar item will do",
    "FortAIPawn:HotspotType": "Preferred type of hotspot's slot",
    "EFortPartyState.BattleRoyalePreloading": "Preloading Battle Royale Assets",
    "HordeDifficultyTierInfo:QuestPrerequisite": "Prerequisite quest that is required for this difficulty tier to be available.",
    "FortTheaterRuntimeData:MissionAlertRequirements": "Prerequisites that must be met before any mission alerts will be enabled in this theater.",
    "ActiveStyleInfo:CurrentStyleRequest": "Preserved request which resulted in the CurrentStyle being applied",
    "EFortTutorialGlowType": "Preset glow types for highlighting widgets during the tutorial.",
    "PresetVols:PresetName": "Preset name",
    "FabricUserOptionSaveComponent:PresetAssets": "Presets for authored sets of user options.",
    "FortAthenaMutator_PlayerSettingsBase:GravityPresets": "Presets used for overriding gravity settings applied to Pawns",
    "OutpostPrestigeEffectsPerTheater:PrestigeEffects": "Prestige setup",
    "BuildingItemWeaponUpgradeActor:PlayerToUpgradeWeaponData": "Prevent exploits with last-minute switches where player switches to a higher-rarity item by caching start interaction item\n              Cache item being upgraded at start rather updating every interaction tick. It is stored in a map-like fashion so that in local\n              splitscreen the actor will be able to handle many simultaneous interactions",
    "DigestedVehicleDriving:bPreventTurningWhenStopping": "Prevent turning when stopping",
    "VehicleDriving:bPreventTurningWhenStopping": "Prevent turning when stopping",
    "FortAthenaMutator_InventoryOverride:PreventDefaultItems": "Prevents specific default items from being added to the inventory.  (Removed from FortGameModeAthena_GetInventoryOverride's incoming OutInventoryItems.)",
    "RiderComponent:bPreventExitRidingFromInput": "Prevents the player from exiting riding from pressing an Input Key\nNote: Riding can still be force stopped by manually calling \"StopRidingActor even if this is true",
    "FortToyPreviewActor": "Preview actor for toys in the front-end; not used at runtime",
    "FortItemPreviewOffPawnActor:ChildPreviewActor": "Preview actor spawned directly instead of using a child actor component (only for gliders right now...)",
    "EFortCostInfoTypes.Ability": "Preview cost of ability we are going to execute",
    "FortItemPreviewPedestal": "Preview pedestal for displaying mcp items in whatever 3D form the item specifies",
    "DaySequenceModifierComponent:bPreview": "Preview this day sequence modifier in the editor",
    "EActorFilterPolicy.POL_IgnorePreviewActors": "Previewing is primarily used by the creative move tool.\n       Adding these actors can skew is in valid volume tests giving incorrect results.",
    "FortPawnComponent_Convert:PreviousConverterPlayerState": "Previous Converter stored to check the diff during OnRep ConverterPlayerInfo",
    "FortPlayerControllerGameplay:PoiTagContainerTableID": "Previous POIGrid pos for mimic of updating large Poi Volumes as they are entered/exited (Server only)",
    "WaxPlayerDataEntry:PreviousKills": "Previous amount of kills",
    "HeistBlingIconData:PrevIconState": "Previous icon state",
    "HeistExitCraftIconData:PrevIconState": "Previous icon state",
    "SurvivalObjectiveIconData:PrevIconState": "Previous icon state",
    "HighlightObjectData:PreviouslyOverlappingActors": "Previous overlapping actors. Used for turning off highlight if they aren't overlapping anymore.",
    "SpecialActorRepData:PrevRepLocation": "Previous replicated location of the actor",
    "LatentRepPlayerData:PrevRepLocation": "Previous replicated location of the pawn",
    "SpecialActorRepData:PrevRepYaw": "Previous replicated yaw of the actor",
    "LatentRepPlayerData:PrevRepYaw": "Previous replicated yaw of the pawn",
    "WaxPlayerDataEntry:PreviousTeamTokens": "Previous token count for the team of this player.",
    "FortPlayerPawnAthena:PreviousVelocityXY": "Previous velocity vector in XY plane",
    "FortWindImpulseRadius:PreviousRadius": "Previously SET Radius.  Needed for interpolating values.",
    "FortWindImpulseRadius:PreviousMagnitude": "Previously SET magnitude.  Needed for interpolating values.",
    "FortEmporiumPriceFilterEntry:Filter": "Price enum",
    "FortProceduralCatalogCostPriceFactor:PriceFactor": "Price factor multiplier against base cost",
    "FortControllerComponent_TransientQuests:TrackedHunterBountyTargetPrice": "Price of current bounty target.",
    "BattlePassOfferData:Cost": "Price of the battle pass offer",
    "NPCServicePricingKeyRemapRow:KeyNameOriginal": "Pricing key we want to remap (e.g. \"HireNPC\")",
    "LocationPOIList": "Primarily used for nesting within maps.",
    "TaggedPOIList": "Primarily used for nesting within maps.",
    "TaggedPOI": "Primarily used to help designers provide information regarding the valid POIs to use.",
    "CombinedFeatureProgressSummary:PrimaryTextKey": "Primary Text Key for Web Localization",
    "CombinedFeatureProgressSummary:LocalizedPrimaryText": "Primary Text Key localized by UE4",
    "EFortAnnouncementChannel.Conversation": "Primary announcement, runs in the center top UI",
    "CosmeticBackendLoadoutSlot:EquippedItem": "Primary asset ID referencing a cosmetic item definition that is equipped in this slot. May not be loaded. Can\nbe empty\n\n@see ICosmeticLoadoutItemDefinition",
    "CosmeticBackendLoadoutSlot:SlotTemplate": "Primary asset ID referencing a source cosmetic loadout slot template used for this backend loadout slot. May\nnot be loaded\n\n@see UCosmeticLoadoutSlotTemplate",
    "MashAISpecialEncounterData:AIBotSpawnerDataAssetId": "Primary asset id of the UFortAthenaAISpawnerData that corresponds to an AI Bot Pawn. This will be ignored if DifficultyEncounterSettings is specified.",
    "FortCreativeItemListData:ItemPrimaryAssetId": "Primary asset id of the entry in the table",
    "FortAthenaVehicle:PrimaryCameraPitchConstraint": "Primary camera constraint (interpolates on when onGround entered from in air.)",
    "FortAthenaVehicle:PrimaryCameraYawConstraint": "Primary camera constraint (interpolates on when onGround entered from in air.)",
    "FortAttributeInitializationKey:AttributeInitCategory": "Primary category for the look-up",
    "EventScreenTrackData:TrackColorPrimary": "Primary color associated with this track. Passed into reward widgets.",
    "HomebaseBannerColor:PrimaryColor": "Primary color for the homebase banner",
    "FortPlayerController:HighlightedPrimaryBuilding": "Primary currently highlighted building",
    "FortWeapon:PrimaryFireSound": "Primary fire sound",
    "FortWeapon:ChargeFireSound": "Primary fire sound for charge weapons.",
    "FortWeapon:PrimaryFireStopSound": "Primary fire stop sound (used to cap looping sounds)",
    "AthenaTeamDisplayInfo:Icon": "Primary icon to display where there's space in menus",
    "FortAbilityTargetSelection:PrimarySource": "Primary source to use for targeting",
    "AthenaBattlePassOffer:RewardItem": "Primary/displayed reward granted in the offer",
    "FortBotCosmeticItemSetDataTableRow:BackpackAssetId": "PrimaryAssetId to identify Backpack Cosmetic Items",
    "FortBotCosmeticItemSetDataTableRow:CharacterAssetId": "PrimaryAssetId to identify Character Cosmetic Items",
    "FortBotCosmeticItemSetDataTableRow:SkyDiveContrailAssetId": "PrimaryAssetId to identify Contrail Cosmetic Items",
    "FortBotCosmeticItemDataTableRow:PrimaryAssetId": "PrimaryAssetId to identify Cosmetic Items",
    "FortBotCosmeticItemSetDataTableRow:GliderAssetId": "PrimaryAssetId to identify Glider Cosmetic Items",
    "FortBotCosmeticItemSetDataTableRow:PickaxeAssetId": "PrimaryAssetId to identify Pickaxe Cosmetic Items",
    "FortCollisionResponseSwapperComponent:CollisionPrimitiveComponent": "Primitive component on which we need to change the collision filter",
    "FortPhysicsObjectComponent:SimulatingComponent": "Primitive component that will be used for physics simulation.",
    "FabricTimelineSyncComponent:bPrintToScreen": "Print debug info to the screen",
    "EFortDayPhasePrio": "Prio for day phase changes",
    "BuildingGameplayActorChaser:TargetingPrioritizePlayersOverNpcs": "Prioritize players over NPCs?",
    "FortWaterBodyActor:WaterPriority": "Priority for special types of water when multiple water bodies may overlap. Default priority is zero, and within the same priority ties are broken by highest water body.\nA higher WaterPriority will select the water body over another with a lower priority no matter the height.",
    "MOBATurretPrioritySetting:AIPriority": "Priority for targeting AI; Lower numbers mean targeted first",
    "MOBATurretPrioritySetting:BuildingPriority": "Priority for targeting buildings; Lower numbers mean targeted first",
    "MOBATurretPrioritySetting:PlayerPriority": "Priority for targeting players; Lower numbers mean targeted first",
    "NativeCurieFXTypeSettings:GlowPriority": "Priority for the glow relative to other fx types; Higher number = higher priority; NOTE: CANNOT REUSE SAME PRIORITY ACROSS TYPES",
    "FortAthenaLivingWorldCategory:Priority": "Priority of the category, used to determine which category can use budget of available actors to spawn. Higher priorities will be processed first.",
    "FortCustomCameraController:CameraPriority": "Priority of this camera style vs other camera styles",
    "FortScriptedAction:ActionPriority": "Priority of this event, priority 0 will happen first",
    "FortInteriorAudioComponent_Ambient:AmbientEntryPriority": "Priority to use for the interior AmbientSystem entry",
    "PFWDataRegistrySourceToAdd:AssetPriority": "Priority to use when adding to the registry.  Higher priorities are searched first",
    "PlaylistAccess:DisplayPriority": "Priority to use when sorting the playlists for display, [lowest: first].",
    "FortSmartObjectSlotDefinitionData:Priority": "Priority used to decide which object will be used by the AI. When the priority between two objects is the same, the default behaviour will happen (ex. distance based or random).",
    "EFortCreativeServerPrivacySetting": "Privacy level of creative servers governing join and invite access.",
    "EMutualFriendsPrivacyPolicy": "Privacy policy for other users being able to see which of your friends are also friends with them",
    "FortTeamInfo:PrivateInfo": "Private team data replicated only to team members",
    "FortTeamPrivateInfo": "Private team data, replicated to only to team members",
    "ELoginResult.Console_PrivilegeCheck": "Privilege Check failed for this user",
    "FortAISpawnGroupUpgradeData:UpgradeProbabilities": "Probabilities to apply the upgrade",
    "WeaponAccuracy:TrackingDistanceNearErrorProbability": "Probability to use the Distance Near error instead of Distance Far based on range [0..1]",
    "FortSquadComsPickerSubCategoryIdentifier": "Probably not needed? Don't need subcategories?",
    "FortGameplayEffectContext:bIsFullBodyHit": "Probably should change name of this variable since now it's used more like a fatal stagger hit",
    "FortWeapon:ProceduralLayeringData": "Procedural layering data to be used for this weapon",
    "EFortPartyMemberLocation.ProcessingRejoin": "Processing a rejoin",
    "EFortQueuedActionUserStatus.WaitingForCloudRequest": "Processing failed",
    "EFortQueuedActionUserStatus.Failed": "Processing successful",
    "FInterpolationType.HSV": "Produces better results but is more expensive",
    "AutoSelectProfileData:ProfileAssetClass": "Profile will be selected if class of the quest asset matches ProfileAssetClass",
    "AutoSelectProfileData:FilenameLabel": "Profile will be selected if the filename contains FilenameLabel",
    "FortGameFeatureStatusBase:bIsProgressPaused": "Progress has been paused",
    "CombinedFeatureProgressSummary:CombinedProgress": "Progress out of 1",
    "FortGameFeatureStatusBase:Progress": "Progress out of 1",
    "FortMinigameObjectiveComponent:ProgressPercentage": "Progress percentage between 0.0 and 1.0",
    "TrackedObjective:ProgressPercentage": "Progress percentage between 0.0 and 1.0",
    "FortAIEncounterWaveProgressEstimation:SectionProgressEstimate": "Progress within the section of data 0-1",
    "EValkyrieValidationErrorCode.ProhibitedVersePath": "Prohibited Verse path",
    "EValkyrieValidationErrorCode.ProhibitedPluginConfiguration": "Prohibited plugin configuration",
    "ValkyrieProjectDescriptor:Bindings": "Project bindings",
    "ValkyrieProjectDescriptor:DataSets": "Project custom data sets",
    "ValkyrieProjectDescriptor:Description": "Project description",
    "ValkyrieProjectDescriptor:DocsUrl": "Project documentation URL",
    "ValkyrieProjectBindingsDescriptor:ProjectId": "Project guid",
    "VkLinkCodeInfo:ProjectId": "Project id",
    "VkLinkCodePublicModules:ProjectId": "Project id",
    "ValkyrieProjectDescriptor:Kind": "Project kind",
    "ValkyrieProjectReferenceDescriptor:Id": "Project reference identifier (link code, VRI, etc)",
    "FortAudioClustersSettings": "Project settings for AudioClusters in Fortnite",
    "FortAudioMixSettings": "Project settings related to sound mixing",
    "ValkyrieProjectDescriptor:TemplateCategory": "Project template category",
    "ValkyrieProjectBindingsDescriptor:ProjectVersePath": "Project verse path",
    "FortCarriedObject:ProjectileComp": "Projectile component to handle when the Object is dropped",
    "FortSkyTube:ProjectileEntryMultiplier": "Projectile entry change scaled by this amount. Multiplied by individual projectile's own multiplier.",
    "FortSkyTube:ProjectileForceMultiplier": "Projectile forces scaled by this amount. Multiplied by individual projectile's own multiplier.",
    "EPerceptionSoundType.ProjectileImpact": "Projectile impact",
    "FortHeldObjectComponent:ProjectileMovementComponent": "Projectile movement component that is retrieved off the owner",
    "FortWeaponRanged_Ostrich:ProjectileTemplate": "Projectile objects to be fired by this weapon",
    "FortProjectile_MOBATurret": "Projectile representing MOBA turret behavior",
    "FortLiquidGunProjectile:MinProjectileVelocityAngleToBeInLine": "Projectiles are considered to be moving \"in line\" (following each other) if the angle between the projectile's velocity and the vector to the next\nprojectile is within this angle.",
    "FortProjectileAthena": "Projectiles that use clientside collision against character meshes to provide more accurate hit locations.",
    "CustomizableObjectMultilayerProjectsVirtualLayer:bModifyProjection": "Projection.",
    "EFortPartyMemberLocation.Lobby": "Properly connected to the lobby",
    "UserOptionDefinitionSettings:ClassesWithExplicitUserOptions": "Properties belonging to the classes in this array will not be automatically added as user options, even if they pass the criteria.\nThis allows the user to explicitly choose which properties to make into user options (eg, when using a common base class with auto-add disabled).",
    "SquadChatOptionData": "Properties describing a BR squad chat messages picker option",
    "ChatOptionData": "Properties describing a chat messages picker option",
    "MapNoteOptionData": "Properties describing a map notes picker option",
    "AthenaQuickChatLeafEntry": "Properties describing a squad quick chat picker option",
    "EmoteOptionData": "Properties describing an emotes picker option",
    "ItemDefOptionData": "Properties describing an emotes picker option",
    "SquadQuickChatOptionData": "Properties describing an emotes picker option",
    "BuildingCategoryOptionData": "Properties describing an option in a building category picker",
    "BuildingOptionData": "Properties describing an option in a building sub-picker",
    "ItemCategoryOptionData": "Properties describing an option in an item-based picker",
    "FortPartyMemberRepData:LobbyState": "Properties pertaining to state within a game lobby",
    "FortMcpCollectedPlayerAugmentProperties": "Properties stored with each collected player augment.",
    "BakedMetadataCacheContainer:MetaDataToUseInBuilds": "Property Name to Metadata key and value pairs - values can be left blank",
    "ActorComponentRecord:ComponentRecordPropertyToActorGuid": "Property Name to actor GUID map. Used so we can fixup actor references after all actors are spawned.",
    "ActorTemplateRecord:PropertyToActorGuid": "Property Name to actor GUID map. Used so we can fixup actor references after all actors are spawned.",
    "FortTimeOfDayManager:DayPhasePostProcessComponent": "Property for internal referencing of individual post process components above.  We have to declare the\nnon-transient forms independently because the engine apparently expects the property name and component name to\nmatch and so puts all component properties in one \"component\" in the list (while still showing the components\nseparately) if they're not together.\nNOTE: Ideally this would be part of the LightAndFogPhaseSettings, but moving it there seems to break how this\nworks, possibly because we must remove DuplicateTransient, which may cause there to be extra components.  Based\non discussion with Bob, I didn't investigate further to confirm whether that was happening or some other problem.",
    "PropertyOverrideData:PendingPropertyIds": "Property ids that are still pending resolution since the last OnRep",
    "PropertyOverrideData:SharedPropertyIds": "Property ids used for correlating with externally hosted (replicated) property data",
    "EPropertyOverrideTargetType.ImmutableTarget": "Property overrides will be applied against the target object directly",
    "TransientOverride:PropertyName": "Property path to apply the Transient Override to",
    "ValkyriePropertyPermissionList:DenyList": "Property rows to always exclude",
    "ValkyriePropertyPermissionList:AllowList": "Property rows to only include",
    "SpatialMetricSampleImageProperties": "Property struct for spatial metric snapshot images.\n\nThis class contains the required properties to produce a snapshot image from a spatial metric sample.",
    "CraftingObjectComponent:FreeCraftingEnabled": "Property to control if we can free craft or not, set only via cheat manager",
    "FortTimeOfDayWeatherComponent:WeatherEventEndedCooldownMax": "Property to set the max time we wait after a weather event has finished before we start picking another one (pads for blend out time)",
    "FortTimeOfDayWeatherComponent:WeatherEventStartDelayMax": "Property to set the max time we wait after the game state is loaded before we start picking a storm",
    "FortTimeOfDayWeatherComponent:WeatherEventEndedCooldownMin": "Property to set the min time we wait after a weather event has finished before we start picking another one (pads for blend out time)",
    "FortTimeOfDayWeatherComponent:WeatherEventStartDelayMin": "Property to set the min time we wait after the game state is loaded before we start picking a storm",
    "FortTimeOfDayWeatherComponent:DisableWeather": "Property to set to disable all weather events",
    "FortTimeOfDayWeatherComponent:GlobalWeatherDataArray": "Property to setup the set of weather event data",
    "FortAIGoalManager:DefaultEnemyAssignmentSettings": "Property used to create enemy assignments when the Enemy Generator is used by an EQS query.",
    "FortAIEncounterPIDController:ProportionalGain": "Proportional Term",
    "FortAIEncounterPIDControllerSettings:ProportionalGain": "Proportional Term range 0-1. Response is a percentage of the max spawn points possible at the current difficulty level",
    "KatanaTargetingComponent:PropRemainingHealthToDestroy": "Props with this much health or less will be dashed through and destroyed.",
    "EColorBlindMode.Protanope": "Protanope (red weak/blind)",
    "FortAIPawn:bControlWalkingOffLedges": "Protect from falling off ledges when path doesn't contain navlinks",
    "FortGlobalMission:bIsPrototype": "Prototype missions only get generated in theaters that are marked as the Test theater type",
    "FortPossibleMission:bIsPrototype": "Prototype missions only get generated in theaters that are marked as the Test theater type",
    "FortMaterialStyleComponent:DefaultStyleSet": "Provide access to the style set from which the default style can be obtained",
    "FortGameStateZone:PawnIDCount": "Provide each Pawn that spawns with a unique ID - used for visual customization and randomization.",
    "ESpecialEventTODMModifyType.Persistent": "Provide the GameState with the persistent level's TODM, or null if there isn't one.  Show the persistent TODM.  Hide the GameState's old TODM.",
    "FortScriptedObjectMovement_MovableObjectBase:AssignedSlotDefinition": "Provided at runtime and will define how this object behaves.",
    "CreativeFunctionalTestConditionComponentBase": "Provides a base class for components defining conditions that need to be satisfied before test completion",
    "CreativeItemVariantAggregate": "Provides a bucket for aggregating item templates together, supporting cases where there are multiple being stacked together",
    "FortTaggedPropertiesComponent": "Provides a mapping from a gameplay tag to a property.\nOriginally added for AI to allow Goal Selection EQS queries to lookup a\ngameplay tag query on the owner pawn to run on possible goals that\nspecifies what types of items the AI is interested in. Allows making shared\nsets of properties such as all \"herbivores\" being provided the same component.",
    "FortChangeMonitoringStruct": "Provides a mechanism to determine whether any value has changed so long as setter calls are used.",
    "FortVehicleModInstanceDataComponent": "Provides a place to track dynamically spawned vehicle mod data for a given vehicle.\nIn some cases, changes made to a vehicle by a vehicle mod need to be tracked to meet design needs.\nSuch changes are tracked and used here. It is provided as an actor component so that any replication needs are easily handled.\neg instead of continuously spawning BGAs, reapplying a mod can heal already spawned BGAs to avoid spawning overhead.\nIn general this component should track data, rather than modifying vehicle handling logic.\nOne component is spawned for each applied mod using the vehicle mod config system.",
    "FortNonPlayerConversationParticipantComponent:DiscountTable": "Provides a price multiplier for services in the context of a Conversation.Entry tag",
    "FortWeaponModOverrideDataRow:AudioData": "Provides an override of audio data for a specific weapon for the mod",
    "FortCustomCameraController": "Provides data and logic to determine if the camera manager's current camera mode should be overridden with the camera mode\nspecified by this class. Can be used in a \"stack\" so that different conditions for when the camera mode should be overridden\ncan be defined per context and dynamically interchanged",
    "FortLevelScriptActor": "Provides fortnite-specific overrides for level script blueprints",
    "FortLobbyBeaconState:MissionGeneratorClassPath": "Provides information about the mission that is currently on the server",
    "FortAnimInput_SlopeInfo": "Provides information about the slope the character is standing on, as estimated by the movement component.",
    "FortAnimNode_QuadrupedSlopeWarping:ArmsRootBoneOffsetInterpolator": "Provides interpolation settings for when the arms root bone is adjusted.",
    "FortAnimNode_SlopeWarping:FloorOffsetInterpolator": "Provides interpolation settings for when the distance to the floor changes during movement.",
    "FortAnimNode_SlopeWarping:FloorNormalInterpolator": "Provides interpolation settings for when the floor normal changes during movement.",
    "FortAnimNode_SlopeWarping:PelvisOffsetInterpolator": "Provides interpolation settings for when the legs root bone is adjusted.",
    "FortKeyframedMovementComponent": "Provides teleportation and simple keyframe-based animation for an actor with network replication.\nAt a high level, the server instance of this component provides play/stop/pause control and teleportation\nThe animation data is replicated to the client, as are commands. Each tracks a current animation timestamp\nand uses that to evaluate the animation track each frame\n\nFUTURE DEV NOTE (FORT-517807): A player standing on a moving platform animated with this API may jitter. This hasn't been fully investigated,\nbut may be caused by not communicating the implied velocity of the platform to the camera smoothing/prediction system or to the\ncharacter itself.",
    "FortTheaterMapMissionData:MissionWeights": "Provides the available missions along with their associated selection weights for the theater",
    "FortTheaterMapMissionData:DifficultyWeights": "Provides the available zone difficulties with their associated selection weights for the theater",
    "FortAvailableMissionAlerts": "Provides the mission alerts currently available for a theater with the given unique id",
    "FortAvailableTheaterMissions": "Provides the missions currently available for a theater with the given unique id",
    "FortAIEncounterPIDControllerSettings": "Provides the settings for PID controller to be used by AI Encounters.",
    "EFortVisibilityBehavior.AlwaysSeen": "Proximity based with memory about which teams seen me",
    "BuildingGameplayActorAbilityDeliveryBucket:ProximityEffectBuckets": "Proximity-based effects gameplay effects to apply",
    "BuildingSMActor:MinimalReplicationProxy": "Proxy container for attribute data that we care about in athena",
    "BuildingFoundationStreamingData:ProxyInfoV2": "Proxy meshes for a specific foundation",
    "IslandFileToProcessByCommandlet:InputLevelSaveRecord": "Ptr to the loaded LSR of the island being processed",
    "EValkyrieValidationErrorCode.InvalidPublicApi": "Public api validation error",
    "FortMutatorListComponent:OnSettingsInitialized": "Public delegate called after settings have finished loading initially",
    "FortMutatorListComponent:OnSettingsChanged": "Public delegate for when settings are changed",
    "FortBattleRoyalePlayerAugmentSystem:OnMatchAugmentsResetEvent": "Public event dispatcher when the BR System of augments has been reset.",
    "VkTeamDoc:PublicProps": "Public properties",
    "FortTeamInfo": "Public team data, replicated to all clients\nDon't use for sensitive data like health values (ESP hacks)",
    "FortTouchAimAssistSettings:AutoTrackPullStrength": "Pull strength used when auto tracking is active.",
    "EFortQuestSubtype.PunchCard": "Punch card quest",
    "EFortQuestObjectiveItemEvent.PurchaseCardPack": "Purchase a card pack",
    "EFortQuestObjectiveStatEvent.PurchaseCardPack": "Purchase a card pack",
    "EStoreCurrencyType.RealMoney": "Purchase this with real money. Use CurrencySubType to specify the currency code (e.g. \"USD\").",
    "EStoreCurrencyType.MtxCurrency": "Purchased currency. Divided into 3 types: Earned, PurchaseBonus, and Purchased (transparent to players).",
    "GameplayStatMetadataTableRow:NewGameplayStat": "Purposefully putting at the end so that it appears last in editor UI",
    "FortPlayerController:SimpleLoadingScreenSoundMix": "Push/pop this mix when the simple fade-based loading screen is hidden/shown",
    "FortTheaterMapData:RuntimeInfo": "Put all the stuff that's opaque to the backend in here (with the exception of localized text)",
    "EFortAthenaArithmeticOperation": "Put here any basic arithmetic state tree tasks (ex. float, int, vector add/remove/multiply/etc.)",
    "EFortTheaterMapTileType.PvPFOB": "PvP \"forward operating base\"",
    "EFortZoneType.PVP": "PvP session",
    "EEventTournamentRound.Qualifiers": "Qualifying games for a tournament",
    "FortGameUserSettings:DesiredGlobalIlluminationQuality": "Quality settings for Nanite/Lumen",
    "FortGameUserSettings:DLSSQuality": "Quality settings for Nvidia's DLSS",
    "FortGameUserSettings:PreNaniteGlobalIlluminationQuality": "Quality settings for Pre Nanite/Lumen",
    "AthenaExtendedXPCurveEntry:RewardItemCountPerLevel": "Quantity of the reward granted each level",
    "AthenaSeasonalXPCurveEntry:RewardItemCount": "Quantity of the reward granted on level up",
    "NPCChosenItemData:StackSize": "Quantity owned single instance(e.g. 1 instance holding 10 bullets)",
    "CreativeLoadedLinkData:QueryIslandCode": "Query Island Code",
    "BGAConsumableSpawner:QueryConfig": "Query configuration parameters, if any, that can be specified for the given QueryTemplate",
    "FortBuildingActorSpawner:QueryConfig": "Query configuration parameters, if any, that can be specified for the given QueryTemplate",
    "ERedeemRealMoneyPurchaseRefreshType.Default": "Query current platforms and active subscription platforms when auto-refresh conditions are met",
    "GoalSelectionCriteria:GoalSelectionQuery": "Query defining goal selection, which allows picking goals (which are actors, locations, or both)",
    "GoalSelectionQueryInfo:GoalSelectionQuery": "Query defining goal selection, which allows picking goals (which are actors, locations, or both)",
    "FortMissionConfigDataBucket:Query": "Query identifying the config data",
    "FortMissionInstancedConfigDataBucket:Query": "Query identifying the data",
    "EncounterEnvironmentQueryInfo:QueryParams": "Query params",
    "FortAIPawn:RequiredWeaponPickupTagQuery": "Query that must be matched for this AI to be able to pickup a weapon.  If it's empty, the AI cannot pickup any weapons.",
    "FocusSetting:WeaponTagQuery": "Query that will be run on the weapon tags to see if these are the appropriate focus settings.",
    "DigestedFocusSetting:WeaponTagQuery": "Query that will be run to see if these are the appropriate focus settings.",
    "EncounterEnvironmentQueryInfo:EnvironmentQuery": "Query to run",
    "FortAthenaPointAroundPlayerProvider:QueryTemplate": "Query to run to find points around the player. If none is specified, the provider will return the player's location.",
    "BelongTreatyProjectileMovementComponent:PhaseThroughActorsTagQuery": "Query used to add an extra layer of control over movement collision for this projectile, it will ignore collision with anything that matches the tag query defined here",
    "FortDifficultyEncounterSettings:OverrideEncounterEnvironmentQueryInfo": "Query used to spawn Rift",
    "FortCosmeticRestrictionSourceQuery": "Query used to test if a restriction should be active if a cosmetic (currently only character) is present in the\nplayer's loadout.",
    "FortCosmeticRestrictionTargetQuery": "Query used to test if a restriction should be applied to a cosmetic. If the cosmetic fulfills this query, and the\nrestriction is active, then the cosmetic cannot be equipped by a player.",
    "EFortWorldRecordState.RetrievingZoneInformation": "Querying the mcp about the global theater data",
    "EFortWorldRecordState.LoadingWorldRecord": "Querying the mcp about the zone",
    "EFortItemType.Quest": "Quest",
    "FortAthenaMutator_Wax:NumTokensCollectedStatTrackingQuestItemDefinitions": "Quest Item Definition that pertains to the Token collecting stats\n     This variable is used to determine if there are any player quests that are pertainent to how many Wax Tokens the player has collected.",
    "FortGameStateComponent_Quests:PlayersReceivingStatEvents": "Quest System 1",
    "EFortQuestState.Active": "Quest acquired and progress can be made on the quest",
    "EQuestSpecificationMethod.Slotted": "Quest can be resolved from service provider 'supported quests' array using the index provider",
    "EQuestSpecificationMethod.ServiceProvider": "Quest can be resolved from the service provider's consolidated quest component",
    "EFortQuestState.Claimed": "Quest completed and rewards claimed",
    "AthenaMidSeasonUpdate:QuestRequirements": "Quest completion requirements that must all pass in order to run this update",
    "PartyMemberSharedQuestInfo:Qst": "Quest definition templateId",
    "FortRequirementsInfo:QuestDefinition": "Quest definition that is required to be completed.  May only require a specific objective in the quest be completed; see CompletedQuestObjectiveStatHandle below.",
    "FortLinkedQuest:QuestDefinition": "Quest definition that needs to be active for this link to be enabled",
    "FortRequirementsInfo:ActiveQuestDefinitions": "Quest definitions of which at least one is required to be active (i.e. player must have the quest and NOT have completed it yet)",
    "EFortNotificationEntryCompletionStatus.Active": "Quest is in progress.",
    "FortQuestMapMarkerComponent:QuestMapMarkerTag": "Quest map marker identifying tag it's FName is used to identify which location it is",
    "FortQuestManagerAttributes:QuestPoolStats": "Quest pool state - see FFortQuestPoolStats",
    "EQuestParticipationScope.Personal": "Quest should be granted through the player's UControllerComponent_Quests",
    "EQuestParticipationScope.Playspace": "Quest should be granted through the playspace's UPlayspaceComponent_Quests",
    "EQuestParticipationScope.Party": "Quest should be granted through the world's UGameStateComponent_PartyQuests",
    "EQuestParticipationScope.World": "Quest should be granted through the world's UGameStateComponent_Quests",
    "EQuestParticipationScope.Squad": "Quest should be granted through the world's UGameStateComponent_SquadQuests",
    "EFortQuestState.Inactive": "Quest suspended - progress on objectives is ignored",
    "EFortQuestType.TransientQuest": "Quest that removes itself after being claimed",
    "EQuestSpecificationMethod.Static": "Quest to be specified directly inline",
    "EFortQuestAnalyticState.Claimed": "Quest was claimed",
    "EFortQuestAnalyticState.Granted": "Quest was granted",
    "EFortNotificationEntryCompletionStatus.New": "Quest was just given to the player or they haven't made any progress yet.",
    "FortRequirementsInfo:UncompletedQuestDefinition": "Quest which must NOT have been completed in order to pass requireements.  Not having the quest at all is\ntherefore a pass.  Completing it makes the requirement fail.  Essentially this is meant to be used to \"re-lock\"\nthe zone after a player passes a progression point.",
    "FortPlayerSurveyAnalyticsQuestion": "Question data structured for use with Analytics",
    "FortPlayerSurveyCMSQuestion": "Question data structured for use with CMS",
    "PartyMemberBucketData:Qsts": "Quests",
    "FortQuestRewardNotification:QuestsAndRewards": "Quests and rewards granted",
    "FortPlayerStateComponent_Quests:GrantedQuests": "Quests granted transiently by the server. Exported to the backend",
    "AutoGoalCardData:QuestSubtype": "Quests matching this type and subtype will automatically be grouped into this auto goal card.",
    "AutoGoalCardData:QuestType": "Quests matching this type and subtype will automatically be grouped into this auto goal card.",
    "EFortQuestType.Athena": "Quests that are only relevant in the Athena game mode; these are typically helper quests that aren't directly shown to the user",
    "FortQuestPoolTableRow:PrerequisiteCompletedQuests": "Quests that must be completed and/or claimed for pool to be active",
    "FortQuestPoolTableRow:PrerequisiteNotCompletedQuests": "Quests that should not have been completed and/or claimed for pool to be active",
    "FortPlayerStateComponent_Quests:AbandonedQuests": "Quests that were deleted by the server. Exported to the backend.\nOriginally used to support an NPC service that replaced a quest.",
    "FortClientAnnouncementManager:Channels": "Queue of announcements that are pending, sorted in priority order per channel",
    "FortUserCloudRequestQueue:RequestQueue": "Queue of the cloud requests for the user",
    "FortPawnVocalChord:QueuedSpokenLine": "Queued spoken line, play as soon as previous line completes",
    "SupplyDropItemDeliverySpawnData:QueuedSpawnTimes": "Queued times of when drops want to spawn",
    "EFortQuestSubtype.QuickChallenge": "Quick (or repeatable) challenge",
    "CharmSlotMetadata:SlotDescription": "Quick-reminder description of the slot (for editor use only)",
    "ItemWrapSlotMetadata:SlotDescription": "Quick-reminder description of the slot (for editor use only)",
    "QuickHealPrioritySpecifier:QuickhealItemTag": "Quickheal Item tag used to add to the Quickheal list.",
    "EFortMissionStatus.Quit": "Quit the mission before completion",
    "EFortItemType.Quota": "Quota item",
    "ConditionalFoundationQuota": "Quota of conditional building foundations to stream in",
    "EnvironmentBuildingRestorationRecord:QuotaSelectedLootTierKey": "Quota tier key, if any",
    "EnvironmentBuildingRestorationRecord:QuotaSelectedLootTier": "Quota tier, if any",
    "EFoundationOrdering.GridWalk": "Radial from start poing (e.g. lobby island) in multiple passes by depth (parent-child relationsip)",
    "EFoundationOrdering.RadialByDepth": "Radial from start point (e.g. lobby island)",
    "CenterSafeZoneOnPOIInfo:WithinRadius": "Radius around the determined location to center the safezone on. Must be greater than or equal\n    to RejectRadius or this entry will be treated as if it weren't enabled.",
    "CenterSafeZoneOnPOIInfo:RejectRadius": "Radius around the provided location in which the safe zone cannot be located. Must be\n    less than or equal to WithinRadius or this entry will be treated as if it weren't enabled.",
    "SafeZoneRoute:EndRadius": "Radius at the end location",
    "SafeZoneRoute:StartRadius": "Radius at the start location",
    "FortZiplineLinkComponent:SnapRadiusOverride": "Radius at which the link generation will look for a connection.",
    "HUDNavArrow:DefaultApproachRadius": "Radius at which to fade out",
    "EFortVisibilityBehavior.OnceSeenAlwaysSeen": "Radius based distance checks w/ LOS/Facing optional",
    "FortSplineGroundPath:PathTestRadius": "Radius for path to be in range. i.e. Hero's required distance to be 'on' the path.",
    "MilkshakeControllerComponent:NearbyBuildingActorsUpdateScanRadius": "Radius for scanning nearby buildings to apply damage fx to. Setting this to 0 will disable scanning for nearby building actors",
    "SafeZoneLocationParams:MaxRadius": "Radius from AnchorLocation in which to choose the new location",
    "SafeZoneLocationParams:MaxMapRadius": "Radius from MapCenter that should be considered within the map",
    "FortGameplayCueForceFeedbackInfo:EffectRadius": "Radius from location to apply effect to",
    "FortGameplayCueForceFeedbackInfo:FarEffectRadius": "Radius from location to apply effect to",
    "TornadoRadialForce:Radius": "Radius of applied force",
    "RadialWindField:ForceRadius": "Radius of applied physics forces (gameplay)",
    "FortEnemySpawn:ClusterRadius": "Radius of dormant pawn cluster using this spawn",
    "FortCurieExecutionParams:LandscapeEffectRadius": "Radius of effect on the landscape, if a landscape is targeted and struck",
    "FortAthenaMutator_Skyfire:BlockStormRadius": "Radius of how far from our center point (determined by BlockStormCenterActorClass) we want to block the storm",
    "LinearWindField:Direction": "Radius of physics field (cosmetics)",
    "RadialWindField:FieldRadius": "Radius of physics field (cosmetics)",
    "FortFallTeleportComponentBase:SphereTraceRadius": "Radius of sphere used to trace for valid teleport locations",
    "SafeZoneLocationParams:Radius": "Radius of the associated safe zone phase. Used as additional information when allowing the game mode to override rejection locations.",
    "WindSplineComponent:InwardForceInnerRadius": "Radius of the inner ring where we try to keep the target unless they steer out hard enough.",
    "FortSkyTube:InnerMagnetRadius": "Radius of the inner ring/magnet where we try to keep the player unless they steer out hard enough.",
    "FortCreativeInteractVisualizationComponent:InteractRadius": "Radius of the interaction.",
    "VehicleSpringInfo:SpringRadius": "Radius of the sphere sweep used for shocks. If zero, use a raycast instead.",
    "FortSnapOnSurfaceComponent:SphereRadius": "Radius of the sphere to use for the snapping.",
    "MotorcycleWheel:Radius": "Radius of the wheel",
    "VehiclePontoonBuoyancyDataExtended:MinRadiusToSink": "Radius required to sink the vehicle.",
    "FortAthenaMutator_Skyfire:ExitSkydiveSquadRadius": "Radius that is used when determining how close squadmates will be for the exit skydive. Each player's skydive location will be within this radius around the squad's exit skydive location.",
    "BuildingRift:SpawnPointRadius": "Radius to check if two spawn points are equal",
    "FortAIPawn:RunVariationRadius": "Radius to consider run variations",
    "FortSkyTube:MovementRestrictionRadius": "Radius to restrict player movement to. Prevents players from flying out the sides of the tube. Does nothing if <= 0.",
    "FortAthenaLivingWorldWardComponent:DefaultRadius": "Radius to use by default. Similar to calling SetWardRadius on BeginPlay",
    "EBuildingStairsRailing.Full": "Railings everywhere, all dropdown links are smashable",
    "EFortAIWaveProgressSection.SectionTwo": "Ramp",
    "FortLiquidGunProjectile:RandomDetachmentAngleFirstHalf": "Random angle determined on server and replicated. For use with detachment calculations on the first half of the segment.",
    "FortLiquidGunProjectile:RandomDetachmentAngleSecondHalf": "Random angle determined on server and replicated. For use with detachment calculations on the second half of the segment.",
    "DigestedFocusSetting:IgnoreThreatDurationDeviation": "Random deviation of the IgnoreThreatDuration",
    "FocusSetting:IgnoreThreatDurationDeviation": "Random deviation of the IgnoreThreatDuration",
    "DigestedFocusSetting:IgnoreThreatDeviationWhenNotAttacking": "Random deviation of the IgnoreThreatTimeWhenNotAttacking",
    "FocusSetting:IgnoreThreatDeviationWhenNotAttacking": "Random deviation of the IgnoreThreatTimeWhenNotAttacking",
    "LookAtDigestedSetting:LookAtDurationDeviation": "Random deviation of the LookAtDuration",
    "LookAtSetting:LookAtDurationDeviation": "Random deviation of the LookAtDuration",
    "EvasiveManeuverSkillSettings:CrouchRandomDeviationDelay": "Random deviation to be added or subtracted to the time between Crouch evasive maneuver",
    "DigestedEvasiveManeuverSkillSettings:CrouchRandomDeviationDelay": "Random deviation to be added or subtracted to the time between Crouch evasive maneuvers",
    "EvasiveManeuverSkillSettings:DodgeRandomDeviationDelay": "Random deviation to be added or subtracted to the time between Dodge evasive maneuver",
    "DigestedEvasiveManeuverSkillSettings:DodgeRandomDeviationDelay": "Random deviation to be added or subtracted to the time between Dodge evasive maneuvers",
    "EvasiveManeuverSkillSettings:JumpRandomDeviationDelay": "Random deviation to be added or subtracted to the time between Jump evasive maneuver",
    "DigestedEvasiveManeuverSkillSettings:JumpRandomDeviationDelay": "Random deviation to be added or subtracted to the time between Jump evasive maneuvers",
    "LookAtSetting:LookAtDelayDeviation": "Random deviation to be added or subtracted to the time between LookAtDelay",
    "LookAtDigestedSetting:LookAtDelayDeviation": "Random deviation to be added or subtracted to the time between LookAts",
    "EFreeFallingMode.Random": "Random location inside safezone",
    "FortSupplyDropGamePhaseData:SupplyDropTimeDeviation": "Random time (+/-) added to SupplyDropTimeInterval.",
    "FortGameSessionDedicated:DataAssetDirectoryUpdateCheckVariance": "Randomized additional offset added to asset update check base time",
    "FortGameSessionDedicated:HotfixCheckVariance": "Randomized additional offset added to hotfix check base time",
    "FortMotorSimPatternState:SpeedMax": "Randomizes animation speed of the curve",
    "FortMotorSimPatternState:SpeedMin": "Randomizes animation speed of the curve",
    "BuildingContainer:PotentialRandomUpgrades": "Randomly chosen upgrades.",
    "EDefaultCharacterSelection.DefaultBase": "Randomly pick a character",
    "EFortFeedbackSelectionMethod.FFSM_Random": "Randomly select the appropriate context for the feedback to play",
    "EFortCreativeDiscoveryDeterminism.Random": "Randomly select.",
    "BuildingContainer:NumItemsToDropRange": "Range (Min,Max) of number of Items to drop from this container.",
    "FortRangedWeaponStats:AIAthenaHearFiringNoiseRange": "Range AI can hear the weapon Firing",
    "FortBaseWeaponStats:RngMax": "Range after which ineffective damage is done",
    "FortRangedWeaponStats:AutofireRange": "Range at which this weapon can autofire",
    "FortAIVisibilityDataTableRow:RangeSettings": "Range based settings for visibility",
    "FortBaseWeaponStats:RngLong": "Range considered \"long\"",
    "FortBaseWeaponStats:RngMid": "Range considered \"mid\"",
    "FortBaseWeaponStats:RngPB": "Range considered \"point-blank\"",
    "FortObjectiveFilter_Repair:PercentRepaired": "Range for Percent of total health that was repaired during this event, between 0 and 100",
    "FortHeldObjectComponent:ThrowAngularImpulseRange": "Range for angular impulse magnitude to apply on throw (in degrees)",
    "FortObjectiveFilter_Repair:AmountRepaired": "Range for minimum / maximum repairing needed to be done for this objective to progress",
    "FortTouchAimAssistSettings:TargetRange": "Range from player's camera used to gather potential targets.\nNOTE: This range is scaled using the field of view in order to keep ranges relative across all weapon types.\nIE: A range of 5000 will be much larger as the field of view gets smaller.",
    "FortAimAssist2D_Settings:TargetRange": "Range from player's camera used to gather potential targets.\nNote: This is scaled using the field of view in order to limit targets by their screen size.",
    "FortPicklePortal:AttenuationRadiusRange": "Range of the Attenuation Radius of the Spotlight Component",
    "FortPicklePortal:DelayTimeRange": "Range of the Delay Time for the EffectPreset",
    "FortPicklePortal:InnerConeAngleRange": "Range of the Inner Cone Angle of the Spotlight Component",
    "FortPicklePortal:IntensityRange": "Range of the Intensity Range of the Spotlight Component",
    "EncounterMobManagerComponent:LWMDensityRange": "Range of the LWM density to reserve for all Mob s to be spawned by this encounter",
    "FortPicklePortal:OuterConeAngleRange": "Range of the Outer Cone Angle of the Spotlight Component",
    "FortPicklePortal:WetLevelRange": "Range of the Wet Level for the EffectPreset",
    "HoverDroneMovementComponent:TurboAccelerationRange": "Range of valid accelerations (mapped to TurboAccelerationAltitudeRange)",
    "FortAnimInput_TurnInPlace:EmoteYawOffsetSofteningInputRange": "Range of yaw offset (between camera and character) where the character starts turning during an emote. This range is mapped to EmoteYawOffsetSofteningOutputRange to control how much\nthe character turns with the camera.",
    "FortObjectiveFilterType_NearbyPlayers:DistanceRange": "Range to check nearby players in meters",
    "FortRangedWeaponStats:AthenaAimAssistRange": "Range until aim assist stops.",
    "AIVisibilityRangeSettings:Range": "Range upto which this visibility setting is applicable",
    "FortWeaponRangedDualFerret": "Ranged weapon for Ferret (biplane)",
    "FortWeaponRangedOctopusTowhook": "Ranged weapon for Octopus (hamsterball)",
    "FortWeaponRangedSpaghettiTowhook": "Ranged weapon for Spaghetti (water skiing)",
    "FortWeaponRangedDualForVehicle": "Ranged weapon for dual muzzled vehicle guns. e.g. mounted turret, biplane, etc.",
    "FortWeaponRangedMountedCannon": "Ranged weapon for mounted Cannon",
    "FortWeaponRangedDualMountedTurret": "Ranged weapon for mounted turret",
    "FortWeaponRangedForVehicle": "Ranged weapon for vehicle. e.g. cannon, etc.",
    "FortWeaponRangedTowHook": "Ranged weapon that fires a tow-hook to attach simulated actors together",
    "McpLeaderboardResultRow:Rank": "Rank for this player for this stat",
    "EFortQuestObjectiveStatEvent.AthenaRank": "Rank held at the end of an Athena match. Target is empty.",
    "FortLootTierData:QuotaLevel": "Rarity of this tier. Used by the quota system to limit the number of rare items in a level.",
    "CcaCsvCosmeticPropertiesData:RarityLevelEnum": "RarityLevelEnum is intended to be set during import in the OnPostImport function which is why it's optional.",
    "FortBaseWeaponStats:EquipAnimRate": "Rate at which Equip anim montage plays",
    "FortMantisTechniqueCharacterSettings:ExecutionCharacterRotationRate": "Rate at which the character rotates (in degrees per second) during the \"execution\" phase of this technique.",
    "FortMantisTechniqueCharacterSettings:RecoveryCharacterRotationRate": "Rate at which the character rotates (in degrees per second) during the \"recovery\" phase of this technique.",
    "FortMantisTechniqueCharacterSettings:WindupCharacterRotationRate": "Rate at which the character rotates (in degrees per second) during the \"windup\" phase of this technique.",
    "FortCurieElementDefinition:IntensityDecayRate": "Rate at which the intensity of the element should naturally decay (intensity per second); 0.f means no natural decay",
    "FortPawn:ClientNonRenderedAnimUpdateRate": "Rate of animation evaluation when non rendered (off screen and dedicated servers).\na value of 4 means evaluated 1 frame, then 3 frames skipped",
    "BuildingActor:bBeingDragged": "Rather it is being dragged in the editor",
    "FortActiveMontageDecisionWindow:bReceivedPrimaryInput": "Rather primary input was received during this window, may have released already",
    "FortActiveMontageDecisionWindow:bReceivedSecondaryInput": "Rather secondary input was received during this window, may have released already",
    "PlaysetLevelStreamComponent:bWaitOnMessageBeforeLoading": "Rather than loading when this playset component replicates, wait for a message from the UGameplayMessageRouter in order to load and unload the playset.",
    "BuildingActor:bUsesDayPhaseChange": "Rather this actor consumes the day phase change kismet event",
    "FortGameplayEffectContext:bIsFatalHit": "Rather this effect killed the target",
    "FortGameplayEffectContext:bIsCriticalHit": "Rather this effect was a critical hit",
    "FortMarkActor:bFinishedEditing": "Rather this has been finished",
    "BuildingSMActor:bMirrored": "Rather this piece is mirrored",
    "FortSearchBounceData:SearchAnimationCount": "Rather to play the search animation. Increment when searched",
    "FortGameplayCueAttachInfo:AttachType": "Rather to stay attached, or spawn once and stay free",
    "BuildingActor:bShouldTick": "Rather we should currently be ticking",
    "AgeRatingDisplayData:RatingBoard": "Rating Board",
    "HeroSpecializationDesignerData:RatingLookup": "Rating data",
    "TrapItemDefintionDesignerData:RatingLookupForm": "Rating lookup data",
    "EPlayerDamageHeightRatioDetectionType.FromBottom": "Ratio starts from character bottom (example: Ratio = 0.8f -> valid if hit is in the 20% of the upper body)",
    "EPlayerDamageHeightRatioDetectionType.FromTop": "Ratio starts from character top (example: Ratio = 0.8f -> valid if hit is in the 20% of the lower body)",
    "MinigameHighScoreEntryRow:Score": "Raw representation of the player's score; interpreted by scoring template",
    "MinigameScoreEntry:Score": "Raw representation of the player's score; interpreted by scoring template",
    "FortCollectionBookPageData:SectionsString": "Raw string of sections that will be placed in this page (\"<section name>;<section name>;...\")",
    "FortCollectionBookSectionData:SlotsString": "Raw string of slots that will be placed in this section (\"<slot name>;<slot name>;...\")",
    "SkyAtmosphereValues:RayleighScatteringScale": "Rayleigh scattering coefficient scale.",
    "FortGameplayEffectDeliveryActor:bDoExplosionReentrancyGuard": "Re-entrancy guard for do explosion",
    "EHmxAudioAnalysisType.FFT": "Read texture data from the audio analyzer FFT (the texture will be as wide as the number of FFT bins)",
    "EHmxAudioAnalysisType.VUMeter": "Read texture data from the audio analyzer VU meter (the texture will be 1 pixel wide)",
    "EHmxAudioAnalysisType.BandFilterBank": "Read texture data from the audio analyzer band filter bank (the texture will be as wide as the number of bands in the filter bank)",
    "EHmxAudioAnalysisType.SemitoneFilterBank": "Read texture data from the audio analyzer semitone filter bank (the texture will be as wide as the number of midi notes in the filter bank)",
    "EHmxAudioAnalysisType.Waveform": "Read texture data from the audio analyzer waveform (the texture will be as wide as the number of samples held by the analyzer)",
    "FortAthenaItemManagementInventoryFilterTabLabelInfo:FilterTabNameId": "Read-only tab name id purely so that developers can tell what filter tab this info is for.",
    "FortItemManagementInventoryFilterTabLabelInfo:FilterTabNameId": "Read-only tab name id purely so that developers can tell what filter tab this info is for.",
    "ESpawnMachineState.BeingUsed": "Ready to be used by anyone",
    "EPayoutRewardType.GameRelated": "Real cash",
    "ERedeemRealMoneyPurchaseRefreshType": "Real money purchase refresh type",
    "BuildingRealitySapling": "Reality Sapling Building SM Actor native class (s21 persistent trees that players can plant and nourish)",
    "BuildingRealitySeedPod": "Reality Seed Pod Building SM Actor native class (s21 pods that supply reality seeds items)",
    "EPathTestQueryType.NavmeshRaycast2D": "Really Fast",
    "FortPlayerControllerAthena:IndicatedActorManagementComponent": "Really?? Nothing uses this cached reference?\nUPROPERTY(VisibleDefaultsOnly)\nUFortControllerComponent_ContextualChallenges* ContextualChallenges;",
    "FortBanHammerStrike:Reason": "Reason code - placeholder, not used yet",
    "GasEventHistoryItem:Reason": "Reason for ability activation failure, or maybe success, I have no idea",
    "EUnconvertReason": "Reason used when a Pawn is Unconverted",
    "FortLabradorComponent_Telemetry:DespawnReason": "Reason why Labrador despawn",
    "EFortActivityIsLockedReason": "Reason why a game activity is locked.",
    "EServerRestartReason": "Reason why we're asking the server to restart",
    "KairosSubmitLogOptions:Type": "Reason/type associated wtih these options",
    "EBuildingTickReason": "Reasons for requesting to tick the building actor, useful for debugging/optimization",
    "EFortServerContentRestartReason": "Reasons that would cause a child server to ask its parent to restart, typically due to different content being requested post-fork.\nI am hopeful that more than one of these won't be changing at a time (or we won't particularly care if that's the case) but made it\nlike a bitmap anyway in case that's needed down the line.",
    "PurchaseFailureLogSubmitOptions:DoNotUploadReasons": "Reasons to not submit logs for",
    "PartyFailureLogSubmit:Reasons": "Reasons to submit logs for",
    "EStimType.Hurt": "Received damage from this actor from damage perception",
    "FortPresenceGameplayStats": "Recent gameplay stats to share in presence",
    "EPerceptionState.ObstacleBlockedBy": "Recognized that there is an smashable obstacle blocked by into one",
    "EPerceptionState.ObstacleIncoming": "Recognized that there is an smashable obstacle on our path or we bumped into one",
    "EPerceptionState.ObstacleDetectedTrap": "Recognized that there is an trap blocking us",
    "FortRangedWeaponStats:RecoilDownsightsMultiplier": "Recoil multiplier applied when aiming downsights",
    "FortRangedWeaponStats:AthenaRecoilDownsightsMultiplier": "Recoil multiplier applied when aiming downsights.",
    "FortRangedWeaponStats:AthenaRecoilHipFireMultiplier": "Recoil multiplier applied when hip firing.",
    "GameDifficultyInfo:RecommendedRating": "Recommended Team Power to play this theater-zone difficulty combination.",
    "ObjectiveEventRecord": "Record containing various details about a quest event (e.g. grant) that needs to be sent to\nthe owning client and processed. UPROPERTY() use to ensure replication of each member",
    "QuestEventRecord": "Record containing various details about a quest event (e.g. grant) that needs to be sent to\nthe owning client and processed. UPROPERTY() use to ensure replication of each member",
    "StatManagerPeriodRecord": "Record of a period of the stat manager's stats",
    "StatRecord": "Record of a single statmanager stat by name and value",
    "FortActorRecord": "Record of a specific actor in a level. You must update the native serializer if you change this class\n\n      !!!!DO NOT CHANGE THIS STRUCT!!!! YOU WILL BREAK THINGS!! THINGS INCLUDING UFortBuildingInstructions!!!!",
    "PlayerStatsRecord": "Record of the stat info for a player, basically their score and scoreboard-related info",
    "FortPlayerRecord": "Record of the state of a named player. This record only includes data that isn't persisted to the player's World Profile",
    "FortLevelRecord": "Record of the state of a specific level",
    "FortLevelStreamingInfo": "Record of the state of a specific level",
    "FortMissionRecord": "Record of the state of a specific mission within a zone. This is the information available on the hex map",
    "FortPawn:Damagers": "Record of who has hit us and for how much damage",
    "DeployableBasePlot:OccupantDeployableBaseRecord": "Record responsible for maintaining the current state of the deployable base",
    "SpecialEventRewindComponentRecording": "Recorded data for an actor over time.\nIntended to be used as a base struct.  Derived structs are expected to:\n1. Declare a UPROPERTY of a FFastArraySerializer struct, with an array of derived FSpecialEventRewindComponentFrame instances.\n2. Mark other members as UPROPERTY which we want to replicate along with the USpecialEventRewindComponent's replicated recording.\n3. Implement the virtual functions below.",
    "FortInviteSessionParams:FailureReason": "Recorded reason for the failure",
    "ESpecialEventRewindComponentState.Record": "Recording information about the owner over time",
    "AthenaTravelRecord": "Records the travel log for the player, which is all of their various actions.",
    "FortQuestPoolTableRow:RefreshEvent": "Recurring event to lock refresh to: currently supported values stwWeeklyStoreEnd, stwEventStoreEnd",
    "TurretCosmeticData:RedBlinkParamName": "Red blink param name",
    "EFortItemType.CodeToken": "Redeemable code tokens",
    "WebEnvUrl:RedirectUrl": "Redirect expected",
    "PhysicsConstantForceData:ForceReductionNormal": "Reduces the force based on a set of height values - reduces from 1 to 0 linearly",
    "PhysicsConstantForceData:bReduceForceOverDist": "Reduces the force based on a set of values in a direction - reduces from 1 to 0 linearly",
    "ELevelSaveRecordVersion.RefactoredSubobjectSerialization": "Refactored subobject serialization to make it more comprehensive. There is not expected to be any persisted content\non the previous version that would be subject to the changes in serialization flow (because it only applies to AScriptDevice at the moment)\nso the code path for AddedSubobjectSerialization has not been preserved",
    "FortExposedAssetReferenceCollector": "Reference collector helper for IFortExposedAssetProvider, designed to guide you into make a cache-safe set of asset references by avoiding indirect or inherited references",
    "FortExposedClassReferenceCollector": "Reference collector helper for IFortExposedAssetProvider, designed to guide you into make a cache-safe set of class references by avoiding indirect or inherited references",
    "FortAthenaMutator_Bagel:ObjectiveObjectClass": "Reference for the actor class to spawn on objectives (except latest)",
    "FortAthenaMutator_Mash:ObjectiveObjectClass": "Reference for the actor class to spawn on objectives (except latest)",
    "FortAthenaMutator_Bagel:FinalPhaseObjectiveObjectClass": "Reference for the final phase blueprint to spawn on last objective area",
    "FortAthenaMutator_Mash:FinalPhaseObjectiveObjectClass": "Reference for the final phase blueprint to spawn on last objective area",
    "BagelScoreMultiplierSpawnData:ObjectClass": "Reference for the sub objective actor class to spawn",
    "MashScoreMultiplierSpawnData:ObjectClass": "Reference for the sub objective actor class to spawn",
    "FortCameraTargetPedestal:CameraTargetTag": "Reference tag to match with FortItemPreviewScreen",
    "QuickHealPrioritySpecifier:PositionReferenceTag": "Reference tag, corresponding to the tag of an item that's not in a plugin, to use to position the item being added.",
    "AlterationWeightData:AID": "Reference to a specific alteration.",
    "FortGameStateZone:AffiliationManager": "Reference to affiliation manager (faction/attitude) for Athena & STW game states",
    "GameplayVolume:Playspace": "Reference to an instance of the Playspace. Used for returning the Playspace associated with this gameplay volume",
    "GameplayVolume:PlayspaceClass": "Reference to an instance of the PlayspaceClassTemplate. Needed so we can keep it loaded until unloaded",
    "FortFrontendLevelScriptActor:CommanderPreviewPedestalActor": "Reference to an item preview pedestal actor in the \"commander room\", where the local player's hero will be displayed.",
    "FortFrontendLevelScriptActor:HeroLoadoutPreviewPedestalActor": "Reference to an item preview pedestal actor in the \"hero loadout\", where the local player's hero will be displayed.",
    "FortPlayerConversationUIComponent:DialogWidgetClass": "Reference to conversation dialog screen class in order to keep it in memory",
    "FortPlayerConversationUIComponent:DialogMarkerClass": "Reference to conversation indicator class in order to keep it in memory",
    "FortAthenaPartyRiftPortal:InteractComponent": "Reference to custom interaction component",
    "FortAthenaPartyRiftPortal:InteractionDisplayWidget": "Reference to custom interaction widget",
    "DeployableBaseInstance:DeployableBase": "Reference to deployable base plot",
    "FortBotInventoryInfo:BotController": "Reference to our controller",
    "IgnoredPlayerPawnArray:OwningHoldingArea": "Reference to owning Holding Area Actor",
    "BuildingGameplayActorAbilityDeliveryInfo:OwningActor": "Reference to owning building gameplay actor",
    "FortConversationEnterEvent:PlayerController": "Reference to player controller that entered the conversation",
    "FortConversationLeaveEvent:PlayerController": "Reference to player controller that exited the conversation",
    "FortMission:MissionCompletionStinger": "Reference to the \"mission complete\" UI feedback event component.",
    "FortGameStateAthena:GameplayMutator_AI": "Reference to the AI mutator used for overriding functions for AI support",
    "PapayaTimedEvents:TimedEventActorTargets": "Reference to the Actors of events to call TimedEvents on",
    "AthenaCapturePoint:HUDIndicatorRef": "Reference to the HUD indicator",
    "FMOutgoingCableConnection:OutputPortName": "Reference to the Output Port on the owning device CDO",
    "Playspace:PlayspaceManagerCached": "Reference to the Playspace Manager handling this Playspace",
    "PlayspaceUserList:Playspace": "Reference to the Playspace that has jurisdiction over this list of users\nNOTE: This is only used for adding/removing users and doesn't need replicated to clients.\n Clients needing the Playspace will use the LeafPlayspace variable that replicated with them when they're added",
    "PlayspaceLogic:Playspace": "Reference to the Playspace this game is used for",
    "FortSafeZoneStorm:StormEffectsMeshRef": "Reference to the Storm Effects mesh.",
    "FortAthenaMapInfo:SafeZoneStorm": "Reference to the Storm Safe Zone.",
    "FortQuartzGunfireComponent:AudioComponent": "Reference to the audio component set in SetGunshotAudioComponent",
    "FortPlayerControllerAthena:RespawnCameraActor": "Reference to the camera actor spawned for this player to attach the camera to for streaming in levels at respawn time",
    "PlayspaceControllerComponent_PlayerSpawning:SpawnCameraActor": "Reference to the camera actor spawned for this player to attach the camera to for streaming in levels at spawn time",
    "ActiveGameplayStateData:GameplayState": "Reference to the currently active GameplayState object",
    "FortAthenaMutator_Heist:ExitCraftInfo": "Reference to the exit craft data needed for completing the game",
    "FortControllerComponent_CreativeFunctionalTest:FunctionalTest": "Reference to the functional test that's currently in progress",
    "IgnoredPlayerPawnDataEntry:IgnoredPawn": "Reference to the ignored pawn.",
    "FortScoutDroneControllingComponent:DroneInputComponent": "Reference to the input component that holds the Drone's bindings",
    "AshtonStoneData:StoneItemDefinition": "Reference to the item definition for this stone",
    "FortVolumeActiveUsers:Manager": "Reference to the manger to prevent getting through the Volume",
    "FortGameModeAthena:MutatorListComponent": "Reference to the mutator list used for this game mode",
    "FortGameStateAthena:MutatorListComponent": "Reference to the mutator list used for this game state",
    "StateChangeData:StateObject": "Reference to the object this replicated item is describing a transition for.\n    This object replicates separately on its own and this will point to it when it makes its way to the client.",
    "StateChangeDataArray:StateTreeManagerComponent": "Reference to the owning component of this fast array (so we can communicate new elements)",
    "FortAthenaMapInfo:WarmupActor": "Reference to the parent BuildingFoundation for Warmup levels.",
    "FortAthenaMapInfo:WarmupBuildingFoundation": "Reference to the parent BuildingFoundation for Warmup levels.",
    "FortPawnComponent_CustomCamera:LastCameraController": "Reference to the previous camera controller",
    "FortAthenaMutator_Heist:HeistVictorySoundCue": "Reference to the soundcue that should play when someone wins the game",
    "BuildingFlagSpawn:SpawnedObject": "Reference to the spawned object, if any; Only valid on server",
    "UserOptionDefinition:PropertyReference": "Reference to the underlying property for this user option\n@note If the property is on the class that authors the option definition, then we will use it to automatically define the option parameters via its property meta-data and CDO data.",
    "FortAthenaMutator_Skyfire:SquadMemberStatusWidgetClass": "Reference to the widget class being added to the squad member info in the HUD",
    "GameplayStateMachineArray:StateMachineManager": "Reference to the world so this array can talk to the voting subsystem",
    "VoteRuntimeArray:WorldRef": "Reference to the world so this array can talk to the voting subsystem",
    "VoteSelectionResultsArray:WorldRef": "Reference to the world so this array can talk to the voting subsystem",
    "VoteSessionRuntimeArray:WorldRef": "Reference to the world so this array can talk to the voting subsystem",
    "VoteRuntime:WorldRef": "Reference to the world so this item can talk to the voting subsystem",
    "VoteSelectionResults:WorldRef": "Reference to the world so this item can talk to the voting subsystem",
    "VoteSessionRuntime:WorldRef": "Reference to the world so this item can talk to the voting subsystem",
    "ValkyrieEditorPermissionSettings_Project:DefaultProjectReferencedContent": "Referenced content that get automatically included when creating a new project",
    "FortMcpQuestObjectiveInfo:ItemReference": "Referenced item that will listen for Item Event actions",
    "StatEventFilter:ItemDefinition": "Referenced item the stat listens for",
    "FortItemEntry:AlterationInstances": "References to any slotted alterations that affect this item (all are unlocked/active)",
    "FortItemEntry:WrapOverride": "References to any slotted alterations that affect this item (all are unlocked/active)",
    "EncounterMobSpawnInfo:StaticPointProviders": "References to the static point providers the LWM will use as a spawn point",
    "SubmixEffectDynamicReverbSettings:ReflectionsDelay": "Reflections Delay - 0.0 < 0.007 < 0.3 Seconds - the time between the listener receiving the direct path sound and the first reflection",
    "SubmixEffectDynamicReverbSettings:ReflectionsGain": "Reflections Gain - decibels - controls the amount of initial reflections",
    "FortQuestPoolTableRow:RefreshIntervalHours": "Refresh interval, should be >= 24h, currently only supporting multiples of 24",
    "McpEntitlementRefreshTimerInfo": "Refresh timers used for entitlements",
    "CatalogRedeemRealMoneyPurchasesInfo:RefreshType": "Refresh type for determining the behaviour of the MCP querying appStores, by default it is None",
    "NotificationUISettings:bShouldOverrideVisibilitySettings": "Regardless of what the notification's desired visibility settings are, we strenuously request that you show us!\n      * This is a more maintainable version of the workaround currently in place in the UI along the lines of\n      \" if the text body of this notification is a Visibility notification text, then always show\".",
    "GameplayCueNotify_Jetpack_FuelRegen:FuelRegenRampVolumeMultiplier": "Regen Ramp Volume Multiplier",
    "FortPawnStats:ControlResistanceRegenRate": "Regeneration rate for pawn control resistance",
    "FortPawnStats:ShieldRegenRate": "Regeneration rate for pawn shield",
    "FortPawnStats:HealthRegenRate": "Regeneration rate for player health",
    "FortPlayerPawnStats:StaminaRegenRate": "Regeneration rate for player stamina",
    "PlaylistFrontEndSettings:AccessOverrides": "Region and Platform specific overrides against PlaylistAccess",
    "FortBotCosmeticLibraryWeightRegionOverrideDataTableRow:RegionId": "Region or SubRegion Id",
    "FortGlobalMission:RegionTagQuery": "Region tag query that needs to be satisfied for this mission to be active.",
    "PlaylistAccessOverride:Regions": "Region(s) to override (all = all regions for the given platform(s))",
    "FortMissionAlertRegionData:AvailabilityDataPerCategory": "Regional availability data for each mission alert category.",
    "FortAthenaBeaconComponent": "Register a beacon to attract bots",
    "FortSaveFrameworkConfig:bRegisterSaveDataCallback": "Register the OnSaveDataComplete lambda binding on initialization.",
    "FortVisibilityComponent:bRegisterWithVisibilityManager": "Register with Visibility Manger.",
    "FortPlayerController:MyPlayerInfo": "Registered player info associated with this controller, initialized as part of mcp profile query",
    "FortAthenaAIRuntimeParametersComponent:RegisteredParametersProviders": "Registered providers to generate AI Runtime Parameters for this actor",
    "FortGameStateComponent_Crafting:CraftingIngredientsUIDataRegistryType": "Registry type to use to get the crafting ingredients ui data registry.",
    "FortGameStateComponent_Crafting:CraftingFormulaRegistryType": "Registry type to use to get the data registry for crafting formulas.",
    "CatalogDynamicBundle:RegularBasePrice": "Regular base price of this bundle; this will be added to the regular price to simulate a discount.  Should always be greater or equal to DiscountedBasePrice",
    "RiderComponent:ExitLaunchVelocity": "Regular exit launch velocity",
    "EBuildingWallArea.Regular": "Regular wall, use EditModePatternData and NavAreaOverride.",
    "EFortQuestType.DailyQuest": "Regularly recurring quest",
    "SafeZoneLocationParams:RejectRadius": "Rejects any point within this radius from the AnchorLocation if Force Distance is not being used",
    "SafeZoneLocationParams:RejectOuterDistance": "Rejects any points this distance from the max radius around the AnchorLocation",
    "ELoginResult.RejoinCheckFailure": "Rejoin check failed",
    "FortMovementComp_Character:GravityCeilingRelation": "Relation to gravity ceiling. -1 = below, 0 = within, +1 = above. Set to -1 when not ballooning.",
    "FortPlayerFoleyContextSettings:RelationToPlayer": "Relation to local player",
    "BuildingWall:DoorScale": "Relative Scale of doors and SlidingDoor",
    "FortAthenaAIFormationSlotRuntime:LocalLocation": "Relative location from the formation component owner",
    "FortCurieCableSocket:Location": "Relative location of the Socket",
    "AuxiliaryEditTileMeshData:RelativeRot": "Relative mesh rotation",
    "FortAISharedRepMovement:RepRelativeBasedMovement": "Relative movement data when standing on a dynamic base",
    "SharedRepMovement:RepRelativeBasedMovement": "Relative movement data when standing on a dynamic base",
    "BuildingGameplayActorLaserGrid:LaserOutletConnectionOffset": "Relative offset applied to the outlet transform when calculating where a laser should connect to on the outlet.",
    "FortCarriedObject:IndicatorRelativeOffset": "Relative offset for HUD indicator",
    "MarshalledVFXData:RelativeOffset": "Relative offset of the attachment",
    "BuildingFlagSpawn:HUDIndicatorRelativeOffset": "Relative offset to display HUD indicator at",
    "BuildingSMActor:BuildingAttachmentPointOffset": "Relative offset to use as the point of attachment",
    "FortCreativeInteractVisualizationComponent:ComponentRelativeOffset": "Relative origin offset from owning actor.",
    "CarriedObjectAttachmentInfo:RelativeRotation": "Relative rotation to attach the flag with",
    "FortGameplayCueNotifyAthena_AIAlertState:SpriteMeshRelativeTransform": "Relative transform to apply when attaching SpriteMeshComponent",
    "CarriedObjectAttachmentInfo:RelativeTranslation": "Relative translation to attach the flag with",
    "BuildingFlagSpawn:RelativeTranslation": "Relative translation to place the spawned object",
    "EMatchmakingState.ReleasingLock": "Release a lock on the world",
    "FortReleaseVersionBound:ReleaseVersion": "ReleaseVersion to check as part of this bound",
    "EUraniumRoundPhase.ReleasePlayersIntoGameplay": "Releases players back into gameplay",
    "BuildingSMActor:RelevantBASE": "Relevant B.A.S.E. actor if this building actor should show B.A.S.E. effect",
    "VkResolvedModule": "Relevant data after module resolution (mapping down by version, platform, and build)",
    "FortSpawnContext:Tags": "Relevant gameplay tags during spawn",
    "ETeamPerformanceMessageReplicationType.MulticastFunction_Reliable": "Reliable function replication. High cost, and there is a limit to how many reliable functions can run at once. But messages should ALWAYS get through.\n     ONLY use this setting if the message canNOT be called frequently and there is a safe limit for how many of these messages will get run near the same time. (If you aren't sure what that is, ask an engineer.)",
    "EFortReloadFXState": "Reload FX state, plays the right sounds and effects",
    "EFortReloadMontageSection": "Reload Montage Sections, synced to the reload montage assets",
    "WeaponModReloadAnimData": "Reload animation data for weapon mods",
    "FortWeapon:ReloadAudioChannels": "Reload audio channels",
    "FortCosmeticModification:ReloadNiagaraSystem": "Reload niagara system override for this alteration",
    "FortCosmeticModification:BeamNiagaraSystem": "Reload particle system override for this alteration",
    "FortCosmeticModification:BeamParticleSystem": "Reload particle system override for this alteration",
    "FortCosmeticModification:ReloadParticleSystem": "Reload particle system override for this alteration",
    "FortWeapon:ReloadSounds": "Reload start sound",
    "FortBaseWeaponStats:ReloadTime": "Reload time for the weapon",
    "FortQuestManagerAttributes:DailyQuestRerolls": "Remaining re-rolls (number of quests that can still be exchanged today)",
    "FMDeviceCableManagerComponent:OriginalGuidToDuplicatedGuidThisFrame": "Remap for port guids that were added this frame and had a guid conflict.\nUsed to allow ports on separate devices that were pasted together to reconnect.",
    "FortFootstepComponent:PhysicalSurfaces": "Remapping of physical surface type to internal footstep type",
    "ServicePricingKeyRemappings:KeyNameRemappings": "Remaps Pricing Key Names from the Key to value e.g. \"HireNPC\" -> \"HireNPC.XYZ\"",
    "FMDeviceCableManagerComponent:SourceObjectToDuplicatedObjectThisFrame": "Remaps an original object to its newly duplicated object\nUsed by UserOption based connections to remap the target device when needed",
    "ValkyrieEditorConfig:bSaveValkyrieRestrictiveMode": "Remember restrictive mode setting between sessions",
    "EFortGameplayTagContainerUpdateType.Remove": "Remove any matching tags",
    "ELevelSaveRecordVersion.DeprecatedDeleteAndNewActorRecords": "Removed the DeleteActorRecords and NewActorRecords in favor of a map of ActorRecords",
    "ELevelSaveRecordVersion.RemovingSerializedDependencies": "Removing the dependencies from the serialized world (this was unneeded)",
    "FortControllerComponent_AIDebugger:NavMeshRendererComponentClass": "Rendering component class that will be instantiated on client to render the NavMesh",
    "FabricSequencerPreviewFXComponent": "Renders a set of instanced static meshes to visualize a FabricStepSequencerComponent's data.\nCan Use a FabricStepSequencerGridComponent for position alignment.",
    "FabricSteppedPreviewFXComponent": "Renders a set of instanced static meshes to visualize a set of regularly stepped data from a Fabric Device.\nExamples could be a sequencer's notes, a progressor or step modulator's steps.",
    "FortPlayerPawn:ZiplineRentryProtectionDelay": "Rentry entry delay for ziplines from movement corrections causing enter/leave overlap events",
    "EFortCostInfoTypes.Repair": "Repair cost",
    "EFortItemType.RepeatableDailiesCard": "Repeatable Dailies Cards",
    "FortVehicleFuelComponent:LowFuelRepeatingPing": "Repeating ping sound that plays while fuel is low.",
    "EFortGameplayTagContainerUpdateType.Set": "Replace all tags with tags from new container",
    "EItemPreviewRestrictionMode.AlwaysShowTargetCosmetic": "Replace any cosmetics that are introducing restrictions and blocking the target cosmetic. Useful in shop\npreviews so the player always sees what they are about to purchase.",
    "EFortBuildingInitializationReason.Replaced": "Replaced an existing building actor",
    "AnimTagProperty:PropertyReference": "Replaced by FMemberReference PropertyReference",
    "QuestCategoryButtonOverrides:HeaderColor": "Replacement color for the header",
    "QuestCategoryButtonOverrides:TimerColor": "Replacement color for the timer",
    "EUIExtensionSlot.InventoryScreenReplacement": "Replacement for standard inventory menu",
    "MarkedActorDisplayInfo:CustomIndicatorClass": "Replaces the Ping indicator widget with a custom indicator widget.",
    "MarkedActorDisplayInfo:CustomDetailsClass": "Replaces the marker details widget with a custom details widget.",
    "ELacklusterActorType": "Replacing B_Lackluster_ActorTypes",
    "LacklusterMaterialData": "Replacing B_Lackluster_ChromeMaterialStruct",
    "ELacklusterChromeType": "Replacing B_Lackluster_ChromeTypes",
    "LacklusterOriginalMaterialData": "Replacing B_Lackluster_OriginalMaterialStruct",
    "ELacklusterTextureGroup": "Replacing B_Lackluster_TextureGroup",
    "LacklusterTextureSet": "Replacing B_Lackluster_Texture_Set",
    "EHudVisibilityState.ReplayOnly": "Replay elements only are visible. Game elements are hidden",
    "FortWeaponRanged:ReplayActivationCue": "Replay-only property used for recording the activation cue when it occurs on the recording client",
    "FortWeaponRanged:ReplayImpactCue": "Replay-only property used for recording the impact cue when it occurs on the recording client. These are used to fix delay between fire animation and fx on the recording player.",
    "AbilityKitItem:Replenishment": "Replenishment rate of this inventory",
    "HeroItem:Replenishment": "Replenishment rate of this inventory",
    "SpecialEventStatArray": "Replicated FastArray containing a list of stats associated with an actor",
    "FakeKillRelevancyPlayerDataArray": "Replicated FastArray containing data the client needs for visually killing players",
    "FakeKillRelevancyPlayerDataEntry": "Replicated FastArray item containing the list of players to be fake killed on a client, and the reason why",
    "SpecialEventStatArrayEntry": "Replicated FastArraySerializerItem defining a stat associated with an actor",
    "FortPawnComponent_SpeechBubble:SpeechBubbleInfo": "Replicated SpeechBubble Info",
    "BuildingSMActor:BuildingAnimation": "Replicated animation to play",
    "ThrowingToyTrackerComponent:ThrowingToysData": "Replicated array of Throwing toy object references along with their world item guid",
    "FortGameStateComponent_Crafting:CraftingResultsList": "Replicated array of each crafting result for all result loot tier keys",
    "FortVehicleOverrideManager:ReplicatedVehicleOverrides": "Replicated array of merged vehicle override data",
    "FortControllerComponent_AugmentGrantingSystem:ReplicatedAugmentChoices": "Replicated augment choices that a client can choose between. Expectation is that this will be a small number of augments (eg 2 choices).",
    "FortGameStateZone:ExplicitGloballyBlockedAbilityTags": "Replicated container of tags being used to globally block ability activation",
    "ConverterPlayerInfo": "Replicated converter player info",
    "FortWeaponPickaxeAthena:CosmeticData": "Replicated cosmetic data associated with this pickaxe. Since pickaxes don't have any cross-item variants or\nuse any other loadout data, we could potentially get away with just storing pickaxe variants, but this way\nwe can support those types in the future.",
    "FortAthenaMutator_Ashton:CachedNumCapturedStones": "Replicated count of how many stones have been captured (used to make every frame iteration of UI faster)",
    "BuffetBubblesReplicatedData": "Replicated data associated with EMutatorMovementMode::BuffetBubbles",
    "BuffetFlyingRicochetReplicatedData": "Replicated data associated with EMutatorMovementMode::BuffetFlyingRicochet",
    "FortCharacterMovementMutatorComponent:BuffetFlyingRicochetReplicatedData": "Replicated data associated with EMutatorMovementMode::BuffetFlyingRicochet",
    "BuildingGameplayActorChaser:PatrolTurnData": "Replicated data for interpolated turning during patrol",
    "RepMovementModeExtension": "Replicated data when playing a root motion montage.",
    "BuildingSMActor:ReplicatedDrawScale3D": "Replicated drawscale, ties with Mirrored",
    "FortAthenaMutator_CreativeAllowSpectateOtherTeams:AllowSpectateOtherTeams": "Replicated enum that determines the spectate behavior for creative.",
    "PapayaTimedEvents:TimedEventsArray": "Replicated event array.",
    "FortPlayerControllerGameplay:GhostModeRepData": "Replicated ghost mode data",
    "FortMantisWeaponComponent:AnimInstanceInfo": "Replicated information about the state of the current technique that will be used by the Mantis anim instance.\n     Does not replicate to owning clients since they simulate the animations locally.",
    "FortItemList:ReplicatedEntries": "Replicated item entries, this is not the \"Real\" items, which are below",
    "SpecialEventRewindComponent_PlayerPawn:ReplicatedRecordingFastArray": "Replicated key frames of the server's recording",
    "FortCreativeMoveTool:DisableCollisionActors": "Replicated list of actors to disable the collision of. Used to disable collision of actors on the server and all clients.",
    "FortAthenaMutator_Payback:PaybackEffectDataArray": "Replicated list of killer/victim-team pairs",
    "FortCreativeMoveTool:NewlyPlacedActors": "Replicated list of new actors that were recently placed (spawned, or duplicated), which need a\n          callback fired on the client side.  This is needed to avoid race conditions between RPCs and\n              replication for newly-spawned actors.",
    "FortControllerComponent_FakeKillRelevancy:PlayerDataArray": "Replicated list of players to visually kill on the client",
    "FortAthenaMutator_PlayerMarker:PlayerMarkerEffectDataArray": "Replicated list of players with marker effects",
    "IceGroundPath:SplinePoints": "Replicated list of points along the spline",
    "FortSplineGroundPath:FortReppedPointList": "Replicated list of raw points that will form our spline.",
    "FortGameState:AdditionalPlaylistLevelsStreamed": "Replicated list of the asset pathnames of the additional playlist levels that have finished streaming in on the server (based on AdditionalPlaylistLevels from the server)",
    "FortCharacterMovementMutatorComponent:BuffetBubblesReplicatedData": "Replicated movement data associated with EMutatorMovementMode::BuffetBubbles",
    "FortControllerComponent_AugmentGrantingSystem:ReplicatedNumPendingAugmentsToGrant": "Replicated number of augments the player can grant themselves.",
    "FortTimeOfDayManager:TimeOfDayReplicated": "Replicated once per hour or whenever some event changes the time; then passes the value back into TimeOfDay\non the clients and causes any other needed updates (to DayNightPhase, etc.)",
    "FortAttachableProjectileComponent:AttachParams": "Replicated parameters of the current attachment",
    "FortAthenaMutator_Bagel:PlayerDataArray": "Replicated player data.",
    "FortAthenaMutator_Mash:PlayerDataArray": "Replicated player data.",
    "FortAthenaMutator_Pow:PlayerData": "Replicated player data.",
    "FortAthenaMutator_Wax:PlayerData": "Replicated player data.",
    "FortMinigameStatsComponent:PlayerDefinedStatEntries": "Replicated player stats to help with construction of actual instances",
    "FortProjectileMoveComp_Drunk:RandSeed": "Replicated random seed value.",
    "FortLevelInstanceDeviceBase:GameplayVolume": "Replicated reference to our gameplay volume",
    "FortPawnVocalChord:ReplicatedSpokenLine": "Replicated spoken line",
    "FortAthenaMutator_Barrier:Team_0_State": "Replicated state of Team 0",
    "FortAthenaMutator_Barrier:Team_1_State": "Replicated state of Team 1",
    "FortCurieComponent:ActiveVoxelReplicationData": "Replicated state of active voxels from the server",
    "ReplicatedPlayPauseStopActors": "Replicated state of the PlayPauseStopActors",
    "PlayspaceComponent_PlayStopPauseManager:ReplicatedPlayPauseStopActors": "Replicated store of actors, and target ShouldBePlaying value to trigger actors to Play or Stop.",
    "BuildingGameplayActorLaserGrid:LaserGridOutlets": "Replicated struct that contains information regarding the state of all the laser outlets of this actor.",
    "BuildingGameplayActorLaserGrid:LaserGridConnections": "Replicated struct that contains information regarding the various laser connections of this actor.",
    "SimpleMetricInformation": "Replicated structure which is populated on the server, used to transmit current state of metrics for the island the player is currently on",
    "DetailedMetricInformation": "Replicated structure which is populated on the server, used to transmit detailed current state of metrics for the island the player is currently on",
    "FortAthenaMutator_MarkerUtilities:ReplicatedTeamPlacements": "Replicated team placements. Because the placements are no longer always based on scoring the data must be replicated to clients.",
    "PlayspaceComponent_CreativeLoadingStateProxy:bNeverAllowSaving": "Replicated value tracking whether this component wants to allow saving.",
    "FortAthenaMutator_SpyRumble:NumKillsForNextPerkUnlock": "Replicated variable for keeping track of how many kills are needed for the next perk unlock.",
    "PlayspaceComponent_EditConnectionManager:EditConnections": "Replicated variable for tracking edit connections.\n              Todo: Based on Design, this will expand to a struct that containers more User info for display.",
    "FortControllerComponent_SpatialSampler:NumPendingSamplingLocations": "Replicated variable of how many more locations we need to visit and sample",
    "BuildingItemWeaponUpgradeActor:bAllowSecondInteraction": "Replicated variable, so the server can disable the interaction and make it so the client also disables the second interaction",
    "FortActorComponent_MultiInteract:InteractingNonPlayerActorCount": "Replicated variable, tracks the number of non-player actors that are currently interacting with our owning actor.",
    "MilkshakeControllerComponent:CameraShakeScaleReplicated": "Replicated version of CameraShakeScale.\n     Used to pass the latest value in the hotfix table (MilkshakeGameData) to the client.",
    "MilkshakeControllerComponent:bForceFeedbackEnabledReplicated": "Replicated version of ForceFeedbackEnabled\n     Used to pass the latest value in the hotfix table (MilkshakeGameData) to the client.",
    "MilkshakeControllerComponent:MaxTimeBetweenBuildingDamageFXReplicated": "Replicated version of MinTimeBetweenBuildingDamagFXReplicated\n     Used to pass the latest value in the hotfix table (MilkshakeGameData) to the client.",
    "MilkshakeControllerComponent:MinTimeBetweenBuildingDamageFXReplicated": "Replicated version of MinTimeBetweenBuildingDamagFXReplicated\n     Used to pass the latest value in the hotfix table (MilkshakeGameData) to the client.",
    "MilkshakeControllerComponent:NearbyBuildingActorsUpdateIntervalReplicated": "Replicated version of NearbyBuildingActorsUpdateInterval.\n     Used to pass the latest value in the hotfix table (MilkshakeGameData) to the client.",
    "MilkshakeControllerComponent:NearbyBuildingActorsUpdateScanRadiusReplicated": "Replicated version of NearbyBuildingUpdateScanRadius. This is an int since it is replicated and the radius does not need to be more precise than 1 uu.\n     Used to pass the latest value in the hotfix table (MilkshakeGameData) to the client.",
    "FortTheaterMapTile:ZoneThemeClass": "ReplicatedUsing=OnRep_ZoneTheme",
    "FortCreativeMoveTool:SelectedActorsReplicateToRemoteClients": "Replicates a list of actors to remote clients which sets SelectedActors to these values.",
    "FortCreativeMoveTool:ActiveMovementModeReplicateToRemoteClients": "Replicates the active movement mode to remote clients which sets ActiveMovementMode to this value.",
    "FortControllerMiniMapComponentVisibilitiesArray:Entries": "Replicating array holding a copy of FortControllerMiniMapComponentVisibilitiesMap",
    "ThrowingToyDataArray:Entries": "Replicating array holding throwing toy data.",
    "ServerLaunchInfo": "Replication data used an a pawn is launched",
    "FortPlayerScoreReport": "Report of the score of a specific player, in a specific instance of a game. Paired with a reward report",
    "EDynamicXpReportingStatus": "Reporting XP to analytics will have one of these codes sent to it to indicate possible errors.",
    "FortActorComponent_MultiInteract:ServerInteractionData": "Repped every time server updates InteractionDuration",
    "FortActionKeyMapping": "Representation of a ActionKeyMapping for serialization into the client settings",
    "CosmeticBackendLoadout": "Representation of a user's loadout as stored on their backend profile. As with backend loadout slots, all asset\nreferences are stored as primary asset IDs.\n\nPrimarily contains a collection of loadout slots, and additional data the user may have specified that does not\nfit into a standard cosmetic slot.\n\n@see FCosmeticBackendLoadoutSlot",
    "CaptureComponent:CaptureProgress": "Representation of progress of Tickable states",
    "FortHighlightParamProfile:UniqueProfileName": "Representative name of the profile; Expected to be unique but not enforced out of simplicity",
    "EQualitativePerfMetric.DynamicResolution": "Represented as the lerp values between the platform's min/max dynamic res (eg. 0.5 means halfway between min/max).",
    "FortMinigameObjectiveComponent:TrackedStateOwnerTeam": "Represents Tracked State Owner team. Actually used In Obhjective HUD to define behaviour by Capture States",
    "MotdImage": "Represents a Prm Motd Image Data",
    "MotdVideo": "Represents a Prm Motd Video Data",
    "AthenaSquadPedestalGroup": "Represents a full squad's-worth of team member pedestals.",
    "EventsTimeline": "Represents a particular event channel's queued states (for the next 12-24 hrs)",
    "CosmeticLoadout": "Represents a player's cosmetic selections in-game. Corresponds to a cosmetic backend loadout, though all item\ndefinitions are hard-referenced for replication and validation purposes.\n\nPrimarily a collection of cosmetic loadout slots.\n\n@see FCosmeticLoadoutSlot, FCosmeticBackendLoadout",
    "FortWeaponModSetRow": "Represents a row in a spreadsheet, in the weapon mod set roll table\nA bucket defines all the mods a given WID can potentially use.\nMod sets can be shared, but in general design will author buckets for specific weapons that only include relevant mod sets for that weapon type.",
    "FortAvailableScriptedAction": "Represents a scriped action that may be executed",
    "AdditionalVariantSet": "Represents a set of cosmetic variants, mostly here so we can have an array in an array in the editor",
    "MeleeWeaponSkillCategory": "Represents a set of parameters that apply to weapons that match the Tags listed in the Category",
    "FabricUserOptionSaveData": "Represents a set of user options saved separately from the actor",
    "CosmeticLoadoutSlot": "Represents a single area of cosmetic customization in a player's loadout (e.g. a character or backpack). This is the\nin-game equivalent of a CosmeticBackendLoadoutSlot, where all item definitions have been resolved to hard references.\n\nSupports robust checking against slot requirements when slotting new items, customization data validation, etc.\n\nThis is a struct so it can be Blueprint accessible and support reflection without being a full-fat UObject, but\nmost data access is protected",
    "CosmeticBackendLoadoutSlot": "Represents a single cosmetic loadout slot as stored on a backend profile. All asset references are stored as primary\nasset IDs to avoid introducing plugin dependencies, as some plugins may not be loaded at the time this data is\nretrieved from the profile",
    "CatalogItemPrice": "Represents a single pricing option for a catalog entry",
    "LeaderboardRowData": "Represents a single row in a leaderboard list\nThis is separate from the uobject because we reuse the uobject for different views",
    "ScriptedObjectMovement_StaticPathCalendarCheatDefinitionData": "Represents a single simulated calendar event for simulating calendar in pie",
    "FabricUserOptionSavedValue": "Represents a single user option for a save struct",
    "QuestInstanceInitializationData:ManagerParticipantSubsetID": "Represents a unique subset of participants that a quest instance can be granted to from all those managed\nby it's owning manager. FManagerParticipantSubsetID::IsValid() can be used to indicate if\nthis is set. If not, the quest is granted to 'all' participants owned by the manager.",
    "LocalPortalState": "Represents additional per-client portal state data for applying state changes unique to individual clients",
    "FortMappingContextOverlapFilter": "Represents an action group and how it interacts with other action groups",
    "SpawnGroupEnemy": "Represents an enemy's information in a spawn group",
    "RiftDamagerInfo": "Represents an entity who damaged a rift so we can give score for each damager when rift is destroyed",
    "DamagerInfo": "Represents an entity who damaged this pawn, so we can deduce who did what % of the contribution later for scoring purposes",
    "BotPOIExcludedZone": "Represents an exclusion zone in which it is forbidden to generate BotPOI",
    "CreativeItemTemplate": "Represents an item template entry for a given item template slot, handling ownership of data and reacting to data changes when replicated back to the client",
    "DamagerInfoAnalytics": "Represents damages from different source to this pawn, for analytics purpose",
    "EMiniMapIconParameterDataType.Scalar": "Represents data used to modify a given scalar parameter of a dynamic material instance",
    "EMiniMapIconParameterDataType.Texture": "Represents data used to modify a given texture parameter of a dynamic material instance",
    "EMiniMapIconParameterDataType.Vector": "Represents data used to modify a given vector parameter of a dynamic material instance",
    "FortMinigameObjectiveComponent:bIsInteractionAllowed": "Represents if a Player can interact with this objective",
    "FortMinigameObjectiveComponent:TrackedState": "Represents last state this objective had. Actually used In Obhjective HUD to define behaviour by Capture States",
    "FabricUserOptionPreset": "Represents one user option in a template.",
    "FortWeaponModBucketEntry": "Represents one weighted ModSet in a bucket of many sets.",
    "EFortPawnPushSize": "Represents our pawn's size and whether we should be pushed by other pawns.  AIs only push targets that are not their current goal.",
    "EEncounterMobSpawnType.StaticPointBased": "Represents static point-based LWM point providers",
    "EPlayStopPauseExecutionContext": "Represents the context in which Play, Stop, and Pause operations should be run.",
    "FortScoutDroneControllingComponent:CurrentDestructionData": "Represents the current dismiss delays being applied to the drone",
    "EAthenaRoundsMutatorPhase": "Represents the current state of AFortAthenaMutator_Rounds throughout the match",
    "EFortSocialFriendRequestMethod": "Represents the different fortnite specific methods of sending a friend request",
    "FortMinigameObjectiveComponent:ObjectiveType": "Represents the kind of objective this is. Actually used in Objective HUD to define when to change behaviour by TrackedState",
    "CaptureComponent:CapturingStateOwner": "Represents the last team that owned capture state while it was capturing",
    "CaptureComponent:NeutralizingStateOwner": "Represents the last team that owned capture state while it was neutralizing",
    "FortAthenaMutator_Cobalt": "Represents the mutator holding custom logic to execute Cobalt Gameplay",
    "EFortControlRecoveryBehavior": "Represents the pawn's control recovery behavior",
    "ItemSaleSlotRarityRequirement:Rarity": "Represents the rarity threshold to be tested",
    "PawnSample": "Represents the sample of an athena pawn at a given frame. Contains information about the pawn and movement states.\nTypicaly sampled every 0.5 seconds",
    "CreativeItemTemplateData": "Represents the stats of a particular item template, as provided by the \"instigator\" actor that registered it",
    "AthenaCobaltStormShield": "Represents the storm shield actor that covers up the POI to host matches and keep players safe from storm damage",
    "CaptureComponent:StateOwner": "Represents the team that owns current capture state",
    "FortQuickBars": "Represents the underlying quick bar model the player uses to organize their inventory for use during building and combat.",
    "FortQuickBarsAthena": "Represents the underlying quick bar model the player uses to organize their inventory for use during building and combat.",
    "FabricUserOptionValue": "Represents the value of a user option.\nUsed for setting user option templates by using its children via InstancedStruct.",
    "EEncounterMobSpawnType.VolumeBased": "Represents volume-based LWM point providers",
    "ItemSaleSlotRarityRequirement:RarityRequirement": "Represents whether item rarity must be less then, equal to, or greater than the nominated rarity",
    "FortMinigame:bRequestPostGameResetUI": "Request client UI cleanup when we fade after PostGame",
    "EStyleRequestArbitrationPolicy.QueueBack": "Request should be queued behind other pending style requests",
    "EStyleRequestArbitrationPolicy.QueueFront": "Request should be queued, but ahead of other pending style requests",
    "EStyleRequestArbitrationPolicy.ReplaceActive": "Request should immediately replace any existing request + clear queued requests",
    "EStyleSpecificationMethod.DirectReference": "Request specifies direct MaterialStyle object reference",
    "EStyleSpecificationMethod.StyleSetLookup": "Request specifies style via lookup from style set via style name",
    "FortAthenaAIBotController:RequestedEmoteAsset": "Requested emote definition. If nullptr, no request has been made.",
    "CatalogOfferRequirementEditor:Mode": "Require = they must have at least MinQuantity, Deny = they may not have minQuantity or greater",
    "HmxEditorSettings:RequireEncryption": "Require all moggs to be encrypted. Whether you are allowed to create unencrypted content. This\nwill only override the moggmaker.exe value if true (i.e. it can remove an option, but cannot\nadd an option that is not allowed by moggmaker)",
    "FortObjectiveFilter_AddToInventory:bRequireBrandNewItem": "Require that the item is not a gift, recovered from a backpack, tossed by a player or spawned from a dropped pickup to progress the objective",
    "AthenaCarPlayerSlot:bUseExitTimer": "Require the player in this slot to hold the exit key for the amount of time specified\nin the vehicle config before they get ejected.",
    "FortAthenaLivingWorldCategory:RequirePlaylistTagQuery": "Require the playlist tags to match this query for this category to be active. If empty, it will be active for all playlists",
    "PickedTurnTransitionData:RequiredGameplayTags": "Required Owner Gameplay Tag",
    "TurnTransitionData:RequiredGameplayTags": "Required Owner Gameplay Tag",
    "GameDifficultyInfo:RequiredRating": "Required Personal Power to play this theater-zone difficulty combination.",
    "FortGameFeatureSize": "Required Sizes to install a game feature",
    "FortGameFeatureSizeDetailed": "Required Sizes to install a game feature, splits out the fields in FFortGameFeatureSize into more detailed categories",
    "PickedTurnTransitionData:RequiredTagQuery": "Required Tag Query",
    "TurnTransitionData:RequiredTagQuery": "Required Tag Query",
    "QuestItemDefinitionDesignerData": "Required data when making new quest uassets",
    "TrapItemDefintionDesignerData": "Required data when making new trap uassets",
    "WeaponItemDefinitionDesignerData": "Required data when making new weapon uassets",
    "FortGameplayCueSpawnCondition:RequiredDetailMode": "Required engine detail mode, if below this will not spawn",
    "PerkItemDefinitionDesignerData": "Required form data when making new perk uassets",
    "CatalogOfferRequirementEditor:Fulfillment": "Required fulfillment",
    "CatalogOfferRequirementEditor:Item": "Required item",
    "FortConversionControlKeyCosts:RequiredItem": "Required item required for conversion",
    "AthenaDeveloperSettings:AthenaWarmupRequiredPlayerCount": "Required number of players before warm-up phase begins",
    "FortGameModeAthena:WarmupRequiredPlayerCount": "Required number of players before warm-up phase ends.",
    "FortObjectiveFilterType_VehicleFilter:RequiredSurfaceType": "Required surface that the vehicle is on for this objective to progress",
    "FortBaseWeaponStats:MeleeAimAssistRequiredTag": "Required tag for melee aim assist to be enabled (applies to non-ranged weapons only)",
    "HeroSpecializationDesignerData:RequiredGPTags": "Required tags.",
    "VideoWidgetConfig:bStreamingEnabled": "Required to be true if the video source is stream",
    "ConversationGiftTypeDefinition:Requirements": "Requirement(s) that the potential recipient must meet to be eligible for this gift",
    "ConversationGiftTypeDefinition:ServiceProviderRequirements": "Requirement(s) that the service provider must meet to be eligible to give this gift",
    "ConditionalBenefitLevel:ParticipantRequirements": "Requirement(s) that the service provider/player must meet in order for this benefit level to be attained",
    "FortAbilitySetDeliveryInfo:DeliveryRequirements": "Requirements filter for determining valid application targets",
    "ProximityBasedGEDeliveryInfoBase:DeliveryRequirements": "Requirements filter for determining valid application targets",
    "FortInjectedBehaviorEntry:InjectionRequirements": "Requirements for the AI to have this behavior injected (empty = no requirement)",
    "FortAILootDropModifiers:Requirements": "Requirements that must pass on the encounter for these loot drop modifiers to be applied",
    "ComplexPawnOverlapComponent": "Requires a complex collision static mesh to give a hollow shape where actor overlaps only happen on the bounds.",
    "EGateCheckType.RequireAll": "Requires all gates on an objective to be open to allow progression. Does not affect individual gate opening",
    "EFortEncounterState.Max_None": "Rerunning rift queries to get new rifts",
    "EFortSessionHelperJoinResult.ReservationSuccess": "Reservation has been made/accepted, expectation is game will clean up and proceed to join",
    "EAthenaInventorySpawnOverride.Always": "Reset inventory on every spawn",
    "ValkyrieProjectReferenceDescriptor:LinkCode": "Resolved link code for the project reference",
    "VkContentManifest": "Resolved list of modules for a particular version/platform/build combination. Built up from a tree based on root module(s).\nThis is suitable for Clients since it's matched to the right platform already.",
    "FortBotDigestedHealingItems:UseItemResourceThreshold": "Resouce value (health, shield) needs to be < to that value for items to be considered",
    "FortBotHealingItems:UseItemResourceThreshold": "Resouce value (health, shield) needs to be < to that value for items to be considered",
    "FortControllerComponent_AugmentGrantingSystem:CachedResourceCurrencyOverride": "ResourceCurrencyOverride set via UPlayspaceComponent_GlobalCurrencyOverride",
    "BuildingProp_DeimosSpawner:SpawnTimingOptions": "Respawn evaluation timer array. These soft class pointers will be loaded when the minigame starts",
    "EAthenaGameMsgType.RespawnOffWarning": "Respawn off warning",
    "FortAthenaMutator_CustomRespawnLogic:RespawnSettings": "Respawn settings to use. Disabling TryPlaceByTeammates uses the default respawning logic.",
    "EAthenaGameMsgType.RespawnTurningOffWarning": "Respawn turning off warning",
    "FortAthenaMutator_Pow:bRespawningCurrentlyAllowed": "Respawning currently allowed",
    "FortAthenaMutator_Barrier:GameMsg_NoMoreRespawnsWarning_Friendly": "Respawns almost over warning",
    "FortAthenaMutator_Disco:GameMsg_NoMoreRespawns": "Respawns almost over warning",
    "FortAthenaMutator_Disco:GameMsg_NoMoreRespawnsWarning": "Respawns almost over warning",
    "FortAthenaMutator_Ashton:GameMsg_NoMoreRespawns": "Respawns turned off message",
    "EFortQuestObjectiveItemEvent.AlterationRespec": "Respec an alteration",
    "EFortQuestObjectiveStatEvent.AlterationRespec": "Respec an alteration",
    "EFortPawnMaterialOverrideFlags.RespectPartOverrides": "Respect the state of a character part's IgnoredMaterialOverrideIndices - allows parts to not apply uniform\nmaterial overrides to specific material indices (e.g. for body bag meshes on toon characters)",
    "EReadyCheckState.NotReady": "Responded No to ready check",
    "EReadyCheckState.Ready": "Responded Yes to ready check",
    "EFortMontageInputType.WindowClickOrHold": "Responds at end of window, to either a click during window or hold at end",
    "EFortMontageInputType.WindowHoldOnly": "Responds at end of window, to only a hold",
    "EFortMontageInputType.InstantClick": "Responds immediately to a click, jumps to montage",
    "FortHttpRequestCompletedAnalyticsFilter:ErrorCodes": "Response codes to filter out",
    "FortPlayerSurveyAnalyticsResponse": "Response data structured for use with Analytics",
    "FortLevelUpDataV2:RestXPCap": "Rest XP quota cap at this account level",
    "FortLevelUpDataV2:RestXPRechargeRate": "Rest XP recharge rate at this account level",
    "FortEarnScoreNotification:RestXPEarned": "Rest amount of XP earned",
    "FortExperienceDelta:RestXPEarned": "Rest amount of XP earned",
    "EMatchmakingUtilityState.RestartingMatchmaking": "Restarts the ready checks and matchmaking step if UFortMatchmakingV2 gets cancelled somehow",
    "EMatchmakingUtilityState.RestartingReadyChecksForLegacyFlow": "Restarts the ready checks if some party member un-readies after the ready checks completed successfully,\nbut before matchmaking started (see CallingMatchmakingForFlow), this is intended as a temporary workaround\nfor FORT-624349 which causes the entire party to unready at this stage\nTODO: Romualdo.Villalobos remove when NewReadiness flow is finished",
    "XPEventInfo:RestedValuePortion": "Rested XP Value portion of this event.  How much Rested XP contributed to the Xp Value",
    "XPEventInfo:RestedXPRemaining": "Rested XP remaining to be consumed",
    "FortAthenaLivingWorldNavigationInvokerComponent:SupportedAgents": "Restrict navigation generation to specific agents",
    "FortMapIconDefinition:InWorldIndicatorMaxViewDistance": "Restrict visibility of the in-world indicator to within the specified radius. Ignored if <= 0.f",
    "FortMapIconDefinition:InWorldIndicatorMinViewDistance": "Restrict visibility of the in-world indicator to within the specified radius. Ignored if <= 0.f",
    "FortMapIconDefinition:ViewDistanceRadius": "Restrict visibility of this icon to within the specified radius. Ignored if <= 0.f",
    "EFortCosmeticRestrictionTagType.Both": "Restriction query checks both the tags on the base item definition and the meta tags",
    "EFortCosmeticRestrictionTagType.MetaTags": "Restriction query only checks the meta tags (not the tags on the base item definition)",
    "EFortCosmeticRestrictionTagType.ItemTags": "Restriction query only checks the tags on the base item definition (no meta tags)",
    "EPersistenceFrameworkResult": "Result from some actions",
    "UPFWCheat_RootArea": "Result from some actions",
    "CraftingUpgradeRule:TargetItemTags": "Result items that match these tags will have data copied from the source item",
    "CardPackResultNotification": "Result of a card pack opening (primary notification)",
    "FortDailyQuestRerollNotification": "Result of a daily quest re-roll (primary notification)",
    "FortGetMcpTimeForPlayerNotification": "Result of a players login get mcp time (primary notification)",
    "FortQuestRewardNotification": "Result of a quest reward claim (primary notification)",
    "FortExpeditionResultNotification": "Result of an expedition being collected (primary notification)",
    "FortReceivedGiftedBoostXpNotification": "Result of being gifted boost xp by someone else (secondary notification)",
    "FortCollectedResourceNotification": "Result of claiming a collected resource (primary notification)",
    "FortCollectionBookClaimRewardNotification": "Result of claiming a collection book reward (primary notification)",
    "FortClaimedDifficultyIncreaseRewardNotification": "Result of claiming difficulty increased mission rewards",
    "FortMissionAlertCompleteNotification": "Result of completing a mission alert hex",
    "FortConversionResultNotification": "Result of converting and item (primary notification)",
    "FortEndMatchScoreNotification": "Result of earning end match score",
    "FortPhoenixLevelUpNotification": "Result of earning enough Phoenix XP to reach a new level.",
    "FortEarnScoreNotification": "Result of earning score (secondary notification)",
    "FortGameHotfixUpdateResponse:Status": "Result of hotfix update",
    "FortPartyCampaignInfo:MatchmakingResult": "Result of matchmaking by the leader",
    "FortCollectionBookSlotItemNotification": "Result of slotting an item (primary notification)",
    "FortTransmogResultNotification": "Result of transmog'ing an item (primary notification)",
    "FortUpgradeItemRarityNotification": "Result of upgrading item rarity (primary notification)",
    "EPersistenceFrameworkServiceLatentResult": "Result returned from latent save and restore actions",
    "AthenaSeasonRewardLevelInfo": "Result structure for front-end queries of the season information for a given level and track (transient queries)",
    "EAdHocSquads_SquadUpResult": "Results for trying to join an ad hoc squad",
    "EMoveToolPlacementCheckResult": "Results of a move tool placement test",
    "SkeletalAudioBoneConfig:RetriggerDelay": "Retrigger properties",
    "FortTargetFilter:bConsiderPhysicsPawnsAsNonPlayerPawns": "Return True when we want to consider PhysicsPawns as non player ones, use to prevents aim assist from targeting physics objects.",
    "VkFoundMatchingArtifact": "Return struct for artifact id found by key and filter",
    "GeneralChatReturn": "Return structure for mcp chat reservation requests",
    "ELeashReturnLocationMode.ReturnToCenter": "Return to leash center",
    "EFortPartyMemberLocation.ReturningToFrontEnd": "Returning to the front end",
    "EFortPartyState.ReturningToFrontEnd": "Returning to the front end (e.g., after a game)",
    "FortPlayerPawn:BallooningDirectionalSpeedMultiplierCurve": "Returns a speed multiplier based on the player's relative movement direction, when Ballooning.\n      Direction is in the range of 0 to 180 degrees (0 is forward, 90 is strafe, 180 is backwards).",
    "FortPlayerPawn:ParachuteDirectionalSpeedMultiplierCurve": "Returns a speed multiplier based on the player's relative movement direction, when Parachuting.\n      Direction is in the range of 0 to 180 degrees (0 is forward, 90 is strafe, 180 is backwards).",
    "FortPlayerPawn:SkydivingDirectionalSpeedMultiplierCurve": "Returns a speed multiplier based on the player's relative movement direction, when Parachuting.\n      Direction is in the range of 0 to 180 degrees (0 is forward, 90 is strafe, 180 is backwards).",
    "DirectionalSpeedMultiplierOverrideData:Crouching": "Returns a speed multiplier based on the player's relative movement direction.\n              Direction is in the range of 0 to 180 degrees (0 is forward, 90 is strafe, 180 is backwards).",
    "DirectionalSpeedMultiplierOverrideData:Running": "Returns a speed multiplier based on the player's relative movement direction.\n              Direction is in the range of 0 to 180 degrees (0 is forward, 90 is strafe, 180 is backwards).",
    "DirectionalSpeedMultiplierOverrideData:Walking": "Returns a speed multiplier based on the player's relative movement direction.\n              Direction is in the range of 0 to 180 degrees (0 is forward, 90 is strafe, 180 is backwards).",
    "FortPlayerPawn:DirectionalSpeedMultiplierCurve": "Returns a speed multiplier based on the player's relative movement direction.\n      Direction is in the range of 0 to 180 degrees (0 is forward, 90 is strafe, 180 is backwards).",
    "FortPlayerPawn:ThirdPersonSpeedMultiplierCurve": "Returns a speed multiplier based on the player's relative movement direction.\n      Direction is in the range of 0 to 180 degrees (0 is forward, 90 is strafe, 180 is backwards).",
    "RigUnit_GetGroundHitAtIndex:Location": "Returns the indexed ground hit location",
    "RigUnit_GetGroundHitAtIndex:Normal": "Returns the indexed ground hit normal",
    "FortGamepadSettings:AimAssistInitialDownsightTime": "Returns the time that aim assist pull will be applied when the player first starts aiming downsights",
    "RigUnit_BoneGroundTrace:bHit": "Returns true if there was a hit",
    "FortWeapon:bPendingDestroyDueToDurabilityOrStackCount": "Returns true if this weapon should be destroyed due to durability upon ability completion",
    "FortWeaponRanged:bShouldDisplayAmmoCounter": "Returns true if this weapon should display the ammo count in the HUD",
    "FortWeaponRanged:bShouldDisplayAmmoCounterDuringSecondaryFire": "Returns true if this weapon should display the ammo count in the HUD when player is holding the secondary fire input",
    "FortWeaponRanged:bShouldDisplayReticleAmmoCounter": "Returns true if this weapon should display the ammo count in the Reticle element",
    "FortWeaponRanged:bShouldHideReserveAmmo": "Returns true if this weapon should hide the reserve ammo elements in the HUD",
    "FortAIPawn:DeimosBatchedGameplayCueParameters": "Reused parameter structure for batched cues",
    "SubmixEffectDynamicReverbSettings:LateGain": "Reverb Gain - decibels - overall reverb gain - master volume control",
    "SubmixEffectDynamicReverbSettings:ReflectionDampening": "Reverb Gain High Frequency - 0.0 < 0.89 < 1.0 - attenuates the high frequency reflected sound",
    "ESpectatorCameraType.ReverseShot": "Reverse and Followshots are just presets of the ThirdPerson camera",
    "VehicleDigestedTurnInPlace:bMissedPathPointReverse": "Reverse on missed point",
    "VehicleTurnInPlace:bMissedPathPointReverse": "Reverse on missed point",
    "FortDynamicBuilder:bReverseBuild": "Reverse the direction of the axis we are building in",
    "EFortQuestObjectiveStatEvent.RevivePlayer": "Revive other players. Target is the player that was revived.",
    "BattlePassLevelReward:Reward": "Reward granted on leveling up",
    "FortRewardActivity:MissedRewardItems": "Reward items that could have been rewarded but were not",
    "FortPlayerController:LatestRewardReport": "Reward report that keeps track of character rewards received recently",
    "ECollectionBookRewardStatus": "Reward status for collection book rewards",
    "AthenaRewardItemReference:RewardGiftBox": "RewardGiftBox data is only needed for mcp data exports, not needed on client/server builds",
    "FortTierCollectionLayoutOutput:RewardBadges": "Rewarded Badges for completing the tier",
    "EFrontEndCamera.Rewards": "Rewards Screen Camera",
    "FortDailyRewardScheduleDefinition:Rewards": "Rewards data table",
    "EFortRewardActivityType.MissionPrimary": "Rewards earned by completing a primary mission",
    "EFortRewardActivityType.MissionSecondary": "Rewards earned by completing an optional/secondary mission",
    "EFortRewardActivityType.AccountLevelUp": "Rewards earned from leveling up your account",
    "EAthenaSeasonRewardTrack.SeasonProgressionTrack": "Rewards for account XP",
    "EAthenaSeasonRewardTrack.CompendiumPaidTrack": "Rewards for book XP that are only granted if you have VIP status",
    "EAthenaSeasonRewardTrack.CompendiumFreeTrack": "Rewards for book XP that everyone gets",
    "FortGameStateZone:MissionRewards": "Rewards for the mission chosen on the backend. Used for the UI.",
    "FortZoneMissionAlertData:MissionAlertRewards": "Rewards for the mission chosen on the backend. Used for the UI.",
    "FortLevelUpDataV2:Rewards": "Rewards given at this level",
    "AthenaRewardResult:Rewards": "Rewards of various types earned",
    "FortAvailableMissionData:MissionRewards": "Rewards offered for completing this mission",
    "AthenaRewardSchedule:Levels": "Rewards table",
    "EAthenaRewardVisualImportanceType.Hot": "Rewards that are expected to eye-grabbers",
    "EAthenaRewardVisualImportanceType.CrazyHot": "Rewards that are expected to eye-grabbers and have new features",
    "EAthenaRewardVisualImportanceType.Normal": "Rewards that are expected to not be the highlights of the battle pass",
    "QuestItemDefinitionDesignerData:HiddenRewards": "Rewards that are hidden from the user but can be claimed once the quest is complete. Items are specified by tempateId.",
    "EAthenaSeasonRewardTrack.CompendiumAdditionalTrack": "Rewards that are typically defined by challenges",
    "QuestItemDefinitionDesignerData:Rewards": "Rewards that can be claimed once the quest is complete",
    "QuestItemDefinitionDesignerData:SelectableRewards": "Rewards that can be selected once the quest is complete",
    "FortLinkedAnimGraphComponent:DebugGraphClass": "Rewind debugger properties debug anim graph class",
    "LiquidRibbonSplineDetachment:FirstRibbonID": "Ribbon ID of the first ribbon of the split",
    "LiquidRibbonSplineDetachment:SecondRibbonID": "Ribbon ID of the second ribbon of the split",
    "ControllableRidableComponent:RidableControlParams": "Ridable controls",
    "FortMovementComp_Character:RidableControlParams": "Ridden params",
    "FortPawnStats:SpeedRidden": "Ridden speed for the pawn",
    "RidableControlRuntimeData:RiderReferentialYaw": "Rider referential yaw",
    "FortAIEncounterSpawnArea:PendingRifts": "Rifts that are in the process of being spawned and initialized",
    "FortAIEncounterSpawnArea:Rifts": "Rifts that are ready to spawn AI",
    "EStructuralWallPosition.Front": "Right side of the grid cell",
    "EFortConnectivityCubeFace.Right": "Right wall cube face",
    "FortControllerComponent_EliminationFeed:EliminationFeedMessageBatch": "Ring buffer for replicating feed messages. *",
    "EEncampmentRole": "Role assigned to a SquadMember during Encampment",
    "DeployableTurretBPAnimData:SurfaceRollDegrees": "Roll of the surface the turret is on (calculated by GetSlopeDegreeAngles in the turret BGA)",
    "CvarRollback": "Rollback Struct for BP Logging\n* Cvar Name\n* State\n* Category\n* Jira(s)\n* Description",
    "PlayerAugmentsPersistenceData:roll_count_since_last_unlock": "Rolls since last unlock.",
    "EFortTextureDataSlot.Fourth": "Roof pieces",
    "EFortTextureDataType.Roof": "Roof texture",
    "ETeamChatRoomState.Timeout": "Room failed to create",
    "ETeamChatRoomState.Created": "Room successfully created",
    "FortEmporiumFilterEntry:TextRoot": "Root button text",
    "ECharacterPartAttachmentTargetType.RootComponent": "Root component for the part",
    "FortPoiSwapPlayspace:SceneComponent": "Root scene component. Allows for positioning the playspace to determine where content should load",
    "FortOrientationWarpingSettings:YawRotationAxis": "Rotation Axis used to rotate mesh.",
    "FortWorldSettings:WorldTimeOfDayManagerRotationZ": "Rotation applied to WorldTimeOfDayManager on spawn.",
    "TurretCosmeticData:RotatationAudioRangeInA": "Rotation audio range: In A",
    "TurretCosmeticData:RotatationAudioRangeInB": "Rotation audio range: In B",
    "TurretCosmeticData:RotatationAudioRangeOutA": "Rotation audio range: Out A",
    "TurretCosmeticData:RotatationAudioRangeOutB": "Rotation audio range: Out B",
    "FortCreativeLinearMoverComponent:RotationAxis": "Rotation axis to rotate on.",
    "EFortMiniMapIconRotation.EFMMIR_Absolute": "Rotation based on map orientation (useful when \"direction\" OF object is important, for example other players rotation)",
    "EFortMiniMapIconRotation.EFMMIR_Relative": "Rotation based on relative direction to local player (useful when \"direction\" TO object is important, for example damage indicators)",
    "BuildingFoundation:LandIconAdditionalRenderYaw": "Rotation in addition to the foundations yaw rotation to rotate the icon.\nThe land icon will have a rotation equal to Foundation.Rotation.Yaw + LandIconAddiontalYaw.\nUsed for additional tweaking when icon doesn't match actual rotation of foundation.\nDoes not have an effect on bRotateLandIconWorldOffset and LandIconWorldOffset; that way the rotated offset always respects actors forward/right vectors and this can be used to rotate the icon independently.\nThis can be updated during runtime to preview effects.",
    "FortCreativeLinearMoverComponent:RotationMovementData": "Rotation movement data that the server / client uses to execute / simulate rotation movement.",
    "SavedPosition:Rotation": "Rotation of pawn at time Time.",
    "CachedRealitySaplingData:rotation": "Rotation of the sapling",
    "RealitySaplingPersistentData:Rotation": "Rotation of the sapling",
    "FortLevelRecord:Rotation": "Rotation of this saved tile",
    "FortPlayerControllerAthena:RespawnCamera_InitialRotOffset_InAir": "Rotation offset used for the respawn camera when respawning in air.\n@note: this is the initial offset of the camera, and the camera mode itself governs the target/final offset.",
    "FortPlayerControllerAthena:RespawnCamera_InitialRotOffset_OnGround": "Rotation offset used for the respawn camera when respawning on ground.\n@note: this is the initial offset of the camera, and the camera mode itself governs the target/final offset.",
    "PhysicsObjectDeactivationSnapshot:Rotation": "Rotation on deactivate",
    "FortPhysicsBall:BackspinRotationScale": "Rotation rate compared to velocity whe spinning backward. 2 would be like a normal roll, 0 means no rotation.",
    "FortAimAssist2D_Settings:PullMaxRotationRate": "Rotation rate maximum cap on amount of aim assist pull.  Set to '0' to disable.\nNote: This is scaled based on the field of view so it feels the same regardless of zoom.",
    "FortAimAssist2D_Settings:SlowMinRotationRate": "Rotation rate minimum cap on amount to aim assist slow.  Set to '0' to disable.\nNote: This is scaled based on the field of view so it feels the same regardless of zoom.",
    "RidableControlParams:TurnInPlaceRotationSpeed": "Rotation speed when not moving and turning in place",
    "RidableControlParams:AirRotationSpeed": "Rotation speed when ridden and in the air in degrees/s",
    "RidableControlParams:SwimmingRotationSpeed": "Rotation speed when ridden and in the air in degrees/s",
    "RidableControlParams:GroundRotationSpeed": "Rotation speed when ridden and on the ground in degrees/s",
    "RidableControlParams:SprintGroundRotationSpeed": "Rotation speed when sprinting ridden and on the ground in degrees/s",
    "RidableControlRuntimeData:RidingControllerRotation": "Rotation that's used as a reference to clamp our riding angles",
    "FortRespawnData:RespawnRotation": "Rotation the player's pawn should spawn when respawn is ready",
    "FortNavModifierComponent:LowSpeedRotationThreshold": "Rotation to intermittently mark navigation data when under LowSpeedThreshold. Default is 15 degrees.",
    "HoverDroneMovementComponent:TurboRotAcceleration": "Rotational acceleration when turning, while in turbo mode.",
    "HoverDroneMovementComponent:RotAcceleration": "Rotational acceleration when turning.",
    "HoverDroneMovementComponent:TurboRotDeceleration": "Rotational deceleration when not turning, while in turbo mode.",
    "HoverDroneMovementComponent:RotDeceleration": "Rotational deceleration when not turning.",
    "FortWeaponComponent_ScopeAnimation:SignificantRotation": "Rotations smaller than this will be ignored",
    "FortHoagieVehicle:RotorHitAngularImpulse": "Rotor impact angular impulse to apply.",
    "HoagieInPersistent:RotorHitAngularImpulse": "Rotor impact angular impulse to apply.",
    "FortHoagieVehicle:RotorHitLinearImpulse": "Rotor impact linear impulse to apply.",
    "HoagieInPersistent:RotorHitLinearImpulse": "Rotor impact linear impulse to apply.",
    "EFortAILODLevel": "Rough guidelines for what each EFortAILODLevel means are provided below however it should be noted that there are a limited number of NPC's at each EFortAILODLevel\nso NPC's may be at lower levels than the guidelines suggest",
    "MassDeltaVelocityDamageHandlerData:MinRelativeVelocityToDamage": "Rough system velocity (in km/h) that must be reached for an object to deal any damage",
    "EAthenaRoundsMutatorPhase.RoundEndUI": "Round end UI is displayed, before going back to FadeOutToNextRound",
    "EFortMinigameState.PostRoundEnd": "Round ended naturally but the game is continuing",
    "EUraniumRoundPhase.RoundActive": "Round is currently active",
    "EAthenaRoundsMutatorPhase.RoundEnd": "Round or match condition has been satisfied.  Wait for a time before RoundEndUI/MatchEndUI.",
    "EClassRepNodeMapping.Instance_Dynamic": "Routes to GridNode: While dormant we treat as static. When flushed/not dormant dynamic. Note this is for things that \"move while not dormant\". BuildingActors for example are Spatialize_Static despite using net dormancy.",
    "EClassRepNodeMapping.Spatialize_Dynamic": "Routes to GridNode: these actors don't move and don't need to be updated every frame.",
    "EClassRepNodeMapping.Spatialize_Dormancy": "Routes to GridNode: these actors mode frequently and are updated once per frame.",
    "EClassRepNodeMapping.RelevantAllInsideFortVolume": "Routes to an AlwaysRelevantNode or AlwaysRelevantStreamingLevelNode node",
    "TrapItemDefintionDesignerData:LootLevelRowName": "Row Name for loot level data",
    "AlterationSlot:SlotRarityInitRow": "Row handle for determining initial slot rarity.",
    "AlterationSlotDefinition:InitTierGroup": "Row handle that determines available alterations for slot.",
    "FortUITutorialData:TutorialWidgetName": "Row handle that determines the tutorial objective step.",
    "FortAIPawnStats:ControlResistanceScalingTableRow": "Row in the AI control resistance scaling table to use",
    "FortAIPawnStats:DifficultyRatingTableRow": "Row in the AI difficulty rating table to use",
    "FortAIPawnStats:HealthScalingTableRow": "Row in the AI health scaling table to use",
    "FortPawnStats:FallingDamageTableRow": "Row in the falling damage table to use",
    "FortPlayerPawnStats:PersonalVehicleFallingDamageTableRow": "Row in the falling damage table to use while the player is using a personal vehicle",
    "TrapItemDefintionDesignerData:DisassebmleRecipeForm": "Row name for disassembly data table",
    "FortBaseWeaponStats:DurabilityRowName": "Row name for durability table look-up",
    "DifficultyRowProgression:DifficultyRowName": "Row name in the difficulty row table",
    "FortTournamentStatInfo:StatDisplayName": "Row name in tournament stat formatting table",
    "TournamentWeaponKillStat:StatDisplayName": "Row name in tournament stat formatting table",
    "FortHomeBaseInfo:BannerColorId": "Row name of the homebase banner color",
    "FortHomeBaseInfo:BannerIconId": "Row name of the homebase banner icon",
    "FortBaseWeaponStats:SurfaceRatioRowName": "Row name to use for damage surface ratio",
    "FortBaseWeaponStats:NamedWeightRow": "Row name to use for named weights lookup, which impacts possible alterations",
    "FortCollectionBookPageData:SectionRowNames": "Row names of sections within the page",
    "FortCollectionBookSectionData:SlotRowNames": "Row names of slots within the section",
    "HomebaseNodeLevel:GameplayEffectRowNames": "Row names of the gameplay effects from the node gameplay effect table that are received when the node level is active",
    "FortAthenaSplineZipline:AttachLinesToPolesHotfix": "Row that must be true for ziplines to be present. Used to hotfix off ziplines when issues arise.",
    "AthenaLeaderboardData:Stats": "Rows of Leaderboard data",
    "FortQuestObjectiveStatXPTableRow:XPPropagationRule": "Rule for propagating this XP stat",
    "VoiceChatLogSubmitOptions:ExcludeRules": "Rules determining which logs to upload",
    "VoiceChatLogSubmitOptions:IncludeRules": "Rules determining which logs to upload",
    "FortWeaponPickaxeAthena:IdleFXAttachmentRules": "Rules for attaching the idle FX to the weapon mesh",
    "FortWeaponPickaxeAthena:SwingFXAttachmentRules": "Rules for attaching the swing FX to the weapon mesh",
    "ValkyrieEditorPermissionSettings_Editor:AllowedClasses": "Rules for defining which classes and structs are exposed and usable in UEFN.",
    "ValkyrieEditorPermissionSettings_Editor:AllowedAssetTypes": "Rules for defining which types are available in the Content Browser, and which actions are allowed on them",
    "EFortMantisBranchRule": "Rules for how a technique can branch.",
    "CraftingFormula:UpgradeRules": "Rules for how to copy transient data from ingredient to result items",
    "ServiceRegistrySource_ServiceTableRules": "Rules struct for service table access",
    "FortAthenaPointAroundPlayerProvider:RunMode": "Run Mode used to run the query.",
    "EValkyrieSyncProjectOptions.PassedLocalValidation": "Run a full validation pass on all files, even if not dirty",
    "FortAthenaMutator_SupplyDrop:SupplyDropRemovalQueryInterval": "Run every X seconds SupplyDropRemovalQuery to remove outside of safe zone supply drop",
    "FortGameUserSettings:bHasMigratedDownloadSettings": "Run once check to change download defaults",
    "FortGameUserSettings:bSendAppsFlyerEventOnInstallation": "Run once check to send appsflyer installation complete event",
    "EQSActorSpawnerData:SpawnedActorRemovalQueryInterval": "Run the query SpawnedActorRemovalQuery every X seconds to look for spawned actors to remove",
    "FortFootstepSurfaceInfo": "Run time data for our current footstep type, also used in overrides",
    "FortPawnStats:SpeedRun": "Running speed for the pawn",
    "PlayspaceComponent_SpatialActorTracker:TrackedActors": "Running tally of all the actors within this Volume.",
    "SpatialGameplayActorTrackerComponent:TrackedActors": "Running tally of all the actors within this Volume.",
    "EMemorySamplerState.GeneratingSamplingLocations": "Running the sampling location generation algorithm",
    "FortGameplayDataTrackerActorStateGroupConfig:ActorStates": "Runtime Data - Actors that have been registered with their current state",
    "FortGameplayDataTrackedRange:RangeChangedInternalDelegate": "Runtime Data - Multicast delegate for entering or exiting the range",
    "FortGameplayDataTrackerAccumulation:CurrentValue": "Runtime Data - The most recently evaluated value of the accumulation",
    "FortGameplayDataTrackedRange:bIsCurrentlyInRange": "Runtime Data - Whether the data is currently in this range",
    "FortGameplayDataTrackerAccumulationContributor:CurrentValue": "Runtime Data - the most recently evaluated value of the contributor",
    "FortNonPrimaryMission:bSatisfiesCurrentRequirement": "Runtime Data:  Data below this line is used while Mission Generation is in progress.\nUsed while Mission Generation is operating to track whether a mission is valid for the requirement being satisfied.",
    "BuildingFoundation:SpawnedLODActors": "Runtime HLOD and child HLOD actors",
    "AntelopeInPersistent:PushForceCurrentMultiplier": "Runtime Multiplier for changing the max push force of the vehicle",
    "AthenaSeasonItemRuntimeState": "Runtime data for a season item state",
    "LivingWorldSpawnAroundPlayerRuntimeData": "Runtime data holder of the \"UFortPawnComponent_LivingWorldSpawnAroundPlayer\".",
    "VehicleModPhysicsShapeModifiers": "Runtime data related to physics shape modifications.\nReplicated to clients.",
    "LockedQuestRuntimeData": "Runtime data used to generate locked quest widgets.",
    "FortAIEncounterSpawnGroupCapsCategory:NumSpawnGroupAvailable": "Runtime data. The number of times that are currently used when checking if a group can spawn",
    "FortAIEncounterSpawnGroupCapsCategory:CategorySource": "Runtime data. The source of this category",
    "FortAIEncounterSpawnGroupCapsCategory:InitialSpawnGroupAvailabilityTime": "Runtime data. The time that the initial spawn delay ends.",
    "FortAIEncounterSpawnGroupCapsCategory:NumActiveCategorySpawnGroups": "Runtime data. The total number of spawn groups currently active that fit the tag query. Note that this can be a decimal value.",
    "FortAIEncounterSpawnGroupCapsCategory:SpawnGroupAvailabilityTimes": "Runtime data. Times at which a new spawn group can be spawned for this category. Uses SpawnGroupAvailabilityDelaySeconds to set the next time after a group spawns.",
    "FortSlopeWarpingFootData": "Runtime foot data after validation, we guarantee these bones to exist",
    "PredictiveStrideWarpingFootData": "Runtime foot data after validation, we guarantee these bones to exist",
    "SpeedWarpingFootData": "Runtime foot data after validation, we guarantee these bones to exist",
    "BuildingActor:GeneratedTransientOverrides": "Runtime generated set of property names (potentially on sub-objects) that should be treated as \"transient\" while Saving",
    "FortVolumeTimeOfDayComponent:TimeOfDayManager": "Runtime instance of TOD manager",
    "AIPatrolPathComponent:PatrolPath": "Runtime list of following Patrol Path Node Device associated to this path",
    "CreativeEditOnlyMeshComponent:RuntimePreviewOverrideMaterials": "Runtime override materials to apply to the Edit Mesh while previewing the owner actor in Edit mode.",
    "CreativeEditOnlyMeshComponent:RuntimeEditOverrideMaterials": "Runtime override materials to apply to the Edit Mesh. The index in the array corresponds to the material's index on the mesh.",
    "CreativeEditOnlyMeshComponent:RuntimeEditMesh": "Runtime override mesh to display while in Edit mode.",
    "CreativeEditOnlyMeshComponent:RuntimePreviewOverrideMesh": "Runtime override mesh to display while previewing the owner actor in Edit mode.",
    "UrgentQuestData:EventDescriptionOverrideTag": "Runtime override that controls which descriptions to use.",
    "LockedQuestRuntimeData:RuntimeOverrideData": "Runtime overrides, preferred over the version in ConfigData if set",
    "SafeZoneLocationParams": "Runtime parameters used in PickSafeZoneLocation",
    "PowPlayerDataEntry": "Runtime replicated information on a player Shield Power Up info",
    "EncounterMobInstance": "Runtime struct to help manage and keep track of dynamically spawned actors and components that are relevant to a mob",
    "CreativeAssetMetaData:ObjectPtr": "Runtime used object ptr.",
    "FMDeviceCableOrderingMovementState:bMovementActive": "Runtime variables",
    "FabricSignificanceBasedUpdateBucketRuntime": "Runtime version of the above structure, holds all necessary runtime values. Maintained by the user of this system",
    "ConsolidatedQuestComponent:OnCustomSetVisualsToFailed": "SERVER & CLIENT",
    "ConsolidatedQuestComponent:OnCustomSetVisualsToPassed": "SERVER & CLIENT",
    "ConsolidatedQuestComponent:OnQuestStageChanged": "SERVER & CLIENT",
    "FortAthenaQuestActor:OnObjectiveUpdatedDelegate": "SERVER & CLIENT",
    "ConsolidatedQuestComponent:OnQuestComponentSuccessEvent": "SERVER & CLIENT; this fires off when the quest manager notifies us of ObjectiveCompleted or QuestCompleted and for the BP class to do unique visual FX",
    "FortAthenaMutator_GameStartCountdown:OnGameStartCountdownEnd": "SERVER AND CLIENT: Delegate is broadcast whenever the countdown timer has come to an end.",
    "FortAthenaMutator_GameStartCountdown:OnGameStartCountdownBegin": "SERVER AND CLIENT: Delegate is broadcast whenever the countdown timer has started.",
    "ConsolidatedQuestComponent:OnServerQuestReady": "SERVER ONLY",
    "FortAthenaExitCraft:OverlappingPawns": "SERVER ONLY",
    "QuestInteractableComponent:SetupForServer": "SERVER ONLY -",
    "QuestInteractableComponent:Unavailable": "SERVER ONLY -",
    "FortPlayerControllerAthena:PrimaryQuickBarSlotItemGuids": "SERVER ONLY -- This is the current array of item guids saved to the primary quick bar slots",
    "FortPickup:OnPickupAttempted": "SERVER ONLY: Called when a pawn attempts/beings to pick up the object.  (It might not fit in their inventory and so could still end up on the ground at the end.)",
    "FortGameStateAthena:OnPickupSpawnedAndReady": "SERVER ONLY: Called when a pickup actor has been spawned and has received its item definition",
    "FortGameStateAthena:OnPickupDestroy": "SERVER ONLY: Called when a pickup actor is being destroyed",
    "FortPickup:OnPickupDespawned": "SERVER ONLY: Called when the actor has been despawned",
    "FortPickup:OnPickupDestroyed": "SERVER ONLY: Called when the actor has been destroyed",
    "FortPickup:OnPickup": "SERVER ONLY: Called when the actor has been picked up",
    "FortPickup:OnSetPawnWhoDroppedPickup": "SERVER ONLY: Called when the pawn who dropped this pickup is set.",
    "FortPickup:OnPickupCombined": "SERVER ONLY: Called when this pickup is being combined into another pickup.",
    "FortGameplayCueNotifyAthena_FallDamageImmunity:RemovalSound": "SFX played when this effect is removed (if the pawn is no longer falling.)",
    "EFortSTWMatchmakingPrivacyType": "STW Matchmaking privacy configurations",
    "EBannerUsageContext.BannerIcon": "STW or BR banner icon in front-end",
    "EPlayerReportReasons.None": "STW reasons:",
    "EFortQuestObjectiveStatEvent.Collect": "STW: Collect an item in zone for the first time, does not count for gifted items\n              BR: An item went into the players inventory. Target is the item that was collected and has all tags from the ItemDefinition picked up in TargetTagContainer.\n              Possible TargetTagContainer context: Quest.Metadata.AthenaMaxResources, Quest.Metadata.BrandNewItem (if not tossed, or dropped, or dropped from death)\n              To avoid drop/pickup abuse, we decide in code when to fire this, can be overriden to always fire by changing bAlwaysCountForCollectionQuest on the ItemDefinition",
    "TrapItemDefintionDesignerData:SacrificeRecipeForm": "Sacrife recipe",
    "HeroSpecializationDesignerData:LevelToSacrificeXpHandle": "Sacrifice XP",
    "HeroSpecializationDesignerData:SacrificeRecipe": "Sacrifice recipe",
    "HeroSpecializationDesignerData:TransmogSacrificeRow": "Sacrifice row",
    "TrapItemDefintionDesignerData:LevelToSacrificeXpForm": "Sacrifice xp handle",
    "AshtonStoneSpawnData:SpawnSafeZoneIndex": "Safe zone index of when to spawn",
    "EAthenaGamePhase.SafeZones": "Safe zones have started and no player spawning is allowed.",
    "FortWorldConditionAthenaGamePhase:SafeZonePhase": "SafeZone phase that has to be reached",
    "DynamicXpCalibrationResult:ResultExpiresAt": "Safety mechanism to disable an island if it does not get a calibration update (typically due to no one playing map for some time.)",
    "BagelLootTierOverrideAssetData:SafeZoneIndex": "Safezone index for this loot tier override",
    "MashLootTierOverrideAssetData:SafeZoneIndex": "Safezone index for this loot tier override",
    "FortAthenaMutator_Disco:LastSafeZone": "Safezone the game ends on",
    "CatalogItemPrice:FinalPrice": "Sale price in whatever currency. This is the value you will pay when you purchase this item. When it's not on sale it'll be the same as RegularPrice",
    "AthenaBatchedDamageGameplayCues_NonShared": "Same as FAthenaBatchedDamageGameplayCues_Shared except it contains data that cannot be shared acrossed connections",
    "EFortItemCollectorBehavior.FreeForAll": "Same as FirstToGoal except the Item Collector will not lock down, so teams can both achieve the goal (no CaptureState).",
    "FortAnimInput_PlayerAnimAsset:SwimUpperBodyAdditivePoseOffset": "Same as UpperBodyAdditivePoseOffset, but applies only when swimming.\nIf both UpperBodyAdditivePoseOffset and SwimUpperBodyAdditivePoseOffset is used, UpperBodyAdditivePoseOffset will still apply when not swimming.",
    "BuildingActor:bIsDynamicOnDedicatedServer": "Same as bIsDynamic, but for the dedicated server. WARNING: You really do NOT want to use this flag unless you get permission first. Too many of these will cause performance problems!",
    "EFortQuestObjectiveStatEvent.KillWhileMounted": "Same as the generic Kill but only sent when the player is on a ridden creature. Target is the Actor that was killed while Source is the players tags PLUS the tags of the mount (for identifying what the player was riding).",
    "ButterCakeUnstuckComponent:LocationSampleMaxCount": "Sample Count needed before check if we are stuck or not",
    "BuildEvent": "Sample for a build event that has taken place (placing floors/walls/traps/currents). If the build replaces an existing structure, it is considered an edit.",
    "StormSample": "Sample of the storm/safe zone in the game, at a given time. Typically sampled by the Unicorn Driver ever 2 seconds",
    "EMemorySamplerState.LaunchError": "Sampler failed to launch",
    "EMemorySamplerState.Idle": "Sampler has not been started yet",
    "EMemorySamplerState.InProgress": "Sampler is in progress",
    "EMemorySamplerState.InProgressNotOwner": "Sampler is in progress but we arent the owner of the process",
    "FabricSignificanceBasedUpdateBucketRuntime:ActualFramesPerUpdate": "Sanitizes FramesPerUpdate (since FramesPerUpdate is a user input value and may be less than 1).",
    "RealitySaplingPersistentData:MaturityLevel": "Sapling Maturity Level.",
    "RealitySaplingPersistentData:NurturingLevel": "Sapling Nurturing Level.",
    "FortGameStateComponent_RealitySapling:SaplingAsset": "Sapling class asset",
    "BuildingRealitySapling:PersistentSaplingData": "Sapling data that is set when spawning this sapling from persistent data from a player's profile",
    "EFortWorldRecordState.Succeeded": "Save dirty deployable bases",
    "CraftingObjectRepStateData:CraftingInstigator": "Save off the instigator that started crafting",
    "FortUserCloudHelperComponent:SaveSizeCompressionThreshold": "Save size in bytes at or above which we compress.",
    "EFortWorldRecordState.SavingPlayerDeployableBases": "Save the profiles of any players, this also saves world metadata",
    "FortBotTargetInfo:SupportingActor": "Save the supporting actor of the source actor",
    "CreativeRoyalePlayspaceComponent_LevelReset:SavedFoundActors": "Saved Actors that were found to add Died and Damaged callbacks to",
    "BuildingContainersArrayEntry:BuildingContainer": "Saved BuildingContainer found to support Loot",
    "PlaysetLevelStreamComponent:CurrentPlayset": "Saved Editor set playspace to use",
    "FortGameStateOutpost:IronCityLowestPlayerAccountLevel": "Saved Iron City lowest AccountLevel at the time of starting simulation",
    "BuildingActor:bIsDedicatedServer": "Saved NetMode result to avoid GetWorld() call on Tick",
    "BuildingActor:bIsTemporarilyTicking": "Saved NetMode result to avoid GetWorld() call on Tick",
    "FortItemEntry:SavedWeaponModSlots": "Saved data for all weapon mod slots that are on this item",
    "FortPooledSkelMeshComponent:SavedMaterials": "Saved materials to be restored when this gets reused",
    "FortProjectileMoveComp_Drunk:CachedBlendAlpha": "Saved off blend alpha that was last computed.",
    "BuildingContainer:SavedReservedRandomValueResult": "Saved off copy of the random value that was rolled from the PostUpdate code path;\n              it's easiest and cheapest to use the same value as the first roll, if we feel this should\n              be re-rolled, we will need to get access to the original struct passed through via PostUpdate",
    "ESavedAccountType.Refresh": "Saves account(relative) / refresh token (CHOICE ALREADY STORED IN INI)",
    "AssembledComponentReferences:AssembledMeshSchemaTag": "Saving the assembled mesh schema tag that these components came from, for retrieval later.",
    "FortVehiclePhysicsCollisionDamageComponent:LastOnSKComponentHitTime": "Saving this time so we can have a cooldown between hits.",
    "EAlertLevel.LostTarget": "Saw a menace already but lost LOS and have a last known position",
    "EFortRewardType": "Says what type of item we are",
    "FortHealthBarComponent:bIsHealthBarVisible": "Says whether or not this widget is visible",
    "AthenaCapturePoint:bUseHUDIndicator": "Says whether this capture point uses a HUD element",
    "FortAthenaLivingWorldManager:LagerEnabled": "Scalable Float to enable/disable Lager manager",
    "FortGamepadSettings:GamepadLookScale": "Scalar applied to gamepad look input",
    "FortGamepadSettings:GamepadLookScaleDownsights": "Scalar applied to gamepad look input when aiming downsights",
    "FortGamepadSettings:GamepadLookScaleScope": "Scalar applied to gamepad look input when aiming with a scope",
    "TornadoConfigEntry:PlayerGravityFloorGravityScalar": "Scalar applied to normal gravity while player is within the vortex's gravity floor",
    "FortGravityGunHolder:LaunchSpeedMultiplier": "Scalar for the held object speed when thrown.",
    "FortGravityGunHolder:FollowSpeedMultiplier": "Scalar for the held object speed while being held.",
    "FortGravityGunHolder:RingRightDistanceScalar": "Scalar for the ring's right distance.",
    "FortGravityGunHolder:VehicleLaunchSpeedMultiplier": "Scalar for the vehicle speed when thrown.",
    "FortGravityGunHolder:VehicleFollowSpeedMultiplier": "Scalar for the vehicle speed while being held.",
    "FabricMeshProviderMeshReferenceParams:ScalarParams": "Scalar material parameters to apply to mesh",
    "FortDecoPreview:CanBePlacedMaterialScalarParam": "Scalar parameter name for whether the preview can be placed or not",
    "FortFirstPersonCameraController:FirstPersonCameraInteractionDistanceScalar": "Scalar to adjust the the custom camera mode interaction distance",
    "FortProjectileBase:SkyTubeForceMultiplier": "Scalar to sky tube forces. Also multiplied by scalar in the tube itself. All forces from tubes (including entry force) disabled for this projectile if set to 0.",
    "FortMaterialStyleParameterData:Scalar": "Scalar value of the material parameter this data will be changing",
    "FortMiniMapIconMaterialParameterData:Scalar": "Scalar value of the material parameter this data will be changing",
    "FortNavModifierComponent:LowSpeedScaleThreshold": "Scale Distance to intermittently mark navigation data when under LowSpeedThreshold. Default is 10% scale change on any axis.",
    "EImGuiDPIScaleMethod.ImGui": "Scale ImGui fonts and styles.",
    "FortAimAssist2D_Settings:TargetWeightDBNOScale": "Scale applied to target weight when target is DBNO.",
    "FortAthenaMutator_Cobalt:EnemyMapIconScale": "Scale for enemy player icons in map",
    "CrashpadStaticParams:PawnLaunchMultiplierXY": "Scale for horizontal component of pawn launch velocity",
    "CrashpadStaticParams:ProjectileLaunchMultiplierXY": "Scale for horizontal component of projectile launch velocity",
    "CrashpadStaticParams:VehicleLaunchMultiplierXY": "Scale for horizontal component of vehicle launch velocity",
    "PickedTurnTransitionData:RootMotionTranslationScale": "Scale for root motion translation",
    "FortAthenaMutator_Cobalt:TeammateMapIconScale": "Scale for teammate player icons in map",
    "FortSeasonItemMapData:FullScreenMapScale": "Scale for the icon",
    "CrashpadStaticParams:ProjectileLaunchMultiplierZ": "Scale for vertical component of projectile launch velocity",
    "CrashpadStaticParams:VehicleLaunchMultiplierZ": "Scale for vertical component of vehicle launch velocity",
    "EmporiumSettings:bNormalizeScale": "Scale imported meshes so that their bounds fit in a 1mx1mx1m bounding box",
    "CrashpadStaticParams:PhysicsObjectImpulseMultiplier": "Scale impulse on physics object",
    "EImGuiDPIScaleMethod.Slate": "Scale in Slate. ImGui canvas size will be adjusted to get the screen size that is the same as defined in the Canvas Size property.",
    "BoneReferenceScale": "Scale list of bones using a Mutator",
    "MilkshakeControllerComponent:CameraShakeScale": "Scale multiplier used to manage the overall magnitude of the camera shake applied by this component.\n     Primarily used to adjust how much the screen shakes for hotfixing purposes. Gets replicated to the client through CameraShakeScaleReplicated.",
    "GoaFInPersistent:LeanImpulseScaleBL": "Scale of the impulse force that is applied to the back left",
    "FortAthenaGoatVehicle:LeanImpulseScaleBR": "Scale of the impulse force that is applied to the back right",
    "GoaFInPersistent:LeanImpulseScaleBR": "Scale of the impulse force that is applied to the back right",
    "FortAthenaGoatVehicle:LeanImpulseScaleFR": "Scale of the impulse force that is applied to the front right",
    "GoaFInPersistent:LeanImpulseScaleFR": "Scale of the impulse force that is applied to the front right",
    "CrashpadStaticParams:PhysicsObjectMassMultiplier": "Scale physics object mass",
    "FortMeleeWeaponStats:SwingPlaySpeed": "Scale playing speed of swing animation.",
    "FortMapIconDefinition:IconScale": "Scale the MiniMap/Map icon",
    "FortMiniMapData:IconScale": "Scale the minimap icon?",
    "FortAIPawn:MiniMapScale": "Scale the size of the minimap icon.  A scale of (1, 1) is the default size.",
    "SkyAtmosphereValues:HeightFogContribution": "Scale the sky and atmosphere lights contribution to the height fog when SupportSkyAtmosphereAffectsHeightFog project setting is true.",
    "FortBaseWeaponStats:DmgScale": "Scale to apply to character weapon damage, based on weapon level",
    "FortBaseWeaponStats:ClipScale": "Scale to apply to clip size, based on weapon level",
    "FortBaseWeaponStats:DurabilityScale": "Scale to apply to durability, based on weapon level",
    "FortBaseWeaponStats:EnvDmgScale": "Scale to apply to environmental weapon damage, based on weapon level",
    "FortBaseWeaponStats:ImpactDmgScale": "Scale to apply to impact weapon damage, based on weapon level",
    "FortBaseWeaponStats:StunScale": "Scale to apply to stun time, based on weapon level",
    "FortRangedWeaponStats:ROFScale": "Scale to apply to the firing rate of the weapon, based on weapon level",
    "FortBaseWeaponStats:ReloadScale": "Scale to apply to the reload time of the weapon, based on weapon level",
    "FortHealthBarComponent:ScaleOverDistanceCurve": "Scale to apply to this widget based on distance from camera.",
    "FortRangedWeaponStats:RecoilHorizScaleGamepad": "Scale to apply to weapon horizontal recoil when using a gamepad",
    "FortRangedWeaponStats:RecoilHorizScale": "Scale to apply to weapon horizontal recoil, based on weapon level",
    "FortRangedWeaponStats:RecoilVertScaleGamepad": "Scale to apply to weapon vertical recoil when using a gamepad",
    "FortRangedWeaponStats:RecoilVertScale": "Scale to apply to weapon vertical recoil, based on weapon level",
    "FortRangedWeaponStats:CoolXScale": "Scale to apply to x-coordinate on spread cool-down curve, based on weapon level",
    "FortRangedWeaponStats:HeatXScale": "Scale to apply to x-coordinate on spread heat curve, based on weapon level",
    "FortRangedWeaponStats:CoolYScale": "Scale to apply to y-coordinate on spread cool-down curve, based on weapon level",
    "FortRangedWeaponStats:HeatYScale": "Scale to apply to y-coordinate on spread heat curve, based on weapon level",
    "FortAthenaMutator_Heist:EnemyCarrierBrushScale": "Scale to draw the brush to use for friendly bling carriers",
    "FortAthenaMutator_Heist:FriendlyCarrierBrushScale": "Scale to draw the brush to use for friendly bling carriers",
    "FortMiniMapComponent_Discoverable:NotDiscoveredIconScale": "Scale to render the NotDiscovered Icon at.",
    "FortAthenaMutator_Ashton:MapEnemyScale": "Scale used to display the enemy on the map when they run out of respawns",
    "FortGameFeatureKeyboardMouseKeybindInfo:AxisInputScale": "Scale value, if mapping is used for an axis",
    "FortActionKeyMapping:InputScale": "Scale value, if mapping is used for axis",
    "CrashpadStaticParams:VerticalVelocityMultiplier": "Scale vertical component of velocity",
    "AthenaAISettings:CrouchHearingModifier": "Scales the hearing range. Value between 0 and 1 inclusive",
    "SkyAtmosphereValues:SkyLuminanceFactor": "Scales the luminance of pixels representing the sky, i.e. not belonging to any surface.",
    "FortDecoPreview:MovementEffectScale": "Scaling factor on bounce/motion",
    "FortMovementComp_Character:SkydivingMaxSmoothUpdateDistanceScale": "Scaling factor to network smoothing when skydiving or parachuting, since velocities are quite high.",
    "FortSceneCaptureData:SceneCapture": "Scene capture for this capture data.",
    "CreativeDeveloperSettings:PlaysetThumbnailEditorStage": "Scene to render playset thumbnails in the editor (including FN Studio which is why this is not an editor-only property)",
    "BuildingTrap:TraceLocation": "SceneComponent used for getting a World Location in IsTargetObstructed() and GetTargetingTransform()",
    "DynamicUIDirectorBase:DefaultScenes": "Scenes that will be added automatically when the director is added to the world.",
    "EFortCraftFailCause.OverflowSchematic": "Schematic is in an inventory overflow state",
    "EFortBangType.VaultMelee": "Schematics Tabs",
    "EFortAthenaTutorialSubstep.ScreenEquipRifle": "Scoping",
    "ObjectiveEventRecord:Scope": "Scoping info for the objective",
    "QuestEventRecord:Scope": "Scoping info for the objective",
    "BuildingProp_CreatureManager:SelectedOverrideScoreDistribution": "Score Override Option",
    "BuildingProp_CreatureManager:SelectedOverrideScoreValue": "Score Override Option",
    "BotWeaponModScoreInfo:ModScore": "Score corresponding to the mod",
    "DigestedBotModScoreInfo:ModScore": "Score corresponding to the mod",
    "Recipe:Score": "Score earned when recipe is executed",
    "FortAthenaMutator_Bagel:ScoreMutliplierSpawnData": "Score multiplier",
    "FortAthenaMutator_Mash:ScoreMutliplierSpawnData": "Score multiplier",
    "FortAthenaMutator_Bagel:RiftDestroyedScoreMultiplierBonus": "Score multiplier bonus added when destroying a rift",
    "FortAthenaMutator_Mash:RiftDestroyedScoreMultiplierBonus": "Score multiplier bonus added when destroying a rift",
    "FortAthenaMutator_Bagel:ObjectiveAreaCompletedScoreMultiplierBonus": "Score multiplier bonus added when finishing an objective area",
    "FortAthenaMutator_Mash:ObjectiveAreaCompletedScoreMultiplierBonus": "Score multiplier bonus added when finishing an objective area",
    "ScoreMultiplierRow:BluGloActivity": "Score multiplier for Blu-Glo Activity",
    "ScoreMultiplierRow:FlagsCaptured": "Score multiplier for PvP flags captured",
    "ScoreMultiplierRow:FlagsReturned": "Score multiplier for PvP flags returned",
    "ScoreMultiplierRow:MetalGathered": "Score multiplier for amount of metal gathered",
    "ScoreMultiplierRow:StoneGathered": "Score multiplier for amount of stone gathered",
    "ScoreMultiplierRow:WoodGathered": "Score multiplier for amount of wood gathered",
    "ScoreMultiplierRow:BuildingsBuilt": "Score multiplier for building being built",
    "ScoreMultiplierRow:BuildingsBuilt_Metal": "Score multiplier for building metal buildings",
    "ScoreMultiplierRow:BuildingsBuilt_Stone": "Score multiplier for building stone buildings",
    "ScoreMultiplierRow:BuildingsBuilt_Wood": "Score multiplier for building wood buildings",
    "ScoreMultiplierRow:ContainersLooted": "Score multiplier for containers looted",
    "ScoreMultiplierRow:CraftingPoints": "Score multiplier for crafting points",
    "ScoreMultiplierRow:Deaths": "Score multiplier for deaths",
    "ScoreMultiplierRow:BuildingsDestroyed": "Score multiplier for destroying buildings",
    "ScoreMultiplierRow:Repair_Metal": "Score multiplier for metal resources spent on repair",
    "ScoreMultiplierRow:PlayerKills": "Score multiplier for player kills",
    "ScoreMultiplierRow:Repair_Stone": "Score multiplier for stone resources spent on repair",
    "ScoreMultiplierRow:TrapActivationPoints": "Score multiplier for trap activation",
    "ScoreMultiplierRow:TrapPlacementPoints": "Score multiplier for trap placement",
    "ScoreMultiplierRow:BuildingsUpgraded_Metal2": "Score multiplier for upgrading metal buildings to lvl 2",
    "ScoreMultiplierRow:BuildingsUpgraded_Metal3": "Score multiplier for upgrading metal buildings to lvl 3",
    "ScoreMultiplierRow:BuildingsUpgraded_Stone2": "Score multiplier for upgrading stone buildings to lvl 2",
    "ScoreMultiplierRow:BuildingsUpgraded_Stone3": "Score multiplier for upgrading stone buildings to lvl 3",
    "ScoreMultiplierRow:BuildingsUpgraded_Wood2": "Score multiplier for upgrading wood buildings to lvl 2",
    "ScoreMultiplierRow:BuildingsUpgraded_Wood3": "Score multiplier for upgrading wood buildings to lvl 3",
    "ScoreMultiplierRow:Repair_Wood": "Score multiplier for wood resources spent on repair",
    "ScoreMultiplierRow:MonsterDamagePoints": "Score multiplier from damaging monsters",
    "ScoreMultiplierRow:MonsterKills": "Score multiplier from killing monsters",
    "BagelScoreMultiplierSpawnData:ScoreMultiplier": "Score multiplier to apply when interacting with this",
    "MashScoreMultiplierSpawnData:ScoreMultiplier": "Score multiplier to apply when interacting with this",
    "FortAthenaMutator_Chrome:ScoreToWin": "Score required to win",
    "WinConditionScoreData:GoalScore": "Score required to win the match",
    "BagelScoreData:ScoreText": "Score text to display with the event",
    "MashScoreData:ScoreText": "Score text to display with the event",
    "FortAthenaMutator_SpyRumble:ScoreToAddOnSupplyDropCollect": "Score to add to the collecting team when a supply drop is collected",
    "FortTrapStats:ActivationScore": "Score to gain when the trap is activated",
    "FortTrapStats:PlacementScore": "Score to gain when the trap is placed",
    "BagelScoreData:ScoreValue": "Score value to give to the player",
    "MashScoreData:ScoreValue": "Score value to give to the player.",
    "EShowPlacardPhase.Show": "Screen fades in and our UI placard is told to start showing",
    "PapayaTimedEvents:ScreenName": "Screen name to configure against.",
    "FortBattlePassVideoAnnotation:ScreenPosition": "Screen position in Slate units at 1:1 dpi (for FN, that's 1920x1080)",
    "EventCinematicPlaybackAction": "Scripted Action used to trigger event cinematic playback in the frontend.\n*     It should have everything it needs to full handle video playback. The only\n*     data requirements are changes to the Video Display Data and associating this\n*     script with an objective.",
    "FortTimeOfDayManager:SpecificTimeOfDayEditing": "Scrubber that allows sliding the value of Specific Time Of Day Editing String (above) to see the changes real-time.  The decimal value can be used in blueprints to set the time to the matching look.  Used exclusively for view purposes in editor (and PIE and Simulate).  Not in-game.",
    "TimeOfDayEditorViewSettings:SpecificTimeOfDayEditing": "Scrubber that allows sliding the value of Specific Time Of Day Editing String (above) to see the changes real-time.  The decimal value can be used in blueprints to set the time to the matching look.  Used exclusively for view purposes in editor (and PIE and Simulate).  Not in-game.",
    "BuildingContainersArrayEntry:SearchLootTierGroup": "Search Loot Tier Group from the Building Container",
    "EFortMatchmakingType.CriticalMission": "Search for anyone, sorted by player rating",
    "EFortMatchmakingType.QuickPlay": "Search for anyone, sorted by zone difficulty",
    "BuildingItemWeaponUpgradeActor": "Season 11 - WUMBA (W)eapon (U)pgrade (M)achine (BA)\n\nActor that will take player's resources and weapon and upgrade it to a new rarity if possible.",
    "XPEventInfo:SeasonBoostValuePortion": "Season Boost XP Value portion of this event.  How much did our season match xp boost contribute to the Xp Value",
    "FortSeasonItemMapData:SeasonItemTag": "Season item tag identifier. This is stored as a string to avoid build issues referencing tags in plugins.",
    "FortHighlightColors:SceneModulationColor2": "Second color to modulate to",
    "FortAIPawn:SecondInteractionText": "Second interaction text to display",
    "FortActionKeyMapping:KeyBind2": "Second key binded to this action",
    "WorldTileSubArray": "Second tier for the 2D WorldTile array",
    "FortRangedWeaponStats:CoolX2": "Second x-coordinate on spread cool-down curve",
    "FortRangedWeaponStats:HeatX2": "Second x-coordinate on spread heat curve",
    "FortRangedWeaponStats:CoolY2": "Second y-coordinate on spread cool-down curve",
    "FortRangedWeaponStats:HeatY2": "Second y-coordinate on spread heat curve",
    "EventScreenTrackData:TrackColorSecondary": "Secondary color associated with this track. Passed into reward widgets.",
    "HomebaseBannerColor:SecondaryColor": "Secondary color for the homebase banner",
    "FortWeapon:SecondaryFireSound": "Secondary fire sound",
    "FortWeapon:SecondaryFireStopSound": "Secondary fire stop sound (used to cap looping sounds)",
    "PerkMutatorData:BlockRespawnTag": "Secondary gameplay tag used to delay respawning",
    "EFortMissionType.Secondary": "Secondary missions can be started at any time",
    "EMissionGenerationCategory.Secondary": "Secondary missions can be started at any time",
    "EFortActivityIsLockedReason.SplitscreenCreativeBlocked": "Secondary player does not allow Creative on a Creative mode",
    "EFortActivityIsLockedReason.SplitscreenOtherSetting": "Secondary player is blocked by an additional K3S setting",
    "EFortActivityIsLockedReason.SplitscreenRatingBlocked": "Secondary player's rating is set below the content rating",
    "QuickBar:SecondaryFocusedSlot": "Secondary slot that should be highlighted in this quick bar",
    "FortAbilityTargetSelection:SecondarySource": "Secondary source to use for targeting, if None it will only do the primary source",
    "EAthenaAIServicePOIList.SecondaryBusDrop": "SecondaryBattleBusTagQueryPOIList",
    "AccountIdAndMatchEndData:TotalSecondsInMatch": "Seconds the player was in the match for Battlepass xp analytics",
    "FortProjectilePetrol:MaxLifeSpanOnCollision": "Seconds the projectile will hang around before destroying itself.",
    "MegaStormManager:MaxSecondsInMegaStormUpdate": "Seconds we allow for mega storm's tick before we throttle.",
    "FortCollectionBookClaimRewardNotification:Section": "Section ID - if null, this is a page or book reward",
    "VkArtifactOption:Role": "Security role for this client",
    "PartyMemberPackedState:bAnyoneChangeSelectedExperience": "See: UFortExperimentContext::EExperimentId::AnyoneChangeSelectedExperience",
    "PartyMemberPackedState:bReturnToLobbyAndReadyUp": "See: UFortExperimentContext::EExperimentId::ReadyUpEndGameIntoLobby",
    "EPerceptionState.Threat_Seeing": "Seeing the threat",
    "LiquidRibbonSplineDetachment:Segment": "Segment that this detachment occurred on",
    "ELeashReturnLocationMode.Random": "Select a random location inside the leash",
    "ImGuiCanvasSizeInfo:SizeType": "Select how to specify canvas size.",
    "FortAIPawn:AppearanceOverrideGender": "Select the appearance gender override to use. If left at the default of FAPG_Default and AppearanceOverrideName is empty, a random appearance will be selected.",
    "FortAIPawn:AppearanceOverrideName": "Select the appearance override to use. If empty and AppearanceOverrideGender is FAPG_Default, a random appearance will be selected.",
    "ELeashReturnLocationMode.Closest": "Select the closest location on inner radius",
    "FortAthenaLivingWorldDensityCondition:Tag": "Select which density grid to look at. None tag means the global actor density grid.",
    "FortMinigame:GameEndCallout": "Select which type of callout to show in the victory screen",
    "FortPawnComponent_SpeechBubble:CachedSelectedText": "Selected Text",
    "FortSpeechBubbleInfo:SelectedTextIndex": "Selected Text Index to display in the Speech Bubble",
    "AccountIdAndMatchEndData:ShuffledLockerUsedIndex": "Selected loadout preset used if random tile selected",
    "FortCreativeMoveTool:GameplayTagMoveToolHoldPositionCenter": "Selecting a point on the surface while you are facing away from the origin of the actor causes unintuitive movement (looking\nup moves the preview actor down). Large and spline-based props are prone this, so force the hold position to \"Center\" since\nthe move tool move tool does not handle this very well",
    "TieredCollectionProgressionDataBase:SelectionMethod": "Selection method to use for the collection",
    "EFortSelfHealingHandling.Allowed": "Self healing is allowed, but not required",
    "EFortSelfHealingHandling.Required": "Self healing is required",
    "EFortQuestType.Achievement": "Self-contained goal that may take a significant amount of time to complete",
    "FortLootTierData:LootPackageCategoryWeight": "Semi-colon delimited list of loot package category weights; Marked transient as it is parsed upon import into LootPackageCategoryWeightArray",
    "FortLootTierData:LootPackageCategoryMax": "Semi-colon delimited list of loot package maximum drops per category; Marked transient as it is parsed upon import into LootPackageCategoryMaxArray",
    "FortLootTierData:LootPackageCategoryMin": "Semi-colon delimited list of loot package minimum drops per category; Marked transient as it is parsed upon import into LootPackageCategoryMinArray",
    "EEventTournamentRound.SemiFinals": "Semi-finals (Saturday)",
    "CursorSettings:broadcastNoteOffMsgs": "Send events for note off messages",
    "CursorSettings:broadcastNoteOnMsgs": "Send events for note on messages",
    "CursorSettings:broadcastTextMsgs": "Send events for standard text messages",
    "FortAthenaMutator_GamePhaseMessage": "Send messages to AFortGameStateAthena::HandleGameModeMessageRequest() when game phase changes.\nThis triggers the game mode message UI to display a message (typically used by LTMs to explain special events).",
    "EChatMessageOrigin.Unknown": "Sender unknown or message invalid",
    "FortWorldMarkerData:MarkedActorClass": "Sending the class is a safe bet, since we can guarantee the client will understand at least what kind of thing was marked.",
    "FabricScreenComponent:OnWidgetAdded": "Sends a message when a widget is added to the widget screen.",
    "FortAthenaAIBotController:AISenseConfig_HearingOverride": "SenseConfigHearing use to override value",
    "FortAthenaAIBotController:AISenseConfig_SightOverride": "SenseConfigSight use to override value",
    "FortAthenaDoghouseVehicle:FreelookSensitivity": "Sensitivity multiplier for freelook with mouse",
    "FortGyroV2Settings:GyroV2BuildingMultiplier": "Sensitivity multiplier while in build mode",
    "FortGyroV2Settings:GyroV2EditingMultiplier": "Sensitivity multiplier while in edit mode",
    "EChatMessageOrigin.Local": "Sent by a local player",
    "EChatMessageOrigin.Remote": "Sent by an online player",
    "EChatMessageOrigin.System": "Sent by the system",
    "ImportFriendsRewardNotification": "Sent in response to a successful ClaimImportFriendsReward call",
    "EFortQuestObjectiveStatEvent.DownOrElim": "Sent only for Player Elims/downs, not wildlife, does not give double credit to the same player for both Down/Elim.\n      Target is the player who was downed or eliminated. TargetTagContainer will have either Quest.Metadata.Player.Downed or Quest.Metadata.Player.Finished",
    "EFortQuestObjectiveStatEvent.SquadScoredPlayerElimination": "Sent to SquadMembers of Player that scored the Elim (did it give an increase in your kill score)",
    "EFortQuestObjectiveStatEvent.TeammateDealtDamage": "Sent to TeamMembers of Player that dealt a defined amount damage to an object, player, or creatures. The target is the object, player, or creature which was damaged.",
    "EFortQuestObjectiveStatEvent.TeamScoredPlayerElimination": "Sent to Teammates of Player that scored the Elim.",
    "EFortQuestObjectiveStatEvent.TeamKill": "Sent to all players on team of player that eliminated something (wildlife, npc, loot llama, etc). The tags sent are the raw Source/Target tags with no contextual (Quest.Metadata...) tags added.\n      Blocked if ASC of target has tag Stat.IgnoreKillScore. Target is the Actor that was killed.",
    "EFortQuestObjectiveStatEvent.ScoredPlayerElimination": "Sent to who was credited with the elimination (not who finished them off)",
    "EFortQuestObjectiveStatEvent.Refuel": "Sent when Refueling occurs. SourceTags=Tags from actor that's spawning the gas proj or refueling an itemdef. TargetTags=tags from the actor that received the fuel",
    "EFortQuestObjectiveStatEvent.Accolade": "Sent when an Accolade is complete, and the accolade def has tag 'Accolade.Metadata.AdditionalStatEvent'. All tags of the accolade will be sent as Source tags container. Target is empty.",
    "EValkyrieValidationErrorCode.MissingSentryManifest": "Sentry manifest couldn't be loaded",
    "FortGameStateComponent_Campsite:DenyListItemPaths": "Separating item paths from item definitions to support blacklisting things from external plugins. Edit in CampsiteGameplayGame.ini.",
    "FortStatEventSequence:EventSequence": "Sequence of ordered events",
    "FortCreativeSplineModificationComponent:SplinePoints": "Serializable spline points that are used to reconstruct the device in Creative, and to transmit updates between UEFN and VK-Edit.\nNot actually serializing this array itself since UEFN does not allow components to do so, but this array gets sent to the owning\ndevice to save there",
    "SplinePoint_Serializable": "Serializable version of the FSplinePoint struct. The struct needs to be serializable so that players in Creative/VK-Edit can duplicate the actor with the same spline data",
    "FabricStepSequencerComponent:PackedStepTable": "Serialization format for step table and any replication\nFORT-657998: Not really editable:\nLive Edit in UEFN requires knowledge that the instance can be edited in order to not fall back to CDO during components reconstruction via AActor::RerunConstructionScripts",
    "FortPlayerRecord:BackpackData": "Serialized copy of what the player's backpack should be",
    "FortAIGoalManager:WorldAssignments": "Serialized, because they can change dynamically from blueprints, etc.",
    "FortAthenaVehicle:OnVehicleEnteredWaterBody": "Server & Client: Fires whenever the vehicle enters the water.",
    "FortAthenaVehicle:OnVehicleExitedWaterBody": "Server & Client: Fires whenever the vehicle exits the water.",
    "EServerStability.HighUnstability": "Server FPS is very low and is having significant performance issues",
    "FortAthenaMutator_EQSActorSpawner:OnEQSActorSpawningPhaseEnded": "Server ONLY. Delegate called when a spawner has finished spawning actors.\nThe parameter is the FName NameId of the SpawnerData that started the spawning.",
    "FortAthenaMutator_EQSActorSpawner:OnEQSActorSpawningPhaseStarted": "Server ONLY. Delegate called when a spawner starts spawning actors\n     The 1st parameter is the FName NameId of the SpawnerData that started spawning, the 2nd parameter is the current int32 ActivationIndex\n     If the SpawningTrigger == SafeZoneState then ActivationIndex is the current SafeZoneIndex",
    "FortAthenaMutator_EQSActorSpawner:OnAISpawnedDelegate": "Server ONLY. Delegate called when an ActorSpawner spawns an AI",
    "FortAthenaMutator_EQSActorSpawner:OnActorSpawnedDelegate": "Server ONLY. Delegate called when an ActorSpawner spawns any type of actor.",
    "FortAthenaMutator_EQSActorSpawner:OnPrepareEQS": "Server ONLY. Delegate called when the EQS is prepped right before it is enqueued. Allows the listener to modify the request (for example, the user could add parameters to the EQS).",
    "FortAthenaMutator_Wax:RegisteredWaxPickupActors": "Server ONLY: Tracks the registered Wax pickups in the world.",
    "BuildingActor:PlaysetPackagePathName": "Server Only - Valkyrie downloaded playset package path for this actor",
    "FortControllerComponent_AdHocSquads:AdHocSquadData": "Server Only. The pointer to the current ad hoc squad data object for the owning player.",
    "FortPlayerPawnAthena:OnPlayerLootedContainer": "Server and Client. Callback for when the player loots a container.",
    "FortAthenaMutator_Mash:OnBossPawnChanged": "Server and client delegate fired when the boss pawn changes.",
    "BuildingSMActor:OnMeshSetChanged": "Server and client, fires when the MeshSet of the building actor is changed.",
    "BuildingContainer:OnContainerRandomUpgradeApplied": "Server and client, fires whenever the container has one of its potential random upgrades applied.",
    "FortTankVehicle:DefaultServerSkeletalMeshTickEnabled": "Server animation tick enabled state",
    "FortTankVehicle:DefaultServerVisibilityBasedAnimTickOption": "Server animation tick option state",
    "EServerStability.LowUnstability": "Server average FPS is below the target and has performance issues",
    "EFortServerStatus.StartingMode": "Server has called InitGame() but has not HandleStartMatch()",
    "EFortServerStatus.Running": "Server has started the match and users are playing",
    "EFortServerStatus.Idle": "Server is at or has returned to the idle/empty state",
    "EFortServerStatus.ShuttingDown": "Server is attempting to shutdown and should RequestExit() soon",
    "EFortServerStatus.ServerTravel": "Server is currently traveling",
    "EFortServerStatus.Restarting": "Server is in the process of returning to the idle state",
    "EServerStability.Stable": "Server is performing at the target FPS",
    "EFortServerStatus.UpdateCheck": "Server is running an update/patch check",
    "EFortServerStatus.Launching": "Server is starting up and has not reached idle state yet",
    "EFortBudgetCategory.Network": "Server network cost",
    "FortAthenaExitCraft:PlayersNeedingSeats": "Server only",
    "BuildingActor:ActorTemplateID": "Server only - Associated actor template ID for metadata retrieval through SpatialMetrics",
    "BuildingPoolHarvestResourceSpawnsComponent": "Server only ABuildingSMActor component that is added to buildings we are currently pooling the harvest resource spawns for.\n    When a building actor decides it wants to pool harvest resource spawns it should do the following:\n            1) call UBuildingPoolHarvestResourceSpawnsComponent::FindOrAddBuildingPoolHarvestResourceSpawnsComponent() to find or create the necessary component.\n            2) on the returned component call PoolAttemptSpawnResources() which will add to the amount of pooled harvest resources to spawn.\n    For a short time any pooled resources will be tallied up on a per building per instigating pawn basis and at the end of that period (or the death or the building or the destruction of the pawn) the pooled resources will be spawned as a single resource drop.",
    "FortPlayerRemovedFromAlivePlayersEvent": "Server only event called when a player is removed from the alive players list",
    "FortEndGamePhaseStartedEvent": "Server only event called when the end game phase is started",
    "FortMatchmakingSessionAssignedEvent": "Server only event called when the end game phase starts",
    "FortMeshServerPerfEvent": "Server only event called when the mesh server perf event fires",
    "FortSafeZoneLocationsInitializedEvent": "Server only event called when the safe zone locations are initialized",
    "FortGracefulShutdownInitiatedEvent": "Server only event called when the server is trying to gracefully shutdown",
    "FortUpdateScoringLogicEvent": "Server only event called when time based scoring event fires",
    "FortPlayerControllerComponent_RespawnOnDeath:bIsPerformingRespawn": "Server only flag that marks if the owning player controller is currently respawning using this component.",
    "FortMinigameState": "Server only logic for a minigame",
    "BGAConsumableSpawner": "Server only logic that uses a loot table look-up to spawn consumable building gameplay actors around it from an EQS query",
    "FortAthenaMutator_CenterSafezonesOnPOIs:SafezonePOITaggedVolumes": "Server only, AFortPoiVolume*s with tags defined in CenterSafezonesOnPOITag used to set up the current AFortGameModeAthena::SafezoneLocations.\nThe actors in this array may contain mutator specific useful information about each safezone.\nNOTE: Other mutators can affect safe zone locations and could render this data out of sync without warning.\nWhen using this feature make sure that this instance of the AFortAthenaMutator_CenterSafezonesOnPOIs is the ONLY mutator that adjust the safezones.\nIndexed by Safezone Index",
    "BuildingGameplayActorSentry:LocatingDamage_RotationSpeedScalarByAngularDistanceCurve": "Server only, curve used to calculate LocatingDamage_RotationSpeedScalar based on the angular distance between the turret's current facing and the rotation towards its damager.",
    "FortGameStateAthena:OnGoalScoreChanged": "Server only, delegate fired when the goal score (as found through AFortGameStateAthena::GetScoringModeWinningGoal()) may have changed.\n     This function is called by mutators when they re-calculate goal scores so if a mutator doesn't keep track of its previous goal score it is possible that this delegate will sometimes broadcast when no change occurred.",
    "BuildingGameplayActorSentry:LocatingDamage_UpdateTarget_PauseTime": "Server only, during the Locating Damager state, how long after reaching the desired rotation (and LocatingDamage_OvershootRotationDestination)\n     Before the turret attempts to rotate towards the next stored rotation: LocatingDamage_NextRotationGoal.",
    "BuildingGameplayActorSupplyDropRadio:OriginalServerSpawnLocation": "Server only, the location at which the supply drop actor is originally\n     spawned at before it is set to the desired height .",
    "BuildingGameplayActorSupplyDropRadio:PreviousFrameVelocity": "Server only, the velocity of the supply drop in the previous frame.",
    "BuildingGameplayActorSupplyDropRadio:Velocity": "Server only, the velocity of the supply drop.",
    "FortActorComponent_MultiInteract:InteractingNonPlayerActors": "Server only, tracks all non-player actors that are currently interacting with our owning actor.",
    "FortAthenaMutator_Skyfire:OnFirstSquadReachedMaxLootRarity": "Server only. Delegate broadcast when the first squad reaches max loot rarity. This is used to stop the spawning of new time orbs",
    "TempestTornadoForcesComponent:OnActorAddedToTornadoForces": "Server only. Delegate for when a valid actor starts being effected by tornado forces (i.e. picked up, dealt damage, etc.)",
    "TempestTornadoForcesComponent:OnActorRemovedFromTornadoForces": "Server only. Delegate for when an actor becomes no longer effected by tornado forces for any reason.",
    "FortPlayerControllerAthena:OnPickupProjectileCreatedDelegate": "Server only. Delegate that broadcasts when pickup projectile (e.g. a projectile that will spawn a pickup when it lands) has been created",
    "FortAthenaAIBotController:OnPickupCreated": "Server only. Delegate that broadcasts when the AI has spawned a pickup (caused by the AI dropping an inventory item or when the AI dies).",
    "FortPlayerController:OnPickupCreated": "Server only. Delegate that broadcasts when the player has spawned a pickup (normally caused by the player dropping an inventory item.)",
    "SkyfirePlayerPawnComponent:RecordedItemEntries": "Server only. List of pre-skyfire items to be restored in the skyfire loot room",
    "PlayspaceComponent_ServerExpiration:ServerShutdownTimeInSeconds": "Server shutdown time in seconds.",
    "FortPawn:OnSearchedContainer": "Server side event when a building container gets opened.\nNote: Perhaps in future we can broadcast this on client, but incomplete data replicated to the client.",
    "FortTankVehicle:SocketTransformOverrideMap": "Server socket transforms map",
    "FortAthenaMutator_Uranium:PushersAbandonedCartStartTime": "Server time (in seconds) when the all active pushers left the cart",
    "SkyfirePlayerPawnComponent:ExitLootRoomTime": "Server time for when this player (and their squad) will be teleported out of the loot room and back to the main map.\nThis is updated from the skyfire mutator.",
    "SkyfirePlayerPawnComponent:TeleportToLootRoomTime": "Server time for when this player (and their squad) will be teleported out of the mothership gamespace and into their earned loot room.\nThis is updated from the skyfire mutator.",
    "SkyfirePlayerPawnComponent:ExitInitialPrisonTime": "Server time for when this player will be teleported out of the initial prison and into the playspace.\nThis is updated from the skyfire mutator.",
    "SkyfireSquadDataEntry:TeleportToLootRoomTime": "Server time for when this squad will be teleported out of the mothership gamespace and into their earned loot room.",
    "FortSplineGroundPath:MostRecentlyAddedTime": "Server time of the most recently added section.",
    "FortBattleRoyalePlayerAugmentSystem:ServerGrantingStartedTimestamp": "Server time that granting started. This can be used with the server time on gamestate to ensure client timers are synced with server,\n              since clients can load late. -1 signals this has not replicated.",
    "FortControllerComponent_Telemetry:SpawnTime": "Server time that the bot has been spawned",
    "Playspace:MatchStartTime": "Server time when the match was started",
    "PlayspaceLogic:MatchStartTime": "Server time when the match was started",
    "AthenaCarPlayerSlot:PlayerEntryTime": "Server time when the player first entered this vehicle (meaningless if Player is nullptr)",
    "FortPlayerDeathReport:ServerTimeForRespawn": "Server time when the player is allowed to respawn",
    "FortPlayerDeathReport:ServerTimeForResurrect": "Server time when the player is allowed to use a life to resurrect",
    "ControlPointInstanceData:DisableTime": "Server time when this will disable",
    "ControlPointInstanceData:EnableTime": "Server time when this will enable",
    "ControlPointInstanceData:SpawnTime": "Server time when this will spawn",
    "HeistExitCraftData:SpawnTime": "Server time when this will spawn",
    "FortAthenaMutator_Wax:PlayersAboveThresholdByPlace": "Server-only Caches off the player in X place above threshold\n     Ordered by placement where 0 is 1st place, 1 is 2nd place, etc, etc",
    "FortPlayerState:ActiveCosmeticItemSwaps": "Server-only list of item swaps (re-applied to the pawn when it is spawned so swaps persist between pawn spawns)",
    "FortPlayerState:ActiveVariantOverrides": "Server-only list of variant overrides (re-applied to the loadout when the player controller gathers it so swaps persist between pawn spawns)",
    "GasDebuggerMenu:ServerGasDebugSnapshot": "Server-side GAS debug information for the current object, replicated to the client",
    "FortPoiManager:bIsReinitializingGrid": "Server: True while in BuildPOIGrid when it has already been built.\nClient: True while the grid is replicating down, even if this is the initial rep.",
    "CreativeItemTemplateDataArray": "Serves as a \"registry\" of item templates, handling registration/replication and cataloguing for fast lookups",
    "NPCSpecializationDataRow:PricingKey": "Service price key associated with the specialization\nThis is used as a uid simply because no other data is available to determine the specialization",
    "TurretCosmeticData:ServoAudio": "Servo audio component",
    "VkProfileBuildResult:SessionId": "Session ID this profile was generated from",
    "ContentBeaconClientV2:DestSessionId": "Session Id of the destination host",
    "FortPartyMemberRepData:CurrentIsland": "Session info for member's game.",
    "FortPartyRepData:GameSessionKey": "Session key to use to join in progress",
    "FortAthenaAIRuntimeParameters_AIBotLoopSettings:bDisableSpecialActorComponentUntilRespawn": "Set If bot uses a special actor component, but this is only desired after respawn (e.g. once outside the loop)",
    "IceGroundPath:StaticMesh": "Set Static Mesh and Material enable spline meshes",
    "FortSplineGroundPath:StaticMesh": "Set Static Mesh and Material enable spline meshes.",
    "EDayNightCycleMode.StartAtSpecifiedTime": "Set an initial time for the day/night cycle when this modifier is enabled",
    "FortBotPassiveHealerActivityDataTableRow:bEnabled": "Set at false to disable this Activity",
    "FortSpeechBubbleDataTableRow:bEnabled": "Set at false to disable this text",
    "FortPlayerController:ClientTimeoutBlockInputTime": "Set bIsClientTimingOut=true if client has not received data from the server in this many seconds. Ignored if set to <= 0.",
    "FortFallTeleportComponentBase:bTeleporting": "Set by GAs when teleporting",
    "BuildingGameplayActorSpawnChip:bAutoAcquireSpawnChip": "Set by the playlist, tells if chip should be auto acquired by squad members or if they need to loot it",
    "FortAIDirector:bDebugAllowEncounterModifierTags": "Set false from cheats to disable modifier tag usage on encounters. Disables elemental AI.",
    "CharmSlotMetadata:BackPresentedCharm": "Set for charms presented on the character's back",
    "CharmSlotMetadata:WeaponCharm": "Set for weapon charms.",
    "FabricStepSequencerGridComponent:StepSequencer": "Set from: BeginPlay::GetOwner()->FindComponentByClass<UStepSequencerComponent>()",
    "ESynchronizedTeleportHealthAndShieldResetType.MaxHealth": "Set health to max",
    "LockedQuestRuntimeData:UnlockQuest": "Set if UnlockType is PrerequisiteQuest. Represents the quest that must be completed first.",
    "FortAthenaAIBotController:bIsAnAthenaGameParticipant": "Set if bot is participating to BR",
    "FortAthenaAIRuntimeParameters_AIBotLoopSettings:bRespawnOustideTheLoop": "Set if bot should respawn outside the loop. Only valid if bot is allowed to respawn and triggers at the first respawn.",
    "FortAthenaAIRuntimeParameters_AIBotLoopSettings:bSpawnOutsideTheLoop": "Set if bot should spawn outside  the loop. This is to handle NPCs that are not physically in world, different VFX, collision profile and behavior.",
    "FortAthenaAIRuntimeParameters_AIBotLoopSettings:bRespawnAtOriginalSpawnLocation": "Set if bot that respawns outside the loop should respawn at original spawn location instead of where it died. Only valid if bot is allowed to respawn.",
    "FortBotItemDataTableRow:bIsSupported": "Set if items having Tag are supported",
    "EValkyrieSyncProjectOptions.Default": "Set if local validation has already run and passed",
    "FortAthenaMutator_Bagel:bOverrideReplicationSettingsDebug": "Set if mutator should overrides some replication settings use for Deimos AIs",
    "FortAthenaMutator_Mash:bOverrideReplicationSettingsDebug": "Set if mutator should overrides some replication settings use for Deimos AIs",
    "FortAIPawn:bNeedsDeathNotification": "Set if need death notification handled by AIDirector",
    "FortAIPawn:bDespawnedDueToInactivity": "Set if the AI was reported despawned due to inactivity to stats",
    "FortAIPawn:bDespawnedDueToExpiration": "Set if the AI was reported despawned due to lifetime expiration",
    "FortAIPawn:bKilledOrDowned": "Set if the AI was reported killed or downed to stats",
    "BuildingActor:bCanBeSavedInCreativeVolume": "Set if the actor shouldn't be saved to the creative volume.",
    "AthenaMidSeasonUpdate:SeasonPurchasedRequirement": "Set if the battlepass/season book must be purchased in order to run this update",
    "FortPlayerPawnAthena:bShouldSkipMovementFullSimulation": "Set if the pawn movement component should force skip full movement simulation on clients and rely only on network updates",
    "FortPlayerPawnAthena:bShouldPawnAwardPoints": "Set if the pawn should award points when killed",
    "FortPlayerPawnAthena:bShouldPawnDBNODisplayOnKillFeed": "Set if the pawn should display in the Kill Feed when DBNO)",
    "FortPlayerPawnAthena:bShouldPawnDeathDisplayOnKillFeed": "Set if the pawn should display in the Kill Feed when died",
    "FortPlayerPawnAthena:bShouldDropItemsOnDeath": "Set if the pawn should drop his items on death",
    "FortPlayerPawnAthena:bShouldPawnInstantDie": "Set if the pawn should instant die when Handling Out of Health",
    "FortPlayerPawnAthena:bShouldPawnLeaveEliminationIndicator": "Set if the pawn should leave an elimination indicator when died",
    "FortPlayerPawnAthena:bShouldTriggerDeathAnalytics": "Set if the pawn should send analytics when dead",
    "FortActorComponent_Affiliation:bHasSpecificRelations": "Set if this actor has at least one specific relations with another actor",
    "BuildingProp_ConversationCompatible:UseSpecialActorComponent": "Set if this actor should be given a SpecialActorComponentClass when spawned to handle map display.",
    "FortFactionInfo:bHasSpecificRelations": "Set if this faction has at least one specific relations with an actor",
    "FortGameplayCueNotifyLoop_Grinding:bFeetHasLanded": "Set in GCNL BP",
    "FortPawn:DeathTags": "Set in HandleOutOfHealth(). These are the damage tags that killed this pawn",
    "SkyfireBotPlayerPawnComponent:LeashRadius": "Set leash radius for bot to be not care about storm when trying to move around",
    "FortExposedActorReferences:UserOptionDefinitionAssetValuesDataTables": "Set of FUserOptionDefinitionAssetValueEntry data tables referenced by any user options cached by this instance.\n@note These data tables need to collect their internal row values on-demand.",
    "FortExposedActorReferences:UserOptionDefinitionClassReferenceValuesDataTables": "Set of FUserOptionDefinitionClassReferenceValueEntry data tables referenced by any user options cached by this instance.\n@note These data tables need to collect their internal row values on-demand.",
    "FortExposedActorReferences:UserOptionDefinitionIconValuesDataTables": "Set of FUserOptionDefinitionIconValueEntry data tables referenced by any user options cached by this instance.\n@note These data tables need to collect their internal row values on-demand.",
    "FortMissionEvent:GameplayTags": "Set of GameplayTags that comes from the Volumes the Event took place in",
    "FortExposedActorReferences:ExposedAssetProviderReferences": "Set of IFortExposedAssetProvider references that this instance needs to indirectly expose the internal references from.\n@note These objects needed to be collected on-demand.",
    "FortLevelRecord:SavedActors": "Set of actors with updated state",
    "FortExposedActorReferences:AllowedAssetReferences": "Set of additional asset references to expose.",
    "FortExposedActorReferences:AllowedClassReferences": "Set of additional class references to expose.",
    "FortMeleeDeflectAnimData": "Set of animations that define a single deflection, as well as data for potential transitions to other deflections.",
    "FortUIZone:ContextualReticleIcons": "Set of contextual reticle icons for each type",
    "TeamBucketPartOverrideData": "Set of cosmetic items for one loadout.  A loadout may have multiples of these sets for various gender/body combinations.",
    "FortMotorSimPatternState:Curves": "Set of curves used to animate RPM (on X) and Throttle (Y)",
    "FortVFXMarshaller:AuthoredData": "Set of data specified by a designer",
    "BuildingGameplayActorLaserGrid:LaserGridPatterns": "Set of designer specified laser patterns that the laser grid actor loops through.",
    "FortBurstEffectData": "Set of effects to spawn for a single event, used by all types",
    "FortGameStateComponent_ActiveEventManager:EventsAlreadyApplied": "Set of events already applied, so we don't waste time apply hotfixes again",
    "MeshNetworkComponent:AggregatedFunctions": "Set of functions that will be aggregated, mapped by function key (see GetFunctionAggregationKey).",
    "FortPlayerController:WorldInventory": "Set of inventories that contain items. We can have multiple inventories, such as one that references world bound items\nand one that contains persistent items",
    "TaggedPOI:AvailableShrinkLocations": "Set of locations this POI storm shield can shrink to.",
    "FortPhysicsObjectManager:PhysicsObjects": "Set of physics objects in the manager",
    "FortAthenaLivingWorldPlayerTracker:TrackedBotControllers": "Set of player bot that was determined at the start of the game would be considered player for aggressive spawning purpose.",
    "TempestTornadoForcesComponent:PreviouslyNearPlayers": "Set of players that were near the tornado last update",
    "EFabricInteractionToolStates": "Set of states for the FIT device as it interacts with various FABRIC devices",
    "GameplayStatMetadataTableRow:Windows": "Set of windows that the leaderboard will be queried over",
    "GhostModeRepData:PreviousFocusedSlot": "Set on the client, so it never needs replication",
    "GhostModeRepData:TimeExitedGhostMode": "Set only on the server, so it never needs replication",
    "EmporiumSettings:bNormalizePivot": "Set pivot at the bottom-center of imported mesh",
    "FortPlayerController:bAutoEquipBetterItems": "Set rather the player should auto equip higher quality items than what is on their quick bar",
    "FortCharacterVehicle_Ostrich:bChargingRockets": "Set server-side when rockets start charging up",
    "FactionData:bAreFactionMemberAllies": "Set so all faction members are allies, if not they'll use normal logic to determine their relation.",
    "FortFactionInfo:bAreFactionMemberAllies": "Set so all faction members are friendly to each other, if not they'll use normal logic to determine their relation.",
    "FactionData:bShouldSpecificRelationsApplyToEntireFaction": "Set so all faction members have specific relation towards an actor. If not set, only concerned actors will have a specific relation.",
    "FortFactionInfo:bShouldSpecificRelationsApplyToEntireFaction": "Set so all faction members have specific relation towards an actor. If not set, only concerned actors will have a specific relation.",
    "AIPatrolPathComponent:DefaultAIPawn": "Set the default Pawn that will use the patrol paths (use to find the default navigation query settings)",
    "FortCheckPointSplineActor:bShowSplineMeshAtStartup": "Set the entire spline mesh to visible in BeginPlay",
    "EStatMod.Set": "Set the stat to the given value, ignoring any previous value.",
    "EStatMod.Maximum": "Set the stat to the max of the given value and the previous value. Like Set, except it can't lower the stat.",
    "FortMantisTechniqueData:bStartsSequence": "Set this to true if this technique can start a sequence of techniques.",
    "FortTrackMovementComponent:bReverseYawWhenReversedOnSpline": "Set this to true if you want the cart to actually rotate around when calling FlipDirection.",
    "DigestedWeaponAccuracy:bOverrideAimingCircleSettings": "Set this to true to override the AimingCircleSettings to use for this weapon category.",
    "WeaponAccuracy:bOverrideAimingCircleSettings": "Set this to true to override the AimingCircleSettings to use for this weapon category.",
    "BuildingActor:bIsMovable": "Set this variable if the actor is going to move (rotate, translate or scale). You do not need to set this if you are moving a child component, just if you are causing the actor location or rotation to change.  WARNING: Do NOT use this unless necessary, as too many of these will cause performance problems!",
    "BuildingActor:bIsDynamic": "Set this variable if your blueprint needs to receive the tick event.  WARNING: Do NOT use this unless necessary, as too many of these will cause performance problems!",
    "FortPlayerController:bMovementDisabledDueToCancellableAction": "Set to TRUE when a movement cancellable action starts. Set to FALSE either when movement cancellable action ends, or when player releases movement keys (so player starts moving after pressing move keys again)",
    "AthenaMidSeasonUpdate:BookLevelRequirement": "Set to a minimum battlepass/book level requirement in order to run this update",
    "AthenaMidSeasonUpdate:SeasonLevelRequirement": "Set to a minimum season level requirement in order to run this update",
    "BuildingActor:bAutoReleaseCurieContainerOnDestroyed": "Set to false to keep Curie container data after the actor dies, to allow transferring it to a child actor",
    "DigestedWeaponAccuracy:bKeepAimingOnSameSideWhileFiring": "Set to have bot keep aiming on the same side while it fires. Switch can happen only when not hodling trigger",
    "WeaponAccuracy:KeepAimingOnSameSideWhileFiring": "Set to have bot keep aiming on the same side while it fires. Switch can happen only when not hodling trigger",
    "FortAthenaAIBotController:bPostponeGiveWeaponCheat": "Set to postpone giving a weapon to the bot if it doesn't have any weapon",
    "FortAthenaAIBotController:bPostponeGiveMaterialsCheat": "Set to postpone giving materials to the bot",
    "FortAthenaAIRuntimeParameters_AIBotLoopSettings:bRemoveInvulnerabilityOutsideSafeZone": "Set to remove invulnerability as soon as bot is considered outside safezone (only valid for outside the loop).",
    "FortPlayerController:bForceBinaryForward": "Set to true by external states such as tactical sprint to force the player's forward value on stick to be 1.0 (max) unless it is zero (or negative).",
    "BuildingActor:bPlayedDying": "Set to true if PlayDying() has run locally",
    "FortAthenaVehicle:bPlayedDying": "Set to true if PlayDying() has run locally",
    "FortPawn:bPlayedDying": "Set to true if PlayDying() has run locally",
    "FortPhysicsPawnObject:bPlayedDying": "Set to true if PlayDying() has run locally",
    "FortAthenaMutator_BotsWinCondition:bOnlyBotRemaining": "Set to true if only bots are remaining when CheckWinConditionOnPlayerRemoval is called",
    "FortPlayerController:bSprintByDefaultWhenSprintIsOverridden": "Set to true if overriding sprint behavior should make the player sprint by default.  If false, then when sprint behavior is overridden, it will NOT sprint by default.",
    "FortPlayerController:bSprintBehaviorIsOverridden": "Set to true if sprint behavior is being overridden, such as if tactical sprint is enabled.",
    "FortGameFeatureStatusList:bAutoLaunchFullGame": "Set to true if the FrontEnd will auto launch when ready",
    "FortQuestIconComponent:bInteractiveStateRequiredForVisibility": "Set to true if the owner's current interactive state should be taken into consideration when working out if minimap icons\nshould be displayed / hidden. If true, icon should only be shown if owning actors 'IFortInteractInterface' CanInteract returns true.\nIf the owning actor does not represent an interactive actor, then this check will be ignored",
    "FortQuestIconComponent:bControlVisibilityFromOwnerQuestObjectiveState": "Set to true if the owners Consolidated Quest Component state should drive the visibility of this icon directly\nFalse if any icon behaviour will be manually controlled e.g. by blueprint script invoking SetIsVisible",
    "FortAthenaVehicle:bEnableCurieMaterial": "Set to true if the vehicle should track Curie fire state",
    "FortCharacterVehicle:bEnableCurieMaterial": "Set to true if the vehicle should track Curie fire state",
    "AthenaTrapAIPerceptionStimuliSourceComponent:bEnablePerceptionSystemOnTrap": "Set to true if this trap should be using the component to register into the perception component",
    "FortWeapon:bInitializedWeaponItem": "Set to true if this weapon item has been initialized",
    "FortPlayerController:bSprintWasCanceledByReload": "Set to true if we are reloading, and that reload canceled a sprint action",
    "FortAIDirector:bUseLODSettings": "Set to true if we want to use LOD Settings, used in conjunction with bAllowLODSettings, accessed via IsUsingPlayerLODSettings()",
    "FortFallTeleportComponentBase:bValidFallbackLocation": "Set to true once a valid FallbackLocation has been found. Set to false only if our old FallbackLocation is no longer valid, indicating we need a new one.",
    "BuildingActor:bIgnoreDeterminePhysicsObjectImpactDataAutomatically": "Set to true this to allow the physics preset or object itself to specify an alternative to the dynamically sized damage data tags",
    "FortGameModeZone:bTrustXboxPlatformId": "Set to true to disable Xbox User Id server-side validation",
    "ValkyrieEditorPermission:bDefaultToDisabled": "Set to true to disable this permission even if the user has access to it, requiring them to manually turn it on",
    "FortAthenaAIBotRunTimeCustomizationData:bHasCustomSquadId": "Set to true to force bot to go in a specific squad id",
    "FortAthenaMutator_SurvivalObjectiveData:bSpawnOnPOI": "Set to true to have objectives spawned over POI",
    "FortAthenaMutator_SurvivalObjectiveData:bClearAreaOnSpawn": "Set to true to have objectives spawned over POI clear the area of Building Actors",
    "FortAthenaMutator_SurvivalObjectiveData:bIsSpecialActor": "Set to true to insert this spawned actor into the special actor system",
    "BuildingActor:bLockedFromGameEditing": "Set to true to prevent the player from editing this actor in game",
    "FortAIPawn:bReplicateInventory": "Set to true to replicate Inventory to client (Default is false).",
    "VehicleTrickInfo:bDoingRotationTrick": "Set to true when after at least a half rotation is done in the air on any axis, at which point air controls will not lerp back to defaults, but will remain in trick mode for the remainder of the jump.",
    "BuildingActor:bBeingOneHitDisassembled": "Set when actor is being disassembled using the one hit disassembly system",
    "SkyfireBotPlayerPawnComponent:bHasEnteredLootRoom": "Set when player has entered loot room",
    "FortPlayerController:bIsNearActiveEncounters": "Set when player is near active encounter, updated every few seconds",
    "FortAthenaMutator_Wax:WaxStateAboveWhichLeadersDrawSpecialStyleOnUI": "Set when players will be drawn on the map as leaders",
    "AIHotSpot:bIsEnabled": "Set when this hotspot is currently enabled",
    "FortGameFeatureInstallBundleURLData:bUserPaused": "Set whenever the user desires to pause or resume any downloads associated with this GameFeature",
    "MyTownWorkerSetBonusData:DisplayName": "SetBonus display name",
    "WorkerSetBonusData:DisplayName": "SetBonus display name",
    "MyTownWorkerSetBonusData:SelectionWeight": "SetBonus selection weight",
    "WorkerSetBonusData:SelectionWeight": "SetBonus selection weight",
    "MyTownWorkerSetBonusData:SetBonusTypeTag": "SetBonus type for worker",
    "WorkerSetBonusData:SetBonusTypeTag": "SetBonus type for worker",
    "FortFrontEndMiniMapManager:MobileMapLocationFontSizeOverride": "Sets an override font size for mobile platforms. If the value is 0, the default value is used.",
    "FortInGameMapManager:MobileMapLocationFontSizeOverride": "Sets an override font size for mobile platforms. If the value is 0, the default value is used.",
    "FortProjectileMovementComponent:bReplicatedAutoRegisterUpdatedComponent": "Sets and replicates whether we should auto register for the updated component",
    "FortGameplayCueDecalInfo:FadeOutDuration": "Sets how long it takes for decal actor to fade out, will override setting in class",
    "FortCreativeRoundSettings:PercentageOfResourcesKeptBetweenRounds": "Sets how much resources are kept between rounds. -1.f == Don't Override, 0.f (0%) to 1.f (100%).",
    "FortCreativeTeleporter:Knob_TeleporterGroup": "Sets the teleport group that this device belongs to.",
    "FortMinigameSettingsBuilding:TextStyle": "Sets the text style used to display text on the island.",
    "FortMinigameSettingsBuilding:TextStyleIndex": "Sets the text style used to display text on the island.",
    "DaySequenceActor:TimeOfDayPreview": "Sets the time of day to preview in the editor. Does not affect the start time at runtime",
    "FortPickup:SimulatingTooLongLength": "Sets the time we will wait for a simulating (i.e. moving) pickup before we will force stop simulating",
    "FortPickup:SimulatingTooLongLengthInWaterMoving": "Sets the time we will wait for a simulating (i.e. moving) pickup in water with a current before we will force stop simulating. 0 disables this time limit. Can only lower from the SimulatingTooLongLength value.",
    "FortPickup:SimulatingTooLongLengthInWaterBobbing": "Sets the time we will wait for a simulating (i.e. moving) pickup in water without a current before we will force stop simulating. 0 disables this time limit. Can only lower from the SimulatingTooLongLength value.",
    "FortGameplayCueDecalInfo:FadeOutStartDelay": "Sets when the decal actor will start fading out, will override setting in class",
    "FortMinigame:bRemovePawnOnDeath": "Sets whether pawns will be removed from the volume on death.",
    "FortCreativeRoundSettings:bKeepItemsBetweenRounds": "Sets whether players should keep items between rounds.",
    "FortCreativeRoundSettings:KeepItemsBetweenRounds": "Sets whether players should keep items between rounds. -1 == Don't Override, 0 == False, 1 == True.",
    "FortAthenaMutator_Barrier:bGameEndsWhenObjectiveIsDestroyed": "Sets whether this game ends when a mcmuffin it destroyed (versus only stops respawning)\nWARNING: if this is true (playlist must have wincondition set to MutatorControlled), else (playlist must have wincondition set to LastManStanding)",
    "FortCreativeRoundSettings:bReloadAndRestockWeaponsEachRound": "Sets whether to reload and restock weapons between rounds.",
    "FortCreativeRoundSettings:ReloadAndRestockWeaponsEachRound": "Sets whether to reload and restock weapons between rounds. -1 == Don't Override, 0 == False, 1 == True.",
    "FortCreativeRoundSettings:bLastStandingWins": "Sets whether to set the winner of the round to the last one standing",
    "FortCreativeRoundSettings:LastTeamStandingWins": "Sets whether to set the winner of the round to the last one standing. -1 == Don't Override, 0 == False, 1 == True.",
    "FortProjectileMovementComponent:bReplicateStopSimulating": "Sets whether we want to replicate to the client that we stopped simulating on the server",
    "ServerRollQuestTableRow:Weight": "Setting Weight to 0 effectively hotfixes off the quest",
    "EMinigamePlayerPersistence": "Setting for persistence of state, e.g. checkpoints",
    "ESettingTab": "Setting tab type - used by the UI to organize the different settings tabs in the options menus",
    "FortPawnStats:GroundFriction": "Setting that affects movement control. Higher values allow faster changes in direction. @see UCharacterMovementComponent::GroundFriction",
    "RadiusTrackingInitializer:TimeBetweenUpdatesInSeconds": "Setting this below a minimum value will clamp up to a minimum delay to avoid perf hits.  For now, 0.1 seconds.",
    "BuildingSMActorClassData:bNoAIPawnCollision": "Setting this flag will make AI pawns not collide with given BuildingSMActor. This flag does not influence navmesh generation. If not using with NoPawnCollision, please use with causion.",
    "QuestItemDefComponentEditorRow:bDisableEditor": "Setting this property true will disable component tab from showing in the quest editor",
    "FortGameUserSettings:bForceNoPatchingForDownloads": "Setting this property will force a full downloads instead of patches",
    "FortGameUserSettings:bResumeUserCanceledOrPausedDownload": "Setting this property will resume user canceled or paused downloads",
    "FortPlayerStartCreative:ApplicableTeam": "Setting this to spectator causes this player start to be treated as an island start and not a minigame start",
    "FortMantisTechniqueData:bEndsSequence": "Setting this to true will force the sequence to end after this technique (i.e. prevent branching).",
    "FortAthenaMutator_InventoryOverride:bRunForAthenaGameParticipantsOnly": "Setting this to true will only run this mutator for athena game participants. Currently giving starting items (via FortGameModeAthena_GetInventoryOverride) is only supported\n     for players and player bots, but other functionality such as whether items should be dropped/destroyed (via FortGameStateAthena_ShouldDropItem and FortGameStateAthena_ShouldDestroyItem)\n     is supported for NPCs as well. Setting this to true will make sure that no mutator functionality is applied to non athena game participants (NPCs).",
    "BuildingProp_QuestGlyph:bContextInfoUnlocked": "Setting to control if context info is in unlocked state",
    "BuildingProp_QuestGlyph:bShowContextInfo": "Setting to control if context info is shown",
    "EFortMinigameState.Setup": "Setting up players",
    "FortAnimInput_TurnCorrection:RotationCurve": "Settings",
    "FortAnimWorldStriderComponent:DistanceCurve": "Settings",
    "FortGameStatePvE:PickupsAllowedMax": "Settings",
    "FortAthenaMutator_PlayerSettingsBase:CurrentScopeSettings": "Settings component corresponding to the current \"settings context\"",
    "FortAthenaMutator_PlayerSettingsBase:DefaultScopeSettings": "Settings component to fallback to for settings not overridden by the current scope settings",
    "UserOptionDefinitionSettings": "Settings controlling the behavior of User Option Definitions.",
    "FortPreferredItemSlotSettings:SlotItemTypeData": "Settings data to map to slot item types",
    "FortGameUserSettings:AutoDownloadHighResTexturesBehavior": "Settings determining if we support both ContentOnDemand and HighResMIPS. Different from some settings above as those are legacy Kairos settings",
    "MinigamePostGameAnimationSettings": "Settings for Creative Royale custom post game intro animation",
    "MinigamePostGameSettings": "Settings for Creative Royale custom post game screen",
    "DaySequenceProjectSettings": "Settings for Day sequences",
    "FortAIGoalManager:DefaultEncounterAssignmentSettings": "Settings for default encounter assignment.",
    "FortEditorToolsSettings": "Settings for general Fortnite-specific editor tools",
    "FortEncounterSequenceSettings:TransitionSettings": "Settings for how the sequence transitions between encounters",
    "FortDifficultyEncounterSettings:EncounterSettings": "Settings for our encounter.",
    "FortCurieFXSettings:CharredNativeFXTypeSettings": "Settings for the Charred native fx type",
    "FortCurieFXSettings:ElectricityNativeFXTypeSettings": "Settings for the Electricity native fx type",
    "FortCurieFXSettings:FireNativeFXTypeSettings": "Settings for the Fire native fx type",
    "TeleportSettings": "Settings for the teleport feature of converted pawns to stay near leader.",
    "FortAthenaLivingWorldNavigationInvokerComponent:SettingsOverride": "Settings overrides for point providers that match specific tags, first match is used.",
    "ValkyrieEditorPermissionSettings": "Settings specifically for controlling which aspects of the editor are visible and hidden",
    "FortAthenaMutator_Pow:RespawnSettings": "Settings to be used for calculating respawn data",
    "CenterOnLocationPOI": "Settings to center around a location",
    "CenterOnTaggedPOI": "Settings to center around a poi tag",
    "ObjectiveEntry_Gate:CloseEventFilter": "Settings to filter the incoming gameplay event from the CloseEventTag",
    "ObjectiveEntry_Gate:OpenEventFilter": "Settings to filter the incoming gameplay event from the OpenEventTag",
    "AudioWorldizationDefaultSettings:DefaultSettings": "Settings to initialize the Worldization settings with until overridden",
    "AudioWorldizationSettings": "Settings used for the audio worldization system",
    "CustomTickComonentQualitySettings": "Settings used in determining the NumFramesToSkipBetweenCustomTicks of a UFortCustomTickComponent",
    "FortDifficultyEncounterSettings": "Settings used to spawn an encounter. Can be transformed into a GeneratedEncounterProfile to be easily used by the AIDirector. No need to setup a mission to spawn the related encounter of this setting.",
    "ImGuiSettings:DPIScale": "Setup DPI Scale.",
    "GlobalRepGraphActorClassSettings:ExplicitCSVTracking": "Setup exclusive CSV tracking for Test/Dev builds",
    "GlobalRepGraphActorClassSettings:MinimalExplicitCSVTracking": "Setup exclusive CSV tracking for minimal tracking (shipping)",
    "GlobalRepGraphActorClassSettings:ImplicitCSVTracking": "Setup implicit CSV tracking for Test/Dev builds for classes without explicit class settings",
    "CobaltCombatStormShieldArray": "Setup the array of FCobaltCombatStormShieldArray for FastArray replication/usage.",
    "IgnoredPlayerPawnArray": "Setup the array of FIgnoredPlayerPawnDataEntry for FastArray replication/usage so that we may use the PreReplicatedRemove hook.",
    "LaserGridConnectionArray": "Setup the array of FLaserGridConnectionArray for FastArray replication/usage.",
    "LaserGridOutletArray": "Setup the array of FLaserGridOutletArray for FastArray replication/usage.",
    "FortGameFeatureResponse:ErrorSeverity": "Severity of the error, which indicates if it requires user input",
    "EFNEVolumeShapeTypeEnum": "Shape Enums to define each Volume shape.",
    "FNE_VolumeComponent:FNEVolumeShapeMap": "Shape Map for each Volume Shape Type",
    "HarmonixTremoloEffectSettings:LfoShape": "Shape blend from square to triangle to sawtooth.",
    "FortCreativeInteractVisualizationComponent:CollisionComponentClass": "Shape of the interact collision.",
    "FortMinigameSettingsBuilding:PlayerBuiltMetalStructureHealthMultiplierSetting": "Shared Settings representing Player's Built BuildingActor Health multiplier when made of Metal",
    "FortMinigameSettingsBuilding:PlayerBuiltStoneStructureHealthMultiplierSetting": "Shared Settings representing Player's Built BuildingActor Health multiplier when made of Stone",
    "FortMinigameSettingsBuilding:PlayerBuiltWoodStructureHealthMultiplierSetting": "Shared Settings representing Player's Built BuildingActor Health multiplier when made of Wood",
    "FortAISharedRepMovement": "Shared replication data structure that is specific to FortAI",
    "FortLobbyBeaconState": "Shared state of the game from the lobby perspective\nDuplicates much of the data in the traditional AGameState object for sharing with players\nconnected via beacon only",
    "FortCosmeticModification:ShellColourAlteration": "Shell colour alteration to apply",
    "EFortAmmoType.Assault": "Shells",
    "FortDamageNumbersActor:CriticalHitShieldColor": "Shield hit, critical.",
    "FortDamageNumbersActor:ShieldHitColor": "Shield hit, not critical.",
    "FortPlayerDeathReport:KillerShieldPercent": "Shield of the pawn that killed you",
    "EFortAthenaTutorialSubstep.ScreenShootTargets": "Shoot",
    "BaseVariantDef:VariantName": "Short Name",
    "UnicornDriver:ShortReelMaxClipDuration": "Short highlight reel",
    "EDeployableTurretState.WindDown": "Short state right after attacking",
    "EDeployableTurretState.WindUp": "Short state right before attacking",
    "UnicornDriver:ShortExtendedReelMaxClipDuration": "ShortExtended highlight reel",
    "FortKeepResourceGroup:ResourceName": "Shortened name of the item",
    "UnicornDriver:ShorterReelMaxClipDuration": "Shorter highlight reel",
    "FortGameModePvE:bBuildingContainersStartAlreadySearched": "Should BuildingContainers start already searched",
    "FortGameModePvE:bSpawnLootForBuildingContainersThatStartAlreadySearched": "Should BuildingContainers that start already searched spawn their loot, or not",
    "FortInGameMapManagerAthena:bDrawEliminationsIfFogged": "Should Eliminations draw if behind map Fog of War",
    "FortInGameMapManagerAthena:bDrawMapIndicatorsIfFogged": "Should Map Indicators draw if behind map Fog of War",
    "FortInGameMapManagerAthena:bDrawMapLocationsIfFogged": "Should Map Locations draw if behind map Fog of War",
    "FortAthenaMutator_ItemDropOnDeath:ShouldNonParticipantAIAlsoDropItems": "Should Non Participant AI (henchmen, decoy grenade, etc..) also drop items on death",
    "FortInGameMapManagerAthena:bDrawSpecialActorIconsIfFogged": "Should Special Actor Icons draw if behind map Fog of War",
    "FortInGameMapManagerAthena:bDrawSquadPinsIfFogged": "Should Squad Pins draw if behind map Fog of War",
    "PerkItemDefinitionDesignerData:bOpenAssetsForEdit": "Should all created assets automatically be opened for edit?",
    "QuestItemDefinitionDesignerData:bOpenAssetsForEdit": "Should all created assets automatically be opened for edit?",
    "ValkyrieEditorConfig:bCreateAssetsAsExternallyReferenceable": "Should assets created in Valkyrie mode be externally referenceable by default?",
    "FortAthenaMutator_AddBarrier:bSpawnAtMidFlightPathDuringBusLockedPhase": "Should barrier spawn at midline flight path during BusLocked Gamephase step.",
    "FortPlayerStateZone:bOvershieldBarVisible": "Should be True if the player is playing a game with the tactical overshield.",
    "ChaseExternalForce:MagnitudeScaleCurve": "Should be a curve with t from 0 to 1, which will be scaled by the duration. The curve is evaluated at\n     the current time and multiplied by Magnitude.",
    "BuildingGameplayActorSentry:TargetRotation": "Should be read only once fully converted",
    "FortCurieMaterialDefinition:bAddAttachedElementsToElementSpatialGrid": "Should be set to false to disable adding elements on this material to the element spatial grid",
    "FortCurieMaterialDefinition:bHandlesOverlapsDirectly": "Should be set to true to disable the default Curie system for overlaps with players",
    "FortLevelSaveComponent": "Should be used to build up a save",
    "LevelSaveComponent": "Should be used to build up a save",
    "IndicatedActorData:EventTags": "Should be used to pass in tags from the item used or other relevant tags to the event that are needed when indicators are added.",
    "WeaponItemDefinitionDesignerData:bCreateCrystalWeapons": "Should crystal weapons in addition to ore weapons?",
    "FortDynamicBuilder:bShrinkAndDestroyEffect": "Should destroyed buildings play shrink effect instead of normal destruction FX",
    "AILootInfoRowEntry:bShouldDropLootOnDeath": "Should drop extra loot on death?",
    "AILootInfoRowEntry:bShouldDropInventoryOnDeath": "Should drop inventory on death?",
    "AILootInfoRowEntry:bShouldGrantLootOnSpawn": "Should grant loot to inventory on spawn?",
    "PhysicsPawnObjectInitialParameters:bEnableGravity": "Should gravity be enabled by default?",
    "PhysicsPawnObjectInitialParameters:bEnableGravityOnHit": "Should gravity be enabled when registering a hit from other pawns?",
    "FortGyroV2Settings:bGyroV2DisabledWhileDriving": "Should gyro be disabled while driving?",
    "BuildingRift:QueryParams": "Should hold all of the query named parameters EXCEPT for Radius.",
    "FortAISpawnerUtilityComponent:QueryParams": "Should hold all of the query named parameters EXCEPT for Radius.",
    "FortDynamicBuildingDeconstructor:bIgnoreMissionActors": "Should ignore buildings spawned by a mission",
    "FortSaveFileBuildingInstructionsHandler:bLoadInvisible": "Should loaded buildings appear hidden in game",
    "EUefnPlaytimeQuestType.Other": "Should match enum defined in ProcessUefnPlaytimeXp.java",
    "ThreatLocationInfo:CloudActor": "Should never exist on dedicated server!  Created on all other machines independently and the actors are not replicated!",
    "EFortMatchmakingPool.Switch": "Should never really be used but needed for EFortMatchmakingPool FromString",
    "FortWorldSettings:WorldTimeOfDayManager": "Should normally be 'None'.  Generally used for testing and adjusting Time Of Day Manager blueprints.  The game will first try to use any Time Of Day Manager specified by the primary mission loaded; then it will fall back to ToDs chosen by Zone Theme.  If neither of those are found (generally not true in game, but true in the Editor and sometimes in PIE), then it will use this Time Of Day Manager.  If all of those fail, it falls back to the Default Time Of Day Manager specified in a config .ini file.",
    "FortDynamicBuilder:bIgnoreMissionActors": "Should not destroy buildings spawned by a mission",
    "TowhookParams:bAttachToOwnersVehicle": "Should one end of this towhook always be attached to the owner's vehicle",
    "XPEventArray:Entries": "Should only be a fixed sized",
    "ActorInstanceRecord:Transform": "Should only need position and rotation but this covers scale without worry",
    "FindActorByClassData:ShowToSquad": "Should our squad see this as well?",
    "PhysicsPawnObjectInitialParameters:bShouldKillPawnOnHit": "Should pawns and vehicles be killed when the boulder hits them?",
    "FortDynamicBuildingDeconstructor:bShrinkAndDestroyEffect": "Should play shrink effect instead of normal destruction",
    "FortAthenaMutator_RespawnLocation:bRespawnInAir": "Should players respawn in the air or not",
    "FortAthenaMutator_Cobalt:bKeepWarmupLoadoutsInFirstRound": "Should players' loadouts carry over from the warmup area to the first round",
    "FortAthenaIntStateTreeParameter": "Should put here any new math variable creation (ex. int, float, double, vector, etc.)\nMight become obsolete when and if the StateTree support variable creation in the ST States",
    "FortGameStatePvE:bAllowMulching": "Should recycling (mulching) of inventory items be allowed?",
    "FortWeapon:bAllowReloadWhenFull": "Should reloading be allowed when the clip is at full capacity",
    "FortGameSessionDedicated:bEnforceCrossplayRestrictions": "Should restrictions between platforms be checked at all (keeping pure pools from allowing other platforms in)",
    "BotKnockbackSettings:ShouldStopActiveMovement": "Should stops current movement when receiving knockback event?",
    "DigestedBotKnockbackSettings:bShouldStopActiveMovement": "Should stops current movement when receiving knockback event?",
    "FortAbilityTargetSelection:bShouldAttachedActorsObstructTarget": "Should target's attached actors obstruct the target",
    "FortAthenaMutator_Bismuth:AIBotsHostileToEachOther": "Should the AI be hostile towards each other",
    "FortGameplayEffectDeliveryActor:bSkipRecaptureSourceActorTagsOnTouch": "Should the DeliveryActor skip RecaptureSourceActorTags when calling SetContext onTouch? Default behavior is to Capture these tags on spawn and on collision",
    "PhaseLevelEntryBase:bLevelStartsVisible": "Should the LevelToLoad start visible?",
    "EQSActorSpawnerData:bIncludeMutatorBasePlacementQueryResults": "Should the SpawnActorPlacementQuery EQS include the results from the MasterBasePlacementQuery into its base query result.\n     Note: This variable only works/matters if the SpawnActorPlacementQuery uses a UFortQueryGenerator_MutatorBaseQueryResults generator",
    "CreativeVideoPlayerFullscreenOptions:bPromptFirst": "Should the Video Player prompt for the transition to Fullscreen?",
    "FortClientAnnouncement:bRetrigger": "Should the announcement re trigger, even if it already exists in the queue",
    "FortAthenaSupplyDropBalloon:bMarkAttachedActor": "Should the attached actor be marked instead when a player attempts to mark this actor.\n     For this to work successfully, GetAttachedActorToMark() needs to be implemented.",
    "UserOptionDefinitionContainer:bRecurseBaseClassesForUserOptions": "Should the base class hierarchy be searched for user option properties?",
    "FortAthenaMutator_SynchronizedTeleport:bHoldLoadingScreenUntilGroupTeleportIsComplete": "Should the black loading screen be held for players until teleport process is complete for all players or the failsafe timeout is reached.",
    "AthenaQuickChatLeafEntry:bPopulateBrushFromContextObject": "Should the brush be filled in from the context object?",
    "ChoiceDataEntry:bEnabled": "Should the button be enabled",
    "FortProjectileBase:bUseClientsidePrediction": "Should the client be allowed to spawn the projectile locally",
    "FortProjectileBase:bClientInterpMovement": "Should the client interpolate (smooth) network movement updates?",
    "FortProjectileBase:bClientInterpRotation": "Should the client interpolate (smooth) network rotation updates? Only applicable if bClientInterpMovement is also true.",
    "SpecialEventPlayerMannequin:bDisableCollisionOnBeginPlay": "Should the collision be disabled on BeginPlay.\n     Useful optimization IF the mannequin is never going to collide\n     with the player or other objects in the world.",
    "FortLevelStreamComponent:bAutoLoadLevel": "Should the current playset be loaded on begin play?",
    "PlaysetLevelStreamComponent:bAutoLoadLevel": "Should the current playset be loaded on begin play?",
    "BuildingWall:bAutomaticSlidingDoor": "Should the door open automatically when near it?",
    "FortMinigameItemListComponent:bUseEditorOverrideData": "Should the editor set overrides be used instead of a dynamic mutator",
    "FortVolumeTimeOfDayComponent:bUseEditorOverrideData": "Should the editor set overrides be used instead of a dynamic mutator",
    "LivingWorldCalendarEventCondition:ShouldEventBeActive": "Should the event be active for the condition to return true.",
    "FortGameModePvE:bIdleKickEnabledByConfig": "Should the idle detection system kick players or be player facing at all.  Hotfixable, doesn't change mid-match unlike bIdleKickEnabledByBlueprint.",
    "FortGameModePvE:bIdleKickEnabledByBlueprint": "Should the idle detection system kick players or be player facing at all.  Toggled by Mission blueprints.",
    "FortGameModePvE:bResetDefaultIdleTimeWhenNoLongerSolo": "Should the idle detection time be reset when a solo player has another team member join, if they are currently in the Default idle detection state.",
    "LaserGridEditorComponent:bVisualizeOutletIndex": "Should the index of the outlet instances be drawn on screen?",
    "GrantItemMultiData:bRemoveExistingBeforeGrant": "Should the inventory be cleared of existing matching items before granting them?",
    "CatalogOfferDefinition:bRevealItemGrants": "Should the items this offer grant be revealed to the client",
    "BuildingGameplayActorRadioTower:MarkLinkedRadioTowerTerminal": "Should the linked radio tower terminal actor be marked instead when a player attempts to mark this actor.\n     For this to work successfully, GetLinkedRadioTowerTerminal() needs to be implemented.",
    "DrawTaggedPlayerIndicatorsData:bRenderLocalPlayer": "Should the local player with PlayerTag be rendered on the map.",
    "FortFeedbackManager:SuppressedControllers": "Should the manager suppress procedural feedback for the below listed controllers. This is useful during scripted dialog sequences",
    "FortMissionStormSafeZone:bScaleUniformly": "Should the mesh scale uniformly. If not, Z scales high.",
    "FMDeviceCableOrderingMovementState:bMovementState": "Should the movement use the inverse of the vector?",
    "FortAthenaMutator_AdHocSquads:bMaintainSquadDataForNonAdHocSquads": "Should the mutator maintain squad data information for non ad hoc squads as well?",
    "UrgentQuestSettings:bHideOptionalObjectives": "Should the objectives considered as optional(having index > 0) be hidden?",
    "UrgentQuestData:bHideOptionalObjectives": "Should the objectives considered as optional(having index > 0) be rendered in urgent UI.",
    "UserOptionDefinitionContainer:bPreserveInheritedUserOptionOrdering": "Should the ordering of user options inherited from the base class hierarchy be preserved?",
    "FortQuestMissionCreationContext:bSetQuestOwnerAsMissionOwner": "Should the owner of the quest that spawns the mission be set as the owner of the mission.\nIf true only the player that owns the quest that spawned the mission can see the mission on the UI.",
    "BuildingGameplayActor:bAddOwnerVelocity": "Should the owner's velocity be added to the projectile when velocity is set",
    "FortProjectileBase:bAddOwnerVelocity": "Should the owner's velocity be added to the projectile when velocity is set",
    "FortPlayerState:bIsSimulatingDamage": "Should the player simulate damage? If true, the player does NOT take damage but simulates damage effects.",
    "FortAthenaMutator_RespawnLocation:bRespawnAtDeath": "Should the players respawn at the location of death, if not, the indicated location index",
    "FortAthenaPatrolPathPointProvider:bAlignOrientationToPath": "Should the point provider spawn it's actor aligned with the direction of the path.",
    "FortAthenaPatrolPathPointProvider:bSpawnOnPatrolPath": "Should the point provider spawn it's actor on the patrol path or at the point provider location.",
    "ChoiceData:bShowCloseButton": "Should the popup window have close button. If so and user clicks it, callback will return -1.",
    "TokenProviderPositioningData:bOwnerRelativePositions": "Should the positions computed by this EQS be relative to the token provider",
    "UrgentQuestData:bReverseProgressBar": "Should the progress bar go in reverse?",
    "UrgentQuestSettings:bReverseProgressBar": "Should the progress bar go in reverse?",
    "FortProjectileBase:bReplicateStopSimulationLocation": "Should the projectile replicate the hit location when it hits a target?",
    "FortProjectileBase:bReplicateStopSimulationLocationOptimized": "Should the projectile replicate the hit location when it hits a target? Only location and normal will be valid",
    "QuestVisibilityData:bIsVisibleWhenClaimed": "Should the quest be visible when claimed?",
    "QuestVisibilityData:bIsVisibleWhenCompleted": "Should the quest be visible when completed?",
    "QuestVisibilityData:bIsVisibleWhenExpired": "Should the quest be visible when expired",
    "UrgentQuestData:bHideQuestProgressBar": "Should the quest progress be hidden? Does not hide the quest progress text.",
    "UrgentQuestSettings:bHideQuestProgressBar": "Should the quest progress be hidden? Does not hide the quest progress text.",
    "TowhookParams:bTakeUpSlack": "Should the rope automatically contract when moving closer to the attach point?",
    "FortAthenaMutator_Cobalt:ResetPlayerInventoryBetweenRounds": "Should the selected player inventory item types be removed at the end of every round.",
    "EmptyServerReservation:bMakePrivate": "Should the server be created private",
    "SpecialEventPlayerMannequin:bDisableComponentsTickOnServer": "Should the skeletal mesh components tick on the server?\n     Useful to disable ticking if the mannequins are primarily client\n     focused on do NOT need server ticking for any use case.",
    "FortSnapOnSurfaceComponent:bOrientToNormal": "Should the snap orient the object up to the normal of the trace.",
    "UrgentQuestData:bDisplayStartedEventUI": "Should the started event UI be displayed",
    "UrgentQuestSettings:bDisplayStartedEventUI": "Should the started event UI be displayed",
    "FortAthenaMutator_Cobalt:HideStormShieldDuringPOICameraViewPhase": "Should the storm shields be hidden during the POI camera view phase",
    "FortMissionTimerComponent:bDisplayInTimeFormat": "Should the timer be displayed in mm:ss format",
    "QuestItemDefinitionDesignerData:bCreateRewardClaimQuestConversation": "Should the tool generate a reward claim conversation asset?",
    "QuestItemDefinitionDesignerData:bCreateRewardSelectionQuestConversation": "Should the tool generate a reward selection conversation asset?",
    "QuestItemDefinitionDesignerData:bCreateIntroQuestConversation": "Should the tool generate an intro conversation asset?",
    "FetchQuestData:bCreateQuestPropInitialConversation": "Should the tool generate conversations for collecting the quest item?",
    "FortAthenaVehicle:bShouldSleepAtSpawn": "Should the vehicle be put to sleep when it spawns.",
    "ChoiceDataEntry:bCloseAfterSelection": "Should the window be automatically closed when player chooses this option",
    "BuildingActor:bPropagateDrawDistanceOnAdditionalComponent": "Should these draw distances be propagated to sub components that are not considered base components.",
    "AthenaAIController:bRegisterToAthenaAIDropper": "Should this AI Controller register to AthenaAIDropper",
    "FortAIPawn:bUseCrowdSimulation": "Should this AI use crowd simulation?  Generally smaller AI (i.e. husks) should do so, but larger AI should not.",
    "FortGameplayEffectContainer:bUseCalculationInTooltips": "Should this Effect Container be used when being calculated in tooltips?",
    "FortSaveFileBuildingInstructionsHandler:bDespawnOnBuildingsSpawned": "Should this actor be destroyed after spawning all buildings",
    "BuildingSMActor:bPlayBounce": "Should this actor play the bounce animation?",
    "BuildingSMActor:bShowDamageCracks": "Should this actor show damage cracks?",
    "FortSaveFileBuildingInstructionsHandler:bSpawnBuildingsAutomaticallyAfterLoad": "Should this actor spawn loaded buildings automatically after loading or not",
    "FortClientAnnouncement:bDestroyOnAllClientsStopped": "Should this announcement be destroyed after all the recipients have viewed/stopped the annoucement",
    "FortGameplayAttributeData:bShouldScaleWithMax": "Should this attribute scale up/down to keep the same % when its Max changes",
    "RepGraphActorSettingsBase:bAddToExplicitCSVStatTracker": "Should this be added to the Explicit CSV Stat Tracker. Use CSVStatNamePrefix to give stat a Name Prefix",
    "RepGraphActorSettingsBase:bAddToImplicitCSVStatTracker": "Should this be added to the Implicit CSV Stat Tracker. Use CSVStatNamePrefix to give stat a Name Prefix",
    "FortMatchmakingPrivateConfig:ServerFleetPlaylistOverride": "Should this be an FName?",
    "FortPossibleMission:Weight": "Should this be here? or should this be in the difficulty filtering struct?",
    "BuildingActor:bPersistToWorld": "Should this be persisted to the world?",
    "MinigameClassSlot:bVisibleInUI": "Should this class be visible in the Class Selector UI",
    "FortGameFeatureComponentEntry:bClientComponent": "Should this component be added for clients",
    "FortGameFeatureComponentEntry:bServerComponent": "Should this component be added on servers",
    "Playspace_ComponentInfo_Base:bCreateOnServer": "Should this component get created by the client",
    "Playspace_ComponentInfo_Base:bCreateOnClient": "Should this component get created by the server",
    "BuildingContainer:bStartAlreadySearched_Athena": "Should this container be initialized as being already searched in Athena gametype",
    "DynamicUIDirectorBase:bEnabledDuringReplay": "Should this director be spawned in Replays?",
    "StartMobEncounterStateTreeTask:bStopEncounterOnExit": "Should this encounter be stopped on task exit",
    "FortHeroGameplayPiece:bUseGlobalDefaultMinima": "Should this gameplay piece use locally defined minima for hero tier, level, and rarity?  If not, it will use default minima defined in the global Hero Data asset depending on which 'piece' this is (i.e. Commander Perk, Hero Perk, etc.).",
    "IndicatedActorData:ShareActorWith": "Should this group of players be shown the indicator too?",
    "IndicatedActorData:ShareActorWithMask": "Should this group of players be shown the indicator too? Masked version of the above so we can select multiple options.",
    "StenciledActorData:ShareActorWith": "Should this group of players be shown the stencil too?",
    "StenciledActorData:ShareActorWithMask": "Should this group of players be shown the stencil too? Masked version of the above so we can select multiple options.",
    "IndicatedActorData:bClampToScreen": "Should this indicator clamp to the edge of the screen?",
    "IndicatedActorData:bHideStateImage": "Should this indicator have a hidden image?",
    "FortPlayerMappableKeySettings:bDisplayInTooltip": "Should this input be displayed on the side screen widget",
    "FortItemEntry:bUpdateStatsOnCollection": "Should this item entry participate in eg resource tracking",
    "FortFeedbackEventData:bInterruptCurrentLine": "Should this line interrupt the current line",
    "FortFeedbackLine:bInterruptCurrentLine": "Should this line interrupt the current line",
    "FortSpokenLine:bInterruptCurrentLine": "Should this line interrupt the current line",
    "SpecialEventPlayerMannequin:bRegisterWithSpecialEventMutatorOnClient": "Should this mannequin register to the special event mutator for rendering based tick optimization.",
    "FortTracerBase:bScaleOnDeath": "Should this mesh scale down when it gets to its destination",
    "MontageBeatSyncComponent:bForceBeatSyncAllMontages": "Should this montage beat sync component force all montages to beat sync.",
    "FortPlayerController:bShouldReceiveCriticalMatchBonus": "Should this player be receiving the critical mission bonus (valid on server)",
    "FortProjectileBase:bDisableCollisionOnStop": "Should this projectile disable collisions when it stops?\nUseful for fast moving projectiles with bStopSimulatingOnHit = true that generate sweep overlap events even after they have encountered a blocking hit.",
    "BuildingRift:bRegisterAsASpecialActor": "Should this rift be registered as a special actor",
    "BuildingTrap:bIgnoreBuildingObstructions": "Should this trap ignore any obstructing BuildingActors?",
    "FortUpdatedObjectiveStat:bShowToast": "Should this update show the UI toast",
    "FortWeapon:bUseVariableFocalDistanceTargeting": "Should this weapon use variable focal distance for targeting",
    "SpecialEventPlayerMannequin:bDestroyUnusedSkeletalMeshComponentsOnClientFirstInitialization": "Should unused custom part skeletal mesh components be destroyed on the mannequin on first initialization.\n     This optimization should only be used if the mannequin's final cosmetic/CID is setup in the blueprint at construction time.\n     Otherwise, if the mannequin is updated with a new character cosmetic at runtime, it may not have the required skeletal mesh components\n     anymore to fill out the necessary parts. For those situations, DestroyUnusedSkeletalMeshComponents() can be called manually once\n     the cosmetic of the mannequin is final.",
    "FortGlobalMission:MissionInfo": "Should use the asset accessor to get the MissionInfo",
    "FortNonPrimaryMission:MissionInfo": "Should use the asset accessor to get the MissionInfo",
    "RepGraphActorSettingsBase:bAddToRPC_Multicast_OpenChannelForClassMap": "Should we add this to the RPC_Multicast_OpenChannelForClass map",
    "AthenaDeveloperSettings:bAllowEndGamePhase": "Should we allow end game phase when there is only a single team left standing?  If false the game mode will stay where it is rather than transitioning into EndGame",
    "FortRandomPrefabSpawnHelper:bAcceptDuplicatesWhenOutOfUniquePrefabs": "Should we assign prefabs at random after we ran out of unique ones?",
    "AthenaAIController:bAutoGenerateHotspotOnPlayerBuildings": "Should we automatically generate hotspots on player built structures encountered during pathing (ignores a specified PathObstacleAction)",
    "FortProjectileBase:bAutoSelectAttachedForInterp": "Should we automatically try to find a component attached to the root component to interp?\nThis prefers choosing a MeshComponent, PrimitiveComponent, or SceneComponent (not Audio or PSC), in that order.\nIf not using this option, you should do it on clients in BeginPlay with ProjectileMovementComponent->SetInterpolatedComponent",
    "FortAthenaLivingWorldEvent:bCheckForActorDensity": "Should we check for actor density before spawning this Event.",
    "FortSoundLibraryPlaybackSettings:bAutoDestroy": "Should we cleanup the audio component when the sound completes or is stopped",
    "FortGyroV2Settings:bGyroV2VibrationCompensationEnabled": "Should we compensate for vibration with a narrow filter?",
    "FNE_VolumeComponent:bEnableOverlap": "Should we enable overlaps",
    "FortPhysicsOverlapComponent:bBeginPlayDisablePhysicsObjectSleepWhenOverlapping": "Should we enable sleep on overlap at begin play?",
    "FortAthenaLivingWorldCategory:bExcludeFromGlobalAIBudget": "Should we exclude this category from the total AI budget count. Used for categories spawning non AI objects.",
    "PhaseLevelEntry:bExcludeFromServerPreload": "Should we exclude this level from preloading on the server?",
    "FortAthenaMutator_SpecialEvent:bForceAllowCloth": "Should we force cloth on everyone or not",
    "FortGameModeAthena:ForceKickAfterDeathMode": "Should we force kick players after team death to disable spectating?",
    "FortAbilityTargetSelectionList:bUseWeaponRanges": "Should we inherit our ranges from weapons if appropriate?",
    "FortGameMode:bKickIdlers": "Should we kick idlers",
    "FortGameModePvE:bOnlyIdleKickPublicMatches": "Should we limit idle kicking to public matches?",
    "FortAthenaMutator_SpawningPolicyBase:bShouldMaintainItemCount": "Should we maintain the Count or they are spawn once per safe zone",
    "FortAthenaMutator_JumpPenalty:bOverridePenalties": "Should we override the JumpPenalties property of each pawn's UFortMovementComp_CharacterAthena",
    "FortAthenaMutator_JumpPenalty:bOverrideResetTime": "Should we override the JumpPenaltyResetTime property of each pawn's UFortMovementComp_CharacterAthena",
    "FortDeveloperSettings:ReloadUIAfterCompilingBlueprints": "Should we reload the UI after compiling a blueprint?\n*NOTE* You need to add UserWidget as a type that can be compiled during PIE under the experimental options.",
    "BuildingActor:bRotateInPlaceGame": "Should we rotate in place, instead of rotating around centroid while performing in-game rotations",
    "BuildingActor:bRotateInPlaceEditor": "Should we rotate in place, instead of rotating around centroid while placing pieces in the editor",
    "WeaponItemDefinitionDesignerData:bGenerateSacrificeRecipes": "Should we set the sacrifice recipe fields?",
    "UrgentQuestData:bShowBountyPriceAndDistance": "Should we show bounty threat info?",
    "UrgentQuestData:bShowBountyThreatInformation": "Should we show bounty threat info?",
    "FindActorByClassData:ShowMarkerDetails": "Should we show details about the actor when we hover on the marker?",
    "FortWorldMarkerData:bIncludeSquad": "Should we show this marker to our squad?",
    "TaggedPOI:SelectFromAvailableShrinkLocation": "Should we shrink to an available/pre-selected location for this storm shield? If false, we generate a random shrink location. Hotfixable.",
    "FortMission:bSilentDestroyNextFrame": "Should we silent fail this next frame?",
    "FortMissionEvent:ObjectiveHandle": "Should we specifically send this message to a specific objective? If so, which one",
    "FortSoundLibraryPlaybackSettings:bStopWhenAttachedDestroyed": "Should we stop playing when the owner of the attach component is destroyed",
    "PhaseLevelEntryBase:bUnloadLevelOnPhaseEnd": "Should we unload the LevelToLoad on phase end?",
    "LWMEncounterStartStateTreeTaskInstanceData:bUseEncounterTagQuery": "Should we use a tag query to find the encounter?",
    "LWMEncounterStartStateTreeTaskInstanceData:bUseVolumeAsAnchor": "Should we use a tag query to find the encounter?",
    "InteractionImpulseData:bUseDamageToManageImpulse": "Should we use the incoming damage value to manage the size of the impulse?",
    "FortAthenaMutator_SpawningPolicyBase:bWaitForNavmeshToBeLoaded": "Should we wait for the navmesh to be fully loaded before spawning",
    "FortGyroV2Settings:bUseZoomSensitivityScaling": "Should zoom sensitivity scaling be used with gyro aiming?",
    "ValkyrieEditorConfig:bValkyrieMode": "Show Valkyrie buttons on level editor toolbar and other Valkyrie features",
    "EFortUIFeature.ShowSimplifiedHUD": "Show a stripped down simplified hud for perf",
    "BuildingProp_CaptureItemSpawner:bShowCaptureMessages": "Show alerts when capture items change states (captured, taken, dropped, etc.)",
    "EWrapPreviewGridLockerMode.IgnoreLockerConfiguration": "Show all weapons that pass the other filters, whether or not they have a home in the locker",
    "EPlayerIndicatorFlags.WorldName": "Show an arrow over their head",
    "EUIExtensionSlot.BelowRespawnWidget": "Show below the respawn counter when respawning",
    "FortEmporiumFilterCategory:bShowCategoryModal": "Show category modal for this category",
    "TrapItemDefintionDesignerData:bShowDirectionArrowWhenFarOff": "Show direction arrow on mini map if dropped trap is off edge",
    "ECatalogSaleType.Strikethrough": "Show regular price stricken out",
    "FortAthenaMutator_Cobalt:ShowEnemiesInMap": "Show rival team in map",
    "MinigamePostGameSettings:bCustomShowScoreboard": "Show scoreboard as part of Custom Placement postgame",
    "FortAthenaMutator_Cobalt:ShowTeammatesInMap": "Show teammates in map",
    "ESpecialEventTODMModifyType.Show": "Show the GameState's TODM",
    "EFortHUDElementVisibiltyOption.HideElement": "Show the HUD element",
    "EUraniumRoundPhase.ShowRoundEnd": "Show the Round End screen that displays who won",
    "EFortBuildingHealthDisplayRule.Always": "Show the health of the building at all times while focused",
    "EFortBuildingHealthDisplayRule.Allowed": "Show the health of the building conditionally (left to the BP to decide fade in, out, etc.)",
    "EFortFrontEndFeature.ShowHomeBaseOverview": "Show the home base overview screen",
    "EPlayerIndicatorFlags.DBNOCountDown": "Show the name above the players head",
    "EUraniumRoundPhase.PerkSelect": "Show the perk select screen and wait for all player to choose a perk or for the timer to run out",
    "EPlayerIndicatorFlags.WorldArrow": "Show the player on the minimap",
    "EWrapPreviewGridLockerMode.SupportedWeaponsOnly": "Show weapons that have a home in the locker (and therefore will be shown in game)",
    "AIBehaviorScriptComponent": "Show which AI Behavior Script will get added to every Spawned AI from this device",
    "FortMobileContextFilter:ShownInContexts": "Shown if ALL of these EXACT contexts are present",
    "EMinigameGameEndCallout.Placement": "Shows Victory / Defeat title",
    "EMinigameGameEndCallout.Cooperative": "Shows Victory / You Placed #...",
    "MapLandComponent": "Shows custom shadow/land material on map/minimap",
    "EMinigameGameEndPostGameType.Custom": "Shows new Creative Royale postgame",
    "ETimespanAsTextFormat.Approximate": "Shows only the largest unit (e.g., 2 days -> 1 day -> 23 hours -> 1 hour -> 59 minutes, etc...)",
    "FortTimeOfDayManager:CurrentTimeOfDayEditingInHours": "Shows the time in hours (0-23.999) at which the 'Current Time Of Day Editing' Phase is set.  This time is the middle of the 'full' phase for that time of day.  Used exclusively for view purposes in editor.  Not in-game.",
    "TimeOfDayEditorViewSettings:CurrentTimeOfDayEditingInHours": "Shows the time in hours (0-23.999) at which the 'Current Time Of Day Editing' Phase is set.  This time is the middle of the 'full' phase for that time of day.  Used exclusively for view purposes in editor.  Not in-game.",
    "EMinigameGameEndPostGameType.BattleRoyale": "Shows traditional Battle Royale postgame",
    "QualitativePerfMetricSettings:PerPlatformProfiles": "Shows which profile each device profile is currently using.\nYou must edit the config directly to change these.\nTick the box to load them on demand.",
    "FortAIPawnStats:AlertSightRadius": "Sight Radius when alert",
    "FortAIPawnStats:DormantSightRadius": "Sight Radius when dormant",
    "FortPlayerPawn:bSignificanceLODDirty": "SignificanceLOD needs to be refreshed, mostly when attaching new mesh components to the player",
    "EFrontEndCamera.StwFrontendDefault": "Similar to FrontendDefault but specific to STW for other tabs",
    "FortMovementComp_Character:bUpdatesFloorWhenNotInFullSimulationOnlyOnNetUpdate": "Similar to bUpdatesFloorWhenNotInFullSimulation, but throttles the updates for performance to only happen when the network receives a new\nserver location and does *not* do a floor check on other frames where we only interpolate location. This also means it will LOD\nappropriately to update more often for characters closer to the viewpoint and less for those further.",
    "EDeployableTurretState.Collapsed": "Similar to deactivated, currently unused (keeping to maintain BP functionality)",
    "EFrontEndCamera.SmallCosmetics": "Similar to the inspect/vault screen but different camera placement for limited screen utilization.",
    "EFrontEndCamera.Cosmetics": "Similar to the inspect/vault screen but different camera placement.",
    "EFrontEndCamera.StoreItemInspect": "Similar to the inspect/vault screen but different camera placement.",
    "FortAthenaMakeIntVariableStateTreeTask": "Simple Task that creates an int. Note the Task never finishes and it's up to other Tasks in the state to complete the state execution.",
    "FortHabaneroTier:SimpleIconSmall": "Simple coloring (without shading/highlights) for smaller icon readability",
    "FortCosmeticLoadoutComponent": "Simple component that holds a cosmetic loadout and replicates it across the network. Does not bind to any events\nitself, but should instead by the recipient of loadout data (e.g. from FortControllerComponent_CosmeticLoadout)",
    "CurveAssetForm": "Simple container for Curve Data table",
    "DataAssetForm": "Simple container for a Data Table",
    "CosmeticContentOnDemandTelemetryData": "Simple container wrapping all our telemetry data",
    "CurieToggleComponentGroup": "Simple data struct representing a tracked toggle component group",
    "EventManagerKey": "Simple key struct wrapping an integer based ID for custom hashing. For use by objective\nprocessors to key EventTasks (i.e. objective data) for efficient lookup and processing",
    "FortReplicatedStatMapping": "Simple mapping of stat to category, display name, etc.",
    "FortHeroNamesData": "Simple struct for a table row in the hero names table",
    "FortRichTextStyleData": "Simple struct for rich text styles",
    "FortSurfaceDamageRatioStats": "Simple struct for surface ratio based on surface category; Further sub-divided by team affiliation",
    "FortSurfaceDamageRatioByAffiliationStats": "Simple struct for surface ratio per team affiliation",
    "FortCosmeticStatEntry": "Simple struct representing a stat and its initial value. Intended for use where the full stat manager is not\naccessible.",
    "FortDamageSource": "Simple struct representing a unique damage source",
    "FortTierProgressionInfo": "Simple struct representing completed tier progression",
    "FortGameFeatureKeyboardMouseKeybindArray": "Simple struct so we can have an array of data in a TMap for the kbm keybinds.",
    "WorldItemAndMinMaxCount": "Simple struct that contains a world item pointer and a min/max count",
    "ItemDefinitionAndCount": "Simple struct that contains an asset pointer and a count",
    "ItemGuidAndCount": "Simple struct that contains an item guidand a count",
    "CharacterModifierEmote": "Simple struct that contains an item pointer (and item variant GUID) and a count",
    "CharacterModifierInventoryItem": "Simple struct that contains an item pointer (and item variant GUID) and a count",
    "ItemAndCount": "Simple struct that contains an item pointer (and item variant GUID) and a count",
    "ItemVariantHandle": "Simple struct that contains an item pointer and an item variant GUID",
    "BuildingClassData": "Simple struct that contains building class and its desired upgrade level, as well as previous upgrade level for multiple-level-upgrade use case.",
    "ItemCategory": "Simple struct that contains name of secondary item category based on owning gameplay tags",
    "FortAnimNotifyMaterialOverride_ScalarParameter": "Simple struct that defines a parameter to be set on materials, used with the Override Material animation state\nnotify",
    "FortAnimNotifyMaterialOverride_MaterialPair": "Simple struct that defines an override from one material to another, used with the Override Material animation state\nnotify",
    "FortMultiSizeBrush": "Simple struct that defines multiple sizes for a brush",
    "FortMultiSizeFont": "Simple struct that defines multiple sizes for a brush",
    "FortMultiSizeMargin": "Simple struct that defines multiple sizes for a brush",
    "AppliedCharacterPartInfo": "Simple struct that represents a live custom character part via its part definition and the associated mesh component",
    "PlayerBuildableClassContainer": "Simple struct to hold an array of player buildable actor classes",
    "TileCompInterpData": "Simple struct to hold interpolation data for the edit mode tiles",
    "FortItemQuantityPair": "Simple struct to hold item definition with its quantity",
    "FortItemInstanceQuantityPair": "Simple struct to hold item instance with its quantity // @todo: we should stop using this struct for rewards and move the inventory type\n// to a new struct specific to backend rewards (basically how this struct is currently\n// but in a new struct)",
    "EditModeState": "Simple struct to store the state of an edit mode edit",
    "ConversationHistoryData": "Simple structure allowing us to record interactions of note between NPCs and Players for\nfuture reference. e.g.\n'Is this the first conversation between this NPC and the player'?\n'How many times have this player and NPC interacted'?\n'Has some specific conversation based event/interaction happened between me and this NPC'?",
    "LevelSaveRecordRedirect": "Simple structure for redirecting an old asset name/path to a new one",
    "ConnectivityCube": "Simple structure representing a connectivity cube",
    "FortHighlightColors": "Simple structure representing requisite colors for building highlighting",
    "FortHighlightColorsContainer": "Simple structure representing valid and invalid highlight colors for a specific highlight type",
    "FortRechargingActionTimer": "Simple utility for timing",
    "EGyroButton": "Simple way to set a gyro off button",
    "FortHabaneroTier:WhiteIcon": "Simple white icon",
    "OperationSequenceHandle": "Simple wrapper around FOperationSequence that allows for reference collection via standard UProperties",
    "FortGameFeatureStatusList": "Simple wrapper for above, exists for JSON",
    "CustomFeedMessageContext": "Simple wrapper structure containing any basic 'common' params for feed message generator invocation",
    "ClientAILODSettings": "Simplified LOD Settings for the Client. Currently used to define how important an AI is on the client for budgetting purposes.",
    "FortPlayerStateAthena:SimpleMetricInformation": "Simplified summary of the current metric state(s) replicated from the server to client on a set interval",
    "FortCreativeBudgetTracker:AssetInstances": "Simplified version of AssetToInstance which should change-less and cause less of a burden on replication",
    "EFortServerGameMode.Idle": "Simply idle waiting for users",
    "VehicleSimAux": "Simulation auxiliary state containers",
    "SpringConfig": "Simulation configuration state containers",
    "WaterControlParams:WaterSimSubStepTime": "Simulation sub-step time allowed for higher quality movement (local player and server).",
    "DeployableTurretBPAnimData": "Since not all of the deployable turret BGA is nativized, some stuff needs to be passed to the native anim instance from BP.\nThis struct contains that data. It is passed from BP to native via SetNativeVariables. Native then processes it into the\nvarious variables used by the anim graph.",
    "FortWeaponCameraAnimationComponent:ActiveShakeModifier": "Since the Camera Modifier won't change for a given weapon, we can cache it to prevent redundant calls to FindOrAddCameraModifierNative in WeaponCameraFunctionLibrary.",
    "MountedWeaponInfoRepped:DriverCameraDirectionCached": "Since the driver camera values come from the player controller, this is if we need that on simulated proxies.",
    "MountedWeaponInfoRepped:DriverCameraLocationCached": "Since the driver camera values come from the player controller, this is if we need that on simulated proxies.",
    "FabricChildActorComponent:ModulatorPortSaveData": "Since the modulator port is created dynamically, its serialized data lives on this.\nNot editable, this has EditInstanceOnly to work with LiveEdit in UEFN",
    "FortGameStateComponent_Reboot:SpawnMachineRepData": "Since we don't need Reboot Van assets to render map icons we store only their positions",
    "FortPlayerControllerZone:VehicleSeatTransitionTargetIndex": "Since we have a delay before we start moving, this stores what vehicle seat are we wanting to go to next before it happens.",
    "FortAthenaMutator_Mash:BossHealthShieldData": "Since we have different types of final bosses, not all whose health/shield is available on the client, replicate the health/shield info here for the UI",
    "EPointLightDeviceModes.Wave": "Sine wave intensity variation",
    "FortGameplayCueNotify_Looping:StartParticleSystem": "Single particle system to play when activating the cue",
    "FortGameplayCueNotify_Looping:StopParticleSystem": "Single particle system to play when activating the cue",
    "FortGameplayCueNotify_Looping:StartSound": "Single sound to play when activating the cue",
    "FortGameplayCueNotify_Looping:StopSound": "Single sound to play when the cue is removed",
    "FortMeleeDeflectTransitionAnimData": "Single transition from one melee deflection to another.",
    "EUIExtensionSlot.BelowCompass": "Sits right below the compass",
    "EFortStartupPhase.EarlyStartupFinished": "Sitting in delayed startup state ready to perform captures",
    "EFortStartupPhase.EarlyStartupLoading": "Sitting in delayed startup state, still loading assets for capture",
    "FortWorldSettings:SimpleDestructiblePropGroupCellSize": "Size (in cm) used by the SimpleDestructiblePropBuilder to merge ASimpleDestructibleProps into groups.\nThe world is divided into a 2D grid where each square of the grid uses this size for width and length.\nThis is only used when the action is triggered (Fortnite Tools -> Build -> Build Simple Destructible Prop Groups).",
    "FortMapIconDefinition:IconMaterialSize": "Size at which to display the icon if its resource object is a Material and bUseIconSize is enabled",
    "FortMiniMapData:IconMaterialSize": "Size at which to display the icon if its resource object is a Material and bUseIconSize is enabled",
    "FortEmporiumItemData:FileSize": "Size of asset",
    "ActorTemplateRecord:DataHeaderSize": "Size of the archive header in ActorData",
    "ActorComponentRecord:DataHeaderSize": "Size of the archive header in ComponentData",
    "FortAthenaLivingWorldTagDensityGridData:GridCellSize": "Size of the cell in the density grid. The lower the number the more precise the grid becomes at the expense of performance.",
    "EFortFrontEndFeature.MAX_None": "Size of the feature list",
    "BuildingActor:SnapGridSize": "Size of the grid to snap to",
    "BuildingSMActorClassData:PlayerGridSnapSize": "Size of the grid to snap to when using the Placement Tool",
    "FortCreativeInteractVisualizationComponent:VisualizationDiameterDesired": "Size of the interaction at the end of the transition.",
    "FortCreativeInteractVisualizationComponent:VisualizationDiameterStart": "Size of the interaction at the start of the transition.",
    "FortVehicleSeatWeaponComponent:WeaponSklMeshComponent": "Skeletal Mesh Component reference for weapon mesh component attached to vehicle",
    "FortDagwoodVehicle:BrakeLightsName": "Skeletal Mesh Material Parameter Name",
    "FortWeaponBoardDisplaySlot:LocalOffsetMultiplier": "Skeletal Mesh positioning information passed to and consumed by Blueprint.",
    "FortWeaponBoardDisplaySlot:MeshRelativeTransform": "Skeletal Mesh positioning information passed to and consumed by Blueprint.",
    "FortMotorcycleVehicle:RoadAndExhaustBrakelightsName": "Skeletal mesh materials parameter name.",
    "FortMotorcycleVehicle:RoadAndExhaustHeadlightsName": "Skeletal mesh materials parameter name.",
    "FortWeaponRanged:FortSpawnPropOverride": "Skeletal mesh to use for SkeletalMeshProp in FortSpawnProp anim notify states",
    "FortWeaponRanged:FortSpawnPropAnimOverride": "Skeletal mesh to use for SkeletalMeshPropAnimation in FortSpawnProp anim notify states",
    "TrapItemDefintionDesignerData:PickupSkeletalMesh": "Skeletal mesh used to pickup this trap",
    "FortAthenaMutator_PreloadAssets:SkeletalMeshes": "Skeletal meshes to preload",
    "AssetAttachment:SkeletalMeshAsset": "SkeletalMesh Asset to attach",
    "FortValetAudioController:AngleForSkidding_Native": "Skidding category",
    "EFrontEndCamera.SkillTrees": "Skill Trees",
    "FortAthenaAIBotController:BotSkillSetClasses": "Skill set classes to use as default for this bot",
    "SkyfireBotPlayerPawnComponent:PreviousSkillSetClasses": "Skill set classes to use as default for this bot",
    "SkyfireBotPlayerPawnComponent:SkyfireSkillSetClasses": "Skill set classes to use as default for this bot",
    "MMRSpawningBracketNPCDataTableRow:Skill": "Skill value to spawn",
    "MMRSpawningDataTableInfo:Skill": "Skill value to spawn",
    "CharacterPartsExtraSpecial:SkinMetaTagsForExtraSpecial": "Skins with these tags will use the extra special body parts.",
    "BuildingSMActor:bForceReplicateSubObjects": "Skip MinimalReplicationProxy optimization, please consult with the network team before using this",
    "EAthenaGamePhase.None": "Skip all game phases and just spawn players in.",
    "AssetAttachment:bSkipOnDedicatedServers": "Skip attachment on dedicated servers, for performance.",
    "FortMovementComp_CharacterAthena:NetworkSkipSkyDivingCollisionForPawnLOD": "Skip collision during skydiving for Pawn significance LOD >= this.",
    "EFortCreativeDiscoverySkippedEntries.ByCount": "Skip over an exact amount of entries.",
    "EFortCreativeDiscoverySkippedEntries.ByPercent": "Skip over the percent [0, 1] of top results.",
    "HighlightObjectData:bIgnoreDistanceCheck": "Skip the distance check for optimization. Use only if you manually manage when you start and stop the highlight.",
    "ClientAILODMovementCompOptimizationConfiguration:FrameSkippingOnLOD1": "Skip this many frames between movement smoothing updates for LOD 1.",
    "ClientAILODMovementCompOptimizationConfiguration:FrameSkippingOnLOD2": "Skip this many frames between movement smoothing updates for LOD 2.",
    "ClientAILODMovementCompOptimizationConfiguration:FrameSkippingOnLowestLOD": "Skip this many frames between movement smoothing updates for LOD 3+.",
    "ClientAILODMovementCompOptimizationConfiguration:FrameSkippingInvisible": "Skip this many frames between movement smoothing updates when the pawn is not rendered, not within certain distance and not within the visibility frustum.",
    "CustomTickComonentQualitySettings:NumFramesToSkipBetweenEvaluations": "Skip this many frames between reevaluations of NumFramesToSkipBetweenCustomTicks.  If < 0, perform the reevaluation on the same frame that the custom tick is executed.",
    "FortMovementComp_Character:SkyTubeSkydivingControlParamsActive": "SkyTube active active downward dive",
    "FortMovementComp_Character:SkyTubeSkydivingControlParamsActiveUpward": "SkyTube active active upward dive",
    "FortMovementComp_Character:SkyTubeSkydivingControlParamsPassive": "SkyTube passive controls",
    "TimeOfDayController_BlueprintBase:ScalarParameters": "Skybox Scalar Parameters",
    "TimeOfDayController_BlueprintBase:bOverride_CloudHorizonColor": "Skybox Settings",
    "TimeOfDayController_BlueprintBase:bResetMaterialWhenUpdatingParams": "Skybox Settings",
    "FortPlayerCameraBase:SkydiveDiveCameraClass": "Skydive diving camera class",
    "FortPlayerCameraBase:SkydiveGlideCameraClass": "Skydive gliding camera class",
    "FortGameModeAthena:bUseSkydiveLeaderInSplitScreen": "Skydive leader can be controlled separately in splitscreen",
    "FortPlayerCameraBase:SkydiveParachuteCameraClass": "Skydive parachuting camera class",
    "FortMovementComp_Character:SkydivingControlParamsPassive": "Skydiving params",
    "EFortTODMPostProcess": "Skydome Postprocess Types Enum",
    "TimeOfDayController_BlueprintBase:SkyLightColor": "Skylight Settings",
    "TimeOfDayController_BlueprintBase:bOverride_SkyLightColor": "Skylight Settings",
    "FortTeamMemberInfo:HeroIcon": "Slate brush for the party member's hero",
    "FortPawn:SpottedBrush": "Slate brush to use when this pawn has been spotted by another player",
    "SlidingControlParams:JumpSlideSweepHeightShrinkCoefficient": "Sliding: A coefficient used to shrink the capsule used for sweeping forward onto a candidate surface to make sure there is clearance to initiate slide.",
    "SlidingControlParams:SlidingSpeedAddedFrictionCurve": "Sliding: Added Friction based on the speed the character",
    "SlidingControlParams:DownhillSlideStartBoost": "Sliding: An extra impulse magnitude to apply in the 2D velocity direction when starting to slide downhill at MaxSlidingSlopeAngle or higher.",
    "SlidingControlParams:LevelSlideStartBoost": "Sliding: An extra impulse magnitude to apply in the 2D velocity direction when starting to slide on a level plane.",
    "SlidingControlParams:UphillSlideStartBoost": "Sliding: An extra impulse magnitude to apply in the 2D velocity direction when starting to slide uphill at MaxSlidingSlopeAngle or higher.",
    "SlidingControlParams:bClampMaximumSpeedToEntryDirection": "Sliding: Clamp maximum speed to entry direction so that we will always slide in a straight line instead of being realigned with downward slopes",
    "SlidingControlParams:bUncrouchAfterSlidingIfMoving": "Sliding: If true, the character will automatically uncrouch after a slide ends due to the speed falling below MinForwardSlidingSpeed if forward movement input is provided.",
    "SlidingControlParams:SlidingLandingSpeedTransferRatioCurve": "Sliding: Landing speed transfer ratio based on fall velocity",
    "SlidingControlParams:SlidingFatigueMaxCount": "Sliding: Max count for the sliding fatigue just to make sure it never goes overboard, this will end up stopping the character anyway, but it will prevent spamming this and getting out of control",
    "SlidingControlParams:DownhillGroundFrictionMultiplier": "Sliding: Multiplier applied to ground friction when sliding downhill at MaxSlidingSlopeAngle or higher.",
    "SlidingControlParams:BoostLevelGroundFrictionMultiplier": "Sliding: Multiplier applied to ground friction when sliding on a level plane.",
    "SlidingControlParams:LevelGroundFrictionMultiplier": "Sliding: Multiplier applied to ground friction when sliding on a level plane.",
    "SlidingControlParams:BoostUphillGroundFrictionMultiplier": "Sliding: Multiplier applied to ground friction when sliding uphill at MaxSlidingSlopeAngle or higher.",
    "SlidingControlParams:UphillGroundFrictionMultiplier": "Sliding: Multiplier applied to ground friction when sliding uphill at MaxSlidingSlopeAngle or higher.",
    "SlidingControlParams:BrakingDeceleration": "Sliding: Overrides the braking deceleration while sliding.",
    "SlidingControlParams:WalkableFloorAngle": "Sliding: Overrides the maximum angle in degrees of a walkable surface while sliding.",
    "SlidingControlParams:MinAnalogSpeed": "Sliding: Overrides the min analog speed from the thumbstick allowed during sliding.",
    "SlidingControlParams:SlopeUpAddedFrictionValue": "Sliding: The amount of friction to add at very high slope up angle",
    "SlidingControlParams:SlidingFatigueDuration": "Sliding: The amount of time in seconds after a slide ends during which sliding fatigue will apply for subsequent slides.",
    "SlidingControlParams:CrouchCooldownAfterSlideDuration": "Sliding: The amount of time in seconds after a slide ends naturally during which crouching and sliding will be prevented.",
    "SlidingControlParams:SlidingVerticalVelocityConvertedOnLanding": "Sliding: The amount of vertical velocity maintained when falling",
    "SlidingControlParams:JumpSlideCapsuleRadiusDetectionRange": "Sliding: The detection range in front of the capsule in units of the current capsule radius. For instance if the capsule is 30cm and\nthis value is 3, the detection range will be 90cm from the front edge of the capsule.",
    "SlidingControlParams:FallingGracePeriod": "Sliding: The grace time period we allow before we start falling when there are no ground in sliding",
    "SlidingControlParams:MaxAdditionalMomentum": "Sliding: The maximum additional momentum to add when going down slope",
    "SlidingControlParams:MaxBackwardSlidingAcceleration": "Sliding: The maximum amount of backward acceleration that will be applied with input controls while sliding. Used to slow down while sliding.",
    "SlidingControlParams:MaxForwardSlidingAcceleration": "Sliding: The maximum amount of forward acceleration that will be applied with input controls while sliding. Used to speed up while sliding.",
    "SlidingControlParams:MaxLateralSlidingAcceleration": "Sliding: The maximum amount of lateral acceleration that will be applied with input controls while sliding. Used to maneuver side to side while sliding.",
    "SlidingControlParams:JumpSlideAllowedSurfaceAngleDeviation": "Sliding: The maximum angle deviation in degrees from world up for a surface to be a valid jump slide candidate.",
    "SlidingControlParams:MaxRotationAngleOnAcceleration": "Sliding: The maximum rotation angle we allow when turning with acceleration",
    "SlidingControlParams:MaxSlidingSlopeAngle": "Sliding: The maximum slope angle magnitude (measured from horizontal) after which friction changes will be clamped.\n                      This angle is used for both uphill and downhill limits.",
    "SlidingControlParams:MaxForwardSlidingSpeed": "Sliding: The maximum speed in the forward movement direction that can be reached while sliding.",
    "SlidingControlParams:MaxLateralSlidingSpeed": "Sliding: The maximum speed perpendicular to the forward movement direction that can be reached while sliding.",
    "SlidingControlParams:MinAdditionalMomentum": "Sliding: The minimum additional momentum to add when going down slope",
    "SlidingControlParams:MinAngleForAdditionalMomentum": "Sliding: The minimum angle to start adding downward momentum",
    "SlidingControlParams:MinAccelerationSlidingAngle": "Sliding: The minimum angle we want on the acceleration from the current movement direction to consider this a push to drift",
    "SlidingControlParams:JumpSlideCapsuleHeightClearanceCoefficient": "Sliding: The minimum clearance height as measured from the top of the capsule to the slide surface as a percentage of the scaled capsule height.\nFor instance if the scaled capsule height were 100cm and the clearance coefficient were 0.4, the surface to slide on must be at least 40 cm below\nthe current top of the capsule.",
    "SlidingControlParams:MinSpeedToStartSliding": "Sliding: The minimum speed before which the sliding input will put the character into the sliding mode.",
    "SlidingControlParams:MinSpeedToStartJumpSliding": "Sliding: The minimum speed that the character must be currently moving in order to initiate a jump slide.",
    "SlidingControlParams:MinForwardSlidingSpeed": "Sliding: The minimum speed threshold in the forward movement direction that can be reached while sliding before automatically exiting the sliding mode.",
    "SlidingControlParams:SlidingUseSlopeAngleForVerticalVelocityTransferRatio": "Sliding: The ratio between using the slope to transfer vertical velocity or just transfering to directly (0.0f means transfer directly, 1.0 means use slope to transfer)",
    "SlidingControlParams:SlidingRentryFromJumpPenalty": "Sliding: The ratio penalty to add to the speed if we land in sliding after jumping from sliding",
    "SlidingControlParams:LandingVelocityReductionRatio": "Sliding: The reduction of velocity we want to apply when landing in slide when going over the walking max speed",
    "SlidingControlParams:RotationAngleSpeedOnAcceleration": "Sliding: The rotation angle speed we use when rotating velocity using acceleration",
    "SlidingControlParams:SlopeUpAddedFrictionAngle": "Sliding: The slope up angle threshold at which we start adding extra friction",
    "SlidingControlParams:UseAccelerationRotateVelocity": "Sliding: Use the acceleration as a rotation on the velocity instead of adding it to the current velocity",
    "SlidingControlParams:bUsePhysicsSlidingDownSlopeImpulsion": "Sliding: Use the physics code to apply downward slope impulsion",
    "SlidingControlParams:SlidingIsEnabled": "Sliding: Whether or not sliding is enabled. A value of 0.0 will disable sliding. A value of 1.0 or any other value will enable sliding.",
    "SlidingControlParams:EnterSlideFromFallInputBuffer": "Sliding: While falling, a slide will be automatically started upon landing if the input has been triggered within this time window before landing.",
    "SlidingControlParams:SlidingFatigueMultiplier": "Sliding: While sliding fatigue is active, each slide will have its ground friction multiplied by this value. The multiplication operation will compound for each additional slide during slide fatigue.",
    "EPointLightDeviceModes.Flicker": "Slight color and intensity variations",
    "SlopeModData:MaxAngle": "Slope angle max value",
    "SlopeModData:MinAngle": "Slope angle min value",
    "FortSmartObjectSlotDefinitionData:CooldownOnInterrupted": "Slot Cooldown : Duration before which an AI that has just be interrupted during the usage of this slot cannot use it again, other AIs can use it. (0 = No Cooldown)",
    "FortSmartObjectSlotDefinitionData:CooldownOnFinished": "Slot Cooldown : Duration before which an AI that has just used this slot cannot use it again, other AIs can use it. (0 = No Cooldown)",
    "FortSmartObjectSlotDefinitionData:Radius": "Slot Radius : User must be inside this radius to be interested in this one. (0 = No Slot Radius)",
    "EFortQuestObjectiveItemEvent.SlotHeroInLoadout": "Slot a hero in a loadout slot",
    "EFortQuestObjectiveStatEvent.SlotHeroInLoadout": "Slot a hero in a loadout slot",
    "EFortQuestObjectiveItemEvent.SlotInCollection": "Slot an item in the collection book",
    "EUIExtensionSlot.InventoryQuickbarEditor": "Slot for Replacing the quickbar editor in the inventory.",
    "EUIExtensionSlot.DiscoverInLobby": "Slot for adding Discover into the Lobby.",
    "EUIExtensionSlot.CrosshairRight": "Slot for anchoring UI near the crosshair, on the right",
    "EUIExtensionSlot.TopRightCorner": "Slot for anchoring UI to the top right corner under the minimap",
    "EUIExtensionSlot.UpperCenter": "Slot for anchoring UI within the prioritized switcher where storm messages are @see IFortPrioritizedWidget",
    "EUIExtensionSlot.GameInfoBox": "Slot for appending UI elements to the HUD game counters (timer, killcount, etc)",
    "EUIExtensionSlot.Quickbar": "Slot for appending UI elements to the quickbar.",
    "EUIExtensionSlot.QuickbarUnderlay": "Slot for appending UI elements underneath/behind the quickbar.",
    "EUIExtensionSlot.VisitedAreaDisplayMainBoxOverride": "Slot for replacing the POI visited MainBox layout. Still uses the same animations.",
    "EUIExtensionSlot.Secondary": "Slot for the same as Primary, but nested higher in the widget hierarchy to allow for other widgets to draw on top",
    "ESlotEnvironmentExposure.Exposed": "Slot is exposed.",
    "ESlotEnvironmentExposure.Protected": "Slot is protected.",
    "EUIExtensionSlot.UnderSquadInfo": "Slot that appears under the squad info",
    "EFortQuestObjectiveStatEvent.SlotInCollection": "Slot up an item in a collection",
    "ESlotEnvironmentExposure.Unknown": "Slot's environmental exposure is unknown.",
    "EForLockerCategorySlotPriority": "Slots will be sorted by priority, this can also be used to affect how they are presented in the UI",
    "EPathTestQueryType.RegularPathFinding": "Slow",
    "FortScoutDroneControllingComponent:DismissButtonPressCooldown": "Small Cooldown used to prevent RPC spamming when pressing dismiss",
    "FortWeaponComponent_TargetModeSelector:ToggleButtonPressCooldown": "Small cooldown used to prevent RPC spamming when pressing toggle.",
    "HeroSpecializationDesignerData:SmallPreviewImage": "Small icon",
    "CreativeIconOption:SmallIcon": "Small icon with 64*64 resolution",
    "TrapItemDefintionDesignerData:SmallPreviewImage": "Small image used to show trap to user",
    "FortCollectionDataMapping": "Small struct that contains the collection type string of a collection to avoid loading the whole collection.",
    "CreativeOptionVariableBase": "Small wrapper class to combine a Gameplay tag with a value so that we can link between data in Native and Creative Options.",
    "DynamicXpAggregatedStats:LilAccoladeTPM": "Smaller data foot print than Accolades. This will eventually be what is received from links server, then it will be copied into Accolades on DS.",
    "FortQuestIndicatorCustomCategory:Priority": "Smaller goes first",
    "FortQuestTagToCategoryDataRow:Priority": "Smaller goes first",
    "FortCurieActiveElectricityArc:TargetActorSmallestAxis": "Smallest axis of target actor; Cached here to avoid recalculation while playing impact fx",
    "EFortActorTemplateCostUpdateMethod.OnlyNew": "Smallest cost value between existing and most recent value.",
    "AthenaCapturePoint:MinHUDIndicatorSize": "Smallest the indicator will display",
    "ESmartBuildMode": "SmartBuild",
    "AIRuntimeParametersSmartObjectActivity:SmartObjectActivityConfig": "SmartObject Activity Config (What activity can I be interested in)",
    "GameFeatureSmartObjectActivityInfo": "SmartObject Activity Info",
    "SmartObjectBanned": "SmartObject banned from the selection",
    "SmartObjectRecentlyUsed": "SmartObject recently used info",
    "FortCheckPointSplineActor:bSmoothSplineMesh": "Smooth the spline tangents, based on SplineMeshTension",
    "FlightParams:ControlFrameRollInterpPerSecond": "Smoothing coefficient for the control frame's roll. This will have a\n              STRONG effect on the feel of steering, since the roll of the control\n              frame is the primary determinant of the meaning of the pitch and yaw\n              inputs. Having the control frame slowly interpolate towards a target\n              means that the meaning of these inputs changes gradually, rather than\n              harshly.",
    "FlightParams:ControlFrameDistanceInterpPerSecond": "Smoothing coefficient on the control frame's distance interpolation.",
    "FlightParams:ControlFrameOrbitInterpPerSecond": "Smoothing coefficient on the interpolation of the control frame's angle\n              relative to the plane.",
    "FortGyroV2Settings:GyroV2SmoothingThreshold": "Smoothing threshold for gyro aiming input",
    "FortGyroV2Settings:GyroV2SmoothingWindow": "Smoothing window for gyro aiming input (in seconds)",
    "FortSplineGroundPath:GrowthSmoothingStrength": "Smooths out the last part of the interpolation.",
    "FortAthenaPartyRiftPortal:SanitizedCreatorName": "Social party creator/leader",
    "FortAthenaPartyRiftPortal:SanitizedTagline": "Social party tagline",
    "SocialStyle": "Social service style",
    "FortPresenceSocialStatus": "Social status shared over presence *",
    "FortVehicleSeatWeaponComponent:VehicleSocketName": "Socket Name of vehicle where to attach mesh to.",
    "FortPawn:DeathHitSocket": "Socket for Death Hit.",
    "FortCurieCableSocket:SocketIdentifier": "Socket identifier",
    "FortMotorcycleVehicle:RearAxleSocket": "Socket name for rear axle",
    "FortVehicleSeatWeaponComponent:VehiclePawnAttachSocketName": "Socket name of Vehicle for Where to attach Player Pawn when changing seat to Weapon seat\nTO Decide: This could be socket name on Weapon Mesh if we have a seated weapon like mounted turret",
    "FortGameplayCueNotifyAthena_AIAlertState:SpriteMeshAttachSocketName": "Socket name to attach SpriteMeshComponent",
    "FortGameplayCueNotifyAthena_AIFleeState:FleeStateTag": "Socket name to attach SpriteMeshComponent",
    "FortGameplayCueNotifyAthena_AIFleeState:SpriteMeshAttachSocketName": "Socket name to attach SpriteMeshComponent",
    "ServerSocketTransformOverride:SocketName": "Socket name to override",
    "FortPawn:LeftHandWeaponHandSocketName": "Socket name to which left handed weapons should be attached.",
    "FortWeapon:LeftHandWeaponHandSocketNameOverride": "Socket name to which left handed weapons should be attached.",
    "FortPawn:WeaponHandSocketName": "Socket name to which weapons should be attached.",
    "FortWeapon:WeaponHandSocketNameOverride": "Socket name to which weapons should be attached.",
    "ServerSocketTransformOverride:OffsetFromPivot": "Socket offset",
    "AssetAttachment:SocketName": "Socket on FortPawn's mesh to attach Asset to",
    "FortAnimInput_BowWeapon:WeaponAttachmentSocketName": "Socket on the weapon that attaches to the player's left hand.",
    "FortAnimInput_BowWeapon:ArrowNockSocketName": "Socket on the weapon where the right hand should be attached.",
    "FortSoundLibraryPlaybackSettings:AttachName": "Socket or bone name used for attachment",
    "FortGameplayCueAttachInfo:SocketName": "Socket or bone to attach to when playing. If None will use actor's root",
    "FortGameplayCueNotify_Looping:AttachPoint": "Socket or bone to attach to when playing. If None will use actor's root",
    "AntelopeInPersistent:BackLeanSocketPosition": "Socket position of the back passenger. Used to determine where to apply back passenger lean force.",
    "FortAthenaVehicle:PushForceSocket": "Socket to apply pushing force at",
    "FortAthenaVehicle:RearWheelSockets": "Socket to apply rear lateral force at",
    "FortAthenaVehicle:FrontWheelsSocket": "Socket to apply steering force at",
    "GliderTrailParticleDefinition:EffectSocket": "Socket to attach the Niagara system to",
    "FortWeap_BuildingToolBase:BlueprintPaperSocket": "Socket to attach the blueprint paper to",
    "FortWeap_BuildingToolBase:BlueprintPencilSocket": "Socket to attach the blueprint pencil to",
    "CarriedObjectAttachmentInfo:SocketName": "Socket to attach the flag to",
    "BuildingSMActor:DeathParticleSocketName": "Socket to spawn death particles at, if specified and it exists on the actor's mesh",
    "MotorcycleWheel:WheelSocket": "Socket to start the spring trace from",
    "FortTankVehicle:SocketOverrideArray": "Socket transform override array",
    "AthenaCarPlayerSlot:SeatChoiceSocket": "Socket used for picking what the player's intended seat choice will be",
    "AthenaCarPlayerSlot:SeatSocket": "Socket used for positioning player when in the slot",
    "FortWeapon:MuzzleFalloffSocketName": "Socket used for setting muzzle falloff material parameters",
    "AthenaCarPlayerSlot:SeatIndicatorSocket": "Socket used for the HUD indicator widget position.",
    "ConversationSettingDialogMarkerData:DialogMarkerSoftClass": "Soft class for new conversation indicator to use.",
    "DynamicUIWidgetTarget:WidgetClass": "Soft class pointer reference of the path contained in the Widget field. Re-constructed at load time.",
    "FortGliderLayeredAudioOneshotGate:SoundRef": "Soft reference to Asset to play when tripped",
    "FortHiddenRewardQuantityPair:EditorOnlyItemDefinition": "Soft reference to the Reward Item. This is used to set TemplateId and provides reference tracking in editor",
    "BuildingActorClassData:NavigationLinkSoftClass": "SoftClassPtr for OffMeshLinks class this actor generates on navmesh",
    "EFortQuestObjectiveStatEvent.TimeElapsed": "Some amount of mission time has elapsed (currently triggered every minute about .0004 seconds after the minute.)\nStW: In order for this to trigger the Mission this objective is part of MUST contain a UFortMissionTimerComponent with bUpdateQuestsTimeElapsed == true\nBR/Athena: this will fire every minute on the server quest manager. Target is empty.",
    "BuildingActor:bUseMinLifeSpan": "Some builing actors need a min life span otherwise LifeSpanExpired() will not be called (lifespan set with a negative number).",
    "FortWorldMarkerData:ItemDefinition": "Some classes may be able to provide us with an item definition, if so, include that, since the instance may not be relevant to query.",
    "BagelLeaderboardEntry:bIsSpecialEntry": "Some entry are special (Celebrities)",
    "MashLeaderboardEntry:bIsSpecialEntry": "Some entry are special (Celebrities)",
    "EFriendChestInstancedType.ItemDefinition": "Some item definition we want to wrap.  This is needed if there are grant period restrictions",
    "FortWorldMarkerData:ItemCount": "Some marked items might be a stack of items, with more than 1 item in the stack.",
    "ETeamChatRoomState.Creating": "Some player told to create a room and report back",
    "EBuildingStairsRailing.Partial": "Some railings (e.g. on one side), this is most common setting",
    "DynamicXpAggregatedStats:UniqueGameId": "Some sort of unique Id that these stats represent.  In creative, it is the IslandCode Mnemonic",
    "FortScriptedObjectMovement_MovableObjectBase:bWaitingForBeginPlaySkip": "Some steps on static path need to be skipped, as movement will not look correct (eg cube rolling over water bodies)\n       This flag can be set to mark a SOM object as being \"done\" for the match, since it could not complete the step.",
    "FortMovementComp_Character:bUpdatesFloorWhenNotInFullSimulation": "Some systems such as animation might require the floor information to be available at all times to function properly.\nWhen set to true, the floor is calculated even when we're not doing a full simulation.",
    "OrbCountLimit:LimitValue": "Some value that can be used to determine when this orb count should be used.",
    "ESpawnMachineState.Active": "Someone is interacting to trigger use",
    "FortCosmeticVariantPreviewElement": "Sometimes some level of unlock comes with a new item, like a backpack, this is that item - with it's own potential variants.",
    "FortAthenaVehicle:ImpactInstigator": "Sometimes the vehicle may want to do impact damage without a driver.",
    "PropertyToShowData:bForceShowParentProperty": "Sometimes we may not have a valid property path generated for the parent property. This will ensure we still show the parent property regardless",
    "FortCosmeticVariantPreview": "Sometimes we need to show what users will have once they finish a bunch of objectives in the battle pass, this represents that state.",
    "EFortWorldRecordState.SavingPlayerProfiles": "Sometimes we save a zone record, if we do it's before we save the world record",
    "EManagedPickupBucket.Junk": "Sort into appropriate bucket",
    "EFortEmporiumItemSortMode.SizeLowToHigh": "Sort items by ascending asset size",
    "EFortEmporiumItemSortMode.SizeHighToLow": "Sort items by descending asset size",
    "EFortEmporiumItemSortMode.PriceHighToLow": "Sort items by highest price",
    "EFortEmporiumItemSortMode.PriceLowToHigh": "Sort items by lowest price",
    "EFortEmporiumItemSortMode.AtoZ": "Sort items in alphabetical order",
    "EFortEmporiumItemSortMode.ZtoA": "Sort items in reverse alphabetical order",
    "EGridSortKind.ByNumberThenString": "Sort lexicographically by number then string",
    "EGridSortKind.ByStringThenNumber": "Sort lexicographically by number then string",
    "EGridSortKind.ByNumber": "Sort only by number",
    "EGridSortKind.ByString": "Sort only by string",
    "BundleGoalCardDisplayData:SortOrder": "Sort order compared to other cards of this type. Lower numbers appear first.",
    "QuestCategoryHeaderData:HeaderSortOrder": "Sort order relative to other headers. Lower values sort first.",
    "FortTopBarTabButtonInfo:SortOrder": "Sort order relative to other tabs. Lower values appear first. Default tabs are spaced at 1000, 2000, etc.",
    "HomebaseBannerCategoryData:SortPriority": "Sort priority of the category; The higher the value, the earlier in the sort",
    "FortCategoryTableRow:SortPriority": "Sort priority override (Higher priority sorts higher in the list)",
    "FortCollectionBookPageCategoryTableRow:SortPriority": "Sort priority override (Lower priority sorts higher in the list)",
    "ColorCurve:Keys": "Sorted array of keys",
    "FortQuartzSynchronizer:TimestampEvents": "Sorted by PositionSecond at runtime",
    "ValkyrieProjectDescriptor:SortPriority": "Sorting priority in the project browser; lower values are listed first",
    "SkyfireBackpackComponentInitializerSoundConfigStruct": "Sound Config",
    "SkyfireBackpackComponentInitializerSoundRarityStruct": "Sound Rarity",
    "SkyfireBackpackComponentInitializerSoundTeleportStruct": "Sound Teleport",
    "SkyfireBackpackComponentInitializerSoundTickStruct": "Sound Tick",
    "CharmSoundAssetEntry": "Sound asset entry for Charms",
    "FortGameplayCueAudioInfo:SoundCue": "Sound cue to play",
    "MilkshakeControllerComponent:CameraShakeSoundCue": "Sound cue to play with the camera shake",
    "SkeletalAudioBoneConfig:SoundLoop": "Sound cues to be triggered when velocity\ndeltas are discovered",
    "AthenaCarPlayerSlot:SoundOnEnter": "Sound for a player entering this slot",
    "AthenaCarPlayerSlot:SoundOnExit": "Sound for a player exiting this slot",
    "FortAIPawn:MoveSoundStimulusBroadcastInterval": "Sound generation interval when AI is moving",
    "FortAthenaMutator_AudioFadeOverride:FadeoutSoundMix": "Sound mix to apply during a camera fade",
    "FortGameStateAthena:LobbySoundMix": "Sound mix to apply when in the warmup phase (gets removed when entering battle bus)",
    "FortAthenaMutator_Wax:RespawnSound": "Sound played when a player respawns",
    "FortPlayerPawn:OnCrouchStartSound": "Sound played when player crouches",
    "FortPlayerPawn:OnCrouchEndSound": "Sound played when player gets up after crouching",
    "TrapItemDefintionDesignerData:DropSound": "Sound played when this trap is dropped",
    "TrapItemDefintionDesignerData:PickupSound": "Sound played when this trap is picked up",
    "WaterVolume_Deep:EntrySound": "Sound played when touched by an actor that can splash",
    "WaterVolume_Shallow:EntrySound": "Sound played when touched by an actor that can splash",
    "WaterVolume_Deep:ExitSound": "Sound played when untouched by an actor that can splash",
    "WaterVolume_Shallow:ExitSound": "Sound played when untouched by an actor that can splash",
    "FortAthenaMutator_Uranium:RoundIntroFactionSound_Attacking": "Sound that plays on the round intro screen. Explains the attacking team's objective",
    "FortAthenaMutator_Uranium:RoundIntroFactionSound_Defending": "Sound that plays on the round intro screen. Explains the defending team's objective",
    "FortAthenaMutator_Uranium:MatchEndSound_Lose_Attackers": "Sound that plays when the local player is an attacker and their team just lose",
    "FortAthenaMutator_Uranium:MatchEndSound_Win_Attackers": "Sound that plays when the local player is an attacker and their team just won",
    "FortAthenaMutator_Uranium:MatchEndSound_Lose_Defenders": "Sound that plays when the local player is an defender and their team just lose",
    "FortAthenaMutator_Uranium:MatchEndSound_Win_Defenders": "Sound that plays when the local player is an defender and their team just won",
    "FortVehicleFuelComponent:LowFuelSound": "Sound that plays when the low fuel threshold is hit.",
    "FortVehicleFuelComponent:OutOfFuelSound": "Sound that plays when the vehicle runs out of fuel.",
    "FortAthenaMutator_GameModeBase:Stinger_MatchStart": "Sound to be played at before a round starts, but after start island.",
    "FortAthenaMutator_GameStartCountdown:CountdownMusicStinger": "Sound to be played at countdown start.",
    "FortBurstEffectData:BurstSounds": "Sound to be played on GC execution. Should never be looping effects!",
    "FortAthenaMutator_GameModeBase:Stinger_MatchEnd": "Sound to be played when post game flow begins; eg victory royal. If there is not a win/lose stinger present.",
    "FortCountdownSounds:Sound": "Sound to play",
    "FortClientAnnouncementData_Basic:OnStartSound": "Sound to play by the UI when the announcement is displayed",
    "FortCurieFXSettings:ElectricityAmbientSound": "Sound to play for ambient electricity",
    "FortCurieFXSettings:FireAmbientSound": "Sound to play for ambient fire",
    "FortCurieFXSettings:ElectricityArcSound": "Sound to play for electric arcs",
    "BuildingWall:DoorClosingSound": "Sound to play for the door closing",
    "BuildingWall:DoorOpeningSound": "Sound to play for the door opening",
    "FortMutatorMusicEvent:Sound": "Sound to play for the event.",
    "BuildingWall:DoorSlammedOpenSound": "Sound to play for the slamming door opening",
    "BuildingContainer:OnDamageSoundCue": "Sound to play if the container is damaged",
    "BuildingContainer:OnDeathSoundCue": "Sound to play if the container is destroyed",
    "BuildingContainer:LootRepeatSoundCue": "Sound to play if the item cannot be looted or has already been looted",
    "BuildingSMActor:DeathSound": "Sound to play when destroyed normally",
    "FortPlayerPawn:UnableToPerformActionSound": "Sound to play when player is unable to perform an action",
    "FortPlayerController:StartUpgradeSound": "Sound to play when user starts an upgrade",
    "FortSplineAudioActor:ClosestPointSound": "Sound vars",
    "FortGameplayCueNotify_Loop:LoopingSounds": "SoundCue to be played for the entire duration of the gameplaycue. This should be looping!",
    "FortGameplayCueAudioInfo:SoundLibraryContextClass": "SoundLibrary context to use on GC owner, if None a global SimpleSoundLibraryContext will be used",
    "FortGameplayCueAudioInfo:SoundLibraryTag": "SoundLibrary tag to execute on GC owner",
    "FortInteriorAudioComponent_Ambient:InteriorSoundMix": "SoundMix to use when fully indoors",
    "FortInteriorAudioComponent_Ambient:PartialInteriorSoundMix": "SoundMix to use when partially indoors",
    "FortInteriorAudioComponent_Ambient:PartialExteriorSoundMix": "SoundMix to use when partially outdoors",
    "BulletWhipTrackerData:PassByFarSound": "Sounds to play",
    "FortMutatorMusicEvent": "Sounds to play on various generic game events that happen during the course of a match",
    "AthenaMatchXpMultiplierGroup:Source": "Source",
    "VkGenerateTestcodeRequest:SourceControlBase": "Source Control information for the project state represented by this build code.\nIdeally we should prompt them to (optionally) commit before generating a build code and this would be\nthe RCS hash of the state (or blank if it's not relevant, either they are using working copy or no RCS)\n\nThis should also include the source control type e.g. `git:{gitcommithash}` `skein:{someskeinhashorlink}`",
    "CollisionResponseBaseData:HitSourceTag": "Source Hit Tag to apply modifications to",
    "BuildingActorClassData:AttributeInitLevelSource": "Source to use for attribute initialization. Only used if AbilitySystemCreationPolicy is not Never.",
    "FortControllerComponent_VictoryCrowns:SourceTagsForRoyalRoyale": "SourceTags to be added when triggering Royal Royale quest",
    "SparksMusicPlayspace": "Sparks implementation of the FortPlayspace that will contain all the game logic for the mode.",
    "SpatialMetricProperties": "Spatial metric properties class\n\nThis class includes the following common properties to identify a spatial metric.",
    "SpatialMetricSample": "Spatial metric sample class\n\nThis class defines a spatial metric sample and includes:\n\n1. The metric properties.\n2. The list of the spatial values collected in the sample.\n3. Spatial information about the sample collection.",
    "SpatialValue": "Spatial value class\n\nThis class represents an arbitrary integral value associated to a 3D space location.\nThe space location is discretized to integral precision.",
    "EncounterMobManagerComponent:DefaultMobSpawnInfo": "Spawn Info that will be used by all Mobs",
    "BuildingWeakSpotData:Normal": "Spawn Normal",
    "FortVariantSpawnPoints:BudgetPoints": "Spawn Point value (budget) consumed by any pawn variant that points to this entry.",
    "BuildingWeakSpotData:Position": "Spawn Position",
    "FortCharacterVehicle:SpawnPropOnEmoteScalar": "Spawn Prop On Emote Scalar - scale factor to scale spawned emote props by - 0 will disable",
    "ESpawnResult": "Spawn Result enum. Tells us what happened",
    "BuildingContainer:SpawnSourceOverride": "Spawn Source for this container to pass onto pick up items it spawns,\nNOTE: Overrides hard coded sources.",
    "FortPawn:SpawnSourceOverride": "Spawn Source for this pawn to pass onto pick up items it spawns,\nNOTE: Overrides hard coded sources.",
    "ESpecialEventTODMModifyType.Spawn": "Spawn a new TODM and provide it to the GameState.  Hide the GameState's old TODM.",
    "BuildingItemCollectorActor:bSpawnAmmoOnlyWhenCarryingWeapon": "Spawn ammo instead of weapon when the weapon is already in the player's inventory.",
    "EFortMinigamePlayerSpawnLocationSetting.Air": "Spawn at island spawns in the air",
    "EFortMinigamePlayerSpawnLocationSetting.SpawnPads": "Spawn at player placed spawn pads",
    "EFortMinigamePlayerSpawnLocationSetting.Preplaced": "Spawn at preplaced spawn points in the level",
    "EFortMinigamePlayerSpawnLocationSetting.CurrentLocation": "Spawn at the player's current location",
    "EFortMinigamePlayerSpawnLocationSetting.Device": "Spawn based on device overrides",
    "FortGameplayEffectDeliveryActor:SpawnContext": "Spawn context of the DeliveryActor",
    "BagelDifficultySettings:SpawnCountDifficultyMultiplier": "Spawn count multiplier based on selected difficulty",
    "MashDifficultySettings:SpawnCountDifficultyMultiplier": "Spawn count multiplier based on selected difficulty",
    "BagelDifficultySettings:SpawnCountPlayerCountMultiplier": "Spawn count multiplier to apply based on number of players",
    "MashDifficultySettings:SpawnCountPlayerCountMultiplier": "Spawn count multiplier to apply based on number of players",
    "BuildingProp_DeimosSpawner:SpawnGroupOptions": "Spawn group options array. These soft object pointers will be loaded when the minigame starts",
    "FortWeaponFxComponent_Beam:bSpawnImpactFXAtInterpedBeamEndpoints": "Spawn impact fx as the beam endpoint moves between hit locations",
    "ERealEstateOffsetType.Center": "Spawn in the Center",
    "MMRSpawningDataTableInfo:SpawingItemIndex": "Spawn index to use in BotSpawningDataItems of the mutator",
    "WaterFXData:SpawnLocationOffset": "Spawn offset from the socket or object center position",
    "BuildingProp_DeimosSpawner:PawnNumberCapOptions": "Spawn point options array. These soft object pointers will be loaded when the minigame starts",
    "EPlaysetOffsetType.Center": "Spawn the playset at the center of the bounding box",
    "EPlaysetOffsetType.CustomOffsetFromCorner": "Spawn the playset in the upper right corner of the bounding box",
    "FortSplineAudioActor:AudioSpline": "Spawned Components",
    "FortGameplayCueSpawnResult:CameraLensEffect": "Spawned camera lens, may be null",
    "FortGameplayCueSpawnResult:CameraShake": "Spawned camera shake, may be null",
    "FortGameplayCueSpawnResult:DecalActor": "Spawned decal actor, may be null",
    "FortDecoHelper:DecoPreview": "Spawned preview actor",
    "FortAthenaMutator_Traverse:TraversePoints": "Spawned traverse actors",
    "FortNevadaVehicle:SpawnedTractorBeamVictimVehicle": "Spawned vehicle for the tractor beam victim",
    "FortPlayerPawn:SpawnParticles": "Spawning effects",
    "ESupplyDropSpawnType.MutatorManaged": "Spawning is controlled entirely by mutators",
    "FortPlayerPawn:SpawnSound": "Spawning sound",
    "RockVehicleAbility_GroundTrails:GroundTrailSockets": "Spawns FXComponents at these sockets on the RootComponent for ground trails to play on",
    "FortSpecialRelevancyActorSpawner": "Spawns an actor per special relevancy group (See SpecialRelevancyNode.h for more details on special relevancy groups)\nRequires an AFortAthenaMutator_SpecialRelevancy to be active and for the special relevancy mode to be set to something other than ESpecialRelevancyMode::NormalRelevancy\nNote: This spawner ignores the value of AFortSpawnerActor::SpawnerAuthority as spawning per relevancy group must always be done on the server",
    "EEQSActorSpawnerTriggerType.SafeZoneState": "Spawns occur during the specified safe zone phase and index",
    "FabricMetaSoundSpeakerPatchWrapperEqBandsBinding": "Speaker",
    "SurvivalObjectiveIconData:SpecialActorID": "Special Actor ID",
    "BuildingFoundationMayday": "Special Building Foundation used in the Mayday level.\nIt manages loading the StrangeLand sub-level if based on if StrangeLands is enabled and/or forced on.",
    "EDeathCause.Cube": "Special Deaths",
    "EFrontEndCamera.SpecialEventRewards": "Special Event Rewards Screen Camera",
    "EFortBangType.SpecialEventTab": "Special Events Tabs",
    "FortCharacterVehicle:SpecialVehicleEmotes": "Special Vehicle Emotes - emotes to add to emote wheel picker when this vehicle is in use",
    "FortAthenaJackalVehicle:BoostingAnimClass": "Special animation blueprint used when character is boosting in the hoverboard",
    "FortAthenaVehicle:DrivingAnimClass": "Special animation blueprint used when character is driving a vehicle",
    "FortCharacterVehicle:DriverAnimClass": "Special animation blueprint used when character is driving this vehicle",
    "FortCharacterVehicle:PassengerAnimClass": "Special animation blueprint used when character is passenger in this vehicle",
    "EBinaryToggleValues.BTV_Either": "Special case that matches against either active or inactive",
    "FortCurieWorldNiagaraComponent": "Special child class of Niagara component to support the concept of \"world\" FX systems owned/maintained by an individual player and which\nshould only render for that player, even in splitscreen",
    "FortPlayerControllerZone:DeathInputComponent": "Special input component for death",
    "FortPlayerController:EditModeInputComponent": "Special input component for edit mode",
    "FortPlayerController:PickerInputComponent": "Special input component for picker",
    "FortPlayerControllerZone:RemoteControlledPawnInputComponent": "Special input component while controlling the remote control pawn",
    "EFortItemType.EventPurchaseTracker": "Special item used to track event-based purchases",
    "EFortWorldMarkerType.SpecialLocal": "Special items are created by gameplay code, and live as long as gameplay says they live.",
    "BuildingGameplayActor:DeliverableAbilityInfo": "Special persistent ability set & proximity-based effects that can be activated/deactivated",
    "CatalogGiftInfo:PurchaseRequirements": "Special requirements for GIVING this gift (normal offer requirements are enforced on RECEIVERS)",
    "CatalogGiftInfoEditor:PurchaseRequirements": "Special requirements for GIVING this gift (normal offer requirements are enforced on RECEIVERS)",
    "FortDeployableBasePickup": "Special subclass of pickup explicitly used with deployable base neighborhoods to ensure fixed economy",
    "FortCurieFXSettings:PlayerWorldFireSystem": "Special system handling most things on fire in the world within one system",
    "EFortTextureDataType.Corner": "Special textures for corner pieces",
    "EFortItemType.Profile": "Special type, never instantiated. Refers to the profile as a whole",
    "BuildingRift:QueryMinDistance": "Special value that will be set in the EQS query as a parameter named \"MinDistance\"",
    "FortAISpawnerUtilityComponent:QueryMinDistance": "Special value that will be set in the EQS query as a parameter named \"MinDistance\"",
    "BuildingRift:QueryRadius": "Special value that will be set in the EQS query as a parameter named \"Radius\"",
    "FortAISpawnerUtilityComponent:QueryRadius": "Special value that will be set in the EQS query as a parameter named \"Radius\"",
    "EFortPlaylistType": "Special version of ensure for tracking anti cheat false positives\nThis will trigger in dev AND test builds (commonly used by QA)\nbut will not exists in final shipping binaries",
    "EFortItemType.SpecialItem": "Special weird item type that isn't saved directly",
    "FortAthenaMutator_GalileoEquipment": "Specialization of AFortAthenaMutator_OverrideInventoryOnce which allows storing a particular choice of which loadout you get\nAs well as whether you're unable to drop inventory items.",
    "FortHeroLoadoutPedestal": "Specialized item preview pedestal for the hero loadout screen in the frontend.\nSpecifically shows the hero currently slotted or previewed to be slotted in the specified slot of the specified loadout.\nThe slot name is configured at design time, the loadout is set dynamically during gameplay.",
    "ProximityBasedGEDeliveryInfo": "Specialized struct for delivering gameplay effects applied due to proximity/touching",
    "ProximityBasedGEDeliveryInfoHard": "Specialized struct for delivering gameplay effects applied due to proximity/touching",
    "FortMissionEntry:MissionInfo": "Specific Mission to generate",
    "FortKeepResourceGroup:FullPath": "Specific item to drop",
    "FortLootPackageData:ItemDefinition": "Specific item to drop",
    "LootPackageRow:ItemDefinition": "Specific item to drop (Template ID)",
    "ApplyChromeComponent:NativePredefinedMeshComponents": "Specific mesh components that need to be chromed. (If this is empty, all mesh components are chromed)",
    "UefnPlaytimeBonusGoalData:ObjectiveToComplete": "Specific objective to complete. If left blank, the first objective will be completed",
    "PlayerFishingTelemetryData:FishPropertyLength": "Specific property of the fish for analtyics",
    "MatchmakingParams:SessionId": "Specific session to join",
    "FortVolumeTimeOfDayComponent:TimeOverride": "Specific time of day based on 24hr time.",
    "FortTimeOfDayManager:SpecificTimeOfDayEditingString": "Specific time to use for viewing if \"Use Specific Time Of Day In Editor\" is checked.  Otherwise does nothing.  Examples of valid formatting: 1:15pm, 1315, 13:15, 115p, 1p15, 13, 1p, 12a, 03:00, 3:00, 0300.  All formats will be converted to military time with a ':'.  Used exclusively for view purposes in editor (and PIE and Simulate).  Not in-game.",
    "TimeOfDayEditorViewSettings:SpecificTimeOfDayEditingString": "Specific time to use for viewing if \"Use Specific Time Of Day In Editor\" is checked.  Otherwise does nothing.  Examples of valid formatting: 1:15pm, 1315, 13:15, 115p, 1p15, 13, 1p, 12a, 03:00, 3:00, 0300.  All formats will be converted to military time with a ':'.  Used exclusively for view purposes in editor (and PIE and Simulate).  Not in-game.",
    "FortLootPackageData:Annotation": "Specifies an annotation, which triggers an analytics event",
    "FortLootTierData:Annotation": "Specifies an annotation, which triggers an analytics event",
    "LootPackageRow:Annotation": "Specifies an annotation, which triggers an analytics event",
    "LootTierDataRow:Annotation": "Specifies an annotation, which triggers an analytics event",
    "DaySequenceEditorSettings:TrackSettings": "Specifies class properties for which movie scene tracks will be created automatically.",
    "DaySequenceProjectSettings:DefaultClockSource": "Specifies default clock source for newly created Day sequences. Examples: 0: Tick, 1: Platform, 2: Audio, 3: RelativeTimecode, 4: Timecode, 5: Custom",
    "DaySequenceProjectSettings:DefaultDisplayRate": "Specifies default display frame rate for newly created Day sequences; also defines frame locked frame rate where sequences are set to be frame locked. Examples: 30 fps, 120/1 (120 fps), 30000/1001 (29.97), 0.01s (10ms).",
    "DaySequenceProjectSettings:DefaultTickResolution": "Specifies default tick resolution for newly created Day sequences. Examples: 30 fps, 120/1 (120 fps), 30000/1001 (29.97), 0.01s (10ms).",
    "EValkyrieReadOnlyAssetsPermission": "Specifies how cooked assets are openable in a read-only asset editor mode (if the asset type supports it)",
    "EFortAIDirectorFactorContribution": "Specifies how the data for an AI Director Event contributes to an AI Director Factor",
    "BeginGroupTeleportParams:HealthAndShieldResetType": "Specifies how we want to reset health and/or shield for alive players on teleport",
    "SpecialEventTODMSubphaseData:ModifyType": "Specifies how we're going to modify the TODM",
    "FortCreativeRoundSettings:bEnableOnMinigameStart": "Specifies if this round settings device is active or not. Inactive round settings devices are ignored when setting up round rules",
    "FortCreativeRoundSettings:Active": "Specifies if this round settings device is active or not. Inactive round settings devices are ignores when setting up round rules. 0 == False, 1 == True.",
    "DeployableBasePlot:DelayBetweenActorRecordBuilding": "Specifies the amount of time to wait between calling BuildActorsFromRecord",
    "DeployableBasePlot:DelayBetweenActorRecordDestroying": "Specifies the amount of time to wait between calling DestroyActorsInPlot",
    "QuestItemDefinitionDesignerData:Category": "Specifies the category for this quest",
    "PickedTurnTransitionData:Condition": "Specifies the condition that where this applies(Moving, Inplace, Start).  This is used to determine the focal point that should be used",
    "DeployableBasePlot:MaxActorsToCreatePerBuildingCall": "Specifies the max # of actors that build during each call to BuildActorsFromRecord",
    "DeployableBasePlot:MaxActorsToDestroyPerDestroyCall": "Specifies the max # of actors that destroy during each call to DestroyActorsInPlot",
    "FortCalendarEventInventoryTransformData:ItemsToGrantByTemplateString": "Specifies the optional items to grant by templateId (\"<templateId=quantity>;<templateId=quantity>;...\")",
    "FortCalendarEventInventoryTransformData:ItemsToRemoveAfterEventByTemplateString": "Specifies the optional items to remove by templateId (\"<templateId=quantity>;<templateId=quantity>;...\")",
    "FortCalendarEventInventoryTransformData:PrerequisiteObjectiveString": "Specifies the optional objective that is required, otherwise whole quest must be completed (\"<data table asset path:row name>\")",
    "EEQSActorSpawnerStopSpawningReason": "Specifies the reason why a spawner has stopped spawning actors.",
    "FortRequirementsInfo:ItemDefinition": "Specifies the specific Item that is required",
    "FortRequirementsInfo:ObjectiveStatHandle": "Specifies the specific Objective that is required to be completed in the CompletedQuestDefinition.  If none is specified, the entire quest must be complete.",
    "FortLinkedQuest:ObjectiveStatHandle": "Specifies the specific Objective that needs to be active, if empty checks the quest as a whole",
    "EEQSActorSpawnerSpawnType": "Specifies the type of actor the spawner data should look to spawn.\n    This enum helps implement different spawn logic for different types of objects to spawn.",
    "ESceneQueryShape": "Specifies the type of collision shape to build when doing scene query's.\nThe shape specified should match the shape of your overlap component for best results.",
    "ESpatialSceneQueryShape": "Specifies the type of collision shape to build when doing scene query's.\nThe shape specified should match the shape of your overlap component for best results.",
    "FortAIPawnLootDropData": "Specifies what loot is dropped when an AI pawn dies.",
    "FortCreativeRoundSettings:RoundIndex": "Specifies what round this round settings device is for. If set to INDEX_NONE, then this round settings device is for all rounds.",
    "FortMinigameSettingsBuilding:JoinInProgress": "Specifies what to do when a player joins while a game is in progress. Set to SPAWN if you want players to join in progress.",
    "ECraftingUpgradeDataFlags": "Specifies what transient data to copy from our source \"upgraded\" item to our result item",
    "SpecialEventInputHelperActionBindData": "Specifies what type of binding to perform for a specific input action's press/release",
    "FortSoundLibraryPlaybackSettings:LocationType": "Specifies whether Location is a relative offset or an absolute world position",
    "DaySequenceEditorSettings:bAutoBindToPIE": "Specifies whether to automatically bind an active sequencer UI to PIE worlds.",
    "DaySequenceEditorSettings:bAutoBindToSimulate": "Specifies whether to automatically bind an active sequencer UI to simulate worlds.",
    "UserOptionDefinitionStringMetaData:AllowedCharacters": "Specifies which characters are allowed in the value. If empty, any character is allowed.\n\nIt can contain single characters and also ranges of characters. They all go one after another with no special separators between them.\nCharacters - and \\ must be escaped like this: \\- and \\\\\n\nExamples:\n      \"aT._\" <-- Letters 'a' and 'T', dot and underscore.\n      \"a-zT._\" <-- Any lowercase letter, letter 'T', dot and underscore.\n      \"a-zA-Z0-9._\" <-- Any lowercase and uppercase letter, any digit, dot and underscore.\n      \"a-zA-Z0-9\\-\\\\._\" <-- Any lowercase and uppercase letter, any digit, minus sign, backslash, dot and underscore.",
    "CreativeVideoPlayerFullscreenOptions:GameplayEffects": "Specifies which combination of Gameplay Effects to apply to the Player going into Fullscreen",
    "FortLootTierData:StreakBreakerCurrency": "Specifies which streak breaker currency is used for this tier row",
    "LootTierDataRow:StreakBreakerCurrency": "Specifies which streak breaker currency is used for this tier row",
    "EGateType.GameplayAbility": "Specify a FortGameplayAbility_ObjectiveGate to use to control this event",
    "WaxRespawnLogicData:OnlyCountLeadersAboveWaxState": "Specify a minimum wax state leaders we're placing you away from should be. 0 is none, 4 is max.\n0 will always factor in all leaders, 4 will only factor in people who have reached max tier.",
    "FortDeveloperSettings:ForceActiveEvents": "Specify a set of seasonal/weekly events to pretend to be active",
    "FortLinkToActorComponent:DirectionTraceStartOffset": "Specify a value other than ZeroVector to offset the start location for the trace when performing a linking check",
    "IndicatedActorData:StateImageOverride": "Specify an image to use.  Use None to automatically determine the image.",
    "FortAthenaMutator_GliderOverride:GliderOverride": "Specify an override for the player's gliders.",
    "FortGameplayCueNotifyLoop_PhysicsObjectRolling:WaterFX": "Specify any looping water fx. Can support one or one per specified pontoon socket. Sockets must be on static mesh as well",
    "FortAthenaLivingWorldEvent:bOnlyInNextSafeZone": "Specify if the event can only spawn inside the next safe zone",
    "FortAthenaLivingWorldEvent:bOnlyInNextSafeZoneIfStormShrinking": "Specify if the event can only spawn inside the next safe zone when the storm is shrinking. Usually used with OnlyInSafeZone.",
    "FortAthenaLivingWorldEvent:bOnlyInSafeZone": "Specify if the event can only spawn inside the safe zone",
    "FortAthenaLivingWorldActorSpawnDescription:SpawnerData": "Specify the Actor to spawn with a SpawnerData",
    "FortAthenaLivingWorldActorSpawnDescription:SpawnerDataTagQuery": "Specify the Actor to spawn with a tag referencing a SpawnerData. SpawnerData descriptor tag must match this Tag query.",
    "FortAthenaLivingWorldActorSpawnDescription:ActorClass": "Specify the Actor to spawn with its class",
    "FortAthenaMutator_GG:UseInfiniteAmmo": "Specify the row name in Table to evaluate for InfiniteAmmo (1.0 is true, anything else is false)\nNeeds to have an entry for each kill count.",
    "ObjectiveEntry_Gate:GateType": "Specify the type of gate you want to use for this component, single event, GA, or movement mode",
    "EFortPartyMemberLocation.Spectating": "Spectating a game",
    "EUIExtensionSlot.SpectatorRightOfPlayerStatus": "Spectator player status info",
    "FortSubmixAnalyzerData:SpectrumData": "Spectral Analysis settings",
    "FortSubmixAnalyzerData:VectorParameters": "Spectrum parameters to map analysis data to (will be packed into Vector4's)",
    "FortSpeechBubbleInfo": "SpeechBubble replicated Info",
    "TurnTransitionData:SpeedConstraintRange": "Speed Constraint Range to meet if bEnableSpeedConstraint is true",
    "CaptureComponent:DeneutralizingSpeed": "Speed at which CaptureTimeCurrent will decrease while CaptureState == ECaptureState::Decapturing",
    "CaptureComponent:NeutralizingTime": "Speed at which CaptureTimeCurrent will decrease while CaptureState == ECaptureState::Decapturing",
    "FortWeaponComponent_RecoilCurve:InterpSpeed": "Speed at which current alpha lerps to the target alpha.",
    "FortOctopusVehicle:ShellRotationInterpSpeed": "Speed at which to interpolate ShellRotation between async physics updates",
    "FortAnimInput_Zipline:LeanYawSmoothingSpeed": "Speed at which to interpolate lean yaw. Set to 0 or less to disable smoothing",
    "FortCharacterMovementMutatorComponent:BuffetBubblesIntroSpeed": "Speed at which to travel toward the target location",
    "FortPhysicsVehicleDamageOverrideConfigs:SpeedForMaximumDamage": "Speed at which we apply MaxDamageOverride",
    "FortPhysicsVehicleDamageOverrideConfigs:MinimumSpeed": "Speed at which we apply MinDamageOverride",
    "SphericalDriveParams:MaxAutoBrakeSpeedKmh": "Speed below which auto braking drag is applied.",
    "FlightParams:TopSpeedKmh": "Speed beyond which no forward thrust is applied",
    "VortexParams:GravityFloorTerminalVelocity": "Speed cap when within the bounds of the gravity floor or volume edges",
    "WaterControlParams:AngledSpeedMultiplier": "Speed multiplier when moving off angle (velocity and acceleration divergent)",
    "ExitCraftInfo:MinLandingSpeed": "Speed of the falling exit craft at which we will consider it \"landed\"",
    "FortLightweightProjectileConfig:Speed": "Speed of the projectile (in cm/s) to apply.",
    "FortTimeOfDayManager:DefaultTimeOfDaySpeed": "Speed of time passing in-game.  Scaling real seconds.  60 means one minute of real time yields one hour of game time.",
    "TimeOfDayOverride:TimeOfDaySpeed": "Speed of time passing in-game.  Scaling real seconds.  60 means one minute of real time yields one hour of game time.",
    "FortAthenaMutator_Wax:VelocityConsideredMovingForUI": "Speed over which the UI considers a player moving.",
    "FortWeaponRanged:CrouchWalkSpeedThreshold": "Speed threshold used to determine if FireFromCrouchWalkAnimation should be played.",
    "SpecialEventCursorMode:ZoomOutInterpSpeed": "Speed to decrease our zoom percent when zooming out, using FMath::FInterpConstantTo()",
    "SpecialEventCursorMode:ZoomInInterpSpeed": "Speed to increase our zoom percent when zooming in, using FMath::FInterpConstantTo()",
    "FortPicklePortal:OpenInterpSpeed": "Speed to interpolate between the current open amount and new open amount",
    "FortMotorSimPatternState:RpmFallRate": "Speed to take RPM back to 0 when off throttle",
    "BuildingRift:LootDropSpeed": "Speed to toss the loot",
    "FortAIPawn:LootDropSpeed": "Speed to toss the loot",
    "FortCreativeLinearMoverComponent:Speed": "Speed to translate with.",
    "FortPhysicsVehicleDamageOverrideConfigs:SpeedForMinimumDamage": "Speed under which we disable this damage override",
    "CaptureComponent:CaptureSpeedBoost": "Speed used to update CurrentCaptureSpeed depending on number of players",
    "CaptureComponent:CaptureSpeedBoostEmoting": "Speed used to update CurrentCaptureSpeed depending on number of players dancing on the point",
    "FortCollisionResponseSwapperComponent:OverlapPrimitiveComponent": "Sphere component to check for overlaps",
    "MilkshakeFieldSystemActor:RadialFallOffComponent": "Sphere scalar field used to handle the radial fall off of the field.",
    "FortSpicySakeGameplayCueNotifyLoop_Alive:LandFX_Native": "Spicy Sake land fx component",
    "FortSpicySakeGameplayCueNotifyLoop_Alive:FortLayerAudio_Native": "Spicy Sake sound fx component",
    "FortSpicySakeGameplayCueNotifyLoop_Alive:WaterFX_Native": "Spicy Sake water fx component",
    "FortOrientationWarpingSettings:SpineBones": "Spine bones countering the rotation of the body, so character keeps aiming straight ahead.",
    "FortSplineWaterAudioComponent:SplineFacingDirection": "Spline Configuration",
    "FortEvenlySizedSegment:SplineMeshComponent": "Spline mesh component of this section of the spline.",
    "FabricInteractionTool:SplineEndForwardMultiplier": "Spline points",
    "FortProjectileTrajectory:SplineComponent": "Spline that this trajectory is used to display",
    "FortAICloudVortex:SplinePointsA": "SplinePointsA/B, SplineTangentsA/B, and TimeRandomArray work together to determine how the SplineMeshesBody elements move. ie SplineMeshesBody[0] will sway between SplinePointsA[0] and SplinePointsB[0].",
    "FortAICloudVortex:SplinePointsB": "SplinePointsA/B, SplineTangentsA/B, and TimeRandomArray work together to determine how the SplineMeshesBody elements move. ie SplineMeshesBody[0] will sway between SplinePointsA[0] and SplinePointsB[0].",
    "FortAICloudVortex:SplineTangentsA": "SplinePointsA/B, SplineTangentsA/B, and TimeRandomArray work together to determine how the SplineMeshesBody elements move. ie SplineMeshesBody[0] will sway between SplinePointsA[0] and SplinePointsB[0].",
    "FortAICloudVortex:SplineTangentsB": "SplinePointsA/B, SplineTangentsA/B, and TimeRandomArray work together to determine how the SplineMeshesBody elements move. ie SplineMeshesBody[0] will sway between SplinePointsA[0] and SplinePointsB[0].",
    "FortAICloudVortex:TimeRandomArray": "SplinePointsA/B, SplineTangentsA/B, and TimeRandomArray work together to determine how the SplineMeshesBody elements move. ie SplineMeshesBody[0] will sway between SplinePointsA[0] and SplinePointsB[0].",
    "FortAthenaMutator_Mash:RouteSplineComponents": "Splines used to guide the path of the safe zone during move phases.",
    "SeatStatusType.Spotter": "Spotter seat is a passenger seat WITHOUT a gun mount",
    "SwitchSeatType.ToSpotter": "Spotter seat is a passenger seat WITHOUT a gun mount",
    "FortRangedWeaponStats:AthenaCrouchingSpreadMultiplier": "Spread multiplier while crouching in athena",
    "FortRangedWeaponStats:SpreadDownsights": "Spread multiplier while down-sights",
    "FortRangedWeaponStats:AthenaJumpingFallingSpreadMultiplier": "Spread multiplier while jumping/falling in athena",
    "FortRangedWeaponStats:AthenaSlidingSpreadMultiplier": "Spread multiplier while sliding in athena",
    "FortRangedWeaponStats:AthenaSprintingSpreadMultiplier": "Spread multiplier while sprinting in athena",
    "FortRangedWeaponStats:MaxSpeedForSpreadMultiplier": "Spread multiplier while sprinting in athena",
    "FortRangedWeaponStats:MinSpeedForSpreadMultiplier": "Spread multiplier while sprinting in athena",
    "FortRangedWeaponStats:StandingStillSpreadMultiplier": "Spread multiplier while standing still",
    "FortRangedWeaponStats:OverrideBaseSpread": "Spread used to override the base spread of the weapon under specific conditions triggered from blueprint.\nIf the value is negative, it's invalid and cannot be triggered.\nExample: When a weapon's heat value enters a specific range, setting its override to this value.",
    "FortRangedWeaponStats:OverrideSpreadDownsights": "Spread used to override the spread downsights multiplier of the weapon under specific conditions triggered from blueprint.\nIf the value is negative, it's invalid and cannot be triggered.\nExample: When a weapon's heat value enters a specific range, setting its override to this value.",
    "TowhookParams:SpringDamping": "Spring damping constant",
    "TowhookParams:SpringStiffness": "Spring stiffness constant for the rope",
    "WaterSprintBoostParams:TriggerAboveDepth": "Sprint boost: after reaching RequiredDepth, must be above this depth to get boost. If this is larger than RequiredDepth, it will probably happen right away; if less, it will wait for you to come up.",
    "WaterSprintBoostParams:Duration": "Sprint boost: duration of boost",
    "WaterSprintBoostParams:PreventAtVelocity": "Sprint boost: if pending but velocity drops too much, cancel.",
    "WaterSprintBoostParams:MaxSpeed": "Sprint boost: max speed during boost",
    "WaterSprintBoostParams:RequiredDepth": "Sprint boost: must get this deep to be able to enable sprint boost",
    "WaterSprintBoostParams:TriggerAtVelocity": "Sprint boost: required velocity at trigger depth to trigger boost.",
    "FortPawnStats:SpeedSprint": "Sprinting speed for the pawn",
    "FortExhibitActor:SpriteComponent": "Sprite component that shows where the spawned exhibit will be placed",
    "EFortItemType.SpyTechPerk": "Spytech perks used in Spy LTM",
    "FortPawnComponent_SpeechBubble:SpeechBubbleMaxDrawDistanceSqr": "Sqr max distance to draw the SpeechBubble on the client",
    "BotDebugInfo:SquadID": "Squad ID",
    "FortAthenaVehicle:SquadID": "Squad ID of the vehicle. Used to represent squad ownership.",
    "FortMcpQuestObjectiveInfo:LinkSquadID": "Squad ID to link to",
    "FortMcpQuestObjectiveInfo:LinkSquadIndex": "Squad index to link to",
    "FortPlayerStateAthena:InitialSquadSize": "Squad size at the beginning of a match",
    "HomebaseNodeLevel:UnlockedSquadSlots": "Squad slots to be granted for unlocking this node level.",
    "FortSquadStart": "Squad start used for when teleporting players off the starter island into the BR map.",
    "SkyfireSquadDataEntry:PlayspaceTeleportSquadPoint": "Squad teleport point that is used as a location to teleport the players into the playspace from the prison cells and to \"restart\" the players if\nthey are knocked out of the playspace (Players first go to the prison for X time, then get teleported back into the playspace at this location).",
    "SkyfireSquadDataEntry:PrisonTeleportSquadPoint": "Squad teleport point that is used as the location in the prison to teleport players to after getting knocked out of the playspace",
    "FortPartyMemberRepData:FrontEndMapMarker": "Squad visible map markers in the frontend *",
    "FortAthenaLeashComponent:LeashRadiusSqr": "Square Radius of the leash",
    "FortNavModifierComponent:LowSpeedSquareDistanceThreshold": "Squared Distance (cm) it takes to intermittently mark navigation data when under LowSpeedThreshold. Default is 50 cm.",
    "FortNavModifierComponent:LowSpeedSquareThreshold": "Squared Low Speed under which to stamp intermittently navigation data in cm/s (Default is 7.0 cm/s ~ 0.25 km/h)",
    "ButterCakeUnstuckComponent:DistanceMinToUnstuckSqr": "Squared Minimum Distance",
    "AthenaDynamicRestedXpProgression:StWDynamicRestMult": "StW rest XP multiplier",
    "PlayspaceComponent_CreativeLoadingStateProxy:LockedLoadingStates": "Stack array tracking the currently pushed locked loading states.",
    "FortPawn:DecisionWindowStack": "Stack of active ability decision windows",
    "SpecialEventCursorPawnComponent:CursorStack": "Stack of cursor modes pushed with PushCursor().  The top-most (highest index) is the current cursor.",
    "FortObjectiveFilter_SetMarker:RequiredStackSize": "Stack size of the item marked",
    "EFortAthenaTutorialSubstep.HealingInterrupted": "Standalone",
    "EFortVolumeType.Island": "Standard value for playspaces.",
    "EFortFrontendInventoryFilter.StarlightInventory": "Starlight-specific Filter Categories",
    "SafeZoneOrderOptimizeMutatorRouteDefinition:StartLocation": "Start SafeZone location of the route",
    "FortCreativeDynamicXpComponent:SeasonStartTimestamp": "Start Season used to calculate Current Day",
    "EFortUIFeature.PlaceholderUIFeature1": "Start Temp UI Feature States to unblock development while finding better generic solutions for ui feature states.",
    "EFortAthenaPlayContextualAnimExecutionMethod.StartInteraction": "Start a new interaction",
    "FortPOIInjector:bStartPOIsDiscovered": "Start all POIs discovered",
    "EMatchmakingStartLocation.CreateNew": "Start by creating a new game",
    "FortLimitedAvailabilityBotCosmeticItemDataTableRow:StartDate": "Start date to make this item available",
    "FortLimitedAvailabilityBotCosmeticItemSetDataTableRow:StartDate": "Start date to make this set available",
    "EAthenaPIEStartupMode.Aircraft": "Start in the aircraft phase",
    "EAthenaPIEStartupMode.AircraftPaused": "Start in the aircraft phase, but paused (you can use the cheat UNPAUSEAIRCRAFT to resume)",
    "EAthenaPIEStartupMode.Gameplay": "Start in the gameplay phase",
    "EAthenaPIEStartupMode.Warmup": "Start in the warmup phase (bus depot) - this is the default mode for the actual game",
    "EAthenaPIEStartupMode.WarmupPaused": "Start in the warmup phase (bus depot), but paused (you can use the cheat UNPAUSEWARMUP to resume)",
    "ItemCategoryOptionData:TemplatePrefix": "Start of a template name that describes items in this option",
    "FortVehicleAimingWeaponComp:InitialCameraInterpSpeed": "Start of implementation for turret/vehicle gun",
    "FortVehicleSeatWeaponComponent:MuzzleSocketNames": "Start of implementation for turret/vehicle gun",
    "VkProfileBuildResult_Duration:Start": "Start of sampling",
    "EDayNightCycleMode.RandomStartTime": "Start the day/night cycle at a random time, and allow it to continue from there",
    "BuildingSMActor:CurBuildingAnimStartTime": "Start time of the currently playing building animation, if necessary for parameter calculations",
    "FortAthenaMutator_AddBarrier:bStartTimerAtSafeZone": "Start timer at Safe Zone. If false timer starts at spawn.",
    "EMatchmakingStartLocation.Lobby": "Start with a lobby search",
    "EMatchmakingStartLocation.Game": "Start with an existing game search",
    "EFortRpcCategory.RecordingCommands": "Start/Stop recording videos, stats, etc",
    "EFortMissionStatus.InProgress": "Started but not completed",
    "EFortObjectiveStatus.InProgress": "Started but not completed",
    "ESpawnMachineState.Complete": "Started resurrection",
    "BuildingItemCollectorActor:StartingGoalLevelOverride": "Starting Goal Level Override",
    "FortAthenaMutator_AddBarrier:WallZLevel": "Starting Z Level of barrier wall",
    "FortAthenaMutator_Heist:ExitCraftStartingAngle": "Starting angle for the exit crafts",
    "FortAthenaMutator_Heist:SupplyDropStartingAngle": "Starting angle for the supply drops",
    "FortAthenaMutator_AddBarrier:WallGravity": "Starting gravity of barrier wall.",
    "FortMinigameStatsComponent:ScoreboardStats": "Starting list of scoreboard stats. Initializes the ScoreboardStatObjects array",
    "FortMinigameStatsComponent:TrackedStats": "Starting list of stats the minigame should track. Initializes the TrackedStatObjects array",
    "HeroSpecializationDesignerData:StartingRarity": "Starting rarity of hero",
    "TrapItemDefintionDesignerData:Rarity": "Starting rarity of this trap",
    "WeaponItemDefinitionDesignerData:StartingRarity": "Starting rarity of weapons",
    "FortLocomotionAnimSet:AdditiveStart_N": "Starts",
    "FortLocomotionAnimSet:Start_N": "Starts",
    "CampsiteAccountData:stashed_items": "Stashed items. Recorded to mcp as FJsonNode, so properties can be freely changed without having to also update java (but do consider any potential versioning issues)",
    "FortMinigameStatQuery": "Stat Queries\nTLDR: For (any/all) of (group/team/player), is the value of (stat) (>/</=) (value)",
    "FortMinigameStatCollection:GroupStats": "Stat collection for all players in the match",
    "FortMinigameStatsComponent:GameStats": "Stat collection for all players in the match",
    "FortMinigameStatsComponent:RoundStats": "Stat collection for all players in the match",
    "FortMinigameStatCollection:PlayerBucketStats": "Stat collection for each player",
    "FortMinigameStatCollection:PlayerStats": "Stat collection for each player",
    "FortPlayerController:StatEventManager": "Stat event manager that contains the stat events",
    "FortStatEvent:StatEventName": "Stat event name. Must be unique per event",
    "FortStatEventSequence:StatEventName": "Stat event name. Must be unique per event",
    "FortTournamentStatInfo:StatName": "Stat name passed to the MCP.",
    "FortTournamentStatInfo:StatValue": "Stat value.",
    "AthenaLeaderboardData:Playlist": "StatV1 Identifiers\nTODO: remove Playlist once we switch to StatsV2",
    "EPersistenceFrameworkState": "State",
    "EIndicatorStateImage.FIRST_FRIENDLY_STATE": "State Icons",
    "ECreativeBotIslandIterationType": "State Machine Enums",
    "FortMatchmakingMemberData:Version": "State Version",
    "EAshtonStoneStateType": "State a Stone can be in",
    "ESpatialLoadingState.Initializing": "State during mini games",
    "EDeployableTurretState": "State enum for Deployable Turret BGA",
    "ECreativeVendingMachineState": "State enum used for driving client side visual feedback",
    "FortMcpCollectedItemProperties:SeenState": "State for call-outs/bangs in UI",
    "ESavedSupportStatus": "State for if an actor needs to physics sweep to determine if they are supported by world.\nSupported by world means hitting static mesh geometry or terrain.",
    "EFortCollectionBookState": "State of a collection book section or page - similar to quest states",
    "EAthenaSeasonMapIconState": "State of map icons\nMust be listed in order of least known to most known\nIf change this, you must also update AthenaSeasonItemState.java",
    "FortInviteSessionParams:State": "State of session join attempt",
    "EBracketNodeState": "State of the bracket node, ie which team the node represents",
    "ControlPointInstanceData:ControlPointState": "State of the control point",
    "EFortEncounterState": "State of the encounter from initialized through active.",
    "HeistExitCraftData:ExitCraftState": "State of the exit craft",
    "EFortWorldManagerState": "State of the world manager itself",
    "FortActorRecord:ActorState": "State of this actor, default is assumed if not set",
    "HeroSpecializationDesignerData:StatProfile": "State profile type of this hero",
    "FortQuestAchievementTableRow:QuestState": "State that the quest must be in to unlock",
    "AshtonStoneData:InitialStoneState": "State the Stone should begin the game at (allows us to force certain stones to already be captured)",
    "FortHeldObjectComponent:HeldObjectState": "State the held object component is currently in",
    "EFortCollectedState": "State to manage callouts/bangs for items in UI\n\nUnknown/known distinction: store item with no properties and no context for known\nNewBest vs. NewRecord? Use info from stats service",
    "FortMinigame:bIsSpawningBotsForMinigameStart": "State tracking variable used for determining if the minigame is in the process of spawning player bots",
    "FortPartyMemberRepData:PackedState": "State variables that can be packed together into a single struct. The current backend party service has limits on the\nnumber of fields a party member can have (32) as well as how large each field can be (2500 bytes). To ensure we stay\nunder the 32 field limit, basic state variables with small values (bools, enums, etc) can be packed into a single field.\nState variables that change often (such as NumAthenaPlayersLeft below) should be excluded since it would require sending\ncopies of all values in this struct on each update with the current implementation.",
    "FortGameFeatureStatusBase:CurrentState": "State we are currently in",
    "FortGameFeatureStatusBase:RequestedState": "State we are heading towards",
    "ESpatialLoadingState.Ready": "State when populating the volume",
    "FortPresenceGameplayStats:State": "State, eg matchmaking, frontend",
    "CustomizableObjectMultilayerProjectsVirtualLayer:bModifyEnabled": "State.",
    "FortAnimWorldStriderComponent:LocomotionDeadZoneAngle": "StateMachineName: LocomotionSub\nStateName: Movement",
    "FortAnimWorldStriderComponent:PivotAnimationLeft": "StateMachineName: LocomotionSub\nStateName: Pivot",
    "FortAnimWorldStriderComponent:DirectionalStartAnims": "StateMachineName: LocomotionSub\nStateName: Start",
    "StateTreeRuntimeData:StateTree": "StateTree asset used for the StateTree instance.",
    "FortAthenaStateTreeCrouchTask": "StateTreeCrouchTask : Allows the AI to be crouch.\nThis task is a \"background task\", it never ends by itself.\nIt must be associated with other tasks and/or states like DelayTask for example.",
    "FortAthenaStateTreeInteractTask": "StateTreeInteractTask : Allows the AI to interact with an object",
    "FortAthenaStateTreeLookAroundTask": "StateTreeLookAroundTask : Allows the AI to look around.\nThis task is a \"background task\", it never ends by itself.\nIt must be associated with other tasks and/or states like DelayTask for example.",
    "ETeamChatRoomState": "States of a chat room being created while in draft lobby",
    "EJoinServerState": "States that FortUIStateWidget_JoinServer can be in",
    "EMinigameScoreboardStates": "States the scoreboard end round/game can be in",
    "FortMinigame:MinigameEditModeStates": "States we consider where the creator can edit devices.",
    "UIStateSettings:StateLoadTimeout": "States will wait up to this many seconds for their Components to load when transitioning in.\nIf any Component takes longer than this then the transition will proceed and an error will be logged.\nThis is to prevent unhandled errors in any State Components from soft-locking the game.",
    "UIStateSettings:StateUnloadTimeout": "States will wait up to this many seconds for their Components to unload when transitioning out.\nIf any Component takes longer than this then the transition will proceed and an error will be logged.\nThis is to prevent unhandled errors in any State Components from soft-locking the game.",
    "FortGameplayCueNotifyAthena_AIAlertState:SpriteMeshComponent": "Static Mesh Component that is used to display alert state texture",
    "FortGameplayCueNotifyAthena_AIFleeState:SpriteMeshComponent": "Static Mesh Component that is used to display flee state texture",
    "OverlapComponent": "Static mesh bounds component for broadcasting overlap events to gameplay volumes.",
    "WindSplineComponent:EndStaticMesh": "Static mesh for spline end visualization",
    "WindSplineComponent:StartStaticMesh": "Static mesh for spline start visualization",
    "WindSplineComponent:StaticMesh": "Static mesh for spline visualization",
    "BattleLabDeviceGameplayActor_VendingMachine:VendingMachineMesh": "Static mesh that represents the vending machine",
    "BattleLabDeviceGameplayActor_VendingMachine:FunnelMesh": "Static mesh that represesnts the funnel, for players to \"drop\" items into",
    "FortAthenaMutator_PreloadAssets:StaticMeshes": "Static meshes to preload",
    "ShielderCollisionHelperComponent:StaticOffset": "Static offset to apply to the collision location",
    "AssetAttachment:StaticMeshAsset": "StaticMesh Asset to attach",
    "FortSpecialActorReplicationInfo:SpecialActorStats": "Stats being tracked across different special actors",
    "SpecialActorRepData:TrackedStats": "Stats that are being tracked for this actor",
    "FortHttpRequestCompletedAnalyticsFilter:StatusCodes": "Status codes to filter out. 0 generally means failed to connect.",
    "FortGameFeatureStatus": "Status for a single feature, this is turned into JSON",
    "FortGameFeatureOptionalInstallStatus": "Status for any optional install for single feature, this is turned into JSON",
    "EFortServerStatus": "Status of a server running kept in perf counters",
    "EContentUpdateState": "Status of an update content request.\nTODO: Need state requests for CookStartedServer, CookFinishedServer, CookStartedClient, CookFinishedClient",
    "FortWorldManager:StreamedLevels": "Status of our streaming levels, indexes correspond to WorldRecord indexes on server",
    "EClientContentReadinessV2": "Status of this clients content load state.",
    "FortWorldManager:bHasCreatedMissions": "Status of whether the missions have been created yet or not.",
    "FortWorldManager:bZoneCompleted": "Status of zone completion",
    "FortWorldManager:bZoneFinished": "Status of zone state",
    "DigestedVehicleDriving:SteeringPIDController": "Steering PID Controller",
    "VehicleDriving:SteeringPIDController": "Steering PID controller",
    "FortScoutDroneControllingComponent:OwningActorStencilData": "Stencil settings to be applied to the local player while the drone is in flight",
    "RadiusTrackingDisplayInfo": "Step 1: Make your struct inherit from FFastArraySerializerItem",
    "FortMangBotInfoArray": "Step 2: You MUST wrap your TArray in another struct that inherits from FFastArraySerializer",
    "RadiusTrackingDisplayInfoArray": "Step 2: You MUST wrap your TArray in another struct that inherits from FFastArraySerializer",
    "StormWindArray": "Step 2: You MUST wrap your TArray in another struct that inherits from FFastArraySerializer",
    "ThreatLocationArray": "Step 2: You MUST wrap your TArray in another struct that inherits from FFastArraySerializer",
    "FortGravityGunHolder:TargetRotationTorqueStiffness": "Stiffness when calculating rotation torque using ComputeTorqueForTargetRotation.",
    "EFortLevelStreamingState.LSS_Unloaded": "Still streaming in",
    "EFortReplicatedStat.BuildingsBuilt_Stone": "Stone buildings built",
    "FortQuestObjectiveStat:bCollectPotentialLocationTags": "Stop FFortMcpQuestObjectiveInfo::GetPotentialLocationTags from collecting TargetTags and SourceTags to be used for map markers",
    "FortPhysicsBall:StopLiftHorizontalVelocityThreshold": "Stop lift when horizontal velocity is < this magnitude.",
    "FortPhysicsBall:StopLiftTimeDuration": "Stop lift when this amount of time passes after applying lift. A value of 0 skips this check.",
    "FortPhysicsBall:StopLiftVerticalVelocityThreshold": "Stop lift when vertical velocity is > this magnitude. A value of 0 skips this check.",
    "PickedTurnTransitionData:bStopWhenAbilityEnds": "Stop task when ability ends",
    "FortLocomotionAnimSet:AdditiveStop_N": "Stops",
    "FortLocomotionAnimSet:Stop_N": "Stops",
    "EMarkableResult.Block": "Stops the mark trace where it hit the actor, and position the ping at the point of impact.",
    "FortCreativeMoveTool:InteractionBehaviors": "Storage for Creative Interaction Behaviors that have point and click activated states.",
    "FortPlayerCharm:CharmModifier": "Storage of what actor modifier has been spawned for a charm so we can destroy them easily when we are destroyed.",
    "FortWeapon:ItemWrapModifier": "Storage of what actor modifiers have been spawned for an item wrap so we can destroy them easily when the wrap changes or we are destroyed.",
    "FortWrapSkeletalMeshActor:ItemWrapModifier": "Storage of what actor modifiers have been spawned for an item wrap so we can destroy them easily when the wrap changes or we are destroyed.",
    "VehicleCosmeticInfo:ItemWrapModifier": "Storage of what actor modifiers have been spawned for an item wrap so we can destroy them easily when the wrap changes or we are destroyed.",
    "FortPlayerPawn:CharacterPartModifiers": "Storage of what actor modifiers have been spawned for each part so we can destroy them easily when the\npart changes or we are destroyed.",
    "FortPlayerPawn:PreviousCharacterParts": "Storage of what the last parts were so we can tell when they change.",
    "ClamberingComponent:InputConfigCachedValues": "Storaged for the cached scalable float values that can only be obtained through the data registry on the game thread.",
    "ClamberingComponent:TargetingConfig_Ledge_CachedContextualValues": "Storaged for the cached scalable float values that can only be obtained through the data registry on the game thread.",
    "VehicleRuntimeModifiers": "Store and replicate vehicle properties that can be modified at runtime",
    "BagelPlayerDataEntry:LastAIKillTime": "Store last AI kill server time for when streak score is active",
    "MashPlayerDataEntry:LastAIKillTime": "Store last AI kill server time for when streak score is active.",
    "FortFlightParamsRuntimeModifiers": "Store properties that change at runtime instead of changing static data structs, like FFlightParams.",
    "FortWeaponRangedForVehicle:CachedWeaponMeshCompOnVehicle": "Store ref for weapon mesh attached on Vehicle",
    "FortAthenaAIBotController:PolicyDataSpawner": "Store the Policy data that spawn the bot (if spawned by a policy data)",
    "MashObjectiveAreaInstanceData:Rotation": "Store the rotation of the area for use in spawning the AreaActor",
    "BattleLabDeviceGameplayActor_VendingMachine:StoredItemDefinitions": "Stored Item Definitions: all the items currently available in this machine",
    "FortControllerComponent_Telemetry:ItemsConsumed": "Stored ItemConsumed data.  Array size is capped.",
    "FortControllerComponent_Telemetry:Revived": "Stored Revived data.  Array size is capped.",
    "FortControllerComponent_Telemetry:PlayerFishingTelemetryData": "Stored fishing session data",
    "CreativeOptionData": "Stored inside of a single Creative option, stores the display data, and what specific Value that display data corresponds to.",
    "FortControllerComponent_Telemetry:NavLinkTimeouts": "Stored navlink timeout this bot has encountered.  N/A to players.  Array size is capped.",
    "FortControllerComponent_ClientsideLeaderboardLogic:CachedGameState": "Stored off so we're not having to pull this all over the place",
    "FortCowVehicle:PreviousSpeed": "Stored previous speed that's used for the spring interp.",
    "FortGlobalWindInfo:WindIndex": "Stored randomly chosen index so we don't pick differently if we call to get the wind value more than once!",
    "RealitySaplingAccountData:saplings": "Stored saplings. Recorded to mcp as FJsonNode, so properties can be freely changed without having to also update java (but do consider any potential versioning issues)",
    "FortControllerComponent_Telemetry:Teleports": "Stored teleports this bot has made.  N/A to players.  Array size is capped.",
    "FortCachedWeaponOverheatData:TimeHeatWasLastAdded": "Stored time heat was last added.  For proper continuation of over heating as the weapon is re-equipped.",
    "FortCachedWeaponOverheatData:TimeOverheatedBegan": "Stored time overheating began, used to update state of over heating as soon as the weapon is re-equipped.",
    "FortMiniMapData:MiniMapIconMaterialParameterDataList": "Stores MiniMapIcon material parameter change data.",
    "CosmeticFlowgraphState": "Stores a particular Step Dependency Builder and the steps that should be added to it.  (Support for having multiple\nflows and subflows).",
    "FortAthenaMutator_QuickbarRestore": "Stores a player's quickbar order on death, and restores it on respawn",
    "UIStateComponentInstanceStack": "Stores a stack of active State Component instances.",
    "FortUIProxyActor:AttributeSets": "Stores all of the attribute sets in use by the proxy",
    "UraniumRoundData": "Stores all of the up to date round data so that we can easily replicate it as a bunch",
    "FortAthenaMutator_Skyfire:AllPlayspaceTeleportSquadPoints": "Stores all teleport that can be used as a squad's PlayspaceTeleportSquadPoint.\nThe array is filled in InitMutator and should otherwise never be modified.",
    "FortPlayerPawn:bLocalInGliderRedeploy": "Stores client predictive bool if the player is in glider redeploy",
    "TornadoConfigEntry": "Stores configuration data for a single category of tornado",
    "CraftingObjectRepStateData": "Stores crafting state (per-crafting key) on both Client & Server",
    "CraftingObjectServerStateData": "Stores crafting state (per-crafting key) on both just the Server",
    "FortEmotePickerCategory": "Stores data about a category of emotes, the display name of the category, and what emotes it contains.",
    "TeamPawnColor_VisualData": "Stores data about how to colorize pawns on a specific team.",
    "RandomUpgradeData": "Stores data about upgrade tiers which can possibly be applied.",
    "LootTierGroupTagOverride": "Stores data that allows you to override the LootTier based on the tags on the player",
    "BuildingGameplayActorSentry:LocatingDamage_RotationSpeedScalar": "Stores how fast the sentry's rotation speed should be scaled by during the Locating Damager state.\n     Is scaled based on the angular distance between the turret and its damager rotation (in degrees) as applied to the curve: LocatingDamage_RotationSpeedScalarByAngularDistanceCurve",
    "FortPickupEffect:bRandomRotation": "Stores if we should do a random rotation after spawning.",
    "CreativeSelectedActorInfo": "Stores information about actors that are currently selected and probably being moved around",
    "OriginalAndSpawnedPair": "Stores information about actors that are currently selected and probably being moved around",
    "FortReplayMetadata": "Stores metadata for an Athena replay to be written out in conjunction with the Travel log for Project Unicorn",
    "FortAthenaPlayInteractionStateTreeTaskActorInfo": "Stores ref to the actor as ACharacter, some of the components we are interested in for easy access\nand the initial value of properties we change during the execution of the task so we can restore them once the task ends",
    "FortCurieElementSubGridSpatialGrid": "Stores spatial representation of active elements.  Uses axis aligned voxels (a 4x4x3 pattern) to do more accurate overlaps",
    "FortAthenaMutator_Skyfire:AvailablePlacespaceTeleportSquadPoints": "Stores teleport points available to be used as a squad's PlayspaceTeleportSquadPoint.\nThe array is filled in InitMutator and teleport points are removed as they are assigned to squads.",
    "FortAthenaMutator_Skyfire:AvailablePrisonTeleportSquadPoints": "Stores teleport points available to be used as a squad's PrisonTeleportSquadPoint.\nThe array is filled in InitMutator and teleport points are removed as they are assigned to squads.",
    "FortAIEncounterRift": "Stores the Data the RiftManager needs about a rift",
    "ActiveVehicleUI": "Stores the active widget instances spawned as part of the specific UI system.",
    "FortGameStateComponent_Campsite:BotNameDataAsset": "Stores the data table containing item information specific to bots",
    "FortAIPawn:LastDamageHitResult": "Stores the latest hit result struct during last damage impact",
    "FortMission:MissionActivationTime": "Stores the mission activation time",
    "GlobalWeatherData:TimeForNextAttempt": "Stores the next time we will attempt to trigger the weather event",
    "FortCachedWeaponOverheatData:TimeWeaponWasUnequipped": "Stores the time this cached data was added, so we can properly update overheat on re-equip of the weapon",
    "FortNonPlayerConversationParticipantComponent:GiftCooldownTimestamps": "Stores the timestamp representing the expiration world time of any cooldown for the gift specified by the FGameplayTag ID",
    "FortControllerComponent_MiniMapDiscoverable:FortControllerMiniMapComponentVisibilitiesMap": "Stores the visibility information for each Mini Map Component.\n     Information is stored as a TMap so that it can be very quickly searched",
    "GlobalWeatherData:bIsEnabled": "Stores whether this weather event is allowed to activate for the duration of the game",
    "FortPlayerControllerGameplay:AbilityActivatedByInputSpecHandleMap": "Storing the abiilty spec handle of activated abilities so we can call released on the correct one. We're using ability set's gameplay tag as the key.",
    "FortPlayerController:AnalyticsBuildingWallTooLowLocations": "Storing the world locations where we find that the building wall is too low into the terrain.",
    "CobaltCombatStormShieldDataEntry:StormShieldActor": "Storm Shield Actor Reference that represents this storm shield",
    "FortWeaponComponent_ScopeAnimation:SignificantStrafe": "Strafe velocity smaller than this will be ignored",
    "VideoWidgetConfig:StreamingMediaSource": "Stream media source you would like to use",
    "EFortLevelStreamingState.LSS_Loaded": "Streamed but not yet processed",
    "FortAthenaJackalVehicle:PendingJumpCharge": "Strength of a jump that needs to be applied to the vehicle",
    "FortGamepadSettings:AimAssistInitialDownsightStrength": "Strength of aim assist pull when the player first starts aiming downsights (0 = none, 10 = MAX)",
    "TornadoRadialForce:Strength": "Strength of applied force",
    "LinearWindField:ForceStrength": "Strength of applied physics forces (gameplay)",
    "RadialWindField:ForceStrength": "Strength of applied physics forces (gameplay)",
    "TornadoConfigEntry:TorqueStrength": "Strength of constant torque force applied to objects in the tornado",
    "TornadoConfigEntry:TorqueVariance": "Strength of constant torque force applied to objects in the tornado\nTorqueStrength will be within (TorqueStrength, TorqueStrength * (1 + Variance))",
    "LinearWindField:PawnForceStrength": "Strength of force that pushes pawns (directly translates to change in velocity)",
    "RadialWindField:PawnForceStrength": "Strength of force that pushes pawns (directly translates to change in velocity)",
    "LinearWindField:FieldStrength": "Strength of physics field (cosmetics)",
    "RadialWindField:FieldStrength": "Strength of physics field (cosmetics)",
    "FortWindIntensityAndDirection:WindIntensity": "Strength of the global wind as a percentage of the maximum net wind.  (NOTE: Making global wind too close to 1.0 could be problematic since it could make it hard for other winds to be noticed.",
    "AntelopeInPersistent:LeanImpulseScaleBack": "Strength of the lean force that the back passenger applies to the vehicle",
    "FortGameMode:GameModeSessionString": "String for the game session on which type of mode is being used",
    "InteractiveElementDisplayData:DescriptorId": "String id for the descriptor",
    "RatingDescriptorDisplayData:DescriptorId": "String id for the descriptor",
    "RatingBoardDisplayData:RatingBoardId": "String id for the rating board. We use this as a shared identifier between all services and client",
    "AgeRatingDisplayData:AgeRatingId": "String id of the age rating",
    "VideoWidgetConfig:VideoString": "String identifier used in metrics",
    "FortNamedWeightRow:NamedWeightString": "String in the format of <NamedWeightString1>=<Value1>;<NamedWeightString2>=<Value2>;",
    "FortCalendarEventInventoryTransformData:ConversionRecipesToRunAfterEventString": "String of conversion recipes to run after the event is completed (\"<data table asset path:row name=max runs>;<data table asset path:row name=max runs>;...\")",
    "FortCalendarEventInventoryTransformData:ConversionRecipesToRunOnEventStartString": "String of conversion recipes to run after the event is completed (\"<data table asset path:row name=max runs>;<data table asset path:row name=max runs>;...\")",
    "FortCollectionBookSlotData:AllowedItemsString": "String of items that may be placed in this slot (\"<item def asset path>;<item def asset path>;...\")",
    "FortCalendarEventInventoryTransformData:ItemsToGrantString": "String of items that will be granted on the first player login after the event is started (\"<item def asset path=quantity>;<item def asset path=quantity>;...\")",
    "FortCalendarEventInventoryTransformData:ItemsToRemoveAfterEventString": "String of items to remove after the event (\"<item def asset path=quantity>;<item def asset path=quantity>;...\")",
    "HomebaseNodeGameplayEffectDataTableRow:RequiredSourceTags": "String of modifier-level tags which are required for the synthesized modifier to be applied during a calculation; Semi-colon delimited",
    "HomebaseNodeGameplayEffectDataTableRow:RequiredTargetTags": "String of modifier-level tags which are required for the synthesized modifier to be applied during a calculation; Semi-colon delimited",
    "HomebaseNodeGameplayEffectDataTableRow:IgnoreSourceTags": "String of modifier-level tags which prevent the synthesized modifier to be applied during a calculation; Semi-colon delimited",
    "MeshNetworkEventStateData:EventParameters": "String of parameters to be parsed however the end user requires",
    "FortCollectionBookSlotData:AllowedPersonalitiesString": "String of personality restrictions of what may be placed in this slot. This field is only valid for Workers",
    "FortCalendarEventInventoryTransformData:QuestsOnlyActiveDuringEventString": "String of quests that are only active during this event (\"<item def asset path>;<item def asset path>;...\")",
    "HomebaseNodeGameplayEffectDataTableRow:GrantedTags": "String of tags granted from the synthesized GE",
    "HomebaseNodeGameplayEffectDataTableRow:AssetTags": "String of tags the the GE *has* and DOES NOT give to the actor; Semi-colon delimited",
    "HomebaseNodeGameplayEffectDataTableRow:ApplicationRequiredTags": "String of tags which are required for the synthesized gameplay effect to be applied to its target; Semi-colon delimited",
    "FortCriteriaRequirementData:RequiredTagString": "String representation of the required tag for the criteria bonus",
    "FortAthenaAIBotNameRegionData:RegionId": "String representing region",
    "CachedItemData:item_definition_persistent_name": "String representing the persistent asset name of a currently stashed weapon/item item\ndefinition. Can be re-resolved to an item definition by the asset manager",
    "FortCollectionDataMapping:CollectionType": "String used to identify this collection on MCP.",
    "FMDeviceCableOrderingPortState:WildcardPort": "Strong pointer - this will only be used to point to components on the same actor",
    "FMDeviceCableWildcardOrderingComponent:ClosedMesh": "Strong pointers to meshes on the same actor",
    "MutatorAddedWidgets": "Struck for keeping track of widgets added by mutators",
    "FortCurieAmbientAudioLocationKey": "Struct acting as a key for tracking ambient audio in a map",
    "FortAbilitySetHandle": "Struct capturing the results of an application of an ability set, so that it can be easily removed later",
    "EffectUIParameters": "Struct combining an Effect ID (e.g. \"NPCGiveItem\", with all added UIParams)\nUIParams Allow users to pass back useful information for use by UI if desired (e.g. 'Count' 'ItemDefinitionPath' etc)",
    "ConstructionBuildingList": "Struct container for Blueprint fixed size BuildingList array",
    "PatternBASEEffect": "Struct containing a Pattern-Mesh pair for applying the BASE effect to BuildingSMActors",
    "FortHealthShieldRegen_HealthDelegateContainer": "Struct containing a list of callback delegates for various health regen state changes.",
    "FortOvershieldDelegateContainer": "Struct containing a list of callback delegates for various overshield state changes.",
    "FortHealthShieldRegen_ShieldDelegateContainer": "Struct containing a list of callback delegates for various shield regen state changes.",
    "TeamSpottedActorInfo": "Struct containing all of the information necessary to describe an actor spotted by someone on a team",
    "FortPlayerControllerAthena:LevelStreamRequestHandshakeState": "Struct containing all the level stream state",
    "FortWinnerPlayerData": "Struct containing any data needed for displaying the winner of a game",
    "FortDelayRTMMData": "Struct containing data needed handling the delaying of the \"return to main menu\" button",
    "PatrolPathSegmentDetails": "Struct containing details of a patrol path segment (actual pathfinding path, etc)",
    "BASEGameplayEffect": "Struct containing info to apply gameplay effects at levels",
    "ImGuiKeyInfo": "Struct containing key information that can be used for key binding. Using 'Undetermined' value for modifier keys\nmeans that those keys should be ignored when testing for a match.",
    "ClientFinishedDownloadOnDemand": "Struct containing the UniqueNetID of a single player that finished download on demand.",
    "ActorTrackerBaseContext": "Struct containing the context for which an EventMessage is sent",
    "ApproachingActorContext": "Struct containing the context for which an EventMessage is sent",
    "DevicesPlayStateContext": "Struct containing the context for which an EventMessage is sent",
    "FortMinigamePendingRestartContext": "Struct containing the context for which an EventMessage is sent",
    "MinigameStateChangeContext": "Struct containing the context for which an EventMessage is sent",
    "PlayerEnterSpatialActorContext": "Struct containing the context for which an EventMessage is sent",
    "PlayerEnterSpatialActorContextLegacyMinigame": "Struct containing the context for which an EventMessage is sent",
    "PlayerEnterSpatialActorContextWithPawn": "Struct containing the context for which an EventMessage is sent",
    "PlayerExitSpatialActorContext": "Struct containing the context for which an EventMessage is sent",
    "PlayerExitSpatialActorContextLegacyMinigame": "Struct containing the context for which an EventMessage is sent",
    "PlayerExitSpatialActorContextWithPawn": "Struct containing the context for which an EventMessage is sent",
    "PlaysetBaseContext": "Struct containing the context for which an EventMessage is sent",
    "SpatialGamePlayActorLoadingStateUpdatedContext": "Struct containing the context for which an EventMessage is sent",
    "SpatialGameplayInterfaceContext": "Struct containing the context for which an EventMessage is sent",
    "LatentRepPlayerData": "Struct containing the data getting replicated per player on this team (this data only gets replicated once every \"Num Team Members\" frames)",
    "FortQueryGenerator_PerceivedActors_Settings": "Struct containing the different setting the perceived actors goal generator has for each type of perceived actor (hostile, neutral, friendly).",
    "FortPlayspaceInitializedEventPayload": "Struct containing the event payload for which the FortPlayspace initialized event is called.",
    "EliminationTimelineEntry": "Struct containing the match elimination timeline info.",
    "FortPawnMaterialOverrideState": "Struct containing the original state of a scene component before a material override was applied, used to restore state later",
    "SpecialActorRepData": "Struct containing the replicated data of a special actor. Gets replicated every ReplicationInterval.",
    "ReplicatedStatValues": "Struct containing the replicated stat values",
    "FortTierProgression": "Struct containing tier progression for different layouts",
    "FortUpdatedObjectiveStat": "Struct containing updates to objective stats, this overrides the value used on the client",
    "FortAthenaLivingWorldCategoryTableDataList": "Struct created because we can't have container of container in property",
    "PenetrationAvoidanceFeeler": "Struct defining a feeler ray used for camera penetration avoidance.",
    "FortGameplayEffectContainer": "Struct defining a list of gameplay effects, a tag, and targeting info. Can be applied as an entire block",
    "FortGameplayEffectContainerSpec": "Struct defining a list of gameplay effects, a tag, and targeting info. Can be applied as an entire block",
    "FortMontageInputAction": "Struct defining actions to take in response to input",
    "InteractionType": "Struct defining an interaction type",
    "FortPawnMaterialOverrideCopiedParameters": "Struct defining material params to copy for an applied material override",
    "HookGunRopeRepData": "Struct defining the necessary pieces to make the hook gun rope work",
    "AIVisibilityRangeSettings": "Struct defining visibility settings to use that is applicable based on range (if set)",
    "ElevationArrowData": "Struct describing the properties to support elevation arrows",
    "FortVehicleOverrideData": "Struct encapsulating all data necessary to override vehicle functionality",
    "FortReplicatedVehicleOverrideData": "Struct encapsulating all replicated data necessary to override vehicle functionality",
    "AshtonStoneState": "Struct encapsulating the current state of a Stone",
    "AshtonStoneData": "Struct encapsulating the data required to manage a Stone",
    "WindSplineBlockage": "Struct encapsulating the spline blockage data",
    "WindSplineSubDivBlockage": "Struct encapsulating the spline blockage data",
    "FortEmporiumItemLicenseData": "Struct for Creative Commons license information",
    "EmoteAudioComponentData": "Struct for Emote Audio Components on Fort Pawn",
    "FortEmporiumPriceFilterEntry": "Struct for Price filter options",
    "WeightedAIInventoryLoadout": "Struct for assigning a weight to a given inventory loadout.",
    "AssetAttachment": "Struct for attaching assets to Sockets",
    "EncounterMobSpawnData": "Struct for customizing how a mob is spawned within an Encounter",
    "ItemLoadoutBucket": "Struct for defining buckets of loadouts which will be uniquely assigned to each player on a team.",
    "TeamSpottedActorInfoArray": "Struct for fast TArray replication of team spot info",
    "VisibiltyInfoArray": "Struct for fast TArray replication of visibility info",
    "FortEmporiumFilterEntry": "Struct for filter popup entries",
    "CobaltWidgetMatchData": "Struct for holding data about a single match for pre- and post-round widgets (there are multiple matches per round)",
    "FortTrackedModStaticMeshData": "Struct for holding data related to a spawned weapon mod mesh for a given weapon.\nThis is used to avoid spawning multiple meshes, and instead we reconfigure this mesh.\nSee FortWeaponModManager for performance considerations.",
    "MOBATurretPrioritySetting": "Struct for holding targeting priority; Bit hacky atm for prototype purposes, should be more data-driven",
    "MusicPlayerData": "Struct for holding the SongIndex and ServerTimeSongStarted.",
    "TagRestrictedTable": "Struct for limiting loot tables based on active gameplay tags.",
    "FortEmporiumFilterCategory": "Struct for nested filter categories",
    "SkyTubeMagnetismVelocityDebugData": "Struct for output from velocity calculations. Used for debug drawing, which is handled differently when using async physics.",
    "OwnedRealitySaplingData": "Struct for owned reality saplings with some instance specific data replicated\n      on the controller to avoid making saplings more relevant than they need to be.\n      Increasing sapling relevancy was deemed too perf heavy to just make them relevant\n      to their owners all the time.",
    "SpecialEventRewindComponentRecording_PlayerPawn": "Struct for recording data about a PlayerPawn",
    "IronCityRowToRating": "Struct for relating the Difficulty and Power Levels and calculating min and max ratings for Matchmaking in Iron City Wargames",
    "SpecialEventRewindComponentStateData": "Struct for replicating the state of a USpecialEventRewindComponent",
    "Voter": "Struct for replication data with Voting API",
    "IronCityDifficultyInfo": "Struct for saving account level, difficulty level, loot level, stat clamp and mission rewards from IronCityDifficultyTable data",
    "CobaltWidgetRoundData": "Struct for sending round data to pre- and post-round widgets",
    "FortAthenaMutator_Cobalt:WidgetRoundData": "Struct for sending round data to pre- and post-round widgets",
    "EditorOnlyBuildingInstanceMaterialParameters": "Struct for simple support for actor instance building material parameter changes;\nNaively only applies to material index 0 for now.",
    "FortEmporiumSortEntry": "Struct for sort entries",
    "QuickbarRestoreMutatorData": "Struct for storing a player's quickbar information at time of death, for the purpose of restoring it on respawn.\nNecessary in cases where the quickbar is temporarily altered between death and respawn.\nFor example, when spectating another player, the spectated player's items are temporarily placed\nin the dead local player's quickbar.  When the quickbar is restored in lower-level code, the items are in the order\nthat they were added to the inventory, NOT the order that they were in the quickbar at the time of death.",
    "TornadoActorInfo": "Struct for storing per-actor information for actors under the influence of the tornado",
    "CustomizableObjectSprayVariantFixedProperties": "Struct for the fixed properties of the channel's projector/layer",
    "PlayerBucketSelection": "Struct for tracking assignments of buckets to players.",
    "FortPlayerController:QueuedItemsToDrop": "Struct holding data about items queued for spawning as pickups",
    "QueuedItemsToDropViaPickup": "Struct holding data about items queued for spawning as pickups",
    "ThreatCloudValues": "Struct holding the activated and deactivated set of animating material parameters on clouds.",
    "SkyLightValues": "Struct holding the animating properties of the skylight component",
    "HUDElementsToHideData": "Struct of HUD Element tags and data about when to hide/show them.\nGamePhase and SafeZonePhase start/stop options can be mixed, but please set only one for start\n   and only one for stop (Eg, starting at aircraft game phase and stopping at safe zone phase 2 is valid).\n   GamePhase of None and SafeZone phase of -1 are ignored. It is valid to just set a start option and never stop hiding (leave stop as none/-1).",
    "FortCreativePersistenceComponent:SaveEntrySettings": "Struct of booleans that is used to define which data should be saved and loaded",
    "FortMissionTaggedRewards": "Struct of item definitions to give as rewards, bound to a gameplay tag for identification purposes",
    "SpecialEventMathEaseData": "Struct of parameters taken by UKismetMathLibrary::Ease(), VEase(), REase(), TEase()",
    "SharedSettingsData": "Struct of the cached shared settings data",
    "LogicalBuilding": "Struct representing a \"logical building\": A collection of building actors that are all connected to each other",
    "CreativeClassOption": "Struct representing a class for Creative.\n\nAvailable property meta-data:\n - ClassTypesToShow - Optional comma-separated list of class types (ECreativeClassType) that are shown for this option, or empty to show all class types.\n - ClassTypesToHide - Optional comma-separated list of class types (ECreativeClassType) that are hidden for this option.\n - MinClassSlot - Optional int representing the minimum class slot.\n - MaxClassSlot - Optional int representing the maximum class slot.",
    "FortUserCloudRequestQueue": "Struct representing a cloud request queue for a user",
    "RewardBadgesProgression": "Struct representing a collection of reward badges",
    "BuildingDamageHistoryEntry": "Struct representing a damage event in the history of the building.",
    "ActiveGameplayModifierHandle": "Struct representing a handle to an actively applied gameplay modifier",
    "FortAttributeInitializationKey": "Struct representing a key pair look-up for initializing attributes",
    "BuildingNeighboringActorInfo": "Struct representing a neighboring building actor",
    "RewardBadgesCollectionProgressionData": "Struct representing a set of badges granted upon completion of a tier",
    "TieredNamedCollectionProgressionData": "Struct representing a set of name-based tiered collections",
    "DifficultyCollectionProgressionData": "Struct representing a set of name-based tiered difficulty collections",
    "FortSpawnContext": "Struct representing a spawn context for an object, capturing the state of relevant variables at the object's spawn time",
    "FortPawnStats": "Struct representing a spreadsheet row of basic stats that all FortPawns share",
    "FortAIPawnStats": "Struct representing a spreadsheet row of stats that FortAIPawns share",
    "FortPlayerPawnStats": "Struct representing a spreadsheet row of stats that FortPlayerPawns share",
    "CreativeTeamOption": "Struct representing a team for Creative.\n\nAvailable property meta-data:\n - TeamTypesToShow - Optional comma-separated list of team types (ECreativeTeamType) that are shown for this option, or empty to show all team types.\n - TeamTypesToHide - Optional comma-separated list of team types (ECreativeTeamType) that are hidden for this option.\n - MinTeamIndex - Optional int representing the minimum team index.\n - MaxTeamIndex - Optional int representing the maximum team index.",
    "DifficultyRowProgression": "Struct representing a tiered difficulty progression",
    "FortUserCloudRequest": "Struct representing a user cloud request",
    "SqueegeeStyleParams": "Struct representing all the styling info that we want to pass from the injection widget to the Squeegee widgets so designers can make/preview changes in editor/game",
    "FortPawnMaterialOverride": "Struct representing an active pawn material override, this is replicated and in a local struct",
    "FabricConnectedInputWrapperInfo": "Struct representing an output connected to this node.\nMultiple inputs need combiner nodes, so it's not necessarily connected to this.\nThis allows us to keep track of which combiner node it's connected to.",
    "DeferredActorData": "Struct representing deferred spawned actors",
    "ChosenQuotaInfo": "Struct representing quota information selected by the world manager for a particular building actor",
    "CameraAltitudeAdjustments": "Struct representing the additive changes to specific properties based on elevation of the player camera. These are additive and blend on top of other time of day settings. They are blended before storm modifiers.",
    "CloudColorState": "Struct representing the animating material parameters of clouds. This set of properties are different when activated or deactivated",
    "FortAthenaLoadoutData": "Struct representing the athena loadout data",
    "FortCosmeticLockerSlotData": "Struct representing the cosmetic locker data",
    "FortUserCloudRequestPayload": "Struct representing the data payload for a cloud request; Also includes identifying information",
    "FortAthenaLivingWorldPrefabActorSpawnerData": "Struct representing the extracted information from a AFortAthenaLivingWorldPrefabActorSpawner in the Prefab's level.",
    "BuildingSupportCellIndex": "Struct representing the indices of a structural support grid cell",
    "SplatterCellIndex": "Struct representing the indices of a structural support grid cell",
    "FortWorldSettingsOverride": "Struct representing the per world override data for the FortWorldSettings",
    "BackendJobCompletePayload": "Struct sent up to AWS after a job has been processed",
    "FortAthenaTeamHUDInfo": "Struct storing commonly used UI values across multiple HUD elements for a particular team",
    "FortSupplyDropSubPhaseData": "Struct storing data needed for spawning SupplyDrops per SafeZone",
    "FortCharacterPartMontageInfo": "Struct storing the information mapping a montage to a character part",
    "FortPerModeInputConfig": "Struct that contains all overrides to allow a game mode to inject it's own input layouts and configurations",
    "PlaylistFrontEndData": "Struct that contains all the logic required for the frontend to display a playlist",
    "SqueegeeData": "Struct that contains all the possible types of Squeegee data we'd want to send (it's possible these will get more types/change over time so good to have in one place)",
    "AthenaLoadoutEntry": "Struct that contains an entry in a loadout",
    "PlaylistData": "Struct that contains the social party data needed to identify a selected playlist or link code",
    "FortOptionsMenuData": "Struct that defines an option tab in the settings UI",
    "CraftingUpgradeRule": "Struct that defines how to copy transient data from an ingredient item to a result item",
    "FortSurfaceTypeToSurfaceTypeTag": "Struct that defines surface type to surface type tag",
    "FortTagToDeathCause": "Struct that defines tag to death cause",
    "FortAbilityTagRelationship": "Struct that defines the relationship between different ability tags",
    "PlaylistFrontEndSettings": "Struct that describes how a playlist should be handled in the frontend",
    "PlaylistAccess": "Struct that describes whether a playlist is enabled and how it should be displayed in the frontend",
    "AshtonStoneSpawnData": "Struct that determines how a Stone is to spawn in the mode",
    "PlaylistAccessOverride": "Struct that determines whether a playlist is disabled under various configurations",
    "PlayspaceUserList": "Struct that handles the list of Playspace users a Playlist has jurisdiction over (handled as a fast array)",
    "KnockbackMutatorData": "Struct that holds data about a pawn and their corresponding knockback multiplier (think super smash bros percent but in decimal form)",
    "AthenaVehicleOverride": "Struct that holds data about event-specific vehicle class overrides",
    "BuildingPoolHarvestResourceSpawnsData": "Struct that holds data about harvest resources we want to spawn for our owning UBuildingPoolHarvestResourceSpawnsComponent and a specific instigator pawn.",
    "SkyfireLootRoomTeleportPointsData": "Struct that holds data about the teleport points in a specific loot room",
    "FortAttributeInfo": "Struct that holds info about a property",
    "FortTooltipDisplayInfo": "Struct that holds info about what stats to display for object tooltips",
    "SkyfireSquadDataEntry": "Struct that holds information about a squad's earned loot rarity level and time remaining before they are teleported to the loot room.\n   When a squad's time in the mothership is up, they are transported to a loot room based on their loot rarity level.\n   Both time and loot rarity can be increased via special pickups.",
    "SkyfirePlayerData": "Struct that holds information about about a specific player who is in the mothership",
    "FortTooltipTokenInfo": "Struct that holds text replacements for tooltip tokens",
    "FortDamageNumberInfo": "Struct that holds the info for a new damage number",
    "DigestedTargetBasedAccuracy": "Struct that holds the target based aim tracking multiplier values after the skill of the match has been determined.",
    "TargetBasedAccuracy": "Struct that holds the target based aim tracking multiplier values as raw values, i.e., value at all skill levels.",
    "ExitCraftSpawnData": "Struct that holds transient data about spawning an exit craft",
    "SpatialGameplayActorLoadingStateUpdatedPlayerContext": "Struct that is derived to create a separate type for events sent with a different tag",
    "CurieElementPairKey": "Struct that is used as a key for element interactions between two elements.  ElementTag is the\nelement that is being interacted with by the interacting element tag.",
    "FortRandomPrefabData": "Struct that represents a prefab along with properties (tags)",
    "FabricUserOptionPresetCollection": "Struct that represents a set of presets to change multiple settings at once.",
    "CachedSupplyDrop": "Struct that represents active supply drops in the game and if they are currently in the loot octree",
    "FMOutgoingCableConnection": "Struct that represents an outgoing connection from a fabric device\nFor devices that have Multiple outputs, we will use 1 of these structs per output",
    "MovingLootInfo": "Struct that represents loots that are moving in the world due to impulse/force (ex. loots on water)",
    "ConstructionBuildingInfo": "Struct that stores all the BuildingActors that a bot can build based on type and material",
    "PhaseLevelEntry": "Struct to allow a SpecialEventScript to load/unload a level and change its visibility",
    "PhaseDataLayerEntry": "Struct to allow a SpecialEventScript to load/unload a world partition data layer and change its visibility",
    "InputEventBinding": "Struct to allow configuration of input bindings used to trigger various prop related events",
    "GameplayMessageStandaloneFrontendDisplayed": "Struct to be used with UGameplayMessageRouter",
    "GameplayMessageRouterBool": "Struct to be used with UGameplayMessageRouter, deprecated, please use a custom type for your message instead, also use the GameplayEventRouter instead of the GameplayMessageRouter",
    "IslandCodeHotfix": "Struct to define island code hotfixes for the view experience discovery row link on quests",
    "ReplicatedStreamingProperties": "Struct to encapsulate replicated properties",
    "PickedTurnTransitionData": "Struct to group params for this ability",
    "PersistenceDelegateHandle": "Struct to handle the Persistence Ready and Persistence Error handles",
    "HUDElementVisibilityRepData": "Struct to hold all of the replicated HUD Visibility data so that we only have an \"OnRep_\" function fire once",
    "CustomHighlighting": "Struct to hold custom highlighting data for pawns' custom depth stencil rendering",
    "FortAssignedObjectiveSquadData": "Struct to hold data about a squad assigned to an objective",
    "FortAssignedObjectiveData": "Struct to hold data about an assigned objective.",
    "IssuedFriendCode": "Struct to hold information about an issued friend code",
    "QueryXboxUserXUIDParams": "Struct to hold information about an issued friend code",
    "CustomHighlightingOverrideData": "Struct to hold the data to drive the priority stack for CustomHighlightingHandles.",
    "StormSicknessOptions": "Struct to hold the storm sickness options",
    "BuildingGameplayActorSpawnData": "Struct to hold transient data used to manage BGA spawning",
    "SupplyDropSpawnData": "Struct to hold transient data used to manage SupplyDrop spawning",
    "SupplyDropItemDeliverySpawnData": "Struct to hold transient data used to manage SupplyDrops that use the ItemDelivery type of spawning",
    "SupplyDropZoneBasedSpawnData": "Struct to hold transient data used to manage SupplyDrops that use the ZoneBased type of spawning",
    "FortSpawnActorData": "Struct to hold transient data used to manage the actors the game mode wants to spawn post map and playlist load",
    "InterpOffset": "Struct to interpolate camera offsets based on its orientation.",
    "InterpOffsetData": "Struct to interpolate camera offsets based on its orientation.",
    "FortADSTransitionInterpCurveOffset": "Struct to interpolate relative offsets curves based on camera orientation for ADS in/out transitions",
    "DiscoCaptureIconData": "Struct to keep track of the data required for a capture point icon",
    "DiscoTeamScoreData": "Struct to keep track of the data required for a team score",
    "TDMTeamScoreData": "Struct to keep track of the data required for a team score",
    "DiscoCaptureUIData": "Struct to keep track of the data required for displaying",
    "FortAIEncounterWaveProgressEstimation": "Struct to keep track of the estimation of the progress in a wave.\n      The data is tracked in two sections Ramp and Peak/Fade.\n      The overall progress is displayed in the HUD in segments.",
    "GameMemberInfo": "Struct to replicate team & squad member layout info",
    "FortLevelStreamingData": "Struct to replicate to the client what level was loaded on the server.",
    "FortInterpCurveOffsetData": "Struct to represent curve of camera relative offset with sample pitch angle",
    "FortCachedMatchmakingSearchParams": "Struct to represent params used for past matchmaking attempts",
    "TrackedDevicesByEvent": "Struct to send to blueprint that contains the name of the event property and the device info for each device connected to that event",
    "FortRespawnLogicData": "Struct to store data used to determine respawn location in games",
    "AISpawnCountInfo": "Struct to store info of the current/max spawn number for a certain pawn type",
    "FortSupplyDropGamePhaseData": "Struct to store the data needed for configuring SupplyDrops per GamePhase",
    "SmartObjectActivityResult": "Struct to store the link between Activity and SmartObject Result",
    "FortCurieActiveAmbientAudio": "Struct tracking an active ambient audio instance for Curie",
    "AIScalableFloat": "Struct used by AIs (currently supports only AIBots) to scale behaviours based on gameplay values (ex. received dmg).\nNote: try to use a single AIScalableFloat per AI-instance as it will try to cache the returned value.\n      do not share between multiple AIs if the scaling type is AI-instance driven.",
    "AthenaGameMessageData": "Struct used by the game mode messaging UI to display game specific messages",
    "FortPieSliceSpawnData": "Struct used for configuring a spawn area that is pie slice based from a circle's origin",
    "ActorOverlapEvent": "Struct used for tracking when a pawn enters or exits a gameplay volume.",
    "WarEffortMutatorChoiceData": "Struct used to correllate the mesh network name with a loot table name/weight",
    "SettingsSaveContextBehaviorDefinition": "Struct used to define configurable behaviors for callers requesting a cloud save",
    "TargetBasedAccuracyCategory": "Struct used to define target based accuracy values for a particular category type.\nThis struct is used to store target based aim multiplier values to exhibit behavior such as, increasing or decreasing phoebe bots' aim accuracy versus ghost bots in the ArsenicCore game mode.\nGhost bots are identified through the Tags input on this struct.",
    "FortAbilityTargetSelection": "Struct used to define the targeting information for an ability",
    "CreativeOptionCategoryData": "Struct used to describe categories and their display names for Creative Options.",
    "GameplayStateTransition": "Struct used to determine the conditions on transition between states",
    "AudioDynamicSoundData": "Struct used to dynamically adjust audio data.",
    "FortTimeOfDayCurve_Float": "Struct used to encapsulate a time of day based float curve or a flat float value",
    "FortTimeOfDayCurve_LinearColor": "Struct used to encapsulate a time of day based linear color curve or a flat linear color value",
    "FortTimeOfDayCurve_Vector": "Struct used to encapsulate a time of day based vector curve or a flat vector value",
    "FortUserInputSettingsPerInputType": "Struct used to encapsulate all data required to save/load input settings for a player for a particular input type",
    "FortUserInputSettingsPerMode": "Struct used to encapsulate all data required to save/load input settings for a player in a particular mode within the Fortnite platform",
    "TempestLightningBoltEffectContainer": "Struct used to encapsulate all the data for the gameplay effects applied by the lightning bolt",
    "TempestLightningBoltData": "Struct used to encapsulate all the data needed for a functioning lightning bolt",
    "CustomizableObjectSprayVariantMCPPayload": "Struct used to export to MCP to save string space.",
    "FortTargetFilter": "Struct used to filter targets down based on rules",
    "CurieEffectContainer": "Struct used to hold a target filter and gameplay effect",
    "ScoutDroneWidgetIdentifier": "Struct used to hold a widget/tag pair in order to identify certain widgets whithin the Scout Drone HUD",
    "FortAbilityCameraOverrideSettings": "Struct used to hold camera override settings",
    "ScoutDroneInputTriggerableEvent": "Struct used to hold information about an input-triggerable Gameplay Event",
    "ScoutDronePickupTargets": "Struct used to hold replicated items + pawn",
    "DigestedTargetBasedAccuracyCategory": "Struct used to hold target based accuracy values for a particular category type after the values have been digested\ni.e., after values have been determined for a particular skill level.",
    "WaterSurfaceInfo": "Struct used to hold water information gathered from a surface query.",
    "RuntimeOptionSpectateAPartyMemberOverride": "Struct used to hotfix spectate a party member per playlist.",
    "PlaylistOverrideData": "Struct used to hotfix various playlist data such as whether a region should enable/disable playlists/game modes etc.",
    "LogicalConnectionChain": "Struct used to keep track of Structural connection chains when we spawn things. This does not re-evaluate. It is simply for tracking at a specific time, which actors were logically connected.",
    "GameplayStateSettings": "Struct used to map a GameplayState to the unique id used to instance and track it",
    "MashBossHealthShieldData": "Struct used to replicate a BossPawn's health and shield data to the client for UI purposes.",
    "GameplayMutatorEventData": "Struct used to replicate gamemode mutator specific data (like an RPC but using normal replication)",
    "GameplayMutatorObjectData": "Struct used to replicate gamemode mutator specific data in the form of attaching data to a specific object",
    "SavedPosition": "Struct used to save pawns positions history. This history is used by bots to estimate the current pawn trajectory.",
    "AbilityTrackedActorSettings": "Struct used to specify settings for ability-spawned actor tracking",
    "AbilityTrackedActorEntry": "Struct used to track actors spawned by abilities",
    "PlaylistStreamedLevelData": "Struct used to track the additional levels a playlist could stream into the game and whether they've been loaded or not",
    "ActiveGameplayStateData": "Struct used to track the currently active GameplayState running on the state machine",
    "ImGuiDPIScaleInfo": "Struct with DPI scale data.",
    "FortAbilitySetDeliveryInfo": "Struct with extra information for delivering ability sets",
    "FortGameplayEffectDeliveryInfo": "Struct with information for delivering standalone gameplay effects",
    "ImGuiCanvasSizeInfo": "Struct with information how to calculate canvas size.",
    "DeployableBaseSupportSettings": "Struct with settings specifically related to supporting deployable bases within a zone",
    "LoadedUIManagerEntry": "Structs for managing UI manager classes since we can temporarily have multple per subgame.",
    "ValkyrieEditorPermissionSettings_Blueprints:AllowedStructs": "Structs to allow",
    "FortGameStateZone:StructuralSupportSystem": "Structural support information for the world; Created and maintained independently by client and server",
    "ItemFundingUpdatedFundingData": "Structure allowing us to fund indexed stations. This needs to live in a place outside of a UI module so it will load on servers.",
    "ReppedLastServerIndexToIndex": "Structure built/maintained in a TArray as ReppedPoints are receive to make sure we have a way to keep the repped points in their creation order from the server (using LastServerIndices).  (with decimal stripped off), plus alpha factor in the decimal place.\n  Setup on server immediately.  Setup on the client once as the repped points are received.",
    "PlayspaceConfiguration": "Structure containing all the data required to load a Playspace into the game from a plugin",
    "DataDrivenServiceBriefConfig": "Structure containing data which provides user specific context to a UFortDataDrivenServiceBrief widget.\nContains fields like Title text, description text, style information etc. It is expected that bespoke\nservices will inject their own config, to initialize the widgets appearance for the required use.",
    "UrgentQuestSettings": "Structure containing designer exposed 'urgent quest' settings for QS2. Represents only 'static' data consumed by gameplay systems.\nDoes not contain any live state (for example, timer handles etc). Can be used to populate an FUrgentQuestSettings which represents both static\nsettings and live state.",
    "CatalogRedeemRealMoneyPurchasesInfo": "Structure containing purchasing-platform agnostic query information for a redeeming purchased items through the MCP",
    "CatalogReceiptInfo": "Structure containing purchasing-platform agnostic receipt information for a single purchased item",
    "FortPlayspaceMatchmakingSettings": "Structure containing the data required for handling matchmaking-based user acceptance",
    "PlayspaceComponentConfiguration": "Structure containing the data required to add a playspace component to the root playspace from a plugin",
    "StateTreeRuntimeData": "Structure containing the data required to create and run a StateTree system on an Actor\n   Each StateTree this component is asked to run on the owning Actor will have one of these elements tracking it\n   This is the authoritative structure running the machine and will not exist on the client if we are replicating the StateTree",
    "StateTreeClientSimulationData": "Structure containing the data required to simulate the transitions of states of a StateTree and\n   maintains references to the state objects that are performing those transitions.\n   This structure will only exist in the situation where a server is replicating a StateTree to a client",
    "PlayersLeft": "Structure contains information about players left (humans, bots)",
    "TotalPlayers": "Structure contains information about total players (humans, bots)",
    "FortRequirementsInfo": "Structure defined to specify a set of requirements, Generally used to allow/disallow access to particular content",
    "FortPlacementActorFinderEntry": "Structure defining one building entry in FFortPlacementActorFinderInfo.",
    "FortPlacementActorFinderInfo": "Structure fed to SpawnAtPlacementActors function.",
    "ReplicatedAttachParams": "Structure for data relevant to attaching a projectile to a another actor (right now, only fort pawns are supported).",
    "BagelDifficultySettings": "Structure for difficulty settings",
    "MashDifficultySettings": "Structure for difficulty settings",
    "FMDeviceCableArtifact": "Structure for holding data for each cable type.\nThis gets stored on ports to cache the artifact to that point\nAnd it's used to combine the artifacts of multiple connections together",
    "AttachedInfo": "Structure for holding data relevant to attaching a projectile to a another actor(right now, only fort pawns are supported).",
    "FortReppedPoint": "Structure for holding elements of pathway points (raw points, not the evenly spaced ones).",
    "StaminaCapsuleAnalytics": "Structure for holding the Stamina Capsule Data for Event Analytics",
    "FortProjectileTrajectoryData": "Structure for holding the data needed to calculate a projectiles trajectory, usually used for previewing the trajectory before throwing.",
    "MMAttemptState": "Structure for holding the state of a matchmaking attempt",
    "FortMissionAlertCategoryData": "Structure for mission alert category data",
    "BagelAreaSpecialActorData": "Structure for registering an area as a special actor (display on map/compass)",
    "MashAreaSpecialActorData": "Structure for registering an area as a special actor (display on map/compass)",
    "InteractionSplinePoints": "Structure for replicating vectors to place spline data for remote pawns' interactions.",
    "BagelScoreMultiplierInstanceData": "Structure for score multipliers that can be registered as special actors to display on minimap/compass",
    "MashScoreMultiplierInstanceData": "Structure for score multipliers that can be registered as special actors to display on minimap/compass",
    "BagelScoreMultiplierSpawnData": "Structure for score multipliers to spawn in an objective area",
    "MashScoreMultiplierSpawnData": "Structure for score multipliers to spawn in an objective area",
    "EventModeFocusActor": "Structure for specifying an actor to focus and inside what distance to do so",
    "IronCityMatchmakingBuckets": "Structure for the Difficulty to Power Level Buckets for Matchmaking in Iron City Wargames",
    "ProfileEntry": "Structure for the profiles we loaded for this group (used internally)",
    "EFortStructuralGridQueryResults.ReachedLimit": "Structure limit has been reached",
    "EventModeWidgetCachedData": "Structure of UI extensions added",
    "UIExtension": "Structure of UI extensions that can add be added from sources that live in other modules or systems e.g. GameFeaturePlugins, Playlists.",
    "SupplyDropSubPhaseModifier": "Structure of a modifier that alters the way a subphase within a supplydrop works",
    "VoteSettings": "Structure of data that defines the settings for a single vote in the voting system",
    "VoteSessionSettings": "Structure of data that defines the settings for an entire voting session in the voting system",
    "SupplyDropModifierData": "Structure of supply drop modifiers this playlist can override",
    "BuildingGameplayActorAbilityDeliveryBucket": "Structure representing a bucket of proximity-based gameplay effects, persistent ability sets, etc. to apply",
    "FortCalendarEventInventoryTransformData": "Structure representing a calendar event inventory transform",
    "FortCollectionBookXPData": "Structure representing a collection book XP data row",
    "FortCollectionBookSlotXPWeightData": "Structure representing a collection book XP weight factor row",
    "FortCollectionBookDirectPurchaseData": "Structure representing a collection book direct purchase data",
    "FortCollectionBookPageData": "Structure representing a collection book page",
    "FortCollectionBookPageCategoryTableRow": "Structure representing a collection book page category",
    "FortCollectionBookSectionData": "Structure representing a collection book section",
    "FortCollectionBookSlotData": "Structure representing a collection book slot",
    "FortCollectionBookSlotSourceData": "Structure representing a collection book slot source",
    "FortSurvivorNameData": "Structure representing a collection of survivor names",
    "TieredWaveSetCollection": "Structure representing a collection of tiered wave sets",
    "FortBotPassiveHealerActivityDataTableRow": "Structure representing a data row PassiveHealer Activity",
    "FortBotCosmeticItemDataTableRow": "Structure representing a data row cosmetic item information specific to bots",
    "FortLimitedAvailabilityBotCosmeticItemDataTableRow": "Structure representing a data row cosmetic item information specific to bots that can only be used if current date is between a range",
    "FortBotCosmeticItemSetDataTableRow": "Structure representing a data row cosmetic item set information specific to bots",
    "FortLimitedAvailabilityBotCosmeticItemSetDataTableRow": "Structure representing a data row cosmetic item set specific to bots that can only be used if current date is between a range",
    "FortSpeechBubbleDataTableRow": "Structure representing a data row for SpeechBubble data table",
    "FortConversionControlKeyCosts": "Structure representing a data row for points to tier conversion",
    "FortKeepAmmoStash": "Structure representing a data row housing Keep container loot",
    "FortKeepItemGroup": "Structure representing a data row housing Keep container loot",
    "FortKeepResourceGroup": "Structure representing a data row housing Keep container loot",
    "FortBotAugmentsDataTableRow": "Structure representing a data row housing augments information specific to bots",
    "FortItemInjectedBehaviorsDataTableRow": "Structure representing a data row housing behaviors linked to a specific item definition",
    "FortAthenaAIBotNameDataTableRow": "Structure representing a data row housing bot name",
    "FortWeaponDurabilityByRarityStats": "Structure representing a data row housing durability specified by rarity type",
    "FortBotItemDataTableRow": "Structure representing a data row housing item information specific to bots",
    "FortLoginReward": "Structure representing a data row housing login reward loot info",
    "FortLootLevelData": "Structure representing a data row housing loot drop information",
    "FortLootPackageData": "Structure representing a data row housing loot drop information",
    "FortLootTierData": "Structure representing a data row housing loot drop information",
    "LootPackageRow": "Structure representing a data row housing loot drop information",
    "LootTierDataRow": "Structure representing a data row housing loot drop information",
    "FortAIVisibilityDataTableRow": "Structure representing a data row housing visibility settings based on range for tags defined by a query",
    "FortBotBuildingContainerBlacklistDataTableRow": "Structure representing a data row of the BuildingContainer blacklist for bots",
    "PlayerAttributeClampRow": "Structure representing a data row with information for clamping a player attribute.",
    "ItemCollectorRow": "Structure representing a data row with information for individual item collector instances",
    "ItemCollectorOverrideItemRow": "Structure representing a data row with information for individual item overrides within an item collector",
    "WeaponUpgradeItemRow": "Structure representing a data row with information for weapon upgrades",
    "FortHarvestingToolMontageOverrideData": "Structure representing a gameplay tag + anim montage pair for use with pickaxes that don't use the standard animation",
    "FortNamedWeightRow": "Structure representing a named weight for loot rolls",
    "FortBotCosmeticLibraryWeightRegionOverrideDataTableRow": "Structure representing a regional override for cosmetic library weights",
    "FortSavedWeaponModSlot": "Structure representing a saved weapon mod slot.\n      This is only used for serializing weapon mod slots.",
    "TieredModifierSet": "Structure representing a set of tiered modifiers",
    "TieredWaveCollectionLootSet": "Structure representing a set of tiered starting and wave completion loot pulls",
    "TieredWaveSet": "Structure representing a set of tiered waves",
    "FortWeaponModSlot": "Structure representing a weapon mod slot on a weapon.\n      This is the primary runtime structure for working with weapon mod slots.",
    "FortAISpawnerTagQueryInjectedBehavior": "Structure representing an array of behaviors to be added if the tag query is matched by the ai spawner data tags of an AI",
    "FortEquippedWeaponModSlot": "Structure representing an equipped weapon mod.",
    "HomebaseBannerColor": "Structure representing art data for a single homebase banner \"color\"",
    "FortAthenaAIBotNameRegionData": "Structure representing bot names associated to a specific region",
    "FortPlayerDeathReport": "Structure representing data necessary to provide a report on a player pawn's death",
    "FortMaterialProgressBarSectionInfo": "Structure representing design and run-time values for an individual progress bar piece within the overall bar",
    "TieredWaveSetCollectionData": "Structure representing requirements to select a tiered wave set",
    "MetricStateInformation": "Structure representing the current state of a metric for a specific AFortVolume (island)",
    "CatalogPurchaseInfo": "Structure representing the parameters needed to make a purchase in virtual currency",
    "CatalogPurchaseInfoGift": "Structure representing the parameters needed to make a purchase in virtual currency",
    "FortRangedWeaponStats": "Structure representing the specific stats/attributes for ranged weapons",
    "FortBaseWeaponStats": "Structure representing the stats/attributes common to all types of weapons",
    "FortSubgameClientSettings": "Structure saved to FortMcpProfileAccount that saves client settings.",
    "FortWorldPlayerLoadout": "Structure saved to FortMcpProfileWorld, is synched along with inventory",
    "FortBotReservedLoot": "Structure that contains a loot id reserved by a bot",
    "FortMovementMode_BaseExtRuntimeData": "Structure that contains all the data that could change during the execution on a movement mode extension logic",
    "FortMovementMode_BaseExtCreationData": "Structure that contains all the data that is needed at the creation of the runtime",
    "CreativeMatchmakingRequest": "Structure that contains data needed to Create a Matchmaking Request\nand to track the Timer Handle that can be created if Throttle time didn't finish on Request Creation",
    "PlayspaceUser": "Structure that contains data required to track and manage a single user in the Playspace system.",
    "FortBotTeamInfoAthena": "Structure that contains information for bots of a same team",
    "FortIronCityDifficultyData": "Structure that defined the IronCity account level to difficulty and loot levels and stat clamps",
    "AthenaReengagementRestedXp": "Structure that defines Re-engagement rested xp",
    "FortCreativeServerDisplayOption": "Structure that defines a Creative Server visual display options",
    "FortQuestMapCosmetic": "Structure that defines a cosmetic art piece",
    "AthenaLevelUpData": "Structure that defines a level up table entry",
    "FortLevelUpDataV2": "Structure that defines a level up table entry",
    "StatNamesToTrack": "Structure that defines a level up table entry",
    "AthenaMidSeasonUpdate": "Structure that defines a mid-season definition update - mid season updates will be evaluated once per athena profile",
    "FortMissionAlertData": "Structure that defines a mission alert table entry",
    "FortQuestMapPage": "Structure that defines a page for the QuestMap",
    "FortQuestMapNode": "Structure that defines a quest node for the QuestMap",
    "AthenaRewardScheduleLevel": "Structure that defines a reward schedule level",
    "AthenaSeasonBannerLevel": "Structure that defines a season bannerlevel",
    "AthenaSeasonTitleEntry": "Structure that defines an Athena Season specification for every Chapter & Season Title\nEach Row Name should match an Internal Season Number used in development (I.Ex. Season 24 -> Chapter 4 Season 2)",
    "AthenaSeasonalXPCurveEntry": "Structure that defines an Athena account XP curve (either seasonal XP or seasonal BP)",
    "CosmeticLoadoutSlotRequirements": "Structure that defines basic requirements for item",
    "AthenaDynamicRestedXpProgression": "Structure that defines dynamic rested xp multiplier and usage values.  For season based golden path 'catch up'",
    "CustomLootOverrideData": "Structure that defines how to override the loot tables of a playlist",
    "AthenaDynamicRestedXpGoldenPath": "Structure that defines season progression 'golden path' for dynamic rested xp multiplier and usage values.  For season based 'catch up'",
    "AthenaExtendedXPCurveEntry": "Structure that defines the XP amounts for levels > 100 in XpOnlySeasons - in these seasons, BP and season XP are mapped identially",
    "FortQuestMapPageCosmetics": "Structure that defines the cosmetics for QuestMap page",
    "BuildingContainersArrayEntry": "Structure that defines the members for each entry in the Building Containers array\n in the Building Containers Found array. This information is used to identify the\n the Loot involved with each Building Container to limit, update, and respawn that Loot.",
    "BuildingContainersFoundEntry": "Structure that defines the members for each entry the Building Containers Found array",
    "FortPhoenixLevelRewardData": "Structure that defines the requirements and rewards for Phoenix / seasonal levels",
    "FortPostMaxPhoenixLevelRewardData": "Structure that defines the rewards for level-ups post max Phoenix / seasonal level",
    "FortPostMaxAccountLevelRewardData": "Structure that defines the rewards for level-ups post max account level",
    "ChromeRoute": "Structure that defines the route of a particular race.",
    "FortWeaponAlterationRarityMappingData": "Structure that defines the weapon perk level mapping",
    "VoteSelectionSettings": "Structure that describes a single possible selection for a vote",
    "CosmeticCustomizationInfo": "Structure that describes what customization options a player has chosen in a cosmetic slot. Simple customizations\nmay simply have a player choose an \"active variant\" in a specific \"variant channel\" but more complex customizations\nmay store data in the additional data string (e.g. color)",
    "RawPointToLastServerIndexPlusAlpha": "Structure that gets added to a TArray as raw points are added on the server.  The integer part represents the LastServerIndices.  The decimal part represents alpha factor (coef along the next Server Index.\n  Setup on the server only.",
    "FortPlayerControllerGameplay:VehicleTrickInfo": "Structure that holds info for players performing tricks on vehicles.",
    "QuestItemDefComponentEditorRow": "Structure that maps row names to quest item def component editors",
    "TagQueryTableRow": "Structure that maps row names to tag queries",
    "NamedWeightTableRow": "Structure that maps tag query names to scale values",
    "HomebaseRatingDifficultyMappingData": "Structure that maps the Homebase Rating to the approximate Difficulty Level",
    "ScriptedObjectMovement_Grid": "Structure that represents a 3d grid that AFortScriptedObjectMovement_MovableObjectBase objects can move through.",
    "FortUIFeedback": "Structure that represents a single piece of UI feedback",
    "FortUIFeedbackBlueprintOnly": "Structure that represents a single piece of UI feedback definable in data only",
    "FortFeedbackHandle": "Structure that represents a single piece of feedback",
    "FortFeedbackLine": "Structure that represents a single piece of feedback",
    "FortFeedbackResponse": "Structure that represents a single piece of feedback",
    "StateChangeData": "Structure that represents a state transition and defines what will be replicated to the client on behalf of a FAuthorativeStateTreeData\n   Each StateTree \"that wants to replicate from the server to the client\" will have one of these and is linked via each struct's StateTreeDataHandle",
    "BagelScoreData": "Structure that represents scoring data for Bagel LTM",
    "MashScoreData": "Structure that represents scoring data for mash LTM",
    "DaySequenceBindingReferences": "Structure that stores a one to many mapping from object binding ID, to object references that pertain to that ID.",
    "UraniumSingleRoundInfo": "Structure that stores information about an individual round",
    "VoteRuntime": "Structure that tracks all of the runtime data for a single vote (implemented as a fast array item)",
    "VoteSessionRuntime": "Structure that tracks the runtime of an entire voting session (implemented as a fast array)",
    "VoteSelectionResults": "Structure that tracks the voting results for a single selection",
    "FortFeedbackEventData": "Structure to an individual piece of feedback and the circumstances it plays under",
    "ServerExpirationAlertData": "Structure to configure data for sending alerts to clients",
    "ServerMigrationAlertData": "Structure to configure data for sending alerts to clients",
    "SBMusicalTargetsCueId": "Structure to hold information about a cue appearing on a target and when it should musically arrive.",
    "ControlPointInstanceData": "Structure to keep track of data about disco control points at run time once spawned",
    "HeistExitCraftData": "Structure to keep track of data about exit crafts at run time",
    "BagelObjectiveAreaInstanceData": "Structure to keep track of each area players have to go through to complete the mode",
    "MashObjectiveAreaInstanceData": "Structure to keep track of each area players have to go through to complete the mode",
    "VoteResponderComponent:PlayerCastedVotesMap": "Structure to map players to the casted votes they've made on this responder",
    "BagelLootTierOverrideAssetData": "Structure to override loot tier group for specific safezone index",
    "MashLootTierOverrideAssetData": "Structure to override loot tier group for specific safezone index",
    "FortTournamentStatInfo": "Structure to pass tournament-specific stat information around.",
    "GCSettingsOverride": "Structure to store data that allows us to adjust GC settings per playlist",
    "EventResponderTrackingItem": "Structure to store shared mesh event names and the EvenResponders that are registered to use them",
    "FortTrapStats": "Structure to store the damage stats of a trap",
    "FortMeleeWeaponStats": "Structure to store the stats of a melee weapon for use in a UDataTable",
    "ControlPointSpawnData": "Structure used for configuring how a control point will spawn",
    "FortAthenaMutator_SurvivalObjectiveData": "Structure used for setting up the Survival Objective",
    "ControlPointAssetData": "Structure used for setting up the assets of a control point",
    "FortValidationData": "Structure used solely by the UBaseValidationDataRepository to store validation information",
    "FortCharacterCustomization": "Structure used to bundle customization data to be applied to the character",
    "ActorOwnedStateTreeConfig": "Structure used to configure the creation and management of a StateTree on an Actor",
    "VoteSelection": "Structure used to define a possible vote that can be selected in a responder\nNOTE: this is used to define a single possible selection within a responder and is set in the responder in the editor or during \"vote setup\" time",
    "CastedVote": "Structure used to define a vote casted by a player\nNOTE: this is a runtime structure that is used to track a selection a player has made",
    "SpawnBuildingActorParameters": "Structure used to hold information to respawn actors for Level Reset",
    "BonePlayerDamageMultiplier": "Structure used to map bones to a damage multiplier",
    "ItemLoadoutTeamMap": "Structure used to map team indexes to loadouts",
    "ScoutDroneStatusData": "Structure used to replicate changes in target marking status + when they happened",
    "ReplicatedSharedPlayerAugment": "Structure used to replicate the source player of a shared player augment to the client.",
    "AttachedBuildingActorGuids": "Structure used to save list of Attached Building Actor Guids to reattach to ParentToAttachto",
    "FortMaterialProgressBarSectionStyle": "Structure with style options for a progress bar section",
    "FortMaterialStyleApplyParams": "Structure wrapping up all parameters required when applying a material style to a target",
    "FortPartyMemberRepData:AthenaCosmeticLoadout": "Stuff that could come from the Athena profile, but we don't query the profile of remote party members\n     If the stuff here begins to swell significantly, we should consider storing equipped cosmetics in their own profile and querying that for all party members",
    "FortBaseWeaponStats:StunTime": "Stun time",
    "FortEarlyAcessLoadingScreen:EATextStyle": "Style of loading Text",
    "FortLoadingBlockScreen:LoadingTextStyle": "Style of loading Text",
    "ChatChromeMargins": "Style used for chat container in Social.",
    "ChatChromeStyle": "Style used for chat container in Social.",
    "ChatMarkupStyle": "Style used for chat markup in Social.",
    "SocialFontStyle": "Style used for fonts in the social system",
    "ChatChromeColorScheme": "Style used for setting chat colors.",
    "ChatColorScheme": "Style used for setting chat colors.",
    "SocialSoundSchema": "Style used for setting chat colors.",
    "SocialListMargins": "Style used for the Friends list in Social.",
    "SocialListStyle": "Style used for the Friends list in Social.",
    "ChatStyle": "Style used for the chat windows in Social.",
    "PriorityOrderedConditionalStyleList:Styles": "Style variants which require the subject actor to meet certain requirements, can be assigned here",
    "CreativeRichTextData:RichTextStyleSet": "Styles data table (row type RichTextStyleRow)",
    "FortUIStyleDefinition:WindowButtons": "Styles for the buttons in the title bar (upper-right corner of the window).",
    "FortPlayerInputSettings:SubDescription": "Sub description describing the settings",
    "PartyFailureLogSubmitReason:SubReason": "Sub reason to submit a log (or blank for all sub reasons for the major reason)",
    "BundleGoalCardDisplayData:SubHeaderColor": "SubHeader text color",
    "FortAttributeInitializationKey:AttributeInitSubCategory": "Subcategory for the look-up, if any",
    "UserOptionCategoryTagPreset:CategoryName": "Subcategory within \"UserOptions\" that this preset corresponds to.",
    "FortAthenaMutator_OverrideInventoryOnce": "Subclass of InventoryOverride which only applies until the inventory has been replaced once.",
    "MutableObjectiveExtension_TrackedData:SubjectToTrackedDataMapping": "Subject -> MutableTrackedData",
    "FortSupplyDropGamePhaseData:SubPhaseData": "Subphase data required for SupplyDrops during this phase",
    "SupplyDropZoneBasedSpawnData:CurrSubPhase": "Subphase index of the GamePhase most recently spawned in",
    "EMcpSubscriptionState.Active": "Subscription active and current month payment completed",
    "EMcpSubscriptionState.RewardsDelayed": "Subscription active but MCP fails to claim the rewards on time for reasons other than payment or auth",
    "EMcpSubscriptionState.PaymentProcessError": "Subscription active but current month payment failed",
    "EMcpSubscriptionState.PlatformAuthError": "Subscription active but needs player to login on subscription platform to give benefits",
    "EMcpSubscriptionState.NotAutoRenewable": "Subscription active but no recurring payment instrument was set",
    "CreativeDeviceSubscription": "Subscription data needed for the device details",
    "EMcpSubscriptionState.Inactive": "Subscription disabled",
    "EMcpSubscriptionState.Canceled": "Subscription disabled but current month not expired",
    "ESettingType.AntiAliasing": "Subsetting of VideoQuality",
    "ESettingType.Effects": "Subsetting of VideoQuality",
    "ESettingType.PostProcessing": "Subsetting of VideoQuality",
    "ESettingType.Shadows": "Subsetting of VideoQuality",
    "ESettingType.Textures": "Subsetting of VideoQuality",
    "ESettingType.VSync": "Subsetting of VideoQuality",
    "ESettingType.ViewDistance": "Subsetting of VideoQuality",
    "SparksMusicPlayspaceAudioState": "Subsystem for managing audio state across multiple decks and instruments",
    "BuildingGameplayActorSpawnMachine:RebootResourceStatusFormatSubText": "Subtext format for reboot resource status on interaction prompt\n              e.x. \"Gold   {0} / {1}\", where 0 is owned resource count and 1 is resource cost",
    "PIPVideoPlayerAssetConfig:SubtitleOverlays": "Subtitle overlays for SubtitlePlayer",
    "PIPVideoPlayerAssetConfig:SubtitlePlayer": "Subtitle player reference",
    "CustomAccessoryMorphs": "Subtypes of UCustomCharacterAccessoryData can simply add a substruct of this\nto allow a morph to be applied to the part's associated mesh. As many of these\ncan exist as is needed for any particular type of head....\n\nArrays are not supported and these properties must be top-level.",
    "EMatchmakingState.JoinSuccess": "Successful join (end state machine)",
    "EFortMissionStatus.Succeeded": "Successfully cleared",
    "EFortObjectiveStatus.Succeeded": "Successfully cleared",
    "EFortPartyMemberLocation.InGame": "Successfully in the game",
    "EAdHocSquads_SquadUpResult.Success": "Successfully joined the squad",
    "ELoginResult.Success": "Successfully logged in",
    "EPointLightDeviceModes.ShortCircuit": "Sudden flashes of high and low intensity values",
    "SafeZoneOrderOptimizeMutatorRouteOrder:TotalDistance": "Sum of the distances between each route",
    "FortGameFeatureStatusBase:ProgressSummary": "Summary of progress for WebUI",
    "AccountIdAndScore:IndividualContribution": "Summed Combat, Building, Utility score of this player. Used by anti-leecher system.",
    "EFortDamageZone.Vulnerability": "Super-critical damage / special damage.  Meant for \"special\" weak spots such as the Smasher Monkey Butt (when Headshots still exist but are separate)",
    "CachedSupplyDrop:SupplyDrop": "Supply drop",
    "BuildingGameplayActorSupplyDropRadio:IgnoreMovingCollisionWithActorTagQuery": "Supply drop ignores movement collision with any actor containing gameplay tags that pass this query.",
    "FortAthenaMutator_Heist:RemainingSupplyDropSpawnIndexes": "Supply drop spawn indexes remaining for use",
    "ESupplyDropSpawnLocationPolicy.SafeZone": "Supply drops will be placed anywhere within the current safe zone",
    "ESupplyDropSpawnLocationPolicy.RadiusAroundLocation": "Supply drops will only be placed within a specified distance of the NPC",
    "FortAthenaMutator_OverrideSupplyDropRadius:SupplyDropRadius": "Supply drops will spawn within this radius of the safe zone center.\n     < 0 for do NOT override and use normal supply drop radius.",
    "BattleMapPawnLive:TimeIndicatorClass": "Support Classes",
    "BattleMapPawnReplay:TimeIndicatorClass": "Support Classes",
    "VkProjectOwnerInfo:Brand": "Support a Creator (SAC) slug associated with the owner's account\nIf empty, the user has no publishing rights",
    "VkTeamOwnerInfo:Brand": "Support a Creator (SAC) slug associated with the owner's account\nIf empty, the user has no publishing rights",
    "FortPlayerCameraBase:CameraPrototypes": "Support for Camera Prototypes for testing.",
    "FortAthenaMutator_ExternalEmote:DynamicEmotes": "Support for dynamic emotes based on global mappings",
    "ELevelSaveRecordVersion.AddedPlayerPersistenceUserWipeNumber": "Support for users to be able to wipe player persistence for their islands",
    "EAutoRenewState": "Supported auto renew state of the subscription.",
    "FortReplicatedVehicleOverrideDataContainer": "Supporting struct for fast array serialization of the replicated vehicle override data",
    "BulletWhipTrackerSystem": "Supports registering whip sounds without requiring component creation on another item\nData is held in the System, not on the source object, that way the items do not each need to front the load of the UBulletWhipTrackerAudioData",
    "FortPickup:bSuppressInteractionWidget": "Suppress the interaction widget entirely regardless of pickup state",
    "FortSurfaceDamageRatioByAffiliationStats:Friendly": "Surface ratio for friendly targets",
    "FortSurfaceDamageRatioByAffiliationStats:Hostile": "Surface ratio for hostile targets",
    "FortSurfaceDamageRatioByAffiliationStats:Neutral": "Surface ratio for neutral targets",
    "FortSurfaceDamageRatioStats:Default": "Surface ratio row name for default target",
    "FortSurfaceDamageRatioStats:AIEntity": "Surface ratio row name for target with AI entity surface",
    "FortSurfaceDamageRatioStats:Explosive": "Surface ratio row name for target with explosive surface",
    "FortSurfaceDamageRatioStats:HumanEntity": "Surface ratio row name for target with human/player surface",
    "FortSurfaceDamageRatioStats:Metal": "Surface ratio row name for target with metal surface",
    "FortSurfaceDamageRatioStats:Objective": "Surface ratio row name for target with objective surface",
    "FortSurfaceDamageRatioStats:Stone": "Surface ratio row name for target with stone surface",
    "FortSurfaceDamageRatioStats:SupernaturalStructure": "Surface ratio row name for target with weak-spot metal surface",
    "FortSurfaceDamageRatioStats:WeakSpot_Metal": "Surface ratio row name for target with weak-spot metal surface",
    "FortSurfaceDamageRatioStats:WeakSpot_Stone": "Surface ratio row name for target with weak-spot stone surface",
    "FortSurfaceDamageRatioStats:WeakSpot": "Surface ratio row name for target with weak-spot surface",
    "FortSurfaceDamageRatioStats:WeakSpot_Wood": "Surface ratio row name for target with weak-spot wood surface",
    "FortSurfaceDamageRatioStats:Wood": "Surface ratio row name for target with wood surface",
    "FortSpicySakeGameplayCueNotifyLoop_Alive:SoundSurfaceTypeCount": "Surface type count",
    "FortCreativeDiscoveryTestCohort": "Surfaces are made up of 1-to-N test cohorts.\nCohorts are selected based on a given determinisim level.\nEach cohort defines what content is presented and by what means.",
    "FortPlayerSurveyCMSSurvey": "Survey data structured for use with CMS",
    "EAthenaScoringEvent.SurvivalInMinutes": "Survived an amount of minutes",
    "EFrontEndCamera.SurvivorSquadBuilding1": "Survivor squads",
    "FortValetAudioController:SpringCompressionMultiplier": "Suspension category",
    "EAnimInstanceClassSwapType.SwapOnMatch": "Swap if AnimInstanceClassToSwap matches AnimInstanceClass used by the mesh component being modified",
    "DigestedVehicleDriving:bReverseSwapLeftAndRight": "Swap left and right for reverse",
    "VehicleDriving:ReverseSwapLeftAndRight": "Swap left and right for reverse",
    "MeshVariant": "Swaps a skeletal mesh with an override skeletal mesh. Additionally provides optional functionality to\nswap an AnimInstance with an override AnimInstance on the same component where the skeletal mesh was swapped",
    "FortPlayerPawn:SwimmingAudioLoop": "Swimming audio properties",
    "EPointLightDeviceModes.Party": "Switch between colors",
    "ELevelSaveRecordVersion.UsingSaveActorGUID": "Switch to using SavedActorGUID which is a GUID instead of the Actor FName for unique identification.",
    "EComboSlotType.Creative": "Switches between quickbar slots depending on build mode state.",
    "ELevelSaveRecordVersion.SwitchingToCoreSerialization": "Switching to Use core UProperty Serialization.",
    "EDeathCause.SilentSwitchingToSpectate": "Switching to spectator from a living player.",
    "EDanceBeatSyncMode.Music": "Sync the emote play rate and position to a source of music.",
    "EDanceBeatSyncMode.Tempo": "Sync the emote play rate to a fixed tempo.",
    "FortWeaponPickaxeDualWieldAthena:PickaxeOffhandEquipMontage": "Sync'd montage to play on the off-hand pickaxe when equipping.",
    "FortWeaponPickaxeDualWieldAthena:PickaxeOffhandHarvestingMontage": "Sync'd montage to play on the off-hand pickaxe when harvesting.",
    "FortWeaponPickaxeAthena:PickaxeHarvestingMontage": "Sync'd montage to play on the pickaxe.",
    "FortMovementComp_Character:SynchedActionInfo": "Synched Action Info",
    "ManagerSynergyData:SynergyTypeTag": "Synergy type",
    "VkTeamDoc:SysMeta": "System metadata",
    "VkProjectDoc:SysMeta": "System metadata, blank except for super-user requests",
    "VkProjectInfoSlim:SysMeta": "System metadata, blank except for super-user requests",
    "VkProjectSearchResult:SysMeta": "System metadata, blank unless client has sysmeta READ access",
    "FortCreativeDynamicXpComponent:XpCalculator": "System that calculates amount of xp player should get.",
    "CatalogOfferRequirementEditor:ItemTemplateIdOnlyHack": "TEMP (1/30/2017): just store the TemplateId. We can export this, but further editing would require setting an Item",
    "FortAthenaMutator_Barrier:BigBaseWall": "THE WALL",
    "FortAthenaMutator_Barrier:BigBaseWallClass": "THE WALL CLASS",
    "FortGameplayCueNotify_Loop": "THIS REPLACES FortGameplayCueNotify_Looping\n   This is the standard Fort GameplayCue Notify for all looping, duration based cues.\n   Anything that has a duration: a distinct start and stop which is defined by the game and not the gameplay cue's assets should use this class.\n\n   Additional features can be built into this class. Anything that is standard and easily defined completey in data is a good candidate. Any new\n   thing added should fit into the Application/Looping/Recurring/Removal categories. (E.g., do NOT make new categories or put things outside the\n   existing stucture of this class).\n\n   Naming within this class diverges a bit from the rest of the gameplay cue system. For example WhileActive is referred to as Looping within the class.\n   These names were chosen as they make the most sense to the FX creators on the development team. Any designer facing features should use these names.",
    "FortAthenaMutator_CreativeCombineMinigameStats:StatEventFilter": "THe new stat event to generate",
    "FortQuestMapCosmetic:CosmeticType": "THe type of this cosmetic element",
    "FortPawn:PrioritySoundIndicatorTypes": "TMap to associate SoundIndicatorTypes to an AudioPriority",
    "TimeOfDayController_BlueprintBase:TODM": "TODM Actor pointers",
    "TimeOfDayController_BlueprintBase:FogCutoffDistance": "TODM Controller settings\nFog",
    "EFortEncounterSpawnLocationPlacementMode.Custom": "TODO",
    "EFortEncounterSpawnLocationPlacementMode.Max_None": "TODO",
    "EFortEncounterSpawnLocationPlacementMode.Volume": "TODO",
    "FortAnimInput_DBNOCarried:CarrierInterrogationMontage": "TODO (@aaron.cox): We shouldn't reference montages from the player animbp like this. We're planning to refactor to use the existing montage syncing feature.",
    "ControllerComponent_Quests": "TODO @matthew.barry - this should probably be a FN component vs a core component for now",
    "EPersistenceFrameworkExecutionOption.EPersistenceFrameworkActionQueueOptions_MaxFlags": "TODO Add ExecuteInParalell",
    "FortAthenaLoadout:Backpack": "TODO COSMETICS DRB: This variable ought to be removed, but I need to do a search to ensure it's not ever actually used and talk to BR folks to confirm.",
    "FortGameplayDataTrackerComponent:DataAccumulations": "TODO Combine registered accumulations",
    "MaterialParamName": "TODO Lietz change to more generic name to support particles better and not be confusing... FBaseNameParam",
    "MaterialVectorVariant": "TODO Lietz change to more generic name to support particles better and not be confusing... FColorParamVariant",
    "MaterialFloatVariant": "TODO Lietz change to more generic name to support particles better and not be confusing... FFloatParamVariant",
    "MaterialTextureVariant": "TODO Lietz change to more generic name to support particles better and not be confusing... FTextureParamVariant",
    "FortMission_ActiveThreat:CurrentActiveThreatEncounterIndex": "TODO Necessary?",
    "FortTheaterMapTile": "TODO Still need to cleanup a lot of the old code for locking/replication copied over from the old class",
    "EMarkableResult": "TODO We should eventually replace UFortSpottableActorInterface with this interface instead.",
    "CombinedFeatureProgressSummary": "TODO Workstreams: Remove this and the associated GetGameFeatureProgressSummary and what it's used for as its mostly Kairos stuff\nthe non-Kairos stuff can be moved over to a new progress flow.",
    "IrwinAIController": "TODO delete this",
    "FortActiveThreatPlayerData:PlayerController": "TODO should we save this by player ID or RegisteredPlayerInfo?",
    "StormWind": "TODO: Add all needed replication functions to handle remove, add, update!",
    "FortWindResponderMaterialVariablePairData:MaterialVariableIndex": "TODO: Can we remove the names from this structure?  We're using them at registration time right now, but they may be able to be\nlocal variables.  After that, we use the indices and don't need the names.\nNOTE: This is the index into the array of parameter names on the FortThreatVisualsManager, NOT the index in the material.",
    "FortAIPawn:RequiredWeaponPickupTag": "TODO: Delete this obsolete property as soon as it's confirmed to no longer being used.",
    "FortWindResponder:MildWindMaterialInstances": "TODO: Do I need to track which variables are in each instance?  Ask Jon if some materials just have some\nvariables or if usually they all have most/all.",
    "EPlayerSettingStateInternal": "TODO: Find a better way to bind native enums to verse enums",
    "EFortVolumeType": "TODO: I cannot rename this because it is a blueprint type. So take the time to do the un-fun rename in BP when it fits into the schedule.",
    "MaterialParamterDef": "TODO: Lietz rename to FMaterialParamterVariantData",
    "MaterialParamterDef:MaterialToAlter": "TODO: Lietz turn this into an array to clean up duplication of data in the variant system",
    "MaterialVariants:OverrideMaterial": "TODO: Lietz turn this into an array to clean up duplication of data in the variant system",
    "ParticleParamterVariant:ParticleSystemToAlter": "TODO: Lietz turn this into an array to clean up duplication of data in the variant system",
    "SocketTransformVariant:SourceObjectToModify": "TODO: Lietz turn this into an array to clean up duplication of data in the variant system",
    "FortDagwoodCmd:AccelerationAlpha": "TODO: Move acceleration alpha calculation into the sim",
    "FortPickupsParent:ComponentRadiusScaled": "TODO: Move this to AFortPickupEffect and refactor affected BPs",
    "FortPickupsParent:LifetimePickedUp": "TODO: Move this to AFortPickupEffect and refactor affected BPs",
    "FortPickupsParent:PickedUpTrailPS": "TODO: Move this to AFortPickupEffect and refactor affected BPs",
    "FortPickupsParent:PickupForceFeedback": "TODO: Move this to AFortPickupEffect and refactor affected BPs",
    "FortPickupsParent:SparkleSpawnRatePickedUp": "TODO: Move this to AFortPickupEffect and refactor affected BPs",
    "FortAnimInput_TurnCorrection": "TODO: Move this to FortAnimTypes or FortAnimInputs. Keeping it here for now to save on build times.\nFor turn animations (e.g. 180 starts and pivots), the capsule will cause foot sliding as it turns. We counter rotate the capsule rotation to match the animated rotation.",
    "FortAIGoalManager:DefaultAttackPlayersAssignment": "TODO: PawnAssignments should replace this assignment with appropriate enemy generator.  Consider removing this\nproperty and deprecating and deleting it.  At the very least, this should be \"AttackEnemies\" instead.",
    "PreviewUnlockData:bPaysForSelf": "TODO: Refactor and move this to the Battle Pass Screen now that purchase buttons are on the track view",
    "EVehicleInitialOverlapBehavior": "TODO: Right now, DestroyWhenVehicleOccupied and DestroyIfBackingInto only work for DagwoodVehicle.\n      Should move that noise into the vehicle base class.",
    "PlayArgs:mixPreset": "TODO: This is not a great place to put this. It would be better down\nin PlayStreamArgs or something, but for the moment it has to go here\nso that the mogg started by the MoggMusicGenerator can get to it :-( [BUZZ]",
    "ReplicatedAttachParams:Hit": "TODO: This property is a lot to sync. We don't need it all - maybe not any of it.",
    "FortAIGoalManager:WorldEnemyAssignments": "TODO: Use PawnAssignments to \"replace\" WorldEnemyAssignments and deprecate and remove this variable.\n\"World\" Enemy assignments, which should only be chosen based on enemy distraction.\nSerialized, because they can change dynamically from blueprints, etc.",
    "FortPlayerControllerAthena:OnAircraftStateChange": "TODO: Vritvij.Kadam Remove and replace this by the delegate in the aircraft component once the code changes are checked in",
    "FortCommonMatchmakingData_State": "TODO: Write a new specifier: USTRUCT(PhaseCommitable) to generate '_State', '_Coordinator', and '_Participant' structs",
    "FortMatchmakingMemberData_State": "TODO: Write a new specifier: USTRUCT(PhaseCommitable) to generate '_State', '_Coordinator', and '_Participant' structs",
    "FortPlayerSettingsComponentBase:MaxHealthAlt": "TODO: josh.may - Remove after moving these options to Shared Settings.",
    "EFortItemCollectorState": "TODO: reevaluate these as I am not sure they fit any more...",
    "RockVehicleAbility_Boost:BoostAccel": "TODO: scale to fortnites physics values",
    "FortAthenaTutorial_Move:JumpMarker": "TODOTUTO\nUPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Move Tutorial Screens\")\nTSubclassOf<UFortAthenaTutorialScreen> ScreenUseLeftStick;\n\nUPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Move Tutorial Screens\")\nTSubclassOf<UFortAthenaTutorialScreen> ScreenMoveToBuilding;\n\nUPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Move Tutorial Screens\")\nTSubclassOf<UFortAthenaTutorialScreen> ScreenJump;\n\nUPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Move Tutorial Screens\")\nTSubclassOf<UFortAthenaTutorialScreen> ScreenCrouch;",
    "FortPlayerConversationUIComponent:DialogWidgetPool": "TOOD: Get rid of this widget pool when we've got a clean API for markers/indicators",
    "FortWindResponder:WindSpeedCurve": "TSoftObjectPtr<UCurveLinearColor> WindSpeedCurve;",
    "MashTableRowPoiRoute": "Table Row data about a Mash POI Route. Contains randomized weight information and an ordered list of POI Objectives to use.",
    "FortHeistDisplayCaseItemDataTableRow": "Table Row for heist display case items.",
    "FortNonPlayerConversationParticipantComponent:GiftItemInventory": "Table defining specific items which can be awarded by the \"Athena.Quests.TandemGift.Item\" gift type\nThis is set to override the defaults that are in AthenaSeasonItemDefinition.",
    "BuildingItemCollectorActor:ItemCollectorHandle": "Table entry from which to read item collector data.",
    "MinigameHighScoreRow:HighScoresTable": "Table from which to read the high scores.",
    "ItemCollectorRow:OverrideItemsTable": "Table from which to read the item collector overrides.",
    "CreativeToolObjectInteractionRow:AllowedClasses": "Table from which to read the permitted classes.",
    "FortBaseWeaponStats:Durability": "Table look-up for durability based on rarity",
    "FortNonPlayerConversationParticipantComponent:Gifts": "Table mapping Service provider tags (e.g. \"Conversation.Entry.Jonesey\" to the gift types offered e.g. \"Athena.Quests.TandemGift.Item\")\nThis is set to override the defaults that are in AthenaSeasonItemDefinition.",
    "FortAthenaMutator_Mash:PoiRoutesDataTable": "Table of FMashTableRowPoiRoute rows that lists potential POI routes to use for a Mash game.",
    "HomebaseSquadSlot:PersonalityMatchBonusTable": "Table of bonus magnitudes given by a crew member in this slot if his personality matches the squad manager",
    "NPCServicePricingKeyRemapRow": "Table row containing data which provides the ability to remap a service pricing key for a specific NPC/Service Provider\nThis allows certain NPCs e.g. a specialist NPC (medic/heavy etc) to override which entry we look up in a pricing table without\nrequiring fragmentation the pricing table assets themselves into various override versions.\ne.g. If given a pricing key of \"HireNPC\" Remap this to \"HireNPC.Specialist\" before resolving the price",
    "HomebaseNodeGameplayEffectDataTableRow": "Table row for specifying homebase node-provided gameplay effect data",
    "FortMigrationDataTableRow": "Table row for specifying migration data",
    "FortGameStateZone:ScoringTableRowName": "Table row name to use in the global scoring multiplier table",
    "FortPawnComponent_PassiveHealer:OverrideLootInfo": "Table row with all info about loot when an AI dies. Should it drop inventory, loot tables, etc.",
    "FortPoiManager:FortPoiGridCellsTagContainerTableIds": "Table the size of FortPoiGrid.GridCountX * FortPoiGrid.GridCountY",
    "FortPoiManager:FortPoiGridCellsLargeVolume": "Table the size of FortPoiGrid.GridCountX * FortPoiGrid.GridCountY\nThis is filled at build time for creating the acceleration table, PoiTagContainerTable",
    "TagRestrictedTable:SoftTablePtr": "Table to load based on associated tags",
    "FortPOIInjector:ChallengeMapPoiDataToAdd": "Table to which to add our POI info",
    "FortGameModeAthena:ScorePlacementTables": "Tables for scores earned at placement indexes; must be kept in sync with MCP Java code!",
    "FortGameFeatureDataBaseCurveTableOverrides:PlaylistToOverrideTableMap": "Tables that override the base table for a given playlist. Hotfixes should target these override tables to hotfix per-playlist.",
    "FortGameFeatureDataBaseDataTableOverrides:PlaylistToOverrideTableMap": "Tables that override the base table for a given playlist. Hotfixes should target these override tables to hotfix per-playlist.",
    "FortPlayerAnimAssets:TacticalStateAnimAsset": "Tactical state asset",
    "EncounterVarRow_TagQuery": "Tag Query Encounter Variable row",
    "TagRestrictedTable:TagQuery": "Tag Query that must match for this table to be loaded.",
    "FortAIEncounterRequirements:TagQuery": "Tag Query to pass on encounter/zone context tags",
    "FortPawnComponent_Mud:CreatureSprintingTag": "Tag a ridable creature has when sprinting",
    "FortAthenaMutator_Mash:RiftDamageDealtByPickaxeQuestTag": "Tag added to the SendStatEventWithTags SourceTags input when a player deals damage to a rift portal using a pickaxe.",
    "FortAthenaMutator_Mash:VictoryQuestTag": "Tag added to the SendStatEventWithTags SourceTags input when a player wins the game.",
    "FortAthenaMutator_Mash:StreakMultiplierKillCountQuestTag": "Tag added to the SendStatEventWithTags SourceTags input when a player's streak multiplier increases.",
    "FortAthenaMutator_Payback:ShowPaybackHUDTag": "Tag applied to the player when we mark them for payback that shows the marker UI in their HUD",
    "FortWorldMarkerData:MarkerTag": "Tag associated with the marker, if applicable",
    "FortCustomCameraController:CameraModeTag": "Tag associated with this camera style",
    "QuestCategoryHeaderData:HeaderTag": "Tag associated with this header. A quest must have this tag to appear under this header.",
    "FortPlayerPawnAthena:FastReplicationReplicatedLooseTags": "Tag container for replicating to clients",
    "GameHubPlayerSpawningComponent:PlayerStartRequirements": "Tag container of requirements for being able to use a player start for spawning",
    "GameHubPlayspace:PlayerStartRequirements": "Tag container of requirements to set on the spawning component which dictate which spawners can be used for the hub",
    "FortAIBaseLootDropRow:AITagsContainer": "Tag container populated with CategoryTags on import",
    "FortAILootDropModifierRow:AITagsContainer": "Tag container populated with CategoryTags on import",
    "FortMissionAlertCategoryData:CategoryTagsContainer": "Tag container populated with CategoryTags on import",
    "FortMissionAlertCategoryData:VisualizationTagsContainer": "Tag container populated with CategoryTags on import",
    "TokenType:TagContainer": "Tag container to identify this token type",
    "TokenProviderPositioningData:TagContainer": "Tag container to tag this EQS",
    "FortAthenaMutator_Ashton:JimInventoryTag": "Tag corresponding to Jim in someone's inventory",
    "FortAthenaMutator_Carmine:JimInventoryTag": "Tag corresponding to Jim in someone's inventory",
    "FortAthenaMutator_Ashton:JimPickupTag": "Tag corresponding to Jim pickup",
    "FortAthenaMutator_Carmine:JimPickupTag": "Tag corresponding to Jim pickup",
    "FortAthenaMutator_Heist:CarryingBlingItemTag": "Tag corresponding to a bling being carried by someone",
    "FortAthenaMutator_Heist:BlingItemTag": "Tag corresponding to a bling item drop",
    "FortAthenaMutator_Heist:BlingTrackingCategoryTag": "Tag corresponding to a safe supply drop with the bling in it",
    "FortAthenaMutator_Heist:SafeSupplyDropTag": "Tag corresponding to a safe supply drop with the bling in it",
    "FortAthenaMutator_Heist:ExitCraftTag": "Tag corresponding to an exit craft",
    "POIRoundInfo:POITag": "Tag corresponding to the POI associated with these player starts",
    "FortAthenaMutator_Ashton:ForceEquipTags": "Tag corresponding to the item in the hero inventory that we want to force equip on spawn (treasure map)",
    "CosmeticFlowOptionSetKey:OptionSetTag": "Tag identifying a particular Cosmetic Flow Option Set.",
    "BuildingGameplayActorAbilityDeliveryBucket:Tag": "Tag identifying the bucket so that it can be turned on/off by name",
    "FactionData:FactionTag": "Tag identifying this faction",
    "FortFactionInfo:FactionTag": "Tag identifying this faction",
    "CosmeticFlowGraphKey:FlowTag": "Tag identifying this specific sub-flow graph or primary flow-graph.",
    "FortAthenaMutator_Ashton:HeroTeamTag": "Tag indicating a player is on the villain team",
    "FortAthenaMutator_Ashton:VillainTeamTag": "Tag indicating a player is on the villain team",
    "ScoutDroneDeferredDestructionData:DismissalReason": "Tag indicating the reason the drone was dismissed",
    "GasEventHistoryItem:InstigatingTag": "Tag involved, if applicable",
    "FortAIPawn:CeilingAttackGameplayAbilityTags": "Tag of our ceiling attack gameplay ability",
    "FortAIPawn:FloorAttackGameplayAbilityTags": "Tag of our floor attack gameplay ability",
    "FortAIPawn:WallAttackGameplayAbilityTags": "Tag of our wall attack gameplay ability",
    "FortAIPawn:WallRangedAttackGameplayAbilityTags": "Tag of our wall ranged attack gameplay ability",
    "FortAISpawnerUtilityComponent:AIPawnSpawnTypeTag": "Tag of the AI Pawn type that this component can spawn",
    "CosmeticsToApplyOnItemPickupData:GameplayCueTag": "Tag of the gameplay cue to apply to players when changing their skin",
    "NyxGlassWeaponComponent_Swinging:ActorHasPreferredSwingMeshTag": "Tag placed on actors to mark that a specific mesh should be used when picking attach points for this actor.\n     The specific mesh should be marked with the tag defined in SwingPreferredMeshComponent.",
    "FortAIVisibilityDataTableRow:VisibilityTagQuery": "Tag query for the visibility settings",
    "BotKnockbackSettings:TagQuery": "Tag query identifying this setting",
    "DigestedBotKnockbackSettings:TagQuery": "Tag query identifying this setting",
    "EquippedItemTagAssociationData:ItemTagQuery": "Tag query on our equipped item",
    "PositioningEQS:ItemTagQuery": "Tag query on our equipped item",
    "FortMantisTechniqueData:ActivationTagQuery": "Tag query performed using the owner's tags to determine if this technique can be started.",
    "FortMantisTechniqueData:OngoingTagQuery": "Tag query performed using the owner's tags to determine if this technique can continue once it's running.\n              NOTE: This is also performed to determine if this technique can be started.",
    "FortAISpawnerTagQueryInjectedBehavior:SpawnerTagsQuery": "Tag query representing which AI to inject these behaviors into",
    "FortAIPawnVariantDefinition:RequiredTagsQuery": "Tag query that must be passed by the spawning context (encounter or dormant spawning ai director) for this pawn variant to be picked",
    "FortAIEncounterPawnDifficultyLevelModifier:EncounterTagRequirementsQuery": "Tag query that must pass for this to apply to an encounter",
    "PlaystyleSwitchToAggressiveData:TagQueryToMatch": "Tag query that target needs to match to use this data",
    "PlaystyleSwitchToAggressiveDataDigested:TagQueryToMatch": "Tag query that target needs to match to use this data",
    "PatrolPathLeash:TagQuery": "Tag query the owned tags must match",
    "BotWeaponModScoreInfo:TagQuery": "Tag query to identify which mods to which this score can be applied",
    "DigestedBotModScoreInfo:TagQuery": "Tag query to identify which mods to which this score can be applied",
    "BotEquipWeaponInfo:TagQuery": "Tag query to identify which weapons use this equip distances",
    "DigestedBotEquipWeaponInfo:TagQuery": "Tag query to identify which weapons use this equip distances",
    "FortCosmeticRestrictionSourceQuery:TagQuery": "Tag query to run on the item's tags. Cannot be empty",
    "FortCosmeticRestrictionTargetQuery:TagQuery": "Tag query to run on the item's tags. If it is empty, the item is assumed to meet the query",
    "FortMotorcycleVehicle:InventoryModeTagQuery": "Tag query to use for if we're going to be considered in inventory mode, ie fishing, gas pump, etc.",
    "FortScoutDroneAnalyticsComponent:DismissalReason": "Tag representing the reason why the drone was dismissed (out of health, manual, out of range, instant (other))",
    "ExitCraftInfo:RequiredExitCraftTag": "Tag required of the pawn for the craft to consider it in the overlap logic (ex. bling backpack puts \"tag_x\" on pawn, and if that matches this tag the van will consider it for overlap)",
    "ortAthenaLivingWorldNavigationInvokerSettingsOverride:OverrideTagQuery": "Tag required to apply the override",
    "FortDeliveryInfoRequirementsFilter:SourceTagRequirements": "Tag requirements for the source actor",
    "FortDeliveryInfoRequirementsFilter:TargetTagRequirements": "Tag requirements for the target actor",
    "FortTeamPerkLoadoutCondition:RequiredTagQuery": "Tag requirements that must be met by a hero in the squad for this condition to be satisfied.  These tags may be on the hero itself (part of its (Hero Gameplay Definition or Hero Gameplay Class Definition)), or they may come from any of the hero's perks or abilities.",
    "FortHeroGameplayPiece:RequiredCommanderTagQuery": "Tag requirements that must be met by the commander hero for this perk to be active.",
    "FortSpecializationSlot:RequiredTags": "Tag requirements that must be met for this specialization slot to be active",
    "FortNonPlayerConversationParticipantComponent:ServicesOverride": "Tag that can be put into UAthenaSeasonItemDefinition for an override table Services.",
    "FortNonPlayerConversationParticipantComponent:ServicePricingKeyRemappingsTag": "Tag that can be put into UAthenaSeasonItemDefinition for an override table for Pricing Remappings",
    "FortNonPlayerConversationParticipantComponent:SalesInventoryOverride": "Tag that can be put into UAthenaSeasonItemDefinition for an override table for SalesInventory.",
    "FortBotCosmeticItemSetDataTableRow:SetTag": "Tag that identifies this set, used to spawn bots with specific sets",
    "FortAthenaMutator_Skyfire:SkyfireChestTag": "Tag that is on skyfire chests",
    "FortLootPackageData:RequiredTag": "Tag that is required for this item to drop. If the tag doesn't apply weight is treated as 0.",
    "FortBotClusterLootWeightDataTableRow:Tag": "Tag that must be present on the loot",
    "FortPluginActorSpawner:TagToPluginActor": "Tag that needs to be represented in GameFeatureData for the actor to spawn",
    "RidableComponent:EnergyDepletedTag": "Tag that represents that ridable's energy is depleted",
    "FortPhysicsVehicleDamageOverrideConfigs:Tag": "Tag that the vehicle needs to have to use this data",
    "FortPawnComponent_Mud:CurieFireTag": "Tag the player has when on fire",
    "FortPawnComponent_Mud:SlidingTag": "Tag the player has when sliding",
    "FortPawnComponent_Mud:SprintingTag": "Tag the player has when sprinting",
    "FortPlayerControllerComponent_TacticalSprint:DisableTacticalSprintAbilityGameplayTag": "Tag to apply when Tactical Sprint should be disabled.  Similar to UFortGlobals::GameplayTags().DisableSprint for\nregular sprinting, but this needs to be a separate tag to avoid interference if there are any differences in when\nsprint vs. tactical sprint should be disabled since regular sprinting still happens automatically when using\ntactical sprint.",
    "FortPlayerControllerComponent_TacticalSprint:TacticalSprintAbilityGameplayTag": "Tag to apply when tactical sprinting is active.  Similar to UFortGlobals::GameplayTags().ActionPlayerSprint for\nregular sprinting, but this needs to be a separate tag to avoid interference with regular sprinting, which needs\nto occur whenever not tactical-sprinting.",
    "GameplayAbilityEvaluatorModule:GameplayAbilityTag": "Tag to find the gameplay ability",
    "FortBotItemDataTableRow:Tag": "Tag to identify item and/or a group of items",
    "FortAthenaMutator_Bagel:ObjectiveAreaTag": "Tag to identify objective areas from SpecialLocation actors",
    "FortAthenaMutator_Mash:ObjectiveAreaTag": "Tag to identify objective areas from SpecialLocation actors",
    "FortAthenaMutator_Mash:RouteActorTag": "Tag to identify routes between objective areas",
    "FortAthenaMutator_Bagel:StartingAreaTag": "Tag to identify starting POIs (optional)",
    "FortAthenaMutator_Mash:StartingAreaTag": "Tag to identify starting POIs (optional)",
    "FortMissionTaggedRewards:Tag": "Tag to identify the rewards",
    "FortGameplayDataTrackerAccumulation:AccumulationTag": "Tag to identify this data accumulation",
    "FortGameplayDataTrackedRange:RangeTag": "Tag to identify this range within a data accumulation",
    "FortGameplayCueForceFeedbackInfo:EffectTag": "Tag to represent effect so it can later be cancelled",
    "UrgentQuestDataDescOverrides:OverrideTag": "Tag to represent this group of overrides.",
    "BuildingTurretComponent:OnFireTagTrigger": "Tag to send as a firing gameplay event every FiringInterval, if the turret has a valid target",
    "CrashpadStaticParams:QuestCrashpadUseTag": "Tag to send quest event",
    "FortAthenaMutator_SurvivalObjectiveData:SpecialActorTag": "Tag to use for tracking this as a special actor (usually because of what it contains)",
    "BagelAreaSpecialActorData:SpecialActorTag": "Tag to use for tracking this drop as a special actor (usually because of what it contains)",
    "BagelScoreMultiplierSpawnData:SpecialActorTag": "Tag to use for tracking this drop as a special actor (usually because of what it contains)",
    "MashAreaSpecialActorData:SpecialActorTag": "Tag to use for tracking this drop as a special actor (usually because of what it contains)",
    "MashScoreMultiplierSpawnData:SpecialActorTag": "Tag to use for tracking this drop as a special actor (usually because of what it contains)",
    "BuildingRift:SpecialActorTag": "Tag to use for tracking this rift as a special actor (usually because of what it contains)",
    "CrashpadStaticParams:TagBuildingPhysics": "Tag to use to check for building physics",
    "CrashpadStaticParams:HoverTag": "Tag to use to check for hovering",
    "CrashpadStaticParams:KnockbackImmunityTag": "Tag to use to check for knockback immunity",
    "CrashpadStaticParams:SharkTag": "Tag to use to check for shark",
    "PhysicsObjectSetupTags:PhysicsObjectPresetTag": "Tag to use to look up a Physics Object Preset",
    "PhysicsObjectSetupTags:PhysicsObjectBuoyancyDataTag": "Tag to use to look up the buoyancy data asset",
    "PhysicsObjectSetupTags:PhysicsObjectImpactDamageDataTag": "Tag to use to look up the damage data asset",
    "CenterOnTaggedPOI:TagForPOI": "Tag to use to lookup the location to center on.",
    "PhysicsObjectSetupTags:PhysicsObjectPhysicalDataTag": "Tag to use to loop up the various physical data assets (phys mat, collision effects, navigation)",
    "CrashpadStaticParams:TagEventUsedLaunchPad": "Tag to use to send Used Launch Pad event",
    "FortAthenaMutator_Payback:SetByCallerDurationTag": "Tag to use when calling Spec.SetSetByCallerMagnitude() to set the duration",
    "AshtonStoneData:PickupTag": "Tag used by the pickup system so we can compare the difference between pickups and supply drops",
    "WeaponHudData:WatchTag": "Tag used to associate a Feedback line with an ability to display cooldown information",
    "FortConstructorBASE:InBASETag": "Tag used to determine if you are \"In Base\". Used to clear effects from affected building actors",
    "FortAthenaMutator_Skyfire:PlayspaceTeleportSquadPointTag": "Tag used to identify an ASkyfireTeleportSquadPoint as a playspace squad point. (Players are teleported from the prison cells into the playspace.)",
    "FortAthenaMutator_Skyfire:PrisonTeleportSquadPointTag": "Tag used to identify an ASkyfireTeleportSquadPoint as a prison squad point. (Players are teleported into prison cells after being abducted into the mothership.)",
    "AshtonStoneData:GameplayTag": "Tag used to identify this Stone to other systems",
    "AshtonStoneState:GameplayTag": "Tag used to identify this Stone to other systems (copied from the spawn data)",
    "MyFortCategoryData:TooltipTag": "Tag used to identify this category for tooltips",
    "FortGameplayEffectContainer:ApplicationTag": "Tag used to identify this container. If empty, this is the default effect container",
    "CreativeIslandResource:Tag": "Tag used to identify this resource.",
    "FortPawnComponent_Mud:AttachParentCoveredEventTag": "Tag used to listen to the event of an actor we're attached getting covered in mud",
    "FortAthenaMutator_Valkyrie:LobbySpawnTag": "Tag used to map our spawn points during Lobby setup of VK games.",
    "GameplayStatMetadataTableRow:PreviewTag": "Tag used to refer to this in game",
    "FortPlayerControllerComponent_RespawnOnDeath:RespawnEventTag": "Tag used to spawn VFXs on a newly respawned player pawn.",
    "FortAthenaMutator_Wax:NumTokensCollectedStatTrackingTags": "Tag used when sending quest stats to the quest manager. Lets the manager know what type of stat is being sent.",
    "WeaponHudData:DisabledTags": "Tag which when on the local player controller's ability system component will set the action text as disabled",
    "ObjectiveExtensionQuestConcierge:ObjectivePlayerRequirement": "Tag's required to be present on the player to able to do quest objective",
    "FortTaggedDeployableBasePlotExpansionUnlock": "Tag-based unlock that provides a cell expansion to a deployable base plot",
    "FortTaggedDeployableBaseLootUnlock": "Tag-based unlock that provides additional neighborhood loot grants",
    "EncounterVariableSelections_TagQuery": "TagQuery Encounter Variable Selections",
    "EncounterVariable_TagQuery": "TagQuery EncounterVariable",
    "FortBotDigestedHealingItemsSpec:TagQuery": "TagQuery must be valid to use this Healing Items Specializations",
    "FortBotHealingItemsSpec:TagQuery": "TagQuery must be valid to use this Healing Items Specializations",
    "IndicatedActorDataWithFilter:IndicatedActorTagQuery": "TagQuery to validate a object to receive the highlight",
    "FortGameModeZone:TaggedActorsManager": "Tagged actors manager.",
    "FortTaggedNavFiltersComponent:TaggedNavFilterData": "Tagged nav filters. Nav filters specified in data by tag instead of directly.",
    "TaggedConversionAbilities": "TaggedConversionAbilities holds a tag query and an ability set for a converter to apply ability sets to converted pawns based on tags",
    "FortAIDirector:DebugEncounterTags": "Tags added to all encounters for testing",
    "FortMissionAlertCategoryData:CategoryTags": "Tags associated with this mission alert category. Used by quests",
    "FortMissionAlertCategoryData:VisualizationTags": "Tags associated with this mission alert's visualization. (replaces category enum to show storms/miniboss icon/etc)",
    "FortMissionPlacementActorItem:ItemIdentifyingTags": "Tags by which this item's actors can be found by the mission blueprint.",
    "FortMissionPlacementFoundationItem:ItemIdentifyingTags": "Tags by which this item's actors can be found by the mission blueprint.",
    "PlayspaceComponent_EditConnectionManager:UITagsToHide": "Tags for UI, typically HUD tags, that should be hidden during loading phases.",
    "FortObjectiveFilter_KillContribution:KillerTags": "Tags from the Actor responsible for killing the killed actor",
    "FortVerbMessage_KillContribution:KillerTags": "Tags from the Actor responsible for killing the killed actor",
    "FortObjectiveFilter_KillContribution:KilledActor": "Tags from the Actor that was killed in this event",
    "FortObjectiveFilter_KillCredit:KilledActor": "Tags from the Actor that was killed in this event",
    "FortObjectiveFilter_SlayWildlife:SlainWildlife": "Tags from the Actor that was killed in this event",
    "FortVerbMessage_KillContribution:KilledActor": "Tags from the Actor that was killed in this event",
    "FortVerbMessage_KillCredit:KilledActor": "Tags from the Actor that was killed in this event",
    "FortVerbMessage_SlayWildlife:SlainWildlife": "Tags from the Animal that was killed in this event",
    "FortObjectiveFilter_CurrencyCollected:CollectedItemSpawnSource": "Tags from the Currency Pickup item, as well as the extra tags from spawn source and spawn type",
    "FortVerbMessage_CurrencyCollected:CollectedItemSpawnSource": "Tags from the Currency Pickup item, as well as the extra tags from spawn source and spawn type",
    "FortVerbMessage_PawnEliminated:EliminationSource": "Tags from the damage source responsible for the pawn dying",
    "FortObjectiveFilter_Emote:Emote": "Tags from the emote used.",
    "FortObjectiveFilter_ScoredPlayerElimination:KillerTags": "Tags from the killer in this event",
    "FortVerbMessage_PawnEliminated:Killer": "Tags from the killer in this event",
    "FortVerbMessage_ScoredPlayerElimination:KillerTags": "Tags from the killer in this event",
    "LockedQuestRuntimeData:SourceTags": "Tags from the source object, used for organizing the locked quest into the proper spot.",
    "FortObjectiveFilter_Spray:Spray": "Tags from the spray that was used.",
    "HomebaseNodeGameplayEffectDataTableRow:GrantedTagsContainer": "Tags granted from the synthesized GE",
    "FortQuestObjectiveStatTableRow:SourceTagContainer": "Tags indicating who the event was done by",
    "FortQuestObjectiveStatTableRow:SourceTags": "Tags indicating who the event was done by",
    "FortQuestObjectiveStat:ExcludeSourceTags": "Tags indicating who the event was done by - all specified tags must be missing on checked stat event",
    "FortQuestObjectiveStat:SourceTags": "Tags indicating who the event was done by - all specified tags must be present on checked stat event",
    "FortQuestObjectiveStatXPTableRow:SourceTags": "Tags indicating who the event was done by.  All these tags MUST be present in order for the stat to fire.",
    "FortQuestObjectiveStatTableRow:TargetTagContainer": "Tags indicating who/what the event was done to",
    "FortQuestObjectiveStatTableRow:TargetTags": "Tags indicating who/what the event was done to",
    "FortQuestObjectiveStat:ExcludeTargetTags": "Tags indicating who/what the event was done to - all specified tags must be missing on checked stat event",
    "FortQuestObjectiveStat:TargetTags": "Tags indicating who/what the event was done to - all specified tags must be present on checked stat event",
    "FortQuestObjectiveStatXPTableRow:TargetTags": "Tags indicating who/what the event was done to.  All these tags MUST be present in order for the stat to fire.",
    "CreativeItemTemplateData:SourceTags": "Tags inherited from the creator of this item template",
    "ScoutDroneUIDirector:HUDTagsToHide": "Tags of UI Elements that we want to hide when piloting the drone",
    "FortMinigame:ActionsAllowedInStasis": "Tags of actions that are allowed while the player is in stasis applied by the minigame",
    "FortControllerComponent_AugmentGrantingSystem:SelectionBlockedPlayerTags": "Tags on player that will block equipping the selection tool via the granting component.",
    "FortControllerComponent_AugmentGrantingSystem:AugmentSelectInputDisablePlayerTags": "Tags on player will disable augment input binding (and CanEquipSelection) queries while tag is on player.",
    "PickupTagConvertInfo:PickupTags": "Tags owned by a pickup that should do ConvertDamage (any match)",
    "FortMcpCollectedItemProperties:ContextTags": "Tags relating to how item was collected, e.g. location",
    "FortLootTierData:RequiredGameplayTags": "Tags required for the tier to be selected; All tags must be present for the loot tier to be selectable ;parsed from RequiredTag at import time",
    "FortAttributeDetailsInfo:RequiredTags": "Tags required, if attribute is used conditionally",
    "FortObjectiveFilter_AddToCollection:CollectionType": "Tags specifying the collection type.\nExamples: Collections.CollectableCharacter, Collections.CollectableFish, or Collections.CollectableAugment",
    "FortControllerComponent_MarkActorsInRadius:VendettaAITags": "Tags that Vendetta AIs should have, used to help identify Vendetta AIs. Vendetta AIs will only be marked if they contain at least one of these tags",
    "FortAIDirector:AmbientThreatRequiredPlacementActorTags": "Tags that define if an Fort Placement Actor is useful as a fallback influence source for Ambient Threat Spawning.",
    "FortAIDirector:AmbientThreatPreferredPlacementActorTags": "Tags that define if an Fort Placement Actor is useful as an influence source for Ambient Threat Spawning if no treasure is found.",
    "FortLootPackageData:GameplayTags": "Tags that describe this loot package",
    "FortLootTierData:GameplayTags": "Tags that describe this loot tier",
    "FortAthenaTrackableAIObjectComponent:GameplayTags": "Tags that describe this trackable object.",
    "FortTheaterMapRegionData:RegionTags": "Tags that identify this specific region. Used for quests and analytics",
    "FortTheaterRuntimeData:EventDependentTheaterTags": "Tags that identify this specific theater while the related event tag is active in the calendar. Used for seasonal husk spawning.",
    "FortTheaterRuntimeData:TheaterTags": "Tags that identify this specific theater. Used for quests and analytics",
    "FortTheaterMapTileData:TileTags": "Tags that identify this specific tile. Used for quests and analytics",
    "FortTheaterTileEditorData:TileTags": "Tags that identify this specific tile. Used for quests and analytics",
    "CraftingIngredientRequirement:IngredientTags": "Tags that must all be present on an ingredient item",
    "FortGameMode:GameContextTags": "Tags that represent the context we're currently in, seeded from the theater tags and others",
    "FortCollectionBookDirectPurchaseData:PurchaseCatalysts": "Tags that the player must have in order to directly purchase the first allowed item",
    "CostOnlyRecipe:RequiredCatalysts": "Tags that the player must have in order to execute this recipe",
    "Recipe:RequiredCatalysts": "Tags that the player must have in order to execute this recipe",
    "FortConversionControlKeyCosts:RequiredCatalysts": "Tags that the player must have in order to use this key",
    "FortTrackedData_Tags:Tags": "Tags that this objective should track and remember.",
    "FortDynamicRollBaseWeightTableRow:ModTags": "Tags that weight modifier table can target to change the weight of this entry in some way. Example would be putting an item in a \"group\" and defining the group with a tag.\nThis is an array rather than a tag container, as array allows us to specify the parent tag to receive one modification, and the child tag (of that parent tag) to receive a separate modification.\nWhich is not possible with a standard container, since only 1 will be tag will be selectable (the parent or a child of that parent).",
    "TagFilterOverride:TagsToFilterOut": "Tags that will be ignored if there's an overriding context. (Make sure these are available in DefaultGameplayTags).",
    "TagFilterOverride:OverridingTags": "Tags that, when found on this component, indicate a specific context that enables overriding.",
    "FortPickupTagTestContainer:Tags": "Tags this test will check",
    "FortScoutDronePickupManager:ItemsPickupTags": "Tags to activate when we pickup items with the drone",
    "BaseVariantDef:VariantGameplayTags": "Tags to add to those the cosmetic has when this particular variant is active.  Not to be confused with \"Meta\nTags\", which are added and removed to an overall set.  These cannot be removed and exist from the variant itself.",
    "CosmeticMetaTagContainer:MetaTagsToApply": "Tags to add when applied in the meta-tag stack",
    "BuildingGameplayActorQuest:QuestActorDefaultTags": "Tags to be added in a similar fashion as a BuildingActor's DefaultTags, here for additional category convenience for designers. Will show up in TargetTagContainer for events of damage, interact, etc",
    "BuildingGameplayActorQuest:QuestActorEditorOnlyInstanceTags": "Tags to be added in a similar fashion as a BuildingActor's EditorOnlyInstanceTags, here for additional category convenience for designers. Will show up in TargetTagContainer for events of damage, interact, etc",
    "CrashpadStaticParams:TagCrashpadPlus": "Tags to check for crashpad+",
    "FortMotorcycleVehicle:InputContextBlockedTags": "Tags to check in the current player weapon for the input context to be displayed",
    "FortCreativeDiscoveryContentPanel:FeatureTags": "Tags to define the featured status of this panel",
    "FortAthenaMutator_SpecialRelevancy:TagsToHideOnRelevancyMode": "Tags to hide in certain relevancy modes. Can overlap.",
    "FortPlayerStart:StartPointTags": "Tags to identify this player start",
    "FortGameModeSpecialLocation:GameplayTags": "Tags to identify this special location",
    "GlobalWeatherData:WeatherEventTags": "Tags to pass along to the quest manager",
    "FortTooltipDisplayInfo:DescriptionStatsTags": "Tags to pass into the tooltip description to get stats without querying each stat individually.",
    "CosmeticMetaTagContainer:MetaTagsToRemove": "Tags to remove when applied in the meta-tag stack",
    "FortPartyRiftPortalManager:TooCloseErrorTags": "Tags to return if portal can't be spawned because another portal is too close",
    "FortPartyRiftPortalManager:CollisionErrorTags": "Tags to return if portal can't be spawned because of collision",
    "FortPartyRiftPortalManager:PrivacyErrorTags": "Tags to return if portal can't be spawned because of party privacy",
    "FortPartyRiftPortalManager:PartyFullErrorTags": "Tags to return if portal can't be spawned because party is full",
    "FortPartyRiftPortalManager:GuestErrorTags": "Tags to return if portal can't be spawned because player does not own the island they're currently visiting",
    "FortPartyRiftPortalManager:AwayErrorTags": "Tags to return if portal can't be spawned because player is away",
    "FortPartyRiftPortalManager:HubErrorTags": "Tags to return if portal can't be spawned because player is in Creative Hub",
    "FortPartyRiftPortalManager:NotLeaderErrorTags": "Tags to return if portal can't be spawned because player is not party leader",
    "AthenaQuickChatLeafEntry:OptionGameplayTag": "Tags to use when comparing specific items",
    "FortGameplayEffectContext:TooltipTags": "Tags used by the tooltip system when querying for information",
    "WeaponItemDefinitionDesignerData:SearchTags": "Tags used for matching the player entered search string",
    "LacklusterData:ContainerTags": "Tags used on containers",
    "FortGameplayMutator:GameplayTagContainer": "Tags used to define this mutator for things like enabling/disabling (could be used to expand for other features if needed)",
    "LWMEncounterRow:Tags": "Tags used to identify this entry",
    "FortTooltipDisplayStatInfo:ContextTags": "Tags used to provide tooltip context for this stat",
    "AIPatrolPathComponent:UnableToPlaceNewDeviceTags": "Tags used to retrieve the failure reason text in DefaultGameDataBR.UnableToPerformActionMessages",
    "HomebaseNodeGameplayEffectDataTableRow:ApplicationRequiredTagsContainer": "Tags which are required for the synthesized gameplay effect to be applied to its target",
    "FortMiniMapComponent_TagsAndDistance:ValidGameplayTags": "Tags which must exist on the player's ability system component in order to show the indicator.  An empty container indicates this check should be skipped.",
    "TagModificationRequest:TagsToModify": "Tags which should be added/removed",
    "RigUnit_MoveChinOutOfGround:bShouldDoIK": "Tail effector transform list",
    "RigUnit_MoveTailOutOfGround:bShouldDoIK": "Tail effector transform list",
    "RigUnit_MoveChinOutOfGround:ChinEffectorTransform": "Tail tip effector transform",
    "RigUnit_MoveTailOutOfGround:TailTipEffectorTransform": "Tail tip effector transform",
    "EUnicornSocialFeatures": "Take care in renaming - the Unicorn WebAPI expects these names. Do not reorder",
    "EHighlightReelIds": "Take care in renaming. Unicorn web API expects these names, and could be confused if you rename them! We opted for named IDS instead of numerical IDs. Do not reorder",
    "FortNavPathRendererComponent": "Takes care of drawing a nav path using a Niagara System particle system.\n   Can takes multiple UNavigationPath and will append them one after the other based on the ordering index.",
    "RandomUpgradeData:CalendarDrivenEnableState": "Takes precedence over Enabled.",
    "EReachLocationValidationMode.Storm": "Takes storm into account to know if location is safe to reach",
    "FortSplineGroundPath:DistanceRemainingToNextEvenlySpacedPoint": "Tally of distance remaining before we need to create another evenly spaced point.",
    "TInteractionType.IT_Simple": "Tap",
    "BuildingGameplayActorSpawnDetails:TargetActorClass": "Target Actor generally spawned by the BGA (can be null)",
    "FortAthenaTeleportToActorStateTreeTaskInstanceData:TargetActor": "Target Actor we want to teleport to.",
    "DigestedTargetBasedAccuracy:AimTrackingDistanceErrorMultiplier": "Target based accuracy multiplier for current distance error",
    "TargetBasedAccuracy:AimTrackingDistanceErrorMultiplier": "Target based accuracy multiplier for current distance error",
    "DigestedTargetBasedAccuracy:AimTrackingHeightOffsetErrorMultiplier": "Target based accuracy multiplier for current height offset error",
    "TargetBasedAccuracy:AimTrackingHeightOffsetErrorMultiplier": "Target based accuracy multiplier for current height offset error",
    "DigestedTargetBasedAccuracy:AimTrackingOffsetErrorMultiplier": "Target based accuracy multiplier for current offset error",
    "TargetBasedAccuracy:AimTrackingOffsetErrorMultiplier": "Target based accuracy multiplier for current offset error",
    "DigestedTargetBasedAccuracy:AimTrackingReactionTimeMultiplier": "Target based accuracy multiplier for reaction time;  Reaction time is the time (in real seconds) for enemy positional tracking (i.e. use enemy's position this far in the past as basis)",
    "TargetBasedAccuracy:AimTrackingReactionTimeMultiplier": "Target based accuracy multiplier for reaction time;  Reaction time is the time (in real seconds) for enemy positional tracking (i.e. use enemy's position this far in the past as basis)",
    "DigestedTargetBasedAccuracy:AimTrackinginAirHeightDataThresholdMultiplier": "Target based accuracy multiplier for the threshold on height delta between bot and target to apply InAir height curve aiming modifier",
    "TargetBasedAccuracy:AimTrackinginAirHeightDataThresholdMultiplier": "Target based accuracy multiplier for the threshold on height delta between bot and target to apply InAir height curve aiming modifier",
    "DigestedTargetBasedAccuracy:AimTrackingInAirVelocityThresholdMultiplier": "Target based accuracy multiplier for the threshold on target Z velocity to apply InAir height curve aiming modifier",
    "TargetBasedAccuracy:AimTrackingInAirVelocityThresholdMultiplier": "Target based accuracy multiplier for the threshold on target Z velocity to apply InAir height curve aiming modifier",
    "DigestedTargetBasedAccuracy:AimTrackingInterpTimeMultiplier": "Target based accuracy multiplier for the time needed for bot mental model to interpolate between velocities as enemy changes direction",
    "TargetBasedAccuracy:AimTrackingInterpTimeMultiplier": "Target based accuracy multiplier for the time needed for bot mental model to interpolate between velocities as enemy changes direction",
    "DigestedTargetBasedAccuracyCategory:TargetBasedAccuracy": "Target based accuracy values for this target actor category",
    "TargetBasedAccuracyCategory:TargetBasedAccuracy": "Target based accuracy values for this target actor category",
    "FortCreativeLinearMoverComponent:Target": "Target building actor to move. This is cleared when the device is disabled.",
    "FortGamepadSettings:EditModeSlowMaxDistance": "Target distance at which the maximum aim assist slow is applied.",
    "FortGamepadSettings:SlowMaxDistance": "Target distance at which the maximum aim assist slow is applied.",
    "FortGamepadSettings:EditModePullMaxDistance": "Target distance at which the maximum edit mode aim assist pull is applied.",
    "FortGamepadSettings:EditModeSlowMinDistance": "Target distance at which the minimum aim assist slow is applied.",
    "FortGamepadSettings:SlowMinDistance": "Target distance at which the minimum aim assist slow is applied.",
    "FortGamepadSettings:EditModePullMinDistance": "Target distance at which the minimum edit mode aim assist pull is applied.",
    "FortAthenaMutator_OnDmgDamageSelf:TargetQueries": "Target filter for whether or not we should damage ourselves",
    "FortAthenaMutator_OnDmgDamageSelf:TargetQueryIndex": "Target filter for whether or not we should damage ourselves",
    "FortAthenaAIBotController:TargetHandler": "Target handler - keeps track of all current targets' info",
    "ELockOnState.LockingOnToTarget": "Target just got under the reticle",
    "CreativeIslandMatchmakingSettings:PlayersPerTeam": "Target number of players to allocate per team",
    "CreativeIslandMatchmakingSettings:PlayerCount": "Target number of players to place in a single session",
    "CreativeIslandMatchmakingSettings:NumberOfTeams": "Target number of teams to split players between",
    "CollisionResponseBaseData:HitTargetTag": "Target of Hit Tag to apply modifications to",
    "FortMantisRootMotionWarpInfo:WarpTarget": "Target of root motion warping; If allowed, translation & rotation will warp towards this actor",
    "FortMantisRootMotionWarpInfo:WarpRotationYaw": "Target rotation for when WarpRotationMethod is StaticRotation",
    "FortMotorcycleVehicle:SwingArmRotation": "Target rotation of swing arm",
    "EncounterVerbTransitionStateTreeTask:TransitionTo": "Target state of the transition",
    "LWMEncounterAlertLevelTransitionStateTreeTask:TransitionTo": "Target state of the transition",
    "LWMEncounterKillCountTransitionStateTreeTask:TransitionTo": "Target state of the transition",
    "LWMEncounterRemainingCountTransitionStateTreeTask:TransitionTo": "Target state of the transition",
    "AddMutatorData:Target": "Target to add the mutator to",
    "MutatorInstanceData:Target": "Target to add the mutator to",
    "TornadoConfigEntry:TargetTangentVelocity": "Target velocity tangent to the orbit circle",
    "TornadoConfigEntry:TargetHeightVelocity": "Target velocity upwards",
    "FortAthena_WaxToken:Target": "Target we're attempting to give tokens to.",
    "FortAthenaAIBotController:ReviveTarget": "Target when bot is currently reviving a pawn from DBNO",
    "EFortTargetingFXState": "Targeting FX state, plays the right sounds when ADS'ing",
    "FortLocomotionAnimSet:MovementBlendSpaceTargeting": "Targeting Movement",
    "FortWeapon:TargetingAudioChannels": "Targeting audio channels",
    "FortPlayerCameraBase:Targeting3PClass": "Targeting camera class",
    "FortPlayerCameraBase:TetheredTargeting3PClass": "Targeting camera class when tethered",
    "FortWeaponRanged:ScopeTargetingMuzzleOffset": "Targeting camera offset applied when using scope",
    "RidableComponent:WeaponTargetingSourceOffsetModifier": "Targeting offset modifier to apply when rider is using a weapon",
    "BuildingTurretComponent_MOBA:TargetingPriority": "Targeting priority data",
    "FortTargetFilter:ExclusionGameplayTags": "Targets with any of these tags will be excluded.",
    "FortAbilityTargetSelectionList:AbilityTargetBlockedGameplayTags": "Targets with any of these tags will be treated as a \"blocked\" ability target",
    "FortAthenaToggleGameplayEffectStateTreeTask": "Task that applies or removes (or both) Gameplay Effects to/from the provided TargetActor, starting from the provided Actor.",
    "FortAthenaTeleportToActorStateTreeTask": "Task that teleports the owner (ex. AI) to the target actor (ex. SmartObject), with an optional position and rotation offset.\nNote: adding a small (0.1s?) delay after this task is a good idea if you need to do anything with the teleported actor, since he might still be in a falling/teleporting state.",
    "CobaltCombatStormShieldDataEntry:Team0RespawnPoint": "Team 0 spawn location",
    "CobaltCombatStormShieldDataEntry:Team1RespawnPoint": "Team 1 spawn location",
    "EFortItemCollectorBehavior.FirstToGoal": "Team Deposits Item to Goal locks it down as theirs.",
    "LimitedLifeDataEntry:TeamID": "Team ID will be used if BackingActor is nullptr",
    "VkTeamDoc:TeamId": "Team Id",
    "PlayerDamageData:TeamIndex": "Team Index of damage dealer.",
    "ETeamPerformanceMessageTrackingStat": "Team Performance Stats that can be trigger messages",
    "EFortQuestObjectiveStatEvent.Build": "Team building. Target is the building that was constructed.\n      TargetTags have Buildings OwnedTags and BuildingTypeTag that is defined in FortGameData, and Quest.Metadata.AlliedStructure if allied.",
    "EFortQuestObjectiveStatEvent.BuildingEdit": "Team edit building. Target is the building that was edited.\n      TargetTags have Buildings OwnedTags and BuildingTypeTag that is defined in FortGameData, and Quest.Metadata.AlliedStructure if allied.",
    "BuildingFlagSpawn:bPickupOnTouch": "Team index associated with this base point",
    "FortPvPPlayerStart:Team": "Team index associated with this player start",
    "FortPvPPlayerStart:bDynamicStartLocation": "Team index associated with this player start",
    "FortTeamInfo:Team": "Team index for the team",
    "ItemLoadoutTeamMap:TeamIndex": "Team index the player is on (this is based on the EFortTeam enum and so the first team is actually 3 (HumanPvP_Team1)",
    "MinigameEndCondition:TeamList": "Team indices this end condition should ONLY or NEVER apply to; behavior determined by TeamListType",
    "FortGameMode:TeamInfoClass": "Team info class to spawn for new teams",
    "EFortCraftFailCause.InsufficientTeamLevel": "Team level isn't high enough",
    "EMatchAbandonState.Joining": "Team members are still joining the match.",
    "MatchConditionMutatorTeamData:TeamNum": "Team number",
    "BuildingActor:Team": "Team number of the building actor",
    "EFortQuestObjectiveStatEvent.PlaceTrap": "Team placed Trap. Target is the tags from the item def of the launcher.",
    "EFortQuestObjectiveStatEvent.BuildingRepair": "Team repair building. Target is the building that was repaired.\n      TargetTags have Buildings OwnedTags and BuildingTypeTag that is defined in FortGameData, and Quest.Metadata.AlliedStructure if allied.",
    "FortGameState:PendingTeamChangeRequests": "Team requests pending/waiting on available slots. NOTE: This is logically treated as a queue but maintained as array for replication.",
    "MatchConditionMutatorTeamData:TeamStatus": "Team status",
    "ControlPointInstanceData:PrevOwningTeam": "Team that owned this control point the last time the points were updated",
    "TeamSpottedActorInfoArray:OwningTeam": "Team that owns this spotted actor info array; Not replicated as it is set locally by clients",
    "TeamChangeRequest:DesiredTeam": "Team the controller would like to change to",
    "FortSpawnContext:Team": "Team the object belongs to",
    "FortObjectiveBase:RelevantTeam": "Team this mission applies to, if it is team relevant.",
    "FortPlayerScoreReport:PlayerTeam": "Team this player is on",
    "BarrierTeamState:TeamNum": "Team this state is associated with",
    "FortMountedTurret:TeamIndex": "Team this turret is on.  Added for skin override for food fight LTM.",
    "FortDeliveryInfoRequirementsFilter:ApplicableTeam": "Team to apply the effects to, if bConsiderTeam is true",
    "EFortQuestObjectiveStatEvent.BuildingUpgrade": "Team upgrade building. Target is the building that was upgraded.\n      TargetTags have Buildings OwnedTags and BuildingTypeTag that is defined in FortGameData, and Quest.Metadata.AlliedStructure if allied.",
    "FortCarriedObject:Team": "Team which owns this Object, if any; Will be NULL for neutral Objects",
    "EStimType.Enemy": "Teammate marked an enemy",
    "EOmahaTeam": "Teams",
    "EFortTeam": "Teams for players, monsters, spectators etc",
    "FortGameState:Teams": "Teams in the game",
    "RankingType.StandardCompetition": "Teams that tie are given the same higher ranking number and the a gap is after the tied teams.\nE.g., Two tie for second place resulting in the following ranking: 1 2 2 4",
    "RankingType.ModifiedCompetition": "Teams that tie are given the same lower ranking number and the gap is before the tied teams.\nE.g., Two tie for second place resulting in the following ranking: 1 3 3 4",
    "FortSilkwalkerComponent_Telemetry": "Telemetry component for silkwalker",
    "FortControllerAIBotComponent_Telemetry:TelemetryDataDisguise": "Telemetry data related to disguise component",
    "FortControllerAIBotComponent_Telemetry:TelemetryDataDamage": "Telemetry data related to idle detection",
    "FortControllerAIBotComponent_Telemetry:TelemetryDataPassiveHealer": "Telemetry data related to passive healer component",
    "TeleportSettings:TeleportRange": "Teleport AI to converter when past this distance (2d) from its converter (deactivated if <= 0.0f)",
    "FortAthenaMutator_Skyfire:EnterLootRoomTeleportData": "Teleport data for the teleport for entering the loot room",
    "FortAthenaMutator_Skyfire:ExitSkydiveTeleportData": "Teleport data for the teleport for exiting the loot room into skydiving out of the mothership",
    "FortAthenaMutator_Skyfire:PrisonToPlayspaceTeleportData": "Teleport data for the teleport from the prison to the playspace",
    "FortAthenaMutator_Skyfire:KnockedOutTeleportData": "Teleport data for the teleport when the player is knocked out of the playspace.\nFor this teleport, PreTeleportTime is not used as the amount of time before the teleport is based on the knocked out penalty wait time instead.",
    "SkyfireLootRoomTeleportPointsData:TeleportPoints": "Teleport points in this loot room",
    "FortAthenaTeleportToActorStateTreeTaskInstanceData:TeleportRelativeLocation": "Teleport's location offset relative to the target actor.",
    "FortAthenaTeleportToActorStateTreeTaskInstanceData:TeleportRelativeRotation": "Teleport's rotation offset relative to the target actor.",
    "BuildingItemCollectorActor:PickupSpawned": "Tell BP that a pickup was spawned.",
    "BuildingPhoenixItemCollectorActor:OnOutputItemChanged": "Tell BP that a pickup was spawned.",
    "BuildingPhoenixRepairActor:OnCurrentWeaponChanged": "Tell BP that the cached weapon has changed.",
    "FortPlayerController:OnBuildPreviewMarkerVisibilityChanged": "Tell blueprints when the build preview marker visibility changes. Used by UI to hide the building info indicator.",
    "FortControllerComponent_QuickEdit:OnBuildingQuickEditOptionChanged": "Tell blueprints when the building quick edit option changes. Used by UI to update the building quick edit visual",
    "FortCollectionDataMapping:bEnsureAllTaggedItemsAreInTheCollection": "Tells MCP template export to fail unless all suitably tagged consumables are included in the collection.",
    "FortAthenaMutator_PlayerDamage:bIsUsingHitResult": "Tells if current data requires hit result information to determine if a multiplier should be applied.",
    "CachedSupplyDrop:bInOctree": "Tells if the supply drop is registered in the octree or not",
    "ERedeemRealMoneyPurchaseRefreshType.UpdateOfflineAuth": "Tells the MCP to only update the offline token.",
    "ERespawnAndSpectateClientEventId.HideUI": "Tells the client to hide the respawn select screen UI",
    "ERespawnAndSpectateClientEventId.ShowRespawnAvailableUI": "Tells the client to modify the UI when respawning becomes available",
    "ERespawnAndSpectateClientEventId.ShowUI": "Tells the client to show the respawn select screen UI",
    "AgeRatingDisplayData:bNotApplicable": "Tells us if this rating is a \"Not Applicable\" rating. Some rating boards use \"not applicable\" when rating apps as they are not considered games. We need special handling for those cases.",
    "AgeRatingDisplayData:bRatingRefused": "Tells us if this rating is a \"Rating Refused\" rating. Usually means that whatever was being rated fell out of the bounds of what the board can rate or broke some rule. We need special handling for those cases.",
    "EMusicTimebase.AudioRenderTime": "Tells you exactly where the audio renderer is right now (Jittery, raw position of the audio rendering).\nUseful for cueing up musical events based on the current song time.",
    "EMusicTimebase.ExperiencedTime": "Tells you what the player is actually hearing & seeing this instant (when properly calibrated).\nUseful for scoring player input.",
    "EMusicTimebase.VideoRenderTime": "Tells you what you should be drawing right now so it appears *in sync with the music.* (when properly calibrated).\nUseful for synchronizing animations, ui, and other visuals to the music.",
    "FortPlayerPawn:TempWeaponsStack": "Temp Weapons refer to either Ability Weapons or Vehicle Weapons.  They are weapons equipped by the player temporarily e.g. time limit or ammo on ability or while in a specific seat on a vehicle.  Only one item should exist per definition type for these types of weapons, and they should be marked with either the tag \"AbilityWeapon\" or \"VehicleWeapon\". *",
    "MinigameItemData:SourceItemVariantGuid": "Template GUID of the item when it was originally added",
    "MinigameItemData:ItemVariantGuid": "Template GUID that should be used to apply item templates/modifiers to the spawned item",
    "MinigameSpawnerSpawnParams:ItemVariantGuid": "Template GUID that should be used to apply item templates/modifiers to the spawned item",
    "CreativeItemTemplateData:SourceItemVariantGuid": "Template GUID this template data was \"forked\" from",
    "FortClientEventsState:SeasonTemplateId": "Template ID definining the current season (blank means between seasons)",
    "FortQuestRewardData:QuestId": "Template ID of the quest that was completed",
    "FortQuestRewardNotification:QuestId": "Template ID of the quest that was completed",
    "FortDailyQuestRerollNotification:NewQuestId": "Template ID of the replacement quest",
    "FortItemEntry:AlterationDefinitions": "Template IDs for all alterations that affect this item",
    "MinigameItemData:TemplateObjectData": "Template object data, contains item template instance for values to be applied to",
    "McpAddItemRequest:TemplateId": "Template of item being added",
    "FortMissionStormShield:SafeAreaTemplate": "Template used for Safe Zone",
    "CatalogGiftInfo:ForcedGiftBoxTemplateId": "TemplateId of a GiftBox:* item that MUST be used to gift this purchase (no choice of giftwrap)",
    "CatalogGiftInfoEditor:ForcedGiftBoxTemplateId": "TemplateId of a GiftBox:* item that MUST be used to gift this purchase (no choice of giftwrap)",
    "FortHiddenRewardQuantityPair:TemplateId": "TemplateId of the ItemDefinition to award. If EditorOnlyItemDefinition is set, this value will update this automatically.\nTemplateId can be set manually if EditorOnlyItemDefinition is empty, for advanced usage situations and for backwards compatibility",
    "FriendCodeIssuedNotification:CodeType": "TemplateId used to generate the code",
    "MoggMusicInfo:Tempo": "Tempo, in beats per minute",
    "FortGameUserSettings:TemporalSuperResolutionQuality": "Temporal super resolution",
    "CreativeRoyaleIslandPlayspace:FoundActors": "Temporary cache of pre-placed map actors found.\nUsed in ProcessBaseMapActors, which clears the array once all actors have been processed.",
    "FortCrewTemporaryItemsState:NextAvailableItems": "Temporary items that are supposed to become available on next cycle, i.e. when AvailableItemsEnd comes",
    "FortControllerComponent_RechargeWeapons:PendingGuidToServerStartTimeMap": "Temporary mapping of item guid to server start time (in case we beat the add)",
    "FortMinigameStatsComponent:ScoreboardColumnOrder": "Temporary place to store the order in which the scoreboard stats for the mini game should appear",
    "FortMinigameStatsComponent:ScoreboardStatObjects": "Temporary place to store the scoreboard stats on the mini game",
    "FortAttributeModifierDisplayData": "Temporary solution to displaying attribute modifiers, to be replaced when the tooltip UI system properly supports more complex attribute modifiers.",
    "FortGameplayCueSpawnResult": "Temporary structure used to track results of spawning components",
    "GenericEmptyPayload": "Temporary. TODO: Remove after contextual lobby is implemented",
    "OpenCustomUIContext": "Temporary. TODO: Remove after contextual lobby is implemented",
    "ETenacityType.Custom": "Tenacity Amount is the player's max health",
    "LiquidRibbonManager:SplineCurveTension": "Tension of the spline curve (0 is curvier, 1 is straight)",
    "CubeMovementStaticPath:CubeAngleLimitDegrees": "Terrain angles beyond this will be skipped. A step will still be generated for corruption. But a cube will skip passed these to reach the end of the hill",
    "UserOptionDefinitionTestActor": "Test actor demonstrating how to integrate user options into a C++ type.",
    "UserOptionDefinitionTestComponent": "Test component demonstrating how to integrate user options into a C++ type.",
    "EValkyrieValidationErrorCode.TestError": "Test error, for debugging purposes",
    "EMatchmakingState.TestingExistingSessions": "Testing available session list",
    "EMatchmakingState.TestingEmptyServers": "Testing empty server list",
    "EFortSessionHelperJoinState.RequestingReservation": "Testing the search result for joinability",
    "FortPawnComponent_Tether:TetherSlackLength": "Tether length where no acceleration should occur",
    "FortPawnComponent_Tether:TetherBreakLength": "Tether will break outside this distance",
    "TieredWaveSetCollectionData:BreatherText": "Text displayed between each wave",
    "QuestItemDefinitionDesignerData:CompletionText": "Text displayed for quest completion",
    "FortEmoteVolume:EmoteCategoryTitle": "Text displayed in the emote picker",
    "ChoiceDataEntry:ButtonDescription": "Text displayed next to the button",
    "ChoiceDataEntry:ConfirmText": "Text displayed on optional confirmation button",
    "ChoiceDataEntry:ButtonText": "Text displayed on the button",
    "ChoiceData:Title": "Text displayed on top of the popup",
    "FriendCodeLocString:Text": "Text for corresponding language",
    "MapNoteOptionData:MapNoteText": "Text for the map note corresponding to this option",
    "FortTooltipTokenInfo:ContextDetails": "Text replacements for token. Can be more than one element, if context tags change what the token means.",
    "CatalogItemPrice:PriceTextOverride": "Text representation of pricing which can override the Price + Currency version",
    "FortCategoryTableRow:Name": "Text shown as players are awarded the reward for the quest",
    "QuestItemDefinitionDesignerData:RewardDescription": "Text shown as players are awarded the reward for the quest",
    "FortCollectionBookPageCategoryTableRow:Name": "Text shown for the page category",
    "FortAthenaMutator_Uranium:RoundIntroText_Attacking": "Text that displays on the round intro screen. Explains the attacking team's objective",
    "FortAthenaMutator_Uranium:RoundIntroText_Defending": "Text that displays on the round intro screen. Explains the defending team's objective",
    "FortAthenaMutator_Uranium:RoundResultsText_AttackersLost": "Text that displays on the round wrap-up screen. Explains that the attacking team lost",
    "FortAthenaMutator_Uranium:RoundResultsText_AttackersWin": "Text that displays on the round wrap-up screen. Explains that the attacking team won",
    "FortAthenaMutator_Uranium:RoundResultsText_DefendersLost": "Text that displays on the round wrap-up screen. Explains that the defending team lost",
    "FortAthenaMutator_Uranium:RoundResultsText_DefendersWin": "Text that displays on the round wrap-up screen. Explains that the defending team won",
    "FortTokenContextInfo:Text": "Text to display",
    "AthenaFeatTimelineDisplayData:SeasonText": "Text to display for the specific season name, SeasonText=X -> Season \"X\"",
    "BundleGoalCardDisplayData:HeaderText": "Text to display in the header",
    "FortCosmeticRestrictionDefinition:ItemBlockedShopText": "Text to display in the shop when an item is blocked by this restriction in a shop preview. If this is empty,\nthen the normal Item Blocked Text will be used instead.",
    "BundleGoalCardDisplayData:SubHeaderText": "Text to display in the subheader. If empty, default text will be used.",
    "FortSpeechBubbleDataTableRow:SpeechBubbleText": "Text to display inside the speech bubble",
    "FortCosmeticRestrictionDefinition:RestrictionActiveText": "Text to display when a loadout activates this restriction",
    "FortCosmeticRestrictionDefinition:ItemBlockedText": "Text to display when an item is blocked by this restriction",
    "FortAthenaMutator_Hover:GameMsg_Intro": "Text to display when explaining the goal of the game during the intro",
    "FortAthenaMutator_TDM:GameMsg_Intro": "Text to display when explaining the goal of the game during the intro",
    "BuildingItemWeaponUpgradeActor:NotEnoughRessourcesText": "Text to display when the played needs more ressources to upgrade the weapon",
    "BuildingItemWeaponUpgradeActor:WeaponCannotBeUpgradedText": "Text to display when the weapon cannot be upgraded",
    "FortAthenaMutator_Uranium:TeleportingPlayersOutText": "Text to play when teleporting players to safe zone",
    "BattlePassLandingPageButtonTexts:TileText": "Text to show on the actual button",
    "FortGameModePickup_Wax:UseInteractText_MultipleCoins": "Text to use when a player is about to interact, and we've got multiple coins. {0} denotes amount of coins.",
    "FortGameModePickup_Wax:UseInteractText_SingleCoin": "Text to use when a player is about to interact, and we've only got one coin.",
    "DataDrivenServiceBriefConfig:TitleText": "Text used for main service title e.g. \"Mass Supply Drop\"",
    "DataDrivenServiceBriefConfig:DescriptionText": "Text used for main widget body text e.g. \"Order Mass Supply Drop\"",
    "DataDrivenServiceBriefConfig:TransactionText": "Text used for main widget transaction verb e.g. \"Order\". Placed alongside transaction details e.g. 50/100 Gold bars.",
    "DataDrivenServiceBriefConfig:StockText": "Text used to indicate how many times this service can be used e.g. \"Stock: 2\"/\"Charges: 1\" etc",
    "GameSelectionButtonInfo": "Texts to display into the Game Selection button when it is extended by other product lobbies",
    "BuildingSMActor:TextureData": "Texture (or even complete material) swaps to apply to this instance",
    "WebCamBase:DynamicTexture": "Texture Update",
    "FabricTextureProviderTexture:Texture": "Texture in the fabric texture provider",
    "FortDecoPreview:DiffuseTextureParam": "Texture parameter name for the source diffuse texture",
    "LacklusterData:ActorToTextures": "Texture parameters to set on each chrome material by actor type",
    "ParticleParamterVariant:TextureParams": "Texture parameters. Only supported on Niagara systems",
    "FortMaterialStyleParameterData:Texture": "Texture reference of the material parameter this data will be changing",
    "FortMiniMapIconMaterialParameterData:Texture": "Texture reference of the material parameter this data will be changing",
    "CustomizableObjectSprayVariantSlotImageProperties:SprayNotAssignedImage": "Texture to be displayed when the slot is empty, i.e. a spray has not been selected for this variant",
    "CustomizableObjectSprayVariantSlotImageProperties:SprayAssignedImage": "Texture to be displayed when the variant slot is filled, i.e. a spray has been selected for this variant",
    "BuildingItemCollectorActor:InactiveItemTexture": "Texture to display when ItemCollectorState == Inactive",
    "AuxiliaryEditTileMeshData:TileTexture": "Texture to use in the material",
    "FabricMeshProviderMeshReference:Texture": "Texture used as reference",
    "FortMiniMapComponent_Discoverable:NotDiscoveredIcon": "Texture used when this minimap icon is visible but NOT discovered.\n     Discovered icons use MapData.MiniMapIcon",
    "FortAthenaMutator_Cobalt:RoundResultsText_Lost": "That that displays on the round wrap-up screen. Explains that your team lost",
    "FortAthenaMutator_SpyRumble:RoundResultsText_Lost": "That that displays on the round wrap-up screen. Explains that your team lost",
    "FortAthenaMutator_Cobalt:RoundResultsText_Win": "That that displays on the round wrap-up screen. Explains that your team won",
    "FortAthenaMutator_SpyRumble:RoundResultsText_Win": "That that displays on the round wrap-up screen. Explains that your team won",
    "EFortFeedbackSelectionMethod.FFSM_Announcer": "The \"announcer\" has something to say",
    "EFortFeedbackContext.FFC_Announcer": "The \"announcer\" is speaking",
    "EFortDialogResult.Ignored": "The \"ignore/cancel\" button was pressed",
    "OptionsReleaseInfo:ReleaseVersion": "The \"knob\" version number in which this setting should first be visible",
    "EFortDialogResult.Declined": "The \"no\" button was pressed",
    "FortSourceWorldAndOverlayWorld:SourceWorld": "The \"normal\" world we're enhancing with modifications.",
    "EShowPlacardPhase.None": "The \"resting\" state used when the placard is NOT currently in use",
    "UserOptionDefinition:PropertyScope": "The \"scope\" of the property that this this option represents.\nIf set, then the option will also be applied to all instances of the target class. Otherwise, it will only be applied to the local instance.",
    "BuildingWall:DoorBoxComponent": "The \"trigger\" to automatically open the door and close it",
    "EFortDialogResult.Confirmed": "The \"yes\" button was pressed",
    "FortAthenaMapInfo:WeaponUpgradeMachineSpawnChance": "The % of chance we spawn the Weapon Upgrade Machine",
    "RotatorErrorCheck:TestFromAngle": "The 'ideal' angle from which current deviation should be measured",
    "FortTimeOfDayManager:StormStrength": "The 0-1 strength of the current storm. Used to interpolate many material parameters during combat",
    "EQualitativePerfMetric.LevelStreamingDistanceP01": "The 1st percentile of the distances at which levels streamed in during the match.",
    "AIPatrolPathComponent:PathRendererClass": "The ABuildingActor class containing a FortNavPathRenderer+FortMinigameComponent components that will draw the path",
    "GameFeatureFortAIEvaluatorEntry:AIEvaluatorClass": "The AI Evaluator class used by the plugin",
    "EGameModePauseWarmupMaskId.PlayerBotsSpawning": "The AI Service Player Bots is pausing the warmup phase - bots are still spawning.",
    "GlobalWeatherData:AIWeatherData": "The AI data for the weather event",
    "FortNPCConversationParticipantComponent:AcceptableAlertnessLevels": "The AI must be in one of those alertness level to have conversation enabled.",
    "FortControllerComponent_MarkActorsInRadius:AITagQuery": "The AI tag query to use to identify Vendetta AIs. If left empty, AIs that have any VendettaAITags will be marked",
    "EQSActorSpawnerClassToSpawnData:AISpawnerData": "The AI type that the Actor Spawner will attempt to spawn.\nThis class will be used as the spawn object if SpawnActorType == EEQSActorSpawnerSpawnType::AIPawn",
    "FortAIPawn:AIPawnAbilitySystemComponent": "The AI's AbilitySystemComponent",
    "FortAbilitySystemProjectileBase:AbilitySystemComponent": "The Ability System Component created and attached to instances of this class.",
    "FortActiveMontageDecisionWindow:DecisionAnimation": "The Ability associated with this action",
    "FortCreativeMoveTool:ActiveMovementMode": "The Active Movement mode, if any, that the move tool has started to use. Will Tick if valid.",
    "FortAthenaToggleAllowInteractStateTreeTaskInstanceData:Actor": "The Actor (ex. AI) we want to allow interaction with.",
    "FortAthenaToggleAllowInteractStateTreeTaskInstanceData:TargetActor": "The Actor (ex. smartobject) we want to change the allowed actors for interaction.",
    "DaySequenceTrackSettings:MatchingActorClass": "The Actor class to create movie scene tracks for.",
    "FortObjectiveFilter_DamageDone:DamageSource": "The Actor that is responsible for this damage being done",
    "FortObjectiveFilter_Hit:DamageSource": "The Actor that is responsible for this damage being done",
    "FortAIGoalInfo:Actor": "The Actor that should be considered the goal (if any).  NOTE: A goal can be an actor, a location, or both.",
    "FortAthenaAddGameplayTagsStateTreeTaskInstanceData:Actor": "The Actor we want to add and/or remove the gameplay tag to/from.",
    "GameplayTagActorHasMatchingGameplayTagContainerInstanceData:Actor": "The Actor we want to check the tag on, must implement 'IGameplayTagAssetInterface'.",
    "GameplayTagActorHasMatchingGameplayTagInstanceData:Actor": "The Actor we want to check the tag on, must implement 'IGameplayTagAssetInterface'.",
    "WeaponPickupAmmoCountData:AmmoItemDefinitionTag": "The Ammo Definition's gameplay tag",
    "FortCreativeDiscoveryContentPanel:AnalyticsId": "The Analytics Stuff correlation ID.",
    "FortCreativeDiscoveryTestCohort:AnalyticsId": "The Analytics Stuff correlation ID.",
    "FortCharacterCustomization:AnimLayersOverride": "The Anim Layers that will be linked as part of this customization",
    "MeshVariant:AnimInstanceClassToSwap": "The AnimInstance (AnimBP) that should be replaced during the mesh swap - won't be loaded as we only need the name for comparison. None is a valid option",
    "MeshVariant:OverrideAnimInstanceClass": "The AnimInstance (AnimBP) that will replace the AnimInstance on the mesh. None is a valid option",
    "FortStatEvent:AnnouncementToDisplay": "The Announcement to display when the stat event fires",
    "DelayedQuickBarAction:ItemDefinitionAssetId": "The Asset Id for the Item Definition for the item",
    "TeamPlacementData:TeamInfoAthena": "The Athena team info for this particular team.\nAFortTeamInfoAthena does not replicate it's data so we are not replicating it here",
    "CreativeAudioMixerDevice": "The Audio Mixer Device allows creators to either assign a Control Bus Mix in UEFN or to dynamically create a\nControl Bus Mix using the Bus and Volume fields which are available in both UEFN and Creative, which can then be\nactivated and deactivated via Gameplay Events.",
    "SparksMusicPlayspace:AudioState": "The AudioState which holds the Key, Mode and Tempo of this space's current mix.\nThis gets created in our Ctor",
    "AnimSpinner:RotationAxis": "The Axis that is being spun around",
    "FortDynamicBuilder:BuildOrder": "The Axis to build up in",
    "FortFactionSharedBBInfo:BlackboardTag": "The BB tag used to map the shared BB. Used by the single members to get a specific shared BB.",
    "VehicleModPhysicsShapeModifiers:BGAIndex": "The BGA this shape modifier is tied to.\nCurrently server only.",
    "BuildingGameplayActorSpawnDetails:BuildingGameplayActorClass": "The BGA to spawn",
    "VideoWidgetConfig:VideoUID": "The BLURL video UID",
    "ValkyrieEditorSettings:AssetImportDefaults": "The BP where the default values to set for each asset type are defined when they're imported",
    "FortBotTeleportInfo:BTNodeNameCausingTeleportation": "The BT the teleport happened from.",
    "BagelLeaderboardQuery": "The Bagel Leaderboard Query info used to communicate with StatsV2 service",
    "BagelFriendsLeaderboard": "The Bagel Leaderboard of all friends of a specific user",
    "HUDWidgetBehaviorRegistryEntry:HUDWidgetBehaviorClass": "The Behavior Class that is affected to the HUD Widget represented by HUDWidgetOverrideTag.",
    "HUDWidgetBehaviorExtensionsRegistryEntry:HUDWidgetBehaviorExtensions": "The Behavior Extensions we will be appending to the Behavior specified by HUDWidgetBehaviorTag.",
    "GameFeatureFortAIEvaluatorEntry:TreeAsset": "The Behavior Tree we want to inject the AI Evaluator in",
    "BuildingWall:AutomaticSlidingDoorBoxExtent": "The Box \"Trigger\" size used to open the door automatically. *",
    "BuildingWall:SlamOpenDoorBoxExtent": "The Box \"Trigger\" size used to slam open doors. *",
    "WeaponUpgradeItemRow:BrickCost": "The Brick cost",
    "EGameModePauseWarmupMaskId.BroadcastController": "The Broadcast controller is pausing the warmup phase.",
    "DeployableBasePlot:BuildableSpaceComponent": "The Buildable space box component",
    "CreativeRoyalePlayspaceComponent_LevelReset:CachedPoiSwapManager": "The Cached PoiSwapManager",
    "FortAthenaMutator_Uranium:CheckPointMarkerClass": "The Checkpoint class used to create visual check points",
    "GameFeatureAudioClusterEntry:ClusterTag": "The Cluster config tag with which we want to associate",
    "FortAthenaPatrolPath:DebugNotSelectedColor": "The Color of the Debug Lines between Patrol Points when a Patrol Path is NOT Selected",
    "LinkAcrossNumericalIndicatorActionSymbol:ActionColor": "The Color that represents this action.",
    "IntensityData:ContributingFactors": "The Combat Factors that contribute to intensity",
    "FortControllerComponent_AugmentGrantingSystem": "The Component responsible for augment granting.\n\n//#todo #augments matt.stone revisit this after we have finalized and make sure the comment is true to the actual system.\nHigh level how it works:\n        Server\n                The server is authoritative on what augments a player can choose.\n                        For prototyping, there is a passive GA that randomly chooses augment choices, and gives them to this component for the flow to start.\n                        This is pending change, but perhaps it is a good high level way to let design configure augment granting, while leaving most business logic to code.\n                It will replicate down to the client the choices it can make, and how many augments it has available.\n        Client\n                Client gets notified it has available augments and enters a granting flow.\n                With augments available, the client can use input to start a selection process, where they pick the augment they want from the available choices.\n                        this is currently done via a weapon item; which lets us configure camera modes, etc, while in the augment grant mode.\n                Client confirms the choice and lets the server know via server RPC; the server validates and replicates new data to the client.\n                Client updates it flow state based on the replicated data from the server (eg new choices, number of pending granting augments)\n\nThis AugmentGrantingSystem is intentionally decoupled from the augment component.\nThoughts on the decoupling into separate systems:\n        benefits:\n                Decoupling keeps the augment system separate from logic granting augments, leading to a more flexible system.\n                Decoupling allows us to support different schemes of augment granting without muddying up the actual augment system with code related to obtaining.\n                Decoupling allows us to have multiple granting schemes, if needed in the future. It may make sense to have multiple schemes here. But this focuses on choosing from a selection of augments.\n                Decoupling means if players obtaining augments via a boss drop in the world, picking up that augment will be separate from this granting management.\n                Decoupling means we can have weighted loot tables making augments available, or something else entirely providing the selection of augments available.\n                The spytech system was previous investigated for augments, but found that the coupling to round based granting logic made it less flexible (there were other issues as well, such as the type of items spytech was).\n                Decoupling means creative can leverage augments without the granting logic; since they will be using their own custom logic.\n        negatives:\n                it might be slightly more involved to figure out what you need to modify if a change is needed (but I think it shouldn't be too bad, as this keeps classes small).\n                we have multiple components where as we could have only 1 without decoupling.\n                it could get involved if different components have bad interactions, and need to make components interact with each other (realistically though I think not, since granting augment is done via inventory, these components will hopefully be mutually exclusive).\n.",
    "SpecialEventAudioAnalysisBaseComponent:ConstantQNRT": "The Constant Q NRT, if any, to use to drive behavior",
    "EClientContentReadinessV2.AwaitingServerResponse": "The Content Beacon client is awaiting a response from the server.",
    "FortCreativeSplineModificationComponent:ControlPointClass": "The Control Point class to spawn to interface with the spline points on the owning device",
    "PlayspaceUser:ControllerCached": "The Controller of this user.\nThis is a cache to avoid iterating over all players when needing the Controller of the user,\nwhich is one of the most requested representations of the user that the gameplay code will care the most about)",
    "FortAIComponent_Telemetry:DeathInstigator": "The Controller who killed the AI",
    "DAD_CosmeticItemUserOption:CosmeticItemAsset": "The Cosmetic this represents.",
    "CachedItemData:item_count": "The Count of the stored item",
    "FortPlayerControllerDeployableBase:CurrentPlot": "The Current Plot the Player Controller is in",
    "FortGameplayCueNotifyAthena_AIAlertState:FillIconDataFloatIndex": "The Custom Primitive Data Float Index to update the 'filling' fx into the alert state progress bar (default is 10)",
    "FortPlayerController:LocalPawnCustomizationAssetLoader": "The CustomizationAssetLoader for the local pawn. This is just a reference to prevent the assets used by the local pawn from getting garbage collected if the pawn is destroyed.",
    "FortLinkedAnimGraphsData:DBNOAnimBlueprintClass": "The DBNO animation blueprint to use on this pawn.",
    "FortPlayerCameraBase:DBNOCameraClass": "The DBNO camera class",
    "FortLinkedAnimGraphsData:DBNOCarriedAnimBlueprintClass": "The DBNO carried animation blueprint to use on this pawn.",
    "FortPlayerCameraBase:DBNOCarriedCameraClass": "The DBNO carried camera class",
    "FortTagToDeathCause:DBNOCause": "The DBNO cause for the defined tag",
    "FortPlayerPawnAthena:DBNOInvulnerableTime": "The DBNO invulnerable time that this pawn will take no damage on being DBNO when the DBNOMutator is not active",
    "FortAthenaMutator_ItemPromotion:UpgradeTable": "The Data Table that describes how weapons swap between each other.",
    "FortAthenaMakeIntVariableStateTreeTaskInstanceData:DefaultIntValue": "The Default value for the variable we create.",
    "EAthenaGameMessageDataFlags.DisableCreativeExclamation": "The DefaultCriticalMessage shows an Exclamation by default.  This can disable that animation to allow for a priority critical message, without exclamation",
    "FortAIPawn:DefenderTrap": "The Defender Trap that this AI spawned at if it is a Defender",
    "AthenaSeasonTitleEntry:DisplayChapterText": "The Displayed Chapter in Game (I.Ex. 4)",
    "AthenaSeasonTitleEntry:DisplaySeasonText": "The Displayed Season in Game (I.Ex. X)",
    "FortScoutDronePawnOwnerOverrideComponent:ControlledDrone": "The Drone Controlled by the owning pawn",
    "FortPlayerControllerComponent_RespawnOnDeath:RespawnDroneManagerClass": "The Drone Manager class to use for showing the respawn drone sequence before the player is allowed to respawn.\n     Currently this is required for the respawn override to work. In the future we may want to remove this requirement, but it currently works for all implemented uses.",
    "FortScoutDroneControllingComponent:ControlledDrone": "The Drone that we're currently controlling",
    "FortAIDirectorPerLODConfig:FortAILODLevel": "The EFortAILODLevel this applies to, it must be greater than EFortAILODLevel::Dormant + 1 and less than EFortAILODLevel::Max",
    "PlayerLODViewConeConfig:FortAILODLevel": "The EFortAILODLevel this applies to, it must be greater than EFortAILODLevel::Dormant + 1 and less than EFortAILODLevel::Max",
    "ControllableRidableComponent:MovementUrgency": "The EFortMovementUrgency controls the MaxSpeed when ridden. When mounted the ridable can be in different urgency state and hence have\n      different MaxSpeeds depending on if it was aware of the rider or wandering etc.",
    "TempestLightningComponent:EnvironmentQueryParamName_LightningRadius": "The EQS parameter name to use to pass the lightning radius to the EQS",
    "TempestLightningComponent:EnvironmentQueryParamName_MinLightningTargetDistance": "The EQS parameter name to use to pass the minimum lightning target distance to the EQS",
    "MashAISpecialEncounterData:AIBotSpawnLocationQuery": "The EQS query that is used to determine the spawn location of an AI Bot Pawn.  This will be ignored if DifficultyEncounterSettings is specified.",
    "MilkshakeControllerComponent:CurrentEarthquake": "The Earthquake this player is currently experiencing",
    "FortScoutDroneControllingComponent:DismissAction": "The Enhanced Input Action for Dismissing the drone",
    "ControllingRiderComponent:GamepadRidingAbility": "The Enhanced Input Action for Gamepad Riding Ability",
    "FortScoutDroneControllingComponent:MoveAction": "The Enhanced Input Action for Moving Rihgt/Left and Up/Down",
    "FortScoutDroneControllingComponent:MoveUpAction": "The Enhanced Input Action for Moving Up",
    "ControllingRiderComponent:RidingAbility": "The Enhanced Input Action for Riding Ability",
    "RiderComponent:GamepadRidingExit": "The Enhanced Input Action for Riding Exit",
    "RiderComponent:RidingExit": "The Enhanced Input Action for Riding Exit",
    "DeployableBasePlot:EntirePlotSpaceComponent": "The Entire Plot space box component",
    "FortEditorToolsSettings:EditorFlashlightComponentSettings": "The ExportText representation of EditorFlashlightComponent used to store settings between editor sessions",
    "SidewaysStateComponent_Player:MaxRadiusForScalingExtraCorruptionRadius": "The Extra Corruption Radius applied to the Material Paramater Collection radius parameter will scale from 0 to\nExtraCorruptionRadius as the radius of the bubble grows from 0 to MaxRadiusForScalingExtraCorruptionRadius.  Any\nlarger bubbles will continue to just use ExtraCorruptionRadius.",
    "ObjectiveFilter": "The FObjectiveFilter baseclass represents the must-have aspects of any objective filter.  The things common between\nall objective filters is that there will Always be an Author that an objective will relate to.\nFor example, if you shoot someone, 'you' are the instigator of the objective. Inversely if the objective\nis Take Damage, and 'you' take damage, you are the instigator for taking damage, even though you are not\nthe necessarily the damage causer.",
    "ObjectiveSubjectTags": "The FObjectiveSubjectTags structure provides a way to place all the filtering related components of a subject\ntogether. Filters may have other types of conditions that might relate to certain subjects, but each subject\nfilter will always provide one instance of this to be used to filter against the subject in the processor.",
    "ObjectiveSubjectTags_Progressible": "The FObjectiveSubjectTags_Progressible is an extension of FObjectiveSubjectTags\nthat allows designers to specify that this subject is valid for objective progression.",
    "SkyfireBackpackComponentInitializerTimesStruct": "The FSkyfireBackpackComponentInitializer structures are used to organize the variables into the same categories in the BP to make it easier to copy them to the Native versions. //---------------------------------------------------------------\n// Times",
    "FactionData:Name": "The Faction's name",
    "FortSentenceAudio:Handle": "The Feedback handle to play for this speech",
    "FortSurfaceTypeToSurfaceTypeTag:FootSurfaceType": "The Footstep Surface Type",
    "FortCustomCameraController:FortPlayerCamera": "The FortPlayerCamera owned by this FP",
    "FortCustomCameraController:FortPawn": "The FortPlayerPawn that owns this FP camera controller",
    "GameplayCueNotify_Jetpack_FuelRegen:SoundOnFuelChangeRamp": "The Fuel Charge Ramp Sound",
    "GameplayCueNotify_Jetpack_FuelRegen:SoundOnFuelRecharged": "The Fuel Charge Ramp Sound",
    "GameplayCueNotify_Jetpack_FuelRegen:FuelRegenRampVolumeCurve": "The Fuel Regen Ramp Volume Curve",
    "AggregatedFunction:Function": "The Function that we're aggregating.",
    "FortFallTeleportComponentBase:TeleportGEClass": "The GE that should be applied in case we have to force teleport the pawn",
    "MissionVehicleSpawnSet:OccupiedLocationGameplayEffect": "The GE to apply to the queried location actor when the vehicle is occupying it",
    "LevelInstanceGameplayVolume:LevelInstanceSaveActorGuid": "The GUID for the current level instance",
    "QuickBarSlot:UsedByItemGuid": "The GUID of the Item that is using this slot",
    "FortZoneMissionAlertData:MissionAlertID": "The GUID of the mission alert for the zone if one exists.",
    "TeamPawnColor_VisualData:GE_Glow": "The Gameplay Effect that adds the Gameplay Cue that will colorize a player based on their team affiliation.",
    "TeamPawnColor_VisualData:GlowTag": "The Gameplay Tag that is used to add the Gameplay Cue that will colorize a player based on their team affiliation.",
    "FortObjectiveFilter_PlayerReceivedGameplayEvent:GameplayEventTag": "The Gameplay tag that the event is keyed to (Same tag that GA's listen for to activate from event)",
    "HomebaseNodeGameplayEffectDataTableRow:AssetTagsContainer": "The GameplayEffect's Tags: tags the the GE *has* and DOES NOT give to the actor.",
    "FortItemEntry:GenericAttributeValues": "The Generic Attribute Float value that was set (this will be 1-1 with gadget item definitions tracked attributes array)",
    "FortLinkedAnimGraphsData:GoopAnimBlueprintClass": "The Goop animation blueprint to use on this pawn.",
    "FortProjectileMovementComponent_FloorSnapped:GravityScaleAfterTouchedFloor": "The Gravity scale that is applied after we touch the floor",
    "McpAddItemRequest:ItemId": "The Guid of the item being added",
    "McpChangeAttributesRequest:ItemId": "The Guid of the item being added",
    "McpChangeQuantityRequest:ItemId": "The Guid of the item being added",
    "McpRemoveItemRequest:ItemId": "The Guid of the item being added",
    "ValkyrieProjectContentServiceCreationParams:TeamId": "The Guid of the team to which ownership should be transferred",
    "HUDWidgetRegistryEntry:HUDWidgetClass": "The HUD Widget Class for this HUD Element",
    "HUDWidgetRegistryEntry:HUDWidgetPreviewClass": "The HUD Widget's Preview Class. The HUD Widget Preview is a simplified visual representation of the HUD Element. This is mainly used in the Widget Catalog in the HUD Layout Tool.",
    "HUDWidgetRegistryEntry:HUDWidgetProxyClass": "The HUD Widget's Proxy Class. The Proxy Widget is a 1 to 1 visual representation of the HUD Element without any actual logic. This is mainly used to display the HUD Elements in the HUD Layout Tool.",
    "FortObjectiveFilterType_VehicleFilter:HealthPercent": "The Health percent of the vehicle required to progress this objective (0-100)",
    "HurdleInputConfig:Phase1_Floor_MinHeightForHurlde": "The Height we are looking for in front of the hurdle object to make it a valid hurdle obstable",
    "HurdleInputConfigCache:Phase1_Floor_MinHeightForHurlde": "The Height we are looking for in front of the hurdle object to make it a valid hurdle obstable",
    "FortItemPreviewOnPawnActor:HeroPawnComponent": "The Hero Pawn will spawn with this point at its feet, rotated in the same way",
    "EFrontEndCamera.Heroes": "The Heroes area",
    "WindSplineBlockage:ID": "The ID for the blockage",
    "WindSplineBlockageID": "The ID for the spline blockage",
    "WindVolumeID": "The ID for the spline volume",
    "FortPlayerSurveyCMSSurveyKey:ID": "The ID name for the survey.",
    "SpatialMetricProperties:IdName": "The ID name that identifies the metric.",
    "FortAIPawn:DefenderSquadId": "The ID of the Defender Squad for this Defender",
    "UIStateAutomationRule:ChildStateReference": "The ID of the child state used for this override.",
    "UIStateConfigurationChildReference:ChildStateId": "The ID of the child state.",
    "HUDElementVisibilityRepData:ModSourceID": "The ID of the device (or other source) that is providing the modifications to the HUD element visibilities.\nNot using AActor* since the replication of this struct may occur before the replication of the Device spawning,\nwhich would cause the AActor* to be null when this struct is replicated",
    "FortPartyRepData:PrimaryGameSessionId": "The ID of the game session this party is currently in on the primary (i.e. not platform) subsystem, if any.",
    "CreativeAudioPlayerData:NetId": "The ID of the player used for looking up Audio Components and Proxies",
    "FortTheaterMapTile:StaticMeshMaterialID": "The ID that identifies the material used on the static mesh. Only use positive numbers (0 means no tile mesh)",
    "BaseVariantDef:ShotGridIds": "The IDs of the ShotGrid assets associated with this variant (if there are any)",
    "AthenaResurrectionComponent:ClosestSpawnMachineIndex": "The Index for the closest reboot machine from the set of reboot machines",
    "BuildingProp_QuestGlyph:ActivationRange": "The Interaction Activation range for this glyph",
    "FortAthenaMutator_Cobalt:InventoryOverrideMutator": "The Inventory Override mutator has the list of items we give players on respawn.  We want to do it on round teleport as well, during the reset.",
    "FortAthenaMutator_Uranium:InventoryOverrideMutator": "The Inventory Override mutator has the list of items we give players on respawn.  We want to do it on round teleport as well, during the reset.",
    "BuildingTrap:TrapData": "The Item Data that this trap was spawned from",
    "CosmeticLoadoutPartyReplState:BackpackPersistentName": "The Item Definition Persistent name for a Backpack Cosmetic Item",
    "CosmeticOverrideData:CosmeticItem": "The Item Definition asset of the cosmetic",
    "DelayedQuickBarAction:ItemGuid": "The ItemGuid of the item (Can be invalid in case of a remove action)",
    "EFabricWaveSyncType.BeatSync": "The LFO runs connected to the music with a defined beat duration and offset",
    "EFabricWaveSyncType.Free": "The LFO runs on a set frequency disconnected from the music",
    "FortLevelInstanceSaveActor:LevelSaveRecord": "The LSR that is being stored by the actor for use by Level Instance Devices",
    "EncounterMobSpawnData:MobEncounterData": "The LWM encounter data used to determine what pawns to spawn for this mob",
    "FortScoutDroneAnalyticsComponent:LastRecorderDroneLocation": "The Last Location that we recorded. Used for tracking the distance traveled",
    "CollisionReactionConfiguration:LaunchVelocityMaximumMultiplier": "The Launch Velocity Multiplier will be capped at this value and never go over it.",
    "CollisionReactionConfiguration:BehindCollisionLaunchVelocityMultiplier": "The Launch Velocity used during collision reactions will be multiplied by a value between\n- BehindCollisionLaunchVelocityMultiplier: when dot product is -1\n- AheadCollisionLaunchVelocityMultiplier: when dot product is +1\n\nBased on the 2d dot product between the forward of the AI and the launch direction.\n\n(if both are equal then this feature won't be enabled)",
    "CollisionReactionConfiguration:MinimumMovementVelocityForLaunchVelocityMultiplier": "The Launch Velocity used during collision reactions will be multiplied by a value between\n- LaunchVelocityMultiplierAtMinimumMovementVelocity: when the movement velocity is <= MinimumMovementVelocityForLaunchVelocityMultiplier\n- LaunchVelocityMultiplierAtMaximumMovementVelocity: when the movement velocity is >= MaximumMovementVelocityForLaunchVelocityMultiplier\n\nBased on the current AI's movement velocity.\n\n(if both are equal then this feature won't be enabled)",
    "CollisionReactionConfiguration:LaunchVelocityMultiplierWhenAboveSweep": "The Launch Velocity will be multiplied by this value if the collision actor's feet/bottom is above the top of the sweep box.",
    "BagelFriendsLeaderboard:Name": "The Leaderboard Name",
    "MashFriendsLeaderboard:Name": "The Leaderboard Name",
    "BagelLeaderboardQuery:RequestingId": "The Leaderboards StatsV2 Player Requesting ID",
    "MashLeaderboardQuery:RequestingId": "The Leaderboards StatsV2 Player Requesting ID",
    "CinematicSequenceDeviceBase:Sequence": "The Level Sequence asset that contains the cinematic content to play back",
    "TieredWaveSetCollectionData:LevelText": "The Level Text to display on the start wave UI",
    "CachedItemData:item_level": "The Level of the stored item",
    "LWMEncounterRow:Encounter": "The Living World Encounter data",
    "FortCharacterCustomization:LocomotionAnimAssetOverride": "The Locomotion Anim Set that will override some animations of the base anim BP",
    "CreativePooledMID:MID": "The MID we created",
    "FortDamageNumberInfo:MeshMIDs": "The MIDs for every element on this component",
    "MashLeaderboardQuery": "The Mash Leaderboard Query info used to communicate with StatsV2 service",
    "MashFriendsLeaderboard": "The Mash Leaderboard of all friends of a specific user",
    "RadiusTrackingDisplayInfo:CircleMaterial": "The Material used to draw the radius tracker circle on the map. If null, the material defined on the game state will be used.",
    "MaterialParamterLerpInfo:MaterialInstance": "The MaterialInstance that contains the property to modify",
    "FortAIDirectorPerLODConfig:MaxNPCCosts": "The Max NPC Costs per EFortAILODLevel, must be between 0.f and 10000.f",
    "VehicleSpringInfo:LookAheadMaxSpeed": "The Max speed required before activating the look ahead spring",
    "VehicleSpringInfo:LookAheadMaxStiff": "The Max speed stiffness of the lookahead spring",
    "GameDifficultyInfo:MaximumRating": "The Maximum Personal Power allowed to play this theater-zone difficulty combination.",
    "UtilityContribution:MaxContribution": "The Maximum amount contributed",
    "WeaponUpgradeItemRow:MetalCost": "The Metal cost",
    "SkyAtmosphereValues:MieAbsorption": "The Mie absorption coefficients resulting from particles in the air at an altitude of 0 kilometer. As it becomes higher, light will be absorbed more.",
    "SkyAtmosphereValues:MieScattering": "The Mie scattering coefficients resulting from particles in the air at an altitude of 0 kilometer. As it becomes higher, light will be scattered more.",
    "VehicleSpringInfo:LookAheadMinSpeed": "The Min speed required before activating the look ahead spring",
    "VehicleSpringInfo:LookAheadMinStiff": "The Min speed stiffness of the lookahead spring",
    "EGameModePauseWarmupMaskId.Minigame": "The Minigame is expected to update the warmup time to match the pre-game countdown\nThis ensures the warmup phase does not end before that happens",
    "FortTaggedActorOctreeFilter:MinDistanceFromBoundsCenter": "The Minimum distance an element has to be from the bounds center to be valid",
    "CreativeAudioMixerDevice:Mix": "The Mix that this device will activate / deactivate.",
    "HUDWidgetRegistryEntry:EditorCustomPropertyModels": "The Models used for the different Editor Only custom properties our HUD Element has.",
    "HUDWidgetRegistryEntry:CustomPropertyModels": "The Models used for the different custom properties our HUD Element has.",
    "FortObjectiveFilter_ConversationChoiceMade:NPC": "The NPC the author was talking to when making this choice",
    "FortGameplayEffectDeliveryActor:NavAreaClass": "The NavArea to impact the target selection shape",
    "Voter:NetId": "The NetId of the player that cast the vote",
    "VoteData:VoteInstigatorNetId": "The NetId of the player that started the vote",
    "FortNDCImpactInfo:ImpactFXDataChannel": "The Niagara data channel to use for spawning impact FX. If None, existing impact FX paths will be used.\nData channels are only used in simple cases, any variants etc will cause old paths to be used.",
    "SpecialEventAudioAnalysisBaseComponent:OnsetNRT": "The Onset NRT, if any, to use to drive behavior",
    "FortTaggedActorOctreeFilter:OptionalSubclasses": "The Optional Subclass to test against",
    "OriginalAndSpawnedPair:OriginalActor": "The Original actor we used to create our duplicate.",
    "FortCameraModeOverrideComponent:CameraModeOverride": "The Override Camera Mode to be used when this component is active and the owning object is a player's view target\n Set to none to not override the camera view target",
    "FortAIDirector:AIDirectorPIDController": "The PID Controller settings used for encounters managed by this AI Director",
    "FortAIDirector:PIDControllerSettings": "The PID controller settings to be used by encounter PID controllers",
    "CachedPOIVolumeLocations:POIVolume": "The POI Volume centered around these cached locations",
    "FortPoiSwapPlayspace:PoiToReplace": "The POI associated with this playspace that the user content should load in place of",
    "FortGameStateAthena:PartyRiftPortalManagerToUse": "The Party Rift Portal Manager class to use",
    "KnockbackMutatorData:Pawn": "The Pawn receiving KnockbackDamage",
    "FortScoutDrone:ControllingPlayerPawn": "The Pawn that's currently controlling this drone",
    "ScoutDronePickupTargets:DBNOPawn": "The Pawn to be attached to the drone if any",
    "CreativeAudioPlayerData:Pawn": "The Pawn used for spawning Audio Components on players",
    "McpLootEntry:ItemType": "The PersistentName of the item asset this represents",
    "FortPhoenixLevelUpNotification:Level": "The Phoenix level represented by this notification",
    "FortSurfaceTypeToSurfaceTypeTag:SurfaceType": "The Physical Surface Type",
    "FortAbilityTargetSelection:ConePitchAngle": "The Pitch Angle of cone selection type",
    "BagelLeaderboardEntry:DisplayName": "The Player Display name",
    "MashLeaderboardEntry:DisplayName": "The Player Display name",
    "FortAthenaMutator_Bagel:LocalPlayerFriendsLeaderboard": "The Player Friends LeaderBoard",
    "FortAthenaMutator_Mash:LocalPlayerFriendsLeaderboard": "The Player Friends LeaderBoard",
    "LivingWorldSpawnAroundPlayerConfiguration:PointProviderClasses": "The Player Point Providers that will get spawned on each player (must be at least one!).",
    "FortGameModeAthena:LiveBroadcastPlayerControllerClass": "The PlayerController class used when broadcasting a live match",
    "FortGameModeAthena:SpectateAFriendPlayerControllerClass": "The PlayerController class used when spectating a friend in a live match.",
    "TDMPlayerStandingInfo:PlayerState": "The PlayerState of the player that this FTDMPlayerStandingInfo corresponds to.",
    "PlayspaceUser:PlayerStateCached": "The PlayerState of this user.\nThis is a cache to avoid iterating over all players when needing the PlayerState of the user,\nwhich is one of the most requested representations of the user that the gameplay code will care the most about)",
    "PlaylistFrontEndSettings:PlaylistName": "The PlaylistName (as described in the playlist data itself) of the playlist",
    "FortMissionGenerationElementCostAndAvailabilityRow:MinCost": "The Power Points Cost of selecting this option for mission generation",
    "FortPlayerControllerDeployableBase:PreviousPlot": "The Previous Plot the Player Controller was in",
    "ThresholdTestConfig:Quantity": "The Quantity used for the threshold check e.g. > Threshold / < Threshold",
    "GrantQuestBlueprintParameters:QuestDefinition": "The Quest we wish to be granted to participants owned by the handling manager",
    "DelayedQuickBarAction:QuickBarSlot": "The QuickBar slot this item should belong on",
    "DelayedQuickBarAction:QuickBarType": "The QuickBar this item should belong on",
    "SkyAtmosphereValues:RayleighScattering": "The Rayleigh scattering coefficients resulting from molecules in the air at an altitude of 0 kilometer.",
    "FortAthenaMutator_Uranium:RespawnWaveMutator": "The Respawn Wave mutator that controls player respawning, forcing them to respawn as a group. We need this so we can start/stop respawning at the desired time.",
    "AnimSpinner:Rotation": "The Rotator containing the current rotation around the rotation axis",
    "ControlPointSpawnData:DisableInSafeZonePhase": "The SafeZonePhase for when to disable the control point",
    "ControlPointSpawnData:EnableInSafeZonePhase": "The SafeZonePhase for when to enable the control point",
    "HeistExitCraftSpawnData:SafeZonePhaseWhenToSpawn": "The SafeZonePhase the ExitCraft should spawn in (when)",
    "ControlPointSpawnData:SafeZonePhaseWhenToSpawn": "The SafeZonePhase to spawn in (when)",
    "DeployableBasePlot:SavableSpaceComponent": "The Savable space box component",
    "AIScalableFloat:ScalableFloat": "The Scalable float that will be used to scale the returned value, based on the scaling type.",
    "AthenaSeasonBannerLevelSchedule": "The Season Banner Level Schedule",
    "FortAthenaLivingWorldTagQueryToSeatMapping:SeatIndex": "The Seat index that the pawn matching the Query should seat at.",
    "SkyfireInGameMapManager:CachedSkyfireMutator": "The SkyfireMutator that this MapManager will use to determine if an indicator is on the mothership.",
    "QuickBarSlot:UsedBySlotIndex": "The Slot index that is using this slot",
    "BuildingContainer:SoundIndicatorComponent": "The Sound Indicator component used to manage the sound indicators generated by this building container",
    "FortAthenaVehicle:SoundIndicatorComponent": "The Sound Indicator component used to manage the sound indicators generated by this vehicle",
    "FortPawn:SoundIndicatorComponent": "The Sound Indicator component used to manage the sound indicators generated by this weapon",
    "FortWeapon:SoundIndicatorComponent": "The Sound Indicator component used to manage the sound indicators generated by this weapon",
    "FortAthenaVehicle:SoundLibraryComponent": "The SoundLibrary component used to add SoundLibraries to this particular actor",
    "FortPawn:SoundLibraryComponent": "The SoundLibrary component used to add SoundLibraries to this particular actor",
    "FortWeapon:SoundLibraryComponent": "The SoundLibrary component used to add SoundLibraries to this particular actor",
    "FortEventLevelCamera:SpatialScreenClass": "The SpatialScreenClass to activate when the camera finishes being transitioned to.",
    "EUIStateAutomationType.Initial": "The State Automation Rules will be used to choose the appropriate Child State when this State is activated during a transition that targets a parent state.",
    "StateTreeRuntimeData:StateTreeInstanceData": "The StateTreeContext used to run a StateTree on the owning actor for this component",
    "FortActorOptionsComponent:Internal_InteractionText": "The String to show in the Interaction UI when attempting to interact with the owner actor\n@note If Internal_PlayerOptions is null then we'll attempt to get the data from the FUserOptionDefinitionContainer on the owner actor class",
    "LinkAcrossNumericalIndicatorActionSymbol:ActionSymbol": "The Symbole to display for the current action (+/-).",
    "DanceSynchronizerComponent:SyncMode": "The Synchronization mode that the component should use.",
    "TDMPlayerStandingInfo:PlayerScore": "The TDM score of this player (equal to the number of other players this player has killed).",
    "FortAthenaMutator_SpecialEventTODM:SpawnedTODM": "The TODM that we most recently spawned, as specified in one of our subphases.  Replicated only for debug text.",
    "GameFeatureFortAIEvaluatorEntry:InjectionTag": "The Tag associated with the injection. This is meant to be able to add the evaluator at a precise location",
    "FortTaggedActorOctreeFilter:TagQuery": "The Tags that the element must match to be valid",
    "AthenaRewardItemReference:TemplateId": "The TemplateId of the item to award. Avoid using this directly and instead use\nItemDefinition to handle specifying the reward. This reduces incorrect template ids being\nspecified and makes it easier to track which things are giving which rewards.\nDisabled if ItemDefinition has an entry in it\n        // EditCondition=\"ItemDefinition.IsNull()\")) EditCondition logic handled in CanEditChange()",
    "TieredWaveSetCollectionData:DefenseText": "The Text to display for this waves defense",
    "ThrowingToyData:ThrowingToy": "The ThrowingToy reference.",
    "FortAIRuntimePerkInfo_Bunker:DifferentPieceBuildDelay": "The Time between each building piece being built to complete the bunker",
    "FortAIRuntimePerkInfo_Bunker:DifferentPieceBuildDelayRandomDeviation": "The Time between each building piece being built to complete the bunker",
    "FortAIRuntimePerkInfo_Bunker:InitialBuildDelay": "The Time between each building piece being built to complete the bunker",
    "FortAIRuntimePerkInfo_Bunker:SamePieceBuildDelay": "The Time between each building piece being built to complete the bunker",
    "FortAIRuntimePerkInfo_Bunker:SamePieceBuildDelayRandomDeviation": "The Time between each building piece being built to complete the bunker",
    "FortBounceData:BounceType": "The Type of Bounce we are doing",
    "LinkAcrossNumericalIndicatorActionSymbol:ActionType": "The Type of action this ActionSymbol references.",
    "AIBehaviorScriptComponent:AIBehaviorScript": "The UAIBehaviorScript that will be added to the AI",
    "BuildingPoolHarvestResourceSpawnsData:OwningComponent": "The UBuildingPoolHarvestResourceSpawnsComponent this data lives in.",
    "FortAthenaMutator_AdHocSquads:AdHocSquadsControllerComponentClass": "The UFortControllerComponent_AdHocSquads class that will be added to each participating player.",
    "FortControllerMiniMapComponentVisibility:MiniMapComponent": "The UFortMiniMapComponent_Discoverable component this visibility information pertains to.",
    "FortPlayerCameraBase:UICamera": "The UI Camera Component, controls the camera when UI is doing something important that gameplay doesn't get priority over.",
    "RoundCosmeticInfo:RoundNameText": "The UI Display name for this round. Designer set in blueprint",
    "RoundCosmeticInfo:RoundSound": "The UI Display name for this round. Designer set in blueprint",
    "UraniumSingleRoundInfo:RoundName": "The UI Display name for this round. Designer set in blueprint",
    "UraniumSingleRoundInfo:RoundSound": "The UI Display name for this round. Designer set in blueprint",
    "FortMissionUIActorHandle:MissionUIIndicator": "The UI fileld out by the client machine",
    "FortSafeZonePhaseUpdatedEvent:SafeZonePhaseForUI": "The UI specific safe zone phase",
    "GameplayEventGlobalRouterPendingListenerData:EventContext": "The UObject describing the context of this event",
    "GameplayEventListenerData:EventContext": "The UObject describing the context of this event",
    "MeshNetworkEventStateData:EventStartTime": "The UTC Now time this event started on the Root Server",
    "FortQuestMapCosmetic:WidgetClass_Legacy": "The UUserWidget LEGACY class for this Widget cosmetic element",
    "FortQuestMapCosmetic:WidgetClass": "The UUserWidget class for this Widget cosmetic element",
    "ValkyrieEditorPermission:JsonFileRelativeToProjectDir": "The UValkyrieEditorPermissions - based JSON file containing permissions for the role",
    "FortAvailableTheaterMissions:TheaterId": "The Unique ID of the theater that this list of missions is valid for",
    "WeaponUpgradeItemRow:Direction": "The Upgrade Direction (vertical of horizontal)",
    "FortAthenaMakeIntVariableStateTreeTaskInstanceData:OutInt": "The Variable we create.",
    "FortAthenaTrackEventStateTreeTaskInstanceData:OutParameter": "The Variable we create.",
    "FortGameStateAthena:VolumeManagerToUse": "The Volume Manager class to use",
    "VolumePlayerStateInfo:Volume": "The Volume the players are apart of",
    "VoteData:VoteConfig": "The Vote Configuration",
    "VoteResponderComponent:ActiveVoteId": "The VoteId of the vote this responder is currently working with",
    "VoteResponderComponent:ActiveVoteSessionId": "The VoteSessionId of the session this responder is currently working with",
    "FortLinkedAnimGraphsData:WalkAnimBlueprintClass": "The Walk animation blueprint to use on this pawn.",
    "TieredWaveSetCollectionData:WaveText": "The Wave Text to display on the start wave UI",
    "FortCharacterCustomization:WeaponAnimSetOverride": "The Weapon Anim Set that will override some animations of the base anim BP",
    "WeaponUpgradeItemRow:UpgradedWeaponDef": "The Weapon Item Def that the player will be upgraded to",
    "WeaponUpgradeItemRow:CurrentWeaponDef": "The Weapon Item Definition that the player must have equipped",
    "FortAthenaPatrolPath:DebugLinkWidthNotSelected": "The Width of the Debug Lines between Patrol Points when a Patrol Path is NOT Selected",
    "FortAthenaPatrolPath:DebugLinkWidthSelected": "The Width of the Debug Lines between Patrol Points when a Patrol Path is Selected",
    "StormWind:WindHandle": "The WindHandle is only valid on the client.",
    "WeaponUpgradeItemRow:WoodCost": "The Wood cost",
    "FortWorldManager:X_Size": "The X-size of the tile world to be constructed",
    "SeasonalDynamicXp:XpBudgetPerMinute": "The XP Budget Per Minute given by REGS.\nThis data will most likely be maintained by Creative from season to season, but the number will be given by the REGS team.",
    "AthenaLevelInfo:LevelXp": "The XP within the current level",
    "FortWorldManager:Y_Size": "The Y-size of the tile world to be constructed",
    "FortAbilityTargetSelection:ConeYawAngle": "The Yaw Angle of cone selection type",
    "FortTrackMovementComponent:SplineLocationOffsetZ": "The Z distance from the spline to be positioned",
    "SafeZoneLocation:PreviewZScale": "The Z scale to use for the preview mesh",
    "HUDWidgetRegistryEntry:ZOrder": "The Z-Order we want this HUD Element to use.",
    "GasDebugAbilitySnapshot:Ability": "The ability asset",
    "CraftingObjectComponent:OwnerCraftingAbility": "The ability granted to the owner of the component (not mandatory)",
    "FortHeroGameplayPiece:GrantedAbilityKit": "The ability kit that can be given for this slot",
    "FortHeroTierAbilityKit:GrantedAbilityKit": "The ability kit that can be given for this slot",
    "FortSpecializationSlot:GrantedAbilityKit": "The ability kit that can be given for this slot",
    "FortSpecializationSlot:RemovedAbilityKit": "The ability kit that can be taken away for this slot",
    "FortCharacterVehicle:OverrideAbilitySystemComponent": "The ability system component this pawn uses",
    "FortRemoteControlledPawnAthena:OverrideAbilitySystemComponent": "The ability system component this pawn uses",
    "CraftingObjectComponent:WhileCraftingAbility": "The ability that runs on the crafting object while crafting a formula, unless the formula specifies an override WhileCraftingAbility",
    "CraftingFormula:WhileCraftingAbility": "The ability that runs on the crafting object while it is crafting this formula",
    "CraftingObjectComponent:InstigatorWhileCraftingAbility": "The ability that runs on the instigator (player controller) while crafting a formula, unless the formula specifies an override InstigatorWhileCraftingAbility",
    "CraftingFormula:InstigatorWhileCraftingAbility": "The ability that runs on the instigator (player controller) while it is crafting this formula",
    "AbilityActivatedByInputData:Ability": "The ability to activate if the tag query passes.",
    "AbilityActivatedByInputData:ActivationTagQuery": "The ability will activate if this query passes.",
    "FortPlayerPawn:AboveBelowMiniMapIconBrush": "The above and below icon for the player",
    "SkyfireVaultOrbSpawner:AbsoluteMaximumActiveOrbCountByCategory": "The absolute maximum number of orbs that can be active at any given time, separated by config category (i.e. playlist).",
    "DecoPlacementState:AbsoluteRotation": "The absolute rotation this thing is using",
    "EMusicClipTimelineMapping.FromStart": "The absolute start of this music will be aligned with the absolute start of the Time Authority and then looped if necessary.",
    "EMusicClipTimelineMapping.FromNearestBeat": "The absolute start of this music will be aligned with the nearest beat in the Time Authority's content and then looped if necessary. This point MAY be in the past!",
    "EMusicClipTimelineMapping.FromNextBeat": "The absolute start of this music will be aligned with the next beat encountered in the Time Authority's content and then looped if necessary.",
    "EMusicClipTimelineMapping.FromNextDownbeat": "The absolute start of this music will be aligned with the next down beat rendered for the Time Authority and then looped if necessary.",
    "EMusicClipTimelineMapping.FromSectionMarkers": "The absolute start of this music will be aligned with the next section marker encountered in the Time Authority's content and then looped if necessary.",
    "EMusicClipTimelineMapping.FromSpecificTick": "The absolute start of this music will be aligned with the specified tick in the Time Authority's content and then looped if necessary.",
    "RockVehicleAbility_Jump:JumpAccel": "The accel that is applied to the car over time as it jumps.",
    "FortReceivedGiftedBoostXpNotification:GifterAccountId": "The account Id of the player who gifted the boosted xp to you",
    "VkTeamMembershipResult:AccountId": "The account id",
    "FortMission:QuestOwnerAccount": "The account that owns the quest that this mission was spawned from",
    "FortMissionRecord:QuestOwnerAccount": "The account that owns the quest that this mission was spawned from",
    "AccumulatedItemEntry:Quantity": "The accumlated total of that item.",
    "VkNamedId:Id": "The acocunt Id",
    "SpecialEventCursorPawnComponent:ZoomActionName": "The action name from USpecialEventInputHelperComponent::InputActionMap that we should use to detect press/release of the zoom button",
    "FortWindMaterialData:MID": "The active MID that needs to have parameters set",
    "FortPawnComponent_CustomCamera:CurrentCameraController": "The active camera controller used to determine if this component should override the camera mode",
    "ActiveVehicleUI:ActiveWidget": "The active instance of the widget which was spawned.",
    "FabricUserOptionSaveComponent:ActivePresetIndex": "The active preset in use.",
    "FabricUserOptionSaveComponent:ActiveSaveIndex": "The active save slot.",
    "ActiveStyleInfo:CurrentStyle": "The active style being transitioned to",
    "EFortStructuralGridQueryResults.InvalidActor": "The actor and/or query is invalid",
    "CreativeMultiSelectedActorsInfo:Actor": "The actor being selected",
    "EFortDecoPlacementQueryResults.CanAdd": "The actor can be added",
    "EFortStructuralGridQueryResults.CanAdd": "The actor can be added",
    "EFortDecoPlacementQueryResults.RequiresPlayerBuildableActor": "The actor can only be placed on player-buildable actors",
    "FortAthenaMutator_Fill:FloorActorClass": "The actor class for the lava floor",
    "EQSActorSpawnerClassToSpawnData:ActorClassToSpawn": "The actor class that the Actor Spawner will attempt to spawn.\nThis class will be used as the spawn object if SpawnActorType == EEQSActorSpawnerSpawnType::Actor",
    "FindActorByClassData:ClassFilter": "The actor class to filter by.",
    "SpawnActorStateTreeTaskInstanceData:ActorClass": "The actor class to spawn",
    "FortAthenaMutator_SplitStorm:SafeZoneProxyClass": "The actor class to use for the safe zone proxy that will be spawned when the phase with index PhaseToSplitStorm begins.",
    "SpecialEventPhaseComponentNetModeInfo:ComponentClass": "The actor component to add to the player pawn or controller.",
    "PlayspaceComponent_PlayerManager:ActorComponents": "The actor component we want to add to the player pawn",
    "FortAthenaLivingWorldEventDespawnCondition:CanStartDespawningSafeZonePhase": "The actor in the event will only be allowed to despawn if the current safe zone phase is atleast CanStartDespawningSafeZonePhase.",
    "FortAthenaLivingWorldEventDespawnCondition:CanStartDespawningPhaseStep": "The actor in the event will only be allowed to despawn if the game phase is at least CanStartDespawningPhaseStep.",
    "EFortStructuralGridQueryResults.ExistingActor": "The actor is blocked by an existing building actor",
    "EFortDecoPlacementQueryResults.ExistingTrap": "The actor is blocked by an existing trap",
    "EFortDecoPlacementQueryResults.ExistingObject": "The actor is blocked by another existing object",
    "BuildingGameplayActorSupplyDropRadio:MinimumMovingSpeedThresholdSq": "The actor is considered moving if its falling speed is over this threshold value.",
    "EFortStructuralGridQueryResults.Obstructed": "The actor is obstructed by world geometry",
    "EFortDecoPlacementQueryResults.Obstructed": "The actor is obstructed by world geometry or building actors",
    "EFortStructuralGridQueryResults.NoStructuralSupport": "The actor lacks structural support and cannot be placed",
    "FortMaterialStyleApplyParams:TargetActor": "The actor owning the material instance to be affected",
    "IndicatedActorParticleSystemData:ParticleSystemActorParamName": "The actor parameter name on the particle system, to let the particle system know the actor it's playing on.",
    "FortBuildingInstruction:ActorRecord": "The actor record, holds most of the info",
    "EEQSActorSpawnerStopSpawningReason.ManualStop": "The actor spawner has been manually asked to stop spawning through a function call.",
    "EEQSActorSpawnerStopSpawningReason.RanOutOfRetries": "The actor spawner has failed to spawn the requested number of actors and has ran out of retry attempts.",
    "EEQSActorSpawnerStopSpawningReason.Success": "The actor spawner has successfully spawned the requested number of actors.",
    "EEQSActorSpawnerStopSpawningReason.Requeued": "The actor spawner was requeued to start spawning a new set of actors.",
    "FortCreativeSplineControlPoint:OwningSplineProp": "The actor that contains a spline component and \"owns\" this control point. Not storing as a ISplinePropInterface\nsince it cannot be casted to if implemented on the BP-level",
    "PhaseInfo:PhaseActor": "The actor that controls the flow for this phase",
    "FortObjectiveFilter_PawnDied:Killer": "The actor that has killed the author (will be the actor that downed the author if you bleed out in DBNO)",
    "CrashpadDynamicParams:CollidingActor": "The actor that hit the crashpad",
    "FortDBNOCarryHoisterData:DBNOHoister": "The actor that hoisted a dbno player",
    "FortPickupComponent_ItemAttachedActor:AttachedActor": "The actor that is attached to the pickup. Currently only 1 actor is allowed to be attached to a pickup at any time.\n     When this pickup is picked up by a player this attached actor will be attached to the player via UFortControllerComponent_ItemAttachedActor.",
    "FortKatanaDashTargetingInfo:DashBlockingActor": "The actor that is blocking the dash. Nullptr if the dash is not blocked.",
    "OrbSpawnPoint:ActorAtSpawnPoint": "The actor that is currently at this spawn point (or nullptr if no actor is here).",
    "BuildingSMActor:AttachmentPlacementBlockingActors": "The actor that is currently attached to this actor that is blocking placement of new attachments. Usually a trap.",
    "FortGameFrameworkComponent_EventMode:CurrentlyFocusedActor": "The actor that is currently focused",
    "MidmatchRiftPoiSpawnIndicator": "The actor that is spawned in the world representing the large rift in the sky that is eventually going to spawn the midmatch Poi objective.",
    "MidMatchRiftPoiManagerActor": "The actor that is spawned in the world to manage the midmatch Poi.\nIt is used to help mark the Poi for players as it is avaiable throughout the lifetime of the objective;\nincluding when it is rifting in as well when the datalayer (the island Poi) is loaded in.\nThis actor also implements the map icon for the midmatch Poi in blueprints.",
    "FortGameplayCueNotifyLoop_AbductionWarning:TargetActor": "The actor that is the target of the warning beam.",
    "FortAthenaMutator_SplitStorm:SafeZoneProxy": "The actor that represents the second safe zone that splits off from the main safe zone.",
    "AIPatrolPathComponent:CopiedFromCut": "The actor that should be copied from when cut and paste",
    "FortMissionUIActorHandle:AttachedActor": "The actor that the mission UI is attached to",
    "FortSurfaceTrackingComponent:CurrentSurfaceActor": "The actor that the pawn is currently standing on",
    "FortPlayerPetRepState:LookAtTarget": "The actor that the pet currently finds most interesting (excluding itself and the owner)",
    "FortWeaponRangedDualSwing:RopeAttachPointActor": "The actor that the rope will be anchored to for swinging. Valid on server and replicated to client.",
    "BuildingGameplayActorSentry:ActorBeingTracked": "The actor that the sentry will focus on and rotate towards.",
    "FortGameModeZone:ActiveSpawnPad": "The actor that was placed as a spawn pad, only active if set in the zone theme",
    "FortObjectiveFilter_DamageDone:DamagedActor": "The actor this damage was done to",
    "FortObjectiveFilter_Hit:DamagedActor": "The actor this damage was done to",
    "SpecialActorRepData:SpecialActor": "The actor this struct is replicating data for\nNOTE: can't really replicate this because the server doesn't know when this falls out of relevancy on the client",
    "AbilityToolSpawnParameters:AttachedToActor": "The actor to attach to when spawning",
    "AudioClusterActorInfo:Actor": "The actor to track.",
    "DaySequenceModifierComponent:ExternalVolumeBlendTarget": "The actor to use for distance-based volume blend calculations",
    "EQSActorSpawnerClassToSpawnData:SpawnActorType": "The actor type to attempt to spawn.",
    "FortAthenaMutator_Bagel:RespawnLocationActor": "The actor used to determine where players should respawn",
    "FortAthenaMutator_Mash:RespawnLocationActor": "The actor used to determine where players should respawn",
    "FortPlacementActor:OccupyingActor": "The actor using this spot at the moment",
    "SpawnedActorInfo:SpawnedActor": "The actor we are tracking",
    "OriginalAndSpawnedPair:SpawnedActor": "The actor we spawned.",
    "FortAthenaFocusAtStateTreeTaskInstanceData:Actor": "The actor we want to change focus for. Note: must be a pawn with a FortAIBotController (might support AIController eventually).",
    "FortAthenaTeleportToActorStateTreeTaskInstanceData:Actor": "The actor we want to teleport.",
    "FortAthenaToggleGameplayEffectStateTreeTaskInstanceData:TargetActor": "The actor we want to toggle the Gameplay Effects to/from (must implement IAbilitySystemInterface).",
    "FortCharacterMovementMutatorComponent:BuffetBubblesFollowActor": "The actor we're attached to",
    "CreativeSelectedActorInfo:Actor": "The actor we're dragging around",
    "EMeshNetworkRelevancy.NotRelevant": "The actor will not replicate at all.",
    "EFortActorSpawnerAuthority.ClientAuthoritative": "The actor will only spawn on clients.  Listen servers will need to make sure the actor isn't replicated.",
    "EMeshNetworkRelevancy.RelevantToClients": "The actor will replicate through the mesh and also to clients.",
    "EMeshNetworkRelevancy.RelevantToEdgeNodes": "The actor will replicate through the mesh network but not from game servers to clients.",
    "EFortActorSpawnerAuthority.ServerAuthoritative": "The actor will spawn on the server and may be replicated to clients.",
    "TornadoSimulationData:HeightAccel": "The actor's height acceleration",
    "TornadoSimulationData:TangentAccel": "The actor's tangent acceleration",
    "TornadoSimulationData:HeightVelocity": "The actor's target height velocity",
    "TornadoSimulationData:TangentVelocity": "The actor's target tangent velocity",
    "MinigamePlayers:Owner": "The actor-owner of this array; used for context for replicated changes",
    "MinigameScoreArray:Owner": "The actor-owner of this array; used for context for replicated changes",
    "FortAthenaHandleSoftDisableGuardStateTreeTaskInstanceData:ActorsToTeleportOnFailure": "The actors in this list will be required to teleport to a valid navmesh if this state is not successful.",
    "FortAthenaSoftDisableStateTreeParameter:ActorsToTeleportOnExit": "The actors in this list will be required to teleport to a valid navmesh on the exit of the handle task.",
    "FortScoutDronePickupManager:AttachedTargets": "The actors that the drone is carrying",
    "FortLinkToActorComponent:ActorsLinkedTo": "The actors we are linked to",
    "FortGameModeAthena:ActorsToClear": "The actors we are processing for destruction",
    "DeleteObjects:DeleteActors": "The actors we want to delete when TriggerInteractionBehavior gets called",
    "MinigamePlayerBucket:TeamIdAtRoundStart": "The actual Athena team players in this bucket should be assigned to on round start\nDon't assume player are _still_ on this team as Athena team affiliation can change mid-game",
    "AbilityToolSpawnParameters:SpawnClass": "The actual building actor to spawn",
    "FortKatanaDashTargetingInfo:DashDistance": "The actual distance the dash can go in the current direction, accounting for offsets and blocking actors.",
    "PairedWeightEntry": "The actual named weight.",
    "WaxPlayerDataEntry:CurrentTokens": "The actual number of tokens this player has.",
    "BagelPlayerDataEntry:PlayerState": "The actual player this info refers to.",
    "MashPlayerDataEntry:PlayerState": "The actual player this info refers to.",
    "PowPlayerDataEntry:PlayerState": "The actual player this info refers to.",
    "WaxPlayerDataEntry:PlayerState": "The actual player this info refers to.",
    "LimitedLifeDataEntry": "The actual replicated data",
    "AthenaAwardGroup:Items": "The actual rewards earned from this source",
    "QuestEventRecord:Data": "The actual up to date granted quest data",
    "ObjectiveEventRecord:Data": "The actual up to date objective data to be sent",
    "CreativeOptionData:Value": "The actual value of this entry.",
    "FortReplicatedVehicleOverrideDataContainer:Overrides": "The actual vehicle overrides array",
    "GunGameGunEntry:Weapon": "The actual weapon represented by this gun entry",
    "EAdHocSquads_LeaveSquadReason.MutatorDisabled": "The ad hoc squad mutator has become disabled.",
    "FortCosmeticVariantPreviewElement:Item": "The additional item that might be needed in the preview",
    "FortGameStateAthena:NewItemDuringWarmupWeightAddMod": "The additive weight to use for any loot package roll that has the NewItem Named Weight Tag present",
    "OverriddenSupportedAgentsByReleaseVersion:StartVersion": "The agents masks will be enabled if the current version is equal or higher than this.",
    "OverriddenSupportedAgentsByReleaseVersion:EndVersion": "The agents masks will be enabled if the current version is equal or smaller than this.",
    "OctopusInPersistent:TowhookAimDir": "The aim direction of the towhook.",
    "DigestedWeaponAccuracy:AimingCircleSettingsOverride": "The aiming circle settings for this weapon category",
    "WeaponAccuracy:AimingCircleSettingsOverride": "The aiming circle settings for this weapon category",
    "DigestedAimingCircleSettings:CircleCenterOffsetZ": "The aiming circle will be offset vertically (Z axis) by this value (in cm) from the Target’s \"PawnLocation\".",
    "AimingCircleSettings:CircleCenterOffsetZ": "The aiming circle will be offset vertically (Z) by this value from the Target’s \"PawnLocation\".",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:SafeZonesStartTime": "The aircraft phase end time",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:AircraftStartTime": "The aircraft phase start time",
    "SpatialMetricSampleImageProperties:SpatialValueAlpha": "The alpha value to use the spatial values overlay.",
    "SkyAtmosphereValues:MieExponentialDistribution": "The altitude in kilometer at which Mie effects are reduced to 40%.",
    "SkyAtmosphereValues:RayleighExponentialDistribution": "The altitude in kilometer at which Rayleigh scattering effect is reduced to 40%.",
    "HelperGameplayTagToAmmoCountMultiplier:CountMultiplier": "The ammo count multiplier override to apply for the weapon",
    "CachedRechargeAmmoData:AmmoItemDefinition": "The ammo item definition we need to recharge",
    "WindSplineComponent:BlockageSubdivisions": "The amount by which to subdivide the wind spline cross-sections along the axes perpendicular to the spline direction while calculating blockages.\n    e.g. if 3, It subdivides the wind spline cross section into a 3x3 grid, each cell of which can be individually blocked.",
    "AthenaLevelInfo:LevelXpForLevel": "The amount of XP to reach the next level",
    "CachedRechargeAmmoData:AmountToRecharge": "The amount of ammo/stacks to recharge",
    "AthenaLevelInfo:BookLevelXpForLevel": "The amount of book XP to reach the next level",
    "AthenaLevelInfo:BookLevelXp": "The amount of book XP within the current level",
    "FortReceivedGiftedBoostXpNotification:AmountBoostXpGifted": "The amount of boost xp gifted to you",
    "CombatEventData:CoolDownRate": "The amount of cool down to apply per second to the total heat",
    "FortGameplayDataTrackerEventConfiguration:CoolDownRate": "The amount of cool down to apply per second. >= 0 for events that should fade and 0 for events that should not",
    "FortObjectiveFilter_DamageDone:DamageAmount": "The amount of damage done to health",
    "FortObjectiveFilter_DamageDone:UncappedDamageAmount": "The amount of damage this damage event would have done if it was not capped by the target's remaining health.",
    "FortPlayerScoreReport:LastExperienceDeltaAmount": "The amount of experience that was added the last time this structure was updated IN DISPLAY XP",
    "DBNOCustomSettings:TenacityDepletionRate": "The amount of health that will be depleted from the player when on DBNO",
    "FortRangedWeaponStats:OverheatingMaxValue": "The amount of heat that indicates overheated",
    "FortRangedWeaponStats:OverheatHeatingValue": "The amount of heat to add for (heat up) for overheating",
    "FortRangedWeaponStats:FullyOverheatedCoolingValue": "The amount of heat to remove (cool down) for overheating when fully overheated.  If this value is not positive, it will use the regular OverheatingCoolingValue.",
    "FortRangedWeaponStats:OverheatingCoolingValue": "The amount of heat to remove(cool down) for overheating when NOT fully overheated",
    "FortMcpQuestObjectiveInfo:Count": "The amount of inline objective stats that must be accumulated to complete this objective. Each verb/type progresses a stat differently.\nFor example, a single bullet that does 50 damage increases the Damage stat by 50, but only increases the Hit stat by 1.\nKeep this in mind when mixing inline objective stat types.",
    "ExitCraftInfo:InteractionTime": "The amount of interaction time required to get on the vehicle. If <= 0, simply touching the craft is enough",
    "FortAthenaMutator_Wax:LivesToStartPlayerWith": "The amount of lives to start a player with, or 0 to disable lives.",
    "FortProjectileBase:MomentumTransfer": "The amount of normalized momentum to transfer when hitting an enemy",
    "FortBaseWeaponStats:QuickBarSlotCooldownDuration": "The amount of quickbar slot cooldown to apply when a weapon is fired",
    "WindSplineComponent:MeshRollVariance": "The amount of random roll in degrees between [-MeshRollVariance, +MeshRollVariance] to add to each spline mesh segment",
    "AccountIdAndMatchEndData:TotalScore": "The amount of score earned by this player (after dividing by team)",
    "AccountIdAndScore:TotalScore": "The amount of score earned by this player (after dividing by team)",
    "EndZoneScoreAndAwards:TotalScore": "The amount of score earned by this player (after dividing by team)",
    "AthenaSeasonRewardLevelInfo:XpToNextLevel": "The amount of the XP necessary to reach the next level from the start of this level (kind of XP is determined by Track)",
    "FortWorldManager:VerticalCellNumOffsetFromOrigin": "The amount of tiles down from zero that the structural grid extends to.  So if the Z_StructuralGrid_Size is 60,\nand the NumCellsDownFromOrigin is -20, the grid goes up 40 and down 20 from height zero.",
    "FortWeaponComponent_Swinging:DefaultForgivenessTimer": "The amount of time allowed to start swinging again, before the weapon cooldown timer starts.",
    "BuildingGameplayActorCloneMachine:DelayBeforeSelfDestruct": "The amount of time before the clone machine self destructs after a respawn",
    "FakeKillRelevancyPlayerDataEntry:RelevancyDelay": "The amount of time before the server will make these players irrelevant to us",
    "FortAthenaMutator_SynchronizedTeleport:TeleportFailsafeTimeout": "The amount of time before the teleport ends without waiting for all players to arrive.",
    "FortControllerComponent_IndicatedActorManagement:UpdateIndicatedActors": "The amount of time between called to update all indicated actors and stenciled actors.\n     This is to handle when an indicated or stenciled actor is loaded/unloaded on the client due to relevancy.",
    "BuildingGameplayActorCloneMachine:DelayBeforeActivation": "The amount of time it takes for the clone machine to boot up",
    "BuildingGameplayActorCloneMachine:DelayBeforeRespawn": "The amount of time it takes for the clone machine to respawn the player",
    "AudioClusterOneShotInfo:TimeRemainingSeconds": "The amount of time left before the event will be forgotten, in seconds",
    "SpecialEventRewindComponent:ReplicatedRewindDuration": "The amount of time over which we should perform the rewind",
    "FortPlayerControllerAthena:RespawnCamera_Time": "The amount of time the respawned-in-air cam will be active",
    "FortPlayerControllerAthena:RespawnCamera_HoldPositionTime": "The amount of time the respawned-in-air cam will stay in its original location",
    "EFortTrickIncrementType.AirTime": "The amount of time the vehicle was in the air during the trick",
    "FortDialogDescription:DisplayTime": "The amount of time to display the confirmation before timing out. 0 to disable timing out.",
    "FortDialogDescription_NUI:DisplayTime": "The amount of time to display the confirmation before timing out. 0 to disable timing out.",
    "FortCharacterMovementMutatorComponent:BuffetFlyingRicochetRotationDuration": "The amount of time to take to rotate the character toward the new velocity",
    "ControlPointSpawnData:DisableDelayTime": "The amount of time to wait before disabling",
    "ControlPointSpawnData:EnableDelayTime": "The amount of time to wait before enabling",
    "AudioClusterOneShotInfo:LifetimeSeconds": "The amount of time to wait before forgetting about the event, in seconds",
    "FortRangedWeaponStats:HeatingCooldownDelay": "The amount of time to wait before heating switches to cooling down",
    "FortRangedWeaponStats:OverheatedCooldownDelay": "The amount of time to wait before overheated switches to cooling down",
    "HeistExitCraftSpawnData:SpawnDelayTime": "The amount of time to wait before spawning (this is a delay from the start of the SafeZonePhase or or a delay from the previous exit craft if the previous craft had the same SafeZonePhase",
    "ControlPointSpawnData:SpawnDelayTime": "The amount of time to wait before spawning (this is a delay from the start of the SafeZonePhase)",
    "MassDeltaVelocityDamageHandlerData:VelocityDeltaForMaxDamage": "The amount of velocity change the system (source + target) must reach for this object to deal max damage",
    "DeltaVelocityDamageHandlerData:DeltaVelocityBuckets": "The amount of velocity change the target object must reach for this object to deal the index of damage set",
    "VelocityDamageHandlerData:PureVelocityBuckets": "The amount of velocity the target object must reach for the object to deal the index of damage set",
    "PickupManagementSettings:PickupsDesiredSlack": "The amount removed when Max is exceeded. Minimum slack is 1.",
    "FortObjectiveConversationTriggerInfo:StatTarget": "The amount that the stat must hit for the trigger type",
    "FortObjectiveAvailableConversationTriggerInfo:StatTarget": "The amount that the stat must hit to trigger the conversation",
    "FortObjectiveFilter_Repair:IncrementBy": "The amount that this objective should increment by when a message is received",
    "RadiusTrackingInitializer:RadiusAmountToShrinkEachUpdate": "The amount the circle's radius should shrink on each update.  Cannot shrink below the Minimum Radius.",
    "SpecialEventCursorMode:ZoomAdditiveFOV": "The amount to adjust the FOV by when zooming",
    "FMDeviceCable:ExtremeAngleTangentScale": "The amount to scale tangents when adding extreme angle bends",
    "CatalogDynamicBundleItem:AlreadyOwnedPriceReduction": "The amount to subtract from DiscountedPrice if you already own this item (and cannot own multiple)",
    "FortLevelUpDataV2:XPDisplayMultiplier": "The amount we should display for a unit of XP at this account level",
    "FortCreativeDiscoveryContentPanel:AnalyticsListName": "The analytics list name to use when materializing content from an AnalyticsList data source.",
    "FortWeaponRangedDualSwing:RopeAnchor": "The anchor mesh for the rope. Attached to RopeAttachPointActor when rope drawing starts. Valid on client only.",
    "FortTimeOfDayManager:SunriseSunObjectRotation": "The angle at which the sun rises (and the moon sets).  Should be the same as SunriseDirectionalLightRotation plus/minus additional pitch to put it below the horizon.",
    "FortTimeOfDayManager:SunsetSunObjectRotation": "The angle at which the sun sets (and the moon rises).  Should be the same as SunsetDirectionalLightRotation plus/minus additional pitch to put it below the horizon.",
    "HurdleInputConfigCache:Phase2_Floor_HeightCorrectionMinFloorAngle": "The angle of the floor at which we will start doing correction for distance",
    "AircraftFlightConstructionInfo:SystematicPathStartDegrees": "The angle that reaches towards the edge of the map where the path should start, in degrees between 0 and 360. Zero degrees is East and rotation is CCW.",
    "ProjectileMovementDrunkConfig:TurnAngle": "The angle to turn randomly while drunk moving.",
    "FlightParams:ControlFrameRollUpAcceleration": "The angular acceleration per difference between the current and target\n              roll-up vectors for the control frame. This will essentially determine\n              how snappy the roll of the frame is in response to changing target rolls.\n              This will mainly make a difference when the aircraft is pointing straight\n              up or straight down.",
    "WindSplineComponent:SkydivingLandingAngle": "The angular deviation in degrees between the spline tangent and the downward player acceleration needed to allow landing from skydiving within the spline",
    "FortAthenaGoatVehicle:AngularSpeedEnterPowerSlide": "The angular speed of the vehicle when it started it's power slide",
    "GoaFInPersistent:AngularSpeedEnterPowerSlide": "The angular speed of the vehicle when it started it's power slide",
    "CollisionReactionConfigurationPerPhysicsObjectSize:LaunchAngularVelocity": "The angular velocity the physics object will get launched at, multiplied by the inverse of the impact (or from the origin of the AI if bUseImpactNormal is false).",
    "BuildingGameplayActorConsumable:SearchAnim": "The anim montage we are using to search. This animation gets stopped on failure.",
    "EFortFacialAnimTypes.FromAmplitude": "The animation is applied to the entire head including neck",
    "EFortFacialAnimTypes.Max": "The animation is computed from voice amplitude",
    "EFortFacialAnimTypes.FullHead": "The animation is only applied to the face and neck motion is ignored",
    "WindSplineComponent:PlayerWindAnimationLayer": "The animation layer to apply to player in a wind tunnel",
    "FortFeedbackLine:AnimMontage": "The animation montage to play",
    "FortConversationSentence:AnimMontage": "The animation montage to play with this sentence",
    "FortFeedbackLine:AnimSequence": "The animation sequence to play",
    "FortAnimNode_AnimSetDrivenRandom:AnimSet": "The animation set driving this node (typically inherited from the anim BP class defaults)",
    "FortAnimInput_RandomizeMontageSection:CurrentAnimation": "The animation that is currently using a RandomizeNextSection notify.",
    "EFortAnnouncementDelivery.Received": "The announcement has been created and will soon be sent",
    "EFortAnnouncementDelivery.Ignored": "The announcement has been received on the client and is waiting to activate",
    "EFortAnnouncementDelivery.Active": "The announcement has been received on the client but it is not designated for this client, so it is ignored.",
    "EFortAnnouncementDelivery.Max_None": "The announcement has been stopped on the client",
    "EFortAnnouncementDelivery.Stopped": "The announcement is currently active and interacting with the client",
    "FortFeedbackManager:Announcer": "The announcer pawn",
    "FortMantisTechniqueData:DamageApplicationTag": "The application tag used when this technique enters its damage window to identify the effect container to use for target selection and data.",
    "FortMantisTechniqueData:ActivationApplicationTag": "The application tag used when this technique is activated to identify the effect container to use for target selection and data.",
    "CatalogReceiptInfo:AppStoreId": "The appstore-specific product identifier (see FCatalogOffer::AppStoreId)",
    "FortVoteConfig:VoteArbitratorType": "The arbitrator to use",
    "FortGameState:AppliedHomebaseDataArray": "The array of all the source/target applied Class/Personal HB/and Team Stat GEs and GAS for every player currently in the zone.",
    "FortScriptedObjectMovement_WorldPhaseSite:Phases": "The array of configured phases in the level",
    "FortMissionManager:EarnedBadgesArray": "The array of earned badges.",
    "OnlineDiscoveryModeSetDef:SubModeLinkIds": "The array of link codes contained in this mode set so that the A/B test logic can do a reverse lookup.",
    "AthenaHoldingArea:IgnoredPlayerPawns": "The array of player pawns that are allowed to pass through the collision of the holding area.",
    "BuildingTrapFloor_Turret:PlayerArray": "The array of players that will be considered for targetting",
    "FortSpecialActorReplicationInfo:SpecialActorRepList": "The array of special actors currently being handled",
    "FortGameModeAthena:SupportedAthenaLootTierGroups": "The array of supported loot tier groups for this game mode",
    "VehicleSpecificUIDetails:ValidSeats": "The array of valid seats this widget has. If empty, the widget will appear as\nlong as the local player is in the vehicle",
    "VoteData:Voters": "The array of voter data",
    "PairedWeightContainer:Weights": "The array of weights applied within this POI",
    "CobaltPlayerPortraitIndexInfo:PortraitIndexArray": "The array that expresses the portrait slot a particular team member index should use",
    "FortAthenaMutator_Cobalt:TeamLosers": "The array that holds all the losing team indexes",
    "FortAthenaMutator_Cobalt:TeamWinners": "The array that holds the team winning ids for the current round, used for tracking purposes and cleaned up at the end of every round",
    "HUDNavArrow:ArrowComponent": "The arrow static mesh component",
    "HUDNavArrow:ArrowPlacementHeightRelativeToScreen": "The arrow's distance from the top of the screen as a fraction of screen height",
    "HUDNavArrow:ArrowSizeRelativeToScreen": "The arrow's intended height as a fraction of the screen height",
    "HUDNavArrow:LocationRelativeToCamera": "The arrow's intended relative location to its owner when following the camera",
    "HUDNavArrow:PitchRelativeToCamera": "The arrow's pitch in radians relative to the camera. Positive numbers will tilt the arrow up when pointing forward.",
    "VkModuleVersionModerationStatus:SafetyStatus": "The assessed safety status for this module version",
    "FortAthenaMutator_Chrome:ChromeVehicleAssetIds": "The asset ID of the vehicle to use in this mode.",
    "FortExposedAsset:AssetToExpose": "The asset being exposed by this entry. This cannot be modified as this list is generated dynamically by the rule. To manually-expose an asset, use the ObjectPaths property in the rule filter.",
    "FortCreativeAssetCostData:NameMetaDataMap": "The asset cost for each actor class used in creative.",
    "FortSprayDecalRepPayload:SprayAsset": "The asset defining this spray",
    "VkFileSize:Types": "The asset types contained within the file",
    "FortAthenaMutator_DeimosSurvival:ObjectivesData": "The assets associated with the Building Actor spawned in middle of each survival phases",
    "FortAthenaMutator_Disco:ControlPointAssets": "The assets associated with the control points",
    "FortPhysicsObjectComponent:ImpactInstigatorData": "The assigned instigator for this physics object, to be used when the object imparts impact damage",
    "FortSphericalVehicleAsyncDef": "The async definition contains all of the input and output structs as well as functions necessary to\nmarshal data to and from the physics thread and to run updates on the physics thread.",
    "OctopusAsyncDef": "The async definition contains all of the input and output structs as well as functions necessary to marshal data to and from the physics thread and to run updates on the physics thread.",
    "FortAthenaVehicle:bPossiblyTouchingTop": "The async property from the physics thread where we might be touching the top of the vehicle.",
    "FortTimeOfDayManager:SunriseSkyAtmosphereRotation": "The atmosphere rotation at sunrise for the override",
    "FortTimeOfDayManager:SunsetSkyAtmosphereRotation": "The atmosphere rotation at sunset for the override",
    "RidableComponent:RidablePropAttachLocationOffset": "The attach location offset to apply when attaching the ridable prop",
    "RiderComponent:RiderPropAttachLocationOffset": "The attach location offset to apply when attaching the rider prop",
    "RidableComponent:AttachLocationOffset": "The attach location offset to apply when attaching the rider.",
    "RidableComponent:ClientAttachGuideLocationOffset": "The attach location offset to apply when using the client guide socket",
    "RidableComponent:RidablePropAttachRotationOffset": "The attach rotation offset to apply when attaching the ridable prop",
    "RiderComponent:RiderPropAttachRotationOffset": "The attach rotation offset to apply when attaching the rider prop",
    "RidableComponent:AttachRotationOffset": "The attach rotation offset to apply when attaching the rider.",
    "RidableComponent:RidablePropAttachScale": "The attach scale to apply when attaching the ridable prop",
    "RiderComponent:RiderPropAttachScale": "The attach scale to apply when attaching the rider prop",
    "FortNevadaVehicle:TractorBeamAttachedActor": "The attached actor of the tractor beam",
    "FortHeldObjectComponent:AttachmentSocketName": "The attachment socket name",
    "FortHeldObjectComponent:AttachmentOffset": "The attachment transform to apply on pickup",
    "VoiceChatDistanceAttenuationSettings:AttenuationCurve": "The attenuation curve to use",
    "FortAttributeInfo:Attribute": "The attribute represented by this info",
    "FortTooltipDisplayInfo:PrimaryObjectClass": "The attribute represented by this info",
    "FortTooltipDisplayInfo:SecondaryObjectClass": "The attribute represented by this info",
    "AttributeClamp:Attribute": "The attribute to be clamped.",
    "HeroSpecializationAttributeRequirement:Attribute": "The attribute to check",
    "GameplayCueNotify_Jetpack_FuelRegen:FuelAttribute": "The attribute used for the fuel",
    "GameplayCueNotify_Jetpack_FuelRegen:FuelMaxAttribute": "The attribute used for the fuel max",
    "GameplayCueNotify_Jetpack_FuelRegen:ReserveFuelAttribute": "The attribute used for the reserve fuel",
    "GameplayCueNotify_Jetpack_FuelRegen:ReserveFuelMaxAttribute": "The attribute used for the reserve fuel max",
    "CraftingFormula:AttributeTags": "The attributes associated with this recipe which can allow for organization, or other attributes for gameplay purposes",
    "WeaponModCosmeticData:AudioData": "The audio data to be used for the weapon mod",
    "HarmonixPlayerComponentBase:PlayEmitterObj": "The audio emitter object to play from; if not defined the object heirarchy will be searched for one.",
    "MediaMusicTimelineGenerator:EmitterObj": "The audio emitter object to play from; if not defined the object heirarchy will be searched for one.",
    "HarmonixPlayerComponentBase:SyncEmitterObj": "The audio emitter object to sync to; if not defined sync will be to the same emitter as it is played from.",
    "FortFeedbackLine:Audio": "The audio for this feedback",
    "FortUIFeedback:Audio": "The audio for this feedback",
    "FortConversationSentence:SpeechAudio": "The audio representation of this sentence",
    "FortSentenceAudio:Audio": "The audio to play for this speech",
    "CatalogRedeemRealMoneyPurchasesInfo:AuthTokens": "The authTokens needed to authenticate with the app store in the backend on behalf of the player\nIt is required for platforms that require client-generated tokens. It’s an array because some platforms generate separate tokens for online and offline use",
    "FortObjectiveFilter_ConversationChoiceMade": "The author has selected a choice in a conversation",
    "VkModuleVersionDoc:Author": "The author of the module version",
    "VkModuleDoc:Author": "The author of this module",
    "FortWeapon:AutoFireReticleImage": "The auto fire reticle image to use",
    "FortExposedAsset:AutogeneratedAliases": "The auto-generated list of aliases to display this asset as. This list is a combination of both the ExposedPathCustomization and any rule-specific logic.",
    "FabricMetaSoundNodeInfo:Name": "The auto-generated name assigned to this node",
    "FortMissionRecord:MissionEntry": "The available missions for this zone",
    "EQualitativePerfMetric.HitchTimePercent": "The average Hitch Time Percent for the match.",
    "EQualitativePerfMetric.MVP": "The average MVP value for the match. Currently disabled on PC.",
    "FortPawnComponent_GrindRail:AnimatedTurnDuration": "The average length of the 180 turn animation to simulate the turn on non-local proxies.",
    "EQuestEditorGenerateBackendNameReason.ForceRebuild": "The backend name is force rebuilt, even if it's already set.\nThe new backend name is set using a unique id specific to the quest asset.",
    "EQuestEditorGenerateBackendNameReason.OnlyBuildEmpty": "The backend name only built if it's not already set; if already set it is ignored.\nThe new backend name is set using a unique id specific to the quest asset.",
    "GameplayStatMetadataTableRow:BackendName": "The backend stat name. Alphanumeric or underscores, no longer than 63 characters",
    "FortEarlyAcessLoadingScreen:EABackground": "The background image for the early access label in the loading screen.",
    "FortQuestEarnedBadgeData:Count": "The badge count",
    "EarnedBadgePlayerData:Count": "The badge count for this player",
    "RewardBadgesProgression:RewardBadges": "The badges reward to completing a tier",
    "FortAthenaSupplyDropBalloon": "The balloon actor that is setup as a child actor component for the various supply drop actors in the game.",
    "ESupplyDropRadioBalloonState.Closed": "The balloon is closed and has the potential to be\n     opened up when at a certain distance from the ground.\n     The actor incorporates the gravity acceleration in its falling movement.",
    "ESupplyDropRadioBalloonState.Destroyed": "The balloon is destroyed and the actor incorporates the gravity\n     acceleration in its falling movement.",
    "ESupplyDropRadioBalloonState.Opened": "The balloon is open. It ignores the gravity acceleration and falls\n     to the ground at a constant speed.",
    "ESupplyDropRadioBalloonState": "The balloon states of the supply drop.\n    Primarily used to determine the falling speed of the actor.",
    "FortFeedbackHandle:FeedbackBank": "The bank that this handle refers to - Can be None, which means it's a code based event",
    "FortAIPawn:NoWeaponInCombatEventName": "The bank-defined Feedback Event name we use when an AI announces it has no weapon while in combat.",
    "FortAIPawn:NoWeaponOutOfCombatEventName": "The bank-defined Feedback Event name we use when an AI announces it has no weapon while out of combat.",
    "FortSprayDecalRepPayload:BannerColor": "The banner color of the player (if available)",
    "FortSprayDecalRepPayload:BannerName": "The banner name of the player (if available)",
    "MtxPackage:BannerOverride": "The banner to show, if any for this offer.",
    "VkJobOutput:BaseUrl": "The base URL for which Files are relative",
    "FortGameFeatureComponentEntry:ActorClass": "The base actor class to add a component to",
    "GameFeatureAudioClusterEntry:ActorClasses": "The base actor classes to register",
    "FortAthenaMutator_StreamDistanceOverride:StreamDistanceScale": "The base amount to scale the stream distance console variables by",
    "FortItemEntry": "The base class for all item entries. Can be used for ordinary items that can go on the quickbar or in the inventory",
    "FortGrindRail": "The base class for grind rail, which is used for custom movement mode Grinding",
    "MissionTimeDisplayData:BaseColor": "The base color that will be mixed in with Pulse Color if this thing is pulsing",
    "TieredWaveSetCollectionData:BaseWaveLengthRowName": "The base defense length picked by difficulty (table referenced in game data)",
    "TieredWaveSetCollectionData:BaseNumOfKillPointsRowName": "The base defense number of kill points picked by difficulty (table referenced in game data)",
    "TieredWaveSetCollectionData:BaseNumRiftKillsRowName": "The base defense number of kill points picked by difficulty (table referenced in game data)",
    "TieredWaveSetCollectionData:BaseNumOfKillsRowName": "The base defense number of kills picked by difficulty (table referenced in game data)",
    "FortAIPawnUpgradeData:ModifierDefinition": "The base modifiers that get applied to the pawn when being upgraded.",
    "ActorTemplateRecord": "The base object we base the NewObjectRecords off of. Differing from a Radix Tree we don’t save diffs from a base but always make a new base when it occurs. In practice I’ve found there are few times where a diff from a base would be necessary or used, so a simpler structure is preferred.",
    "FortMinigameItemListComponent:BaseInstigatorData": "The base pickup instigator data that will be applied to each item we manage",
    "PlaylistPropertyArray:BasePlaylist": "The base playlist object; used for duplication and reverting to default property values",
    "FortSafeZoneIndicator:SafeZoneWorldScale": "The base safe zone world scale used to calculate the material scale",
    "RepParamBase": "The base struct type for a replicated param.",
    "RidingAnalyticsData_Base": "The base struct type for all riding analytics.",
    "FortMcpProfileEncryptionKey:KeyData": "The base64encoded key data",
    "WindSplineComponent:FieldMagnitudeBase": "The basic magnitude of the physics field along the spline direction (before falloff is applied)",
    "FortGameStateAthena:BattleRoyaleGamePhaseLogicClass": "The battle royale game phase logic component class to use",
    "SBMusicalTargetsCueId:Beat": "The beat that this cue will arrive on.",
    "FortInjectedBehaviorEntry:InjectedBehavior": "The behavior to inject",
    "SkyfireBotPlayerPawnComponent:BehaviorTree": "The behavior tree to use when inside the mothership",
    "SpecialEventInputHelperActionBindData:PressBindType": "The bind type for button press",
    "SpecialEventInputHelperActionBindData:ReleaseBindType": "The bind type for button release",
    "FortFactionSharedBBInfo:BlackboardComp": "The blackboard component that is used to access the shared BB.",
    "SpawnerDataComponentAffiliationSharedBBConfiguration:SharedBlackboard": "The blackboard that will get shared.",
    "TimeOfDayEditorWeatherSettings:WeatherEventBlendPercentage": "The blend percentage of the weather event",
    "WindSplineBlockage:SubDivBlockages": "The blockages along the sub divisions of the spline crosssection",
    "FortAIPawn:SleepingFloor": "The blocking building actor that is considered our floor while sleeping. Since it could be destroyed we want to know when it dies.",
    "LacklusterData:ApplyChromeClassPath": "The blueprint ApplyChrome class",
    "LacklusterData:ChromeAudioClassPath": "The blueprint chrome audio component class",
    "FortAthenaMutator_Cobalt:DeathEffectsComponentClass": "The blueprint class of the Death Effects Component to attach to player controllers",
    "LacklusterData:bIsInitialized": "The blueprint sets this when it finishes initialization",
    "FortDialogDescription:MessageBody": "The body of the message to display",
    "FortDialogDescription_NUI:MessageBody": "The body of the message to display",
    "FortSpecialEventOverrideParts:OverrideParts": "The body parts to override.",
    "TeamBucketPartOverrideData:BodyType": "The bodytype of the characters that these customizations will be applied to",
    "RigUnit_BoneGroundTrace:Bone": "The bone whose ground-trace is requested",
    "AthenaAwardGroup:BookXp": "The book XP granted as part of this reward (if any)",
    "FortAthenaMutator_GameStartCountdown:bCountdownTimerRunning": "The boolean that indicates if the countdown timer is running or not.",
    "FortAthenaMutator_Bismuth:BotData": "The bot data to use to spawn the bismuth AI Bot",
    "EUIExtensionSlot.MobileHUDBottomRight": "The bottom right corner of the Mobile HUD",
    "FortSearchBounceData:BounceNormal": "The bounce normal thread through the container and all attached to it.",
    "FortCurieInteractionComponent:CollisionComponent": "The bound collider that will receive OnHit/OnOverlapBegin/OnOverlapEnd events *",
    "FortProjectPlayComponent:AllActorsBounds": "The bounds of all actors loaded added together (excluding the level bounds actor). Member variable as it can grow over multiple sub level loads.",
    "FortProjectPlayComponent:LevelBoundsActorBounds": "The bounds of the level bounds actor if one existed in the loaded maps.",
    "BuildingFoundationStreamingData:BoundingBox": "The bounds used to determine when to stream in this foundation's sub-level (local to the foundation)",
    "UrgentQuestData:BountyPriceImage": "The bounty price currency icon to show, can be a UTexture or UMaterialInterface or an object implementing the AtlasedTextureInterface.",
    "FortAthenaCompassIcon:Brush": "The brush that is used.",
    "FortQuestMapCosmetic:CosmeticBrush": "The brush to show for this Image cosmetic image",
    "FortOptionsMenuData:TabBrush": "The brush to use for the tab",
    "DrawTaggedPlayerIndicatorsData:FriendBrush": "The brush to use when a friendly player has the Player Tag.",
    "DrawTaggedPlayerIndicatorsData:EnemyBrush": "The brush to use when an enemy player has the Player Tag.",
    "DrawTaggedPlayerIndicatorsData:LocalPlayerBrush": "The brush to use when the local player has the Player Tag.",
    "FortAthenaMutator_AI_SignificanceBasedUpdate:SignificanceBasedMovementUpdateBuckets": "The buckets that AI pawn's movement components will be divided into for staggered updates based on distance from the player.\n\n    NOTE: Please ensure every value from 0.0 to 500.0 (the distances at which a pawn is assigned a significance\n    value - see UFortSignificanceManager::BucketData) fits inside the range [MinDistanceFromPlayer, MaxDistanceFromPlayer]\n    for at least one bucket in SignificanceBasedMovementUpdateBuckets.\n\n    Movement components with distances that don't fit into any bucket will be managed by the game state and will not be managed\n    by this mutator again, regardless of if their distance to the player changes to a value that fits into a bucket.",
    "BuildingTrap:AttachedTo": "The building actor this is attached to, can be null.",
    "BuildingTrap:LastAttachedTo": "The building actor this is attached to, can be null.",
    "FortPlayerController:BuildPreviewMarker": "The building actor to serve as a preview marker while attempting to build.",
    "FortPlayerController:BuildPreviewMarkerExtraPiece": "The building actor to serve as a preview marker while attempting to build. Shows if we want to build an extra piece.",
    "EFortBuildingInteraction.Repair": "The building can be repaired",
    "EFortBuildingInteraction.Upgrade": "The building can be upgraded",
    "FortBuildingAddStructuralSupportMarkerComponent:BuildingClass": "The building class to use when spawning a building at this location\n     Ideally the building class will have will have no mesh (since the mesh will be hidden and collision turned off)\n     The building class must have the correct building type set in order to work with the structural support system",
    "FortPlayerControllerPvE:AutoImproveBuildingActor": "The building currently used for auto improve",
    "MilkshakeControllerComponent:BuildingDamageFXTemplate": "The building damage FX to spawn in SpawnBuildingDamageFX",
    "BuildingFoundationMayday:ForceStrangeLandsBuildingGroup": "The building group that will be used by 1 foundation if strangelands is force enabled",
    "BuildingFoundationMayday:StrangeLandsBuildingGroup": "The building group that will be used if strangelands is enabled",
    "FortDynamicBuilder:BuildingInstructions": "The building instructions",
    "FortDynamicBuildingDeconstructor:Bounds": "The building instructions",
    "EFortBuildingInteraction.Edit": "The building is editable",
    "EFortBuildingInteraction.BeingModified": "The building is interactable, but is currently undergoing a modification (repair, upgrade, etc.)",
    "EFortBuildingInteraction.Build": "The building piece can be built",
    "EFortBuildingInteraction.ConfirmEdit": "The building piece grid can be edited",
    "FortLinkedAnimGraphsData:BuildingPoseBlueprintClass": "The building pose animation blueprint to use on this pawn.",
    "FortFocusedBuildingInfo:QuickEditClass": "The building that this class will change to if quick edited",
    "FNE_VolumeComponent:SpatialGameplayActorTracker": "The cached SpatialActorTracker that tracks our Actors within the volume",
    "BuildingFoundation:StreamingBoundingBox": "The cached actor-space streaming bounds of this foundation.  This is calculated automatically using\n          the size of the EditorVisualizationComponent's bounds during save.  Used by:\n              - Athena to stream in foundation sub-levels based on the distance between a viewer and the closest point on this bounds\n              - Navigation graph to validate generation in PIE",
    "DeploymentConsoleAircraftData:Aircraft": "The cached aircraft.",
    "FortLevelInstanceSaveActor:CachedActorCost": "The cached cost of the level instance at the time the LSR was updated",
    "WindSplineComponent:FieldSystemComponent": "The cached field system component",
    "BuildingMusicSequencer:CachedTriggerInstigator": "The cached instigator who started the sweep. Used to resolve asynchronous hit actors",
    "FortPlayerControllerAthena:CachedPurchasedItems": "The cached items for purchase when in the spawner UI",
    "LevelInstanceGameplayVolume:LevelInstanceName": "The cached name of the level instance",
    "FortAthenaZiplineBase:CachedInteractContextPawn": "The cached pawn interacting w/ the zipline",
    "FortAscenderZipline:CurrentInteractComponent": "The cached pawn interacting w/ the zipline. -- Only on the client.",
    "MashPlayerDataEntry:PlayerName": "The cached player name.",
    "NyxGlassWeaponComponent_Swinging:CurTargetingData": "The cached targeting data when the weapon is fired. Sent to server and remote clients.",
    "KatanaTargetingComponent:CachedTechniqueAbilityCDO": "The cached technique ability CDO for the owning player pawn.",
    "FortPortalComponent:ThumbnailTexture": "The cached thumbnail texture that was downloaded and instantiated dynamically",
    "FortAthenaCreativePortal:ThumbnailTexture": "The cached thumbnail texture that was downloaded and instantiated dynamically.  Use the 'On Thumbnail Texture Ready' event to find out when this texture is ready to be displayed.",
    "FortAthenaPartyRiftPortal:ThumbnailTexture": "The cached thumbnail texture that was downloaded and instantiated dynamically.  Use the 'On Thumbnail Texture Ready' event to find out when this texture is ready to be displayed.",
    "CreativeSelectedActorInfo:UnscaledActorToSelectionAtDragStart": "The cached transform relative to the selection set pivot at the time when we started to drag the actor",
    "FortPortalComponent:LoadedLinkData": "The cached/deserialized links data",
    "FortSafeZoneIndicator:SafeZoneAudioLocation": "The calculated SafeZone audio location (used in BP Tick)",
    "FortCreativeStormShield:ViewTargetLocation": "The calculated view target location",
    "FortSafeZoneIndicator:ViewTargetLocation": "The calculated view target location (used in BP Tick)",
    "FortCreativeStormShield:bIsViewTargetPawnOutside": "The calculated view target pawn outside bool",
    "FortSafeZoneIndicator:bIsViewTargetPawnOutside": "The calculated view target pawn outside bool (used in BP Tick)",
    "CorruptionCalendarEventData:EventName": "The calendar event string to watch. Corruption will not start until this event is reached.",
    "ScriptedObjectMovement_StaticPathSplineInputKeyData:CalendarEvent": "The calendar event that begins the spline point group movement",
    "OnTimeHitInfo:TimeCallback": "The callback",
    "FortAthenaMutator_ShowPlacard:CameraActor": "The camera actor that is set to each player's view target while the placard UI is showing",
    "CobaltCombatStormShieldDataEntry:POICamera": "The camera actor that looks over this POI",
    "FortRemoteControlledPawnAthena:RemoteControlledPawnDefaultCameraClass": "The camera mode we wish to use when the controller's pawn is a remote controlled pawn",
    "FortRemoteControlledPawnAthena:RemoteControlledPawnTriggeredCameraClass": "The camera mode we wish to use when the controller's pawn is a remote controlled pawn",
    "LockOnInfo:CamRotAtTargetAcquisiton": "The camera rotation at the time of target acquisition",
    "UraniumPOIData:CameraActor": "The camera to use to display this POI to players before the round starts",
    "CameraPair:Camera": "The camera to use when switching to this view",
    "FortItemPreviewMultiAngleActor:ActiveCameraAngle": "The camera we will manipulate around, and read directly",
    "FortPlayerRecord:CampaignPeriodRecord": "The campaign period of the stat manager stats",
    "FortEncounterPawnNumberCaps": "The cap on the number of AI pawns allowed in an encounter per number of player",
    "LaserCapsuleComponent": "The capsule collision used for individual lasers of the laser grid actor.",
    "BuildingGameplayActorLaserGrid:LaserCapsuleComponentClass": "The capsule component class to use as the collision for the laser connections.",
    "FortProjectileBase:CapsuleComponent": "The capsule, which is the collision component in most projectiles",
    "FortAthenaMutator_Uranium:PushCart": "The cart that players are fighting over",
    "FortTheaterMapTileData:XCoordinate": "The cartesian x coordinate of this tile",
    "FortTheaterMapTileData:YCoordinate": "The cartesian y coordinate of this tile",
    "CatalogOffer:OfferId": "The catalog item's guid (for purchasing)",
    "FortChallengeBundleSpecialOffer:Storefront": "The catalog storefront to pull the first item from as the special offer.  We do this\nrather than offer Ids.",
    "EOrbSpawnerConfigCategory": "The categories that define which config to use when spawning orbs. These correspond\n   to the type of playlist that is loaded (i.e. Playlist_DefaultSolo ~ Solo).",
    "FortAvailableMissionAlertData:CategoryName": "The category row name associated with this mission alert data",
    "FortMissionAlertData:CategoryRowName": "The category row name for this mission alert",
    "FortMissionAlertAvailableData:MissionAlertCategoryName": "The category row name used for this available data",
    "FortActionKeyMapping:LocalizedCategory": "The category the action is in.",
    "FortAthenaMutator_SplitStorm:ProxyEndCircle": "The center and radius that the safe zone proxy should end at.",
    "FortAthenaMutator_SplitStorm:ProxyHoldCircle": "The center and radius that the safe zone proxy should hold at. The proxy holds between its MoveToHold and MoveToEnd phases.",
    "FortAthenaMutator_SplitStorm:ProxyStartCircle": "The center and radius that the safe zone proxy should start at.",
    "FortTaggedActorOctreeFilter:Bounds": "The center of the bounds used by the Oct Tree Iterator",
    "FortSafeZonePhaseInfo:Center": "The center point the safe zone should move towards during this phase",
    "PrototypeCraftingOutput:CreationChance": "The chance that this item will be chosen from all of the potential output.",
    "PrototypeCraftingIngredient:ConsumptionChance": "The chance the item(s) will be consumed on a successful crafting action.",
    "FortFeedbackEventData:ChanceToPlay": "The chance this piece of feedback plays",
    "GlobalWeatherData:Chance": "The chance we will pick this weather event based on time of day (24 hours)",
    "FortCreativeMessageDispatcherErrorMessage:ChannelId": "The channel id of the message component that's causing the error",
    "FortGameplayMessageComponentBase:ChannelIds": "The channel ids we send/receive on",
    "HUDMessageData:DisableChannel": "The channel on which this HUD message's \"Disable\" message will be broadcast, if applicable. Currently only used in Creative.\nOnly channels >0 are used by devices. If this value is <=0, the message can be dismissed with a timeout or a hide request with a channel value also <=0.",
    "EFortAnnouncementChannel": "The channel this announcement runs on, each channel can run at the same time",
    "ReactorGradeGameplayCue_ChargeUp:TraceChannel": "The channel we will perform the async trace against to determine our end point.",
    "MoggMusicTrack:Channels": "The channels belonging on this track. Specify the channel index, pan and volume",
    "FortPlayerCharm:CharmItemDef": "The charm definition we were created from",
    "AthenaQuickChatLeafEntry:FullChatMessage": "The chat message that others will see ({ContextObject} and {ContextValue} will be filled in appropriately)",
    "FortAthenaMutator_Uranium:CurrentPOI": "The chosen POI the round will take place at",
    "FortMission:ChosenRewardIdx": "The chosen reward index",
    "ChromeWaterBodyComponent:ChromeWaterMaterialInterface": "The chrome water material that is applied to the water body that this component gets added to.",
    "AIWeatherData:LoseSightRadiusClamp": "The clamp for AI Loose Sight Distance. Negative values disable the clamp",
    "AIWeatherData:SightRadiusClamp": "The clamp for AI Sight Distance. Negative values disable the clamp",
    "PlayspaceComponent_AIPerceptionModifier:AIBotLoseSightRadiusClamp": "The clamp for lose sight distance for AI bots when they enter the volume. Negative values mean that the clamp won't apply",
    "PlayspaceComponent_AIPerceptionModifier:AIBotSightRadiusClamp": "The clamp for sight distance for AI bots when they enter the volume. Negative values mean that the clamp won't apply",
    "FortSpawnActorComponent:ActorToSpawnClass": "The class of Actor to spawn",
    "DestroyActorsAndComponentsMutator_ActorDefinition:SoftActorClass": "The class of actor this definition will handle",
    "AssetAdapterInfo:AssetClassPath": "The class of asset to adapt.",
    "FortMapIconDefinition:InWorldIndicatorSoftClass": "The class of in-world indicator to instance",
    "FortMapIconDefinition:MinimapIndicatorClass": "The class of map indicator to instance",
    "FortMiniMapComponent:MinimapIndicatorClass": "The class of map indicator to instance",
    "FortAIPawn:AIGoalComponentClass": "The class of the AI goal component to use for goal selection if bUseAIGoalComponent is true.",
    "FortAthenaMutator_Uranium:PushCartClass": "The class of the Push Cart spawned and managed by this mutator",
    "FortAthenaMutator_Uranium:StormShieldClass": "The class of the Storm Shield spawned and managed by this mutator",
    "FortAthenaMutator_Skyfire:TimeOrbClass": "The class of the TimeOrbs that should be spawned.",
    "UIStateRelayBaton:OfferingComponent": "The class of the component that is offering the baton.",
    "UIStateRelayBaton:OfferingComponentType": "The class of the component that is offering the baton.",
    "BuildingProp_AISpawner:CreativeRiftClass": "The class of the creative rift we want to create",
    "KatanaTargetingComponent:KatanaTechniqueAbilityClass": "The class of the katana's Mantis technique ability.",
    "FortGiftingInfo:HeroType": "The class of the player that gifted the item",
    "FortAthenaMutator_SkyCap:SkyCapClass": "The class of the sky cap",
    "FortAthenaMutator_Skyfire:SkyfireAudioManagerClass": "The class of the skyfire audio manager actor that is spawned to handle playing audio/sounds for the skyfire game feature.",
    "FortAthenaMutator_Cobalt:StormShieldClass": "The class of the storm shield actor to spawn - use the blueprint here",
    "FortAthenaMutator_Chrome:TraversePointClass": "The class of the traverse point",
    "FortAthenaMutator_SpawnInVehicle:VehicleClass": "The class of the vehicle to spawn for a player when respawning",
    "FortAthenaMutator_Chrome": "The class that handles the Chrome LTM",
    "TrapItemDefintionDesignerData:WeaponActorClass": "The class that is responsible for \"firing\" the trap.",
    "SkyfireVaultOrbSpawner:VaultOrbClass": "The class that should be used to spawn orbs.",
    "AssetAdapterInfo:AdaptedClassPath": "The class that the asset will be adapted into.",
    "ValkyrieClassPropertyPermissionList:Type": "The class to apply this PermissionList to",
    "SpecialEventCursorPawnComponent:InputHelperClass": "The class to spawn for our InputHelperComponent, which will be used for cursor movement",
    "TempestLightningComponent:LightningBoltClass": "The class to use to spawn the lightning bolt",
    "PlayspaceComponentConfiguration:PlayspaceComponentClass": "The class to use when adding this playspace component",
    "PlayspaceConfiguration:PlayspaceClass": "The class to use when creating this Playspace",
    "FortAthenaMutator_TeamPawnColor:TeamPawnColorControllerComponentClass": "The class used to spawn TeamPawnColor controller components onto each participating player.\n     If set to nullptr, UFortControllerComponent_TeamPawnColor will be used.",
    "DBNOCustomSettings:SelectedClass": "The class which this settings will be applied to",
    "FortPlacementActorFinderEntry:BuildingClassesToFind": "The classes of building actors to find. If this is a BuildingSMActor and this is on a mission, the found actors will be replaced by new instances of BuildingToSpawn.",
    "HurdleInputConfig:Phase5_ClearanceCapsuleSize": "The clearance size of the capsule for the back sweep for landing position",
    "HurdleInputConfigCache:Phase5_ClearanceCapsuleSize": "The clearance size of the capsule for the back sweep for landing position",
    "EFortClientUpdateType.ContentOnly": "The client executable is out of date",
    "EClientContentReadinessV2.AllRequestsComplete": "The client is in sync with the servers content right now.  Client can switch between this and ready to join.",
    "EClientContentReadinessV2.LoadedContent": "The client loaded content but isn't ready to join yet",
    "CloneMachineRepData:CloneMachine": "The clone machine registered with this resurrection comp",
    "DeploymentConsoleComponent:MinHeightFromGround": "The closest to ground that players can spawn.",
    "DeploymentConsoleComponent:MinHeightFromZero": "The closest to zero that players can spawn.",
    "DeployableBaseSupportSettings:DeployableBaseCloudSaveItemDef": "The cloud save item definition expected for deployable bases in use",
    "SKPushVehicleInPersistent:CurrentAnimCoastState": "The coast state for updating animation",
    "SKPushVehicleInPersistent:CurrentPhysicsCoastState": "The coast state for updating movement",
    "FortChallengeBundleInfoLockedReason:ReasonCode": "The code for the lock reason",
    "FriendCodeIssuedNotification:Code": "The code itself",
    "FortCollectionBookPageData:CategoryId": "The collection category this page is in",
    "VkModuleVersionDoc:Artifacts": "The collection of per-version artifacts",
    "FortCollectionBookPageData:ProfileId": "The collection profile this page is in",
    "PlayerFishingTelemetryData:bBestCollected": "The collection state results from catching this fish has returned that this is the best collected for this player",
    "PlayerFishingTelemetryData:FishVariantTag": "The collection variant type of this fish - used with the collection book",
    "FortGameplayEffectDeliveryActor:CollisionComponent": "The collision component",
    "LaserGridConnectionEntry:LaserCapsuleComponent": "The collision component that is used to implement the laser's detection behavior.\n     This component needs to be manually destroyed when the struct holding it is destroyed.\n     We do NOT use a deconstructor for this because structs are easily copied and copies are destroyed without care.",
    "FortPawn:HealthBarHeightMultiplier": "The collision height multiplier to attach the health bar to",
    "RiderComponent:CollisionProfileName": "The collision profile name to use for the ridable overlap check",
    "LaserCapsuleComponent:CollisionWhenDisabled": "The collision setting of the laser component when it is considered disabled.",
    "LaserCapsuleComponent:CollisionWhenEnabled": "The collision setting of the laser component when it is considered enabled.",
    "BattleLabDeviceGameplayActor_VendingMachine:FunnelCollision": "The collision that detects when a item has been dropped near the funnel of this vending machine",
    "FortMotorcycleVehicle:DoorBashCollisionTypesForDoor": "The collision types to consider for the trace looking for doors.",
    "FortMotorcycleVehicle:DoorBashCollisionTypesForPawn": "The collision types to consider for the trace looking for pawns to be launched by the door bash.",
    "RadiusTrackingInitializer:CircleColor": "The color for the circle to display.",
    "UtilityData:DebugGraphColor": "The color for this utility line in the debug graph",
    "CombatEventData:DebugGraphColor": "The color of the event, for graphing purposes",
    "CombatFactorData:DebugGraphColor": "The color of the factor in the debug graph",
    "BuildingProp_BountyBoard:InteractSubTextColor": "The color of the interaction text.",
    "FortCheckPointSplineActor:SplineMapUITeamColors": "The color of the spline map UI per team",
    "CombatThresholdData:DebugGraphColor": "The color of the threshold, for graphing purposes",
    "FortCreativeServerDisplayOption:Color": "The color to associate with a Creative server",
    "FortAthenaMutator_SplitStorm:ProxyMapCircleColor": "The color to draw the proxy storm circle on the minimap.",
    "TeamPawnColor_VisualData:MiniMapColor": "The color used the draw players of this team on the mini map.\n     This property is not actually used by AFortAthenaMutator_TeamPawnColor, but is used by some LTMs that utilize this system (like AFortAthenaMutator_Tag.)",
    "FortAIPawn:PlayerManagerMinimapColor": "The color we will use for our Player Manager's minimap.",
    "MinimapGoalByTagColorsData:MinimapColor": "The color we will use if our goal has any of the tags.",
    "UtilityContribution:ContributingAIDirectorFactor": "The combat factor that is contributing",
    "UtilityContribution:ContributingFactor": "The combat factor that is contributing",
    "CombatManagerComponentSTW:FactorGraph": "The combat factors graph",
    "CombatManagerComponentSTW:CombatFactors": "The combat factors. For AI Director use",
    "CombatManagerComponentSTW:CombatGraph": "The combet event heat graph to display output",
    "FortTrackMovementComponent:TrackMovement": "The combination of properties that describes where we are on the track",
    "GameDifficultyInfo:PvPRating": "The combined 10 player rating that will refer to this difficulty row.",
    "FortPlayerController:CommonCoreMcpProfile": "The common public profile for this MCP account",
    "FortPlayerController:CommonPublicMcpProfile": "The common public profile for this MCP account",
    "FortEventConditional:ComparisonType": "The comparison to use defined by an enum: e.g. >, <=",
    "ScriptedObjectMovement_DynamicPathContext": "The complete contextual data for a given objects movement path",
    "FortGameMode:CurrentBucketId": "The complete matchmaking bucket ID received from the MMS match assignment.",
    "IntensityContribution:CompletionPercentageToStopReducingMultiplier": "The completion percentage at which the multiplier will be restored to 1.0. Mapped vs DifficultyLevel.",
    "IntensityContribution:CompletionPercentageToStartReducingMultiplier": "The completion percentage at which the multiplier will begin being lerped back towards 1.0. Mapped vs DifficultyLevel.",
    "FortGameFeatureComponentEntry:ComponentClass": "The component class to add to the specified type of actor",
    "FortAthenaMutator_PlayerZoneSettings:ZoneSettingsClass": "The component class to spawn for each \"zone\" context",
    "FortAthenaMutator_PlayerClassSettings:ClassSettingsClass": "The component class to spawn for each player-class index",
    "FortAthenaMutator_PlayerTeamSettings:TeamSettingsClass": "The component class to spawn for each team index",
    "ApplyWrapVariant:CustomSectionMaskByMeshName": "The component name that should be paired with a wrap section override",
    "FortFallTeleportSpawnerComponent:RemoveComponentRequestTimeOffset": "The component request will be removed this many seconds before the Warmup phase ends",
    "SpecialEventStatArray:StatComponent": "The component responsible for creating us and manipulating our Stats.  Provided to newly created stats in PostReplicatedAdd().\nNotReplicated, because we take care of it on both server and client in USpecialEventStatComponent::InitializeComponent().",
    "LiveDamageNumberComponent:Component": "The component that is currently live",
    "MeshNetworkEventStateDataArray:OwningLoader": "The component that owns this array",
    "FortClientAnnouncement_Conversation:SpeechComponent": "The component that plays the speech of the conversation",
    "FortPawnVocalChord:FeedbackAudioComponent": "The component that plays the speech of this pawn",
    "FortAthenaCreativePortal:InteractComponent": "The component that was hit by the interact trace",
    "InteractionType:InteractComponent": "The component that was hit by the interact trace",
    "ZiplinePawnState:InteractComponent": "The component that was interacted with to start ziplining",
    "CobaltPOICameraActor:TranslationSceneComponent": "The component that will be used for animating the camera forward when camera viewport is activated by a player controller.",
    "FortSpawnActorComponent:ComponentTag": "The component to attach to (or get the location from) to spawn the actor at",
    "FortDamageNumberInfo:StaticMeshComponent": "The component to be used to visualize the numbers. Pooled for reuse.",
    "BuildingSMActor:BASEEffectMeshComponent": "The component used to display the Constructor's BASE effect. Used client side only.",
    "VoteInitiationActor:VoteBroadcasterComponent": "The component used to manage and broadcast voting sessions",
    "FortPlayerControllerAthena:ResurrectionComponent": "The component used to track resurrection status for squadmates",
    "FortPlayerControllerAthena:SeasonItemComponent": "The component used to track season item state",
    "FortPlayerControllerFrontEnd:SeasonItemComponent": "The component used to track season item state",
    "SoundEffectVariant:ComponentsToApplyTo": "The components to change the sound on. If the component name is none, will apply to all sound components",
    "VkFileSize:CompressedSize": "The compressed size of the cooked file (in bytes), or -1 if the compressed size isn't known",
    "FortCosmeticAdaptiveStatPreview:UnlockCondition": "The condition under which the variant is achievable.  Typically this is some kind of achievement in the game like \"Reach Level 55\"",
    "FortCosmeticVariantPreview:UnlockCondition": "The condition under which the variant is achievable.  Typically this is some kind of achievement in the game like \"Reach Level 55\"",
    "ELivingWorldCalendarEventConditionBehavior.Ratio": "The condition will check if the calendar event is active and has reached a certain completion ratio.",
    "ELivingWorldCalendarEventConditionBehavior.IsActive": "The condition will check if the calendar event is active or not.",
    "FortBulletPatternEntry:EntryData": "The config data for this entry in the bullet pattern. Specifies starting socket, rotation from\n    central fire line, and min/max per shot rotation variance.",
    "FortAthenaVehicle:VehicleConfigsClass": "The configuration class used for this vehicle. This is currently a must have unfortunately.",
    "UIStateRelayBaton:OfferingComponentConfiguration": "The configuration object of the component that is offering the baton.",
    "CollisionReactionConfiguration:PhysicsObjectReactionPerPhysicsObjectSize": "The configuration the physics object will use to react to collisions, per size; used only if PhysicsObjectReaction is FCollisionWithLaunchableReactionTypes::Launch.",
    "FortDialogDescription_NUI:ConfirmButtonInputActions": "The confirm button's input action to use.",
    "FortLevelInstanceSaveActor:ContentCollection": "The content collection for the level instance",
    "EFortCreativeDiscoveryPanelType.PlayHistory": "The content is selected based on the player's recently and favorited links.",
    "EFortCreativeDiscoveryPanelType.MetricDriven": "The content is selected based on the result set of a metrtic.",
    "EFortCreativeDiscoveryPanelType.AnalyticsList": "The content is selected from a backend analytical data table that was processed separately.",
    "EFortCreativeDiscoveryPanelType.Tournaments": "The content is selected from a backend call to Event Service that determines tournaments the player is eligible for",
    "EFortCreativeDiscoveryPanelType.CuratedList": "The content is selected from a sequential list of pre-defined entries.",
    "EFortCreativeDiscoveryPanelType.Recommendations": "The content is selected per user from the recommendation system.",
    "FortCreativeDiscoveryTestCohort:ContentPanels": "The content panels that make up this surface.",
    "FortFeedbackLine:Context": "The context that this feedback is undertaken",
    "FortFeedbackResponse:Context": "The context to respond to - FFC_None_Max means random",
    "IntensityContribution:CombatFactor": "The contributing combat factor",
    "IntensityContribution:ContributingAIDirectorFactor": "The contributing combat factor",
    "FlightParams:ControlFrameDefaultRollUp": "The control frame will strongly prefer this particular upvector, should\n              almost always be the world-up.",
    "FortAthenaMutator_FakeKillRelevancy:FakeKillControllerComponentClass": "The controller component class to spawn for each player in FindOrCreateFakeKillRelevancyComponent()",
    "PlayspaceComponent_PlayerManager:ControllerComponents": "The controller component we want to add to the player controller",
    "EFortPerModeInputType.Controller": "The controller input type",
    "FortPlayerStart:ClaimingController": "The controller that claimed this PlayerStart",
    "DataDrivenServiceBriefConfig:CostParameterKey": "The conversation choice data key to used to look up any 'Cost' data e.g 500 bars",
    "DataDrivenServiceBriefConfig:CannotUseReasonParameterKey": "The conversation choice data key to used to look up any CannotUseReason e.g. \"outofstock\"",
    "DataDrivenServiceBriefConfig:StockCountParameterKey": "The conversation choice data key to used to look up any numeric part of Stock Count e.g. Stock: [10] or Charges: [1] etc",
    "VkJobOutput:Files": "The cooked output files",
    "EvasiveManeuverSkillSettingsSpecialization:Cooldown": "The cooldown before these settings can be used again after the max duration expired. (-1 = no cooldown).",
    "DigestedEvasiveManeuverSkillSettingsSpecialization:Cooldown": "The cooldown before these settings can be used again after the max duration expired. (Leave at 0 if you don't want a cooldown).",
    "EFortItemCooldownType.Death": "The cooldown is based on death, as in real-life, death has no duration",
    "EFortItemCooldownType.AmmoRegeneration": "The cooldown is based on regeneration of ammo",
    "EFortItemCooldownType.WeaponReloading": "The cooldown is based on reloading, note that reloading has no duration associated with it",
    "EFortItemCooldownType.ItemActivation": "The cooldown is not activateable due to cooldown",
    "FortPawnComponent_GrindRail:WeaponIsShootingCooldown": "The cooldown time after we fire weapon that also considered as is shooting",
    "FortPawnComponent_GrindRail:WeaponHolsterCooldown": "The cooldown time after weapon usage before we holster the weapon",
    "EFortItemCooldownType.AthenaWeaponFireCooldown": "The cooldown used by BR when a weapon is fired (if the systems are turned on of course)",
    "EFortItemCooldownType.AbilitySetActivateByInputAbility": "The cooldown used by abilities that come from an ability set with activate by input abilities.",
    "BuildingTrap:AlternateMaterialInstance": "The corresponding Alternate Material Instance for the Trap actor",
    "BuildingTrap:UnattachedMaterialInstance": "The corresponding material instance of a trap not attached to a building in UEFN.",
    "AIPatrolPathComponent:PatrolPointActor": "The corresponding patrol point actor in the actual FortAthenaPatrolPath",
    "WeaponModCosmeticData": "The cosmetic data for a weapon mod",
    "LoadoutVariantDef:LoadoutItem": "The cosmetic loadout item that is checked against for apply any of the modifications.  Will be an inclusive or exclusive check based on 'bItemExpectedInLoadout'",
    "FortFocusedBuildingInfo:InteractionCost": "The cost of interaction with this building (repair, upgrade)",
    "BuildingItemWeaponUpgradeActor:BrickCostCurve": "The cost of the Brick resources Required. Row 1 = UC, Row 2 = R, Row 3 = VR, Row 4 = SR",
    "BuildingItemWeaponUpgradeActor:HorizontalBrickCostCurve": "The cost of the Horizontal Brick resources Required. Row 0 = C, Row 1 = UC, Row 2 = R, Row 3 = VR, Row 4 = SR",
    "BuildingItemWeaponUpgradeActor:HorizontalMetalCostCurve": "The cost of the Horizontal Metal resources Required. Row 0 = C, Row 1 = UC, Row 2 = R, Row 3 = VR, Row 4 = SR",
    "BuildingItemWeaponUpgradeActor:HorizontalWoodCostCurve": "The cost of the Horizontal Wood resources Required. Row 0 = C, Row 1 = UC, Row 2 = R, Row 3 = VR, Row 4 = SR",
    "BuildingItemWeaponUpgradeActor:MetalCostCurve": "The cost of the Metal resources Required. Row 1 = UC, Row 2 = R, Row 3 = VR, Row 4 = SR",
    "BuildingItemWeaponUpgradeActor:WoodCostCurve": "The cost of the Wood resources Required. Row 1 = UC, Row 2 = R, Row 3 = VR, Row 4 = SR",
    "GiftUINotificationInfo:Count": "The count of the item being given (e.g. 3 * Small Shield Potion)",
    "WaxPlacementData:CoinCount": "The count of tokens the player has.",
    "FortItemEntry:PreviousCount": "The count set in the previous replication",
    "EncounterGetKillCountStateTreeTaskInstanceData:Value": "The count value",
    "EncounterGetRemainingCountStateTreeTaskInstanceData:Value": "The count value",
    "FortAthenaMutator_GameStartCountdown:CountdownDuration": "The countdown duration of the game start countdown mutator.",
    "FortCreativeDiscoveryContentPanel:CountryCodeAllowlist": "The country codes that this panel is available for.",
    "FortCreativeDiscoveryTestCohort:CountryCodeAllowlist": "The country codes that this panel is available for.",
    "FortCreativeDiscoveryContentPanel:CountryCodeBlocklist": "The country codes that this panel is not available for.",
    "FortCreativeDiscoveryTestCohort:CountryCodeBlocklist": "The country codes that this panel is not available for.",
    "CraftingIngredientQueryState:Requirement": "The crafting ingredient requirement that was queried",
    "CraftingFormula:SourceObjectTag": "The crafting object tag that this recipe is sourced from (i.e. Cooking pot or Forge)",
    "CraftingObjectComponent:CraftingObjectRepStateData": "The crafting object's state on client & server",
    "CraftingObjectComponent:CraftingObjectServerStateData": "The crafting object's state, only on server",
    "CraftingObjectRepStateData:CraftingObjectState": "The crafting objects current state",
    "CraftingObjectServerStateData:CraftingResults": "The crafting results",
    "FortMotorcycleVehicle:AcceleratingCameraShakeInstance": "The created accelerating camera shake object.",
    "FortTankVehicle:AcceleratingCameraShakeInstance": "The created accelerating camera shake object.",
    "FortMotorcycleVehicle:DriverCameraShakeInstance": "The created driver camera shake object.",
    "FortTankVehicle:DriverCameraShakeInstance": "The created driver camera shake object.",
    "FortQuickBars:CreativeQuickBar": "The creative quick bar - currently GUIDs but should be changed to be UFortItems when supported by the server",
    "HomebaseSquad:CrewSlots": "The crew squad slot",
    "FortWeapon:CriticalHitNotifyLocationReticleImage": "The critical hit notify location reticle image to use",
    "AttributeModifierInfo:InstantGEs": "The cumulative impact of instant GEs from this source\nIf it exists, this GE is a locally created GE and should NEVER be replicated because there is no backing asset",
    "FortServiceTransactionInfo:OwnedCurrency": "The currency owned by the player at the time of the transaction",
    "CatalogPurchaseInfo:Currency": "The currency we want to purchase the product with",
    "CatalogPurchaseInfoGift:Currency": "The currency we want to purchase the product with",
    "FortTeamMemberInfo:HeroXP": "The current XP of the party member's current hero",
    "MultiItemReplicationProxy:ItemXPValue": "The current XP value of the owning multi-item.",
    "FortControllerComponent_MovementCancellableAction:CurrentAbility": "The current ability that is being monitored by the component",
    "FortAthenaAIBotController:CurrentAlertLevel": "The current alert level state of the bot",
    "FortAthenaGoatVehicle:AccumulatedPowerSlideBoostDiscrete": "The current amount of boost that has been accumulated",
    "GoaFInPersistent:AccumulatedPowerSlideBoostDiscrete": "The current amount of boost that has been accumulated",
    "FortCowVehicle:CurrentSquash": "The current amount of squash that we use on the squash material.",
    "AnimSpinner:RotationAngle": "The current angle of rotation around the rotation axis",
    "EBuildingGameplayActorSentry_State": "The current behavior state of a turret.",
    "OctopusInPersistent:BoostSpeedKmh": "The current boost speed",
    "FortAthenaMutator_Mash:BossPawn": "The current boss pawn the players are encountering.\n     This pawn could be a mini-boss or the final boss the players need to defeat to end the game.\n     This pawn could be a AFortAIPawn (Deimos AI) or a AFortPlayerPawnAthena (AI Bot)",
    "MilkshakeControllerComponent:CurrentCameraShakeAudioComponent": "The current camera shake audio component",
    "FortAthenaMutator_SplitStorm:CurrentProxyCircle": "The current center and radius of the safe zone proxy. Replicated to the client so the minimap representation can be drawn.",
    "GameplayEventSubscription:EventHandle": "The current event handle, if any.",
    "FortGameplayDataTrackerComponent:EventValues": "The current event values",
    "BuildingGameplayActorSupplyDropRadio:FallSpeed": "The current falling speed of the supply drop.\n     This value is updated and used dynamically at runtime to calculate the delta movement on each frame.",
    "AthenaBuildingFoundationObjective:CurrentHealth": "The current health of all the building actors summed up",
    "SpecialActorRepData:CurrentHealth": "The current health of the actor",
    "BuildingActorMinimalReplicationProxy:Health": "The current health of this building compressed from a float to 16 bits.",
    "FortHeroLoadoutPedestal:HeroLoadout": "The current hero loadout being represented.",
    "FortMission:CurrentObjectiveBlockIndex": "The current index that says which Objective Block we are in",
    "FortDynamicBuildingDeconstructor:CurrentIndex": "The current index we are on",
    "FortDynamicBuilder:CurrentIndex": "The current instruction index for SortedBuildingInstructions for the building we are currently spawning.",
    "AthenaLevelInfo:BookLevel": "The current level of the season battle book",
    "FortGameplayMessageDispatcherComponent:ActiveMessageReceivers": "The current list of receivers we are iterating over\nWe have a separate array of the current active message receivers in case the receivers end up removing themselves from the list",
    "WaxPlayerDataEntry:CurrentLives": "The current lives this player has, respawning is only possible while you have a life.",
    "FortPlayerMannequin:LoadingMode": "The current loading mode for the player mannequin",
    "PowPlayerDataEntry:CurrentMaxShield": "The current max shield for this player",
    "FortPawnComponent_GrindRail:NativeMaxSpeed": "The current max speed along grind rail, only valid on autonomous and authority side.",
    "VolumePerformanceMetrics:MostExpensivePreviewDeltaValue": "The current max value.  Placeholder for future metrics.",
    "VolumePerformanceMetrics:PerformanceMaxValue": "The current max value.  Placeholder for future metrics.",
    "FortWeaponPickaxeDualWieldAthena:WeaponMeshOffhand": "The current mesh representing the offhand weapon",
    "FortProjectileBase:BulletWhipTrackerComponent": "The current mesh representing the tracer",
    "FortTracerBase:BulletWhipTrackerComponent": "The current mesh representing the tracer",
    "FortTracerBase:TracerMesh": "The current mesh representing the tracer",
    "FortWeapon:WeaponMesh": "The current mesh representing the weapon",
    "FortGameplayMessageDispatcherComponent:ActiveMessage": "The current message we're iterating over",
    "FortMission:MissionStatus": "The current mission status",
    "PhysicsObjectMovementStateData:MovementState": "The current movement state",
    "FortGravityGunHolder:ObjectTypeHeld": "The current object type being held.",
    "AutoAimWeaponPawnComponent:LockOnTarget": "The current pawn target we have locked onto and/or are currently locking onto.",
    "MultiItemReplicationProxy:ItemXPPercentage": "The current percentage of XP the owning multi-item has gained towards it's next level.",
    "VolumePerformanceMetrics:MostExpensivePerformanceValue": "The current performance value.  Placeholder for future metrics.",
    "VolumePerformanceMetrics:PerformanceValue": "The current performance value.  Placeholder for future metrics.",
    "FortAthenaMutator_FakeKillRelevancy:PhaseNum": "The current phase being executed.  Phase 0 is just for setup, not execution.  Phase 1 and beyond occur with each call to SetUpKillPhase().",
    "FortAthenaMutator_SpecialEventTODM:PhaseIndexInProgress": "The current phase for which we are processing TODM data.  Replicated only for debug text.",
    "FortMinigame:CurrentState": "The current phase of the minigame",
    "FortAthenaMutator_SplitStorm:CurrentProxyPhase": "The current phase of the safe zone proxy. If the proxy is not active (i.e. before PhaseToSplitStorm or after PhaseToSplitStorm + 1), the current phase will be None.",
    "TimeStampedPhysicsPawnState": "The current physics state time stamped.\nUsed to determine how fast the server or client is ticking to best predict the next position.",
    "EFortBuildPreviewMarkerOptionalAdjustment.FreeWallPieceOnBottom": "The current piece is above the terrain but leaves a gap under it. Build a free piece below this one.",
    "EFortBuildPreviewMarkerOptionalAdjustment.FreeWallPieceOnTop": "The current piece is too far in the terrain. Build a free piece on top of this one.",
    "FortDecoHelper:CurrentAttachmentType": "The current placement type of the given object (floor? Ceiling? Wall?",
    "FortControllerComponent_SocialInspector:CurrentSocialInspectTarget": "The current player target from the trace (nullptr if no current target)",
    "DeployableBasePlot:CurrentBuildingState": "The current plot's building state",
    "DeployableBasePlot:GoalBuildingState": "The current plot's building state",
    "FortSubscriptionProgressiveInfo:Stage": "The current progressable stage. 0 if not acquired.",
    "FortGravityGunHolder:RingRotationSpeedWhileADS": "The current rotation speed of the ring around the held object while ADS.",
    "FortGravityGunHolder:RingRotationSpeed": "The current rotation speed of the ring around the held object.",
    "BuildingTrapFloor_Turret:CurrentRotationalSpeed": "The current rotational speed of the turret",
    "CobaltWidgetRoundData:RoundNumber": "The current round",
    "FortAthenaMutator_Uranium:RoundData": "The current round data, organized together for easy replication",
    "UraniumRoundData:CurrentRoundNumber": "The current round index",
    "FortAthenaMutator_Uranium:CurrentRoundPhase": "The current round phase that is being worked on. ONLY updates on the server",
    "FortAthenaMutator_Rounds:CurrentRoundNum": "The current round that is being played.  <= 0 means the warmup phase, before first round.  1 == first round.",
    "TeamPlacementData:TeamScore": "The current score of the team.",
    "FortAIEncounterWaveProgressEstimation:CurrentSection": "The current section of the wave",
    "FortClientAnnouncement_Conversation:CurrentSentenceIndex": "The current sentence index",
    "TempestReplicatedMovementData:LastServerLocation": "The current server location used to correct the movement on the client",
    "TempestReplicatedMovementData:LastServerRotation": "The current server rotation used to correct the movement on the client",
    "PowPlayerDataEntry:CurrentShield": "The current shield for this player",
    "SpecialActorRepData:CurrentShield": "The current shield of the actor",
    "FortAthenaMutator_Skyfire:CurrentPhase": "The current skyfire phase",
    "FortSafeZoneIndicator:CurrentTravelSplineComponent": "The current spline the safe zone is using. Replicated to the client so the safezone will move in sync on all machines.",
    "FortCowVehicle:CurrentSquashSpeed": "The current squash speed. This can change depending on the impact.",
    "FortObjectiveAvailableConversationTriggerInfo:CurrentCounter": "The current stat counter. This can reset if the counter wraps",
    "AthenaCapturePoint:CaptureState": "The current state of the capture point. Dictates capture point progress.\n      Idle means not progressing, Capturing indicates increasing,",
    "FortAthenaExitCraft:CurrentState": "The current state of the exit craft",
    "FortAthenaGoatVehicle:PowerSlideState": "The current state of the vehicles power slide",
    "GoaFInPersistent:PowerSlideState": "The current state of the vehicles power slide",
    "VoteSessionRuntime:VoteSessionState": "The current state of the vote session this data is tracking",
    "SpecialEventRewindComponent:StateData": "The current state of this component",
    "VoteRuntime:VoteState": "The current state of this vote",
    "FortGravityGunHolder:CurrentState": "The current state the gravity gun holder is in.",
    "FortCampaignJackalVehicle:VehicleLeftAnalogStrafingMultiplier": "The current strafing multiplier in Km/H",
    "FortTimeOfDayWeatherComponent:CurrentBlendTime": "The current time heading towards target blend time",
    "FortPickupEntryData:StartTime": "The current time of this entry",
    "SpecialEventAudioAnalysisBaseComponent:CurrentTime": "The current time to sample the AudioSynesthesiaNRT asset at",
    "CombatManagerComponentSTW:CurrentTotalHeat": "The current total heat",
    "FortSafeZoneIndicator:PhaseCount": "The current total number of safe zone phases",
    "FortCreativeMoveTool:CurrentTransformationType": "The current transformation type of move freely. Switches between Translate, Rotate, and scale. Used to control Input",
    "FortWeaponComponent_Swinging:CurForgivenessTimer": "The current value of the forgiveness timer. If 0, the timer is not active.",
    "FortTeamPrivateInfo:AverageDamageDealt": "The current value of this team in terms of average damage dealt to enemy players",
    "PFWExample_GameObject_PersistentInfo": "The current version of the save/restore struct for persistent data in UPFWExample_GameObject except the sub object array.\n  // <<= ** The structs that are written and read from services HAVE to be USTRUCTS for the underlying services. They iterate the properties and write them",
    "FortGameCueNotifyLoop_Cloak:VisibilityLevel": "The current visibility of this effect. Set by TickVisibilityLevel().",
    "FortTimeOfDayWeatherComponent:WeatherState": "The current weather event state (active, inactive, blending in, blending out)",
    "FortGravityGunHolder:HeldObject": "The currently held object.",
    "FortWeaponRanged:OverheatValue": "The currently overheat value",
    "FortPawnComponent_Phasing:PhasingBuilding": "The currently phasing building to be ignored for moving physics",
    "FortPartyRepData:RegionId": "The currently selected (by the party leader) matchmaking region ID",
    "FortPlayerController:CurrentBuildableClass": "The currently selected buildable building class, if any; Only valid on a local controller",
    "FortWeapon:ActiveFireMode": "The currently selected fire mode data. Used to prevent duplicate applies. Also used to track a mode to apply pending async load",
    "FortTeamMemberInfo:HeroClass": "The currently selected hero class",
    "FortAthenaMutator_LootChoice:LootSelection": "The currently selected loot option",
    "BuildingProp_DeimosSpawner:OverrideQueryRadius": "The currently stored option for the radius of the EQS Query. This will override the query radius",
    "SpecialEventCursorWeaponComponent:CursorPawnComponent": "The cursor component belonging to our pawn, from which we get the direction to aim our weapon",
    "FortPlayerMarkerBase:SpawnMarkerAnim_Opacity": "The curve is used to control the marker's opacity after it's spawned",
    "FortPlayerMarkerBase:SpawnMarkerAnim_SpawnScale": "The curve is used to control the marker's spawn scale after it's spawned",
    "FortPlayerMarkerBase:SpawnMarkerAnim_SpawnVerticalScale": "The curve is used to control the marker's spawn vertical scale after it's spawned. SpawnVerticalScale fully controls the vertical",
    "FortDifficultyOptionBudget:DifficultyOptionPointsCurve": "The curve of difficulty option points available to spend mapped against Game Difficulty",
    "FortInstensityCurveSequenceProgression:SelectionWeight": "The curve sequence's selection weighting mapped against Difficulty Level",
    "AimingCircleSettings:ExtraHitOddsCurve": "The curve that defines the odds to do extra hits before reseting the -Time between hits-. 0 means there will be no extra hit, 1 means there will be 1 extra hit, so 2 hits, etc.",
    "DigestedAimingCircleSettings:ExtraHitOddsCurve": "The curve that defines the odds to do extra hits before reseting the -Time between hits-. 0 means there will be no extra hit, 1 means there will be 1 extra hit, so 2 hits, etc.",
    "DigestedAimingCircleSettings:CircleShrinkCurve": "The curve that defines the way we will Shrink from the MaxCircle to the MinCircle based on time. X axis is the TimeRatio to the next hit (0 = we shouldn't hit, 1 = we should hit). Y axis is the CircleRatio (0 = smallest circle, 1 = biggest circle)",
    "AimingCircleSettings:CircleShrinkCurve": "The curve that defines the way we will Shrink from the MaxCircle to the MinCircle based on time. X axis is the TimeRatio to the next hit (0 = we shouldn't hit, 1 = we should hit). Y axis is the CircleRatio (0 = smallest circle, 1 = biggest circle). Note: This is an actual curve, not a value based on skill level.",
    "RootMotionSource_RocketRam:SpeedCurve": "The curve that determines how fast the character should move based on the simulation time of this root motion source.\n              Normalized from 0 to 1 on both axes, vertical axis represents the speed where 0 is MinSpeed and 1 is MaxSpeed, horizontal\n              axis is time where 1 is the total duration of the root motion source.",
    "FMDeviceCableOrderingMovementState:Curve": "The curve used to move a port between two locations in the active list",
    "HUDNavArrow:ScaleCurve": "The curve used to scale the arrow in and out. Plays forward to scale in and in reverse to scale back out",
    "FortBaseWeaponStats:ChargeDamageMultiplierCurve": "The curve we'll use to get the charge damage multiplier. If empty, we'll do a linear scale from MinChargeDamageMultiplier to MaxChargeDamageMultiplier.",
    "FortUserInputSettingsPerInputType:ActionMappings": "The custom ActionBindings for this input type",
    "CustomCharacterPartsByKillOverrideData:PartOverrideData": "The custom character part overrides the player's pawn will use after they achieve the kill count threshold.",
    "BuildingGameplayActorLaserGrid:LaserMaterialCustomDataIndex_AnimTimestamp": "The custom data index set on the laser instanced static mesh and used by the laser materials for the animation timestamp.",
    "BuildingGameplayActorLaserGrid:LaserMaterialCustomDataIndex_PulseTimeOffset": "The custom data index set on the laser instanced static mesh and used by the laser materials for the pulse effect time offset.",
    "BuildingGameplayActorLaserGrid:LaserMaterialCustomDataIndex_RandomFlickeringSpeed": "The custom data index set on the laser instanced static mesh and used by the laser materials for the random flickering speed.",
    "BuildingGameplayActorLaserGrid:LaserMaterialCustomDataIndex_PulseEnabled": "The custom data index set on the laser instanced static mesh and used by the laser materials to control if the pulse effect is enabled.",
    "BuildingGameplayActorLaserGrid:OutletMaterialCustomDataIndex_AnimTimestampDuration": "The custom data index set on the outlet instanced static mesh and used by the outlet materials for the animation timestamp duration.",
    "BuildingGameplayActorLaserGrid:OutletMaterialCustomDataIndex_AnimTimestamp": "The custom data index set on the outlet instanced static mesh and used by the outlet materials for the animation timestamp.",
    "BuildingGameplayActorLaserGrid:OutletMaterialCustomDataIndex_DisableEmissivePulse": "The custom data index set on the outlet instanced static mesh and used by the outlet materials to control if the emissive pulsing state should be disabled.",
    "BuildingGameplayActorLaserGrid:OutletMaterialCustomDataIndex_EmissiveEnabled": "The custom data index set on the outlet instanced static mesh and used by the outlet materials to control if the emissive should be enabled.",
    "BuildingGameplayActorLaserGrid:LaserCustomDataIndexForRandomizedVisuals": "The custom data value index of the laser instanced static mesh component that is used to help randomize the laser's visuals.\n     This index is read in the materials. The custom data value for this index is set to a random value [0, 1)\n     This feature is NOT used if the index is set < 0.",
    "ObjectiveFilter_Custom": "The custom filter is for creating new kinds of objective filters not yet in existence.  This is great for one-offs\nand similar cases where they're complex cases that are likely determined at blueprint time by an ability that it\nwould be best to fire off a unique event to represent these objectives making progress.",
    "BuildingCustomizableSpawnContainer:SpawnItems": "The custom items added into this container. This is the list of items that will be in the container",
    "FortAthenaCreativeSupplyDrop:SpawnItems": "The custom items added into this container. This is the list of items that will be in the container",
    "PartOverrideData:PartsToSwapIn": "The customization parts to be used",
    "TeamBucketPartOverrideData:PartsToSwapIn": "The customization parts to be used",
    "SkyfireBackpackComponent:MaxUpdateDistance": "The cut off distance for calling UpdateTime for non-local pawns.",
    "FortDamageNumberInfo:DamageNumberArray": "The damage as an array of digits, with a leading zero as a placeholder for + or -",
    "BuildingActor:DamageAttributeSet": "The damage attribute set owned by this building actor",
    "MotorcycleWheel:SpringDamp": "The damping associated with this spring",
    "SpringConfig:SpringDamp": "The damping associated with this spring",
    "VehicleSpringInfo:SpringDamp": "The damping associated with this spring",
    "MotorcycleWheel:WheelieSpringDamp": "The damping associated with this spring when doing a wheelie/stoppie",
    "MotorcycleWheel:PowerslideSpringDamp": "The damping associated with this spring when powersliding",
    "MotorcycleWheel:PoppedTireSpringDamp": "The damping associated with this spring when the tire is popped.",
    "ActorOwnedStateTreeConfig:StateTreeAsset": "The data asset of the StateTree to add to an Actor",
    "FortAISpawnerData": "The data associated with an EnemySpawner in an encounter with the necessary data for spawning enemies",
    "FortAthenaMutator_RespawnWave:WaveDataArray": "The data associated with each team's upcoming waves",
    "FortAthenaMutator_AdHocSquads:AdHocSquadDataClass": "The data class to use when holding information that is maintained per ad hoc squad.\n     If the specified class is null, the mutator doesn't bother maintaining any squad based data.",
    "FortPlayerSurveyMcpDataRoot:AllSurveysMetadata": "The data for all surveys collectively.",
    "FortPendingStoppedEncounterData": "The data for an encounter that is pending being stopped",
    "FortPartyRepData:SelectedIsland": "The data for the currently selected session in this party, the session the participating players would matchmake into",
    "TempestLightningComponent:LightningBoltData": "The data for the lightning bolts",
    "WindVolumeData": "The data for the wind volume",
    "FortAIPawn:UpgradeUIData": "The data for what to display in the pawn's health bar UI based on an upgrade",
    "QuickBarData": "The data that defines a quick bar",
    "QuickBarSlotData": "The data that defines a quick bar slot",
    "QuickBar:DataDefinition": "The data that defines this quick bar",
    "FortWeapon:OpticDefinition": "The data that describes the optic attached to the weapon, if any.",
    "FabricMetaSoundRuntimeInputInfo:FabricKnobType": "The data type of the UserOption.",
    "FabricMetaSoundRuntimeInputInfo:DataType": "The data type of the metasound value. This should be derived from the FabricKnobType",
    "FortSubscriptionProgressiveFulfillmentConfig:AcquisitionCutoffDate": "The date by which progressive set stage 1 needs to be unlocked in ISO-8601",
    "VkModuleDoc:Created": "The date created",
    "FortActiveSubscription:NextRenewalRewardDate": "The date for the next renewal reward.",
    "FortSubscriptionProgressiveInfo:NextStageRewardDate": "The date for the next stage reward. Different from profile data, this will be locally set to a projected next grant date before the set is acquired or after it's completed.",
    "VkModuleVersionDoc:Created": "The date of creation",
    "VkProjectDoc:Created": "The date of creation",
    "VkProjectSearchResult:Created": "The date of creation",
    "VkProjectSearchResultSlim:Date": "The date of last access",
    "VkProjectSearchResult:Accessed": "The date of last update",
    "VkTeamMembershipResult:Updated": "The date of last update",
    "FortActiveSubscription:LastRenewalRewardDate": "The date of the last granted renewal reward.",
    "VkModuleDoc:Updated": "The date updated",
    "FortSubscriptionProgressiveInfo:AcquiredDate": "The date when the player initially acquired the progressable. MinValue if not acquired.",
    "DaySequenceAssetData:Sequence": "The day sequence asset",
    "DaySequenceModifierNamedSequence:Sequence": "The day sequence asset",
    "FortVolumeTimeOfDayComponent:DaySequenceModifierComponent": "The day sequence modifier component that's only spawned on the client",
    "FortMissionRecord:DayGenerated": "The day this mission was generated",
    "FortSubscriptionProgressiveFulfillmentConfig:GrantOnDayOfMonth": "The day-of-month a progressive set stages would be granted. Used to calculate client side dates",
    "MinigameScoreArray:HighScores": "The de facto list of \"high scores\", ordered/sized based on the scoring template",
    "FortPlayerCameraBase:DeathCameraClass": "The death camera class",
    "FortTagToDeathCause:DeathCause": "The death cause for the defined tag",
    "FortAthenaMutator_Bismuth:ReflectDeathReason": "The death reason that could be used for UI text display for when the player dies cause of reflect.",
    "BuildingGameplayActorPetrol:SplatterDecal": "The decal component for this actor",
    "FortActiveMontageDecisionWindow:DecisionWindow": "The decision window this is associated with",
    "FortDialogDescription_NUI:DeclineButtonInputAction": "The decline button's input action to use.",
    "AbilityToolSpawnParameters:Location": "The deco spawn location",
    "AbilityToolSpawnParameters:Rotation": "The deco spawn rotation",
    "DAD_CosmeticItemUserOption:StoreLink": "The deeplink used to open the store page to this cosmetic directly.",
    "UserOptionDefinition:bDefaultOverrideValue": "The default \"override\" value of this option.\n@note This data is synced from the default value of the CDO, so should be set there.",
    "FortControllerComponent_AIDebugger:DefaultNavDataIndexToDisplay": "The default NavData index that will be display",
    "FortPlayerCameraBase:CinematicCameraClass": "The default cinematic camera class",
    "HmxEditorSettings:RequireAudioSourceDataToBeInSpecificDir": "The default directory to look for assets in when reimporting, relative to the project directory.",
    "DaySequenceAssetData:Bias": "The default hierarchical bias assigned to this sequence. Bias controls how the the sequence\nwill blend with other sequences driving the same property. A higher bias will override other\nsequences. An equivalent bias will blend.",
    "FortAthenaMutator_MarkerUtilities:IndicatedPlayerCompassIcon": "The default icon to use when marking actors on the compass. Only used if bMarkPlayersOnCompass is true.\nCan be overridden per actor by OverrideIndicatedActorCompassIcon().",
    "FortPlayerPawn:DefaultSwimmingAnimLayerOverlayClass": "The default layer to use for swimming on this pawn. Change to override swimming logic",
    "FortExposedAssetPathCustomization:DefaultEntitlement": "The default minimum entitlement required to access assets in the rule. Default is for \"Basic\" users, ie everyone who has UEFN.",
    "DaySequenceAssetData:bMuted": "The default mute state of the sequence. Muted sequences are not evaluated during playback.",
    "FortAthenaMutator_ContextTutorial:WorldMarkerSockerName": "The default socket name for the world marker",
    "FortCowVehicle:SquashSpeed": "The default speed of the squash that we do to the squash material.",
    "FortMovementComp_Character:SwingingControlParams": "The default swinging control params for this player.",
    "FortAthenaMutator_RespawnWave:DefaultWaveTime": "The default time between waves for each team",
    "RemoteViewRotSnapshotManager:TimeDelay": "The default time delay the snapshot manager interpolates to.",
    "UserOptionDefinitionIconMetaData:DefaultValue": "The default value of this option\n@note This data is synced from the default value of the CDO, so should be set there.",
    "UserOptionDefinitionAssetReferenceMetaData:DefaultValue": "The default value of this option.\n@note This data is synced from the default value of the CDO, so should be set there.",
    "UserOptionDefinitionBoolMetaData:bDefaultValue": "The default value of this option.\n@note This data is synced from the default value of the CDO, so should be set there.",
    "UserOptionDefinitionClassReferenceMetaData:DefaultValue": "The default value of this option.\n@note This data is synced from the default value of the CDO, so should be set there.",
    "UserOptionDefinitionClassSlotMetaData:DefaultValue": "The default value of this option.\n@note This data is synced from the default value of the CDO, so should be set there.",
    "UserOptionDefinitionColorMetaData:DefaultValue": "The default value of this option.\n@note This data is synced from the default value of the CDO, so should be set there.",
    "UserOptionDefinitionEnumMetaData:DefaultValue": "The default value of this option.\n@note This data is synced from the default value of the CDO, so should be set there.",
    "UserOptionDefinitionFloatMetaData:DefaultValue": "The default value of this option.\n@note This data is synced from the default value of the CDO, so should be set there.",
    "UserOptionDefinitionIntMetaData:DefaultValue": "The default value of this option.\n@note This data is synced from the default value of the CDO, so should be set there.",
    "UserOptionDefinitionStringMetaData:DefaultValue": "The default value of this option.\n@note This data is synced from the default value of the CDO, so should be set there.",
    "UserOptionDefinitionTeamIndexMetaData:DefaultValue": "The default value of this option.\n@note This data is synced from the default value of the CDO, so should be set there.",
    "UserOptionDefinitionTextMetaData:DefaultValue": "The default value of this option.\n@note This data is synced from the default value of the CDO, so should be set there.",
    "FortCurieMaterialDefinition:DefaultWaterContent": "The default water content for the material",
    "FortItemViewSettings:DefaultZoomLevel": "The default zoom level, between 0 and 1.",
    "CosmeticsToApplyOnItemPickupData:GadgetItemDefinition": "The definition for the gadget to give the player on item pickup. This gadget should not take up inventory space and should apply cosmetics to a player when placed in their inventory",
    "CosmeticsToApplyOnItemPickupData:PickaxeItemDefinition": "The definition for the pickaxe to give the player on item pickup. This pickaxe will replace their currently held pickaxe",
    "EFortItemType.AthenaSeason": "The definition of a season in Athena",
    "EFortItemType.EventDescription": "The definition of an event in Athena",
    "OpenedCardPack:CardPackDefinition": "The definition of the card pack",
    "FortCatalogMeta:PackDefinition": "The definition of the pack that is represented by this catalog item",
    "FortCatalogMetaPreload:PackDefinition": "The definition of the pack that is represented by this catalog item",
    "FortMinigame:PostGameResetDelay": "The delay (in seconds) after minigame end automatic volume reset (default is 10 seconds",
    "FortCreativeResourceNodeComponent:PartialRestockDelay": "The delay between each partial restocks",
    "FortMcpQuestObjectiveInfo:DynamicUpdateCompletionDelay": "The delay between this objective advancing and when to display the update.\nResets the delay timer if another update happens during the delay.\nValues less-than-equal 0 means display the update immediately when objective advances",
    "FortAIDirector:BurstSpawnThreatVisualsEndDelay": "The delay between when a burst spawn encounter finishes spawning and when it will clean up the threat visuals (Rifts and clouds)",
    "BuildingRift:CosmeticStateIdleDelay": "The delay for how long after the last AI has spawned to when we go the the idle cosmetic state.",
    "BuildingRift:IntroToBeginSpawningDelay": "The delay for how long from the intro to when it starts the mission to begin spawning.",
    "FortAIEncounterSpawnGroupCapsCategory:InitialSpawnGroupAvailabilityDelaySeconds": "The delay in seconds from the start of an encounter until a group from this category can spawn",
    "FortAIEncounterSpawnGroupCapsCategory:SpawnGroupAvailabilityDelaySeconds": "The delay in seconds from when a group spawns in the category until space for a new group can be free",
    "ScriptedObjectMovement_StaticPathCalendarCheatDefinitionData:DelayStartTimeSeconds": "The delay seconds before the calendar event should start.",
    "FortControllerComponent_VictoryCrowns:InitialGrantDelay": "The delay time for initially grant crown at player start",
    "FortFeedbackEvent:Delay": "The delay to wait before starting the feedback",
    "DelayedQuickBarAction:Action": "The delayed quickbar action to perform",
    "FortGameStateDeployableBase:OnDeployableBaseManagerCreated": "The delegate fires when the manager is created (or gets rep'ed to the client)",
    "WindSplineComponent:OnWindSplineDisabled": "The delegate that fires when the wind spline is disabled",
    "WindSplineComponent:OnWindSplineEnabled": "The delegate that fires when the wind spline is enabled",
    "RidableComponent:OnRiderStartedRiding": "The delegate that is triggered when a rider starts riding us.",
    "RidableComponent:OnRiderStoppedRiding": "The delegate that is triggered when a rider stops riding us.",
    "RiderComponent:OnStartedRiding": "The delegate that is triggered when we start riding a ridable",
    "RiderComponent:OnStoppedRiding": "The delegate that is triggered when we stop riding a ridable",
    "FortGameplayReceiverMessageComponent:OnGameplayMessageReceived": "The delegate to say that a trigger has called our channel",
    "UserOptionDefinitionFloatMetaData:DeltaValue": "The delta value to use as an increment for the in-game value slider.",
    "UserOptionDefinitionIntMetaData:DeltaValue": "The delta value to use as an increment for the in-game value slider.",
    "FortGrindRail:TargetDistanceBetweenSplinePointsForGravitySimulation": "The density of spline points over a given distance",
    "DeployableBaseSupportSettings:DeployableBasePlot": "The deployable base plot class to use",
    "DeployableBaseCore:Plot": "The deployable base plot that this core is spawn for",
    "DeployableBaseSupportSettings:bDeployableBasesReadOnly": "The deployable bases manager is setup as read-only or not",
    "FortHexMapCoord:Depth": "The depth coord within the hex map - used in calculating distance but redundant otherwise",
    "FortLevelInstanceSaveActor:SizeX": "The depth of the level instance in grid units",
    "WaterSurfaceInfo:WaterDepth": "The depth of the water at the surface location.",
    "GasEventHistoryItem:Depth": "The depth of this history event. Can be used to infer the hierarchy of events that caused other events",
    "HomebaseNodeDisplayData:Description": "The description for the node level. This may differ from level to level.",
    "UrgentQuestData:EventDescription": "The description of the event to display.",
    "UrgentQuestDataDescOverrides:EventDescription": "The description of the event to display.",
    "UrgentQuestSettings:EventDescription": "The description of the event to display.",
    "UserOptionDefinitionContainer:Description": "The description of the thing that owns these options.",
    "UserOptionDefinition:Description": "The description of this option.\n@note This data is synced from the \"Tooltip\" meta-data value of the property, so should be set there unless bOverrideDescription is set.",
    "SettingsSaveContextBehaviorDefinition:Name": "The descriptive name of this context.",
    "FortProjectileMovementComponent:AccelerationMagnitude": "The desired direction we wish to achieve - used for acceleration calculation",
    "FortProjectileMovementComponent:DesiredDirection": "The desired direction we wish to achieve - used for acceleration calculation",
    "MinigamePlayerBucket:DesiredTeamSizePercent": "The desired percent of the total number of players we want in this bucket.",
    "FortStormShieldCameraActor:CameraRotationOffset": "The desired rotation of the camera. Pitch and Roll will be set exactly,\n     Yaw will be added relative to the direction the attached parent component (probably the storm mesh) is moving with Yaw of 0.0f being forward.",
    "AthenaCreativeRift:DespawnSphereComponent": "The despawn overlap sphere if the player leaves the area",
    "HeldObjectMovementReplicatedData:DetachLocation": "The detach location the held object starts at when thrown",
    "HeldObjectMovementReplicatedData:DetachRotation": "The detach location the held object starts at when thrown",
    "FortClientAnnouncementData_Basic:DetailText": "The detail that describes the announcement to be displayed",
    "FortClientAnnouncementData_Basic:GamepadDetailText": "The detail that describes the announcement to be displayed for gamepad users only.  Note that if this is empty (default) we will use DetailText instead to display to gamepad users.",
    "FortErrorInfo:ErrorMessage": "The details of the error message, suitable for presentation to the user",
    "FortCreativeDiscoverySplicedEntry:VisibilitySelector": "The determinism level that determines if this entry is visible.",
    "FortGameFeatureStatusList:bHasNetworkConnection": "The device currently has a network connection",
    "EliminationFeedMessage:EliminationFeedDevice": "The device that sent the message. *",
    "EliminationFeedMessageRepl:EliminationFeedDevice": "The device that sent the message. *",
    "EFortDialogResult.TimedOut": "The dialog timed out",
    "EFortDialogResult.Killed": "The dialog was explicitly killed (no user input)",
    "FortGameState:ServerWorldRealTimeSecondsDelta": "The difference from the local world's RealTimeSeconds and the server world's RealTimeSeconds.",
    "EFortDamageZone": "The different categories of damage zones an actor can have",
    "EFortRequestedGameplayAction": "The different options players can request for the future state of the game",
    "EFortQuickBars": "The different quick bars we support",
    "CreativeToolPersistentData:RotationAxisIndex": "The different rotation Axes that we will be using to rotate Roll/Pitch/Yaw",
    "FortCreativeMoveTool:RotationAxes": "The different rotation Axes that we will be using to rotate Roll/Pitch/Yaw",
    "FortCreativeMoveTool:RotationAxisIndex": "The different rotation Axes that we will be using to rotate Roll/Pitch/Yaw",
    "CreativeToolPersistentData:SelectedScaleAxis": "The different scale axes that we will be using to scale X/Y/Z/All",
    "FortCosmeticAdaptiveStatPreview:StatValues": "The different variant channels to activate to represent this preview.",
    "FortCosmeticVariantPreview:VariantOptions": "The different variant channels to activate to represent this preview.",
    "FortCosmeticVariantPreviewElement:VariantOptions": "The different variant channels to activate to represent this preview.",
    "EStatMod": "The different ways that a stat can be modified",
    "FortIronCityDifficultyData:DifficultyLevel": "The difficulty level mapped to the account level",
    "FortLevelUpDataV2:DifficultyLevel": "The difficulty level mapped to the account level",
    "FortTheaterMapTile:ZoneDifficultyInfo": "The difficulty of this zone (currently corresponds to mission difficulty)",
    "FortGameStateZone:ZoneDifficultyInfoRow": "The difficulty of this zone, derived from the backend generation",
    "FortMission:GeneratedMissionOptions": "The difficulty options generated for this mission. Includes encounter profiles",
    "FortMissionRecord:GeneratedMissionOptions": "The difficulty options generated for this mission. Not serialized",
    "PendingSpawnInfo:DifficultyLevel": "The difficulty to which this AI should be initialized",
    "RufusWeeklyMapUpdaterInfo:MapTexture": "The diffuse texture to use for the in-game and mini maps to use",
    "TornadoSimulationData:Torque": "The direction that the actor will spin",
    "RootMotionSource_RocketRam:EndingDirection": "The direction the character should be in when this root motion source completes. Lerp'd from InitialDirection over the duration.",
    "FortKatanaDashTargetingInfo:DashDirection": "The direction the dash should travel in.",
    "FortLinkToActorComponent:DirectionForLink": "The direction we want to check for a linking.",
    "DirectionalLightWeatherData:DirectionalLightColorBrightness": "The directional color brightness curve (based on time of day [0-24]) we are targeting during this weather event",
    "DirectionalLightWeatherData:DirectionalLightColor": "The directional color curve (based on time of day [0-24]) we are targeting during this weather event",
    "DirectionalLightWeatherData:DirectionalLightColorWeight": "The directional color weight curve (based on time of day [0-24]) we are targeting during this weather event",
    "FortTimeOfDayManager:StormLightColor": "The directional light color during a storm. Blended using StormStrength",
    "GlobalWeatherData:DirectionalLightWeatherData": "The directional light data for the weather event",
    "FortAIEncounterQueryDirectionTracker:ChosenDirections": "The directions already chosen in this round of querying.",
    "FortAIEncounterQueryDirectionTracker:PreviousQueryDirections": "The directions chosen during the previous round of querying. To be avoided unless the other directions do not succeed.",
    "FortAIEncounterQueryDirectionTracker:AvailableDirections": "The directions still available for selections",
    "FortAIEncounterQueryDirectionTracker:FailedDirections": "The directions that failed in this round of querying.",
    "WrapPreviewGridActor:RangedWeaponPath": "The directory to find weapon item definitions",
    "HmxEditorSettings:MoggMusicRootDirectory": "The directory to search in when batch-importing moggsong/moggmusic files. In this directory, each moggsong/moggmusic\n should be in its own subfolder, where the name of the subfolder/moggmusic/mogg/midi (if any) are all the same.",
    "RufusWeeklyMapUpdaterInfo:MapDiscoveryTexture": "The discovery texture for the in-game and mini maps to use",
    "EPostGamePlacement": "The display game placement",
    "OpenedCardPack:DisplayLevel": "The display level of the card pack (What level of rarity should we display the pack as during the opening process)",
    "VkNamedId:Name": "The display name",
    "EpicArtApp:Name": "The display name of the application",
    "PerkItemDefinitionDesignerData:PerkName": "The display name of the perk",
    "HomebaseSquadSlot:DisplayName": "The display name of the slot",
    "HomebaseSquad:DisplayName": "The display name of the squad",
    "UserOptionDefinitionContainer:DisplayName": "The display name of the thing that owns these options.",
    "UserOptionDefinitionClassTypeEntry:DisplayName": "The display name of this class type entry.\n@note This data is synced from the \"DisplayName\" meta-data value of the class type entry, so should be set there.",
    "UserOptionDefinitionEnumValueEntry:DisplayName": "The display name of this enum entry.\n@note This data is synced from the \"DisplayName\" meta-data value of the enum entry, so should be set there unless bOverrideDisplayName is set.",
    "FortOptionsMenuData:DisplayName": "The display name of this option",
    "UserOptionDefinition:ExplicitOverrideDisplayName": "The display name of this option's cosmetic ExplicitOverride value.\n@note \"Don't Override\" will be used if nothing was specified.",
    "UserOptionDefinition:DisplayName": "The display name of this option.\n@note This data is synced from the \"DisplayName\" meta-data value of the property or generated from the PropertyName, so should be set there unless bOverrideDisplayName is set.",
    "UserOptionDefinitionTeamTypeEntry:DisplayName": "The display name of this team type entry.\n@note This data is synced from the \"DisplayName\" meta-data value of the team type entry, so should be set there.",
    "FortCreativeDiscoveryContentPanel:PanelDisplayName": "The display name text for the panel.",
    "FortAthenaMutator_RespawnAndSpectateSelect:DisplayPriority_Teammate": "The display priority given to respawn on teammate buttons, higher numbers display before lower numbers",
    "FortHealthBarComponentData:DisplayText": "The display text the is put above the health bar",
    "DigestedEvasiveManeuverSkillSettingsSpecialization:DistanceMaxSquared": "The distance Min/Max within which we will be allowed to use these evasive maneuver skills.",
    "DigestedEvasiveManeuverSkillSettingsSpecialization:DistanceMinSquared": "The distance Min/Max within which we will be allowed to use these evasive maneuver skills.",
    "EvasiveManeuverSkillSettingsSpecialization:DistanceMax": "The distance Min/Max within which we will be allowed to use these evasive maneuver skills.",
    "EvasiveManeuverSkillSettingsSpecialization:DistanceMin": "The distance Min/Max within which we will be allowed to use these evasive maneuver skills.",
    "FortAIRuntimePerkInfo_EvasiveManeuvers:DistanceMaxSquared": "The distance Min/Max within which we will be allowed to use these evasive maneuver skills.",
    "FortAIRuntimePerkInfo_EvasiveManeuvers:DistanceMinSquared": "The distance Min/Max within which we will be allowed to use these evasive maneuver skills.",
    "FortAthenaMapInfo:GoldenPoiDistanceAroundBusPathEnd": "The distance around the end of the bus path that we'll select golden poi's from, if we are selecting one at the end of the path.\n              See <GoldenPoiPercentOfSelectedAtBusPathEnd>.",
    "SkyfireVaultOrbSpawner:OrbSpawnerNetCullDistance": "The distance at which this actor should be no longer relevant for a particular client.\n    This is separate from AActor::NetCullDistanceSquared in case it needs to be hotfixed.",
    "FortAthenaMutator_Cobalt:DistanceBetweenPlayersOfSameTeamDuringRespawn": "The distance between players of the same team on respawn",
    "FortObjectiveFilter_PlayerRevealed:DistanceToRevealedPlayer": "The distance between the marking player (Author) and the player that was revealed",
    "RadiusTrackingInitializer:MaximumDistance": "The distance from the circle center that the map indicator will be visible to the player.  0.0f indicates persistent visibility.",
    "HurdleInputConfig:FinalResult_GroundAimOffset": "The distance from the corner we are expecting to land after the far corner of the hurdle",
    "HurdleInputConfigCache:FinalResult_GroundAimOffset": "The distance from the corner we are expecting to land after the far corner of the hurdle",
    "BuildingGameplayActorSupplyDropRadio:DistanceFromOriginalSpawnLocForBalloonOpen": "The distance from the ground at which the balloon state goes from Closed to Opened.\n     This value is gathered from a hotfix table row (performed in blueprint).",
    "ExitCraftInfo:ExitCraftSpawnerZOffset": "The distance from the ground where the \"spawner\" will spawn (where you will see the flare effect)",
    "FortWeaponRanged:ReticleSpreadZeroingDistanceFromMuzzle": "The distance from the muzzle at which the reticle spread will most accurately represent the actual spread. Disabled if zero.",
    "HurdleInputConfig:ForwardCastIndicatorDistance_Phase1": "The distance from the obstacle to use for hurdle targeting indicator",
    "HurdleInputConfigCache:ForwardCastIndicatorDistance_Phase1": "The distance from the obstacle to use for hurdle targeting indicator",
    "FortTimeOfDayManager:DistanceToSunOrMoon": "The distance from the origin to position the sun and moon",
    "WindSplineComponent:ForwardForceFallOffStartDistance": "The distance from the spline center at which the spline forces start falling off",
    "FortKatanaPrimaryAttackVariationInfo:OffsetFromTarget": "The distance from the target actor that this attack variation will stop the pawn.",
    "FortLOSComponent:LOSMaxDistance": "The distance in which you start doing LOS checks",
    "FortMiniMapComponent:MiniMapData": "The distance in which you start doing LOS checks",
    "FortObjectiveFilter_DamageDone:Distance": "The distance the damage must be performed at.",
    "FortObjectiveFilter_DamageTaken:Distance": "The distance the damage must be performed at.",
    "FortObjectiveFilter_Hit:Distance": "The distance the damage must be performed at.",
    "KatanaTargetingComponent:DashDistance": "The distance the dash should try to move the player in the direction they're facing.",
    "KatanaTargetingComponent:DashOffsetFromTarget": "The distance the player should stop before the dash target if there is one.",
    "FortAthenaMapInfo:GoldenPoiDistanceMustBeAwayFromBusPath": "The distance the poi's must be away from the bus path before they can be selected as golden.",
    "FortWindManager:ViewerMovementDistanceForRefresh": "The distance the viewer needs to move before we'll bother to refresh which responders need to be considered for updating or audio",
    "EFortTrickIncrementType.AirDistance": "The distance traveled in the air, from when the trick started to when it was successfully landed",
    "TrackMovement:DistanceAlongSpline": "The distance we have traveled along CurrentSpline",
    "IndicatedActorScaleAndOpacityData:LargestSizeDistance": "The distance where the indicator will be at its largest size.",
    "IndicatedActorScaleAndOpacityData:SmallSizeDistance": "The distance where the indicator will be at its smallest size.",
    "AimingCircleSettings:MaxCircleOpeningAngleHorizontalCurve": "The distance-based curve that defines the max opening angle (in degrees) in the Horizontal Axis (XY) when following the cursor on the circle. The radius of the circle is calculated with this angle and the distance to the target.",
    "DigestedAimingCircleSettings:MaxCircleOpeningAngleHorizontalCurve": "The distance-based curve that defines the max opening angle (in degrees) in the Horizontal Axis (XY) when following the cursor on the circle. The radius of the circle is calculated with this angle and the distance to the target.",
    "AimingCircleSettings:MaxCircleOpeningAngleVerticalCurve": "The distance-based curve that defines the max opening angle (in degrees) in the Vertical Axis (Z) when following the cursor on the circle. The radius of the circle is calculated with this angle and the distance to the target.",
    "DigestedAimingCircleSettings:MaxCircleOpeningAngleVerticalCurve": "The distance-based curve that defines the max opening angle (in degrees) in the Vertical Axis (Z) when following the cursor on the circle. The radius of the circle is calculated with this angle and the distance to the target. This is a",
    "AimingCircleSettings:MinCircleOpeningAngleHorizontalCurve": "The distance-based curve that defines the min opening angle (in degrees) in the Horizontal Axis (XY) when following the cursor on the circle. The radius of the circle is calculated with this angle and the distance to the target.",
    "DigestedAimingCircleSettings:MinCircleOpeningAngleHorizontalCurve": "The distance-based curve that defines the min opening angle (in degrees) in the Horizontal Axis (XY) when following the cursor on the circle. The radius of the circle is calculated with this angle and the distance to the target.",
    "AimingCircleSettings:MinCircleOpeningAngleVerticalCurve": "The distance-based curve that defines the min opening angle (in degrees) in the Vertical Axis (Z) when following the cursor on the circle. The radius of the circle is calculated with this angle and the distance to the target.",
    "DigestedAimingCircleSettings:MinCircleOpeningAngleVerticalCurve": "The distance-based curve that defines the min opening angle (in degrees) in the Vertical Axis (Z) when following the cursor on the circle. The radius of the circle is calculated with this angle and the distance to the target.",
    "AimingCircleSettings:WeaponSpreadContributionToClampCurve": "The distance-based multiplier applied on the weapon spread radius used when clamping the aim position to force a miss or prevent a headshot.",
    "DigestedAimingCircleSettings:WeaponSpreadContributionToClampCurve": "The distance-based multiplier applied on the weapon spread radius used when clamping the aim position to force a miss or prevent a headshot.",
    "FortTimeOfDayManager:SkyAtmosphereRotationDivergencePower": "The divergence power to apply based on sun/moon distance",
    "CrashpadStaticParams:GrowthEnd": "The downward velocity of the colliding actor is normalized to the range [GrowthStart, GrowthEnd] and the result is used to get the bounce velocity from LaunchCurve",
    "CrashpadStaticParams:GrowthStart": "The downward velocity of the colliding actor is normalized to the range [GrowthStart, GrowthEnd] and the result is used to get the bounce velocity from LaunchCurve",
    "PhysicsConstantForceData:DragCoeff": "The drag coeff to use for the drag force",
    "AthenaSpecialActorComponent:Priority": "The draw priority for this minimap indicator (0 is bottom, increase # to draw on top)",
    "FortMapIconDefinition:Priority": "The draw priority for this minimap indicator (0 is bottom, increase # to draw on top)",
    "FortMiniMapData:Priority": "The draw priority for this minimap indicator (0 is bottom, increase # to draw on top)",
    "SpecialActorRepData:Priority": "The draw priority for this minimap indicator (0 is bottom, increase # to draw on top)",
    "FortAthenaMutator_ScoutDrone:DroneAllowedInteractionTags": "The drone is allowed to interact only with actors that have any of the tags in this container.",
    "FortAthenaMutator_ScoutDrone:DroneBlockedInteractionTags": "The drone is not allowed to interact only with actors that have any of the tags in this container.",
    "FortHoverDroneCameraComponent:TiltUpVector": "The drone's up vector during neutral hovering. The magnitude determines resistance to tilt when moving.",
    "BuildingTrap:SavedDurabilityPct": "The durability percentage of the trap that should be saved/restored. Normalized between 0.f and 1.f, inclusive.",
    "FortAthenaMutator_Pow:RespawningTimeAllowed": "The duration after the aircraft phase during which respawning is allowed.",
    "FortAthenaMutator_Bismuth:ReflectKillDelay": "The duration after which a player should be eliminated after they eliminate an AI Bot.",
    "FortMaterialStyleComponent:FiniteStyleDuration": "The duration for any finite material style to be applied if not otherwise specified",
    "TempestLightningComponent:LightningBoltTelegraphDuration": "The duration for the lightning bolt telegraph",
    "FortVoteConfig:FailedVoteLockOutDuration": "The duration for which revote should be blocked given it fails.",
    "WindSplineComponent:MaxTargetCountReachedExpelDuration": "The duration for which we expel oldest targets when we hit the max target count defined in ObjectTypeToMaxTargetCount",
    "FortAthenaMutator_Uranium:RoundPhaseDurations": "The duration of each Round Phase",
    "FortAthenaMutator_RespawnAndSpectateSelect:ScreenFadeOutDeathCamTime": "The duration of the death cam fade out",
    "FortAthenaMutator_Cobalt:DelayBeforeStormShrink": "The duration of the match after which storm shield starts shrinking",
    "FortAthenaMutator_RespawnAndSpectateSelect:ScreenFadeInSpectateCamTime": "The duration of the post death cam fade in",
    "PetResponseFromQuestSystem:ResponseDuration": "The duration of the response",
    "PetStimuliResponse:ResponseDuration": "The duration of the response (<= 0 means keep this active until another stimuli is received)",
    "FortVoteConfig:VoteDuration": "The duration of the vote. The server will automatically end the vote after this duration.",
    "FortAthenaMutator_Skyfire:LootRoomPreCountdownTimeByRarity": "The duration that players have to get their bearings in each loot room before their loot room exit timer starts.",
    "MilkshakeFieldSystemActor:IncomingDuration": "The duration that the field takes to build up in strength after activation.",
    "MilkshakeFieldSystemActor:OutgoingDuration": "The duration that the field takes to fade away right before deactivation.",
    "BuildingGameplayActorLaserGrid:LaserPatternChangeWarningTime": "The duration that the laser grid plays the warning/transition state on\n     the laser material before switching to the next pattern.\n     IF value < 0.f, then the warning/transition phase is skipped.",
    "LaserGridPattern:Duration": "The duration that this pattern stays on for.",
    "FortAthenaMutator_DadBro:TimeTakenToDefeatDadBro": "The duration the boss fight took",
    "FortAthenaMutator_Cobalt:UILastManStandingDisplayTime": "The duration to display the last man standing message for the final alive player of a team for a particular round",
    "FortMaterialStyleComponent:DynamicMaterialInstance": "The dynamic material instance being affected by active styles",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:FullMapDebugCircleMID": "The dynamic material used for drawing debug safezone circles on the full map.",
    "FortIntensityCurve:LowPlayerPerformancePeakIntensityThreshold": "The easy threshold at which the encounter triggers a peak then a breather",
    "FortCreativeKeyLockComponent:EditorDescription": "The editor-facing description for this component",
    "FortCreativeKeyLockComponent:EditorDisplayName": "The editor-facing name for this component",
    "GasDebugEffectSnapshot:Context": "The effect context",
    "BASEGameplayEffect:Effect": "The effect to apply",
    "FortAthenaVehicle:CollectedVehicleModData": "The effects of accumulated vehicle mods. This is local only. Should not be exposed to blueprint. Rather mod configs drive creation of this.",
    "WindSplineComponent:TargetEffects": "The effects to apply to the targets",
    "GunGameGunEntry:AwardAtElim": "The elimination count to award this weapon at",
    "MidiMsgBroadcasterComponent:MidiSourceType": "The emitter to use as the source. In the UE4 details panel, we cannot\npoint to components with a UPROPERTY, but we _can_ point to actors.\nTherefore, we've hooked it up this way, where you point to an actor\nand it finds the emitter on that actor, and displays its name.",
    "FortPartyMemberRepData:FrontendEmote": "The emote being played in the frontend for this member",
    "EDanceBeatSyncMode.Off": "The emote's play rate or position will not be adjusted.",
    "FortEncounterSequenceSettings:EncounterSequence": "The encounter profiles in the sequence in order",
    "FortActiveThreatPlayerData:Encounter": "The encounter started to threaten the player",
    "LivingWorldSpawnAroundPlayerConfiguration:Encounter": "The encounter that will be spawned on each player.",
    "FortSpawnGroupEncounterTypeData:EncounterTypeTags": "The encounter type tags that identify when to use this encounter type data",
    "FortAIEncounterSpawnPointsProfile:EncounterTypeTags": "The encounter type tags that identify when to use this spawn points profile",
    "FortSpawnGroupEncounterTypeData:MaxGroupCategoryPopulationDensityCurve": "The enemy's population density mapped against encounter Game Difficulty",
    "FortSpawnGroupEncounterTypeData:RespawnDelayCurve": "The enemy's respawn delay mapped against encounter Game Difficulty",
    "GameplayTagVariantDef": "The entries for this variant channel do nothing on their own; they're designed for a Blueprint associated with this cosmetic to do something interesting based on the variant tag",
    "LaserGridConnectionArray:Entries": "The entries of the laser grid connections created for this actor.",
    "LaserGridOutletArray:Entries": "The entries of the laser grid outlets.",
    "SpecialEventCursorStackEntry:CursorModeTag": "The entry to use from CursorModes",
    "EWindVolumePriority": "The enum representing the wind volume priority",
    "EFortRangeRule": "The enum that describes the rule to use for the range check",
    "ETempestMovementMode": "The enum used to specify the movement mode for the component",
    "EFortPhysicsObjectMovementState": "The enumeration for what movement state the physics object is in",
    "EFortPhysicsObjectActivationType": "The enumeration for what type of activation is being requested of the physics object",
    "EncounterEnvironmentQueryInstance:EnvironmentQueryInfo": "The environment query info used to start the query",
    "FortAthenaMutator_Bismuth:SpawnersSelectionQuery": "The environment query used to select random spawners out in the world from which to spawn bot AIs.",
    "TempestLightningComponent:FindTargetableLocationQuery": "The environmental query used to find a location for a lightning bolt if no player can be targeted",
    "TempestLightningComponent:FindTargetablePawnsQuery": "The environmental query used to keep track of all targetable pawns within the lightning area",
    "FortLobbyBeaconPlayerState:SelectedGadgets": "The equipped gadgets for the corresponding player",
    "VoiceChatLogUploadRule:ErrorCode": "The error code this rule applies to, or empty for any error.",
    "FortCowVehicle:ErrorToleranceImpactComparison": "The error tolerance to use when doing a nearly equal check between current squash and target squash for impact.",
    "FortCowVehicle:ErrorToleranceSpringComparison": "The error tolerance to use when doing a nearly equal check between current squash and target squash for spring.",
    "FortQuestMapPage:QuestEventFlag": "The event flag associated with this quest page, if blank it will always be shown",
    "FortDBNOCarryHoisterData:DBNOCarryEvent": "The event for when the hoister changes",
    "CombatManagerComponentSTW:CombatEventHeat": "The event heat per event",
    "EFortEventModeEmoteToPlay": "The event mode emote key pressed",
    "FortGameFrameworkComponent_EventMode": "The event mode game framework component is used to grant the event mode activator weapon",
    "CombatEventData:EventName": "The event name",
    "FortFeedbackHandle:EventName": "The event name",
    "MeshNetworkEventStateData:EventName": "The event name that is current active",
    "FortAthenaTrackEventConsumeStateTreeTaskInstanceData:ReferencedEvent": "The event parameter we consume.",
    "FortMissionEvent:Params": "The event parameters to pass with this message *",
    "GameplayEventGlobalRouterPendingListenerData:EventType": "The event struct type that we're listening to",
    "GameplayEventListenerData:EventType": "The event struct type that we're listening to",
    "FortWeaponRanged:OnOverheatValueChanged": "The event that fires when the weapon's heat value is changed",
    "VoiceChatLogUploadRule:VoiceEvent": "The event this rule applies to, or empty for any event.",
    "FortFeedbackResponse:Handle": "The event to respond with",
    "GameplayEventDefinition:EventType": "The event type to broadcast.\n@note If multiple descriptors on the same object use the same event type, then there is no way to distinguish between the descriptors.",
    "SmartBuildSelection:BuildingActors": "The exact shape of the building pieces to use at this view angle listed in descending priority",
    "QuestItemDefinitionDesignerData:ExistingMissionInfo": "The existing mission info asset, if any. The rest of the created objects will use this and a new object will NOT be created.",
    "QuestItemDefinitionDesignerData:ExistingQuestBlueprint": "The existing quest blueprint, if any. The rest of the created objects will use this and a new object will NOT be created.",
    "QuestItemDefinitionDesignerData:ExistingQuestItemDefinition": "The existing quest item definition, if any. The rest of the created objects will use this and a new object will NOT be created.",
    "FetchQuestData:ExistingQuestPropBlueprint": "The existing quest prop blueprint, if any. The rest of the created objects will use this and a new object will NOT be created.",
    "VkModuleBinaries:TotalSizeKb": "The expected download size",
    "FortWeapon:CurrentReloadDuration": "The expected duration of the current reload",
    "PhaseInfo:PhaseDuration": "The expected length of this phase.  Not used by ASpecialEventScript logic.\nExists here in a central location for other systems that need to know the duration.",
    "PendingSpawnInfo:EncounterAILifespan": "The expected lifespan of the AI in an encounter. < 0 is unlimited",
    "SpeedScaledAxisOffsetData:SpeedBounds": "The expected min (X) and max (Y) speed for this offset. Used to normalize the player's speed for this offset.",
    "FakeKillRelevancyPhaseData:NumWavesExpected": "The expected number of waves for this phase",
    "VkModuleBinaries:ManifestSizeKb": "The expected size of the manifest file",
    "VkModuleBinaries:ManifestDiskSizeKb": "The expected size on disk from the manifest. Should match TotalSizeKb",
    "VkModuleVersion:Version": "The explicit version number of this module we resolved to for this run.",
    "VkModuleVersionRef:Version": "The explicit version number of this module we resolved to for this run.",
    "FortTimeOfDayManager:SunObjectDivergencePower": "The exponential difference between sun/moon position and directional light rotation (used to allow the sun/moon to set below the horizon while keeping directional lighting above the horizon).  Higher values will make it diverge only when it is closer to the horizon, which also makes the speed of divergence higher.",
    "GlobalWeatherData:ExponentialHeightFogWeatherData": "The exponential height fog data for the weather event",
    "BuildingTrapFloor_Turret:BoxExtents": "The extents of the box collision. Used to find targets in range",
    "EncounterFactionRow:FactionData": "The faction data for this row",
    "SpawnerDataComponentAffiliationSharedBBConfiguration:FactionTag": "The faction that will be used to find other AIs that we might want to share the bb with.",
    "FortPlayerPawnAthena:LandForceIntensityVelocityZFactor": "The factor multiplied with pawn's Z velocity to obtain the intensity for dynamic force feedback on landing",
    "CombatFactorData:DebugFactorName": "The factor name in the debug graph",
    "UtilityData:ContributingFactors": "The factors that contribute to this utility's selection",
    "BuildingGameplayActorConsumable:FailedReason": "The failed reason tags.",
    "WindSplineComponent:ForwardForceDistanceFallOffExponent": "The fall off exponent for the forward forces",
    "BuildingGameplayActorSupplyDropRadio:BalloonClosedGroundedFallSpeed": "The fall speed at which the balloon should calculate its next movement when it is grounded and the balloon is in the closed state.",
    "FortAIPawn:FinishEncounterSpawnFallbackTime": "The fallback time delay before trying to finish the AI's encounter spawn",
    "FortInGameMapManager:ExploredFalloffRadius": "The falloff radius as it gets closer to the seen radius.",
    "FortInGameMapManager:SeenFalloffRadius": "The falloff radius of seen area as it approaches the unexplored fog.",
    "FortPartyMemberRepData:FeatDefinition": "The feat this member has chosen to broadcast",
    "EFortFeedbackAddressee.FFA_All": "The feedback line is addressing everyone (everyone hears)",
    "EFortFeedbackAddressee.FFA_Instigator": "The feedback line is addressing the instigator of the event (only instigator hears)",
    "EFortFeedbackAddressee.FFA_Recipient": "The feedback line is addressing the recipient of the event (only recipient hears)",
    "EFortFeedbackContext.FFC_TeamWitness": "The feedback speaker is a team member of the Instigator and witnessed the action",
    "EFortFeedbackContext.FFC_EnemyWitness": "The feedback speaker is not a team member of the Instigator and witnessed the action",
    "EFortFeedbackContext.FFC_Instigator": "The feedback speaker is the instigator of the action",
    "EFortFeedbackContext.FFC_Recipient": "The feedback speaker is the recipient of the action",
    "EventObjectiveFilterCache_Dynamic:DynamicFilters": "The filters of the same type that are linked to this event from dynamic data that doesn't exist in static memory, like a generated callback for an event",
    "FortServiceTransactionInfo:Cost": "The final cost of the service",
    "EMatchmakingInputSource.Pool": "The final input pool the players will be in, based on locked in, or expected pool depending on what they're doing locally before locking in.",
    "FortPickupLocationData:FinalTossRestLocation": "The final location the tossed pickup ended up on the server.",
    "McpMatchResults:Placement": "The final placement of the player's team.",
    "FortPickupLocationData:LootFinalPosition": "The final position the loot is flying to",
    "TempestLightningComponent:LightningBoltGrassFirePropagationFuel": "The fire propagation fuel that defines how far the fire started by the lightning bolt will spread. -1.f will use the system default",
    "FortAthenaMutator_DadBro:DadBroFirstSafeZoneIndex": "The first SafeZoneIdx of the actual fight.",
    "FortAthenaMutator_Bismuth:BotTeamStartIndex": "The first index of the bot team, bots are subsequently added to the next team index. Note that this number should take into consideration the player team indexes.",
    "CraftingUpgradeRule:SourceItemTags": "The first ingredient item that matches these tags will be source item",
    "FortAthenaVehicle:SeatTransitions": "The first matching transition found in ascending order will be used. Default/Fallback transitions should be in higher indices",
    "FortAthenaIntArithmeticStateTreeTaskInstanceData:FirstOperand": "The first operand of the operation, which will also get the resulting change.",
    "CobaltWidgetRoundData:FirstRound": "The first round number",
    "EFortKatanaPrimaryAttackVariation.OnGroundFirst": "The first strike in the on ground primary attack sequence",
    "FortWorldManager:FixedSeed": "The fixed seed to use if bUseFixedSeed is true",
    "EFlagStatus.FlagNotPresent": "The flag is NOT present on the command line",
    "EFlagStatus.FlagPresent": "The flag is present on the command line",
    "FortPlayerControllerGameplay:FlightSpeedWhenEnteredSprint": "The flight speed we were at when we started sprint.",
    "FabricUserOption:LookupTable": "The float values when being used as a lookup table",
    "ExponentialHeightFogWeatherData:FogAlbedo": "The fog albedo curve (based on time of day [0-24] we are targeting during the weather event)",
    "ExponentialHeightFogWeatherData:FogDensity": "The fog density curve (based on time of day [0-24]) we are targeting during this weather event",
    "ExponentialHeightFogWeatherData:FogDirectionalInscatteringColor": "The fog directional inscattering color curve (based on time of day [0-24] we are targeting during the weather event)",
    "ExponentialHeightFogWeatherData:FogDirectionalInscatteringExponent": "The fog directional inscattering exponent curve (based on time of day [0-24] we are targeting during the weather event)",
    "ExponentialHeightFogWeatherData:FogDirectionalInscatteringStartDistance": "The fog directional inscattering start distance curve (based on time of day [0-24] we are targeting during the weather event)",
    "ExponentialHeightFogWeatherData:FogDistance": "The fog distance curve (based on time of day [0-24] we are targeting during the weather event)",
    "ExponentialHeightFogWeatherData:FogExtinctionScale": "The fog extinction scale curve (based on time of day [0-24] we are targeting during the weather event)",
    "ExponentialHeightFogWeatherData:FogHeightFalloff": "The fog height falloff curve (based on time of day [0-24]) we are targeting during this weather event",
    "ExponentialHeightFogWeatherData:FogInscatteringColor": "The fog inscattering color curve (based on time of day [0-24] we are targeting during the weather event)",
    "ExponentialHeightFogWeatherData:FogMaxOpacity": "The fog max opacity curve (based on time of day [0-24] we are targeting during the weather event)",
    "ExponentialHeightFogWeatherData:FogScatteringDistribution": "The fog scattering distribution curve (based on time of day [0-24] we are targeting during the weather event)",
    "ExponentialHeightFogWeatherData:FogStartDistance": "The fog start distance curve (based on time of day [0-24] we are targeting during the weather event)",
    "FortTimeOfDayManager:StormFogValues": "The fog values blended toward during a storm based on StormStrength.  If these are read-only, they aren't being used!  Only relevant if bUseStormFogValues (above) is checked.",
    "EKoalaAvailability": "The following enum values should match those declared in IEOSGameClips.h",
    "GameplayCueNotify_Jetpack_Hovering:BeepTimes": "The following variables and functions will Handle low fuel warning // when the fuel is lower than values in BeepTimes, play one beep sound",
    "FortActivityScaleFontData:FontSize": "The font size set for everything from the starting character count to the next found.",
    "AthenaBarrierFlag:FoodTeam": "The food team determines visuals. For Barrier, 0 == Burger, 1 == Tomato.",
    "GearConfig:PushForce": "The force multiplier when not at top speed",
    "SMVehicleGear:PushForceHotfixable": "The force multiplier when not at top speed",
    "UrgentQuestData:QuestProgressTextFormat": "The format of the text displayed next to the quest progress bar. Use {CurrentProgress} and {MaxProgress}\n    to denote the acquired and maximum objective counts of the quest. Default is {CurrentProgress} / {MaxProgress}.",
    "UrgentQuestSettings:QuestProgressTextFormat": "The format of the text displayed next to the quest progress bar. Use {CurrentProgress} and {MaxProgress}\n    to denote the acquired and maximum objective counts of the quest. Default is {CurrentProgress} / {MaxProgress}.",
    "CraftingFormula:DisplayName": "The formula name",
    "CraftingObjectComponent:LastCraftedItemFormulaRow": "The formula we are currently crafting",
    "CraftingObjectRepStateData:CraftingFormulaRow": "The formula we are currently crafting",
    "WindSplineComponent:MeshForwardAxis": "The forward axis for the spline mesh",
    "MontageBeatSyncComponent:ActiveTimingInfo": "The found timing info",
    "BuildingFoundationStreamingData:FoundationGUID": "The foundation GUID - used with the world position to uniquely identify this instance. If valid, will be favored over FoundationName",
    "EDynamicFoundationType.StartEnabled_Stationary": "The foundation can be disabled and begins enabled at the position it is placed.",
    "EDynamicFoundationType.StartEnabled_Dynamic": "The foundation can be moved and disabled, it begins enabled but must have its transform set before it will be loaded.",
    "EDynamicFoundationType.StartDisabled": "The foundation can be moved and enabled, but begins disabled. If it is to be moved the transform must be set before it is enabled.",
    "EDynamicFoundationEnabledState.Disabled": "The foundation is disabled",
    "EDynamicFoundationEnabledState.Enabled": "The foundation is enabled",
    "BuildingFoundationStreamingData:FoundationName": "The foundation name - used with the world position to uniquely identify this instance",
    "EDynamicFoundationType.Static": "The foundation will always be in the same spot and enabled.",
    "SpecialEventRewindComponentRecording:EndFrameIndex": "The frame index of the end of the recording",
    "SpecialEventRewindComponentRecording:StartFrameIndex": "The frame index of the start of the recording",
    "FortLinkedAnimGraphsData:FreeFlyingBlueprintClass": "The free flying animation blueprint to use on this pawn.",
    "PlayspaceComponent_SpatialActorTracker:ReScanFrequencyInSeconds": "The frequencey at which to rescan all actors in the playspace.",
    "PlayspaceComponent_CreativeBudgetTracker:UpdateFrequencyInSeconds": "The frequency at which the budget gets updated as actors enter/exit the Playspace.",
    "BuildingProp_BountyBoard:InteractionTextRefreshRate": "The frequency at which the interaction text should be updated based on if the interacting player has an active bounty quest.",
    "FortWeaponRangedDualSwing:HitCheckFrequency": "The frequency at which to perform hit check logic. If less than 0, hit check logic will be performed every time the owning player is hit.",
    "SkyfireVaultOrbSpawner:OrbCheckFrequencyByCategory": "The frequency in seconds at which to check if a new orb should be spawned, separated by config category (i.e. playlist).",
    "FortGameModeAthena:PlaylistHotfixOriginalGCFrequency": "The frequency the playlist hotfix changed GC to",
    "GlobalWeatherData:Frequency": "The frequency we will check this weather event based on time of day (24 hours)",
    "FortQuestMapPage:CameraMode": "The front end camera mode to use while displaying this quest page",
    "FortObjectiveFilterType_VehicleFilter:FuelPercent": "The fuel percent of the vehicle required to progress this objective (0-100)",
    "FortSubscriptionProgressiveFulfillmentConfig:FulfillmentId": "The fulfillment ID is defined in player profiles",
    "HUDWidgetException:CVarEnabler": "The full CVar name linked to the widget you want to remove from the HLT",
    "FortClientMarkerRequest": "The full FFortWorldMarkerData class provides too many opportunities for a bad actor\nto replicate bad information to other clients since we trust the client a lot of generating\nmarker data, therefore the FFortClientMarkerRequest minimizes that risk by only sending the\nmost basic of marker info, and then it's on the onus of the server to rebuild the correct marker\ndata to replicate from the clients by using the actor to determine what data it needs.",
    "FMDeviceCableWildcardOrderingComponent:InputWildcardPorts": "The full list of all output wildcard ports on the device",
    "FMDeviceCableWildcardOrderingComponent:OutputWildcardPorts": "The full list of all output wildcard ports on the device",
    "FortAthenaMutator_RespawnAndSpectateSelect:RespawnTargetDataArray": "The full list of respawn options that may be made available to a player",
    "EEpicLeaderboardUpdateFunction": "The function applied to determine the new value when a leaderboard stat is updated",
    "BuildingGameplayActorSpawnMachine:CooldownLengthRow": "The game data row for the length of cooldown",
    "FortGeneratedDifficultyOptions:GameDifficultyAtGeneration": "The game difficulty when the mission difficulty options were generated",
    "EUraniumGameEndedReason.GameIsStillInProgress": "The game has NOT ended and is still in progress",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:SkyTubeDisablePhase": "The game phase at which to disable sky tubes",
    "FortBattleRoyaleGamePhaseLogicComponentReadyEvent:GamePhaseLogic": "The game phase logic component",
    "FortGameStateComponent_RealitySapling:StartSpawningSaplingsGamePhaseStep": "The game phase step to start spawning saplings in.",
    "HUDElementsToHideData:StartHidingGamePhase": "The game phase to start hiding HUDElementsToHide.",
    "FortAthenaMutator_SpawningPolicyBase:GamePhaseToStartSpawning": "The game phase to start spawning logic in",
    "HUDElementsToHideData:StopHidingGamePhase": "The game phase to stop hiding HUDElementsToHide.",
    "FortAthenaMutator_AdHocSquads:ForceDisplaySquadInfoDuringGamePhases": "The game phases during which we should force the HUD's squad info to be enabled",
    "FortAthenaMutator_SpecialEvent:ForceDisplaySquadInfoDuringGamePhases": "The game phases during which we should force the HUD's squad info to be enabled",
    "AIAssignmentInfo:TimeExitedLastAssignmentOfType": "The game time at which each assignment type was last the active assignment type.  (At that time, another assignment\ntype became the current assignment type.",
    "MilkshakeFieldSystemActor:StopGameTime": "The game time at which the field system actor should stop.",
    "AIAssignmentInfo:TimeCurrentGoalWasChosen": "The game time at which this goal became the current goal.",
    "CatalogStorefrontDef:Name": "The game-relevant name of this filter (e.g. \"Marketplace[0]\", or \"SecretShop\") might not be unique if you want multiple pull/matches for a given filter",
    "FortCreativeTeleporter:TeleporterAbility": "The gameplay ability that allows the teleporter to teleporter players",
    "WaterVolume_Shallow:PlayerPawnActionTag": "The gameplay action a player pawn should perform when entering this volume, and cancel when exiting",
    "HomebaseSquadAttributeBonus:AttributeGranted": "The gameplay attribute to be granted",
    "TempestLightningComponent:LightningAreaTargetTelegraphCue": "The gameplay cue applied to all targetable pawns within the lightning area",
    "TempestLightningComponent:LightningBoltTargetTelegraphCue": "The gameplay cue applied to all targeted pawns within the lightning bolt area of effect",
    "WindSplineTargetEffects:Cue": "The gameplay cue to apply to the target",
    "FortRemoteControlledPawnAthena:EffectContainerSpecToApplyOnKills": "The gameplay effect container the remote control pawn delivers when it dies",
    "FortRemoteControlledPawnAthena:ControllingPlayerEffectHandle": "The gameplay effect handle for the applied to player effect",
    "FortAthenaMutator_Bismuth:InitiateGameplayEffect": "The gameplay effect that is added to the AI Bot when they are eliminated by a player, responsible for triggering the visual/audio cues. (Description: A zap of lightning is fired from the bot to the sky).",
    "FortAthenaMutator_Bismuth:ReflectGameplayEffect": "The gameplay effect that is added to the player when they are eliminated for eliminating an AI Bot, responsible for triggering the visual/audio cues. (Description: A zap of lighting is fired from the sky to the player)",
    "FortGameplayEffectDeliveryActor:EffectContainerSpecToApplyOnTouch": "The gameplay effect to apply when touching another actor",
    "GameplayEffectApplicationInfo:GameplayEffect": "The gameplay effect to be applied",
    "GameplayEffectApplicationInfoHard:GameplayEffect": "The gameplay effect to be applied",
    "TempestLightningComponent:LightningBoltTargetEffectContainers": "The gameplay effects to apply to targets when the lightning bolt strikes",
    "WindSplineTargetEffects:GameplayEffects": "The gameplay effects to apply to the target",
    "FortAthenaMutator_Skyfire:AbductionWarpTunnelStartEventTag": "The gameplay event tag that indicates that the warp tunnel that occurs during abduction has appeared on the client. This event does not fire on the server.",
    "FortAthenaMutator_Skyfire:AbductionWarpTunnelEndEventTag": "The gameplay event tag that indicates that the warp tunnel that occurs during abduction has been removed on the client. This event does not fire on the server.",
    "FortAthenaMutator_Skyfire:MothershipWarpTunnelStartEventTag": "The gameplay event tag that indicates that the warp tunnel that occurs during any mothership teleport (including the exit skydive teleport)\n    has appeared on the client. This event does not fire on the server.",
    "FortAthenaMutator_Skyfire:MothershipWarpTunnelEndEventTag": "The gameplay event tag that indicates that the warp tunnel that occurs during any mothership teleport (including the exit skydive teleport)\n    has been removed on the client. This event does not fire on the server.",
    "SkyfireTeleportData:PostTeleportGameplayEventTag": "The gameplay event tag that is sent to the player pawn teleporting when the teleport ends. (Immediately after the teleport occurs)",
    "SkyfireTeleportData:PreTeleportGameplayEventTag": "The gameplay event tag that is sent to the player pawn teleporting when the teleport starts (PreTeleportTime before the actual teleport occurring)",
    "FortTheaterGameplayModifier:GameplayModifier": "The gameplay modifier to be applied to zones in the theater.",
    "FortPOICameraActor:POITag": "The gameplay tag for the POI this camera actor looks at.",
    "FortCreativeKeyLockComponent:RequiredFilterTagQuery": "The gameplay tag query that needs to be satisfied in order for the key lock component to be shown in-editor",
    "FortCreativeDeviceButtonComponent:RequiredFilterTagQuery": "The gameplay tag query that needs to be satisfied in order for the message component to be shown in-game",
    "FortGameplayMessageComponentBase:RequiredFilterTagQuery": "The gameplay tag query that needs to be satisfied in order for the message component to be shown in-game",
    "UserOptionDefinition:RequiredContextTagQuery": "The gameplay tag query that needs to be satisfied in order for the option to be shown in-game.",
    "HelperGameplayTagToAmmoCountMultiplier:Tag": "The gameplay tag that gets the multiplier",
    "PlayerPawnShallowWaterVolumeData:ActionTag": "The gameplay tag to apply to our ASC while in the current AWaterVolume_Shallow",
    "DAD_CosmeticItemUserOption:GameplayTag": "The gameplay tag we apply to targets to associate them with this cosmetic for tracking purposes.",
    "FortCreativeKeyLockComponent:FilterTags": "The gameplay tags describing the in-editor categorization of this key lock component",
    "FortCreativeDeviceButtonComponent:FilterTags": "The gameplay tags describing the in-game categorization of this message component",
    "FortGameplayMessageComponentBase:FilterTags": "The gameplay tags describing the in-game categorization of this message component",
    "UserOptionDefinition:ImplicitCategoryTags": "The gameplay tags describing the in-game categorization of this option, inferred from whatever subcategory the corresponding property is in along with the type-specific meta-data used to define this option.",
    "FortSquadStart:GameplayTags": "The gameplay tags of the actor used to define its properties.",
    "FortDamageNumberInfo:DamagedActorTags": "The gameplay tags on the damaged actor.",
    "FortMinigameStatsComponent:PlayerDefinedStatGameplayTagsInUse": "The gameplay tags reserved for player defined stat filters already in use",
    "FortSquadStartSearchParamData:FilterTags": "The gameplay tags that must be present in the squad start actor.",
    "FortAthenaAddGameplayTagsStateTreeTaskInstanceData:Tags": "The gameplay tags to add/remove.",
    "FortGameplayMutator_AIEncounterModifierTags:GameplayTags": "The gameplay tags to apply to the encounter",
    "FortGameplayMutator_AIEncounterModifierTags:TagsToReplace": "The gameplay tags to replace on the encounter. At least one of the TagsToRemove must be present to do the replacement.",
    "Playspace:BoundGameplayVolume": "The gameplay volume that bounds this playspace if it exists.",
    "FortAthenaAIBotController:LeashGameplayVolume": "The gameplay volume where the NPC is leashed to.",
    "PartOverrideData:Gender": "The gender of the characters that these customizations will be applied to",
    "TeamBucketPartOverrideData:Gender": "The gender of the characters that these customizations will be applied to",
    "ScriptedObjectMovement_StaticPathTravelerData:GeneratedSplinesArray": "The generated splines, these can be hand tweaked after generation but should not be added manually.\nWarning, these components are populated from generation based on the master spline path.\nManual addition to this component array may result in lost work.",
    "LacklusterData:GenericChromeMaterial": "The generic chrome material",
    "FortDynamicRollBaseWeightTableRow:ItemDefinition": "The generic item to grant with the roll.",
    "FortPlayerPawn:GliderRedeployLateralVelocityMultiplierRow": "The glider redeployable lateral velocity multiplier",
    "BuildingGameplayActorSpawnDetails:GlobalMaxBGAs": "The global max # of BGAs, we will not spawn over this (0th index is the only one used for this table row)",
    "GlobalWeatherData:WindWeatherData": "The global wind data for the weather event",
    "PendingDeployableManagerAction:DesiredPlotState": "The goal state for all the plots in this action",
    "FortAIDirector:IntensityGraph": "The graph of Intensity for the encounter being debugged",
    "FortUIZone:IntensityGraph": "The graph of desired and actual intensity",
    "FortUIZone:PIDContributionsGraph": "The graph of pid contributions",
    "FortUIZone:PIDValuesGraph": "The graph of pid values",
    "FortAIDirector:PIDContributionsGraph": "The graph of the pid spawn point contributions of the encounter being debugged",
    "FortAIDirector:PIDValuesGraph": "The graph of the pid values of the encounter being debugged",
    "FortAIDirector:UtilitiesGraph": "The graph of utilities for the encounter being debugged",
    "FortUIZone:UtilitiesGraph": "The graph of utility desires levels",
    "FortProjectileMovementComponent:GravityScaleInWater": "The gravity scale that this projectile will use when it's in water.",
    "HeldObjectThrownData:GravityScale": "The gravity scale to use when it is thrown",
    "BuildingGameplayActorLaserGrid:LaserGridPatternIndex": "The grid pattern at this index of the LaserGridPatterns array is what is currently active.",
    "RigUnit_GetGroundHitAtIndex:Index": "The ground hit index",
    "FortPawnStats:MinAnalogWalkSpeed": "The ground speed that we should accelerate up to when walking at minimum analog stick tilt.",
    "UtilityData": "The group of contributions to a utility",
    "FabricSignificanceBasedUpdateBucketRuntime:UpdateGroups": "The groups in this bucket. The components in each group will be updated once every FramesPerUpdate frames and only one group will be updated per frame.",
    "FortAthenaMutator_Cobalt:StormShieldGrowthRate": "The growth rate of the storm shields, this is used after the match is complete",
    "ThrowingToyData:WorldItemGuid": "The guid associated with the ThrowingToy",
    "FortAthenaAIBotController:GadgetTrackedAttributeItemInstanceIds": "The guid for the gadget we are tracking, so we can destroy it if the tracked attribute hits 0",
    "FortPlayerControllerZone:GadgetTrackedAttributeItemInstanceIds": "The guid for the gadget we are tracking, so we can destroy it if the tracked attribute hits 0",
    "FortAbilityTargetSelection:HalfExtents": "The half height extent of shapes used to sweep and query. Used by all shapes as appropriate, may be ignored",
    "IndicatedActorDataWithFilter:OverlapHalfHeight": "The half height of the vertically aligned capsule around the instigator to grab actors from.\n     If OverlapHalfHeight <= OverlapRadius then a sphere is used instead of a capsule (which is more efficient.)",
    "FortControllerComponent_MarkActorsInRadius:AIIndicatorHalfHeight": "The half height of the vertically aligned capsule to check around the player for AIs to mark with an indicator.\n     If AIIndicatorHalfHeight <= AIIndicatorRadius then a sphere overlap is used instead of a capsule overlap for efficiency's sake.",
    "KatanaTargetingComponent:ObstructionOverlapBoxHalfSize": "The half size of the sides of the overlap box that is used to find actors that should be destroyed by or block the dash.",
    "FortFeedbackAction:Handle": "The handle for this action",
    "FortFeedbackEvent:Handle": "The handle for this action",
    "FortFeedbackEventData:Handle": "The handle for this action",
    "GiveInventoryItemParams:PickupInstigatorHandle": "The handle of the pickup instigator.",
    "FabricMetaSoundNodeInfo:InputConnectionHandle": "The handle to the node to use for input connections\n         This can differ from the NodeHandle if a Switch is in use",
    "FabricMetaSoundNodeInfo:OutputConnectionHandle": "The handle to the node to use for output connections\n         This can differ from the NodeHandle if a Select is in use",
    "FabricMetaSoundNodeInfo:NodeHandle": "The handle to this node in the MetaSound graph",
    "FabricMetaSoundNodePool:FreeNodes": "The handle to this node in the MetaSound graph",
    "GameplayEventHandlerFunctions:OnStatefulEventApplied": "The handler function to call when a stateful event we subscribe to has its saved state applied.",
    "GameplayEventHandlerFunctions:OnStatefulEventCleared": "The handler function to call when a stateful event we subscribe to has its saved state cleared.",
    "GameplayEventHandlerFunction:EventHandlerFunction": "The handler function to call when an event is received.",
    "GameplayEventHandlerFunctions:OnEventReceived": "The handler function to call when we receive a subscribed event.",
    "RiderComponent:RiderPropAttachHardBounds": "The hard bounds to apply to the attachment of the prop (and rider),\n              If the distance between the rider and the ridable props is greater than\n              these bounds, it will apply the offsets to the attachments based on\n              the amount the separation distance falls past the hard bounds.\n\n              For example, if hard bounds is 10.0, and the separation distance is 12.5,\n              the hard bounds will apply an offset of 2.5.",
    "FortIntensityCurve:HighPlayerPerformancePeakIntensityThreshold": "The hard threshold at which the encounter triggers a peak then a breather",
    "FortExposedAssetProviderCachedVersion:VersionHash": "The hash returned from IFortExposedAssetProvider::GetExposedAssetProviderVersionHash for our class, if any.",
    "FortExposedAssetProviderCachedVersion:ParentVersionHash": "The hash returned from IFortExposedAssetProvider::GetExposedAssetProviderVersionHash for our parent class, if any.\n@note This is used to determine whether our parent has changed their IFortExposedAssetProvider implementation, as that could also affect the cache of child classes.",
    "FortDialogDescription:MessageHeader": "The header of the message to display",
    "FortDialogDescription_NUI:MessageHeader": "The header of the message to display",
    "BuildingActor:SavedHealthPct": "The health percentage of the building that should be saved/restored. Normalized between 0.f and 1.f, inclusive.",
    "DBNOCustomSettings:ReviveHealthPercentage": "The health percentage that the player will start with when out of DBNO",
    "AthenaAISettings:MaxNPCHearingRange": "The hearing range of an NPC should be >=  0.f",
    "CombatThresholdData:ExitHeatLevel": "The heat level to drop below this threshold. Should be less than or equal to HeatLevel. When less than 0 this is not used",
    "CombatThresholdData:HeatLevel": "The heat level to enter this threshold",
    "CombatEventData:Heat": "The heat that is applied when this event triggers",
    "FortAthenaMutator_Uranium:TeleportHeight": "The height above the ground that players are teleported to when they are teleported at the start of a round",
    "RootMotionSource_KatanaDashForce:HeightAboveGround": "The height above the ground the character should remain while moving with this root motion source.",
    "CreativeRoyaleIslandPlayspace:MaxMemorySamplingHeight": "The height at which memory sampling should be done",
    "GlobalWeatherData:HeightFogAltitudeWeatherData": "The height fog altitude data for the weather event",
    "HeightFogAltitudeWeatherData:HeightFogZOffset": "The height fog z offset curve (based on time of day [0-24]) we are targeting during this weather event",
    "HurdleInputConfig:Phase3_ClearanceCapsuleSize": "The height of the capsule used to validate clearance on top of the hurdle object",
    "HurdleInputConfigCache:Phase3_ClearanceCapsuleSize": "The height of the capsule used to validate clearance on top of the hurdle object",
    "FortLevelInstanceSaveActor:Height": "The height of the level instance in grid units",
    "TempestLightningComponent:LightningCloudHeight": "The height of the lightning cloud",
    "FortAthenaMutator_Cobalt:HeightOfSpawnIntoNewStormShield": "The height offset from the POI Location at which the respawning players should spawn at",
    "FortAthenaMutator_SpawnInVehicle:VehicleSpawnZOffset": "The height offset from the player used when spawning a vehicle",
    "FillFloorPositionData:Height": "The height we want the floor to be after the move time",
    "SkyCapPositionData:Height": "The height we want the sky cap to be after the move time",
    "FortGravityGunHolder:MaxAxisLength": "The held object's largest extent axis.",
    "SpawnActorStateTreeTaskInstanceData:SpawnActorHelper": "The helper for spawning actors",
    "FortControllerComponent_MapDiscoverability:StencilMaterial": "The helper stencil material used to update the render target",
    "FortTheaterMapViewer:HexMap": "The hex map of tiles",
    "FortTheaterMapViewer": "The hex map viewer, handles viewing theaters of hex tiles retrieved from the backend",
    "DaySequenceModifierNamedSequence:BiasOffset": "The hierarchical bias offset from the modifier component's Bias property to be assigned\nto this sequence. The final hierarchical bias of the sequence will be the sum of this bias offset\nand the modifier component's Bias property.\n\nBias controls how the the sequence will blend with other sequences driving the same property.\nA higher bias will override other sequences. An equivalent bias will blend.",
    "MarshalledVFXData:ParameterGroups": "The hierarchical parameter groups this system should listen to",
    "DeploymentConsoleComponent:TraceForGroundStart": "The high elevation to start tracing for ground.",
    "FortAthenaMutator_ItemPromotion:HighestUpgradeTier": "The highest allowed weapon tier.",
    "StormCapDamageThresholdInfo:ThresholdFloor": "The highest damage amount which is taking damage.",
    "FortMissionAlertData:MaximumTileDifficulty": "The highest difficulty a tile that receives this mission alert can have.",
    "CombatManagerComponentSTW:MaxHeatEver": "The highest heat ever achieved",
    "EFortTrickIncrementType.AirHeight": "The highest height reached in the trick",
    "FortTheaterRuntimeData:HighestDifficulty": "The highest mission difficulty found for this theater at runtime. Set in TheaterMapViewer",
    "EEpicLeaderboardUpdateFunction.Max": "The highest of the current or updated value is kept (e.g., most kills in a match)",
    "WeaponItemDefinitionDesignerData:DisassembleDurabilityDegradeMaxLootPercent": "The highest possible percent of the loot we will give you when you disassemble",
    "FortAthenaMutator_Barrier:LavaLevelRelativeToMascot": "The highest the lava will rise to, if lava is present, relative to the **LOWEST** mascot.",
    "FortSupplyDropGamePhaseData:SupplyDropMaxPlacementHeight": "The highest world Z that the supply drop will try to place on.",
    "FortAthenaMapInfo:SupplyDropMaxPlacementHeight": "The highest world Z that the supply drop will try to place on. (ONLY used by Llamas!)",
    "FortWeapon:HitNotifyLocationReticleImage": "The hit notify location reticle image to use",
    "FortWeapon:HitNotifyReticleImage": "The hit notify reticle image to use",
    "EFortHitPointModificationReason.InitalSet": "The hit point value is being established for the first time",
    "PhysicsObjectMovementStateData:LastMovingHitResult": "The hit result for stored on the most recent hit callback flagged as a moving hit",
    "FortPawnComponent_Phasing:TargetedBuildingHitResult": "The hit result that found the target point on the targeted building",
    "AthenaChromeTraversePoint:HoldingArea": "The holding area reference gathered from the child actor in the blueprint",
    "FortAthenaMutator_Skyfire:SkyfireWeaponHolsterId": "The holster ID that is used to holster/unholster the players weapon while they're in skyfire. All other holster IDs will be cleared upon entering Skyfire.",
    "EFrontEndCamera.HomeBase": "The home base (main area)",
    "FortHookGunRope": "The hook gun rope actor class",
    "FortTheaterMapViewer:HexTileWidth": "The horizontal size of the hex tile",
    "FortGameplayEventObjectHandle:ObjectRef": "The host object the referenced property belongs to.",
    "FortGameplayEventReference:ObjectHandle": "The host object the referenced property belongs to.",
    "FortGameStateZone:HostilityMeterPercent": "The hostility meter percent displayed in the hostility meter. Goes from 0-1",
    "ItemsForEventData:GlobalTableHotfixSyntax": "The hotfix syntax to apply for the required event. Recomended to use RowUpdates to keep the syntax small.\n              example:\n              // +DataTable=<data table path>;RowUpdate;<row name>;<column name>;<new value>\n              // +CurveTable=<curve table path>;RowUpdate;<row name>;<column name>;<new value>\n              // +CurveFloat=<curve float path>;RowUpdate;None;<column name>;<new value>",
    "MarkerUtilitiesMapIcon:MapIconScale": "The hotfixable value for the map icon's scale.",
    "FortAttributeInfo:FormatText": "The human readable format string that includes {Value} and the unit of measurement for this property (IE: second(s), ft)",
    "FortAttributeDetailsInfo:DisplayName": "The human readable name of this property",
    "FortTagUIData:DisplayName": "The human readable name of this tag",
    "FortAttributeInfo:UnitDisplayName": "The human readable name of unit measure of this property (IE: second(s), ft)",
    "VkModuleDoc:ModuleName": "The human-readable module name",
    "FortGameStateAthena:EliminationEnemyIconBrush": "The icon brush we use for the eliminations of enemies",
    "FortGameStateAthena:EliminationEnemyClampedIconBrush": "The icon brush we use for the eliminations of enemies when it is clamped on the minimap",
    "FortGameStateAthena:EliminationSquadmateIconBrush": "The icon brush we use for the eliminations of squadmates",
    "FortGameStateAthena:EliminationSquadmateClampedIconBrush": "The icon brush we use for the eliminations of squadmates when it is clamped on the minimap",
    "FortGameStateAthena:EliminationTeammateIconBrush": "The icon brush we use for the eliminations of teammate",
    "FortGameStateAthena:EliminationTeammateClampedIconBrush": "The icon brush we use for the eliminations of teammate when it is clamped on the minimap",
    "FortGameStateAthena:EliminationSelfIconBrush": "The icon brush we use for the eliminations of the local player",
    "FortGameStateAthena:EliminationSelfClampedIconBrush": "The icon brush we use for the eliminations of the local player when it is clamped on the minimap",
    "FortTheaterMapRegionData:RegionThemeIcon": "The icon in the UI associated with this",
    "CalloutEntry:CalloutIcon": "The icon that is displayed for this callout",
    "SoundIndicatorIconPicker:IconOverride": "The icon that will be displayed in the sound indicator radial if the owner of the sound indicator component has any of the given tags",
    "FortVehicleFuelComponent:FuelSubTextImage": "The icon to show next to the sub text in the interaction widget.",
    "FortAthenaMutator_MarkerUtilities:IndicatedPlayerMapIcon": "The icon to use when marking actors on the map. Only used if bMarkPlayersOnMap is true.",
    "MarkerUtilitiesCompassPlacementIcon:SquadmatePlacementCompassIcon": "The icon used to depict a leading player on the compass, if they are a squadmate.",
    "MarkerUtilitiesCompassPlacementIcon:PlacementCompassIcon": "The icon used to depict a leading player on the compass.",
    "MarkerUtilitiesMapPlacementIcon:SquadmatePlacementMapIcon": "The icon used to depict a leading player on the map, if they are a squadmate.",
    "MarkerUtilitiesMapPlacementIcon:PlacementMapIcon": "The icon used to depict a leading player on the map.",
    "MarkerUtilitiesMapIcon:MapIcon": "The icon's information that is used.",
    "FortTheaterMapRegionData:UniqueId": "The id for this region. Matches the asset name",
    "AccoladeTriggerPerMinute:Id": "The id of the accolade",
    "DynamicXpAggregatedAccoladeStats:AccoladeID": "The id of the accolade",
    "FortPlayerPawn:bDamagedEnemy": "The idea here is when a player damages an enemy player we flag the instigator pawn as such so the player and his/her\nallies can display the enemy on the minimap.",
    "SmartBuildSelection:IdealViewPitch": "The ideal pitch of the player's view when this piece should be selected",
    "FortWeaponModOverrideDataRow:WeaponTag": "The identifier tag in WID for the weapon, starting with weapon mod tuning prefix (Item.Weapon.Ranged)\nA row is found by finding a matching WeaponTag and ModTag",
    "FortWeaponModOverrideDataRow:ModTag": "The identifier tag in WMID for the weapon mod\nA row is found by finding a matching WeaponTag and ModTag",
    "SpecialActorRepData:SpecialActorID": "The identifier used to access this special actor (needs to be unique)",
    "SpecialActorRepData:CategoryTag": "The identifier used to group this actor in a category that can be used for determining how many there are of a \"type\"",
    "FortHexMapMarkerBase:IdleAnimation": "The idle animation for the marker",
    "SpatialMetricSampleImageProperties:ImageSize": "The image size in pixels.",
    "FortCreativeServerDisplayOption:Image": "The image to associate with a Creative server",
    "ItemWrapSlotMetadata:SlotImage": "The image to display for this item wrap slot",
    "FortChallengeSetStyle:DisplayImage": "The image to use when displaying the challenge set in a styled way. If empty, the PreviewIcon on the bundle itself will be used.",
    "FortCowVehicle:ForceNormalized": "The impact force, map range clamped.",
    "FortCowVehicle:ImpactPointInterp": "The impact point interp that's used to adjust the squash material.",
    "FortCowVehicle:ImpactPointInterpData": "The impact point interp to data.",
    "BuildingSMActor:LastDamageHitImpulseDir": "The impulse direction cached from the HitResult we last received as a damage event.  That's6\n      the only data we use from the HitResult, so we only store the FVector as it is much lighter weight",
    "UserOptionDefinitionBoolMetaData:FalseDisplayName": "The in-game display name to use when the value is false.",
    "UserOptionDefinitionBoolMetaData:TrueDisplayName": "The in-game display name to use when the value is true.",
    "FortAthenaMutator_CreativeCombineMinigameStats:ChangingStat": "The incoming stat event type. When this stat changes trigger a new stat event of the StatEventFilter type.",
    "FortCreativeDiscoverySplicedEntry:EntryIndex": "The index [0, N] of where this entry is spliced in.",
    "FortReplicatedWeatherEventData:Index": "The index for the event",
    "WindSplineSubDivBlockage:SubDivIdx": "The index for the sub division that's blocked",
    "TeamPerformanceMessageReplication:MessageIndex": "The index in AFortAthenaMutator_TeamPerformanceMessage::MessageDatas for the message we want to show the client.",
    "CreativeToolPersistentData:GridSnapIndex": "The index in the grid snap ratio that we want to use.",
    "FortCreativeMoveTool:GridSnapIndex": "The index in the grid snap ratio that we want to use.",
    "ItemLoadoutTeamMap:LoadoutIndex": "The index in the loadouts to used for this team",
    "FortTheaterMapTile:TileIndex": "The index in the of the tile in the TheaterMapViewer's HexMap array",
    "VehicleSpringInfo:SeatSocketIndex": "The index of a seat socket which must be occupied in order for this spring to be active (-1 for always active)",
    "ControlPointSpawnData:SafeZonePhaseWhereToSpawn": "The index of the SafeZone for where to spawn (where)",
    "HeistBlingDropSpawnData:SafeZonePhaseWhereToSpawn": "The index of the SafeZone for where to spawn the ExitCraft (where)",
    "HeistExitCraftSpawnData:SafeZonePhaseWhereToSpawn": "The index of the SafeZone for where to spawn the ExitCraft (where)",
    "FortMantisReplicatedAnimInstanceInfo:ActiveTechniqueIndex": "The index of the active technique if there is one (otherwise -1).",
    "FortAthenaMutator_Cobalt:FirstRound": "The index of the first round of the game. This may not be 0 if rounds are skipped.",
    "LaserGridEditorComponent:VisualizeLaserGridPatternIndex": "The index of the laser grid pattern to visualize.",
    "LaserOutletConnection:PrimaryOutletIndex": "The index of the outlet that is considered primary.\n     The index here corresponds to the instanced static mesh component of the outlet.",
    "LaserOutletConnection:SecondaryOutletIndex": "The index of the outlet that is considered secondary.\n     The index here corresponds to the instanced static mesh component of the outlet.",
    "FortAthenaMutator_SplitStorm:PhaseToSplitStorm": "The index of the phase at which the storm should split.",
    "FortSafeZoneIndicator:CurrentPhase": "The index of the phase this safe zone is currently on. Can be indexed into SafeZonePhases to get the information for the phase",
    "TeamRoles:PusherTeam": "The index of the player team that can push this vehicle",
    "TeamRoles:DefenderTeam": "The index of the player team that is defending against the pushing team",
    "FortPrefabSpawner:PreviewIndex": "The index of the prefab we want to preview from the CompatiblePrefabs array, CompatiblePrefabs should be used for reference\nto change this preview index. PreviewNextPrefab and PreviewPreviousPrefab directly change this variable.",
    "FortTheaterMapTile:RegionIndex": "The index of the region this tile belongs to found in the TheaterMapViewer's HexMapRegions array",
    "CobaltCombatStormShieldDataEntry:RoundIndex": "The index of the round this storm shield participates in",
    "BuildingSMActor:AltMeshIdx": "The index of the selected alternate mesh for the selected loot tier",
    "AthenaSquadPedestalGroup:MonitoredSquadIdx": "The index of the squad this pedestal group is meant to represent.\nNote that for pedestals, this the index of a squad after sorting the local player's squad to the front (because we always show the local player front and center)",
    "FortTeamMemberPedestal:AssignedMemberIndex": "The index of the team member this pedestal is meant to represent. Squads do not respect this. Do not use in anything but legacy StW things that rely on static team positions",
    "FortMantisTargetData:TechniqueDataIndex": "The index of the technique in the player's MantisData.",
    "FortAvailableMissionAlertData:TileIndex": "The index of the tile within the theater data.",
    "FortAvailableMissionData:TileIndex": "The index of the tile within the theater data.",
    "WaterSurfaceInfo:WaterBodyIdx": "The index of the water body at the surface location.",
    "TimeOfDayEditorWeatherSettings:WeatherEventIndex": "The index of the weather event to use",
    "PendingSpawnInfo:EnemyIndexInSpawnGroup": "The index of this enemy in its spawn group data",
    "FortQuestMapPage:PageIndex": "The index of this page in its chapter (x in x/y)",
    "FortTeamMemberInfo:PlayerIndex": "The index of this player in the team",
    "BuildingGameplayActorSpawnData:BGAIndex": "The index to the static data array defined in the map info",
    "IndicatedActorDataWithFilter:IndicatedData": "The indicated actor data.",
    "FortAthenaMutator_MarkerUtilities:WorldIndicator_IndicatorZOffset": "The indicator highlight Z-Offset from the pawn's origin.",
    "BuildingFoundationStreamingData:ChildStreamingDataIndices": "The indices in to the foundation streaming data that contains the information about this foundation's child foundation's streaming data.",
    "FortAvailableMissionAlertData": "The information about a mission alert that is currently available on the theater map",
    "FortAvailableMissionData": "The information about a mission that is currently available on the theater map",
    "CraftingFormula:RequiredIngredients": "The ingredient tag requirements to craft this formula",
    "AnimSpinner:BaseRotationSpeed": "The inital speed of rotation",
    "FortAthenaVehicle:TestInitialAngularVelocity": "The initial angular velocity (useful for testing)",
    "FortPhysicsPawnObject:TestInitialAngularVelocity": "The initial angular velocity (useful for testing)",
    "BuildingFillFloor:InitialDelay": "The initial delay after the aircraft phase when the floor should start moving",
    "RootMotionSource_RocketRam:InitialDirection": "The initial direction this root motion source should be moving the character in. Lerp's to EndingDirection over the duration.",
    "FortAthenaVehicle:TestInitialLinearVelocity": "The initial linear velocity (useful for testing)",
    "FortPhysicsPawnObject:TestInitialLinearVelocity": "The initial linear velocity (useful for testing)",
    "FortTheaterMapTile:InitialLocation": "The initial location of the actor",
    "FortGrantedQuestData:InitialQuestAchievedCounts": "The initial objective values for this quest - For example, if a quest is loaded from a backend service, it could have already\n      established objective achieved counts from previous session progress",
    "EFortQuestType.Onboarding": "The initial onboarding quests. The player is considered to be in onboarding until all of these quests are complete",
    "FortPickupLocationData:LootInitialPosition": "The initial position that the loot is flying from",
    "DaySequenceActor:InitialTimeOfDay": "The initial time that the day cycle will start at",
    "SpecialEventCursorPawnComponent:bAdditiveRotationAllowedByDefault": "The initial value of bAdditiveRotationAllowed, which determines whether the camera should rotate toward the cursor",
    "SpecialEventCursorPawnComponent:bZoomAllowedByDefault": "The initial value of bZoomAllowed, which determines whether the player can use ZoomActionName to zoom the camera",
    "FortPlayerControllerAthena:QuickWeaponInputComponent": "The input component used for quick-swap weapon selection.",
    "FortObjectMoverInputComponent:CreativeMoveToolEquippedInputComponent": "The input component used for the Creative Move Tool.",
    "FortObjectMoverInputComponent:PropPossessorEquippedInputComponent": "The input component used for the Creative Move Tool.",
    "CreativeQuickbarComponent:CreativeQuickbarInputComponent": "The input component used for the quickbar generally when it's enabled.",
    "CreativeQuickbarComponent:CreativeQuickbarActiveInputComponent": "The input component used for the quickbar when it's active.",
    "FortPlayerControllerGameplay:CreativeModeratorModeInputComponent": "The input component used to manage Creative Moderator mode",
    "FortPlayerControllerGameplay:CreativeModeInputComponent": "The input component used to manage Creative mode.",
    "FortPlayerControllerGameplay:CreativeGlobalOptionsInputComponent": "The input component used to manage GlobalOptions",
    "FortObjectMoverInputComponent:MultiSelectMoveObjectsFreelyModeInputComponent": "The input component used to manage Multi Select for Move Objects Freely mode.",
    "FortObjectMoverInputComponent:RotationInputComponent": "The input component used to manage Rotation of a held object for move objects freely",
    "FortObjectMoverInputComponent:ScaleInputComponent": "The input component used to manage Scale of a held object for move objects freely",
    "FortPossessedPropInputComponent:FortPossessedPropInputComponent": "The input component used to manage bindings specific to having a possessed prop",
    "FortPlayerController:BuildPreviewModeInputComponent": "The input component used to manage building preview mode",
    "FortPlayerController:DBNOCarryInputComponent": "The input component used to manage dbno carry.",
    "FortPlayerControllerGameplay:CreativeModeFlyingInputComponent": "The input component used to manage flying mode.",
    "FortPlayerController:HeldObjectsInputComponent": "The input component used to manage held objects.",
    "FortPlayerControllerGameplay:CreativeModePreviewScreenshotInputComponent": "The input component used to manage preview screenshot mode",
    "FortObjectMoverInputComponent:MoveBuildingsOnGridModeInputComponent": "The input component used to manage the Move Buildings On Grid mode.",
    "FortObjectMoverInputComponent:MoveObjectsFreelyModeInputComponent": "The input component used to manage the Move Objects Freely mode.",
    "FortObjectMoverInputComponent:MultiSelectMoveBuildingsOnGridModeInputComponent": "The input component used to manage the MultiSelect that has some objects as Move Buildings On Grid mode.",
    "FortObjectMoverInputComponent:PlaysetPreviewModeInputComponent": "The input component used to manage the Playset Preview mode.",
    "FortPlayerControllerGameplay:CreativeModeInGameReadyCheckInputComponent": "The input component used to manage the player's ability to ready up when in game.",
    "FortPlaysetGrenadeInputComponent:PlaysetGrenadeInputComponent": "The input component used to manage the playset grenade menu opening.",
    "FortObjectMoverInputComponent:TranslationInputComponent": "The input component used to manage translation of a held object for move objects freely",
    "FortSquadStartSearchParamData": "The input data that would be used in processing the AFortAthenaMutator_GameModeBase::GetSquadStarts call.",
    "BuildingSMActorAttemptSpawnResourcesParams": "The input parameters used by ABuildingSMActor::AttemptSpawnResources()",
    "FortAISpawnerData:SpawnGroupInstanceGuid": "The instance guid in the encounter of the enemy spawn group",
    "FortAIPawn:DefenderItemInstanceId": "The instance id of the Defender Item",
    "PhaseLevelEntry:LevelInstance": "The instance of the level created upon loading",
    "LWMEncounterStartStateTreeTaskInstanceData:EncounterInstance": "The instance that was spawned (weak ptr, manager is given ownership)",
    "FortAthenaToggleGameplayEffectStateTreeTaskInstanceData:Actor": "The instigator actor we want the Gameplay Effects to start from (must implement IAbilitySystemInterface).",
    "BuildingMusicSequencer:TriggerInstigator": "The instigator of the device.",
    "FortAthenaMutator_GameStartCountdown:StartingCountdownInteger": "The integer value at which the countdown begins. For e.g., the 3 in 3, 2, 1, GO!",
    "FortEventConditional:Value": "The integer value to compare against the stat's value",
    "EffectRecipientConfig:Recipient": "The intended recipient of the associated subset of service effects",
    "FortIntensityCurve:FadeEndIntensityThreshold": "The intensity level at which a fade will transition to the breather",
    "SpecialEventAudioHapticsAction:HapticsIntensity": "The intensity of this haptics action when fully triggered.\nThis value is a multiplier, and the end result of HapticsIntensity * USpecialEventAudioHapticsComponent::IntensityMultiplier is clamped between 0 and 1",
    "FortAthenaMutator_AdHocSquads:SquadsTooBigToMergeText": "The interact prompt text is replaced with this when your squad is too big to merge with the inviting squad",
    "UserOptionDefinitionContainer:InteractionSpeed": "The interaction speed of the thing that owns these options.",
    "BuildingGameplayActorSpawnChip:InteractSubTextColor": "The interaction sub text color for the card",
    "BuildingProp_QuestGlyph:InteractSubTextColor": "The interaction sub text color for the glyph - locked",
    "BuildingProp_QuestGlyph:InteractSubTextColorUnlocked": "The interaction sub text color for the glyph - unlocked",
    "BuildingGameplayActorSpawnMachine:InteractSubTextFailedColor": "The interaction sub text color for the van when interaction failed",
    "BuildingGameplayActorSpawnMachine:InteractSubTextSuccessColor": "The interaction sub text color for the van when interaction succeeds",
    "BuildingGameplayActorSpawnChip:InteractSubText": "The interaction sub text for the card",
    "BuildingGameplayActorSpawnMachine:InteractNotEnabledForPlayerSubText": "The interaction sub text for the van when it is not enabled for the player",
    "BuildingGameplayActorSpawnMachine:InteractNoCardsSubText": "The interaction sub text for the van when player has no card",
    "BuildingGameplayActorSpawnMachine:InteractTeamStartedRebootSubText": "The interaction sub text for the van when teammate started reboot on other vans",
    "BuildingGameplayActorSpawnMachine:InteractVanInUseSubText": "The interaction sub text for the van when van being used by other teams",
    "FortFocusedBuildingInfo:InteractionType": "The interaction that the player can currently have with the focused building",
    "FortGameplayCueNotifyLoop_Goop:InterpSpeed": "The interp speed for the audio component.",
    "BuildingGameplayActorSupplyDropRadio:InterpRateToBalloonOpenedFallSpeed": "The interpolation rate at which the balloon goes from its current fall speed to the BalloonOpenedFallSpeed when the balloon is opened.",
    "BuildingTrapFloor_Turret:RotateInterval": "The interval at which the rotate timer will tick",
    "FortScoutDroneAnalyticsComponent:DistanceTraveledUpdateInterval": "The interval between we check distance differences for tracking",
    "BuildingTrapFloor_Turret:UpdateIntervalTime": "The interval of time when the turret will next update its speed",
    "DAD_Island:MetricInterval": "The interval the metric is updated at.",
    "FortAthenaMutator_Pow:IntroMessages": "The intro messages to use for the mode",
    "FortGameplayCueNotifyLoop_Goop:IsFallingParamName": "The is falling parameter name for the audio component.",
    "EMMSPrivacy.Private": "The island is public and its code can be used by anyone",
    "FortLevelSaveComponent:LoadedPlotInstanceId": "The item GUID of the loaded plot item (replicated for analytics purposes)",
    "GiftUINotificationInfo:SoftItemPtr": "The item being given",
    "FortLoginReward:ItemCount": "The item count, the number of items given",
    "FortDecoTool:ItemDefinition": "The item definition corresponding to the deco or gadget we can place or use",
    "CreativeQuickbarComponent:QuickbarSlotPlaysetItemDefinition": "The item definition for the creative playset added to the quickbar",
    "DuelOverlayData:ChallengedNPCLootDef": "The item definition for the most important loot the NPC is going to drop.",
    "FortDecoHelper:DecoItemDefinition": "The item definition for the object being created by this DecoTool",
    "ItemDefToItemVariantDataMapping:ItemDefinitionTags": "The item definition tag that wants to use this variant data.",
    "EQSActorSpawnerClassToSpawnData:PickupItemDefinition": "The item definition that the Actor Spawner will attempt to spawn a pickup for.\n     This item definition will be used as the spawned pickup's item if SpawnActorType == EEQSActorSpawnerSpawnType::Pickup",
    "OutpostBuildingData:ItemDefinition": "The item definition the outpost building is defined by",
    "CreativeQuickbarComponent:QuickbarSlotItemDefinitions": "The item definitions for the creative quickbar",
    "FortItemEntry:Durability": "The item durability",
    "AccumulatedItemEntry:ItemDefinition": "The item entry.",
    "CachedRechargeAmmoData:WeaponItemGuid": "The item guid for the weapon that is recharging",
    "CatalogDynamicBundleItem:Item": "The item id granted (and to be checked for ownership)",
    "MultiItemReplicationProxy:PendingPowerUpItemIndex": "The item index that the owning multi-item is pending powering up to. If the owning\n    multi-item is not pending a power up, this value will remain at -1.",
    "Card:Item": "The item itself",
    "CachedRechargeAmmoData:ItemLevel": "The item level that this was granted at",
    "FortItemEntry:OrderIndex": "The item order index",
    "FortPendingSlottedItemOperation:SlottedItemId": "The item that is currently pending an operation in the collection book",
    "CardPackOffer:CurrencyType": "The item that is deducted for purchasing this offer",
    "PrototypeCraftingIngredient:Ingredient": "The item that is needed for crafting.",
    "PrototypeCraftingOutput:Item": "The item that will be crafted.",
    "EFortItemTier": "The item tier of an item. Higher values require rarer items.",
    "NPCChosenItemData:ItemDefinition": "The item to be instanced (i.e. Shotgun, Sniper Rifle Ammo)",
    "PlayerFishingTelemetryData:ItemUsedToFish": "The item used to fish.  i.e. fishing pole, .",
    "FortAIPawn:DefenderItem": "The item used to spawn this AI Pawn if it is a Defender",
    "ItemDefToItemVariantDataMapping:ItemVariantData": "The item variant data asset to use for this item definition.",
    "FortCreativeItemVariantNotifierComponent:BoundVariantHandles": "The item variant handles this component is currently registered with",
    "ItemDefToItemVariantDataMapping:ItemVariantTag": "The item variant tag to use when filtering the item variant data for valid entries.",
    "FortCreativeKeyLockComponent:UnlockKeyItem": "The item variant that will be the key to unlock this component",
    "ItemsForEventData:ItemsToLoad": "The item's that will need to be loaded when the required event is active",
    "FortNotificationLevelUp:HeroId": "The itemId for this hero",
    "QuickBarSlot:Items": "The items in this slot",
    "CatalogOfferSource:Offers": "The items that should appear in the store catalog",
    "SparksPlayspaceEvent_KeyChanged": "The key being played in the sparks music playspace has changed",
    "FortMaterialStyleComponent:DefaultStyleName": "The key for the entry in DefaultStyleSet representing any default style that should be applied when no other requests active",
    "FortMaterialStyleComponent:bDefaultStyleEnabled": "The key for the entry in DefaultStyleSet representing any default style that should be applied whenever no other requests active",
    "SparksPlayspaceEvent_KeyModeChanged": "The key mode being played in the sparks music playspace has changed",
    "UIStateChartContextCondition:Key": "The key of the Context entry to evaluate",
    "DAD_Island:IslandName": "The key or ID of this island.",
    "DynamicBackgroundDirector:DynamicBackgroundKey": "The key this dynamic background director uses to determine what background data to use from CMS",
    "ContextSetterClearEntry:Key": "The key to clear",
    "ContextSetterSetEntry:Key": "The key to set",
    "EFortPerModeInputType.KeyboardMouse": "The keyboard & mouse input type",
    "EFortPickerToDisplay": "The kind of picker to display",
    "EAthenaSeasonRewardTrack": "The kinds of tracks in a Battle Pass",
    "FMDeviceCable:MaxExtremeCableBendSize": "The largest horizontal bend allowed when adding extreme angle bends",
    "FMDeviceCable:CableMaxTangent": "The largest tangent allowed for a cable",
    "RadiusTrackingInitializer:MaximumRadius": "The largest the circle can ever be; currently this is also the starting radius of the circle.",
    "ELaserConnectionState.Off": "The laser connection is off.\n              For outlets: there are no connections or all connections are set to Off.",
    "ELaserConnectionState.On": "The laser connection is on.\n              For outlets: a connection is set to on, or some (but not all) connections are set to TransitionOn, or some (but not all) connections are set to TransitionOff.",
    "ELaserConnectionState.TransitionOff": "The laser connection is transitioning off.\n              For outlets: one or more connections are set to TransitionOff and there are no connections set to TransitionOn or On.",
    "ELaserConnectionState.TransitionOn": "The laser connection is transitioning on.\n              For outlets: one or more connections are set to TransitionOn and there are no connections set to TransitionOff or On.",
    "FortVolumeTimeOfDayComponent:bIsOverridingTimeOfDay": "The last TOD config the player was set to",
    "FortCurieComponent:LastElectricityPropagationParent": "The last actor acting as an electricity propagation parent for this component, if any",
    "SpecialEventCursorPawnComponent:AdditiveOffsetCameraComponent": "The last camera component for which we adjusted the additive offset",
    "FortPlayerPushableCart:CurrentCheckPoint": "The last check-point that the push cart has reached",
    "FortGameStateZone:PlayerBuildingSkillLevel": "The last computed value of the player building skill level for the game; Default implementation is computed and stored as the maximum value of every player in the game",
    "FortGameStateOutpost:PlayerWeaponSkillLevel": "The last computed value of the player weapon skill level for the game; Default implementation is computed and stored as the maximum value of every player in the game\n-1 is invalid",
    "VkModuleDoc:LatestVersion": "The last cooked version",
    "FortPortalComponent:LinkDataErrorStatus": "The last error status/code encountered",
    "FortWeapon:CurrentShotLogIndex": "The last fired shot, ShotLogFlags should be this large",
    "CreativeItemTemplate:PrevVariantHandle": "The last known item template this template corresponded with",
    "MutatorOverrideData:CachedOverrideSource": "The last known state of OverrideSource; used for reacting to replicated state changes",
    "FortScoutDronePickupManager:CurrentlyAppliedCameraOffset": "The last offset applied to the camera, so we can go back when dropping actors",
    "FortPlayerControllerSpectating:LastDamagerOfViewTarget": "The last player that damaged the current followed player (gets cleared when the followed player changes or timeline is scrubbed)",
    "FortPlayerController:LastDamager": "The last player that damaged us",
    "FortPlayerController:LastFallInstigator": "The last player that made us fall. We need this in case we fall but don't take fall damage but do take damage from something else and die, like lava.",
    "BuildingItemCollectorActor:ControllingPlayer": "The last player to interact with the Collector, they are considered controlling this item",
    "VkPublishedLink:LastPublished": "The last publish date for this link",
    "CraftingObjectComponent:LastFormulaStringForAnalytics": "The last recipe attempted - saved for analytics",
    "QuickBar:PreviousFocusedSlot": "The last slot we were focused on",
    "FortPlayerControllerAthena:XpReceivedLastAtTime": "The last time XP was received",
    "FortWeapon:LastSuccessfulReloadTime": "The last time a reload occurred and completed.",
    "FortWeapon:LastReloadTime": "The last time a reload occurred.",
    "FortGameUserSettings:LastGameStartNotificationSentTime": "The last time a user sent a \"Started Playing Game\" notification on this device",
    "FortActiveSubscription:LastAuthRefresh": "The last time the auth was refreshed if the store requires us to send a new auth token occasionally",
    "McpEntitlementRefreshTimerInfo:LastAuthRefresh": "The last time the auth was refreshed if the store requires us to send a new auth token occasionally",
    "FortPlayerControllerZone:LastScoreEarnedTime": "The last time the player earned any type of score (combat, utility and/or building). Used for AFK detection.",
    "FortActiveSubscription:LastStatusRefresh": "The last time the subscription was refreshed with the vendor.  Most refreshes can come from rewards being due, but we also want to keep it fresh to catch AutoRenew toggles",
    "ValkyrieProjectSizeStats:LastUploaded": "The last time this project was uploaded (may be set even when bIsValid is false)",
    "FortAIEncounterWaveProgressEstimation:LastWaveProgressUpdateTime": "The last time wave progress was updated",
    "FortGameUserSettings:LastEulaCheckTime": "The last time we performed a EULA check time for a user that has accepted the EULA",
    "FortPlayerController:CachedPersistentGameplayStats": "The last version of the persistent stats we sent to MCP, only send an update if it differs",
    "MutatorOverrideData:CachedExternalOverrides": "The last-known external overrides that were applied (so they can be rolled back when reverting to internal)",
    "FakeKillRelevancyPhaseData:WaveNum": "The latest initiated wave, incremented with each call to StartNextKillWave()",
    "PhaseDataLayerEntry:DataLayerAsset": "The layer to be manipulated",
    "EContextLayoutAccessLevel.Editable": "The layout will be present and editable by players in the HUD Layout Tool.",
    "BagelLeaderboardEntry:Value": "The leaderboard stats associated value",
    "MashLeaderboardEntry:Value": "The leaderboard stats associated value",
    "FortAthenaMutator_Wax:PodiumChanged": "The leaders have changed (either switching places, or a new player has become a leader)",
    "EFortLegacySlateWidget": "The legacy Slate widgets that have yet to receive UMG replacements",
    "CraftingObjectComponent:ResettingTimeLength": "The legnth of time the crafting object will take to reset back to idle",
    "MotorcycleWheel:SpringLength": "The length associated with this spring",
    "SpringConfig:SpringLength": "The length associated with this spring",
    "VehicleSpringInfo:SpringLength": "The length associated with this spring",
    "MotorcycleWheel:PoppedTireSpringLength": "The length associated with this spring when the tire is popped.",
    "FortPlayerMarkerBase:SpawnMarkerAnimLength": "The length of the SpawnMarkerAnimTimeline. Tick is turned off after the timeline reaches this length",
    "DanceBeatInfo:LengthBeats": "The length of the animation in beats",
    "DanceMontagePlayInfo:LengthBeats": "The length of the looping section in beats",
    "DanceMontagePlayInfo:LengthSecs": "The length of the looping section in seconds",
    "FortLinkToActorComponent:DirectionTraceLength": "The length of the trace",
    "AthenaCapturePoint:UnlockInterval": "The length of time (in seconds) that will need to pass before a capture point\n      will flip from Locked to Unlocked. Kicks in when bLocked is True",
    "BuildingGameplayActorCloneMachine:DelayBeforeSelfDestructWithStorm": "The length of time sitting in the storm before it will destroy itself",
    "CraftingObjectComponent:OverCraftingTimeLength": "The length of time the crafting object will remain in over crafting",
    "CraftingObjectComponent:ReadyTimeLength": "The length of time the crafting object will stay ready before transitioning to over crafting or resetting (0 indicates it transitions to resetting immediately)",
    "MissionVehicleSpawnSet:OccupiedLocationGameplayEffectLevel": "The level at which the GE is applied to the queried location actor when the vehicle is occupying it",
    "AthenaLevelInfo:Level": "The level in the current season",
    "FortCreativeDiscoveryTestCohort:CohortSelector": "The level of determinism by which this test is selected.",
    "FortConstructorBASE:BASELevel": "The level of the BASE. Used to scale effects placed on affected building actors",
    "GameplayEffectApplicationInfo:Level": "The level of the gameplay effect",
    "GameplayEffectApplicationInfoHard:Level": "The level of the gameplay effect",
    "GameplayEffectEventKeyArrayAndHandle:Level": "The level of the gameplay effect",
    "FortTeamMemberInfo:HeroLevel": "The level text of the party member's current hero",
    "FortPlayerScoreReport:InitialLevel": "The level the player started at",
    "AthenaSeasonRewardLevelInfo:Level": "The level this reward is for",
    "DynamicStreamingLevelData:LevelPackageName": "The level to load in",
    "PlayerMarkerConfig:SelfEliminationMarkerTTL": "The lifetime of a local player elimination marker",
    "BuildingTrapFloor_Turret:Lifetime": "The lifetime of the turret. 0 means infinite",
    "FortDaySequenceActor:LightDirection": "The light direction",
    "EQSActorSpawnerClassToSpawnData:Weight": "The likelihood of this entry being chosen to spawn compared to all other entries within the array.\n     Odds of being chosen are Weight/ the sum of Weight for all available options\n     Entries of 0 or less weight will NOT be picked.",
    "FortMapData:SelectionWeight": "The likelihood of this specific map being selected relative to all other maps in the list",
    "MashTableRowPoiRoute:Weight": "The likelihood that this POI route will be selected. Weights <= 0 are ignored",
    "ReactorGradeGameplayCue_ChargeUp:HitObjectsLimit": "The limit of objects we are allowed to hit before the end point stops.",
    "VkProjectLimitsDoc:PublishingDownloadSize": "The limit size the cooked version must not exceed in bytes.",
    "FortCheckPointSplineActor:SplineMapUIThickness": "The line thickness of the spline map UI",
    "FortAthenaMutator_SplitStorm:ProxyMapCircleLineThickness": "The line thickness with which to draw the proxy storm circle on the minimap.",
    "EQSActorSpawnerClassToSpawnData:AdjustSpawnedActorToGroundLocationTraceZOffset": "The line trace offset [Z axis +/-] used to adjust the spawn location of an actor so that its root is on the ground.\n     If the value is <= 0.f, the spawn location isn't adjusted for the ground. Only works for SpawnActorType == EEQSActorSpawnerSpawnType::Actor.",
    "GroundSplineSpeedData": "The linear and yaw acceleration and speed of our UpdatedComponent",
    "FortAthenaZipline": "The linear zipline implementation",
    "FortFeedbackAction:Lines": "The lines that can be randomly chosen for this action, given the context",
    "EPortalLinkCodeLockMode.NeverLocked": "The link code is always unlocked with no cool-down period",
    "EPortalLinkCodeLockStatus.Locked": "The link code is locked",
    "EPortalLinkCodeLockStatus.Unlocked": "The link code is unlocked",
    "EPortalLinkCodeLockStatus.Unlocked_NotSet": "The link code is unlocked and has not yet been set",
    "DAD_Island:IslandCode": "The link code that this island points to.",
    "FortGameMode:MatchmakingLinkCode": "The link code this match was assigned to from MMS.",
    "FortGameMode:MatchmakingLinkType": "The link code type of MatchmakingLinkCode.",
    "FortCreativeDiscoverySplicedEntry:LinkCode": "The link code.",
    "VkPublishedLink:LinkCode": "The link mnemonic",
    "VkPublishedLink:LinkVersion": "The link version",
    "FortPlayerControllerAthena:CreativePlotLinkedVolume": "The linked volume that this player is currently on.  Allows code to query the volume for data when the player is on the \"Dock\" of the island",
    "AthenaAISettings:AIServices": "The list of AI Services that will be initialized by AI Service Manager",
    "FortAthenaMutator_Bismuth:BismuthAIBots": "The list of Bismuth AI Bot Pawns alive in the world.",
    "FortAthenaMutator_Bismuth:BismuthSpawners": "The list of Bismuth Spawners in the world.",
    "FortCreativeSplineModificationComponent:ControlPoints": "The list of Control Points that the owning device has spawned",
    "FortTextHotfixConfig:TextReplacements": "The list of FText values to hotfix",
    "FortQuestMapCosmetic:CosmeticDataList": "The list of FortItemDefinitions to push into the cosmetic widget if able;\n              Only used if the WidgetClass is an subclass of FortQuestMapCosmeticListWidget",
    "FortFactionSharedBBInfo:Members": "The list of Members that are sharing this BB.",
    "BotPOI:NavMeshLocations": "The list of NavMesh locations generated by EQS",
    "FortCreativeMoveTool:HoveredComponents": "The list of actor components that were hovered last frame.  We track this so that we can remove\n          the effect when they're no longer hovered.",
    "FortNevadaVehicle:TractorBeamTargetedActors": "The list of actors targeted by the tractor beam",
    "FortWeaponTraceIgnoreActorsComponent:AdditionalIgnoreActorClasses": "The list of additional actor classes to ignore in the weapon's trace",
    "FortWeaponTraceIgnoreActorsComponent:AdditionalIgnoreActors": "The list of additional actors to ignore in the weapon's trace",
    "FortAthenaMutator_Bagel:ObjectiveAreas": "The list of all areas in order that players have to go through to complete the mode",
    "FortAthenaMutator_Mash:ObjectiveAreas": "The list of all areas in order that players have to go through to complete the mode",
    "FortAthenaLoadout:ApparelArray": "The list of apparel items to use. The ordering of these doesn't matter.",
    "FortActiveTheaterInfo:MissionAlerts": "The list of available mission alerts (for each theater)",
    "FortActiveTheaterInfo:Missions": "The list of available missions (for each theater)",
    "CharmSlotMetadata:PreviewList": "The list of available weapons or vehicles that we can spawn to preview on",
    "ItemWrapSlotMetadata:PreviewList": "The list of available weapons or vehicles that we can spawn to preview on",
    "FortGameSessionDedicated:CalendarEventsRequiringNewForkedMasterProcess": "The list of calendar events that require a new process, when forking",
    "FortAthenaLoadout:Charms": "The list of charms to use",
    "FortMcpQuestObjectiveInfo:ObjectiveConversations": "The list of conversations that can trigger based on objective stat values in campaign mode",
    "FortQuestMapPageCosmetics:CosmeticList": "The list of cosmetic art pieces for this map page",
    "FortGameStateOutpost:IronCityEarlyPlayerInfos": "The list of current Iron City player infos at the time of starting simulation",
    "WindSplineComponent:Blockages": "The list of current blockages",
    "FortPawn:DynamicComponents": "The list of dynamic components on the FortPawn. See 'AddDynamicComponentByClass'.",
    "FortGiftingRecipientState:Items": "The list of eligible items a recipient is allowed to receive.",
    "FortMissionManager:AllMissionEnemyClasses": "The list of enemy classes used in at least one mission at some point this match. Used to prevent GC of these classes client side during combat and to preload assets.",
    "FortGameplayEventContainer:EventRefs": "The list of event references; could be descriptors we're subscribed to or functions subscribed to us.",
    "GameplayEventFunction:EventSubscriptions": "The list of events we should subscribe to.",
    "FortTeamMemberInfo:SelectedGadgetItems": "The list of gadgets selected",
    "FortMissionPlacementItems:ActorsAndLocations": "The list of individual actors to spawn and/or locations to reserve (or pre-calculate) for later use in missions.",
    "SpecialEventInputHelperComponent:InputActionMap": "The list of input actions we care about, and the type of binding that should be set up for press and release",
    "ItemListCategoryArray:ItemList": "The list of item definitions for this category",
    "RarityArray:Items": "The list of item definitions for this rarity. Rarity is determined by index in the array.",
    "FortAthenaLoadout:ItemWraps": "The list of item wraps to use (The index in this array is defined by UFortItemWrapMappingData)",
    "WindSplineComponent:QueryBasedForceModifiers": "The list of modifier to scale the forces based on the target tag query",
    "WindSplineComponent:SizeForceModifiers": "The list of modifiers to scale the forces based on the target size",
    "WindSplineComponent:ObjectTypeForceModifiers": "The list of modifiers to scale the forces based on the target type",
    "FortGameStateZone:GameplayMutatorObservers": "The list of mutator observers for when mutators are add/removed/etc.",
    "FortClientAnnouncementData_Keybinding:GamapadActionTextList": "The list of pairs of input actions and associated tutorial text to show if action is bound.\n              If no actions are located the announcement will fall back to the GamepadDetailText value.",
    "PendingDeployableManagerAction:PendingPlots": "The list of pending plots for this action",
    "FortControllerComponent_FakeKillRelevancy:DebugSupergroupPlayerStates": "The list of players that belong to my supergroup.  Replicated only if cheats are enabled, for debugging purposes.",
    "FortAthenaMutator_Cobalt:PendingTeleportingPlayers": "The list of players that have not teleported within the expected time",
    "FortNevadaVehicle:PreviouslyTargetedActors": "The list of previously targeted actors by the tractor beam",
    "UpdatingQuestsByObjectiveInfo:QuestList": "The list of quests associated with the objective type",
    "FortQuestMapPage:QuestList": "The list of quests for this map page, with node specific details",
    "FortObjectiveConversationTriggerInfo:ConversationList": "The list of random conversations that can play upon trigger",
    "FortObjectiveAvailableConversationTriggerInfo:ConversationList": "The list of random conversations that can play upon trigger. These can be removed when they hit maximum number of plays if not set to infinite.",
    "FortGameStateFrontEnd:RegisteredSTWComponents": "The list of registered STW components",
    "AthenaSeasonRewardLevelInfo:Rewards": "The list of rewards for this level",
    "FortDaySequenceActor:SkyLightCubeMaps": "The list of sky light cube maps to use on lower end platforms",
    "WrapPreviewGridActor:ListOfMeshesToSpawn": "The list of specific meshes to spawn (used for vehicles typically)",
    "CosmeticDeveloperSettings:ActiveCosmeticTagsToFake": "The list of tags to pretend are active when considering whether cosmetic items are allowed, e.g., pick a platform to pretend to be and test the cosmetics that are disallowed on it",
    "FortMissionPlacementItems:AdditionalWorldFoundations": "The list of world foundations that add additional levels to the world.",
    "MontageBeatSyncComponent:YoungerSiblings": "The list of younger BeatSync components",
    "EObjectiveGateRelation.RequiredClosed": "The listed gate must be closed for this to count as open",
    "EObjectiveGateRelation.RequiredOpposite": "The listed gate must be in a different state than this one to for this to count as open",
    "EObjectiveGateRelation.RequiredSame": "The listed gate must be in the same natural state as this gate for this to count as open\n       * Note: Both gates being opened or both being closed will count as open!",
    "EObjectiveGateRelation.RequiredOpen": "The listed gate must be open for this to count as open",
    "FortLiveBroadcastController": "The live Broadcast controller is intended to provide any additional functionality event broadcasters\nwill want on top of regular player live spectate functionality (e.g. we might want to have event\nspecific leaderboards, or sponsor overlays, or other additional stats etc)",
    "FortAthenaLoadout:LoadingScreen": "The loading screen background (this can be nullptr, in which case the default loading screen background for Athena will be used, as defined in the mission generator asset)",
    "CosmeticDeveloperSettings:CosmeticLoadoutOverrides": "The loadout overrides to use (any set values will win over the MCP profile in PIE, and will be usable even in -nomcp; these are not persisted)",
    "FortVolumeTimeOfDayComponent:DaySequenceOverride": "The local DaySequence that will override the World DaySequenceActor's day sequence.\n              This sequence supersedes any procedural settings in DaySequenceModifierData\n          ONLY USED WHEN THE GLOBAL TODM IS A DAYSEQUENCEACTOR",
    "BulletWhipTrackerSystemData:CachedPassByPawn": "The local player that we should calculate and play the whip relative to",
    "BuildingGameplayActorLaserGrid:LaserCapsuleCollisionRotationOffset": "The local rotation offset to adjust the laser collision orientation.",
    "FortCreativeDeviceButtonComponent:ButtonDescription": "The localized button description which is shown on the panel",
    "FortCreativeDeviceButtonComponent:ButtonLabel": "The localized button label which is shown on the button",
    "FortCreativeDeviceButtonComponent:ButtonName": "The localized button name which is shown on the panel",
    "FortGameplayMessageComponentBase:MessageDescription": "The localized message description",
    "FortGameplayMessageComponentBase:MessageName": "The localized message name",
    "BuildingContainer:SearchText": "The localized text that will display when we are in range to open the container  *",
    "SpecialEventCursorPawnComponent:CommonInputSubsystem": "The locally controlled player's input subsystem.  Only valid on owning client.",
    "FortAIPawn:CachedHitLocation": "The location of a hit trace from firing weapon. This is a fallback that is used if there was no damage done by the firing weapon. Used for VFX *",
    "BuildingGameplayActorSupplyDropRadio:ServerLocation": "The location of the actor on the server.\n     It is replicated to the client to help with location correction.",
    "CloneMachineRepData:Location": "The location of the clone machine for map/minimap icon",
    "DecoPlacementState:ExtraPieceLocation": "The location of the extra piece in the case where our regular piece is underground - only valid when WillTrapSpawnExtraPiece() is true",
    "FortStopSimulatingRepData:StopLocation": "The location of the stop",
    "CobaltCombatStormShieldDataEntry:StormShieldPOILocation": "The location of the storm shield's POI in the world, this is normally the center point of the POI",
    "FortAthenaMutator_RespawnLocation:LocationQuery": "The location query for the location to respawn the player. RECOMPILE AFTER CHANGING THIS",
    "FortAthenaMutator_SpawnLocationQuery:LocationQuery": "The location query for the location to respawn the player. RECOMPILE AFTER CHANGING THIS",
    "FortPoiVolume:LocationTags": "The location tags to use when a player intersects this volume",
    "FortPlayerState:PawnDeathLocation": "The location the pawn last died",
    "VehicleSpringInfo:ForceApplicationPoint": "The location to apply this spring force. Force is applied along Z axis. NONE means use SpringStart + SpringStartLocalOffset",
    "FortClientAnnouncementData_Conversation:ConversationDisplayPreference": "The location to display the talking head in the UI",
    "FortAthenaMutator_Uranium:RespawnLocation_DefenderTeam": "The location used by the DEFENDER team as their preferred respawn location. This is set/updated by UpdateRespawnLocations.\nOnly replicates when bCheatDrawRespawnLocations is enabled",
    "FortAthenaMutator_Uranium:RespawnLocation_PusherTeam": "The location used by the PUSHER team as their preferred respawn location. This is set/updated by UpdateRespawnLocations.\nOnly replicates when bCheatDrawRespawnLocations is enabled",
    "AthenaSkyCap:TargetData": "The location we are going to",
    "FortAIEncounterSpawnArea:UsedRiftLocations": "The locations of rifts that were spawned by this encounter but have since been destroyed.\n     Only used if EncounterSetting::bAvoidRepeatingRiftLocations is set to true.",
    "EncounterEnvironmentQueryInstance:QueryLocations": "The locations taken from the result of the query",
    "PlayerAugmentLockStatus": "The lock status of a player augment, in a blueprint readably structure. The concept of \"lockable\" is more general\nthan collectible. Augments can be locked/unlocked for other reasons that aren't currently implemented, e.g. social\naugment sharing, time based events, possession of items, etc.",
    "EFortItemType": "The logical/gameplay type for an item. Some of these types are also used by the backend as template types",
    "CatalogOffer:Description": "The long description of this store item",
    "MashAIPawnLootDropOverride:LootDropData": "The loot drop data the pawn with the matching tags will use.",
    "FortIronCityDifficultyData:LootLevel": "The loot level mapped to the account level",
    "CollectionLootSetData:LootSetNames": "The loot set name that will be used for a given tier",
    "FortMissionWeightedReward:LootTierGroup": "The loot tier group that represents these rewards",
    "McpLootResult:TierGroupName": "The loot tier group that was used to generate this loot in the form \"<Name>:<TierNum>\"",
    "ExpeditionSlot:LootTierGroup": "The loot tier group used to generate expeditions from for this slot",
    "FortTierCollectionLayoutOutput:StartTierLootTierGroups": "The loot tier groups given to the players at the start of a tier",
    "FortTierCollectionLayoutOutput:WaveCompleteLootTierGroups": "The loot tier groups given to the players at the successful comletion of a wave",
    "CraftingFormula:ResultLootTierKey": "The loot tier key we roll to pick the item(s) crafted",
    "BuildingContainer:ContainerLootTierKey": "The loot tier selected at runtime, based on the SearchLootTierGroup and QuotaLevel, and assigned to this object. Server Only.",
    "CraftingObjectComponent:OverCraftingLootTierKey": "The loot tier to pick the over crafting results from",
    "SpecialEventAudioAnalysisBaseComponent:LoudnessNRT": "The loudness NRT, if any, to use to drive behavior",
    "DeploymentConsoleComponent:TraceForGroundEnd": "The low elevation to stop tracing for ground.",
    "AimingCircleSettings:MinDistanceForTimeBetweenHits": "The lower value of the distance range that defines how much time it will take between hits.",
    "DigestedAimingCircleSettings:MinDistanceForTimeBetweenHits": "The lower value of the distance range that defines how much time it will take between hits.",
    "StormCapDamageThresholdInfo:ThresholdCeiling": "The lowest damage amount which is NOT taking damage.",
    "FortMissionAlertData:MinimumTileDifficulty": "The lowest difficulty a tile that receives this mission alert can have.",
    "FortAthenaMutator_TDM:MinGoalScore": "The lowest goal score allowed if EnableGoalScoreScaling is enabled.\n     Should be an integer great than 0.",
    "EEpicLeaderboardUpdateFunction.Min": "The lowest of the current or updated value is kept (e.g., best lap time)",
    "WeaponItemDefinitionDesignerData:DisassembleDurabilityDegradeMinLootPercent": "The lowest possible percent of the loot we will give you when you disassemble",
    "FortSupplyDropGamePhaseData:SupplyDropMinPlacementHeight": "The lowest world Z that the supply drop will try to place on.",
    "FortAthenaMapInfo:SupplyDropMinPlacementHeight": "The lowest world Z that the supply drop will try to place on. (ONLY used by Llamas!)",
    "FortPlayerScoreReport:LastScoreDeltaAmount": "The magnitude of score change responsible for the last change in experience.",
    "FortAthenaGoatVehicle:BounceForceBL": "The magnitude of the bounce force that should be applied to the back left",
    "GoaFInPersistent:BounceForceBL": "The magnitude of the bounce force that should be applied to the back left",
    "FortAthenaGoatVehicle:BounceForceBR": "The magnitude of the bounce force that should be applied to the back right",
    "GoaFInPersistent:BounceForceBR": "The magnitude of the bounce force that should be applied to the back right",
    "FortAthenaGoatVehicle:BounceForceFR": "The magnitude of the bounce force that should be applied to the front right",
    "GoaFInPersistent:BounceForceFR": "The magnitude of the bounce force that should be applied to the front right",
    "WindSplineComponent:ForwardForceMagnitude": "The magnitude of the force to apply in the direction of wind",
    "WindSplineComponent:ReverseForceMagnitude": "The magnitude of the force to apply in the reverse direction of wind",
    "ImpulseResponseData:ImpulseMultiplier": "The magnitude of the impulse allowed from said interaction",
    "InteractionImpulseData:ImpulseMagnitude": "The magnitude of the impulse allowed from said interaction",
    "FortDeathCauseInfo:DeathCauseTag": "The main tag that corresponds to the thing that caused the death.",
    "FortDeathCauseInfoVariant:DeathCauseTag": "The main tag that corresponds to the thing that caused the death.",
    "VkBuildVersion:Major": "The major version (can be a branch)",
    "HomebaseSquad:ManagerSynergyTag": "The manager slot synergy fit tag",
    "FortGameStateZone:CharacterCosmeticManager": "The manager that regulates how many cosmetics can be loaded. Client-only.",
    "DaySequenceBindingReferences:BindingIdToReferences": "The map from object binding ID to an array of references that pertain to that ID",
    "PlayspaceComponent_MeshNetworkEventResponder:ActiveEventsToTagsToApplyMap": "The map of gameplay tags to apply on the client/server for an active mesh network event",
    "FortGameModeAthena:LeaderboardStatsDefaultOssInputTypes": "The map of loot tier groups to redirected loot tier groups",
    "FortGameModeAthena:RedirectAthenaLootTierGroups": "The map of loot tier groups to redirected loot tier groups",
    "WindSplineComponent:ObjectTypeToMaxTargetCount": "The map of object types to their maximum target count. If the count is exceeded, the oldest target of the same type is removed",
    "FortControllerComponent_RechargeWeapons:WeaponToRechargeDataMap": "The map of weapon item guid to recharge data",
    "NavAgentData:BuildingActorHealthToNavAreaStrengthHandle": "The mapping of health of a building actor to nav area.",
    "NavAgentData:PlayerBuiltBuildingActorHealthToNavAreaStrengthHandle": "The mapping of health of a player built building actor to nav area.",
    "FortPlayerSurveyMcpDataRoot:Metadata": "The mapping of survey IDs to data for those surveys.",
    "FortWorldMarkerData:MarkedActor": "The marked actor, this actor may not be relevant to the client. For markers in the FFortWorldMarkerContainer,\nif it becomes relevant, it gets fixed up when it does become relevant.",
    "BuildingGameplayActorSpawnChip:ResurrectionChipMarkerID": "The marked id for this chip that plays only on friend clients",
    "FortWorldMarkerData:MarkerInstance": "The marker instance that was created for this marker data.",
    "FortGameState:MatchmakingLinkId": "The matchmaking link ID that this match was matchmade to.",
    "FortCreativeDiscoveryTestCohort:MMRegionAllowlist": "The matchmaking regions that this cohort is available for.",
    "FortCreativeDiscoveryTestCohort:MMRegionBlocklist": "The matchmaking regions that this cohort is not available for.",
    "FortCreativeDiscoveryContentPanel:MMRegionAllowlist": "The matchmaking regions that this panel is available on.",
    "FortCreativeDiscoveryContentPanel:MMRegionBlocklist": "The matchmaking regions that this panel is not available on.",
    "BuildingLayoutRequirement:LayoutDisplayMID": "The material applied to the preview marker to show it in schematic/blueprint form",
    "FortPlayerController:BuildPreviewMarkerMIDs": "The material applied to the preview marker to show it in schematic/blueprint form",
    "RequestStyleParams:MaterialInstanceDynamic": "The material instance to be affected",
    "FortMaterialStyleApplyParams:MaterialInstanceDynamic": "The material instance to be affected by the material style",
    "FortTimeOfDayManager:MoonMaterialOverrides": "The material overrides for the moon mesh during the night phase",
    "FortTimeOfDayManager:SunMaterialOverrides": "The material overrides for the sun mesh during the morning/day/evening phases",
    "FortAthenaMutator_Cobalt:SafeZoneMaterialCollection": "The material parameter collection that drives save zone materials",
    "FortSafeZoneIndicator:MaterialCollection": "The material parameter collection that drives save zone materials",
    "FortControllerComponent_MapDiscoverability:DiscoverabilityMPC": "The material parameter collection that'll be driven by discovery",
    "FortSafeZoneIndicator:SuperStormActiveName": "The material parameter name for fading the Mega storm in/out.",
    "FortAthenaMutator_Cobalt:SafeZoneLocMaterialParamName": "The material parameter name for the safe zone loc",
    "FortSafeZoneIndicator:SafeZoneLocName": "The material parameter name for the safe zone loc",
    "FortAthenaMutator_Cobalt:SafeZoneScaleMaterialParamName": "The material parameter name for the safe zone scale",
    "FortSafeZoneIndicator:SafeZoneScaleName": "The material parameter name for the safe zone scale",
    "FortTimeOfDayManager:StarMapMID": "The material used for the stars",
    "FortTimeOfDayManager:ActiveSkyBoxMat": "The material used in the sky",
    "RadiusTrackingInitializer:CircleDrawingMaterial": "The material used to draw the radius tracker circle on the map. If null, the material defined on the game state will be used.",
    "FortCampaignJackalVehicle:AggroRangeOverride": "The max AI aggro range in Cm",
    "SpringConfig:MaxAccelChange": "The max acceleration change this spring can apply",
    "VehicleSpringInfo:MaxAccelChange": "The max acceleration change this spring can apply",
    "AthenaAISettings:MaxPerceptualStimuliAge": "The max age of the stimili for senses used the perceptual system, note targets can still be maintained longer than this. For a value of 0 FAIStimulus::NeverHappenedAge will be used",
    "FortWeaponRanged:MaxTargetingAimAdjustPerSecond": "The max aim rotation adjustment per frame when in transition of ADS in/out, if using new calculation",
    "AmmoItemState:AmmoMaxCount": "The max amount of ammo type this player can hold",
    "CreativeRoyaleIslandPlayspace:IslandMemoryBudget": "The max amount of memory in bytes that is allowed to be loaded at a time on the client\nPrevents placement of devices when past this value",
    "FortProjectileMovementComponent_FloorSnapped:MaxPenetrationDepthAllowedForSliding": "The max amount of penetration depth when colliding with a surface to keep sliding along a surface before aborting simulation",
    "FortProjectileMoveComp_Slider:SuspensionTensionMax": "The max amount of tension that can be built up.\n     Note: this is in tension units NOT speed units, 1 unit of tension will be equal to SuspensionTensionToSpeedScalar units of speed.\n     Set to 0.0 for no limit.",
    "GlobalWeatherData:BlendInMax": "The max blend in time for this weather event",
    "GlobalWeatherData:BlendOutMax": "The max blend out time for this weather event",
    "GlobalWeatherData:EnableChanceMax": "The max chance we will enable this weather event for the duration of the game",
    "GlobalWeatherData:ChanceMax": "The max chance we will pick this weather event",
    "GlobalWeatherData:ChanceToRemainActiveMax": "The max cooldown for this event before attempting to apply it again (0 will keep it running instead of ending)",
    "GlobalWeatherData:CooldownMax": "The max cooldown for this event before attempting to apply it again (0 will keep it running instead of ending)",
    "PlayspaceComponent_PlayerSpawning:SpawnDelayMax": "The max delay before we spawn the user",
    "FortDamageNumbersActor:MaxScoreNumberDistance": "The max distance from the player that a score event should display a score number in the world",
    "FortGravityGunHolder:MaxDistanceBeforeDetach": "The max distance that the held object can get from the goal location before we auto detach it.",
    "FortGameplayCueNotifyLoop_AbductionWarning:MaxDistance": "The max distance the niagara fx should go. Used when setting the fx variable value.",
    "FortMotorcycleVehicle:DoorBashForwardDistanceMax": "The max distance to check for a door to bash.",
    "FortFocusedBuildingInfo:AttachedTrapMaxDurability": "The max durability of the trap that is attached to the focused building. 0 for no trap or a trap without durability.",
    "GlobalWeatherData:DurationMax": "The max duration of the weather event",
    "AimingCircleSettings:MaxCursorTrackingFrequency": "The max frequency (in seconds) at which the aim position will track the cursor position. This is to add some noise on the aim position that might otherwise look too smooth/unnatural. (e.g. If set to 0, the aim position will follow the aiming circle in a smooth motion / Is set to 0.5, the aim position will jump around on the aiming circle every 0.5 seconds.)",
    "DigestedAimingCircleSettings:MaxCursorTrackingFrequency": "The max frequency (in seconds) at which the aim position will track the cursor position. This is to add some noise on the aim position that might otherwise look too smooth/unnatural. (e.g. If set to 0, the aim position will follow the aiming circle in a smooth motion / Is set to 0.5, the aim position will jump around on the aiming circle every 0.5 seconds.)",
    "DigestedAimingCircleSettings:MaxCursorUpdateInterval": "The max frequency (in seconds) at which the fictional target(cursor) will change speed and direction.",
    "GlobalWeatherData:FrequencyMax": "The max frequency we will check this weather event",
    "AimingCircleSettings:MaxCursorUpdateInterval": "The max frequency(in seconds) at which the fictional target (cursor) will change speed and direction.",
    "AimingCircleSettings:KillingBlowGracePeriodAtMaxRange": "The max grace period (in seconds) before the bot will hit again when it detects that its next hit will kill the target. (The max range used is MaxDistanceForTimeBetweenHits.)",
    "DigestedAimingCircleSettings:KillingBlowGracePeriodAtMaxRange": "The max grace period (in seconds) before the bot will hit again when it detects that its next hit will kill the target. (The max range used is MaxDistanceForTimeBetweenHits.)",
    "AthenaBuildingFoundationObjective:MaxHealth": "The max health of all the actors",
    "FortFocusedBuildingInfo:MaxHealth": "The max health of the focused building",
    "SpecialActorRepData:MaxHealth": "The max health of this actor",
    "HurdleInputConfig:Phase2_Floor_MaxHeightForHurlde": "The max height we are looking for the front corner to be a valid hurdle obstacle",
    "HurdleInputConfigCache:Phase2_Floor_MaxHeightForHurlde": "The max height we are looking for the front corner to be a valid hurdle obstacle",
    "SpecialEventRewindComponent:MaxRecordingDuration": "The max length of a recording, in seconds.\nAfter this length is reached, the oldest frame is overwritten by the newest frame.\nWe pre-allocate our frame array with size MaxRecordingDuration * <Local/Replicated>RecordingFPS.",
    "RoundTechDataCache:MaxCalandarLevel": "The max level attainable at this time based on calandar",
    "FortAIEncounterSpawnGroupCap:MaxSpawnGroupNumberCap": "The max limit on the number of spawn groups in this category that can be active at once during an encounter",
    "FortAIDirector:MaxAIDespawnedPerFrame": "The max number of actors that can be despawned in a frame",
    "FortAIDirector:DespawnAllAIMaxAIDespawnedPerFrame": "The max number of actors that can be despawned in a frame when specifically despawning all AI. If this is <= 0, it will despawn them all on the next update",
    "FortAIDirector:MaxAISpawnedPerFrame": "The max number of actors that can be spawned in a frame",
    "FortAthenaMutator_SafeZoneOrderOptimize:NumRouteOrdersToChooseFrom": "The max number of shortest route orders we should keep track of, over the course of processing the data.\nWe will randomly choose from these at the end.",
    "FortProjectileTrajectory:MaxSplineMeshesToCreate": "The max number of spline components that can be created to represent a trajectory.",
    "ShielderCollisionHelperComponent:PitchMax": "The max pitch to be applied from the player aim rotation.",
    "SpecialActorRepData:MaxShield": "The max shield of this actor",
    "PhysicsSimValidateObject:MaxSimSizeAllowed": "The max simulation size we accept for the physics object",
    "DigestedAimingCircleSettings:MaxCursorRotationSpeed": "The max speed (in degrees/second) at which the fictional target(cursor) will move on the circle around the target.",
    "AimingCircleSettings:MaxCursorRotationSpeed": "The max speed at which the fictional target (cursor) will move on the circle around the target.",
    "OverrideMovementCurveData:SpeedCurve": "The max speed coefficient as a function of the normalized input deflection. By default this is linear.",
    "HeldObjectThrownData:MaxSpeed": "The max speed the held object will travel when thrown",
    "FortMotorcycleVehicle:DoorBashMaxSpeed": "The max speed to be considered when scaling the max forward distance. This is used to make the alpha from current speed, ie (CurrentSpeed / DoorBashMaxSpeed) * DoorBashForwardDistanceMax.",
    "FortGravityGunHolder:MaxHoldTimeForDetach": "The max time that we've been holding to object to be considered for MaxDistanceBeforeDetach.",
    "FortCharacterMovementMutatorComponent:BuffetFlyingMaxPitchDegrees": "The max world pitch (both up and down) that our velocity can reach",
    "CustomTickComonentQualitySettings:MaxFramesToSkipBetweenCustomTicks": "The maximum NumFramesToSkipBetweenCustomTicks to use for this component",
    "SpecialEventStatDefinition:Max": "The maximum Value we can reach",
    "HurdleInputConfig:Phase4_HurdleOnZTolerance": "The maximum Z distance between the first hurdle corner to top for a hurdle on",
    "HurdleInputConfigCache:Phase4_HurdleOnZTolerance": "The maximum Z distance between the first hurdle corner to top for a hurdle on",
    "FortAnimNode_SlopeWarping:MaxStepHeight": "The maximum adjustment distance allowed in a frame to match changes in the floor distance.",
    "FortWeaponRanged:AimPitchMax": "The maximum aim pitch allowed.\n     Limits how high a shot can be fired. Could be used for a mortar style weapon and/or and can prevent shots from being fired straight up or even backwards.\n     This can ensure that projectiles are fired with a heading that is near the camera's/muzzle's forward heading.\n     (Common situations where a projectile's heading is far from expectations: 1) If the weapon is aimed very near straight up/down where a small amount of spread can radically change the projectile heading, or 2) Where ProjectilePitchOffset can cause the projectile to be fired at a pitch more than 90 degrees from 0 which essentially reverses the heading.)\n     For projectile weapons: when aim pitch is clamped ProjectilePitchOffset is taken into account before clamping.\n     Set >= 180 to disable.\n     Data validation will fail is NOT AimPitchMin <= AimPitchMax.",
    "FortActorComponent_MultiInteract:MaxInteractingActorCount": "The maximum allowed interacting actor count for this actor, multiplier would clamp to this level",
    "VkModuleBinaries:ManifestDownloadSizeKb": "The maximum amount BPS will download using the manifest. Should be approximately <= ManifestDiskSizeKb as long as ManifestDiskSizeKb is not very small.",
    "FlightParams:ControlFrameMaxUpNudge": "The maximum amount by which the up vector ought to be nudged when the\n              aircraft is upsidedown.",
    "FindActorByClassData:MaxToFind": "The maximum amount of actors to find.",
    "OctopusInPersistent:MaxVerticalBoostForce": "The maximum amount of force to apply when boosting vertically.",
    "BuildingActorMinimalReplicationProxy:MaxHealth": "The maximum amount of health this building can have compressed from a float to 16 bits.",
    "MissionGenerationInfo:MaxMissionsAllowed": "The maximum amount of missions allowed to match this query.  Beyond that number, missions matching the query are prohibited.  If negative, it means there is no cap on the total number of missions allowed.",
    "TileGroupInfo:MaxTiles": "The maximum amount of tiles this group can place.",
    "EQSActorSpawnerData:TimeBetweenSpawns_Max": "The maximum amount of time after the Actor Spawn spawns an actor before it may spawn another actor",
    "EQSActorSpawnerData:TimeBetweenSpawns_Max_BySafeZoneIndex": "The maximum amount of time after the EQS Actor Spawn spawns an actor before it may spawn another actor (if indexing by safezone is enabled.)\n     Curve table values are keyed by the SafeZoneIndex",
    "FortMantisTechniqueData:MaxInputHoldDuration": "The maximum amount of time the input may be held in order to trigger this technique if the ActivationTimingType is\n              Released. Does not apply if the ActivationTimingType is Pressed or if the value is below zero.",
    "FortSkyTube:MagnetMaxReductionFromSteering": "The maximum amount that the magnet force can be reduced by steering out from the tangent.\nThis reduction increases from 0 to 1 based on the steering angle (0 when not steering, 1 when steering perpendicular to the spline)",
    "WindSplineComponent:InwardForceMaxReductionFromSteering": "The maximum amount that the magnet force can be reduced by steering out from the tangent.\nThis reduction increases from 0 to 1 based on the steering angle (0 when not steering, 1 when steering perpendicular to the spline)",
    "FortBulletPatternEntryData:MaxRotationVariance": "The maximum amount the RelativeRotation should vary per shot. Only pitch and yaw are used, roll is ignored.",
    "FortWeaponRangedDualSwing:MaximumSwingHitWallAngle": "The maximum angle at which the player can hit something while attached for it to be considered a wall.",
    "FlightParams:ControlFrameRollUpMaxVelocity": "The maximum angular velocity that the control frame's roll-up vector can\n              possibly undergo.",
    "UserOptionDefinitionFloatMetaData:MaxValue": "The maximum clamp value of this option.\n@note This data is synced from the \"ClampMax\" meta-data value of the property, so should be set there (called \"Value Range\" in the BP editor UI).",
    "UserOptionDefinitionIntMetaData:MaxValue": "The maximum clamp value of this option.\n@note This data is synced from the \"ClampMax\" meta-data value of the property, so should be set there (called \"Value Range\" in the BP editor UI).",
    "FortCollectionBookStat:MaxBookXpLevelAchieved": "The maximum collection book reward level the player has achieved and claimed",
    "CombatEventData:MaxHeatContribution": "The maximum contribution to the total combat heat for this event",
    "MeleeWeaponSkill:MaxCooldownDelayBetweenMeleeAttackAttempts": "The maximum cooldown delay before which the ai attempts their next melee attack.",
    "BuildingRift:MaxSpawnDelay": "The maximum delay for how long between when an AI is chosen to spawn at this rift and when it will actually try to spawn.",
    "FortThreatVisualsManager:CloudMaxVerticalDelta": "The maximum delta from desired cloud altitude to actual cloud altitude (as an absolute value) used to determine what speed the cloud should move.",
    "FortWeaponRanged:MaxMuzzleAimCameraAimHeadingAngleDifferenceDegrees": "The maximum difference in heading angle allowed between the muzzle aim direction and the camera aim direction.\n     The muzzle aim heading will be clamped to be within this range.\n     This feature is useful for making sure projectiles / ray trace bullets are fired straight down the camera even if the player is aiming at something very close to the screen while the muzzle is far from the camera center.\n     Set to 180 to disable.\n     Set to 0 to always use the Camera Aim heading for the Muzzle Aim heading.\n     The muzzle aim direction's Z magnitude will NOT be affected by this setting.",
    "FortAthenaMutator_SynchronizedTeleport:RespawnLocationTolerance": "The maximum distance a respawning player can respawn from their teleport point without requiring a safe teleport to their teleport point after respawning",
    "FortWindManager:AudioWindMaxResponderDistance": "The maximum distance a wind responder can be from the camera and still be considered to be the active audio wind responder.",
    "FortAIPawn:BuildingHitMaxDistanceToHitLocation": "The maximum distance between the AI pawn and the hit location on the building where building hit effects will be visible.",
    "FortAIPawn:BuildingHitMaxDistanceToPlayer": "The maximum distance between the player and the AI pawn where building hit effects will be visible.",
    "FortMiniMapComponent_TagsAndDistance:MapViewableDistance": "The maximum distance from the component's actor to the player actor to show the indicator on the big map.\n     < 0 will always show the indicator.\n     == 0 will always hide the indicator.\n     > 0 will show the indicator if the player is within that distance.",
    "FortMiniMapComponent_TagsAndDistance:MiniMapViewableDistance": "The maximum distance from the component's actor to the player actor to show the indicator on the mini-map in the HUD.\n     < 0 will always show the indicator.\n     == 0 will always hide the indicator.\n     > 0 will show the indicator if the player is within that distance.",
    "HurdleInputConfig:ForwardCastDistance_Phase1": "The maximum distance from the obstacle to start the Hurdle",
    "HurdleInputConfigCache:ForwardCastDistance_Phase1": "The maximum distance from the obstacle to start the Hurdle",
    "HurdleInputConfig:ForwardCastDistance_Phase1_ManualHurdle": "The maximum distance from the obstacle to start the Hurdle from a manual hurdle",
    "HurdleInputConfigCache:ForwardCastDistance_Phase1_ManualHurdle": "The maximum distance from the obstacle to start the Hurdle from a manual hurdle",
    "HurdleInputConfig:ForwardCastDistance_Phase1_HurdleFromJog": "The maximum distance from the obstacle to start the Hurdle from jog",
    "HurdleInputConfigCache:ForwardCastDistance_Phase1_HurdleFromJog": "The maximum distance from the obstacle to start the Hurdle from jog",
    "DeploymentConsoleComponent:MaxRespawnRadius": "The maximum distance from the safe zone center that players can spawn from.",
    "FortAnimNode_SlopeWarping:PullPelvisDownMaxDistance": "The maximum distance the Limb Root can be pulled down to avoid limb overextension. Ignored if <= 0.f",
    "FortMissionUIActorHandle:MaxVisibleDistance": "The maximum distance the UI indicator is visible at",
    "AIPawnSignificanceBasedMovementUpdateBucket:MaxDistanceFromPlayer": "The maximum distance to the player a pawn can be for it to be in this bucket.",
    "FabricSignificanceBasedUpdateBucket:MaxDistanceFromPlayer": "The maximum distance to the player a pawn can be for it to be in this bucket.",
    "HurdleInputConfig:MaxAllowedFallDistance": "The maximum distance we will allow a character to fall from their starting height at the end of the hurdle. If there is no floor within this height, block hurdle.",
    "HurdleInputConfigCache:MaxAllowedFallDistance": "The maximum distance we will allow a character to fall from their starting height at the end of the hurdle. If there is no floor within this height, block hurdle.",
    "DigestedEvasiveManeuverSkillSettingsSpecialization:MaxDuration": "The maximum duration that this specialization can be used for once it was chosen. (Leave at 0 if you don't want a max duration).",
    "EvasiveManeuverSkillSettingsSpecialization:MaxDuration": "The maximum duration that this specialization can be used from the first time it was chosen. (-1 = infinite duration).",
    "FortCurieGrassFireReplicator:MaxGrassGridIndex": "The maximum grass grid index that is managed by the replicator",
    "FortWeaponRangedDualSwing:MaximumHeightToStartSkidding": "The maximum height the player can be from the ground in order to start skidding while swinging.",
    "FortAthenaCompassIcon:DistanceForScalingMultiplier_Max": "The maximum icon scale size multiplier based on MaxPawnDistanceForScaling\nUsed only when MaxPawnDistanceForScaling > 0.f",
    "AlterationSlot:SlotInitMax": "The maximum initial slot rarity.",
    "FortCurieElementDefinition:MaxIntensity": "The maximum intensity for the element",
    "TempestLightningComponent:LightningBoltIntervalMax": "The maximum interval between lightning bolts in the same batch",
    "TempestLightningComponent:LightningFrequencyMax": "The maximum interval in seconds at which we choose new lightning bolt locations",
    "UserOptionDefinitionTextMetaData:ValueLengthLimit": "The maximum length of the value (in characters)",
    "UserOptionDefinitionStringMetaData:ValueLengthLimit": "The maximum length of the value (in characters), up to 150.",
    "AthenaLevelInfo:MaxLevel": "The maximum level in the current season",
    "AthenaLevelInfo:BookMaxLevel": "The maximum level in the current season battle book",
    "WindSplineComponent:FieldMaxMagnitudeAfterFalloff": "The maximum magnitude of the physics field after the falloff is applied",
    "VkProjectLimitsDoc:PublishingMemorySize": "The maximum memory usage in bytes a game created for the FN platform using UEFN (or Creative) is allowed to take.\nThis value is given after a \"memory check\" is launched by creators from UEFN, and performs a flythrough in `VK_Edit`.",
    "EQSActorSpawnerData:TotalActorsToSpawn_Max_BySafeZoneIndex": "The maximum number of actors the Actor Spawner will attempt to spawn during the current SafeZone Phase (if indexing by safezone is enabled.)\n     Set TotalActorsToSpawn_Min or TotalActorsToSpawn_Max to less than 0 to spawn until another spawn sequence is started, or if SafeZoneIndexToSpawnIn == -1 until the game ends(be careful using this feature, make sure spawn times are spaced out and maybe add a removal EQS).\n     Curve table values are keyed by the SafeZoneIndex",
    "EQSActorSpawnerData:TotalActorsToSpawn_Max": "The maximum number of actors the EQS Actor Spawner will attempt to spawn  when triggered.\n     Set TotalActorsToSpawn_Min or TotalActorsToSpawn_Max to less than 0 to spawn until another spawn sequence is started, or until the game ends (be careful using this feature, make sure spawn times are spaced out and maybe add a removal EQS).",
    "FortLinkToActorComponent:NumActorsToLinkMax": "The maximum number of actors to link for this individual component's use case.",
    "FortCurieSettings:ElementOverlapMaximumTestActorsPerFrame": "The maximum number of actors to test overlaps for fire per-frame.",
    "VkProjectLimitsDoc:ModuleUploadConcurrencyLimit": "The maximum number of concurrent upload jobs.",
    "FortQuestPackInfo:DaysToKeepClaimedQuests": "The maximum number of days to allow quests to be saved after they are claimed. Keeping the old daily quests prevents us from issuing duplicates. Defaults to 0 for no limit. This rule is only run on daily quest login.",
    "FortQuestPackInfo:DaysToKeepCompletedQuests": "The maximum number of days to allow quests to go unclaimed. Defaults to 0 for no limit. This rule is only run on daily quest login.",
    "FortGeneratedEncounterProfile:DifficultyOptionPointsAvailableAtGeneration": "The maximum number of difficulty option points that can be used to generate this encounter",
    "VkProjectLimitsDoc:FileCount": "The maximum number of files a project can hold.",
    "UserOptionDefinitionFloatMetaData:MaxFractionalDigits": "The maximum number of fractional digits to show when displaying values for this option.",
    "TempestLightningComponent:LightningBoltsMax": "The maximum number of lightning bolts to spawn per batch",
    "FabricSignificanceBasedUpdateBucket:MaxObjectsInBucket": "The maximum number of objects to store in the current bucket.",
    "SkyfireVaultOrbSpawner:OrbCountLimitsForRewardTiers": "The maximum number of orbs allowed at once, separated by loot reward tiers and the percent of active players that have earned that tier. This overrides\n    OrbCountLimitsForPlayerCounts if and only if it would decrease the max orb count. The LimitValue in each FOrbCountLimit is a percentage of players\n    that need to have earned that loot reward tier in order for the MaximumOrbCount to be used. Of the FOrbCountLimits whose LimitValue is lower than\n    the percent of players that have earned the corresponding loot reward tier, the one that corresponds to the highest loot level is the one that is used.",
    "SkyfireVaultOrbSpawner:OrbCountLimitsForPlayerCounts": "The maximum number of orbs allowed at once, separated by the number of players in the mothership. The LimitValue in each FOrbCountLimit is used as a\n    minimum player count for the MaximumOrbCount to be used. The FOrbCountLimit with the highest LimitValue that is still below the number of players\n    in the mothership is the one that is used.",
    "FortCreativeDiscoveryContentPanel:NumPages": "The maximum number of pages may support.",
    "FortAthenaMutator_PerkSystemMutator:MaxPerksToUnlock": "The maximum number of perks that can be unlocked at once",
    "FortAthenaMutator_DadBro:MaxPickupsToDespawnAtOnce": "The maximum number of pickups to despawn at once with the AoE.",
    "AthenaDeveloperSettings:AthenaMaxPlayerCount": "The maximum number of players allowed in the match",
    "AthenaDeveloperSettings:AthenaSquadSizes": "The maximum number of players allowed on a single squad",
    "AthenaDeveloperSettings:AthenaMaxTeamSize": "The maximum number of players allowed on a single team (e.g., 1/2/4 for solo/duo/squad)",
    "FortMinigameSettingsBuilding:Matchmaking_MaxTeamSize": "The maximum number of players allowed per team. If this is set to -1 it means that the Game will handle team maximums dynamically.",
    "SkyfireVaultOrbSpawner:MaximumPlayersAllowedInMothership": "The maximum number of players that are allowed in the mothership at any one time.",
    "FortObjectiveConversation:MaxPlays": "The maximum number of plays that this conversation can have. 0 is infinite",
    "FortQuestPackInfo:MaxUnclaimedQuests": "The maximum number of quests to allow remaining unclaimed. Defaults to 0 for no limit. This rule is only run on daily quest login.",
    "FortAbilityTargetSelection:MaxTargets": "The maximum number of targets to return, -1 = infinite",
    "ConditionalFoundationQuotaTier:MaxFoundations": "The maximum number of this foundation class to choose in this tier.",
    "FortMantisTechniqueData:MaxConsecutiveBranchesToSelf": "The maximum number of times this technique may branch to itself if it's setup to be able to do so. If no branch is set up from\n    this technique to itself, this value is not used. If it's below zero, there is no limit to how many times this technique will\n    be able to be branched to itself.",
    "FortVoteConfig:MaxVotesAllowedPerPlayer": "The maximum number of votes a player can cast. If all players have reached the maximum number of votes casted, the server will automatically end the vote.",
    "BuildingGameplayActorSpawnDetails:MaxNumToSpawnPerPhase": "The maximum number these bgas to spawn (over time) when a phase starts (index into this table row is the phase #)",
    "FortAthenaMutator_Cobalt:StormShieldShrinkLocationMaxOffset": "The maximum offset from the POI location at which the shrinking storm should have its final post shrink location",
    "OrbCountLimit:MaximumOrbCount": "The maximum orb count that should be used if the limit test passes.",
    "FortRequirementsInfo:MaxPartyPowerRating": "The maximum party power rating allowed.  If zero or negative, it will be considered that there is no maximum limit.",
    "FortAthenaMutator_OverrideValetVehicleParameters:MaxInitialVehicleFuelPercent": "The maximum percent of fuel valet vehicles will start with",
    "DeploymentConsoleComponent:RadiusPercentForRespawnMax": "The maximum percent of the safe zone used for player spawning.\n     This value is clamped by MaxRespawnRadius.",
    "FortInGameMapManager:MaxPercentageMapExplored": "The maximum percentage of the map we ever expect to be explored.  At this raw value, the map will be considered 'fully explored', so we normalize the exploration percentage to this value.",
    "FortRequirementsInfo:MaxPersonalPowerRating": "The maximum personal power rating allowed.  If zero or negative, it will be considered that there is no maximum limit.",
    "FortWorldSettings:MaxCullDistance": "The maximum possible cull distance",
    "BuildingSMActorClassData:MaximumQuotaLevelBound": "The maximum quota level this actor is allowed to spawn at. If set to NumLevels, will be treated as whatever the highest supported quota level is in the game",
    "FindActorByClassData:MaxRadius": "The maximum radius to search.",
    "RecoilPart:Rotation": "The maximum rotation to be applied by this recoil part.",
    "UserOptionDefinitionFloatMetaData:MaxSliderValue": "The maximum slider value of this option.\n@note This data is synced from the \"UIMax\" meta-data value of the property, so should be set there (called \"Slider Range\" in the BP editor UI), or will use MaxValue if unset.",
    "UserOptionDefinitionIntMetaData:MaxSliderValue": "The maximum slider value of this option.\n@note This data is synced from the \"UIMax\" meta-data value of the property, so should be set there (called \"Slider Range\" in the BP editor UI), or will use MaxValue if unset.",
    "FortThreatVisualsManager:CloudMaxSpeed": "The maximum speed (in UU/s) that the clouds will move up/down to reach their desired altitude.  The actual velocity is found by a smooth lerp from 0 delta up to CloudMaxVerticalDelta.",
    "RootMotionSource_RocketRam:MaxSpeed": "The maximum speed the character is able to move. The actual speed is calculated using the elapsed time of the root motion source\n              and the SpeedCurve value at that time.",
    "FortCurieFXSettings:MaxLandscapeFireSphericalBounds": "The maximum spherical bounds for the grass fires",
    "FortPawnComponent_GrindRail:MaxAllowedDeclineSplinePitch": "The maximum spline decline in degrees that the character will remain vertically oriented. Beyond this decline the character will begin align aligning to the spline normal.",
    "FortPawnComponent_GrindRail:MaxAllowedShootingSplinePitch": "The maximum spline decline in degrees that the character will remain vertically oriented. Beyond this decline the character will begin align aligning to the spline normal.",
    "FortPawnComponent_GrindRail:MaxAllowedInclineSplinePitch": "The maximum spline incline in degrees that the character will remain vertically oriented. Beyond this incline the character will begin align aligning to the spline normal.",
    "FortScoutDronePickupManager:MaxPickupSpread": "The maximum spread that we'll toss objects in when dropping pickups. This just represents half of the spread angle!",
    "FortAthenaMutator_Cobalt:StormShieldRadiusMultiplierPerPlayer": "The maximum storm shield size is calculated by multiplying the StormShieldRadiusMultiplier with the max number of players in team for this mode (set in playlist)",
    "WindSplineComponent:PawnSkydivingTimeLimit": "The maximum time a pawn selected based on PawnSkydivingTimeLimitQuery can spend skydiving in the air",
    "FortCurieSettings:ElementOverlapMaximumDelayBetweenChecks": "The maximum time delay allowed between checks for a given actor.",
    "FortAthenaMutator_Cobalt:MaxSupplyDropSpawnTime": "The maximum time in seconds it takes for a new supply drop to spawn",
    "AimingCircleSettings:MaxTimeBetweenHitsAtMaxRange": "The maximum time it should take for the aiming circle to go from its maximum opening to its minimum opening after a successful hit on a target that is at maximum range (MaxDistanceForTimeBetweenHits)",
    "DigestedAimingCircleSettings:MaxTimeBetweenHitsAtMaxRange": "The maximum time it should take for the aiming circle to go from its maximum opening to its minimum opening after a successful hit on a target that is at maximum range (MaxDistanceForTimeBetweenHits)",
    "AimingCircleSettings:MaxTimeBetweenHitsAtMinRange": "The maximum time it should take for the aiming circle to go from its maximum opening to its minimum opening after a successful hit on a target that is at minimum range (MinDistanceForTimeBetweenHits)",
    "DigestedAimingCircleSettings:MaxTimeBetweenHitsAtMinRange": "The maximum time it should take for the aiming circle to go from its maximum opening to its minimum opening after a successful hit on a target that is at minimum range (MinDistanceForTimeBetweenHits)",
    "CombatManagerComponentSTW:MaximumTotalHeat": "The maximum total heat possible",
    "RecoilPart:Translation": "The maximum translation to be applied by this recoil part.",
    "SpatialMetricProperties:ThresholdValue": "The maximum value for this metric's spatial values to consider them within the expected range.",
    "SpatialMetricProperties:MaxValue": "The maximum value for this metric's spatial values.",
    "FortGameplayAttributeData:Maximum": "The maximum value that this attribute is allowed to be",
    "FabricUserOption:Max": "The maximum value when using a lerp",
    "FortCurieMaterialDefinition:MaxWaterContent": "The maximum water content for the material",
    "FortGetMcpTimeForPlayerNotification:McpTime": "The mcp time returned from GetMcpTimeForPlayer",
    "EWarEffortFundingStationType.Tower": "The mech",
    "StreamingRadioManagerNative:MediaPlayer": "The media player.",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:MegaStormManagerClass": "The mega storm manager class to spawn",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:MegaStormManager": "The mega storm manager instance",
    "VkTeamMembershipResult:MembershipId": "The membership id",
    "EpicArtApp:Section": "The menu section to place this application under",
    "UserOptionDefinition:MenuListType": "The menu type this option should be displayed on.",
    "FortLiquidGunProjectile:AttachComponent": "The mesh (eg of a player or wildlife) that the part of the liquid ribbon spline represented by this projectile is attached/stuck to.",
    "AthenaHoldingArea:MeshComp": "The mesh body of the holding area actor.",
    "FortHeldObjectComponent:ReferenceMeshComponent": "The mesh component assigned by the held object to this held object component",
    "ECharacterPartAttachmentTargetType.SkeletalMeshForAssociatedPlayerPawnPartType": "The mesh component from the associated player pawn for the right part type.\nUses UCustomCharacterPartModifier.GetSkeletalMeshForAssociatedPlayerPawnPartType() to resolve",
    "FortAthenaExitCraft:MeshComponent": "The mesh that represents the car's body and wheels",
    "FortAthenaSimpleCar:MeshComponent": "The mesh that represents the car's body and wheels",
    "CreativeEditOnlyMeshComponent:EditMesh": "The mesh to display while in Edit mode.",
    "WeaponModStaticMeshData:ModMesh": "The mesh to spawn.",
    "FortConstructorBASE:BASEEffectPatterns": "The mesh to use for every pattern.",
    "WorldMapPinManager:WorldMapMesh": "The mesh to use for the background to place pins on",
    "FortTimeOfDayManager:MoonMesh": "The mesh to use for the moon during the night phase",
    "FortTimeOfDayManager:SunMesh": "The mesh to use for the sun during morning/day/evening phases",
    "FortAthenaMutator_Pow:RespawnsWillBeOffMessage": "The message to dispatch as we start counting down the amount of time left to respawn in.",
    "FortAthenaMutator_Pow:RespawningOffMessage": "The message to dispatch when no more respawning is allowed.",
    "FortDeathCauseInfo:EliminatedMessages": "The message(s) to display if the cause of death is another player eliminating them. If more than one message then we'll randomly pick one.",
    "FortDeathCauseInfoVariant:EliminatedMessages": "The message(s) to display if the cause of death is another player eliminating them. If more than one message then we'll randomly pick one.",
    "FortDeathCauseInfo:EliminatedDBNOMessages": "The message(s) to display if the cause of death is another player putting them into DBNO. If more than one message then we'll randomly pick one.",
    "FortDeathCauseInfoVariant:EliminatedDBNOMessages": "The message(s) to display if the cause of death is another player putting them into DBNO. If more than one message then we'll randomly pick one.",
    "FortDeathCauseInfo:SelfInflictedDBNOMessages": "The message(s) to display if the cause of death is self inflicted and causes DBNO. If more than one message then we'll randomly pick one.",
    "FortDeathCauseInfoVariant:SelfInflictedDBNOMessages": "The message(s) to display if the cause of death is self inflicted and causes DBNO. If more than one message then we'll randomly pick one.",
    "FortDeathCauseInfo:SelfInflictedMessages": "The message(s) to display if the cause of death is self inflicted. If more than one message then we'll randomly pick one.",
    "FortDeathCauseInfoVariant:SelfInflictedMessages": "The message(s) to display if the cause of death is self inflicted. If more than one message then we'll randomly pick one.",
    "CosmeticMetaTagCondition:MetaTagQuery": "The meta tags on the item must match this query",
    "FortPlayerController:CreativeModeProfile": "The metadata profile for this MCP account",
    "FortPlayerController:MetadataProfile": "The metadata profile for this MCP account",
    "FabricMetaSoundNodeInfo:PatchSpawnedFrom": "The metasounds patch this was created from",
    "FabricMetaSoundNodePool:PatchSpawnedFrom": "The metasounds patch this was created from",
    "FabricUserOption:ConversionType": "The method to use to convert from the incoming value to the output value",
    "ConcertRollbackComponent:PickupDeleteType": "The method used for finding which pickups to delete. Defaults to deleting all pickups, not just those in the playspace volume",
    "ETeamPerformanceMessageReplicationType": "The method used for replicating a team performance message to all clients.\n    The various implementations have different benefits/drawbacks when it comes to reliability and cost.",
    "QualitativePerfMetricScale:Metric": "The metric this scale is for",
    "BuildingGameplayActorSentry:StartingIdleRotation": "The middle rotation of the turret when it is idling. The turret will slowly pan to the left and right of this position while idling.",
    "SpeedScaledAxisOffsetData:SpeedMultiplierBounds": "The min (X) and max (Y) multiplier applied to the total offset. This range will be LERP'd where the alpha is\n    the player's speed after it has been normalized to the range SpeedBounds.",
    "VoiceChatDistanceAttenuationSettings:DistanceRange": "The min and max distance range over which to apply attenuation on the voice chat stream",
    "GlobalWeatherData:BlendInMin": "The min blend in time for this weather event",
    "GlobalWeatherData:BlendOutMin": "The min blend out time for this weather event",
    "GlobalWeatherData:EnableChanceMin": "The min chance we will enable this weather event for the duration of the game",
    "GlobalWeatherData:ChanceMin": "The min chance we will pick this weather event",
    "GlobalWeatherData:ChanceToRemainActiveMin": "The min cooldown for this event before attempting to apply it again (0 will keep it running instead of ending)",
    "GlobalWeatherData:CooldownMin": "The min cooldown for this event before attempting to apply it again (0 will keep it running instead of ending)",
    "PlayspaceComponent_PlayerSpawning:SpawnDelayMin": "The min delay before we spawn the user",
    "FortMotorcycleVehicle:DoorBashForwardDistanceMin": "The min distance to check for a door to bash.",
    "GlobalWeatherData:DurationMin": "The min duration of the weather event",
    "AimingCircleSettings:MinCursorTrackingFrequency": "The min frequency (in seconds) at which the aim position will track the cursor position. This is to add some noise on the aim position that might otherwise look too smooth/unnatural. (e.g. If set to 0, the aim position will follow the aiming circle in a smooth motion / Is set to 0.5, the aim position will jump around on the aiming circle every 0.5 seconds.)",
    "DigestedAimingCircleSettings:MinCursorTrackingFrequency": "The min frequency (in seconds) at which the aim position will track the cursor position. This is to add some noise on the aim position that might otherwise look too smooth/unnatural. (e.g. If set to 0, the aim position will follow the aiming circle in a smooth motion / Is set to 0.5, the aim position will jump around on the aiming circle every 0.5 seconds.)",
    "DigestedAimingCircleSettings:MinCursorUpdateInterval": "The min frequency (in seconds) at which the fictional target(cursor) will change speed and direction.",
    "GlobalWeatherData:FrequencyMin": "The min frequency we will check this weather event",
    "AimingCircleSettings:MinCursorUpdateInterval": "The min frequency(in seconds) at which the fictional target (cursor) will change speed and direction.",
    "AimingCircleSettings:KillingBlowGracePeriodAtMinRange": "The min grace period (in seconds) before the bot will hit again when it detects that its next hit will kill the target. (The min range used is MinDistanceForTimeBetweenHits.)",
    "DigestedAimingCircleSettings:KillingBlowGracePeriodAtMinRange": "The min grace period (in seconds) before the bot will hit again when it detects that its next hit will kill the target. (The min range used is MinDistanceForTimeBetweenHits.)",
    "FortAIEncounterSpawnGroupCap:MinSpawnGroupNumberCap": "The min limit on the number of spawn groups in this category that can be active at once during an encounter",
    "ShielderCollisionHelperComponent:PitchMin": "The min pitch to be applied from the player aim rotation.",
    "UnicornDriver:MinHighlightScore": "The min score that a highlight needs to be saved to the server highlight reel",
    "LiquidRibbonManager:MinSplineEndTaperSize": "The min size to taper the end of the spline down to.",
    "DigestedAimingCircleSettings:MinCursorRotationSpeed": "The min speed (in degrees/second) at which the fictional target(cursor) will move on the circle around the target.",
    "GearConfig:MinSpeed": "The min speed (km/h) associated with this gear before gearing down",
    "SMVehicleGear:MinSpeedHotfixable": "The min speed (km/h) associated with this gear before gearing down",
    "AimingCircleSettings:MinCursorRotationSpeed": "The min speed at which the fictional target (cursor) will move on the circle around the target.",
    "FortMotorcycleVehicle:DoorBashMinSpeed": "The min speed needed to be able to bash through doors.",
    "FortCampaignJackalVehicle:MinSpeedToWallRun": "The min speed required to allow wall running in Km/H",
    "FortSafeZoneIndicator:SafeZoneAudioSpeedRange": "The min/max clamped speeds of the SafeZone (for audio modulation)",
    "FortPlayerPawn:FarOffMiniMapIconBrush": "The mini map icon for this pawn",
    "FortPlayerPawn:MiniMapIconBrush": "The mini map icon for this pawn",
    "FortReplaySpectatorPawnBase:MiniMapIconBrush": "The mini map icon for this pawn",
    "FortPlayerPawn:DBNOMiniMapIconBrush": "The mini map icon for this pawn when DBNO",
    "EFortMinigameState.PostGameReset": "The minigame and island is currently resetting",
    "EFortMinigameState.Teardown": "The minigame is being destroyed",
    "BuildingProp_AISpawner:MinigameProgress": "The minigame logic component that will deal with minigame triggering events",
    "BuildingTrapFloor_Turret:MinigameLogic": "The minigame logic component that will deal with minigame triggering events",
    "FortGameplayMutator:MutatorEnabledMinigameStates": "The minigame states when this mutator will respond to being gathered by FortMinigame::GetMutatorsForContextActor. Previously,\nthe FortVolumeManager would only gather mutators from the minigame if the minigame was in progress, so this flag defaults to\nmatch the in-progress states. However, more states may now be added like in the case that we want a mutator to have an affect\nduring the PreGame phase",
    "CosmeticVariantInfo": "The minimal amount of info needed to specify a particular variant entry within a particular channel",
    "TileGroupInfo:MinTiles": "The minimal amount of tiles of this type that must be placed for this group to be considered",
    "ReactorGradeGameplayCue_ChargeUp:MinHitDistance": "The minimim distance from the start of the trace that we will place the end point.",
    "CustomTickComonentQualitySettings:MinFramesToSkipBetweenCustomTicks": "The minimum NumFramesToSkipBetweenCustomTicks to use for this component",
    "SpecialEventStatDefinition:Min": "The minimum Value we can reach",
    "FortThreatVisualsManager:CloudMinimumAltitude": "The minimum absolute altitude that clouds must maintain.  May be set for cases such as when the storm-shield exists and the coulds MUST be above the storm-shield.  Defaults to -X.",
    "FortWeaponRanged:AimPitchMin": "The minimum aim pitch allowed.\n     Limits how low a shot can be fired. Could be used for a mortar style weapon and/or can prevent shots from being fired straight down or even backwards.\n     This can ensure that projectiles are fired with a heading that is near the camera's/muzzle's forward heading.\n     (Common situations where a projectile's heading is far from expectations: 1) If the weapon is aimed very near straight up/down where a small amount of spread can radically change the projectile heading, or 2) Where ProjectilePitchOffset can cause the projectile to be fired at a pitch more than 90 degrees from 0 which essentially reverses the heading.)\n     For projectile weapons: when aim pitch is clamped ProjectilePitchOffset is taken into account before clamping.\n     Set <= -180 to disable.\n     Data validation will fail is NOT AimPitchMin <= AimPitchMax.",
    "FlightParams:ControlFrameMinUpNudge": "The minimum amount by which the up vector ought to be nudged when the\n              aircraft is upsidedown.",
    "EQSActorSpawnerData:TimeBetweenSpawns_Min": "The minimum amount of time after the Actor Spawn spawns an actor before it may spawn another actor",
    "EQSActorSpawnerData:TimeBetweenSpawns_Min_BySafeZoneIndex": "The minimum amount of time after the Actor Spawn spawns an actor before it may spawn another actor (if indexing by safezone is enabled.)\n     Curve table values are keyed by the SafeZoneIndex",
    "SpecialEventGameUserSettingsControllerComponent:MinTimeBetweenSaves": "The minimum amount of time between requesting saves from the GameUserSettings",
    "FortMantisTechniqueData:MinInputHoldDuration": "The minimum amount of time the input must be held in order to trigger this technique if the ActivationTimingType is\n              Released. Does not apply if the ActivationTimingType is Pressed or if the value is below zero.",
    "SpatialMetricSampleImageProperties:MinWorldUnitsPerPixel": "The minimum amount of world units per image pixel.",
    "FortBulletPatternEntryData:MinRotationVariance": "The minimum amount the RelativeRotation should vary per shot. Only pitch and yaw are used, roll is ignored.",
    "FortWeaponRangedDualSwing:MinimumSwingHitGroundAngle": "The minimum angle at which the player can hit something while not attached for it to be considered the ground.",
    "UserOptionDefinitionFloatMetaData:MinValue": "The minimum clamp value of this option.\n@note This data is synced from the \"ClampMin\" meta-data value of the property, so should be set there (called \"Value Range\" in the BP editor UI).",
    "UserOptionDefinitionIntMetaData:MinValue": "The minimum clamp value of this option.\n@note This data is synced from the \"ClampMin\" meta-data value of the property, so should be set there (called \"Value Range\" in the BP editor UI).",
    "HomebaseNodeLevel:MinCommanderLevel": "The minimum commander level needed to unlock this node level for purchase",
    "FortRequirementsInfo:CommanderLevel": "The minimum commander level required",
    "MeleeWeaponSkill:MinCooldownDelayBetweenMeleeAttackAttempts": "The minimum cooldown delay before which the ai attempts their next melee attack.",
    "BuildingRift:MinSpawnDelay": "The minimum delay for how long between when an AI is chosen to spawn at this rift and when it will actually try to spawn.",
    "FortAthenaMutator_Cobalt:MinimumDistanceBetweenPOIs": "The minimum distance between selected POI Storm Shields.",
    "TempestLightningComponent:LightningBoltSeparationDistance": "The minimum distance between successive lightning bolts",
    "FortAthenaMutator_Bismuth:MinimumDistanceBetweenSpawners2D": "The minimum distance between the randomly selected spawners in the world.",
    "TempestLightningComponent:MinLightningTargetDistance": "The minimum distance from the lightning cloud required to be a lightning bolt target",
    "ProjectileTrajectorySplineInfo:InitialDistance": "The minimum distance from the trajectory origin point where spline points will be generated.\n     NOTE: predicted hits/bounces within this range can cause the first spline location to move forward and the first spline tangent to become the exit velocity of the first bounce (i.e. the spline may bend unexpectedly when aiming at objects within this range.)",
    "FortSmartObjectComponent:MinDistanceToMoveToDisable": "The minimum distance the actor must move, compared to where it spawned, to disable it.",
    "FortNearbyActorsPerceptionConfiguration:MinimumDistance": "The minimum distance the actors must be at. Must be > 0",
    "WindSplineComponent:PawnSkydivingMinDistanceAboveGround": "The minimum distance the pawn has to be above the ground while falling to automatically enter the skydiving state",
    "KatanaTargetingComponent:PrimaryAttackMinForwardMovement": "The minimum distance the primary attack must move forward.",
    "AIPawnSignificanceBasedMovementUpdateBucket:MinDistanceFromPlayer": "The minimum distance to the player a pawn can be for it to be in this bucket.",
    "FabricSignificanceBasedUpdateBucket:MinDistanceFromPlayer": "The minimum distance to the player a pawn can be for it to be in this bucket.",
    "FortWindManager:UpdateWindMaxResponderDistance": "The minimum distance to the viewer that responders need to be for them to be updated",
    "FortExposedAsset:Entitlement": "The minimum entitlement required to access this asset. Default is for \"Basic\" users, ie everyone who has UEFN.",
    "FortCurieGrassFireReplicator:MinGrassGridIndex": "The minimum grass grid index that is managed by the replicator",
    "FortAthenaMutator_RespawnAndSpectateSelect:MinRespawnHeightAboveGround": "The minimum height a player will respawn over the ground",
    "FortThreatVisualsManager:CloudMinimumHeightAboveGround": "The minimum height above ground that clouds may reach.  This is the ONLY settings which can cause clouds to end up at different altitudes (based on the terrain under each cloud).  All clouds maintain a minimum height above players globally, and the global CloudMinimumAltitude also affects all clouds together.",
    "FortAthenaCompassIcon:DistanceForScalingMultiplier_Min": "The minimum icon scale size multiplier based on MaxPawnDistanceForScaling\nUsed only when MaxPawnDistanceForScaling > 0.f",
    "AlterationSlot:SlotInitMin": "The minimum initial slot rarity.",
    "TempestLightningComponent:LightningBoltIntervalMin": "The minimum interval between lightning bolts in the same batch",
    "TempestLightningComponent:LightningStruckPawnReselectionInterval": "The minimum interval between successive selection of the same pawn as the target",
    "TempestLightningComponent:LightningFrequencyMin": "The minimum interval in seconds at which we choose new lightning bolt locations",
    "WindSplineComponent:FieldMinMagnitudeAfterFalloff": "The minimum magnitude of the physics field after the falloff is applied",
    "EQSActorSpawnerData:TotalActorsToSpawn_Min_BySafeZoneIndex": "The minimum number of actors the EQS Actor Spawner will attempt to spawn during the current SafeZone Phase (if indexing by safezone is enabled.)\n     Set TotalActorsToSpawn_Min or TotalActorsToSpawn_Max to less than 0 to spawn until another spawn sequence is started, or if SafeZoneIndexToSpawnIn == -1 until the game ends (be careful using this feature, make sure spawn times are spaced out and maybe add a removal EQS).\n     Curve table values are keyed by the SafeZoneIndex",
    "EQSActorSpawnerData:TotalActorsToSpawn_Min": "The minimum number of actors the EQS Actor Spawner will attempt to spawn when triggered.\n     Set TotalActorsToSpawn_Min or TotalActorsToSpawn_Max to less than 0 to spawn until another spawn sequence is started or until the game ends (be careful using this feature, make sure spawn times are spaced out and maybe add a removal EQS).",
    "UserOptionDefinitionFloatMetaData:MinFractionalDigits": "The minimum number of fractional digits to show when displaying values for this option.",
    "TempestLightningComponent:LightningBoltsMin": "The minimum number of lightning bolts to spawn per batch",
    "MissionGenerationInfo:NumMissionsRequired": "The minimum number of missions that MUST be created that match this query.",
    "FortAthenaMutator_PerkSystemMutator:MinPerksToUnlock": "The minimum number of perks that can be unlocked at once",
    "ConditionalFoundationQuotaTier:MinFoundations": "The minimum number of this foundation class to choose in this tier.",
    "BuildingGameplayActorSpawnDetails:MinNumToSpawnPerPhase": "The minimum number these bgas to spawn (over time) when a phase starts (index into this table row is the phase #)",
    "FortAthenaMutator_Cobalt:StormShieldShrinkLocationMinOffset": "The minimum offset from the POI location at which the shrinking storm should have its final post shrink location",
    "IndicatedActorScaleAndOpacityData:FarAwayOpacity": "The minimum opacity we lerp to beyond the smallest size distance.",
    "FortRequirementsInfo:PartyPowerRating": "The minimum party power rating required",
    "FortAthenaMutator_OverrideValetVehicleParameters:MinInitialVehicleFuelPercent": "The minimum percent of fuel valet vehicles will start with",
    "DeploymentConsoleComponent:RadiusPercentForRespawnMin": "The minimum percent of the safe zone used for player spawning.",
    "FortRequirementsInfo:PersonalPowerRating": "The minimum personal power rating required",
    "UserOptionDefinitionFloatMetaData:MinSliderValue": "The minimum slider value of this option.\n@note This data is synced from the \"UIMin\" meta-data value of the property, so should be set there (called \"Slider Range\" in the BP editor UI), or will use MinValue if unset.",
    "UserOptionDefinitionIntMetaData:MinSliderValue": "The minimum slider value of this option.\n@note This data is synced from the \"UIMin\" meta-data value of the property, so should be set there (called \"Slider Range\" in the BP editor UI), or will use MinValue if unset.",
    "FortThreatVisualsManager:CloudMinSpeed": "The minimum speed (in UU/s) that the clouds will move up/down to reach their desired altitude.  The actual velocity is found by a smooth lerp from 0 delta up to CloudMaxVerticalDelta.  It's important for this value to be moderate so that the cloud doesn't drift imperceptably wh",
    "RootMotionSource_RocketRam:MinSpeed": "The minimum speed the character is able to move. The actual speed is calculated using the elapsed time of the root motion source\n              and the SpeedCurve value at that time.",
    "FortAthenaVehicle:MinSpeedForAutoCamera": "The minimum speed the vehicle should be moving before we try to auto center the camera.",
    "FortCurieFXSettings:MinLandscapeFireSphericalBounds": "The minimum spherical bounds for the grass fires",
    "FortAthenaMutator_Cobalt:StormShieldMinRadiusMultiplier": "The minimum storm shield size is calculated by multiplying the StormShieldMinRadiusMultiplier with the max storm shield radius calculated using StormShieldRadiusMultiplierPerPlayer",
    "MarkerUtilitiesCompassPlacementIcon:MinimumTeamScoreToShow": "The minimum team score required to show this icon.",
    "MarkerUtilitiesMapPlacementIcon:MinimumTeamScoreToShow": "The minimum team score required to show this icon.",
    "FortAthenaMutator_Cobalt:MinSupplyDropSpawnTime": "The minimum time in seconds it takes for a new supply drop to spawn",
    "AimingCircleSettings:MinTimeBetweenHitsAtMaxRange": "The minimum time it should take for the aiming circle to go from its maximum opening to its minimum opening after a successful hit on a target that is at maximum range (MaxDistanceForTimeBetweenHits)",
    "DigestedAimingCircleSettings:MinTimeBetweenHitsAtMaxRange": "The minimum time it should take for the aiming circle to go from its maximum opening to its minimum opening after a successful hit on a target that is at maximum range (MaxDistanceForTimeBetweenHits)",
    "AimingCircleSettings:MinTimeBetweenHitsAtMinRange": "The minimum time it should take for the aiming circle to go from its maximum opening to its minimum opening after a successful hit on a target that is at minimum range (MinDistanceForTimeBetweenHits)",
    "DigestedAimingCircleSettings:MinTimeBetweenHitsAtMinRange": "The minimum time it should take for the aiming circle to go from its maximum opening to its minimum opening after a successful hit on a target that is at minimum range (MinDistanceForTimeBetweenHits)",
    "RidableControlParams:MinimumJumpHoldTime": "The minimum time that the jump will be considered \"held\" after it's pressed.",
    "FortAthenaMutator_Cobalt:MinimumVersusScreenDuration": "The minimum time to show the versus screen UI - this would be the minimum time for the teleport sequence to finish",
    "FortSmartObjectComponent:MinEulerAnglesDeltaToDisable": "The minimum tolerance for the rotator delta, compared to how it spawned, in euler angles, to disable it.",
    "SpatialMetricProperties:MinValue": "The minimum value for this metric's spatial values.",
    "HeroSpecializationAttributeRequirement:MinimumValue": "The minimum value of the attribute for the requirements to be met",
    "FabricUserOption:Min": "The minimum value when using a lerp",
    "ImpulseDamageData:MinValueForDamage": "The minimum velocity or impulse magnitude required for the physics object to apply this damage",
    "FortLivingWorldConfigOverride:StartVersion": "The minimum version where this config will become valid.",
    "FortGameCueNotifyLoop_Cloak:VisibilityMinFriendly": "The minimum visibility percent for a friendly player.",
    "FortGameCueNotifyLoop_Cloak:VisibilityMinNonfriendly": "The minimum visibility percent for a non-friendly player.",
    "FortCurieMaterialDefinition:MinWaterContent": "The minimum water content for the material",
    "FortZoneMissionAlertData:MissionAlertCategoryName": "The mission alert category name for the zone if one exists.",
    "FortAvailableMissionAlerts:AvailableMissionAlerts": "The mission alerts available within this theater",
    "FortTheaterMapRegionData:MissionData": "The mission data for this region",
    "FortAvailableMissionData:MissionGenerator": "The mission for the tile",
    "FortZoneInstanceDetails:MissionGenerator": "The mission generator assigned to this zone, can be null",
    "FortMissionRecord:MissionGenerator": "The mission generator that generated this mission. Not serialized",
    "FortGameStateZone:MissionGeneratorClass": "The mission generator that was used to generate missions for this zone",
    "FortMission:MissionGenerator": "The mission generator used to create this mission",
    "FortMissionAlertData:RestrictedMissionGens": "The mission generators that this mission alert cannot exist for.",
    "FortMission:MissionInfo": "The mission info this thing will use at start",
    "FortIronCityDifficultyData:RewardBadgeTag": "The mission reward badge mapped to the account level",
    "FortIronCityDifficultyData:MissionRewards": "The mission rewards mapped to the account level",
    "FortMissionUIActorHandle:MissionGuid": "The mission this actor is registered with",
    "FortAvailableTheaterMissions:AvailableMissions": "The missions available within this theater",
    "FortCriteriaRequirementData:ModValue": "The mod value to apply to the appropriate power value",
    "FortCreativeDiscoveryTestCohort:CategoryRecommendationModelName": "The model name of the category recommender to use.",
    "VkModuleDoc:ModuleId": "The module ID specified in the content-service",
    "VkModuleVersionDoc:ModuleId": "The module ID specified in the content-service",
    "VkModuleVersionModerationStatus:ModuleId": "The module ID specified in the content-service",
    "VkModuleVersionRef:ModuleId": "The module ID specified in the content-service",
    "FortAthenaPickRandomMontageConfig:Montage": "The montage relative to this possible config.",
    "GameplayAbilityRepSharedAnim_Base:MontageSectionToPlay": "The montage section we're going to grab timer info from",
    "FortMantisMontageData:Montage": "The montage that the data has been extracted from.",
    "MultiItemReplicationProxy:ItemXPChangeAmount": "The most recent amount by which the owning multi-item's XP value was changed.",
    "FortFallTeleportComponentBase:TeleportLocation": "The most recent location the pawn should be teleported to",
    "FortPlayerPetRepState:StimuliTag": "The most recent stimuli received",
    "FortPlayerSurveyMcpDataSurveyMetadata:LastTimeCompleted": "The most recent time this survey was completed, in server UTC time.",
    "FortAIEncounterWaveProgressEstimation:MaxAdjustmentPerSecond": "The most the wave progress can advance per second",
    "FortProjectileBase:ProjectileMovementComponent": "The movement component for this projectile",
    "FortTracerBase:TracerMovementComponent": "The movement component for this projectile",
    "FortPickup:MovementComponent": "The movement component for tossing from a player",
    "FortPlayerPushableCart:MovementComponent": "The movement component that controls how this object moves",
    "AIPawnSignificanceBasedMovementUpdateBucketGroup:MovementComponentsInGroup": "The movement components that are currently in this group.",
    "TempestMovementComponent:MovementMode": "The movement mode for the component",
    "FortGravityGunHolder:MoveSpeed": "The movement speed of the held object while calculating its position.",
    "FortGravityGunHolder:MoveSpeedWhileADS": "The movement speed of the held object, while we're aiming down sights, and calculating its position.",
    "RemoteViewRotSnapshotManager:VariableTimeDelayMultiplier": "The multiple of average receive rate we should be setting our variable delay to.",
    "GlobalWeatherData:ChanceMultiplierOverElapsedMinutes": "The multiplier applied to the computed chance based on the elapsed server time in minutes since the game phase to start the weather occurred",
    "BuildingGameplayActorSupplyDropRadio:GravityMultiplier": "The multiplier applied to the world gravity when calculating the falling movement.\n     This value is gathered from a hotfix table row (performed in blueprint).",
    "FortAIPawnUpgradeData:LifespanMultiplierCurve": "The multiplier to apply to the pawn's expected lifespan in the encounter . Evaluated with GameDifficulty.",
    "FortAIPawnUpgradeData:ScoreMultiplierCurve": "The multiplier to apply to the pawn's score awarded when killed. Evaluated with GameDifficulty.",
    "FortAIPawnUpgradeData:SpawnPointsMultiplierCurve": "The multiplier to apply to the pawn's spawn point value within the group. Evaluated with GameDifficulty.",
    "ShielderCollisionHelperComponent:PitchMultiplier": "The multiplier to apply to the pitch from the player aim rotation.",
    "PropertyOverrideData:MutableObject": "The mutable object that will receive property overrides; possibly the same as base object",
    "RespawnAndSpectatePlayerComponent:ManagingMutator": "The mutator that manages this controller component. This mutator does NOT own this component (because the component is attached to a controller), but it does tell this component what to do\n     When we have non-delegated callback functions this is what we call those functions on",
    "AddMutatorData:Mutator": "The mutator to add",
    "MutatorInstanceData:MutatorInstance": "The mutator to add",
    "FortWeapon:MuzzleBlockedReticleImage": "The muzzle-blocked reticle image to use",
    "FortAISpawnGroupUpgradeUIData:UpgradeName": "The name associated with the upgrade",
    "TimeOfDayPhase:DisplayName": "The name for this phase",
    "TimeOfDaySpeed:DisplayName": "The name for this speed",
    "UtilityData:DebugGraphName": "The name for this utility line in the debug graph",
    "FortLootTierData:LootPreviewPackage": "The name of the Loot Preview Package. Used to preview loot without rolling for loot.",
    "DuelOverlayData:ChallengedNPCName": "The name of the NPC challenged in the duel.",
    "ValkyrieSourceControlSettings:ProviderName": "The name of the SourceControl provider",
    "FortMantisReplicatedAnimInstanceInfo:ActiveTechniqueName": "The name of the active technique if there is one (otherwise NAME_None).",
    "FortScoutDronePickupManager:AttachPointSocketName": "The name of the bone/socket to attach items to",
    "FortHeroNamesData:FirstName": "The name of the building associated with this GE",
    "FortAthenaMutator_SafeZoneStartupHelper:EventName": "The name of the calendar event this thing is active during.",
    "FortAthenaMutator_StormVehicleHelper:EventName": "The name of the calendar event this thing is active during. Defaulted to the Fritter event.",
    "FortZoneInstanceDetails:MissionAlertCategoryName": "The name of the category of the mission alert on this zone. Empty if none exists",
    "ExpectedConsoleVariableForTest:ConsoleVariable": "The name of the console variable we expect to have set",
    "PersistenceFrameworkPersistentName": "The name of the container. Every container has a unique name and this structure is used to store it.\nTODO : Add support for hierarchical names and partial name matching in find operations.",
    "FortPerModeInputConfig:CustomControllerLayoutPresetName": "The name of the custom layout preset for controller",
    "CosmeticOverrideData:SlotName": "The name of the customization category this item slots into",
    "FortPerModeInputConfig:DefaultControllerLayoutPresetName": "The name of the default layout preset for controller",
    "FortPerModeInputConfig:DefaultKeyboardMouseLayoutPresetName": "The name of the default layout preset for keyboard/mouse",
    "FortGameMode:DefaultPawnClassStringRef": "The name of the default pawn class used by players. Set this instead of DefaultPawnClass",
    "DuelOverlayData:ChallengerName": "The name of the duel-starting player.",
    "FortMantisTargetData:DynamicMontageName": "The name of the dynamically calculated montage.",
    "ItemsForEventData:RequiredEventName": "The name of the event that is required to be active (via calendar) for these items to load",
    "NPCConversationGiftRow:AnalyticsEventName": "The name of the gift when recording to analytics. Will be automatically prefixed by \"Athena.NPC.Gift.\" when sent",
    "FortMotorcycleVehicle:ActionDefForUI": "The name of the input action and the display name it will show in the input context HUD",
    "InputEventBinding:ActionName": "The name of the input action to bind to e.g. \"Target\" / \"Fire\" / \"Crouch\"",
    "FabricMetaSoundDirectInputInfo:MetaSoundInputName": "The name of the input connection on the patch's node",
    "FabricMetaSoundUserOptionInputInfo:MetaSoundInputName": "The name of the input connection on the patch's node",
    "FabricMetaSoundRuntimeInputInfo:MetaSoundInputNodeName": "The name of the input node for this input",
    "PreviewWorldMaterialParams:SourceParamName": "The name of the material param we want to read from to setup preview world",
    "FortCreativeMessageDispatcherErrorMessage:MessageName": "The name of the message component that's causing the error",
    "FortInGameMapManager:StaticCaptureCameraName": "The name of the minimap camera in the level",
    "OnlineDiscoveryModeSetDef:ModeSetId": "The name of the mode set link code, e.g. 'set_br_playlists'",
    "FortCreativeDiscoveryContentPanel:ModelName": "The name of the model to use when pulling recommendations.",
    "ExternalAccountServiceConfig:ExternalServiceName": "The name of the online subsystem used for external account lookups",
    "DynamicDestructionOpacityMask:MaskName": "The name of the opacity mask to look for.",
    "WaxPlacementData:PlayerName": "The name of the player",
    "MinigameScoreEntry:PlayerName": "The name of the player (at time of recording)",
    "FortGiftingInfo:PlayerName": "The name of the player that gifted the item",
    "TDMPlayerStandingInfo:PlayerName": "The name of the player that this FTDMPlayerStandingInfo corresponds to.",
    "VehicleEffectsPontoonParamSet:PontoonName": "The name of the pontoon you would like to look up.",
    "PreviewWorldMaterialParams:DestinationParamName": "The name of the preview world's material collection param we want to set",
    "McpLootEntry:ItemProfile": "The name of the profile that this item was placed into",
    "QuestItemDefinitionDesignerData:QuestBackEndName": "The name of the quest on the backend. Historically, this has been created by the Systems team.",
    "VehicleWheelFXSocketInfo:SocketName": "The name of the socket",
    "VehicleModStaticMeshAttachmentData:AttachSocketName": "The name of the socket at which to place the static mesh.\nThe relative transform will move the static mesh relative to this socket.\nIf no socket name is provided, the static mesh will be relative to the center of the vehicle skeletal mesh.",
    "FortWeaponRangedDualSwing:SwingSocketName": "The name of the socket to which the rope should be attached. This socket can exist on the player's pawn mesh, any attached gameplay character parts, or the weapon mesh.",
    "CharmSlotMetadata:AttachSocket": "The name of the socket we expect to attach to",
    "FortPartyRepData:ActivityName": "The name of the specific Activity to matchmake into within a playlist. Ex: Name of a specific featured Island in Creative",
    "WindSplineComponent:ActiveSectionEndMaterialParamName": "The name of the spline mesh material parameter to update when the active section end changes",
    "WindSplineComponent:ActiveSectionStartMaterialParamName": "The name of the spline mesh material parameter to update when the active section start changes",
    "StatNamesToTrack:StatName": "The name of the stat",
    "MtxPackage:StorefrontName": "The name of the storefront this offer came from.",
    "FortDeathCauseInfo:EliminatedByName": "The name of the thing that caused the death if not the player.",
    "CursorSettings:trackName": "The name of the track containing the text events. Leave blank, and all text events will be broadcast.",
    "PairedWeightEntry:Name": "The name of the weight.",
    "CalloutEntry:CalloutTag": "The name of this callout",
    "FortAnimNode_CurveFilterSlot:MontageSlotName": "The name of this slot, exposed to gameplay code",
    "FortAnimNode_NoBlendCurveSlot:MontageSlotName": "The name of this slot, exposed to gameplay code, etc...\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Settings, meta=(CustomizeProperty))",
    "FortTooltipDisplayStatsCategory:CategoryName": "The name of this stat category. This may be blank for uncategorized stats.",
    "UIStateTransitionData:TriggerTag": "The name of this transition. This does not need to be unique.",
    "VehicleEffectsPontoonParamSet:EffectsName": "The name prefix for every Niagara parameter you would like to use.  For example look for PontoonName=CenterBig, but write data as NiagaraName=Center so parameters would become User.Center.Impulse for example.",
    "MilkshakeControllerComponent:ForceFeedbackTag": "The name tag used to identify the force feedback invoked by this component.",
    "FortMantisTechniqueData:DefaultDynamicMontageName": "The name that corresponds to the dynamic montage that should be used if UFortGameplayAbility_Mantis::GetDynamicMontageNameForTechnique fails or is not implemented.",
    "EvasiveManeuverSkillSettingsSpecialization:DebugName": "The name that will appear when this specialization is used.",
    "FortPoi_DiscoverableComponent:PlayerFacingName": "The name the player will see on discovery. The namespace and key are deterministic.",
    "FortConversationSentence:TalkingHeadTitle": "The name to display under the talking head in UI",
    "VkTeamMembershipResult:Name": "The name within the organization",
    "FortAthenaMutator_SpecialEvent:NamedWeightForContainerLootRoll": "The named weight that will be injected into the loot roll on a container",
    "ItemsForEventData:EventItemNamedWeight": "The named weights to apply for the required event name",
    "FortPerModeInputConfig:ResetKeyboardMouseLayoutPresetNames": "The names of the \"reset to default\" layout presets for keyboard/mouse",
    "FortGameStateComponent_EventLevel:CurrentHoveredNavObj": "The nav object currently under the cursor",
    "FortPhysicsObjectComponent:NavigationData": "The navigation data used by the physics object",
    "BagelLeaderboardEntry:UserNetId": "The net User Id",
    "MashLeaderboardEntry:UserNetId": "The net User Id",
    "SpecialEventPhaseComponentNetModeInfo:NetModeType": "The net mode where the phase component needs to be applied/removed.",
    "FortAthenaMutator_SynchronizedTeleport:StreamInDistanceDuringLoadOverride": "The new BuildingFoundationStreamInDistance during the teleportation period, to aid in faster loading times.\nNegative/Zero value means the feature is disabled. Example value of 16250 is a tried and tested value from the buckle-up/nitrogen LTM.",
    "FortWarmupCountdownEndTimeUpdatedEvent:EndTime": "The new end time",
    "FortNotificationLevelUp:Level": "The new level",
    "BuffetFlyingRicochetReplicatedData:Velocity": "The new velocity that resulted from the ricochet, which the character will rotate toward",
    "FortGameStateComponent_EventLevel:SelectedCamera": "The next camera that we will transition to (empty if leaf node)",
    "ClamberingTargetingData:NextLedgeLaunchWarpPoint": "The next closest ledge to the character above the current valid ledge and within acceptable range.",
    "ClamberingTargetingData:bHasNextLedgeLaunchTarget": "The next closest ledge to the character above the current valid ledge and within acceptable range.",
    "FortWindManager:NextNearbyIndexToUpdate": "The next nearby wind responder index that needs updating.  This is used to improve performance by\n          avoiding updating all responders each frame",
    "FortGameplayCueNotifyLoop_AbductionWarning:VariableName": "The niagara fx variable name to be changed in the tick.",
    "FortQuestMapNode:NodeType": "The node type of this quest, whether it's a main line quest or non mandatory",
    "SpecialEventStatDefinition": "The non-dynamic data defining a special event stat",
    "SpecialEventStatComponent:StatDefinitions": "The non-dynamic definitions of this component's stats",
    "BulletWhipTrackerSystemData:Instigator": "The non-local player shooting the projectile",
    "WaterSurfaceInfo:WaterPlaneNormal": "The normal of the water's surface plane.",
    "FortIntensityCurve:NormalPlayerPerformancePeakIntensityThreshold": "The normal threshold at which the encounter triggers a peak then a breather",
    "FortWorldMarkerData:WorldNormal": "The normal where the marker hit.  Only valid when dealing with Location",
    "FortAthenaMutator_Bismuth:NumOfBotsToSpawn": "The number of AI Bots we wish to spawn in the world",
    "FortAthenaMutator_Barrier:ObjectiveMaxZDiff": "The number of building cells we offset vertically",
    "FortAthenaMutator_Barrier:ObjectiveZOffset": "The number of building cells we offset vertically",
    "FortConstructorBASE:NodesToAffect": "The number of connections to jump when determining which actors are \"In Base\"",
    "McpMatchResults:Deaths": "The number of deaths this player had during the match.",
    "FortCreativeDiscoveryContentPanel:PageSize": "The number of entries per page this panel may support.",
    "AIPawnSignificanceBasedMovementUpdateBucket:FramesPerUpdate": "The number of frames between the update of each group in this bucket. A value of 1 means that there is one group and it will update every frame.",
    "FabricSignificanceBasedUpdateBucket:FramesPerUpdate": "The number of frames between the update of each group in this bucket. A value of 1 means that there is one group and it will update every frame.",
    "FortTheaterMapMissionData:MissionChangeFrequency": "The number of hours before missions should be changed for this theater",
    "SupplyDropItemDeliverySpawnData:NumInitialSpawns": "The number of items already delivered at the initial spawning",
    "FortGiftGiver:NumItemsGiven": "The number of items given by the player",
    "SupplyDropItemDeliverySpawnData:NumItemsToDeliver": "The number of items to spawn and maintain",
    "McpMatchResults:Kills": "The number of kills this player made this match.",
    "FortCheckPointSplineActor:NumSplineMapUISegments": "The number of line segments to use to draw the entire spline map UI",
    "FortAthenaMutator_SplitStorm:ProxyMapCircleLineSegments": "The number of line segments with which to draw the proxy storm circle on the minimap.",
    "FortMissionAlertAvailableData:NumMissionAlertsAvailable": "The number of mission alerts that should be available for this category across associated regions.",
    "FortTheaterMapMissionData:NumMissionsAvailable": "The number of missions that should be available at one time in this theater, does not factor in \"always active\" missions",
    "FortTheaterMapMissionData:NumMissionsToChange": "The number of missions that should be changed when the time interval expires, includes normal missions as well as ones that are always active",
    "SkyfireVaultOrbSpawner:InitialOrbCountByCategory": "The number of orbs that should be spawned at the start of the core gameplay loop in Skyfire, separated by config category (i.e. playlist).",
    "FortLootTierData:NumLootPackageDrops": "The number of packages to drop. Fractional values will be treated as the probability of a drop",
    "LootTierDataRow:NumLootPackageDrops": "The number of packages to drop. Fractional values will be treated as the probability of a drop",
    "FortQuestMapPage:ChapterPageCount": "The number of pages in this page's chapter (y in x/y)",
    "AdditionalPartCount:IncrementPartsBy": "The number of parts to add to the Item budget. Note we could also subtract parts.",
    "FortAIDirector:NumPendingCapRelevantAI": "The number of pending AI that are coming from cap relevant encounters",
    "FortPartyMemberRepData:NumAthenaPlayersLeft": "The number of players alive in this player's current match - only really relevant/interesting when party in progress is enabled and others in the party aren't in the match\nThis value is accurate within a timer and number threshold determined by UFortLocalPartyMember",
    "BuildingProp_BountyBoard:NumberOfPlayersToSelectFrom": "The number of players closest to the interacting player from which to randomly select a bounty target.",
    "FortAthenaMutator_SafeZoneOrderOptimize:NumRouteOrdersPerFrame": "The number of random routes to generate and test each frame",
    "FortAthenaMutator_SafeZoneOrderOptimize:MaxRoutesPerOrder": "The number of random routes to select per route order, specified by BeginRouteOrderGeneration().\nReplicated for debug purposes only.",
    "FortSafeZoneDefinition:Count": "The number of safe zones for the match.",
    "MinigameScoreTemplate:NumHighScores": "The number of score entries to order and advertise through the scoreboard",
    "FortScoutDroneAnalyticsComponent:SessionLength": "The number of seconds that the session lasted",
    "FortAIEncounterWaveProgressEstimation:NumberOfWaveSegments": "The number of segments the wave progress will be split into for display purposes",
    "FortControllerComponent_AugmentGrantingSystem:NumLockedSelectionChoices": "The number of selections that the user cannot reroll for. This allow certain game modes to disable rerolling when they grant an augment (eg HEAT event system)",
    "FortAnimNode_QuadrupedSlopeWarping:NumSpineBones": "The number of spine bones in the hierarchy from the arms root bone up to and including the pelvis. This is used to adjust the spine bones to match the limbs root bone adjustments.",
    "FortAthenaMutator_Chrome:NumOfTeamsToFinishBeforeFinalizeWinner": "The number of teams that must reach the final point before the match is ended.",
    "FortMinigameSettingsBuilding:Matchmaking_MaxTeamCount": "The number of teams the session expects to have.",
    "AthenaDeveloperSettings:AthenaTeamSpread": "The number of teams to spread players across",
    "GroundSplineLocationData:TeleportRequestNum": "The number of the teleport request being made. The client should only teleport if the local request number is less than the replicated teleport request number.\n     The replicated teleport request number should only ever increase in value\n     The local teleport request numbershould only ever decrease in value OR be set to the Replicated Teleport request number's value  (this avoids accidental collisions)",
    "FortPossibleMission:MinAlwaysGenerated": "The number of this mission that will always be generated regardless of Weight based selection",
    "FortWorldManager:NumNonAutoconstructedTiles": "The number of tiles this world has. Only used if bConstructTileWorld is not checked and is used to calculate loot distribution.",
    "FortPlayerController:ToySummonCounts": "The number of times a given toy class has been summoned (used to allow toys to detect broken chains of shots, etc...; server only)",
    "CreativePlotSessionData:TimesGameStarted": "The number of times island game start has been initiated",
    "FortObjectiveAvailableConversation:PlaysRemaining": "The number of times remaining that this conversation can play. 0 is infinite",
    "FortMantisReplicatedAnimInstanceInfo:ActiveTechniqueConsecutiveBranchesToSelf": "The number of times the active technique has branched to itself.",
    "CreativePlotSessionData:TimesInventoryOpened": "The number of times the inventory menu was opened",
    "CreativePlotSessionData:TimesIslandMenuOpened": "The number of times the island menu was opened",
    "Voter:NumVotesCast": "The number of times the player has cast its vote",
    "FortTeamPerkLoadoutCondition:NumTimesSatisfiable": "The number of times this condition can be satisified.  For example, if meeting this condition with five different heroes in your squad counts five times, put 5 here.  If this unique condition only counts once, put 1.",
    "FortPlayerSurveyMcpDataSurveyMetadata:NumTimesCompleted": "The number of times this survey has been completed. Note that \"completed\"\nincludes surveys that were cancelled, skipped, etc.",
    "FortAthenaMutator_MarkerUtilities:NumTopScoringTeamsToShowOnCompass": "The number of top scoring teams/players to draw on the compass.\nNote that this value can only use a max value of PlacementBasedCompassIcons.Num()",
    "FortAthenaMutator_MarkerUtilities:NumTopScoringTeamsToShowOnMap": "The number of top scoring teams/players to draw on the map.\nNote that this value can only use a max value of PlacementBasedMapIcons.Num()",
    "EFortTrickIncrementType.TrickCount": "The number of unique stunts performed in this trick",
    "FortThreatVisualsManager:CloudMinimumHeightAbovePlayers": "The number of units above the highest player (local or all depending on flag) that clouds always wish to maintain.  Clouds will move up or down to keep this altitude difference, although they will stop variously at a minimum distance above the ground where they are as well.",
    "FortThreatVisualsManager:ThreatBoxVolumeBottomPadding": "The number of units down from the lowest spawn location to pad the size of the threat box volume.  Top Padding plus Bottom Padding yields the smallest possible vertical size of the box UNLESS the sum is less than one building story in height.  In that case, top padding will be automatically increased to make the box at least one story tall.",
    "FortThreatVisualsManager:ThreatBoxVolumeTopPadding": "The number of units up from the highest spawn location to pad the size of the threat box volume.  Top Padding plus Bottom Padding yields the smallest possible vertical size of the box UNLESS the sum is less than one building story in height.  In that case, top padding will be automatically increased to make the box at least one story tall.",
    "FortTheaterMapViewer:NumValidHexMapTiles": "The number of valid tiles in the tile list",
    "FortVoteConfig:NumVoteOptions": "The number of vote options available",
    "FortWorldPlayerLoadout:ZonesCompleted": "The number of zones this player has completed in this theater",
    "WeaponPickupAmmoCountData:SpawnCount": "The number to spawn in the pickup for a given ammo type",
    "FortTheaterMapData:TheaterUIOrder": "The number to specify an order for showing on the UI",
    "FortMinigameStatsComponent:PlayerDefinedStatInstances": "The object instances created independently by the server and client",
    "SpecialEventCursorStackEntry:InstigatingObject": "The object that called PushCursor()",
    "FortScriptedObjectMovement_Slot:SlottedObject": "The object that is currently occupying this slot. May or may not already be at the slot location.",
    "ScriptedObjectMovement_StaticPathTravelerData:PathTraveler": "The object that needs to move along a generated spline",
    "FMDeviceCableModulatorPortComponent:AssociatedObject": "The object that's using this port for modulation",
    "GameplayMutatorObjectData:TheObject": "The object to replicate data for (if possible)",
    "TornadoSimulationData:ObjectType": "The object type we need to simulate",
    "HighlightObjectData:ObjectTypes": "The object types to check for when doing the radius check.",
    "IndicatedActorDataWithFilter:ObjectTypes": "The object types to check for when doing the radius check.",
    "FindActorByClassData:ObjectTypes": "The object types to filter by.",
    "GameplayEventSubscription:Object": "The object we want to subscribe to receive events from.",
    "FabricSignificanceBasedUpdateBucketRuntimeGroup:ObjectsInGroup": "The objects that are currently in this group.",
    "FortSprayDecalRepPayload:SavedStatValue": "The observed in-match stat value (if the spray specified one to watch) when the player sprayed this spray",
    "MashAIEncounterWeights:EnabledPercentChance": "The odds that a special AI encounter will spawn for this safezone phase.\n     0 to never spawn, 1 to always spawn.",
    "FortAIRuntimePerkInfo_Bunker:OddsToBeUsedAgainstUnknownThreat": "The odds to activate the perk when threaten by an unknown target",
    "FortAIRuntimePerkInfo_Bunker:OddsToBuildForwardRamp": "The odds to build a ramp to be able to shoot from above the bunker",
    "FortAIRuntimePerkInfo_Bunker:OddsToSelectRandomMaterial": "The odds to select a random material instead of the strongest one",
    "FortAIRuntimePerkInfo_Bunker:OddsToUseRoofBuilding": "The odds to use Roof building type instead of Floor for flat surfaces",
    "FortZiplineLinkComponent:LinkOffsetFromSplineEnd": "The offset from the end of the zipline spline at which the link end will be generated",
    "HurdleInputConfig:Phase3_CapsuleOffset": "The offset from the ground that we want to validate space above the hurdle obstacle",
    "HurdleInputConfigCache:Phase3_CapsuleOffset": "The offset from the ground that we want to validate space above the hurdle obstacle",
    "HurdleInputConfig:Phase1_Floor_WallOffset": "The offset from the hurdle wall to test for ground in front",
    "HurdleInputConfigCache:Phase1_Floor_WallOffset": "The offset from the hurdle wall to test for ground in front",
    "FortTimeOfDayManager:RainParticleSystemRelativeOffset": "The offset from the player to position the rain particle system, if it is being used",
    "ZiplinePawnState:SocketOffset": "The offset from the socket",
    "VehicleWheelFXSocketInfo:Offset": "The offset from the socket to play the FX, in local space",
    "FortZiplineLinkComponent:LinkOffsetFromSplineStart": "The offset from the start of the zipline spline at which the link start will be generated",
    "FortMissionUIActorHandle:AttachmentOffset": "The offset to attach the UI to the actor",
    "FortTheaterMapTile:FocusOffset": "The offset to tween towards (from InitialLocation) when hovered",
    "FortTheaterMapTile:SelectionOffset": "The offset to tween towards (from InitialLocation) when selected",
    "SpeedScaledAxisOffsetData:SpeedScaledOffset": "The offset value that will be scaled by the player's speed.",
    "VkProjectLimitsDoc": "The online limits of the project",
    "EFortPlayspaceMatchmakingRules.SpecificPlaylists": "The only Playlists that will accept users to this Playspace are those listed in the \"SpecificPlaylists\" list",
    "DynamicDestructionParamNamesConfig:MaterialSourceOpacityMasks": "The opacity mask param config that will be tried when getting the opacity mask to use while setting up dynamic destruction materials.",
    "RufusWeeklyMapUpdaterInfo:MapOpacityTexture": "The opacity texture for the in-game and mini maps to use",
    "EPersistenceFrameworkActionEnd.Aborted": "The operation Succeeded",
    "EPersistenceFrameworkResult.Success": "The operation Succeeded",
    "EStateOfGetPersistence.Success": "The operation Succeeded",
    "EPersistenceFrameworkResult.NotReady": "The operation cannot be done because system not ready",
    "EPersistenceFrameworkServiceLatentResult.EndedTickingWithFailure": "The operation ended with failure",
    "EPersistenceFrameworkServiceLatentResult.EndedTickingWithSuccess": "The operation ended with success",
    "EPersistenceFrameworkActionEnd.Finished": "The operation failed",
    "EPersistenceFrameworkResult.Failed": "The operation failed",
    "EStateOfGetPersistence.Failed": "The operation failed",
    "EPersistenceFrameworkServiceLatentResult.ContinueTicking": "The operation is continuing and needs ticking",
    "EPersistenceFrameworkResult.InProgress": "The operation is not yet done",
    "EStateOfGetPersistence.InProgress": "The operation is not yet done",
    "EStateOfGetPersistence.NotStarted": "The operation not started yet",
    "EStateOfGetPersistence.WaitingToRetry": "The operation will retry after some time",
    "ERollModifierOperation": "The operations that can modify a weight of a roll.",
    "ForcedPerks:ForcedItems": "The order of this array is Passive #1, Item #1, Passive #2, Item #2, Passive #3, Item #3",
    "FortCurieGrassFireReplicator:GrassGridOrigin": "The origin of the grass grid",
    "FortPhysicsObjectComponent:PhysicsObjectInitialLocation": "The original location of this physics object. Used for tracking whether or not to clone objects not in the persistent level",
    "FortWeapon:OriginalMaterialMap": "The original material list of our mesh(es), including any AlterationEffects",
    "CreativePooledMID:OriginalMaterial": "The original material we clobbered when we applied the MID to the mesh",
    "CreativeSelectedActorInfo:OriginalRelevancyDistance": "The original network relevancy distance of the actor before we picked it up.",
    "FortTimeOfDayManager:OriginalWeatherComponent": "The original weather component on this TODM",
    "FortAbilityTagRelationship:AbilityTagsToBlock": "The other ability tags that will be blocked by any ability using this tag",
    "FortAbilityTagRelationship:AbilityTagsToCancel": "The other ability tags that will be canceled by any ability using this tag",
    "LaserGridConnectionEntry:OutletConnection": "The outlets that are a part of this connection.",
    "FortGameplayCueNotifyAthena_FallDamageImmunity:ZVelocityOutput": "The output range used by FMath::GetMappedRangeValueClamped to calcuate the desired Audio Velocity of FortLayeredAudioComponent.",
    "OctopusOutPersistent:ShellRotation": "The output shell rotation value. This is a uproperty so that it auto marshals",
    "FortAthenaVehicle:CurrentOverlapComponent": "The overlap component to use. This gets set in BeginPlay.",
    "FortQuestMapPageCosmetics:NodeArrowColorOverride": "The override color for the node_arrow widgets",
    "CreativeEditOnlyMeshComponent:EditOverrideMaterials": "The override materials to apply to the Edit Mesh. The index in the array corresponds to the material's index on the mesh.",
    "BuildingProp_DeimosSpawner:SpawnTimingOverrideValue": "The override of the spawn timing override (in seconds) if bSpawnTimingOverrideEnabled is true",
    "BuildingTrap:PreviewOverrideScale": "The override scale vector for the preview actor. If 0,0,0, it will not override.",
    "FortAthenaMutator_GenerateOverlapEventsOverride:bGenerateOverlapEventsOverrideValue": "The override to apply to the building actor's static mesh component",
    "FortMusicManager:ControllerOwner": "The owner of the combat manager",
    "FortLevelSaveComponent:AccountIdOfOwner": "The owner of the currently loaded plot",
    "PlayspaceComponent_CreativeToolsPermission:AccountIdOfOwner": "The owner of the currently loaded plot",
    "ReactorGradeGameplayCue_ChargeUp:Pawn": "The owner pawn of the weapon that caused this cue.",
    "SpecialEventStatArrayEntry:Owner": "The owning actor of StatComponent.  Cached for easy BP read access.",
    "FortGameplayCueNotifyAthena_FallDamageImmunity:ZVelocityInput": "The owning pawn's Z velocity's input range that is fed into FMath::GetMappedRangeValueClamped when calculating the desired Audio Velocity of FortLayeredAudioComponent.",
    "CreativeRoyaleRootPlayspace:EditorIslandOwnerPlayerController": "The owning player of the island that is loaded during PIE",
    "VkModuleDoc:ProjectId": "The owning project Id",
    "VkModuleVersionDoc:ProjectId": "The owning project Id",
    "EValkyrieValidationErrorCode.ContainsVirtualizedData": "The package contains virtualized data",
    "FortCurieGrassFireReplicator:PackedDataArray": "The packed data which are replicated to the client",
    "FortCollectionBookPageData:SortPriority": "The page sort priority (relative to its category id)",
    "EFortCreativeDiscoveryPanelOrdering.Locked": "The panel is in a locked position.",
    "EFortCreativeDiscoveryPanelOrdering.Floating": "The panel may be freely re-ordered with other Floating content panels.",
    "FortPlayerPawn:ParachuteAttachment": "The parachute/glider/umbrella for this pawn (StW uses replication here, Athena just does clientside)",
    "FortAudioToMPCComponent:MaterialParameterCollection": "The parameter collection asset that holds the global parameters that are updated by this actor",
    "FortDaySequenceActor:MaterialParameterCollection": "The parameter collection asset that holds the global parameters that are updated by this actor",
    "FortPlayerController:MaterialParameterCollection": "The parameter collection asset that holds the global parameters that are updated by this actor",
    "FortTimeOfDayManager:MaterialParameterCollection": "The parameter collection asset that holds the global parameters that are updated by this actor",
    "FortDaySequenceActor:MaterialParameterCollectionInstance": "The parameter collection instance for the MaterialParameterCollection",
    "FabricMetaSoundNodeInfo:AnalyzerParameterPack": "The parameter pack that drives the inputs for the analyzer node",
    "FabricMetaSoundNodeInfo:ParameterPack": "The parameter pack that drives the inputs for this node",
    "AudioParam:name": "The parameter to adjust.",
    "FortTimeOfDayManager:StormMaterialInst": "The parameters in this material instance will be blended to when the StormStrength approaches 1",
    "ValkyrieSourceControlSettings:ProviderParameters": "The parameters of the SourceControl provider",
    "FortPlayerController:BuildPreviewMarkerParentMaterial": "The parent material for the preview marker's MID",
    "GameFeatureSubmixEntry:Parent": "The parent submix to connectd to when the game feature is active",
    "CharmSlotMetadata:AttachToPart": "The part enum we want to attach to for character charms.  Ignored on Weapon charms",
    "ConversationParticipantRequirement:ParticipantID": "The participant to test the conversation requirement against",
    "IndicatedActorData:ParticleSystemData": "The particle system data that attaches and plays when the actor is added to the list.",
    "StenciledActorData:ParticleSystemData": "The particle system data that attaches and plays when the actor is added to the list.",
    "ParticleVariant:ParticleSystemToAlter": "The particle system that is to be replaced by this variant",
    "FortTimeOfDayManager:RainParticleSystemComp": "The particle system that visualizes rain.",
    "ParticleVariant:OverrideParticleSystem": "The particle system to be used after applying this variant",
    "FortPlayerPawnAthena:LandEmitterTemplate": "The particle to spawn for landing",
    "FortPlayerPawnAthena:LandWindEmitterTemplate": "The particle to spawn for landing wind vector",
    "FortPoi_DiscoverableComponent:QuestPartOf": "The particular quest to look in",
    "EFortPartyState.Undetermined": "The party state has not been set yet",
    "WeaponCueReplicationStruct:CueEventType": "The passed EventType",
    "FabricMetaSoundManagerComponent:HarmonixMusicProviderPatch": "The patch that contains Harmonix music providers.\nTransport, Midi Clock, Root Note, and Scale",
    "FortCreativePersistenceComponentBase:BasePath": "The path added at the beginning of the \"SavePath\" where the data will be persisted",
    "FortCreativePersistenceComponentBase:NonUniquePath": "The path added at the end of the BasePath in case the data this component is saving should be common across instances",
    "FortAIDirector:UnreachableLocationPathCost": "The path cost applied for path cost combat events when the target destination is unreachable",
    "MidiMusicTrackDesc:Patch": "The path to the fusion patch for this track, relative to the midimusic file",
    "TempestMovementComponent:MovementPath": "The path used to find the next movement destination if the MovementMode is path",
    "AIPatrolPathComponent:CurrentCloningNode": "The patrol path node we are being cloned from. We will let it know of our collision update while cut operation is occurring with the Creative Move Tool in game",
    "AIPatrolPathComponent:CopiedFrom": "The patrol path point copied over using the edit tool is momentarily serialized in here",
    "EFortPawnStasisMode.NoMovement_EmotesEnabled": "The pawn canNOT do most native actions nor move. They can still turn, fall, and perform emotes.",
    "EFortPawnStasisMode.NoMovementOrTurning_EmotesEnabled": "The pawn canNOT do most native actions, move nor turn. They can still fall and perform emotes.",
    "EFortPawnStasisMode.NoMovementOrFalling_EmotesEnabled": "The pawn canNOT do most native actions, move, turn, nor fall. They can still perform emotes.",
    "EFortPawnStasisMode.NoMovement": "The pawn canNOT do native actions nor move. They can still turn and fall.",
    "EFortPawnStasisMode.NoMovementOrTurning": "The pawn canNOT do native actions, move nor turn. They can still fall.",
    "EFortPawnStasisMode.NoMovementOrFalling": "The pawn canNOT do native actions, move, turn, nor fall",
    "FortAthenaMutator_SpecialRelevancy:PlayerPawnClass": "The pawn class use for this playlist",
    "FortPawnComponent_CustomDepth": "The pawn component used for control custom depth rendering, currently only meant for AFortPlayerPawnAthena and AFortAIPawn.\nCustom depth rendering is used for implementing effects like outlining (implemented in the base material) and showing\nhighlights for characters occluded by other geometry (implemented in a post process material, generally controlled by the\nAFortTimeOfDayManager, though sometimes overridden during replays, etc).",
    "FortMotorcycleVehicle:DoorBashScalarForPawnLaunch": "The pawn launch scalar used when the door bash launches players within a radius.",
    "FortEncounterPawnNumberCaps:PawnCapsPerPlayerCount": "The pawn number caps per player count. These are used for player count array index + 1. If there are more players than array entries then the highest index is used",
    "BuildingSMActorAttemptSpawnResourcesParams:InstigatorPawn": "The pawn that dealt damage to the building.",
    "FortObjectiveFilter_PlayerDowned:Downer": "The pawn that downed the player during this event.\nUsually the same as the author of the event, but can be different In cases of tamed wildlife or hired NPCs.",
    "PawnBountyInteractionInfo:PawnInInteractRange": "The pawn that is in interact range of this building and needs its interaction text updated.",
    "FortRemoteControlledPawnAthena:RemoteControlPawnSet": "The pawn that is the controller of this remote control pawn",
    "FortSurfaceTrackingComponent:OwningPawn": "The pawn that owns this component",
    "TempestLightningBoltData:SourcePawn": "The pawn that was chosen as the target for the lightning bolt",
    "ServerLaunchInfo:LaunchedPawn": "The pawn that was launched",
    "FortRemoteControlledPawnAthena:ControllingPlayerPawn": "The pawn that was unpossessed to remote control this pawn",
    "FortGameplayCueNotifyAthena_FallDamageImmunity:TargetPlayerPawn": "The pawn this cue is attached to.",
    "FortAIPawnUpgrade:PawnUpgradeDataPerPlayerCount": "The pawn upgrade data per player count. These are used for player count array index + 1. If there are more players than array entries then the highest index is used",
    "EQueueActionType": "The pending deployable base action struct that defines a desired action",
    "FortPlayerRecord:PlayerStatsData": "The per player stats data for the current zone",
    "SkyfireVaultOrbSpawner:ChanceToSpawnNewOrbByCategory": "The percent chance (0.0 - 1.0) that an orb will be spawned if all other checks pass during the periodic orb check, separated by config category (i.e. playlist).",
    "EQualitativePerfMetric.PercentFramesOverBadPingThreshold": "The percent of frames during the match that were over the 'bad ping threshold'.",
    "FlightParams:ControlFrameUpsideDownIgnoreNudgePercent": "The percent of the center of the upside down hemisphere which ignores\n              nudges. Make this a 1 in order to always ignore, or a 0 to never ignore.",
    "ImpulseDamageData:PercentageOfDamage": "The percent of the max damage this physics object should apply when the minimum impulse is triggered",
    "AthenaCapturePoint:BonusPercentIncreasePerPlayerCaptor": "The percent per second bonus increase if someone is dancing in the capture point",
    "AthenaCapturePoint:PercentDecreaseNoCaptor": "The percent per second decrease when a point is not locked and based on\n      contention rules say NumCapturingPoint is 0.",
    "AthenaCapturePoint:PercentIncreasePerPlayerCaptor": "The percent per second increase for each Player capture on the point. Basically\n      based on contention rules, (NumCapturingPoint * PercentIncreasePerPlayerCaptor * DeltaSeconds).",
    "FortInGameMapManager:MapExplorationThresholdPercentage": "The percentage increments at which to throw the OnMapExplorationThresholdReached event.  For example, if this value is set to 0.25, events will happen at 0.25, 0.5, 0.75, and 1.0.  This value is normalized from 0-1 where 1.0 happens once MaxPercentageMapExplored is reached (which is therefore sometime BEFORE the map it literally fully explored.  If set to 0, the threshold event will never fire.",
    "HUDWidgetRegistryEntry:MandatoryOnScreenPercent": "The percentage needed of a widget needed on the virtual canvas to be considered on screen.\n0 - The widget needs to be fully off the Virtual Canvas to be considered off screen.\n1 - Even 1 pixel off the virtual canvas is considered off screen.",
    "FortAIEncounterWaveProgressEstimation:PeakAndFadeWavePercentage": "The percentage of the wave progress that the peak and fade together comprise",
    "AthenaCapturePoint:CapturePercentage": "The percentage until capture, currently calculated on client and server\n      to save on bandwidth since this can change frequently.\n\n      Note: If client/server inaccuracy becomes and issue we will want to find a\n      good way to sync this up.",
    "FortAthenaMapInfo:GoldenPoiPercents": "The percentages of that number of poi's to be selected. The number of poi's is the column number in the data.\n              Each column can have a value for how likely it is to be that number of poi's selected.",
    "BuildingGameplayActorLaserGrid:MaterialCosineWavePeriod": "The period of the cosine wave used in the laser and outlet materials.",
    "FortEventConditional:RelevantPeriod": "The period of the stat that we want to compare",
    "StatNamesToTrack:Period": "The period to setup the stat with",
    "FortAthenaMutator_Cobalt:AvailablePerkRerolls": "The perk re-rolls available for the player per round",
    "BuildingFoundationStreamingData:PersistentHLODLevelIndex": "The persistent HLOD index we should use for this foundation",
    "FortQuestEarnedBadgeData:TemplateId": "The persistent name of the badge",
    "FortFeedbackEvent:Instigator": "The person who initiated the event to occur",
    "FortFeedbackEvent:Recipient": "The person who the event was directed at",
    "FortGameState:RecorderPlayerState": "The perspective we are following at any given time is not necessarily the player state that played the game\n              We can record the Player state of the local player so we can refer back to that player when we do not have a pawn.",
    "FortPlayerPet:PetAudioComponent": "The pet audio component for audio playback that can be anim-cancelled",
    "FortPlayerPet:PetItemDef": "The pet definition we were created from",
    "FortPlayerPetRepState:PetItemDef": "The pet definition we were created from",
    "FakeKillRelevancyPlayerDataEntry:PhaseNum": "The phase number that this kill request originated from, in case BP wants to know",
    "EQSActorSpawnerData:SafeZoneStateToStartSpawning": "The phase of the SafeZone when actor spawning will begin (if SpawnTrigger == SafeZoneState)",
    "FortMinigame:PreviousState": "The phase of the minigame before the current one",
    "SpecialEventTODMPhaseData:PhaseTag": "The phase to apply TODM modifications to.  Must match a PhaseTag used in the SpecialEventScript's PhaseInfoArray.",
    "ESplitStormProxyPhase": "The phases that the safe zone proxy will go through during its lifetime.",
    "FortPickup:TouchCapsule": "The physical capsule around the pickup base",
    "WeaponItemDefinitionDesignerData:WeaponActorClass": "The physical weapon actor to spawn for this",
    "FortPhysicsObjectComponent:PhysicsPreset": "The physics preset to use on this physics object.",
    "FortPickupEffect:ParentPickupActor": "The pick up actor that we are attached to",
    "FortAthenaPickRandomMontageStateTreeTaskInstanceData:PickedMontage": "The picked montage will be saved here.",
    "FortPickupEntryData:PickupGuid": "The pickup Guid of this entry",
    "FortPickupEffect:BackpackWorldPosition": "The pickup color",
    "FortPickupEffect:PickupColor": "The pickup color",
    "PlayerFishingTelemetryData:Item": "The pickup that was fished out of the water",
    "FortDadbroPickupDespawnData:Pickup": "The pickup to despawn",
    "EQSActorSpawnerClassToSpawnData:PickupClassToSpawn": "The pickup type that the Actor Spawner will attempt to spawn.\n     This class will be used as the spawned pickup object if SpawnActorType == EEQSActorSpawnerSpawnType::Pickup",
    "PartyMemberSharedQuestData:PndQst": "The pinned quest templateId for this party member",
    "CreativeSelectedActorInfo:DragStartGridSnapPoint": "The place inside of a grid tile where the ActorToSelectionAtDragStart was generated from.\n              Allows us to create Grid Snap locations if we combine this with ActorToSelectionAtDragStart\n              after flooring it to the closest grid corner.",
    "WaxPlayerDataEntry:TokenBasedPlacement": "The place of this player (0 for 1st) based solely on tokens.",
    "WaxPlacementData:Placement": "The placement of the player, <= 0 is invalid",
    "FortInGameLeaderboardPlacementData:Placement": "The placement of this entry (1 being first), with -1 being explicitly not placed.",
    "FortTeamMemberInfo:Platform": "The platform string of the player (see",
    "FortTeamMemberInfo:ConsoleUniqueId": "The platform unique id of the player if the player is on a console platform.",
    "FortCreativeDiscoveryTestCohort:PlatformWhitelist": "The platforms that this cohort is available for.",
    "FortCreativeDiscoveryTestCohort:PlatformBlacklist": "The platforms that this cohort is not available for.",
    "FortCreativeDiscoveryContentPanel:PlatformWhitelist": "The platforms that this panel is available on.",
    "FortCreativeDiscoveryContentPanel:PlatformBlacklist": "The platforms that this panel is not available on.",
    "FortAthenaMutator_Bagel:LocalPlayerFriendsLeaderboardQuery": "The player Friends Leaderboard Query",
    "FortAthenaMutator_Mash:LocalPlayerFriendsLeaderboardQuery": "The player Friends Leaderboard Query",
    "FortPlayerControllerComponent_RespawnOnDeath:DroneViewTargetBlendDuration": "The player camera's blend time when switching its viewtarget from the pawn to the respawn drone during the respawn sequence.",
    "PlayspaceConfigComponent:PlayerComponentClass": "The player component class override that can be set in the editor",
    "EAdHocSquads_LeaveSquadReason.ManualLeave": "The player decided to leave on their own.",
    "PlayerMarkerMutatorEffectData:MarkedPlayerState": "The player for this active PlayerMarker.",
    "ERespawnAndSpectateServerPayloadId.RespawnTargetSelected": "The player has chosen to respawn at this respawn/spectate target",
    "ERespawnAndSpectateServerPayloadId.SpectateAndRespawnTargetSelected": "The player has chosen to spectate and respawn this item",
    "ERespawnAndSpectateServerPayloadId.SpectateTargetSelected": "The player has chosen to spectate this respawn/spectate target",
    "EAdHocSquads_LeaveSquadReason.PlayerDiedAndCannotBeRevived": "The player has died and canNOT be revived so they were kicked out of the squad.",
    "EFortFriendRequestStatus.PendingReceived": "The player has received a friend request from the other player that is pending action",
    "EFortFriendRequestStatus.PendingSent": "The player has sent a friend request to the other player that is pending action",
    "EAdHocSquads_LeaveSquadReason.PlayerHasWonGame": "The player has won the game and are no longer playing.",
    "EAdHocSquads_InviteStatus.Unset": "The player is NOT currently inviting and we have no information about why they stopped inviting (probably they never invited.)",
    "EAdHocSquads_InviteStatus.InviteCancelled_ByInvitingPlayer": "The player is NOT currently inviting. The player ended their last invite, or was possibly killed.",
    "EAdHocSquads_InviteStatus.InviteCancelled_SquadFull": "The player is NOT currently inviting. Their last invite ended because either was or became full.",
    "EAdHocSquads_InviteStatus.InviteEnded_APlayerAcceptedTheInvite": "The player is NOT currently inviting. Their last invite ended in a squad up between players.",
    "EAthenaAerialPhase.Falling": "The player is Parachuting.",
    "ERespawnAndSpectatePlayerRespawningState.RespawnFinishing": "The player is almost finished respawning, but still needs to calculate data one more time",
    "EAdHocSquads_InviteStatus.Inviting": "The player is currently performing the invite emote.",
    "EAthenaAerialPhase.BusCantExit": "The player is not in an aerial phase of the game.",
    "EAthenaAerialPhase.Skydiving": "The player is on the bus - can jump, but not the jump leader.",
    "EAthenaAerialPhase.BusCanExitEndZebulonDrone": "The player is on the bus - can jump.",
    "EAthenaAerialPhase.BusCanExit": "The player is on the bus - can't jump.",
    "FortPlayerController:ActiveSprayInstances": "The player is only allowed to have N instances of sprays alive at once, this is the list of them in order of creation (server only)",
    "FortPlayerController:ActiveToyInstances": "The player is only allowed to have N instances of toys alive at once, this is the list of them in order of creation (server only)",
    "AccountIdAndMatchEndData:bAbandoning": "The player is quitting the match",
    "EAthenaAerialPhase.Parachuting": "The player is skydiving.",
    "EAdHocSquads_LeaveSquadReason.JoinedADifferentSquad": "The player left their previous squad to join a new squad.\n     Should ONLY get called if bFollowingPlayerAutomaticallyLeavesCurrentSquadWhenSquadingUp is enabled.",
    "PaybackMutatorEffectData:KillerPlayerState": "The player marked for payback",
    "FortDecoHelper:DesiredRelativeRotation": "The player set desired location.",
    "FortGameplayCueNotifyLoop_AbductionWarning:PlayerSocket": "The player socket to use for the target location, otherwise we use the center of the bounds.",
    "FortMinigamePlayerStartComponent:PlayerStarts": "The player start actor controlled by this start point",
    "DeployableBasePlot:PlayerStart": "The player start actor for this deployable plot",
    "PlayspaceComponent_PlayerManager:PlayerStateComponents": "The player state component we want to add to the player state",
    "SkyfireSquadMemberStatusData:PlayerState": "The player state of the squad member",
    "CustomFeedMessageContext:OwningPlayerState": "The player state owning the UFortPlayerStateComponent_CustomFeedMessage triggering this feed message",
    "FortSoundIndicatorComponent:RequestingPlayerState": "The player state that requested the display of this sound indicator. Useful in cases where the sound indicator component is on an actor that is normally neutral in the world but that makes a sound when a player interacts with it.",
    "EliminationFeedMessage:PlayerStateMessage": "The player that instigated the message. *",
    "EliminationFeedMessageRepl:PlayerStateMessage": "The player that instigated the message. *",
    "SynchronizedTeleportPlayer:FortPlayerState": "The player that is being teleported",
    "FortGravityGunHolder:OwningPlayer": "The player that owns this actor.",
    "FortObjectiveFilter_PlayerDowned:DownedPlayer": "The player that was downed during this event",
    "FortObjectiveFilter_PlayerRevealed:RevealedPlayer": "The player that was marked during this event",
    "AdHocSquad_InviteData:InvitingPlayerState": "The player this InviteData is tracking.",
    "FortGameCueNotifyLoop_Cloak:TargetPlayer": "The player this gameplay cue is targeting (i.e. the player being cloaked.)",
    "FortObjectiveFilter_Spray": "The player used a spray",
    "UrgentQuestData:DisplayPlayer": "The player we're trying to show.",
    "UrgentQuestData:AcceptingPlayer": "The player who accepted the urgent quest.",
    "AthenaCarPlayerSlot:OperatingTurretActionTag": "The player will start performing this action upon entering a turret seat",
    "ERespawnAndSpectatePlayerRespawningState": "The player's current phase in the respawn process (as managed by AFortAthenaMutator_RespawnAndSpectateSelect)",
    "AccountIdAndMatchEndData:EligibilityStatus": "The player's party eligibility for Reboot Rally xp quest progression.",
    "EndZoneScoreAndAwards:EligibilityStatus": "The player's party eligiblity status for Reboot Rally xp quest progression.",
    "ERespawnAndSpectatePlayerRespawningState.Respawning": "The player's respawn has been triggered and will happen as soon as the client and server are ready\n It is ONLY during this state where we should attempt to manage the actual respawn and pass along needed respawn information (like the respawn location/rotation)",
    "UIStateChartContextChangeSet:Changes": "The player-specific keys and values to set",
    "EarnedBadgePlayerData:PlayerId": "The players net id",
    "CreativeMultiSelectedActorsInfo:InstigatorPlayers": "The players that are selecting the actor\nThis is for the case when a player deselect the actor but there is other still selecting the same actor\nIn that case we will want to keep the culling distance for selection so we need to keep tracking of the players",
    "DeploymentConsoleTeamData:Team": "The players' team.",
    "LimitedLifeDataEntry:BackingActor": "The playerstate if not in team mode.",
    "FortLivingWorldConfigOverride:PlaylistTag": "The playlist for this override. If empty, the override will be applied for every playlist. Otherwise, the playlist must contains one of these tags.",
    "CarryOverPlayerAugment:SourcePlaylistName": "The playlist in which this augment was granted. Used for filtering augment carry over between matches.",
    "CarryOverPlayerAugmentPersistenceData:source_playlist_name": "The playlist in which this augment was granted. Used for filtering augment carry over between matches.",
    "FortSafeZoneIndicator:PlaylistMaxSafeZoneIndex": "The playlist specified final phase index. If >= 0, the safe zone will not automatically proceed past this phase",
    "MinimapCaptureRequest:Playlist": "The playlist to set for the project settings.",
    "AthenaDeveloperSettings:Playlist": "The playlist to use for Battle Royale PIE sessions (the game mode defaults to Playlist_DefaultSolo if not set)",
    "PlaysetPreview:PlaysetToPlace": "The playset item definition that was currently being placed.",
    "FortMinigameScoreRegistry:Playset": "The playset the score registry corresponds to",
    "FortLevelSaveComponent:LoadedPlot": "The plot that is loaded or being loaded",
    "FortPoiSwapPlayspace:PlotToLoad": "The plot that loads in place of POI",
    "PointProviderFilterEntry:CalendarEventConditions": "The point provider filter will only be considered if the calendar event condition is met at the beginning of the match. Empty condition are always true.",
    "ELivingWorldPointProviderSpawnLimiterBehavior.Concurrent": "The point provider will disable itself if the MaxNumberOfSpawn is reached. It will reenable itself when the number returns below the max.",
    "ELivingWorldPointProviderSpawnLimiterBehavior.Lifetime": "The point provider will only allow MaxNumberOfSpawn to happen before disabling itself for the whole game.",
    "FortConversationSentence:TalkingHeadTexture": "The portrait to display in the talking head UI",
    "DanceMontagePlayInfo:Offset": "The position in seconds where the montage should play from",
    "FMontageBeatSyncInfo:Offset": "The position in seconds where the montage should play from",
    "AudioClusterOneShotInfo:Position": "The position of the event",
    "ChaserMarkerPosition:MarkerPosition": "The position of the marker on the health bar. 0.0 - 1.0.",
    "FortAthenaGoatVehicle:LeanSocketPositionBL": "The position of the socket where the back left lean force should be applied",
    "GoaFInPersistent:LeanSocketPositionBL": "The position of the socket where the back left lean force should be applied",
    "FortAthenaGoatVehicle:LeanSocketPositionBR": "The position of the socket where the back right lean force should be applied",
    "GoaFInPersistent:LeanSocketPositionBR": "The position of the socket where the back right lean force should be applied",
    "FortAthenaGoatVehicle:LeanSocketPositionFR": "The position of the socket where the front right lean force should be applied",
    "GoaFInPersistent:LeanSocketPositionFR": "The position of the socket where the front right lean force should be applied",
    "FortPlayerPawnAthena:LandFXLocationOffset": "The position offset added to pawn position when spawning land FX",
    "FortQuestMapCosmetic:CosmeticPosition": "The position to set on the Cosmetic resource",
    "FortPickup:OptionalMissionGuid": "The possible guid of the mission that spawned this object",
    "FortCreativeMessageDispatcherErrorMessage:LimitValue": "The possible maximum limit of the value that we're going over to cause the error",
    "FortItemEntryStateValue:NameValue": "The possible name value",
    "FortVolumeTimeOfDayComponent:OverridePostProcessComponent": "The post process component used to override the post process on the day sequence actor",
    "BuildingTrapFloor_Turret:BlockingActor": "The potential actor that could be in the turrets way from hitting a pawn",
    "FortMission:PotentialBadgesArray": "The potential badges that can be earned during this mission that have been provided from blueprint",
    "FortPhysicsReplicatedTargetGhost:SkeletalMesh": "The potential skeletal mesh to use for the physics ghost",
    "FortPhysicsReplicatedTargetGhost:StaticMesh": "The potential static mesh to use for the physics ghost",
    "MaterialReservation:MaterialInstance": "The pre-allocated dynamic material instance",
    "EActivePreTravelSetupStepsMask.WaitingForSubGameContent": "The pre-travel setup is complete",
    "TempestLightningComponent:LightningBoltTargetingPreset": "The preset used for the lightning bolt targeting",
    "FortHeldObjectComponent:PlacementPreviewActor": "The preview actor we show in the world for placement",
    "TrapItemDefintionDesignerData:PlacementPreviewClass": "The preview or \"deco\" placement class. Usually transparent blue in color.",
    "RewardPreviewInfo:PreviewParams": "The preview params used for the preview.Generated automatically by the code from rewards",
    "WaxPlayerDataEntry:PreviousTokens": "The previous amount of tokens this player had, mostly used for UI.",
    "FortCreativeMoveTool:CutActorsPrereplication": "The previous list of cut actors before replication took place. Used to determine if any actors left the Cut Actors list.",
    "FortCreativeMoveTool:DisableCollisionActorsPrereplication": "The previous list of disable collision actors before replication took place. Used to determine if any actors left the Disable Collision Actors list.",
    "RootMotionSource_RocketRam:PreviousEndLocationWithoutOffset": "The previous location this root motion source tried to move the player to.",
    "PhysicsObjectMovementStateData:PreviousMovementState": "The previous movement state",
    "FortPlayerController:PreviousBuildableClass": "The previous selected buildable building class, if any; Only valid on a local controller",
    "FortWeaponRanged:LastTargetingRotAdjustmentWeight": "The previous tick's blend weight between non-targeting and targeting cameras",
    "LatentRepPlayerData:PrevLocationReplicatedTime": "The previous time the location was replicated to the client (used for estimating time between updates)",
    "SpecialActorRepData:PrevLocationReplicatedTime": "The previous time the location was replicated to the client (used for estimating time between updates)",
    "LatentRepPlayerData:PrevYawReplicatedTime": "The previous time the yaw was replicated to the client (used for estimating time between updates)",
    "SpecialActorRepData:PrevYawReplicatedTime": "The previous time the yaw was replicated to the client (used for estimating time between updates)",
    "FortPlayerState:CachedPreviousWorldPlayerId": "The previous world player id used by this player state, happens when PS is duplicated and added to the inactive ps",
    "FortPlayerControllerAthena:PreviousPawn": "The previously possessed pawn, if valid.",
    "CatalogDynamicBundleItem:DiscountedPrice": "The price to pay for this item under this bundle",
    "FortPlayerController:MainMcpProfile": "The primary (persistent inventory) profile for this MCP account",
    "FortPlayerController:AthenaProfile": "The primary athena profile for this MCP account",
    "EFortKatanaPrimaryAttackVariation.InAir": "The primary attack that occurs just after the player touches the ground after an in air strike",
    "DAD_CosmeticItemUserOption:VFXColor": "The primary color of the cosmetic for transition effects.",
    "FortAnimNode_AnimSetDrivenRandom:RandomSlotName": "The primary filter for this anim node (in addition to whatever context tags are specified)",
    "FortQuickBars:PrimaryQuickBar": "The primary quick bar - currently GUIDs but should be changed to be UFortItems when supported by the server",
    "FortWorldPlayerLoadout:PrimaryQuickBarRecord": "The primary quick bar record",
    "FortMcpQuestObjectiveInfo:ObjectiveStatHandle": "The primary stat this object is completed by, this is used to uniquely identify it",
    "BuildingActor:PrimarySurfaceType": "The primary surface type of this building actor. If default, will attempt to determine it another way",
    "FortAthenaVehicle:PrimarySurfaceType": "The primary surface type of this building actor. If default, will attempt to determine it another way",
    "FortPhysicsPawnObject:PrimarySurfaceType": "The primary surface type of this building actor. If default, will attempt to determine it another way",
    "FortWeakPointComponent:PrimarySurfaceType": "The primary surface type of this building actor. If default, will attempt to determine it another way",
    "FortScoutDrone:PrimarySurfaceType": "The primary surface type of this drone.",
    "FortMissionAlertCategoryData:Priority": "The priority associated with this mission alert category",
    "PlayspaceComponent_AIPerceptionModifier:AIBotSightClampPriority": "The priority for the sight clamps for the AI bots. Lower value means a higher priority",
    "FortClientAnnouncementData_Basic:Priority": "The priority for this announcement",
    "FortClientAnnouncement:Priority": "The priority of this announcement, lower priority means it will happen first",
    "FortAthenaMutator:OverridePriority": "The priority of this mutator when returning EFortMutatorReturnValue::Override. Initial value of None to not affect any existing functionality that does not use this",
    "FortCreativeDiscoveryTestCohort:SelectionChance": "The probability [0, 1] of this test being selected.",
    "FortCreativeDiscoverySplicedEntry:VisibilityChance": "The probability [0, 1] that this entry will be visible.",
    "DaySequenceModifierComponent:ProceduralDaySequence": "The procedurally generated sequence containing our override tracks. Owned by this component.",
    "FortPlayerController:McpProfileGroup": "The profile group for this MCP account",
    "McpProfileChangeRequest:BaseCommandRevision": "The profile revision this is built on top of",
    "QualitativePerfMetricProfile:ParentProfileName": "The profile to inherit from",
    "VkProjectDoc:Author": "The project author",
    "VkContentPackageRequest:ProjectId": "The project context we're executing within",
    "VkProjectDoc:Owner": "The project owner",
    "VkProjectInfoSlim:Owner": "The project owner",
    "FortHookGunRope:OwningProjectileMeshSocketName": "The projectile socket to use to attach to.",
    "FortHookGunRope:OwningProjectileMesh": "The projectile static mesh that this rope is attached to, aka the projectile that spawns this rope.",
    "HookGunRopeRepData:Projectile": "The projectile static mesh that this rope is attached to, aka the projectile that spawns this rope.",
    "FortGravityGunHolder:TrajectorIndicator": "The projectile trajectory object.",
    "FortCurieMaterialDefinition:FirePropagationCost": "The propagation fuel cost to propagate fire to this material",
    "EFrontEndCamera.HeroLoadout": "The proper hero loadout camera, to be used once the hero loadout system goes online permanently.",
    "FortGameplayEventReference:EventRefMemberName": "The property being reference; could be an event descriptor or function depending on usage.",
    "PropertyOverride:PropertyName": "The property name key; used for finding a property via reflection data",
    "PropertyOverrideMk2:PropertyName": "The property name key; used for finding a property via reflection data",
    "AssetAdapterInfo:AdaptedPropertyName": "The property on the adapted class that the asset will be assigned to.",
    "GameplayEventSubscription:EventDescriptor": "The property on the object that describes the event we want subscribe to receive.",
    "FortGameplayTriggerEventDescriptor:EventDescriptor": "The property on the owner actor that describes the event we should use to handle events on this channel.",
    "FortGameplayReceiverEventFunction:EventFunction": "The property on the owner actor that provides the event function we should use to handle events on this channel.",
    "VkModuleVersionModerationStatus:PublishStatus": "The published status of this module version",
    "TimeOfDayControlledLightData": "The purpose of this struct is to cache the lightning component data that's used in blueprints",
    "TimeOfDayBlueprintDefaultVariables": "The purpose of this struct is to cache the various instance properties defined on the actor",
    "SKPushVehicleInPersistent:SKPushVehicleConfigs": "The push vehicle configs",
    "FortRewardQuantityPair:Quantity": "The quantity of the reward",
    "ItemCollectorOverrideItemRow:Quantity": "The quantity target item to spawn",
    "WindSplineComponent:BlockageTagQuery": "The query for filtering actors that can block the wind spline. Empty tag query means the wind spline won't be blocked automatically",
    "WindSplineComponent:PawnSkydivingTimeLimitQuery": "The query for filtering pawns that should have a skydiving time limit",
    "WindSplineComponent:TargetTagQuery": "The query for filtering the targets",
    "FortAISpawnerUtilityComponent:EnvironmentQuery": "The query to use to find places near the owning actor.",
    "BuildingRift:EnvironmentQuery": "The query to use to find places near the rift to spawn AI.",
    "TempestMovementComponent:FindNextMovementLocationQuery": "The query used to find the next movement destination if the MovementMode is EnvQuery,",
    "FortUpdatedObjectiveStat:Quest": "The quest associated with this stat",
    "UpdatedQuestObjectiveData:QuestID": "The quest associated with this update",
    "FortQuestDelete:McpId": "The quest instanceId",
    "EChallengeBundleQuestUnlockType.BundleLevelup": "The quest is granted after the bundle has prestiged to level X",
    "PetResponseFromQuestSystem:ObjectiveStatHandle": "The quest objective required to trigger this response",
    "FortVideoInfo:RequiredActiveQuest": "The quest that must be active in order for the player to play this movie.",
    "BountyQuestSettings:TargetQuestToGrantPtr": "The quest to grant to bounty targets.",
    "BountyQuestSettings:ProtectorQuestToGrantPtr": "The quest to grant to the target's squad.",
    "FortEventConditional_Quest:Quest": "The quest to listen to for this event conditional.",
    "FortSubgameClientSettings:PinnedQuestInstances": "The quests the player has pinned to track in the zone, instance ids of account items",
    "FortDeployableBaseManager:PendingDeployableManagerActions": "The queue of pending plot actions",
    "FortPhysicsObjectManager:PhysicsObjectActivationQueue": "The queue of physics objects ready to be activated",
    "FortPlayerController:ClientQuickBars": "The quick bar data for this player",
    "BuildingGameplayActorRadioTower": "The radio tower actor in the world with a terminal that players interact with to obtain information regarding future storm circles.\nThis is a midmatch objective feature.",
    "MilkshakeFieldSystemActor:Radius": "The radius around the field system actor that it effects.",
    "IndicatedActorDataWithFilter:OverlapRadius": "The radius around the instigator to grab actors from.",
    "TempestLightningComponent:LightningBoltImpactIgnitionRadius": "The radius around the lightning bolt used to find actors to ignite during the lightning bolt impact",
    "TempestLightningComponent:LightningBoltGrassIgnitionRadius": "The radius around the lightning bolt used to ignite the underlying grass",
    "FortInGameMapManager:ExploredRadius": "The radius around your character that is fully removed of any fog.",
    "WindSplineComponent:TargetingRadius": "The radius for target selection",
    "FortGravityGunHolder:VehicleBroadcastImpactAtLocationRadius": "The radius for the impact to move the vehicle via the BroadcastAbilityImpactAtLocation function.",
    "FortThreatVisualsManager:CloudRadius": "The radius in X and Y directions of the cloud class.",
    "TempestLightningComponent:LightningRadius": "The radius of the lightning cloud",
    "FortOpticConfig:OpticRadius": "The radius of the optic's \"tube\" at the position defined in \"Optic Entrance\"",
    "SphericalDriveParams:Radius": "The radius of the sphere.\n              NOTE: We should grab this off of the primitive instead.",
    "FortAnimNode_GrindRailSlopeWarping:BaseSplineRadius": "The radius of the visual mesh for the spline to be used for placing the feet.",
    "FortInGameMapManager:SeenRadius": "The radius outside the explored falloff radius that is considered seen but not currently occupied.",
    "FortAthenaMapInfo:SafeZoneStartingRadius": "The radius that the safe zone starts at.",
    "FortSafeZonePhaseInfo:Radius": "The radius the safe zone should shrink to by the end of the phase",
    "FortControllerComponent_MarkActorsInRadius:AIIndicatorRadius": "The radius to check around the player for AIs to mark with an indicator",
    "HighlightObjectData:OverlapRadius": "The radius to check for actors to highlight. Actors that leave the radius will lose the highlight.",
    "FortAthenaMutator_RespawnAndSpectateSelect:RandomRespawnRadius": "The radius used to pick a random location around the respawn actor to respawn a player at",
    "FortCurieFXSettings:LandscapeFireRandomLocationRadius": "The radius used to randomly pick points around the landscape grass grid center",
    "BattleLabDeviceGameplayActor_VendingMachine:LootTossAngleDegrees": "The random angle loot is tossed at when launched from this machine",
    "DigestedEvasiveManeuverSkillSettingsSpecialization:CooldownRandomDeviation": "The random deviation on the cooldown.",
    "EvasiveManeuverSkillSettingsSpecialization:CooldownRandomDeviation": "The random deviation on the cooldown.",
    "DigestedEvasiveManeuverSkillSettingsSpecialization:MaxDurationRandomDeviation": "The random deviation on the maximum duration.",
    "EvasiveManeuverSkillSettingsSpecialization:MaxDurationRandomDeviation": "The random deviation on the maximum duration.",
    "BuildingGameplayActorLaserGrid:LaserMaterialRandomFlickeringSpeed": "The random flickering speed used on the laser material.\n     A random value between [X, Y] is used.",
    "BuildingGameplayActorLaserGrid:OutletMaterialTransitionOffTimestampOffset": "The random timestamp offset used on the material when the outlet is transitioning off.\n     A random value between [X, Y] is used.",
    "BountyQuestSettings:HighThreatRange": "The range at which to indicate a high threat level to the bounty target.",
    "BountyQuestSettings:MediumThreatRange": "The range at which to indicate a medium threat level to the bounty target.",
    "KatanaTargetingComponent:AdditionalOutOfRangeDetection": "The range beyond the DashDistance and AdditionalForwardAttackRange we are detecting enemies. This is to create an effect in the UI to show when we are almost in range.",
    "KatanaTargetingComponent:AdditionalDashForwardAttackRange": "The range beyond the DashDistance the forward attack has. Used to find blocking actors that will be destroyed by the\n    forward attack to prevent the player from being able to dash through them.",
    "BuildingTrap:TrapRangeMesh": "The range indication mesh of the trap",
    "FortAthenaMutator_RespawnAndSpectateSelect:RandomRespawnRotationDegrees": "The range of random rotation applied to the respawn rotation (in degrees).\n Example: a value of 45 will allow the respawn rotation to rotate -45 to 45 degrees from the base rotation",
    "FortAbilityTargetSelection:Range": "The range of the target selection.",
    "FortKatanaPrimaryAttackVariationInfo:Range": "The range this attack variation will have.",
    "FortWeaponRanged": "The ranged weapon base class - currently all weapons are this class and are differentiated by data",
    "FortWeaponRangedDual": "The ranged weapon dual wield class",
    "TDMPlayerStandingInfo:PlayerRanking": "The ranking of this player's score.",
    "FindActorByClassData:Rarity": "The rarity is used to index into the Price table. We'll do Price->GetValueAtLevel(Rarity Value).",
    "EFortRarity": "The rarity of an item. Higher values are rarer.",
    "FortCriteriaRequirementData:RequiredRarity": "The rarity required to meet this criteria",
    "AnimSpinner:RotationRate": "The rate as a percentage for how fast this is spinning based on the base rotation speed",
    "FlightParams:SteerPitchRate": "The rate at which steering can control the pitch of the target heading\n              relative to the control frame.",
    "FlightParams:SteerYawRate": "The rate at which steering can control the yaw of the target heading\n              relative to the control frame.",
    "DanceMontagePlayInfo:PlayRate": "The rate at which to play the montage",
    "FMontageBeatSyncInfo:PlayRate": "The rate at which to play the montage",
    "CinematicSequenceDeviceBase:PlayRate": "The rate at which to playback the cinematic",
    "CachedRechargeAmmoData:ChargeRate": "The rate at which we recharge the weapons ammo",
    "WindSplineComponent:TargetingRefreshRate": "The rate in seconds at which we perform target selection",
    "FortAthenaMutator_DadBro:OverriddenTimeOfDayRate": "The rate of in-game time passage while DadBro is active",
    "FortCurieMaterialDefinition:WaterContentStabilizationRate": "The rate of water content per second at which the water content stabilizes to the default value.",
    "BountyQuestSettings:ThreatRefreshRate": "The rate that the bounty target threat meter is refreshed at.",
    "FortAthenaMutator_Cobalt:RadiusRatioForRespawn": "The ratio of the radius distance from the center of the storm shield where the players should respawn at, aka, how far away from the center should the players respawn at",
    "FortTooltipValueData:Value": "The raw value",
    "ReplicatedStatValues:StatValue": "The raw value",
    "FortEventReactionsTableRow:EventReactions": "The reactions to happen when all conditionals have been achieved.",
    "EFortBuildingInitializationReason": "The reason a particular building piece is being initialized",
    "FakeKillRelevancyPlayerDataEntry:Reason": "The reason for the kills, which BP can use to perform different visuals",
    "EMiniMapIconParameterDataType": "The reason the Daybreak match ended. Used for analytics.",
    "EAdHocSquads_LeaveSquadReason": "The reason why a player left the squad they were in.",
    "FortControllerAIBotComponentTelemetryData_Disguise:RevealReason": "The reason why this NPC was revealed",
    "BuildingProp_DeimosSpawner:KillAllAIReceiverComponent": "The receiver component on this spawner for killing all active AI",
    "BuildingProp_CreaturePlacer:CreatureKilledTransmitComponent": "The receiver component on this spawner for turning off the spawner",
    "BuildingProp_CreaturePlacer:TurnOffReceiverComponent": "The receiver component on this spawner for turning off the spawner",
    "BuildingProp_DeimosSpawner:TurnOffReceiverComponent": "The receiver component on this spawner for turning off the spawner",
    "BuildingProp_CreaturePlacer:TurnOnReceiverComponent": "The receiver component on this spawner for turning on the spawner",
    "BuildingProp_DeimosSpawner:TurnOnReceiverComponent": "The receiver component on this spawner for turning on the spawner",
    "BuildingProp_DeimosSpawner:KillSpawnerReceiverComponent": "The receiver component on this spawner to kill the spawn rift",
    "FortPlayerPawn:GliderRedeployHeighLimitRow": "The redeployable height limit for the glider",
    "FortObjectiveAvailableConversation:ConversationRef": "The reference to the conversation to use",
    "FortObjectiveConversation:ConversationRef": "The reference to the conversation to use",
    "PlaylistFrontEndData:WeakPlaylistData": "The reference to the data asset for the playlist",
    "EOnlineRegionSelection.User": "The region preference from the Fortnite client is used.",
    "FortActorOptionsComponent:PlayerOptionData": "The registry of property overrides that have been applied against the target object",
    "CatalogDynamicBundleItem:RegularPrice": "The regular catalog price for this item",
    "SKPushVehicleInPersistent:PushForceRelativeLocation": "The relative location on the vehilce to apply the push force at.",
    "FortCharacterMovementMutatorComponent:BuffetBubblesMaxRelativeSpeed": "The relative max speed we can move within the box",
    "BuildingWall:AutomaticSlidingDoorBoxOffset": "The relative offset to apply to the automatic sliding door trigger",
    "VehicleModStaticMeshAttachmentData:RelativeTransform": "The relative transform to spawn the static mesh at.\nIf AttachSocketName is provided, this will be relative to the socket location.\nOtherwise, it is relative to center of skeletal mesh.",
    "ValkyrieProjectDescriptor:CompatibilityVersion": "The release version of the editor with which we last modified this project",
    "FortChallengeBundleScheduleEntry:ChallangeMinBuild": "The release version this item will be introduced with. If something references this item or anything it references in a build before this release is made, CIS errors will occur.",
    "FortAthenaMutator_SupplyDrop:SupplyDropRemovalQuery": "The removal supply drop query",
    "FortCurieFXSettings:LandscapeCharRenderTarget": "The render target used to write charred data",
    "FortControllerComponent_MapDiscoverability:DiscoveryRenderTarget": "The render target which should be used for poi unmasking",
    "FortAthenaMutator_RespawnWaveTeamData:ReplicatedTimeStamp": "The replicated copy of TimeStamp, when PlayerStates is non-empty.  On the client, this is copied back into TimeStamp in OnRep_WaveDataArray.",
    "FortAthenaVehicle:ForceKinematicOnClientCount": "The replicated count to force clients to make the vehicle kinematic (i.e. turn off simulate physics)\n     @note: This is extremely heavy handed, and makes sense for rare gameplay cases.\n     @note: The driving client will not abide by this variable and will maintain the simulation",
    "AthenaResurrectionComponent:CloneMachineRepData": "The replicated data for the clone machine",
    "FortControllerComponent_InventoryService:GlobalCurrencyData": "The replicated data of the global currency data",
    "FortVolumeTimeOfDayComponent:DaySequenceModifierData": "The replicated day sequence modifier data",
    "TempestMovementComponent:MovementData": "The replicated movement data",
    "FortTrackMovementComponent:ReplicatedTrackMovement": "The replicated server spline and distance. Used to simulate and correct client side movement.",
    "TempestTornadoForcesComponent:ActorsToClientSimulate": "The replicated set of actors that need to run the physics simulation on the client's tick",
    "PlayspaceControllerComponent_PlayerSpawning:ReplicatedSpawnInfo": "The replicated spawn info to use by the client to support transiting the client for the player spawn",
    "PlayerDefinedStatFilterArray:ReplicatedEntries": "The replicated stat entries, used to help instantiate the \"real\" stat instances on server and client",
    "FortProjectileMovementComponent:FortStopSimulatingRepData": "The replicated stop location data",
    "FortDagwoodVehicle:RechargeableBoostPercent": "The replicated value of the current rechargeable boost percent.",
    "FortProjectileMovementComponent:ReplicatedVelocityData": "The replicated velocity for this movement component",
    "FortAthenaMutator_MarkerUtilities:TopScoringPlayerSpecialActorRepInterval": "The replication interval to use for special actor locations for players in leading teams",
    "EFortFriendRequestStatus.Accepted": "The request has been accepted and the players are friends",
    "EIndexNavigationResult.Succeeded": "The requested movement was carried out",
    "EIndexNavigationResult.Clamped": "The requested movement was not carried out due to clamping",
    "EIndexNavigationResult.StepOff": "The requested movement was not carried out due to stepping off the end of\nthe navigable range. This differs from \"Clamped\" in that it is effectively\nsaying \"this movement would be allowed, except that there are no more items\nwithin this range.\" If the navigable range is part of a larger sequence,\nthis is a signal that navigation can be moved beyond the range represented\nby the model.",
    "EIndexNavigationResult.Modified": "The requested movement was partially carried out but may have been altered",
    "FortTooltipValueData:FormattedValue": "The requested value, formatted for display",
    "InteractionType:RequestingPawn": "The requesting pawn.",
    "FortMissionAlertData:RequiredEventFlag": "The required event flag (example: EventFlag.Storms) this will always need to be worked out between those who setup the calendar and those that setup this spreadsheet",
    "FortTheaterMapData:RequiredEventFlag": "The required event flag to see this theater",
    "AlterationSlot:UnlockLevel": "The required schematic level to unlock the alteration slot.",
    "AlterationSlot:UnlockRarity": "The required schematic rarity to unlock the alteration slot.",
    "ConversationParticipantRequirement:Requirement": "The requirement to be tested (e.g. 'participant has tag / participant has < X health')",
    "FortTheaterRuntimeData:TheaterVisibilityRequirements": "The requirements that gate whether this theater is visible or not",
    "FortTheaterMapRegionData:Requirements": "The requirements to access this region",
    "FortTheaterMapRegionData:MissionAlertRequirements": "The requirements to access this region for mission alert tiles. If there is no matching entry in this array the normal requirements for this region will be used.",
    "FortTheaterRuntimeData:Requirements": "The requirements to access this theater",
    "FortTheaterMapTileData:Requirements": "The requirements to access this tile",
    "FortTheaterTileEditorData:Requirements": "The requirements to access this tile",
    "FortLobbyBeaconHost:LastReservationCountForPermissionTimeoutChange": "The reservation count that was present the last time the permission timer was modified",
    "FortFocusedBuildingInfo:BuildingMaterial": "The resource that this building is made out of and/or provides",
    "FortPlayerControllerComponent_RespawnOnDeath:RespawnLocation": "The respawn location determined by CalculateRespawnData. Replicates to the client.",
    "RespawnAndSpectatePlayerComponent:RespawningState": "The respawn phase of the player. If their respawn is being managed and what is blocking the player's respawning",
    "VkModuleVersionDoc:SourceVersion": "The respective cooked version",
    "VkJobOutput:Manifest": "The respective manifest",
    "VkModuleVersionDoc:Version": "The respective version",
    "VkModuleVersionModerationStatus:Version": "The respective version",
    "PetResponseFromQuestSystem:ResponseTag": "The response to trigger",
    "AthenaRewardResult": "The result of a call to EndBattleRoyaleMatchForPlayer",
    "FortAthenaWorldConditionInstanceData:bOutResult": "The result of the query will be saved here; kept updated as we go.",
    "CardPackResultNotification:DisplayLevel": "The resulting level of the pack for display purposes (how valuable we should make it appear during the opening process)",
    "FortAthenaMutator_SupplyDrop:BaseQueryResults": "The resulting locations of the base",
    "FortWeapon:ReticleDefaultColor": "The reticle color to use",
    "FortWeapon:ReticleNoTargetColor": "The reticle color to use when there is no valid target",
    "FortWeapon:CurrentReticleColor": "The reticle colour used to displayed the reticle in the HUD",
    "FortWeapon:ReticleImage": "The reticle image to use",
    "FortWeapon:ReticleBuildingColor": "The reticle over enemy color to use",
    "FortWeapon:ReticleEnemyColor": "The reticle over enemy color to use",
    "FortCreativeDiscoverySurfaceRevision:Revision": "The revision of the surface asset.",
    "FortPartyRepData:CreativeDiscoverySurfaceRevisions": "The revisions of each creative discovery surface that the party should synchronize to.",
    "ECollectionBookRewardType.Book": "The reward is for advancing the book xp to the next level reward",
    "ECollectionBookRewardType.Page": "The reward is for completing a page",
    "ECollectionBookRewardType.Section": "The reward is for completing a section",
    "AthenaRewardSchedule": "The reward schedule for a given track (e.g., book XP or season XP, free or paid)",
    "AthenaSeasonRewardLevelInfo:Track": "The reward track this reward is for",
    "EarnedBadgeEntry:RewardType": "The reward type for this badge",
    "FortPhoenixLevelUpNotification:Loot": "The rewards earned for reaching this level",
    "FortZoneDifficultyIncreaseRewardData:Rewards": "The rewards for completing the primary mission at this tier of difficulty increase",
    "FortPhoenixLevelUpData:Rewards": "The rewards for reaching this Phoenix level",
    "FortAIPawn:SpawnRift": "The rift that the AI spawned from. Will be where dormants return to sleep",
    "BuildingProp_AISpawner:CreativeRift": "The rift this trap spawned",
    "EFortItemType.PlayerSurveyToken": "The right to take a player survey",
    "ValkyrieEditorPermission:Role": "The role that the permissions apply to",
    "FortAnimNode_AttackIK:IKHandRootBone": "The root bone for the IK Hand bones.",
    "FortAnimNode_QuadrupedSlopeWarping:ArmsIKFootRootBone": "The root bone for the IK foot bones for the arms/front legs. This bone will be adjusted to match the floor.",
    "FortAnimNode_SlopeWarping:IKFootRootBone": "The root bone for the IK foot bones for the legs. This bone will be adjusted to match the floor.",
    "FortAnimNode_QuadrupedSlopeWarping:ArmsRootBone": "The root bone of the arms/front legs in the skeleton. This bone will be adjusted if Pull Limbs Root Bone Down is checked.",
    "FortAnimNode_QuadrupedSlopeWarping:SkeletonRootBone": "The root bone of the entire skeleton. This bone will be adjusted if Transform Skeleton Root Bone To Match Slope is checked.",
    "FortAnimNode_SlopeWarping:PelvisBone": "The root bone of the legs in the skeleton. This bone will be adjusted if Pull Limbs Root Bone Down is checked.",
    "FortDaySequenceActor:SunRootComponent": "The root component for the sun",
    "FortGravityGunHolder:PivotComponent": "The root component.",
    "HmxSettings:audioStreamsDirectory": "The root directory for AudioStream Assets",
    "FortMantisTargetData:TechniqueWarpInfo": "The root motion warp info that this technique should use.",
    "FortExposedAssetPathCustomization:PluginOverride": "The root plugin path for aliases. For now, all FN-exposed content must alias to /Fortnite",
    "FortWeaponRangedDualSwing:Rope": "The rope mesh. Attached to RopeAnchor and oriented/scaled towards the player's hand. Valid on client only.",
    "FortHookGunRope:RopeProjectileMesh": "The rope projectile static mesh (not the projectile that spawns the rope).",
    "FortHookGunRope:RopeMesh": "The rope static mesh.",
    "BuildingTrapFloor_Turret:RotateComp": "The rotate component, or the component that will be desired to rotate towards the target",
    "FortTrackMovementComponent:TurnSpeed": "The rotation speed when following the track or correcting network rotation",
    "EUraniumRoundPhase.EndOfRoundStart": "The round has just ended, do some messaging, turn off some gameplay, wait",
    "FortAthenaMutator_Cobalt:ActiveRound": "The round that is currently active and taking place",
    "FortCollectionBookSlotData:SlotSourceId": "The row name for looking up source values in the slot source table",
    "FortCollectionBookSlotData:SlotXpWeightName": "The row name for looking up xp values in the slot xp weight table",
    "FortMissionGenerationElementCostAndAvailabilityRow:AvailabilityCurveTableRow": "The row to use in the Availability Curve Table",
    "FortIntensityCurve:IntensityCurveTableRow": "The row to use in the intensity curve table",
    "FortSpawnPointsPercentageCurve:SpawnPointsPercentageCurveTableRow": "The row to use in the intensity curve table",
    "FortCreativeItemDropParams:AmountRule": "The rule for determining the amount to drop or remove",
    "FortFocusedBuildingInfo:HealthDisplayRule": "The rule for displaying the focused building's health",
    "VariantParticleSystemInitializerData:LocationRule": "The rule to apply to location when attaching",
    "VariantParticleSystemInitializerData:RotationRule": "The rule to apply to rotation when attaching",
    "VariantParticleSystemInitializerData:ScaleRule": "The rule to apply to scale when attaching",
    "AthenaCapturePoint:ContentionRules": "The rules for handling the contention of a capture point.",
    "AthenaCapturePoint:UnlockRules": "The rules for handling the contention of a capture point.",
    "OverrideMovementCurveData:RunAccelerationCurve": "The run acceleration coefficient as a function of the normalized input deflection. By default this is linear.",
    "FortObjectiveBase:ObjectiveHandle": "The runtime handle to this objective",
    "VkModuleDoc:Relevance": "The runtime roles in which this module is executed",
    "VkModuleVersionDoc:Relevance": "The runtime roles in which this module version is executed",
    "TransmogSacrifice:TransmogSacrificePoints": "The sacrifice points this recipe is worth when you want to transmog.",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:SafeZoneIndicatorClass": "The safe zone indicator class to spawn",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:SafeZoneIndicator": "The safe zone indicator instance",
    "FortSafeZonePhaseUpdatedEvent:SafeZonePhaseIndex": "The safe zone phase index",
    "WindSplineComponent:DisableSafeZonePhaseIndex": "The safe zone phase index in which to disable the wind spline",
    "HUDElementsToHideData:StartHidingSafeZonePhase": "The safe zone phase to start hiding HUDElementsToHide.\n     Disable with values < 0.",
    "HUDElementsToHideData:StopHidingSafeZonePhase": "The safe zone phase to stop hiding HUDElementsToHide.\n     Disable with values < 0.",
    "FortAthenaMutator_Barrier:SafeZonePhaseToStartObjectiveDestructionTimer": "The safe zone phase when we apply the GE to the generator",
    "FortAthenaMutator_Cobalt:SafeZoneRadiusAtMaxSafeZoneScale": "The safe zone radius that corresponds to SafeZoneScale = 1 in the SafeZoneMaterialCollection.",
    "SafeZoneLocation:SafeZoneRadius": "The safe zone radius to use when this location is selected",
    "FortAthenaMutator_SurvivalObjectiveData:ActivationSafezoneIndex": "The safezone index to assocaited to this building actor",
    "EFortAILODLevel.Normal": "The same as Normal but NPC's a bit further away, many of these NPC's will be easily visible or fairly close behind the player",
    "SpatialMetricSample:BoundsMax": "The sample bounds maximum value.",
    "SpatialMetricSample:BoundsMin": "The sample bounds minimum value.",
    "SpatialMetricSample:TimeStamp": "The sample's time stamp indicating when it was collected.",
    "SpatialMetricSampleImageProperties:WorldColorSaturation": "The saturation factor to apply to the world to improve the visualization of spatial values.",
    "CreativeQuickbarComponent:CurrentQuickbarRequestSaveRecord": "The save record we're currently being loaded into the quickbar, used for thumbnail generation after we've confirmed it's in the quickbar.",
    "FortCreativeMoveTool:ActiveRecordSpawner": "The save record we're currently spawning and loading into the move tool",
    "FortMissionAlertCategoryData:CategoryRowName": "The saved row name of the category row",
    "RiderComponent:RiderPropAttachSoftBoundsScalar": "The scalar to apply when applying the soft bounds.  Should always be\n              between 0.0 and 1.0.",
    "TankWeaponAimingData:AimingWhileTargetingCameraToMuzzleDistanceScalar": "The scalar to multiply the camera forward vector by to push it out towards the muzzle while targeting. Only used if AimingMode == CameraTraceFromDistanceScalar.",
    "TankWeaponAimingData:AimingCameraToMuzzleDistanceScalar": "The scalar to multiply the camera forward vector by to push it out towards the muzzle. Only used if AimingMode == CameraTraceFromDistanceScalar.",
    "IndicatedActorData:ScaleAndOpacityData": "The scale and opacity data for the indicator, when we draw it.",
    "VehicleWheelFXSocketInfo:Scale": "The scale of the FX on this socket",
    "FortAthenaMutator_Wax:SquadPlacementScaleOnMap": "The scale of the brush to for squadmates.",
    "IndicatedActorScaleAndOpacityData:LargestScale": "The scale of the indicator when it is large.",
    "IndicatedActorScaleAndOpacityData:SmallScale": "The scale of the indicator when it is small.",
    "FortTimeOfDayManager:MoonScale": "The scale of the moon mesh during the night phase",
    "FortTimeOfDayManager:SunScale": "The scale of the sun mesh during the morning/day/evening phases",
    "DebugMinimapData:DebugCompassIconScale": "The scale to draw the CompassIconScale in the compass",
    "DebugMinimapData:DebugMinimapIconScale": "The scale to draw the MinimapIconBrush in the minimap",
    "FortLevelSpawnActor:MinimapIconScale": "The scale to draw the MinimapIconBrush in the minimap",
    "FortAthenaLivingWorldManager:SpecialActorCompassIconScale": "The scale to draw the SpecialActorCompassIconScale in the compass",
    "AthenaSpecialActorComponent:SpecialActorCompassIconScale": "The scale to draw the SpecialActorCompassIconScale on the compass",
    "AthenaSpecialActorComponent:SpecialActorFullScreenMapIconScale": "The scale to draw the SpecialActorFullScreenMapIconBrush on the fullscreen map. If the brush is empty, SpecialActorMinimapIconScale will be used instead.",
    "BuildingRift:SpecialActorCompassIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the compass",
    "FortAthenaMutator_SurvivalObjectiveData:SpecialActorCompassIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the compass if a special actor is set",
    "BagelAreaSpecialActorData:SpecialActorCompassIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the compass if a special actor is within this objective",
    "BagelScoreMultiplierSpawnData:SpecialActorCompassIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the compass if a special actor is within this objective",
    "MashAreaSpecialActorData:SpecialActorCompassIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the compass if a special actor is within this objective",
    "MashScoreMultiplierSpawnData:SpecialActorCompassIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the compass if a special actor is within this objective",
    "BuildingRift:SpecialActorMinimapIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the minimap",
    "FortAthenaLivingWorldManager:SpecialActorMinimapIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the minimap",
    "FortAthenaMutator_SurvivalObjectiveData:SpecialActorMinimapIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the minimap if a special actor is set",
    "FortCharacterVehicle:SpecialActorMinimapIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the minimap if a special actor is within this drop",
    "BagelAreaSpecialActorData:SpecialActorMinimapIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the minimap if a special actor is within this objective",
    "BagelScoreMultiplierSpawnData:SpecialActorMinimapIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the minimap if a special actor is within this objective",
    "MashAreaSpecialActorData:SpecialActorMinimapIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the minimap if a special actor is within this objective",
    "MashScoreMultiplierSpawnData:SpecialActorMinimapIconScale": "The scale to draw the SpecialActorMinimapIconBrush in the minimap if a special actor is within this objective",
    "AthenaSpecialActorComponent:SpecialActorMinimapIconScale": "The scale to draw the SpecialActorMinimapIconBrush on the minimap",
    "ControlPointAssetData:CompassIconScale": "The scale to draw the control point in the compass",
    "ControlPointAssetData:MinimapIconScale": "The scale to draw the control point in the minimap",
    "IndicatedActorScaleAndOpacityData:FarAwayScale": "The scale we use beyond the smallest size distance.",
    "FortAthenaMutator_RespawnTime:RespawnTime": "The scaler to modify the respawn height by Value between 0 - 30",
    "FortAthenaMutator_RespawnLocation:RespawnHeight": "The scaler to modify the respawn height by Value between 0.0 and 1.5",
    "FortAttributeInfo:DisplayScalingFactor": "The scaling factor for display in the UI",
    "BuildingTrapFloor_Turret:FiringPoint": "The scene component representing the firing location",
    "PropertyOverride:PropertyScope": "The scope in which the property should be applied",
    "PropertyOverrideMk2:PropertyScope": "The scope in which the property should be applied",
    "PropertyOverrideRepl:PropertyScopedName": "The scope in which the property should be applied",
    "FortBadgeScoringData:ScoreAwarded": "The score awarded for earning this badge.",
    "FortBadgeScoringData:ScoreCategory": "The score category this badge should be awarded for, Max_None for badges not associated with a score category.",
    "AthenaAwardGroup:Score": "The score granted as part of this reward (if any)",
    "AthenaScoreData:ScoreAwarded": "The score this event is worth each time it occurs",
    "FortBadgeScoringData:ScoreThreshold": "The score threshold in the category this badge should be awarded at.",
    "ReplicatedStatValues:ScoreValue": "The score value",
    "CobaltCombatStormShieldDataEntry:TeamScores": "The scores of each team. Matches the order that the teams are stored in the Teams array",
    "EShowPlacardPhase.PreShowFadeOut": "The screen fade that happens right before we show the screen",
    "AthenaAwardGroup:SeasonXp": "The season XP granted as part of this reward (if any); when all is said and done we will take the ceil of the sum of xp grants",
    "ESeatSelectionRule.ClosestToAim": "The seat closest to player aim.",
    "ESeatSelectionRule.ClosestToPlayer": "The seat closest to player proximity.",
    "FortVehicleSeatComponent:SeatSelectionRule": "The seat selection rule.",
    "VehicleWeaponReticle3DConfig:SeatIndex": "The seat to associate this reticle with. This should match the seat of the weapon component.",
    "AthenaCarPlayerSlot:SeatIndex": "The seat we are currently in. This will always match the PlayerSlot index but is cached for easier access.",
    "ExponentialHeightFogWeatherData:SecondFogDensity": "The second fog density curve (based on time of day [0-24]) we are targeting during this weather event",
    "ExponentialHeightFogWeatherData:SecondFogHeightFalloff": "The second fog height falloff curve (based on time of day [0-24]) we are targeting during this weather event",
    "ExponentialHeightFogWeatherData:SecondHeightFogOffset": "The second fog height offset bias curve (based on time of day [0-24]) we are targeting during this weather event",
    "FortAthenaIntArithmeticStateTreeTaskInstanceData:SecondOperand": "The second operand of the operation.",
    "FortCollectionBookSlotData:SlotSourceId2": "The second row name for looking up source values in the slot source table when there are two potential item sources",
    "EFortKatanaPrimaryAttackVariation.OnGroundSecond": "The second strike in the on ground primary attack sequence",
    "BuildingWall:SlidingDoorComponent": "The secondary door attached to this wall",
    "BuildingWall:DoubleDoorComponent": "The secondary double door attached to this wall",
    "FortQuickBars:SecondaryQuickBar": "The secondary quick bar - currently GUIDs but should be changed to be UFortItems when supported by the server",
    "FortWorldPlayerLoadout:SecondaryQuickBarRecord": "The secondary quick bar record",
    "UrgentQuestData:EventSubtitleSecondary": "The secondary subtitle of the event to display.",
    "UrgentQuestSettings:EventSubtitleSecondary": "The secondary subtitle of the event to display.",
    "FortAthenaMutator_SurvivalObjectiveData:RandomizedPOICount": "The selected POI will be picked randomly within this amount out of the result of the POIFilterQuery",
    "MultiItemReplicationProxy:SelectedItemIndex": "The selected item index of the owning multi-item.",
    "BuildingProp_CreatureManager:SelectedAIType": "The selected option for the AI Type Option",
    "FortCreativeMoveTool:SelectionSpaceActorsBounds": "The selection's local space bounding box around all of its actors",
    "FortIntensityCurveSequenceInstanceInfo:IntensityCurveSequence": "The sequence of intensity curves.  Accessed through GetNextIntensityCurve in order to respect sequence type",
    "ActorTemplateRecord:ActorData": "The serialized data for this base object. Can be swapped for an explicit Json style of FName to data map, potentially can give easier backwards compatibility at the cost of more memory, longer serialization time, and longer comparison time.",
    "EClientContentReadinessV2.ReadyToJoin": "The server either didn't need content, or the Client has it now, and we are ready to join.",
    "FortGameState:RealMatchStartTime": "The server real time (time that is not paused when the game is paused, and not dilated/clamped) when the match started. If < 0 match hasn't started yet",
    "BuildingGameplayActorCloneMachine:ActivationServerEndTime": "The server start time for activating the device",
    "CachedRechargeAmmoData:ServerStartTime": "The server start time for recharging",
    "BuildingGameplayActorCloneMachine:RespawnServerEndTime": "The server start time for the respawning",
    "FakeKillRelevancyPlayerDataEntry:RelevancyChangeServerWorldTime": "The server time at which the server will make these players irrelevant to us",
    "ScoutDroneStatusData:ServerTimeStatusChanged": "The server time in seconds when the targeting status last changed",
    "RespawnAndSpectateTargetData:PostDeathDisableTime": "The server time in which the target should be disabled due to the associated player's death.\nUsed to delay disabling a players respawn target after they die so teammates can still spawn on them for a short time.",
    "RepTrackMovement:Timestamp": "The server time in which this movement was sampled",
    "BuildingGameplayActorSpawnData:NextSpawnTime": "The server time setup to spawn one of the BGAs (-1.0 indicates spawning is off)",
    "SynchronizedTeleportFadeOutReplicationData:FadeEndTime": "The server time that the screen should be completed fade out at.\n     We use server time instead of duration because it compensates for communication lag which lets the server better anticipate when the screen will be fully faded out.",
    "CraftingObjectRepStateData:StateChangeServerTime": "The server time we set the objects crafting state",
    "FortGameState:MatchStartTime": "The server time when the match started. If < 0 match hasn't started yet",
    "FortTimeOfDayWeatherComponent:WeatherStartTime": "The server time when the weather started.",
    "FortScoutDroneAnalyticsComponent:SessionStartTime": "The server time when we deployed the drone.",
    "BuffetFlyingRicochetReplicatedData:StartTime": "The server world time at which the latest ricochet occurred",
    "FortAthenaMutator_DadBro:ServerTimeDadBroStarted": "The server-side time the boss fight started",
    "PersistenceFrameworkServiceAssetInfo:Service": "The service settings associated with the service tag.",
    "PlayspaceComponent_PlayStopPauseManager:ServerPlayPauseStopActors": "The set of Actors that only require Play, Stop, and Pause execution in the Server context.",
    "AssembledMeshUserComponent:MeshParts": "The set of MeshParts you'll want to represent on the owner actor",
    "AthenaResurrectionComponent:PlayerIdsForResurrection": "The set of PlayerIds that are able to reboot (i.e. reboot cards were picked up)",
    "FortGameStateAthena:ActiveEventNamesAtPlaylistLoad": "The set of active event names for when the play list loaded (this will not drop or add events that turn on/off during the course of a match)",
    "FortPhysicsObjectComponent:IgnoredActorsForDamage": "The set of actors we currently will ignore damaging when collided with",
    "FortGameModeAthena:ClearAreaIgnoreActors": "The set of actors we ensure are ignored from clearing",
    "CraftingObjectServerStateData:AllOfTheIngredientItems": "The set of all item ingredients (consumed or not) used to craft a formula",
    "FortPlayerControllerGameplay:CreativeOptions": "The set of creative options that hook into UI and delegate callbacks to control creative settings.",
    "FortAthenaLoadout:Dances": "The set of dance emote assets to use",
    "AppliedHomebaseData": "The set of data (effects, ability sets, etc) that were applied when a player enters the game",
    "FortEventFlagsNotification": "The set of event flags and the next time to request and update",
    "MeshNetworkEventStateDataArray:StateData": "The set of event state data that is currently active",
    "FortExposedActorReferences": "The set of exposed references for a given actor class",
    "FortGameModeAthena:GameFeaturesStreamingRangedWeaponData": "The set of game feature data's that have assets being streamed in, so we can apply their data when streaming is complete",
    "FortPhysicsObjectComponent:IgnoredPawnsPendingRemoval": "The set of ignored pawns pending removal from IgnredPawns array",
    "CraftingObjectServerStateData:NonConsumedIngredientItemIndices": "The set of indices (AllOfTheIngredientItems) for items which have NOT been consumed already",
    "FortGameStateAthena:RolledLootGroupTags": "The set of loot groups that were picked for the playlist",
    "ApplyWrapVariantDef:MetaTags": "The set of meta tags this variant specifies.\nUsed in LTMs which want to apply custom part overrides (Wick/Bounty)\n\nMetaTags are applied with the main cosmetic definition tags as a base.\nAny currently active MetaTags can either add additional tags or remove tags.\nAll active variants can remove/add tags (processed in a loop)\n\nUse Cases:\n             Variant of Peely with a painted-on suit.\n                     (Remove ExtremelyUnique, add Assassin)\n                     Results in Bounty leaving the skin alone (ignore that we do that anyway).\n\n             Variant of Reaper, but he's wearing golf attire (or something).\n                     (Remove Assassin)\n                     Results in Bounty forcing that variant into a suit (as per any other outfit).\n                     Reaper's primary variant would keep his suit.\n\n@see MetaTags on the main cosmetic item definition (scroll up).",
    "EmoteMontageVariantDef:MetaTags": "The set of meta tags this variant specifies.\nUsed in LTMs which want to apply custom part overrides (Wick/Bounty)\n\nMetaTags are applied with the main cosmetic definition tags as a base.\nAny currently active MetaTags can either add additional tags or remove tags.\nAll active variants can remove/add tags (processed in a loop)\n\nUse Cases:\n             Variant of Peely with a painted-on suit.\n                     (Remove ExtremelyUnique, add Assassin)\n                     Results in Bounty leaving the skin alone (ignore that we do that anyway).\n\n             Variant of Reaper, but he's wearing golf attire (or something).\n                     (Remove Assassin)\n                     Results in Bounty forcing that variant into a suit (as per any other outfit).\n                     Reaper's primary variant would keep his suit.\n\n@see MetaTags on the main cosmetic item definition (scroll up).",
    "ItemTextureVariantDef:MetaTags": "The set of meta tags this variant specifies.\nUsed in LTMs which want to apply custom part overrides (Wick/Bounty)\n\nMetaTags are applied with the main cosmetic definition tags as a base.\nAny currently active MetaTags can either add additional tags or remove tags.\nAll active variants can remove/add tags (processed in a loop)\n\nUse Cases:\n             Variant of Peely with a painted-on suit.\n                     (Remove ExtremelyUnique, add Assassin)\n                     Results in Bounty leaving the skin alone (ignore that we do that anyway).\n\n             Variant of Reaper, but he's wearing golf attire (or something).\n                     (Remove Assassin)\n                     Results in Bounty forcing that variant into a suit (as per any other outfit).\n                     Reaper's primary variant would keep his suit.\n\n@see MetaTags on the main cosmetic item definition (scroll up).",
    "MaterialVariantDef:MetaTags": "The set of meta tags this variant specifies.\nUsed in LTMs which want to apply custom part overrides (Wick/Bounty)\n\nMetaTags are applied with the main cosmetic definition tags as a base.\nAny currently active MetaTags can either add additional tags or remove tags.\nAll active variants can remove/add tags (processed in a loop)\n\nUse Cases:\n             Variant of Peely with a painted-on suit.\n                     (Remove ExtremelyUnique, add Assassin)\n                     Results in Bounty leaving the skin alone (ignore that we do that anyway).\n\n             Variant of Reaper, but he's wearing golf attire (or something).\n                     (Remove Assassin)\n                     Results in Bounty forcing that variant into a suit (as per any other outfit).\n                     Reaper's primary variant would keep his suit.\n\n@see MetaTags on the main cosmetic item definition (scroll up).",
    "MeshVariantDef:MetaTags": "The set of meta tags this variant specifies.\nUsed in LTMs which want to apply custom part overrides (Wick/Bounty)\n\nMetaTags are applied with the main cosmetic definition tags as a base.\nAny currently active MetaTags can either add additional tags or remove tags.\nAll active variants can remove/add tags (processed in a loop)\n\nUse Cases:\n             Variant of Peely with a painted-on suit.\n                     (Remove ExtremelyUnique, add Assassin)\n                     Results in Bounty leaving the skin alone (ignore that we do that anyway).\n\n             Variant of Reaper, but he's wearing golf attire (or something).\n                     (Remove Assassin)\n                     Results in Bounty forcing that variant into a suit (as per any other outfit).\n                     Reaper's primary variant would keep his suit.\n\n@see MetaTags on the main cosmetic item definition (scroll up).",
    "PartVariantDef:MetaTags": "The set of meta tags this variant specifies.\nUsed in LTMs which want to apply custom part overrides (Wick/Bounty)\n\nMetaTags are applied with the main cosmetic definition tags as a base.\nAny currently active MetaTags can either add additional tags or remove tags.\nAll active variants can remove/add tags (processed in a loop)\n\nUse Cases:\n             Variant of Peely with a painted-on suit.\n                     (Remove ExtremelyUnique, add Assassin)\n                     Results in Bounty leaving the skin alone (ignore that we do that anyway).\n\n             Variant of Reaper, but he's wearing golf attire (or something).\n                     (Remove Assassin)\n                     Results in Bounty forcing that variant into a suit (as per any other outfit).\n                     Reaper's primary variant would keep his suit.\n\n@see MetaTags on the main cosmetic item definition (scroll up).",
    "ParticleVariantDef:MetaTags": "The set of meta tags this variant specifies.\nUsed in LTMs which want to apply custom part overrides (Wick/Bounty)\n\nMetaTags are applied with the main cosmetic definition tags as a base.\nAny currently active MetaTags can either add additional tags or remove tags.\nAll active variants can remove/add tags (processed in a loop)\n\nUse Cases:\n             Variant of Peely with a painted-on suit.\n                     (Remove ExtremelyUnique, add Assassin)\n                     Results in Bounty leaving the skin alone (ignore that we do that anyway).\n\n             Variant of Reaper, but he's wearing golf attire (or something).\n                     (Remove Assassin)\n                     Results in Bounty forcing that variant into a suit (as per any other outfit).\n                     Reaper's primary variant would keep his suit.\n\n@see MetaTags on the main cosmetic item definition (scroll up).",
    "RichColorVariantDef:MetaTags": "The set of meta tags this variant specifies.\nUsed in LTMs which want to apply custom part overrides (Wick/Bounty)\n\nMetaTags are applied with the main cosmetic definition tags as a base.\nAny currently active MetaTags can either add additional tags or remove tags.\nAll active variants can remove/add tags (processed in a loop)\n\nUse Cases:\n             Variant of Peely with a painted-on suit.\n                     (Remove ExtremelyUnique, add Assassin)\n                     Results in Bounty leaving the skin alone (ignore that we do that anyway).\n\n             Variant of Reaper, but he's wearing golf attire (or something).\n                     (Remove Assassin)\n                     Results in Bounty forcing that variant into a suit (as per any other outfit).\n                     Reaper's primary variant would keep his suit.\n\n@see MetaTags on the main cosmetic item definition (scroll up).",
    "ScriptedActionVariantDef:MetaTags": "The set of meta tags this variant specifies.\nUsed in LTMs which want to apply custom part overrides (Wick/Bounty)\n\nMetaTags are applied with the main cosmetic definition tags as a base.\nAny currently active MetaTags can either add additional tags or remove tags.\nAll active variants can remove/add tags (processed in a loop)\n\nUse Cases:\n             Variant of Peely with a painted-on suit.\n                     (Remove ExtremelyUnique, add Assassin)\n                     Results in Bounty leaving the skin alone (ignore that we do that anyway).\n\n             Variant of Reaper, but he's wearing golf attire (or something).\n                     (Remove Assassin)\n                     Results in Bounty forcing that variant into a suit (as per any other outfit).\n                     Reaper's primary variant would keep his suit.\n\n@see MetaTags on the main cosmetic item definition (scroll up).",
    "TempestTornadoForcesComponent:ObjectTypeToMaxCapCount": "The set of object type to max cap values",
    "DAD_BaseCreativeUserOption": "The set of options for displaying a DataAssetDirectory-enabled asset as a user knob. Should be derived from to attach relevant data to the knob selections.",
    "FortPhysicsObjectComponent:IgnoredPawns": "The set of pawns we want to ignore collision with",
    "FortPhysicsObjectManager:PhysicsObjectsAwake": "The set of physics object flagged as awake this frame",
    "FortPhysicsObjectComponent:IgnoredPawnsForBasing": "The set of player pawns we currently will disallow basing upon this object",
    "BuildingPropMusicPlayer:MusicArray": "The set of songs to play",
    "PlayspaceGameStateComponent_PlayerSpawningManager:SpawningUsersArray": "The set of users that are pending spawning into the game",
    "WeaponRechargeAmmoMappingData:WeaponIds": "The set of weapon item definitions we want this tag to recharge ammo for",
    "FortGameFrameworkComponent_EventMode:CachedWidgetData": "The set of widgets that were created when Event Mode plugin was active",
    "FortOptionsMenuData:OptionTabType": "The setting type of the option we are defining",
    "FortAthenaMutator_DBNOSetting:SettingsByActor": "The settings by the actor who set them",
    "FortAIDirector:EncounterSpawnPointsSettings": "The settings for min/max spawn points for encounters with different encounter type tags",
    "OptionsReleaseInfo:SettingType": "The settings key to be set visible/hidden",
    "FortMantisTechniqueData:CharacterSettings": "The settings that define how the character will behave relative to their camera during this technique.",
    "FortAIDirector:EncounterSpawnGroupCapSettings": "The settings to use for encounters with the given encounter type tags",
    "FortErrorInfo:ContinueButtonText": "The seveirty of the error defines how it will be displayed",
    "FortErrorInfo:ErrorSeverity": "The seveirty of the error defines how it will be displayed",
    "VehicleModPhysicsShapeModifiers:ShapeIndex": "The shape index to enable/disable. This is replicated from server. to all clients",
    "VehicleModPhysicsShapeModifiers:PhysicsShapeName": "The shape name to enable/disable based on mod state.\nCurrently only populated on server.",
    "SmartBuildingActor:BuildingMetaData": "The shape of the building piece",
    "FortVolume:BoundsShape": "The shape of the static mesh used for the bounds. IsInside and Contains will use this to determine if things are inside",
    "FortAbilityTargetSelection:Shape": "The shape of the target selection",
    "WindSplineComponent:BoxFalloff": "The shared box falloff physics field component",
    "WindSplineComponent:BoxOperatorField": "The shared box operator that combines the uniform vector and box falloff physics fields",
    "WindSplineComponent:UniformVector": "The shared uniform vector physics field component",
    "CatalogOffer:ShortDescription": "The short description of this store item",
    "HomebaseSquad:ShortDisplayName": "The short display name of the squad",
    "CardPackOffer:Title": "The short name of this offer",
    "FortAthenaMutator_Cobalt:StormShieldShrinkRate": "The shrink rate of the storm shields - used for both the radius shrink and location offset movement during shrink",
    "AccountIdAndMatchEndData:ShuffledLoadoutUsed": "The shuffled loadout templateids used in the match.",
    "EBuildingAttachmentSide": "The side of the object being attached to",
    "FortWorldManager:TileEdgeSize": "The size of an edge of a square tile in floor-sized chunks",
    "FortCreativeMoveTool:GridSnapRatios": "The size of each \"grid\" that we want to snap to for precision mode.",
    "FortCurieGrassFireReplicator:GrassGridCellSize": "The size of the grass grid cells",
    "FortGravityGunHolder:CurrentRingSizeInUnits": "The size of the ring around the held object.",
    "FortAthenaMutator_Uranium:SafeZoneRadius": "The size of the safe zone radius during Uranium games",
    "VkFileSize:SourceSize": "The size of the source file (in bytes), or -1 if the source size isn't known",
    "FortDecoHelper:GridSnapSize": "The size we use for Grid Snapping",
    "MontageBeatSyncComponent:OwnerMeshComponent": "The skeletal mesh",
    "FortAIAppearanceOverrideEntry:SkeletalMesh": "The skeletal mesh used by this appearance override.",
    "FortAthenaMutator_SkinChangeOnWin:CosmeticLoadoutToApplyOnWin": "The skin to switch winners to on victory.",
    "FortDaySequenceActor:SkyAtmosphereComponent": "The sky atmosphere component",
    "GlobalWeatherData:SkyAtmosphereWeatherData": "The sky atmosphere fog data for the weather event",
    "SkylightWeatherData:SkyLightColor": "The sky color curve (based on time of day [0-24]) we are targeting during this weather event",
    "SkylightWeatherData:SkyLightColorWeight": "The sky color weight curve (based on time of day [0-24]) we are targeting during this weather event",
    "FortDaySequenceActor:SkyDomeComponent": "The sky dome mesh",
    "FortDaySequenceActor:SkyLightComponent": "The sky light component",
    "FortTimeOfDayManager:SkyDomeMeshComp": "The sky mesh. Many material effects are used on this mesh",
    "GlobalWeatherData:SkylightWeatherData": "The skylight data for the weather event",
    "FortTimeOfDayManager:SkyLightComp": "The skylight in Fortnite. There are only a few lights and this is one of them.",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:FullMapDebugCircleBrush": "The slate brush used for drawing debug safezone circles on the full map.\n     Only used if !UE_BUILD_SHIPPING and WITH_CHEAT_MANAGER,\n     but needs to live outside of preprocessor compiles because it needs to be UPROPERTY to keep internal pointers from being garbage collected.",
    "QuickBar:CurrentFocusedSlot": "The slot that we're currently focused on",
    "FortPendingSlottedItemOperation:SlotRowName": "The slot the pending item is in or being placed in",
    "SlotSelectionMethod:SellSlot": "The slot to be tested (1-N)",
    "FortTheaterMapData:TheaterSlot": "The slot used by the backend to store a player's inventory. -1 means that inventory will not be stored",
    "FMDeviceCableOrderingPortState:Slot": "The slot used to position this port",
    "QuickBar:Slots": "The slots that make up this quick bar",
    "FortScriptedObjectMovement_Structure:CachedObjectSlots": "The slots to shuffle from/to when a movement event happens.",
    "FMDeviceCable:ExtremeMinDotProduct": "The smallest dot product considered extreme enough to add extra cable bends",
    "SidewaysStateComponent_Player:MinRadiusToHaveAnyCorruption": "The smallest radius for a Sideways Playspace to show corruption at all.  (I.E. Not only will there not be \"Extra\"\nCorruption Radius, the radius will be showsn as zero below this value.  Needed because when the sideways\nshouldn't exist, it is still showing a radius of around 55.",
    "RadiusTrackingInitializer:MinimumRadius": "The smallest radius the circle will shrink to on its own.",
    "FMDeviceCable:CableMinTangent": "The smallest tangent allowed for a cable",
    "GroundSplineSpeedData:SnapToNewSpeedRequestNum": "The snap to new speed request number. The client should only snap to the new speed if the local request number is less than the replicated snap to new speed request number\n     The replicated version of this request number should only ever increase in value\n     The local version should only ever decrease in value OR be set to the replicated request number (this avoids accidental collisions)",
    "DuelOverlayData:ChallengedNPCSocialAvatarBrushPtr": "The social avatar icon of the NPC challenged in the duel.",
    "DuelOverlayData:ChallengerSocialAvatarBrushPtr": "The social avatar icon of the duel-starting player to show.",
    "UrgentQuestData:SocialAvatarBrushPtr": "The social avatar icon to show. We're storing this so the server can get it and pass it along.",
    "FortPlayerPawn:ZiplineSocketZOffset": "The socket Z offset from the line",
    "FortTankVehicle:PitchPivotSocketName": "The socket at the location of the pitch pivot point for the main cannon.\nThis is used to animate the cannon to the target position.",
    "FortTankVehicle:YawPivotSocketName": "The socket at the location of the yaw pivot point for the main cannon.\nThis is used to animate the cannon to the target position.",
    "FortSpawnActorComponent:SocketName": "The socket location to attach to (or get the location from) to spawn the actor at",
    "FortTheaterRuntimeData:Socket": "The socket name on the world map this pin should be placed at",
    "RiderComponent:RiderPropAttachSocket": "The socket to attach the rider prop to on the rider.",
    "RidableComponent:AttachSocket": "The socket to attach the rider to.",
    "VehicleSpringInfo:SpringStart": "The socket to start this spring ray cast from. Ray direction matches -Z axis. NONE means center of mass with ray along local -z",
    "RiderComponent:RiderPropAttachSoftBounds": "The soft bounds to apply to the attachment of the prop (and rider).\n              If the distance between the rider and ridable props is greater than\n              these bounds, it will apply offsets to the attachments based on\n              the separation distance as it falls between soft and hard bounds,\n              scaled by the soft bounds scalar.\n\n              For example, if soft bounds is 2.5 and the scalar is 0.5...at a\n              separation distance of 3.5, it will apply an offset of 0.5. (e.g. (3.5 - 2.5) * 0.5).",
    "UrgentQuestData:SortPriority": "The sort priority of this urgent quest in the UI. Higher priorities show on top",
    "UrgentQuestSettings:SortPriority": "The sort priority of this urgent quest in the UI. Higher priorities show on top",
    "FortSoundIndicatorComponent:AttenuationSettingsLinkedToIndicator": "The sound attenuation settings we are basing our max visibility distance off of. If there is no sound specified and DefaultMaxVisibilityDistance is set to 0 , the sound indicator will simply not be displayed.",
    "EFortWeaponSoundChannel": "The sound channels a weapon can use. NormalA/NormalB are alternated between to maintain two voices for single-fire guns",
    "FortWindManager:AudioWindSpeedParameterName": "The sound cue parameter to describe the speed of the wind on a wind responder",
    "FortPoi_DiscoverableComponent:DiscoveredSoundCue": "The sound cue that the player will hear on discovery.",
    "FortWeaponRanged:EnemyWarningWeaponImpactSFX": "The sound cue to play for the local player when an enemy shoots a building actor.",
    "SoundIndicatorTypePicker:SoundIndicatorType": "The sound indicator type that will be displayed if the owner of the sound indicator component has any of the given tags",
    "FortAthenaMutator_Cobalt:VictoryStingerSound": "The sound that plays at the end of a round when your team is victorious",
    "FortAthenaMutator_Cobalt:LoserStingerSound": "The sound that plays at the end of a round when your team loses",
    "FortAthenaMutator_Cobalt:StormShieldShrinkBeginSound": "The sound that plays for the players to let them know that the storm shield is now shrinking.",
    "SocialSoundSchema:FriendInviteReceivedSound": "The sound that should play when the user receives a friend invite",
    "SocialSoundSchema:MessageReceivedSound": "The sound that should play when the user receives a message",
    "SocialSoundSchema:PartyInviteReceivedSound": "The sound that should play when the user receives a party invite",
    "UrgentQuestData:SpecialEventStartedSound": "The sound the UI plays when the event starts",
    "UrgentQuestSettings:SpecialEventStartedSound": "The sound the UI plays when the event starts",
    "FortTaggedSoundCue:Sound": "The sound to play",
    "BuildingActor:PlayHitSound": "The sound to play when this actor is hit",
    "FortSoundIndicatorComponent:DefaultSoundLinkedToIndicator": "The sound we are basing our max visibility distance off of. If there is no sound specified and DefaultMaxVisibilityDistance is set to 0 , the sound indicator will simply not be displayed.",
    "BuildingGameplayActorCloneMachine:OnDestroyedNotifyPlayerSound": "The sound we forward to the owner's client when the machine has been destroyed",
    "BuildingGameplayActorCloneMachine:OnDamagedNotifyPlayerSound": "The sound we forward to the owner's client when the machine is under attack",
    "FortAIPawn:SpawnSourceActor": "The source actor that requested this AI spawn e.g. flinger. Can be NULL",
    "GasDebugEffectSnapshot:Effect": "The source effect",
    "FortPlayerController:VoiceInputSourceEffectPresetChain": "The source effect presets we're currently using for voice input",
    "FortGameplayEffectContext:SourceLevel": "The source level of this ability activation, used to calculate damage",
    "CraftingObjectComponent:CraftingObjectTags": "The source object tag for this crafting component",
    "FMDanceSynchronizerComponent:MusicClock": "The source of musical time that the component syncs to.",
    "MontageBeatSyncComponent:WeakMusicClockPtr": "The source of musical time that the component syncs to.",
    "FortControllerComponent_DynamicRollPlayerComponent:TableManager": "The source of shared data related to dynamic rolling for a given player.",
    "PendingSpawnInfo:SpawnSource": "The source that spawned this AI. e.g. flinger",
    "StreamingRadioManagerNative:StreamMediaSource": "The source to stream media from.",
    "FortSourceWorldAndOverlayWorld:SourceWorldString": "The source world pointer is editor only to avoid cooking source worlds due to this reference. Storing the path as a string and constructing a TSoftObjectPtr in cooked builds",
    "FabricSteppedPreviewFXComponent:DistanceBetweenInstances": "The space between each mesh instance",
    "FabricSteppedPreviewFXComponent:DistanceBetweenTripletIntances": "The space between each mesh instance when note style is set to triplets",
    "FabricSteppedPreviewFXComponent:DistanceBetweenInstanceSets": "The space between sets of 4 instances",
    "ScriptedObjectMovement_StaticPath:StepSpacingDistance": "The space between the generated steps.",
    "FabricSteppedPreviewFXComponent:DistanceBetweenTripletInstanceSets": "The space between triplet sets (every 3) of instances",
    "FabricSteppedPreviewFXComponent:CenterAlignmentBounds": "The space the instances will be distributed across when Align to Transform Cener is true",
    "SpatialMetricProperties:SpatialPrecision": "The spatial precision used for sample gathering in world units. Spatial value locations get rounded to the\nnearest multiple of the spatial precision value.",
    "FortSpawnActorData:SpawnActorInfo": "The spawn actor info asset being used to spawn the actors",
    "PendingSpawnInfo:SpawnGroupGuid": "The spawn group GUID of the spawn group instance in the encounter",
    "PendingSpawnInfo:SpawnGroup": "The spawn group that this AI is being spawned for",
    "BuildingGameplayActorSpawnDetails:SpawnHeight": "The spawn height (0th index is the only one used for this table row)",
    "TaggedPOI:SpawnOffset": "The spawn location offset for the Storm Shield spawned on this POI",
    "MissionVehicleSpawnSet:SpawnOffset": "The spawn offset to where this vehicle spawns in the world, in relation to where this actor is",
    "FortAISpawnerData:ReservedSpawnRequest": "The spawn request of the pawn to spawn that has already been reserved",
    "FortAthenaMutator_SkyCap:SkyCap": "The spawn sky cap",
    "MashAISpecialEncounterData:AIBotSkillValue": "The spawned AI's skill value (the column value used when determining a skill value from a curve table row). This will override FortAthenaAIBotController::Skill at runtime.",
    "TempestLightningBoltData:LightningBolt": "The spawned lightning bolt actor",
    "AthenaSpecialActorComponent:SpecialActorTag": "The special actor tag to help identify the object",
    "BuildingWall:DoorComponent": "The specific door attached to this wall",
    "BuildingItemCollectorActor:OverrideOutputItems": "The specific item to use when overridden as the drop data",
    "PaybackMutatorEffectData:VictimPlayerStates": "The specific list of victims for this active payback.\nOnly used to prevent a player from paying back his own killer.",
    "HUDElementVisibilityRepData:ClassSpecifier": "The specified player Class that this modifier should affect",
    "HUDElementVisibilityRepData:TeamSpecifier": "The specified player Team that this modifier should affect",
    "TempestMovementComponent:MovementSpeed": "The speed at which the actor position should change",
    "TempestMovementComponent:RotationSpeed": "The speed at which the actor rotation should change",
    "SpecialEventCursorMode:RecenterInterpSpeed": "The speed at which the cursor will recenter after lack of input, if recentering is enabled",
    "AnimSpinner:InterpolationRateSlowDown": "The speed at which the part slows down when the rotation rate decreases",
    "AnimSpinner:InterpolationRateSpeedUp": "The speed at which the part speeds up when the rotation rate increases",
    "BuildingGameplayActorSupplyDropRadio:BalloonOpenedFallSpeed": "The speed at which the supply drop falls when the balloon is opened.\n     This value is gathered from a hotfix table row (performed in blueprint).",
    "TimeOfDaySpeed:Speed": "The speed at which time will advance",
    "FortTheaterMapTile:SelectionInterpSpeed": "The speed at which we should interpolate our location, when selected",
    "WindSplineComponent:RampUpSpeed": "The speed at which wind sections activate in units per second",
    "WindSplineComponent:RampDownSpeed": "The speed at which wind sections deactivate in units per second",
    "FortVolumeTimeOfDayComponent:SpeedOverride": "The speed for the day, how fast the day will pass",
    "FortObjectiveFilterType_VehicleFilter:TravelSpeed": "The speed in kilometers per hour the vehicle must be travelling at to progress this objective",
    "FortGameplayCueNotifyLoop_Goop:SpeedMapRangeClamped": "The speed map ranged clamp for the audio component.",
    "FortGameplayCueNotifyLoop_Goop:SpeedParamName": "The speed parameter name for the audio component.",
    "FortWindManager:AudioWindInterpSpeed": "The speed that wind audio component volumes will be interpolated. A value of 1 means it will go from 0% to 100% in 1 second.",
    "FortGameCueNotifyLoop_Cloak:SpeedForMaxVis": "The speed threshold for the target player for applying the MaxSpeedVisMult.",
    "FortScoutDronePickupManager:PickupTossSpeed": "The speed to toss the held items at",
    "FortMotorcycleVehicle:DoorBashSphereRadiusForPawnLaunch": "The sphere radius to check around the door for launching pawns.",
    "UraniumRoundData:CurrentRoundCheckPoint": "The spline checkpoint index being used for this round",
    "FortPlayerPushableCart:SplineCheckPointIndices": "The spline point index of all checkpoints, indexed by the checkpoint",
    "FortCreativeSplineControlPoint:SplineIndex": "The spline point index that this control point manages and represents",
    "FortCreativeSplineModificationComponent:DefaultSplinePoints": "The spline points that the device CDO starts with. Used as a slight optimization for avoiding some reconstruction",
    "ScriptedObjectMovement_StaticPathTravelerData:EnterSpline": "The spline that takes a SOM object from its starting position to the main designed path.\nThere is no master path node for this spline; rather this gets the object onto the master path",
    "ScriptedObjectMovement_StaticPathTravelerData:ExitSpline": "The spline that takes a SOM object from the main designed matster path to its end location.\nThere is no master path node for this spline; rather this gets the object off of the master path",
    "FortPlayerPushableCart:SplineComponent": "The spline that the push cart moves along",
    "GroundSplineLocationData:SplineComponent": "The spline that the server was using when it last moved",
    "TrackMovement:CurrentSpline": "The spline we are currently following",
    "FortAvailableMissionAlertData:SpreadDataName": "The spread data row name associated with this mission alert data",
    "FortMissionAlertData:SpreadRowName": "The spread data row name for this mission alert",
    "BackendJobCompletePayload:PGS_RenderJobMessageHandle": "The sqs message we are to delete",
    "BuildingGameplayActorSpawnChip:SquadId": "The squad id for this reboot card",
    "SkyfireSquadDataEntry:SquadId": "The squad id that this data corresponds to",
    "PlayerAugmentLockStatus:SharedFromPlayer": "The squad member who is sharing the augment with the current player, allowing it to be temporarily unlocked.",
    "ReplicatedSharedPlayerAugment:SharedFromPlayer": "The squad member who is sharing the augment with the current player, allowing it to be temporarily unlocked.",
    "FortCowVehicle:SquashMID": "The squash material to adjust as we squash.",
    "McpLootEntry:Quantity": "The stack count for this item entry.",
    "LWMEncounterSetStageStateTreeTaskInstanceData:StageIndex": "The stage index to set",
    "FortStandaloneStoreState:StoreEnd": "The standalone offer ends on the first rollover >= this date (by convention we should time this to coincide with a rollover)",
    "FortTimeOfDayManager:StarMapMeshComp": "The star mesh behind the clouds.",
    "MusicalPlayerRuntimeState:IsPlaying": "The start condition is met and this sound is playing.",
    "DanceMontagePlayInfo:StartSecs": "The start point in seconds where the montage should loop",
    "FortActivityScaleFontData:CharacterCountStart": "The starting character count this goes into effect",
    "FortSubscriptionProgressiveFulfillmentConfig:AcquireStartDate": "The starting date when this progressive can be acquired/visible in ISO-8601",
    "WindSplineSubDivBlockage:StartSectionLength": "The starting length of the blocked section along the spline polyline",
    "BuildingWeakSpot:HitNormal": "The starting location of this effect",
    "BuildingWeakSpot:StartingLocation": "The starting location of this effect",
    "FortStartingMissionInfo:StartingMissions": "The starting missions that are used by the world manager",
    "IntensityContribution:CompletionPercentageInitialMultiplier": "The starting multiplier of the contribution that will be reduced by completion percentage. Mapped vs DifficultyLevel.",
    "FortGameplayCueNotifyAthena_AIAlertState:StealthMeterStartValue": "The starting percentage value of the progress bar",
    "DanceBeatInfo:StartOffsetMs": "The starting position for the initial beat of the animation in Miliseconds",
    "EFortEncounterState.InitializingProperties": "The starting state at creation",
    "FortWeaponTraceIgnoreActorsComponent:DefaultAdditionalIgnoreActorClasses": "The starting value for AdditionalIgnoreActorClasses",
    "FortDynamicRollBaseWeightTableRow:BaseWeight": "The starting weight of this roll entry.",
    "SpecialEventStatArrayEntry:StatComponent": "The stat component that created us and is responsible for us.\nAs a network optimization, we don't replicate this, but instead set it in the client's USpecialEventStatComponent::InitializeComponent().",
    "FortMinigameStatsComponent:StatNamesInUse": "The stat names in use, as described by their HUD short description",
    "FortStatEvent:AssociatedStat": "The stat object associated to this StatEvent (where the number of times this statevent was fired is kept)",
    "FortStatEventSequence:AssociatedStat": "The stat object associated to this StatEvent (where the number of times this statevent was fired is kept)",
    "TeamPerformanceMessageData:TrackingStat": "The stat that is used to trigger this message.",
    "FortEventConditional:Stat": "The stat that this conditional operates on",
    "BuildingGameplayActorConsumable:StatNameWhenConsumed": "The stat that tracks this particular consumption (defined in StatNamesToTrack.xlsm)",
    "FortEventConditional:StatToCompare": "The stat that we want to perform a comparison on",
    "FortAthenaMutator_PlayerSettingsBase:AssistStat": "The stat to monitor when an assist happens.",
    "EFortGameFeatureState": "The state an individual game feature is in",
    "FortMeshNetworkEventsLoader:ActiveMeshNetworkEvents": "The state data for active mesh network event",
    "GameplayStateMachineItem:StateMachine": "The state machine this item is tracking",
    "ESpecialEventRewindComponentState": "The state of a USpecialEventRewindComponent",
    "EFortBuildingPersistentState": "The state of a building actor as saved to the persistence system. Each type can handle these states individually",
    "EFortWeaponSoundState": "The state of a weapon, multiple of these can be true at once",
    "EOstrichDetonationState": "The state of detonation of the mech",
    "LaserGridConnectionEntry:State": "The state of the laser in this connection.",
    "LaserGridOutletEntry:State": "The state of the outlet.\n     The states of the outlet match the states of the laser\n     so we can use the ELaserState enum here.",
    "FortPickupLocationData:TossState": "The state of the toss for the pickup. FinalTossRestLocation should be set when this is AtRest",
    "LevelInstanceGameplayVolume:LoadingState": "The state of the volume",
    "FortCurieExecutionFilter:RequiredState": "The state that the owner of this component must be in for the element application to occur *",
    "VehicleModPhysicsShapeModifiers:bShapeEnabled": "The state the server has decided for this shape.",
    "FortWorldConditionWorldStatState": "The state tracked for an World Stat condition",
    "GiveInventoryItemParams_StateValue:Type": "The state type to set",
    "FMDeviceCableOrderingPortState:State": "The state used for logic",
    "FMDeviceCableOrderingPortState:VisualState": "The state used for visualizing the port",
    "WeaponModCosmeticData:MeshData": "The static mesh data to be spawned for the weapon mod",
    "BuildingSMActor:StaticMesh": "The static mesh for the non-animating state",
    "VehicleModStaticMeshAttachmentData:StaticMesh": "The static mesh to spawn on the vehicle.",
    "BuildingTrap:StaticMeshes": "The static meshes created from the data row",
    "FortAthenaMutator_Bagel:PlayerStatsNames": "The stats names to track for this playlist",
    "FortAthenaMutator_Mash:PlayerStatsNames": "The stats names to track for this playlist",
    "EFortReplicatedStat": "The stats that are replicated to the client for each player via the PlayerState. Usually used for scoreboard purposes",
    "EFortFriendRequestStatus": "The status of a friend request from one player to another",
    "VkTeamMembershipResult:Status": "The status of membership (pending|accepted)",
    "FortAthenaMutator_MarkerUtilities:StencilName": "The stencil highlight name. Only used if bDrawMarkedActorStencils is true.",
    "CustomHighlighting:EnemyStencilValue": "The stencil value to use for the highlight.",
    "CustomHighlighting:FriendlyStencilValue": "The stencil value to use for the highlight.",
    "IndicatedActorDataWithFilter:StenciledData": "The stenciled actor data.",
    "FabricSequencerPreviewFXComponent:StepSequencerGrid": "The step sequencer grid this FX will use",
    "FabricSequencerSustainComponent:StepSequencerGrid": "The step sequencer grid this sustain will use",
    "FabricSequencerPreviewFXComponent:StepSequencer": "The step sequencer this FX will use",
    "FabricSequencerSustainComponent:StepSequencer": "The step sequencer this sustain will use",
    "MotorcycleWheel:SpringStiff": "The stiffness associated with this spring",
    "SpringConfig:SpringStiff": "The stiffness associated with this spring",
    "VehicleSpringInfo:SpringStiff": "The stiffness associated with this spring",
    "MotorcycleWheel:WheelieSpringStiff": "The stiffness associated with this spring when doing a wheelie/stoppie",
    "MotorcycleWheel:PowerslideSpringStiff": "The stiffness associated with this spring when powersliding",
    "MotorcycleWheel:PoppedTireSpringStiff": "The stiffness associated with this spring when the tire is popped.",
    "FortActiveSubscription:AppStore": "The store where the user bought the subscription.",
    "EFrontEndCamera.Store": "The store where we buy stuff",
    "FortActiveSubscription:UniqueSubscriptionId": "The store-specific subscription ID used to detect duplicated subscription on the same platform.",
    "Storefront:Name": "The storefront name",
    "FortStormCapStateUpdatedEvent:StormCapState": "The storm cap state",
    "EMissionStormShieldState.SHRINKING": "The storm shield radius is decreasing over time",
    "EMissionStormShieldState.GROWING": "The storm shield radius is increasing over time",
    "EMissionStormShieldState.IDLE": "The storm shield radius is not changing",
    "FortAthenaMutator_Uranium:StormShield": "The storm shield that will be used for this game mutator",
    "CobaltCombatStormShieldDataEntry:ParentStormShields": "The storm shields that feed into this one in the bracket structure, represented as indices into the storm shield array",
    "MilkshakeFieldSystemActor:Strength": "The strength of the field system actor.",
    "AthenaCapturePoint:HUDOffset": "The string associated with this HUD element. It gets looked up in FortUIStyle.cpp",
    "AthenaCapturePoint:HUDStyle": "The string associated with this HUD element. It gets looked up in FortUIStyle.cpp",
    "FortAnimNode_TransformRollerTreads:RotationBoneName": "The string format used to find the rotation bone for the rollers.  '{0}' represents the name of the Translation bone.",
    "WindSplineTargetEffects": "The struct encapsulating the effects to apply on the wind spline targets",
    "WindSplineForceModifiers": "The struct encapsulating the force modifiers for wind splines",
    "ValkyrieStructPropertyPermissionList:Type": "The struct to apply this PermissionList to",
    "RepParamBool": "The struct type for a replicated bool param.",
    "RepParamFloat": "The struct type for a replicated float param.",
    "RepParamInteger": "The struct type for a replicated integer param.",
    "RidingAnalyticsData_Started": "The struct type for riding started analytics events.\n      NOTE: Stubbed this in for now, with the intention to\n                add more data later.",
    "RidingAnalyticsData_Stopped": "The struct type for riding stopped analytics events.",
    "TempestReplicatedMovementData": "The struct used to encapsulate the movement data that is replicated to the client",
    "FortUIStyleWindowButtons:Close": "The style for the button to close the window.",
    "FortUIStyleWindowButtons:Maximize": "The style for the button to maximize the window (if not already maximized).",
    "FortUIStyleWindowButtons:Minimize": "The style for the button to minimize the window.",
    "FortUIStyleWindowButtons:Restore": "The style for the button to restore the window to non-maximized size (if maximized).",
    "StyleSequenceElement:Style": "The style to be applied",
    "FortVehicleFuelComponent:FuelSubText": "The sub text to show in the interaction widget. If you do {0} that means we'll replace that with a value like the fuel percentage number.",
    "ObjectiveFilter_Custom:Subjects": "The subjects of this filter.",
    "GameFeatureSubmixEntry:Submix": "The submix to connect when the game feature is active",
    "FortAthenaMutator_SpecialEventTODM:SubphaseIndexInProgress": "The subphase for which we are waiting for a timer callback, so that we can process its TODM modification.  Replicated only for debug text.",
    "EffectRecipientConfig:Effects": "The subset of service effects intended for the indicated recipient",
    "UrgentQuestData:EventSubtitle": "The subtitle of the event to display.",
    "UrgentQuestSettings:EventSubtitle": "The subtitle of the event to display.",
    "FortIronCityDifficultyData:SuggestedStatClamp": "The suggested Stat Clamp mapped to the account level",
    "FortTimeOfDayManager:SunOrMoonMeshComp": "The sun mesh component during the morning/day/evening phases. The moon mesh during the night phase.",
    "BuildingGameplayActorSupplyDropRadio": "The supply drop BGA to which the balloon actor and the payload actor such as crate or vehicles are attached.\nIt is a part of the supply drop radio item that the player can use to call in a supply drop.\nThe primary responsibilities of this actor is to manage the falling movement and landing states of the supply drop.",
    "SupplyDropSpawnData:SupplyDropInfo": "The supply drop info asset being used to spawn the drops",
    "FortActiveSubscription:AutoRenewState": "The supported auto renew state for the subscription.",
    "FortCreativeDiscoverySurfaceRevision:SurfaceName": "The surface name.",
    "FortPlayerFoleyContextSettings:Surface": "The surface type for this event.",
    "BuildingWeakSpot:PhysicalSurfaceType": "The surface type this thing sits on",
    "HurdleInputConfig:Phase5_CapsuleOffset": "The sweep back at the landing position to the hurdle obstacle capsule offset from the ground",
    "HurdleInputConfigCache:Phase5_CapsuleOffset": "The sweep back at the landing position to the hurdle obstacle capsule offset from the ground",
    "MarshalledVFXData:Asset": "The system which should be loaded",
    "EncounterVariableSelections_ActorClass:ValueChoiceTable": "The table used to select a value from",
    "EncounterVariableSelections_Boolean:ValueChoiceTable": "The table used to select a value from",
    "EncounterVariableSelections_Float:ValueChoiceTable": "The table used to select a value from",
    "EncounterVariableSelections_GameplayTag:ValueChoiceTable": "The table used to select a value from",
    "EncounterVariableSelections_Integer:ValueChoiceTable": "The table used to select a value from",
    "EncounterVariableSelections_LWMEncounter:ValueChoiceTable": "The table used to select a value from",
    "EncounterVariableSelections_TagQuery:ValueChoiceTable": "The table used to select a value from",
    "MashAIPawnLootDropOverride:Tag": "The tag a spawned pawn must possess to use this loot drop override.",
    "WeaponRechargeAmmoMappingData:TagOnPlayer": "The tag associated with the the weapon we want to have recharging ammo",
    "FortGameFeatureActionParameters_AddVehicleModData:VehicleMod": "The tag defining the vehicle mod.",
    "ObjectiveSubjectTags:TagQuery": "The tag expression that must be true for this subject.",
    "CosmeticFlowGraphKey:CategoryTag": "The tag for the category of flow graph that this subflow is part of, i.e. Character (complete),\nCharacter Part (one part, not the whole character), Weapon, Vehicle, etc.",
    "CobaltWidgetMatchData:POITag": "The tag for the poi where this match is taking place",
    "FortVariantData:TODTags": "The tag for the time of day that this variant can be found in.",
    "ImpulseResponseData:GameplayTag": "The tag for the type of interaction to allow an impulse from",
    "InteractionImpulseData:GameplayTag": "The tag for the type of interaction to allow an impulse from",
    "FortSurfaceTypeToSurfaceTypeTag:SurfaceTypeTag": "The tag for this footstep surface type",
    "RepParamBase:Tag": "The tag identifier for this rep param.",
    "TaggedPOI:POITag": "The tag of the POI considered",
    "FortVariantData:POITags": "The tag of the POI that this variant can be found in.",
    "CobaltCombatStormShieldDataEntry:POITag": "The tag of the POI this storm shield is located on top of",
    "FortAIPawnUpgrade:TagQuery": "The tag query that identifies which pawns should use this upgrade data.",
    "FindActorByClassData:TargetFilter": "The tag query to filter by.",
    "FortGameplayTagQueryPerDifficulty:TagQueryToMatch": "The tag query we will try to match if our game difficulty specified is greater or equal",
    "FortTagUIData:Tag": "The tag represented by this info",
    "FortWeaponRangedDualSwing:SkiddingTag": "The tag that is applied to the player while they are skidding.",
    "FortAthenaMutator_Skyfire:BeingAbductedTag": "The tag that is granted to players when they are abducted in AwfulDuck.",
    "SkyfireVaultOrbSpawner:OrbSpawnPointTag": "The tag that is on all Actors that should be used as orb spawn points.",
    "FortCriteriaRequirementData:RequiredTag": "The tag that is required to get the criteria bonus",
    "FortWeaponRangedDualSwing:InitialOverrideSwingingControlParamsTag": "The tag that maps to the override swinging control param that should be used by default when this weapon is equipped. If left blank,\n    none of the overrides will be used and the player's default SwingingControlParams will be used (until SetActiveOverrideSwingingControlParams is called).",
    "NyxGlassWeaponComponent_Swinging:OverrideSwingingControlParamsTag_Attacking": "The tag that maps to the override swinging control params to use while the player is in the Attacking state.",
    "NyxGlassWeaponComponent_Swinging:OverrideSwingingControlParamsTag_Hovering": "The tag that maps to the override swinging control params to use while the player is in the Hovering state.",
    "NyxGlassWeaponComponent_Swinging:OverrideSwingingControlParamsTag_LeapingBack": "The tag that maps to the override swinging control params to use while the player is in the Leaping Back state.",
    "NyxGlassWeaponComponent_Swinging:OverrideSwingingControlParamsTag_Swinging": "The tag that maps to the override swinging control params to use while the player is in the Swinging state.",
    "HUDWidgetRegistryEntry:HUDWidgetTag": "The tag that represents the HUD Element Widget.",
    "FortAbilityTagRelationship:AbilityTag": "The tag that this container relationship is about. Single tag, but abilities can have multiple of these",
    "FortLootGroupWeightData:LootRowRequiredTag": "The tag that this container relationship is about. Single tag, but abilities can have multiple of these",
    "ExpeditionSlot:SlotTag": "The tag that this slot is unlocked by",
    "FortTagToDeathCause:DeathTag": "The tag that would indicate this death cause",
    "UrgentQuestData:EventTag": "The tag to associate with this event entry.",
    "UrgentQuestSettings:EventTag": "The tag to associate with this event entry.",
    "PetStimuliResponse:ResponseTag": "The tag to respond to",
    "AudioClusterActorInfo:Tag": "The tag to use to determine the actor's clustering/sound behavior",
    "AudioClusterOneShotInfo:Tag": "The tag to use to determine the clustering/sound behavior",
    "HUDWidgetBehaviorRegistryEntry:HUDWidgetBehaviorTag": "The tag used by the Widget Registry to represent a HUD Widget Behavior.",
    "HUDWidgetException:HUDWidgetBehaviorRegistryEntry": "The tag used by the Widget Registry to represent a HUD Widget Behavior.",
    "FortVariantData:CollectionTag": "The tag used by the collection system.",
    "FortVariantData:ItemFilterTag": "The tag used by the item definition so we know what variants it wants to use.",
    "PhaseInfo:PhaseTag": "The tag used for looking up this phase.  The corresponding ASpecialEventPhase must have the same tag for its PhaseTag property.",
    "FortVariantData:AnalyticsTag": "The tag used for tracking.",
    "FortAthenaMutator_MarkerUtilities:TopScoringPlayerSpecialActorTag": "The tag used to identify special actor entries for players in top scoring teams",
    "SafeZoneLocation:LocationTag": "The tag used to identify this safe zone location. Should be unique to this location.",
    "UserOptionDefinition:SharedSettingOverride": "The tag used to indicate which Shared Setting in which data registry user option should override.",
    "BuildingActor:PhysicsObjectBuoyancyDataTag": "The tag used to look up the Buoyancy Data Asset (defined in a Physics Object Asset Data Setup asset)",
    "BuildingActor:PhysicsObjectPhysicalDataTag": "The tag used to look up the Collision Effect Data and Physical Material Override (defined in a Physics Object Asset Data Setup asset)",
    "BuildingActor:PhysicsObjectImpactDamageDataTag": "The tag used to look up the Impact Damage Data Asset (defined in a Physics Object Asset Data Setup asset)",
    "BuildingActor:PhysicsObjectPresetTag": "The tag used to look up the Physics Object Preset to use (defined in a Physics Object Asset Data Setup asset)",
    "SpecialEventStatDefinition:LookupTag": "The tag used to look us up",
    "GameplayTagActorHasMatchingGameplayTagInstanceData:TagToCheck": "The tag we'll check on the provided actor.",
    "FortDynamicRollWeightModifierTableRow:TargetModTag": "The tag which will receive modification. Items with this tag defined in the weights table will receive this modification.",
    "VehicleSpecificUIDetails:Slot": "The tag/name the slot to use will have.\nIf None, or the slot isn't found, the widget will\nsimply be added to the root canvas panel.",
    "FortMapData:BuildingLevelTags": "The tags that apply to the listed map",
    "FortPhysicsObjectComponent:PhysicsObjectSetupTags": "The tags that are used to look up the physics object data assets",
    "FortDifficultyOptionBudget:BudgetTypeTags": "The tags that identify when to use this difficulty option budget. These get matched against tags from the encounter or mission",
    "FortAIEncounterSpawnGroupCapsProfile:EncounterTypeTags": "The tags that identify when to use this encounter spawn group cap profile",
    "HighlightObjectData:HighlightTags": "The tags that the object will have that will receive the highlight.",
    "IndicatedActorDataWithFilter:IndicatedActorTags": "The tags that the object will have that will receive the highlight.",
    "SoundIndicatorIconPicker:Tags": "The tags that will display the given icon in the sound indicator radial if the owner of the sound indicator component has any of them.",
    "SoundIndicatorTypePicker:Tags": "The tags that will display the given sound indicator type if the owner of the sound indicator component has any of them.",
    "FortMissionPlacementActorPreferredTagInfo:PlacementActorPreferredTags": "The tags we will use if our game difficulty specified is greater or equal",
    "FortWorldConditionGameplayTagActor:TagContainerToCheck": "The tags we'll check on the provided actor.",
    "GameplayTagActorHasMatchingGameplayTagContainerInstanceData:TagContainerToCheck": "The tags we'll check on the provided actor.",
    "FortBuildingWallDoorComponent:DoorDesiredLocation": "The target RelativeLocation, set when starting the animation",
    "FortBuildingWallDoorComponent:DoorDesiredRotation": "The target RelativeRotation, set when starting the animation",
    "WindSplineTargetDatum:Target": "The target actor",
    "ServerLongInteractInfo:Target": "The target actor for long interaction",
    "PhysicsMagneticForceData:TargetActors": "The target actors",
    "FortCowVehicle:TargetSquash": "The target amount of squash to interp to for the squash material.",
    "FortTimeOfDayWeatherComponent:TargetBlendTime": "The target blend time we are converging too",
    "WindSplineTargetDatum": "The target datum for the spline component",
    "WindSplineTargetEffects:Filter": "The target filter based on which the effects will be applied. If empty, the effects will always apply",
    "KatanaTargetingComponent:ObstructionTargetFilter": "The target filter used for the obstruction box overlap.",
    "EVkLinkPublishMode": "The target mode for the published link",
    "PropertyOverrideData:BaseObject": "The target object",
    "FortPickupLocationData:CombineTarget": "The target pickup that this pickup is combining with",
    "FortNevadaVehicle:TractorBeamTargetPosition": "The target position of the tractor beam",
    "FortKatanaPrimaryAttackVariationInfo:TargetSelectionList": "The target selection list that will be used to calculate target pawns for this variation.",
    "KatanaTargetingComponent:PawnTargetSelectionList": "The target selection list that will be used to calculate target pawns to dash towards.",
    "TempestReplicatedMovementData:TargetServerLocation": "The target server location used to simulate the movement on the client",
    "FortMovementComp_GroundSpline:ReplicatedTargetSpeeds": "The target speeds and accelerations of the owning object replicated from the server",
    "AudioWorldizationSend:Submix": "The target submix on which to override settings",
    "SBMusicalTargetsCueId:TargetIndex": "The target that this cue is assigned to.",
    "FortPickupLocationData:ItemOwner": "The target the pawn is flying to",
    "FortPickupLocationData:PickupTarget": "The target the pickup is flying to",
    "FortKeyframedMovementComponent:Target": "The target. This is always our owner.",
    "FortNevadaVehicle:TractorBeamTargetedActor": "The targeted actor of the tractor beam",
    "WindSplineComponent:TargetData": "The targeted actors",
    "TempestLightningBoltData:TargetActors": "The targeted actors in the lightning bolt area of effect",
    "TempestLightningBoltData:TargetPawns": "The targeted pawns in the lightning bolt area of effect (Subset of the TargetActors)",
    "PhysicsMagneticForceData:TargetingHandle": "The targeting handle",
    "TempestTornadoForcesComponent:AsyncTargetingHandle": "The targeting handle used for the target request",
    "PhysicsMagneticForceData:TargetingPreset": "The targeting preset for the force",
    "TempestTornadoForcesComponent:TargetingPreset": "The targeting preset we will use to find actors for the tornado to affect",
    "TargetDataEntry:Targets": "The targets we are looking at",
    "TeamPlacementData:TeamId": "The team Id.",
    "DeploymentConsoleAircraftData:Team": "The team associated with the aircraft.",
    "FortAthenaVehicle:TeamID": "The team associated with this vehicle. Used to represent team ownership.",
    "AthenaCapturePoint:TeamCapturingPoint": "The team currently capturing the point. NumCapturingPoint > 0",
    "AthenaCapturePoint:TeamControllingPoint": "The team currently in control of the point. CapturePercentage > 0",
    "BarrierTeamState:ObjectiveFlag": "The team flag (aka, the llama/burger/tomato head) that will be lowered when the objective is destroyed",
    "CustomHighlighting:TeamDisplayOverride": "The team for which we will perform the friend/enemy calculation for stencil value if != to EFortTeam::MAX. If it is EFortTeam::MAX we use the pawn's team.",
    "VkTeamMembershipResult:TeamId": "The team id",
    "TDMPlayerStandingInfo:PlayerTeamId": "The team id of the player that this FTDMPlayerStandingInfo corresponds to.",
    "FortPlayerPushableCart:TeamRoles": "The team indices for each team role (pusher and defender)",
    "AthenaCapturePoint:TeamInfoControllingPoint": "The team info currently in control of the point. CapturePercentage > 0",
    "FortGameStateZone:IntensityPercent": "The team intensity percentage used for debug HUD",
    "FortInGameLeaderboardPlacementData:TeamMembers": "The team members of this team",
    "FortInGameLeaderboardPlacementData:TeamNum": "The team number of this scoring struct",
    "BarrierTeamState:ObjectiveObject": "The team objective that needs to be destroyed to lower the flag",
    "MinigamePlayerBucket:TeamIdAtGameStart": "The team players in this bucket were assigned to on game start",
    "EFortLeaderboardMetric.TeamScore": "The team score used in win condition logic.  Calculated by AFortGameModeAthena::CalculateTeamScore()\nand replicated via AFortPlayerStateAthena::TeamScore.",
    "CaptureComponent:OwningTeam": "The team that currently owns this capture component",
    "CobaltCombatStormShieldDataEntry:TieBreakerTeam": "The team that holds the first score for the round in the POI. This team will win in the event of a tie.",
    "CobaltCombatStormShieldDataEntry:LeadingTeam": "The team that is currently leading the round with tie-breaks included.",
    "AthenaCapturePoint:TeamOwningPoint": "The team that owns the point when captured.",
    "FortTeamMemberInfo:TeamAffiliation": "The team that this player is on",
    "UraniumSingleRoundInfo:RoundTeamWinner": "The team that won this round. Set at runtime",
    "PickupInstigatorData:TeamIndex": "The team the pickup should be associated with",
    "TrackedObjective:TeamIndex": "The team this objective is associated with, if any",
    "FortLobbyBeaconPlayerState:TeamAffiliation": "The team this player is on",
    "CobaltCombatStormShieldDataEntry:FirstLandTeam": "The team to land first into the POI.",
    "IndicatedActorData:DisplayTeamOverride": "The team we will base the display of our data off of. EFortTeam::Max will use the indicating actor's team",
    "StenciledActorData:DisplayTeamOverride": "The team we will base the display of our data off of. EFortTeam::Max will use the indicating actor's team",
    "DBNOCustomSettings:SelectedTeam": "The team which this settings will be applied to",
    "TeamPlacementData:TeamPlacement": "The team's current placement.",
    "CobaltWidgetMatchData:Teams": "The teams participating in this match",
    "FortAthenaMutator_Cobalt:TeleportMutator": "The teleport mutator is responsible for reviving and teleporting players and making sure that they arrive at the same time.",
    "FortAthenaMutator_Cobalt:TeleportingSpectatorsText": "The teleport reason the spectators see when they are following their view target into a new round",
    "FortAthenaMutator_Cobalt:TeleportingPlayersText": "The teleport reason used by the SafeTeleportPlayer function, used to move players from the old round storm shields to the new round storm shields",
    "FortAthenaMutator_Chrome:TeleportingPlayersText": "The teleport reason used by the SafeTeleportPlayer function, used to move players from the the starter island to their respective spawn locations on the map.",
    "ItemQuantity:TemplateId": "The template ID for the item",
    "FortEditorToolsSettings:EditorFlashlightComponent": "The template SpotLightComponent used by the editor flashlight button",
    "FortQuestRewardTableRow:QuestTemplateId": "The template id of the quest that this reward corresponds with",
    "FortQuestRewardTableRow:TemplateId": "The template id of the reward",
    "FortRewardQuantityPair:TemplateId": "The template id of the reward",
    "HmxEditorSettings:MidiMusicTemplate": "The template to use for midisong/midimusic DTA files in this game. This should have been defined by a coder\nfor each game.",
    "HmxEditorSettings:MoggMusicTemplate": "The template to use for moggsong/moggmusic DTA files in this game. This should have been defined by a coder\nfor each game.",
    "SparksPlayspaceEvent_TempoChanged": "The tempo of the music played in the sparks music playspace has changed",
    "DanceSynchronizerComponent:Tempo": "The tempo that the component can sync to.",
    "FortWorldConditionPlayerHasConvertedNPC:ConditionToCheck": "The test that will be done.",
    "AthenaCarPlayerSlot:SeatChoiceDisplayText": "The text the seat will show when interactable.",
    "FortDialogDescription:DismissButtonText": "The text to display for the \"no\" button",
    "FortDialogDescription:IgnoreButtonText": "The text to display for the \"no\" button",
    "FortDialogDescription:AcceptButtonText": "The text to display for the \"yes\" button.",
    "CreativeOptionCategoryData:CategoryDisplayName": "The text to display for this value in the UI.",
    "CreativeOptionData:DisplayText": "The text to display for this value in the UI.",
    "BuildingProp_BountyBoard:FailedInteractionTextToUse": "The text to display if the interacting player failed to interact with this building for some reason. Will be dynamically\n    set to NoBountiesAvailableInteractionText or BountyInProgressInteractionText.",
    "BuildingProp_BountyBoard:NoBountiesAvailableInteractionText": "The text to display if there are no available bounty targets for the interacting player.",
    "BuildingProp_BountyBoard:BountyInProgressInteractionText": "The text to display if there is already a bounty quest in progress for the interacting player.",
    "AthenaGameMessageData:MsgText": "The text to display in the message",
    "FortConversationSentence:SpeechText": "The text to display in the speech bubble for this sentence",
    "SynchronizedTeleportFadeOutReplicationData:HUDReasonText": "The text to display while the fade out is occuring.",
    "FortUnableToPerformData:Message": "The text to show instead on \"Unable to perform action\".",
    "UserOptionDefinitionContainer:InteractionText": "The text to show when interacting with the thing that owns these options.",
    "GameplayTagMessage:Text": "The text to show.",
    "HUDMessageData:TextTransformPolicy": "The text transformation policy to apply to this message",
    "FortTimeOfDayManager:CloudMaskTexture": "The texture to be applied as the \"Cloud Mask\" material parameter in the sky material",
    "FortGameMode:TheaterSlot": "The theater slot to load/save to, will be -1 until theater data is ready",
    "MatchmakingParams:TheaterId": "The theater this is part of, broken out of zone instance id for critical mission matchmaking",
    "FortTheaterMapTile:MapCoord": "The three dimensional coord within the hex map - used for distance calculations",
    "ELayoutRequirementStatus": "The three valid states for a layout requirement: Inactive_Invisible (should only be true until the mission finishes\nloading; means that the requirement is neither registered NOR visible, i.e. it is effectively non-existent),\nActive_Invisible (meaning we want to make sure the wrong type of actor cannot be placed, but we don't want the\nrequirement to be shown to the player yet), and Active_Visible (it's active and as visible as it needs to be based\non whether an actor of the right type is placed, etc.)",
    "SKPushVehicleInPersistent:BrakeAboveTopSpeedDelta": "The threshhold above the top speed for the gear to brake at.",
    "CombatThresholdData:ThresholdName": "The threshold name",
    "WinConditionScoreData:BigScoreThreshold": "The threshold that determines what score is considered high enough to get the large font treatment in the UI",
    "FortGravityGunHolder:ThrowSpeed": "The throw speed of the held object.",
    "FortHeldObjectComponent:HeldObjectMovementReplicatedData": "The thrown replicated data for start location and velocity",
    "FortGameStateZone:DifficultyIncreaseRewardTier": "The tier that the difficulty has been boosted to. Adds to mission rewards on mission success.",
    "FortDeployableBaseManager:ActiveTieredCollectionLayouts": "The tiered collection layouts used during horde mode",
    "FortTheaterMapTile:FocusedBrightness": "The tile brightness for a focused tile",
    "FortTheaterMapTile:LockedBrightness": "The tile brightness for a locked tile",
    "FortTheaterMapTile:NormalBrightness": "The tile brightness for a normal, unselected unlocked tile",
    "FortTheaterMapTile:SelectedBrightnessRange": "The tile brightness pulse range for a selected tile",
    "FortTheaterMapTile:SelectedPulseSpeed": "The tile brightness pulse range for a selected tile",
    "FortAthenaMutator_Skyfire:FlavorTextCountdownThreshold": "The time (in seconds) before the timer hits zero in which we want to start displaying the Flavor Text messages.",
    "FortAthenaMutator_Skyfire:PrisonTime": "The time (in seconds) between when the first non-bot player arrives in the prison and when the group teleport to the playspace occurs.",
    "FortPlayerPawn:TransformationMontageStartTime": "The time (in seconds) of where to start playing the transformation montage.",
    "FortAthenaMutator_Skyfire:MinPrisonTime": "The time (in seconds) that each player MUST spend in the prison.\n(Eg, if a player loads in to the prison after or right before the group teleport they will still wait this time in the prison before teleporting to the playspace.)",
    "FortMinigame:TimeLimit": "The time (in seconds) the minigame should last before automatically ending\nThis is in addition to any possible end conditions, which can also end the minigame",
    "PlayerFishingTelemetryData:TimeFishingSessionBegan": "The time a fishing session began",
    "SpecialEventRewindComponentStateData:ServerWorldTime": "The time at which the latest state change was made",
    "ReplicatedSpawnInfo:ServerSpawnTime": "The time at which the player is suppose to spawn in at (dependent on client<->server handshake)",
    "AthenaResurrectionComponent:NotifyPlayerDamageThrottle": "The time at which we'll allow another notify for clone machine being under attack",
    "FortTrapStats:FireDelay": "The time between a target being acquired and the trap firing",
    "FortTrapStats:ArmTime": "The time between placing the trap and it being ready to fire",
    "FortTrapStats:DamageDelay": "The time between the trap firing and damage actually being dealt",
    "SkyfireTeleportData:PreTeleportTime": "The time between when the teleport has \"started\" (point of no return) and the actual teleport occurs",
    "FortCharacterVehicle:ReregisterSpecialActorIconDelay": "The time delay before we re-register the special actor icon",
    "FortCharacterVehicle_Ostrich:SelfDestructInStormDelay": "The time delay before we self destruct when we are in the storm",
    "SpecialEventTODMSubphaseData:PhaseTime": "The time elapsed from phase activation, at which we should perform this TODM modification",
    "FortAthenaMutator_DadBro:OverriddenTimeOfDay": "The time in hours that should be set when DadBro is active",
    "FortReplicatedWeatherEventData:BlendOutDuration": "The time in seconds after the end time it takes for the weather to blend out",
    "FortReplicatedWeatherEventData:BlendInDuration": "The time in seconds after the start time it takes for the weather to blend in",
    "SkyfireVaultOrbSpawner:NoOrbPickedUpSpawnTime": "The time in seconds after which an orb should be spawned if no orbs have been picked up in that time.",
    "FMDeviceCableOrderingMovementState:MovementTimeSeconds": "The time in seconds for how long it should take for ports to move from one state to the next.",
    "SkyfireVaultOrbSpawner:OrbSpawnDelayAfterPickup": "The time in seconds to wait after an orb is picked up to spawn another one (if there are none left).",
    "SkyfireVaultOrbSpawner:DelayToInitialOrbSpawn": "The time in seconds to wait after the core gameplay starts before spawning the initial orbs.",
    "FortReplicatedWeatherEventData:EndTime": "The time in seconds when the weather event ended",
    "FortReplicatedWeatherEventData:StartTime": "The time in seconds when the weather event started",
    "FortAIPawn:EncounterSpawnDisableMeleeAttackingTime": "The time it takes to enable melee attacks after AI's encounter spawn",
    "FortAIPawn:EncounterSpawnDisableRangedAttackingTime": "The time it takes to enable ranged attacks after AI's encounter spawn",
    "GearConfig:RampTime": "The time it takes to go from 0 push force to full PushForce",
    "SMVehicleGear:RampTimeHotfixable": "The time it takes to go from 0 push force to full PushForce",
    "PhysicsObjectMovementStateData:MovingStopTime": "The time movement has been flagged as \"ended\"",
    "FortTimeOfDayManager:StartTimeOfDayInGame": "The time of day a game begins when NOT launched from PIE.  NOTE: For PIE, see the editor view settings.  These are kept separate to make it easier to tweak values for testing without effecting game-side behavior.",
    "FortWorldSettings:TimeOfDayEditorWeatherSettings": "The time of day editor weather settings for testing purposes",
    "FortWorldSettingsOverride:TimeOfDayManagerClass": "The time of day manager class to override the class in the world settings",
    "FortGameStateBase:FortTimeOfDayManager": "The time of day manager for this world",
    "GlobalWeatherData:MaterialWeatherData": "The time of day material blend data for the weather event",
    "TimeOfDayPhase:Time": "The time of day this phase represents",
    "FortDayPhaseData:StartTime": "The time of day when the day phase starts",
    "VoteData:VoteEndTime": "The time of the end of the vote, according to the server world time",
    "VoteData:VoteStartTime": "The time of the start of the vote, according to the server world time",
    "CreativeAudioPlayerData:ServerAudioStartTime": "The time on the server when the audio was due to start. -1.0f denotes that the audio should not be playing",
    "TempestStateInfo:StartTime": "The time on the server when this state began",
    "TempestStateInfo:EndTime": "The time on the server when this state will end",
    "FortMovementComp_Character:TacticalSprintBrakingTimeThreshold": "The time period during which the character will use the tactical sprint braking threshold if there is no\nstick input (zero acceleration)",
    "FortHealthyGamingData:GameplayRestrictionWarningTimeOffset": "The time should be in seconds!",
    "FortPlayerPawn:LastCustomizationTimestamp": "The time stamp at which the last post cosmetic event was called",
    "DBNOCustomSettings:TimeToRevive": "The time that the players will take to revive a DBNO teammate",
    "FortGameModePvE:BigBenPvE": "The time that the server should force success all running missions.",
    "ScoutDroneDeferredDestructionData:ServerDismissStartTime": "The time that we started dismissing the drone in the server, used to be able to sync dismissal on client",
    "WindSplineBlockage:ActivationTime": "The time the blockage was activated",
    "WindSplineBlockage:DeactivationTime": "The time the blockage was deactivated",
    "PhysicsObjectImpactInstigatorData:ServerTimeAssigned": "The time the instigator was assigned (useful if we need to track length, or support timeouts, etc)",
    "PhysicsObjectMovementStateData:TimeMovementStateUpdated": "The time the movement state was last changed",
    "CobaltCombatStormShieldDataEntry:NextSupplyDropSpawnTime": "The time the next supply drop for this storm shield should be spawned at",
    "ControlPointInstanceData:TimeOfShutdown": "The time the point was permanently shut down",
    "SpecialActorRepData:AddedToClientTime": "The time this data was added and recognized by the client",
    "GameplayStateMachineItem:InitializationTime": "The time this machine was created and initialized",
    "DaySequenceModifierComponent:DayNightCycleTime": "The time to use for the day/night cycle.",
    "FortAthenaMutator_Barrier:TimeToBringDownWall": "The time until we bring down the wall",
    "FortAthenaVehicle:TimeToAutoCamera": "The time until we start trying to auto center the camera.",
    "FortWeaponRanged:TimeHeatWasLastAdded": "The time we last change the overheat value",
    "FortPlayerControllerAthena:TimeStartedTrackingBuildingAnalytics": "The time we started tracking this last update",
    "FortAthenaMutator_Cobalt:DelayBeforePushToSpectateMode": "The time we wait after a team has finished winning a round before moving the players (alive) to spectator mode where they can watch other matches",
    "FortAthenaMutator_Cobalt:DelayBeforeNextRound": "The time we wait after the final team has won a round before moving all the winning teams to the next round",
    "FortTimeOfDayWeatherComponent:WeatherEventAttemptStart": "The time we wait before attempting to start any weather event",
    "FortDadbroPickupDespawnData:DespawnTime": "The time we want to despawn this pickup",
    "HurdleInputConfig:SlideBufferTime": "The time we will prevent hurdle after sliding",
    "HurdleInputConfigCache:SlideBufferTime": "The time we will prevent hurdle after sliding",
    "FortProjectileMoveComp_Drunk:DrunkTravelTime": "The time we've been doing drunk movement.",
    "ActiveGameplayStateData:InitializationTime": "The time when this state was created and initialized",
    "FortGravityGunHolder:TimeWhenStartedHolding": "The time when we started holding the object.",
    "ZiplinePawnState:TimeZipliningBegan": "The time ziplining began",
    "ZiplinePawnState:TimeZipliningEndedFromJump": "The time ziplining ended because of jump",
    "FortFeedbackEventData:TimeLastPlayed": "The time, in seconds, that this event was last played",
    "FortFeedbackEventData:FeedbackDelay": "The time, in seconds, to wait before this feedback is started",
    "FortAthenaMutator_Cobalt:MoveToSpectateTimerHandles": "The timer handle that helps move players to the spectator mode after a certain delay (DelayBeforePushToSpectateMode). This variable is stored to be cleared later if not used",
    "AthenaCobaltStormShield:ShrinkTimerHandle": "The timer handle that is responsible for keeping track of the duration after which the storm shield starts shrinking",
    "GasDebugReplicatableCallStack:EventId": "The timestamp of this event for lookup purposes",
    "PegasusTimelineEventHit:PGS_ReplayStartTimeStamp": "The timestamp of this event, in the replay world's time (e.g. at the 15minute mark in the replay file",
    "PegasusTimelineEventHit:PGS_ClipRelativeStartTime": "The timestamp of this event, relative to the start of the specific clip. (e.g, 10 seconds in to the video)",
    "SpecialEventRewindComponentFrame:ServerWorldTime": "The timestamp of this frame, AGameStateBase::GetServerWorldTimeSeconds()",
    "HomebaseNodeDisplayData:Title": "The title for the node level. This may differ from level to level",
    "FortQuestMapPage:PageTitle": "The title for this quest map page",
    "FortClientAnnouncementData_Basic:TitleText": "The title of the announcement to be displayed",
    "UrgentQuestData:EventTitle": "The title of the event to display.",
    "UrgentQuestSettings:EventTitle": "The title of the event to display.",
    "CatalogOffer:Title": "The title of this store item",
    "FabricButtonBase:ToggleState": "The toggle state of the button",
    "FabricButtonComponentBase:ToggleState": "The toggle state of the button",
    "FortTooltipTokenInfo:Token": "The token represented by this info",
    "HurdleInputConfig:Phase2_UpAngleTolerance": "The tolerance angle on the landing for the first corner from a full up vector",
    "HurdleInputConfigCache:Phase2_UpAngleTolerance": "The tolerance angle on the landing for the first corner from a full up vector",
    "HurdleInputConfig:Phase4_UpAngleTolerance": "The tolerance angle to the floor on landing for hurdle",
    "HurdleInputConfigCache:Phase4_UpAngleTolerance": "The tolerance angle to the floor on landing for hurdle",
    "HurdleInputConfig:Phase1_WallAngleToleranceFlat": "The tolerance we allow on the facing wall in order to hurdle over",
    "HurdleInputConfigCache:Phase1_WallAngleToleranceFlat": "The tolerance we allow on the facing wall in order to hurdle over",
    "RotatorErrorCheck:ToleratedErrorInDegrees": "The tolerated deviation from the 'TestFromAngle' in degrees. Deviation > this will be classed as an error.",
    "EpicArtApp:Tooltip": "The tooltip to show when hovering over the menu item for this application",
    "PlayspaceManagerComponent:RootPlayspace": "The top level Playspace, of a tree of Playspaces, this manager is controlling",
    "GearConfig:TopSpeed": "The top speed (km/h) associated with this gear when moving on a flat surface",
    "SMVehicleGear:TopSpeedHotfixable": "The top speed (km/h) associated with this gear when moving on a flat surface",
    "SpecialEventCursorPawnComponent:ReplicatedCursorStackEntry": "The top-most entry in CursorStack, which is the currently active cursor",
    "FortAthena_WaxToken:TotalTravelTime": "The total amount of time it takes the token to traverse from the victim to the target.",
    "FortGameplayEffectContext:TotalChargeTime": "The total amount of time since a charge was started.",
    "CobaltCombatStormShieldDataEntry:TotalDamageDealt": "The total damage dealt by the teams in this POI.",
    "CobaltCombatStormShieldDataEntry:TotalDamageTaken": "The total damage taken by the teams in this POI",
    "FortGeneratedDifficultyOptions:DifficultyOptionPointsAvailableAtGeneration": "The total difficulty option points available for generation of mission difficulty options",
    "FortTimeOfDayWeatherComponent:BlendTimeLength": "The total length the blend in/out will take",
    "FortAthenaMutator_Bagel:FriendsLeaderboardDisplayedNumber": "The total number of friends leaderboard to display (includes special entries)",
    "FortAthenaMutator_Mash:FriendsLeaderboardDisplayedNumber": "The total number of friends leaderboard to display (includes special entries)",
    "AthenaCapturePoint:NumCapturingPoint": "The total number of people currently capturing the point. This is\n      dictated by the contention rules.",
    "FortTeamMemberInfo:NumPlayersInParty": "The total number of players in this player's persistent party\nNote: This is not the number of total players on this player's team",
    "EFortTrickIncrementType.TrickPoints": "The total number of points earned in this trick",
    "FortGameplayMessageDispatcherComponent:NumBoundReceivers": "The total number of receivers that in the ReceiverChannelList",
    "FortMinigame:TeamRotationCount": "The total number of team rotations performed this game",
    "FortGameplayMessageDispatcherComponent:NumBoundTriggers": "The total number of triggers in the TriggersChannelList",
    "FortAthenaMapInfo:PlayableBoundsVolume": "The total playable area of the primary game map. Excludes warmup island and other extensions.",
    "DynamicBacchusHUDDirector:TouchControlRegionWidget": "The touch control widget to attach HUD widgets to.",
    "KatanaTargetingComponent:DashTraceChannel": "The trace channel that the dash will use to determine its targets and obstructions.",
    "KatanaTargetingComponent:PrimaryAttackObstructionTraceChannel": "The trace channel that the primary attack will use to determine obstructions.",
    "FortGameplayEventObjectHandle:ObjectTrackingGUID": "The tracking GUID assigned by the DeviceTracker component; used to identify the object when ObjectRef cannot be resolved.",
    "FabricSteppedPreviewFXComponent:InstanceSpace": "The transform space between instances",
    "FabricSteppedPreviewFXComponent:InstanceSetSpace": "The transform space between sets of instances",
    "FortQuestMapCosmetic:CosmeticTransform": "The transform to apply to the Cosmetic resource",
    "FortTransientQuestGrant:TemplateId": "The transient quest templateId",
    "BuildingTrap:TrapPreviewMesh": "The trap preview override mesh",
    "AthenaChromeTraversePoint": "The traverse point used for chrome, contains AthenaHoldingArea",
    "BuildingProp_DeimosSpawner:OnKilledMessagerComponent": "The trigger component on this spawner which broadcasts anytime an AI is killed which originated from the owning Rift.",
    "SKPushVehicleOutPersistent:StandingInPlaceSteerAngle": "The turning angle when turning in place.",
    "EventRecord:EventType": "The type code of the active event (not all events will specify this).",
    "FortAIPawn:AIType": "The type of AI Pawn this is",
    "FortLiveMannequin:BodyRetargetAsset": "The type of Retarget asset to use. This can almost always be left as null.",
    "FabricButtonBase:ClickMethod": "The type of action required by the user to trigger the button's 'Click'",
    "FabricButtonComponentBase:ClickMethod": "The type of action required by the user to trigger the button's 'Click'",
    "PendingDeployableManagerAction:ActionType": "The type of action this is",
    "FortMantisTechniqueData:AnimationType": "The type of animation asset this technique should use.",
    "ESpecialEventInputActionBindType": "The type of binding to be performed for an input action",
    "BuildingActor:BuildingType": "The type of building actor this is",
    "AttributeClamp:ClampType": "The type of clamp to apply.",
    "UIStateChartContextCondition:ConditionType": "The type of condition to evaluate",
    "FortEventConditional:ConditionalType": "The type of conditional that this struct should be",
    "CatalogItemPrice:CurrencyType": "The type of currency this item can be purchased with",
    "SpecialEventCursorWeaponComponent:CursorPawnComponentClass": "The type of cursor component to add to the owning pawn",
    "FortObjectiveFilter_DamageDone:DamageType": "The type of damage done / the item the damage was done with",
    "FortObjectiveFilter_Hit:DamageType": "The type of damage done / the item the damage was done with",
    "FortMaterialStyleParameterData:DataType": "The type of data this material parameter data represents",
    "FortMiniMapIconMaterialParameterData:DataType": "The type of data this material parameter data represents",
    "FortCreativeMessageDispatcherErrorMessage:ErrorMessageType": "The type of error message this is",
    "InputEventBinding:InputEvent": "The type of input event to listen for, for the associated action name e.g. press/hold",
    "FortInventoryOutpost:bHasUnavailableItems": "The type of inventory being tracked",
    "FakeKillRelevancyPhaseData:Reason": "The type of kill being performed for the phase, in case BP needs to make a distinction and play different effects.\nSpecified as a parameter to SetUpKillPhase().",
    "AthenaGameMessageData:MsgType": "The type of message that's to be displayed",
    "VoteSessionRuntime:NetworkType": "The type of networking this voting session is using",
    "FortCreativeDiscoveryContentPanel:PlayHistoryType": "The type of play history to materialize a PlayHistory data source with.",
    "FortMantisTechniqueData:RootMotionType": "The type of root motion this technique will use.",
    "HomebaseSquadSlot:SlotType": "The type of slot this squad slot is. This is helpful for a few reasons. UI certainly can use this to sort, or display the slot.",
    "FortDialogDescription:FeedBackType": "The type of special feedback related with the dialog",
    "HomebaseSquad:SquadType": "The type of squad",
    "FortObjectiveConversationTriggerInfo:TriggerType": "The type of stat change that triggers this objective conversation",
    "StatEventFilter:StatEvent": "The type of stat event to generate",
    "LevelInstanceListElement:TerrainType": "The type of terrain this level is associated with.",
    "ActiveItemGrantInfo:Item": "The type of the item in question",
    "FabricMetaSoundDirectInputInfo:InputType": "The type of the metasound input",
    "EBuildingAttachmentSlot": "The type of the object being attached to",
    "EBuildingAttachmentType": "The type of the object that is attached",
    "FortPartyRepData:ActivityType": "The type of the specific Activity to matchmake into within a playlist. Ex: Name of a specific featured Island in Creative",
    "MarshalledVFXData:Type": "The type of the system",
    "FortTheaterMapTileData:TileType": "The type of the tile allows for critical mission tiles",
    "EFortTheaterType": "The type of theater this is, used by the UI for filtering and display logic",
    "RecoilPart:RecoilType": "The type of this Recoil Part:\n- Fixed: Always apply the recoil values exactly as specified above.\n- RandomNegativeOneToOne: Scale the recoil values specified above between -100% and 100%.\n- RandomZeroToOne: Scale the recoil values specified above between 0% and 100%.",
    "OnlineDiscoveryModeSetDef:SubModeLinkType": "The type of this mode set's child link codes.",
    "FortTheaterMapTile:TileType": "The type of tile this represents in the hexmap. E.G. Normal or Critical Mission",
    "FortAthenaMutator_Wax:TokenClass": "The type of token to use.",
    "FortObjectiveFilter_DistanceTraveled:TravelDirection": "The type of travel distance you want to measure.\nAny = total distance moved\nVertical = distance moved along the z axis\nHorizontal = distance moved ignoring the Z axis",
    "VoteData:VoteType": "The type of vote",
    "VehicleSpecificUIDetails:WidgetClass": "The type of widget to spawn.",
    "SharedRepMovement": "The type we use to send FastShared movement updates. This is necessary because we need to quantization levels (set in CStor) to be tied to the type. Normal FRepMovement quantization is set in APawn::APawn()",
    "EFortBangType": "The types of features that will have a ! next to them when updated. This is here because TutorialContext needs it",
    "EFortInventoryType": "The types of inventories",
    "WindSplineComponent:TargetObjectTypes": "The types of objects to target",
    "FortGameplayAttributeData:UnclampedBaseValue": "The unclamped base value",
    "FortGameplayAttributeData:UnclampedCurrentValue": "The unclamped current value",
    "VkFileSize:UncompressedSize": "The uncompressed size of the cooked file (in bytes), or -1 if the uncompressed size isn't known",
    "EliminationFeedMessageRingBuffer:Items": "The underlying container that will be replicated. *",
    "RespawnAndSpectateTargetData:Id": "The unique ID for this option. Allows for easy communication between this system and the UI\n This id is used when the client selects to respawn at a target\n Also affects the display order, higher numbers sort to the front\n Ids and SpectateIds use the same pool of unique values so no Id or SpectateId should match the Id or SpectateId of itself or any other object",
    "PawnConvertedInfos:ConvertedPawnUniqueID": "The unique ID of the pawn converted (Bot ID for player bots / NPCs).",
    "FortAvailableMissionAlerts:TheaterId": "The unique ID of the theater that this list of missions is valid for",
    "FortCreativePersistenceComponentBase:OverridePersistenceID": "The unique ID of this component that will be generated for shared persistence",
    "FortCreativePersistenceComponentBase:PersistenceID": "The unique ID of this component that will be generated when bUniqueForOwner is true // This value is currently EditInstanceOnly to make sure it's updated via Live Edit, it is not actually instance editable as it is not in the allow list",
    "DelayedQuickBarAction:ActionId": "The unique identifier for the delayed action",
    "VoteRuntime:VoteSessionId": "The unique identifier for the voting session this vote data is for",
    "VoteSessionRuntime:VoteSessionId": "The unique identifier for the voting session this vote data is for.\nNOTE: also used as a key to get specific vote data from the FVoteRuntimeArray",
    "TeamPerformanceMessageData:MessageIndex": "The unique identifier index for this entry. Used for communication between server and client about which message to show.\n     Should be aligned with this entry's index in AFortAthenaMutator_TeamPerformanceMessage::MessageDatas (if out of alignment warnings will be logged.)",
    "FortCreativeDiscoveryContentPanel:PanelName": "The unique name of the panel.",
    "FortCreativeDiscoveryTestCohort:TestName": "The unique name of the test. Key identifier to track in all analytics.",
    "FortCreativeDiscoverySplicedEntry:EntryName": "The unique name of this entry. Key identifier to track in all analytics.",
    "MinigameScoreEntry:UniqueId": "The unique net ID for the player's account",
    "FortTeamMemberInfo:PartyLeaderUniqueId": "The unique net ID of the leader of the party the player is in",
    "FortTeamMemberInfo:MemberUniqueId": "The unique net ID of the player",
    "PlayspaceUser:UserId": "The unique net Id of this user (the main key for a single user)",
    "CatalogPurchaseInfo:OfferId": "The unique offerID for the product",
    "CatalogPurchaseInfoGift:OfferId": "The unique offerID for the product",
    "SpatialMetricProperties:Unit": "The unit used for the values.",
    "DeployableBaseSupportSettings:SupportedUnlocks": "The unlocks this plot is allowed to use, if any",
    "BuildingGameplayActorSentry:ExactIdleRotationForInitialization": "The up to the moment idle rotation of the sentry.\n     Only sent when this actor initializes on a client so we don't waste network traffic.",
    "UpdatedQuestObjectiveData:UpdatedCount": "The updated objective value",
    "FortUpdatedObjectiveStat:StatValue": "The updated value",
    "FortAthenaVehicle:WaterLevel": "The updated water level while the vehicle is in the water.",
    "FortAISpawnGroupUpgradeData:SpawnGroupUpgrade": "The upgrade to apply",
    "UtilityData:ContributionsTotal": "The upper bound of the contributions",
    "FabricStepSequencerComponent:RandomizationCommonPitchSelectionMaxPct": "The upper pct value to choose when choosing free randomized pitches over choosing the common sample set",
    "FabricStepSequencerComponent:RandomizationRestSelectionMaxPct": "The upper pct value to choose when randomizing rest steps",
    "AimingCircleSettings:MaxDistanceForTimeBetweenHits": "The upper value of the distance range that defines how much time it will take between hits.",
    "DigestedAimingCircleSettings:MaxDistanceForTimeBetweenHits": "The upper value of the distance range that defines how much time it will take between hits.",
    "FortPlayerPushableCart:UraniumMutatorOwner": "The uranium mutator that owns and manages this push cart",
    "EBannerUsageContext": "The usage type for banner calls, to allow applying rules",
    "FortGameUserSettings:EulaAcceptedUserId": "The user ID that accepted the EULA",
    "ESubscriptionCancellability.CancellableAnywhere": "The user can cancel regardless of which platform they are currently on",
    "VkGenerateTestcodeRequest:CommitMessage": "The user generated commit message submitted with this link",
    "VkPublishedLink:CommitMessage": "The user generated commit message submitted with this link",
    "FMInWorldKnobActorCopyComponent:OptionKey": "The user option associated with this component should be a 0-1 float range user option.",
    "FabricMetaSoundUserOptionInputInfo:UserOption": "The user option driving the metasound value",
    "FabricUserOptionSaveComponent:SaveIndexParam": "The user option that controls which save slot is active",
    "FabricUserOptionSaveComponent:PresetIndexParam": "The user option that controls which template is being applied",
    "FabricUserOptionSaveComponent:ApplyIndexImmediatelyToggleParam": "The user option that gates whether or not new preset indexes should be applied",
    "FortPlayerController:TestUserWidget": "The user widget being used for testing a streamed video.",
    "FortPlayerStateEndless:BluGloActivityScore": "The utility points (before scaling) awarded to the player for adding Blu-Glo to the burner",
    "FortAthenaMutator_MatchConditionManager:TeamNums": "The valid teams at the start of the match",
    "FortAthenaCompassIcon:Scale": "The value for the icon's scale.",
    "RepParamBool:Value": "The value for this rep param.",
    "RepParamFloat:Value": "The value for this rep param.",
    "RepParamInteger:Value": "The value for this rep param.",
    "ExpectedConsoleVariableForTest:OldConsoleVariableValue": "The value from before we started the test that we need to set back to when the test ends",
    "EFortModifiedStatus.Unsupported": "The value is modified from the default value.",
    "EFortModifiedStatus.IsModified": "The value is the same as the default value.",
    "FortInGameLeaderboardPlacementData:ScoreToWin": "The value needed to win this match",
    "MoggMusicInfo:TimeSignatureDenominator": "The value of a beat",
    "ExpectedConsoleVariableForTest:ConsoleVariableValue": "The value of the console variable we expect to have set",
    "PairedWeightEntry:Value": "The value of the weight, which is additive.",
    "EFortRangeRule.Bounded": "The value should be between Min and Max",
    "EFortRangeRule.MaxUnbounded": "The value should be greater than Min",
    "EFortRangeRule.MinUnbounded": "The value should be less than Max",
    "UserOptionDefinitionClassTypeEntry:Value": "The value that this class type entry represents.\n@note This data is synced from an entry within the linked enum type, so should be set there.",
    "UserOptionDefinitionEnumValueEntry:Value": "The value that this enum entry represents.\n@note This data is synced from an entry within the linked enum type, so should be set there.",
    "UserOptionDefinitionTeamTypeEntry:Value": "The value that this team type entry represents.\n@note This data is synced from an entry within the linked enum type, so should be set there.",
    "BuildingSMActorClassData:AnimatingDistanceFieldSelfShadowBias": "The value to bias SetDistanceFieldSelfShadowBias while animating. The bias is removed when the actor is done animating.",
    "AttributeClamp:ClampValue": "The value to clamp at.",
    "FortMinigameStatQuery:Value": "The value to compare the stat against",
    "CatalogStorefrontMatch:MatchFilter": "The value to match against the MatchFilter column in FCatalogTableEntry or FCatalogOfferDefinition",
    "ContextSetterSetEntry:Value": "The value to set",
    "SpecialEventStatDefinition:DefaultValue": "The value we will start at or be Reset() to",
    "CreativeOptionVariableBase:Value": "The value we will store into when we get on changed calls from the Creative Option.",
    "OrbSpawnerConfigByCategory:ValuesByCategory": "The values for each category.",
    "FortCreativeSplineModificationComponent:SplinePointsPropertyName": "The variable name of the TArray<FSplinePoint_Serializable> on the owning device. Used to notify UEFN LiveEdit that the property has changed",
    "CreativeOptionVariableBase:VariableTag": "The variable tag to match onto a creative option.",
    "EncounterGetVariableActorClassStateTreeTaskInstanceData:Value": "The variable value",
    "EncounterGetVariableBoolStateTreeTaskInstanceData:bValue": "The variable value",
    "EncounterGetVariableFloatStateTreeTaskInstanceData:Value": "The variable value",
    "EncounterGetVariableGameplayTagStateTreeTaskInstanceData:Value": "The variable value",
    "EncounterGetVariableIntStateTreeTaskInstanceData:Value": "The variable value",
    "EncounterGetVariableItemDefinitionStateTreeTaskInstanceData:Value": "The variable value",
    "EncounterGetVariableLWMEncounterStateTreeTaskInstanceData:Value": "The variable value",
    "EncounterGetVariableTagQueryStateTreeTaskInstanceData:Value": "The variable value",
    "CosmeticDeveloperSettings:VariantTokenToPreview": "The variant grant token to try to preview (if set, this will override both the slot the cosmetic item equips in and add the requested variant channel info)",
    "EncounterGetVariantTagQueryStateTreeTaskInstanceData:Value": "The variant tag query value",
    "EFortKatanaPrimaryAttackVariation": "The variations the primary attack can have. Each variation behaves the same, but the all use different configuration values.",
    "EFortMiniMapDrawCategory": "The various categories of Map drawing.  These coincide with the drawing functionality provided by FFortInGameMapDrawingHelpers",
    "LaserGridPattern:OutletConnections": "The various connections that form this grid pattern.",
    "FortQuestMissionCreationContext:MissionCreationContextTags": "The various contexts in which the quest should create the mission",
    "MashAIEncounterWeights:EncounterWeightsByNameMap": "The various encounters available for this safezone index.\n     Keyed by encounter name (as it appears in AFortAthenaMutator_Mash::AISpecialEncounterOptionsMap)\n     Value is the likelihood of a specific name being chosen, relative to the other map entries.",
    "EFortFeedbackContext": "The various event contexts that feedback can be vocalized",
    "CurieElementAttachHandlersContainer": "The various handler containers in this class are intended to provide a sorted list\nof the handlers for the different behaviors of a Curie element to allow for\nplugins to modify and extend the behavior.",
    "EFortPawnStasisMode": "The various stasis modes that a pawn can be in.",
    "ELaserConnectionState": "The various states that the laser connection can take on.",
    "EBuildingFocusType": "The various types of building focus methods",
    "EFrontEndCamera.Vault": "The vault",
    "BuildingTrapCeiling_Falling:SpawnPoints": "The vector locations where the projectiles this trap drops will drop from",
    "IndicatedActorParticleSystemData:ParticleSystemVectorParamName": "The vector parameter name on the particle system, to let the particle system know the vector offset.",
    "FMDeviceCableOrderingMovementState:Vector": "The vector used to determine the direction and magnitude of active port movement.",
    "FortTrackMovementComponent:TrackVelocity": "The velocity along the spline to move",
    "WaterSurfaceInfo:WaterVelocity": "The velocity of the water at the surface location.",
    "RockVehicleAbility_Jump:JumpVelocity": "The velocity that is added to the car as soon as it jumps.",
    "CollisionReactionConfiguration:PawnReactionLaunchVelocity": "The velocity the pawn will get launched at, multiplied by the inverse of the impact for XY (or from the origin of the AI if bUseImpactNormal is false); used only if PawnReaction is FCollisionWithLaunchableReactionTypes::Launch.",
    "CollisionReactionConfigurationPerPhysicsObjectSize:LaunchVelocity": "The velocity the physics object will get launched at, multiplied by the inverse of the impact for XY (or from the origin of the AI if bUseImpactNormal is false).",
    "CollisionReactionConfiguration:VehicleReactionLaunchVelocity": "The velocity the vehicle will get launched at, multiplied by the inverse of the impact for XY (or from the origin of the AI if bUseImpactNormal is false); used only if VehicleReaction is FCollisionWithLaunchableReactionTypes::Launch.",
    "HeldObjectMovementReplicatedData:MovementVelocity": "The velocity vector the held object is thrown in",
    "FortReplicatedVelocityData:ReplicatedVelocity": "The velocity we want to rep",
    "FortAthenaMapInfo:VendingMachineClass": "The vending machine class",
    "FortEventConditional_Verb:VerbFilters": "The verb to listen to for this event conditional.",
    "FortNPCVerbReactionTableRow:VerbFilters": "The verb(s) to listen to for this reaction.",
    "FortEventReactionsTableRow:EventConditional": "The verb(s) to listen to for this world reaction.",
    "EVerifierModeOverride": "The verifier mode override set in game configs",
    "VkVersePath:VersePath": "The verse path",
    "CachedPlayerReportingMatchInfoAnalytics": "The version of FCachedPlayerReportingMatchInfo sent to the analytics system.",
    "FortExposedActorReferences:CacheVersion": "The version this instance was built against.\n@note This is deliberately set to MAX by default to ensure that the real version is included in the ExportText tag data.",
    "FortLivingWorldConfigOverride:EndVersion": "The version where this config will become invalid.",
    "SkyfireVaultOrbSpawner:OrbSpawnZOffset": "The vertical offset from the spawn point that orbs should actually be spawned.",
    "FortTheaterMapViewer:HexTileHeight": "The vertical size of the hex tile",
    "PaybackMutatorEffectData:VictimTeam": "The victim's team",
    "FortVisibilityComponent:VisibilityBehavior": "The visibility behavior for this component.",
    "FortGameCueNotifyLoop_Cloak:MaxSpeedVisMult": "The visibility multiplier applied when the target player is moving at the max speed.\n     The player's visibility will lerp between StationaryVisMult and MaxSpeedVisMult based on their speed.",
    "FortGameCueNotifyLoop_Cloak:StationaryVisMult": "The visibility multiplier applied when the target player is stationary.\n     The player's visibility will lerp between StationaryVisMult and MaxSpeedVisMult based on their speed.",
    "FortMiniMapComponent_Discoverable:DefaultVisibility": "The visibility of this MiniMap component if a player does NOT have a specific visibility set.\n     NEVER set to Unset.",
    "CreativeDeviceInstanceInfo:Label": "The visible Label of the Device. Similar to a Display Name, except is only unique on spawn.",
    "FortPlayerPawn:CosmeticPetInstance": "The visual pet (client only, if any)",
    "FortUserMixSettings:PIPBus": "The volume control bus for PIP",
    "FortUserMixSettings:ChatBus": "The volume control bus for chat",
    "FortUserMixSettings:CinematicsBus": "The volume control bus for cinematics",
    "FortUserMixSettings:DialogueBus": "The volume control bus for dialogue",
    "FortUserMixSettings:MainBus": "The volume control bus for everything",
    "FortUserMixSettings:MusicBus": "The volume control bus for music",
    "FortUserMixSettings:SFXBus": "The volume control bus for sound effects",
    "FortGameplayCueAudioInfo_Looping:LoopingSoundVolumeLevel": "The volume level you want the sound to fade out to over the Looping Sound Fade Out Duration before stopping.  NOTE: If the fade out duration is positive and this value is not lower than the volume the sound is playing at, the sound will never stop!  This value is irrelevant if the LoopingSoundFadeOutDuration is zero.",
    "FortCreativeVolumeLinkComponent:LinkedVolume": "The volume that this actor should be linked with Found/Set at runtime",
    "ActorOverlapEvent:Volume": "The volume the player entered or exited",
    "FortAthenaAIBotController:LeashVolume": "The volume where the NPC is leashed to.",
    "DirectionalLightWeatherData:VolumetricScatteringIntensity": "The volumetric scatter intensity curve (based on time of day [0-24]) we are targeting during this weather event",
    "VoteSessionRuntime:CurrentVoteId": "The vote id of the vote we are currently running for this session",
    "VoteRuntime:VoteId": "The vote identifier for this vote data (unique within the context of the VoteSessionId)",
    "VoteRuntime:VoteSelectionWinningResult": "The vote selection id of the selection that won the vote\nNOTE: This will either be the selection that received the most votes, or\n      the selection that is the correct answer (in the case of a trivia scenario)",
    "OverrideMovementCurveData:WalkAccelerationCurve": "The walk acceleration coefficient as a function of the normalized input deflection. By default this is linear.",
    "FortAthenaMutator_AddBarrier:BigBaseWall": "The wall",
    "FortAthenaMutator_AddBarrier:BigBaseWallClass": "The wall class",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:WarmupCountdownEndTime": "The warmup phase countdown end time",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:WarmupCountdownStartTime": "The warmup phase countdown start time",
    "FortGameplayCueNotifyLoop_AbductionWarning:WarningAudioComponent": "The warning audio component that we'll udpate on tick.",
    "FortGameplayCueNotifyLoop_AbductionWarning:WarningFXNiagaraComponent": "The warning fx niagara component that we'll update on tick.",
    "FortGameplayCueNotifyLoop_AbductionWarning:WarningFXOriginLocation": "The warning fx origin.",
    "FortGameplayCueNotifyLoop_AbductionWarning:WarningFXSystemComponent": "The warning fx system component that we'll update on tick.",
    "FortProjectileMovementComponent:WaterInteractionComponent": "The water interaction component this movement component interfaces with",
    "FakeKillRelevancyPlayerDataEntry:WaveNum": "The wave number that this kill request originated from, in case BP wants to know",
    "EWaveRules.Mission": "The wave will spawn 1 or more missions. The wave will be completed once all of those missions are completed",
    "FortFeedbackEventData:ContextSelectionMethod": "The way differing feedback contexts are selected",
    "Playspace:BoundsEvaluationType": "The way in which this Playspace should evaluate Within Bounds queries for actors.",
    "TagFilterOverride:ComparisonTypeToOverride": "The way to compare the OverridingTags found. Prefer using the 'Exact'.",
    "EFortWeaponAbilityRemovalReason.EndPlay": "The weapon actor has had EndPlay called on it",
    "FortMantisPawnComponent:Weapon": "The weapon currently being used.",
    "EFortWeaponAbilityRemovalReason.Unequipped": "The weapon has been unequipped",
    "FortHookGunRope:WeaponMesh": "The weapon mesh to get a socket location from.",
    "HookGunRopeRepData:Weapon": "The weapon mesh to get a socket location from.",
    "FortHookGunRope:WeaponMeshSocketName": "The weapon socket to use for a starting location.",
    "FortAthenaMutator_ItemPromotion:ValidWeaponTags": "The weapon tags set in the blueprint dictate what weapons can be upgraded",
    "FortAthenaMapInfo:WeaponUpgradeMachineClass": "The weapon upgrade machine class",
    "LockOnInfo:Weapon": "The weapon which acquired the target",
    "TimeOfDayEditorWeatherSettings:WeatherComponentOverride": "The weather component override class to use. If null, will fall back to using the existing Weather component on the Time of Day manager",
    "AIWeatherData:RequiredBlendPercentageThreshold": "The weather event blend percentage threshold after which the AI perception overrides should be applied",
    "FortTimeOfDayWeatherComponent:WeatherEventData": "The weather event data for the current active weather event",
    "FortLootGroupWeightData:Weight": "The weight associated w/ the loot row required tag",
    "FortMissionWeightedReward:Weight": "The weight for this reward. Will be added with all other rewards and will have RandomWeight/SumOfAllWeights chance of being chosen",
    "EncounterFactionRow:Weight": "The weight this entry has for random selection",
    "EncounterVariableSelectionsRow:Weight": "The weight this entry has for random selection",
    "LWMEncounterRow:Weight": "The weight this entry has for random selection",
    "TileGroupInfo:Weight": "The weight this group has when randomly choosing a group to use",
    "FortAthenaMutator_SpecialEvent:WeightForContainerLootRoll": "The weight value for the named weight that will be injected into the loot roll on a container",
    "PetStimuliResponse:ResponseWeight": "The weight/chance of the response (all valid responses are summed together and picked from at random)",
    "FortOptionsMenuData:PageWidgetAlias": "The widget alias tag for the widget that we want to override (if we don't have a direct widget to input) . We use a tag instead of a widget so we can reference it from the Game Module",
    "FortOptionsMenuData:PageWidgetClass": "The widget class to use for the main page of the option menu",
    "FortQuestMapPage:QuestNodeLayout_Legacy": "The widget created to display the individual quest tiles",
    "FortQuestMapPage:QuestNodeLayout_Leto": "The widget created to display the individual quest tiles",
    "FortClientAnnouncement:DisplayWidget": "The widget to create and use when displaying this notification",
    "SpecialEventCursorMode:WidgetClass": "The widget to spawn for the cursor.  If null, the user is responsible for creating the widget\nand calling GetSpecialEventCursorPawnComponent() to get a pointer to us for binding to our delegates.",
    "SpecialEventCursorPawnComponent:Widgets": "The widgets that we spawned for the WidgetClass property of the CursorModes.\nDoes not map to the order of CursorModes.  If more than one mode specifies the same class, an instance is shared.",
    "FortPawn:HealthBarWidth": "The width (in slate units) of our health bar",
    "FortLevelInstanceSaveActor:SizeY": "The width of the level instance in grid units",
    "WindWeatherData:WindDirection": "The wind direction curve (based on time of day [0-24]) we are targeting during this weather event",
    "WindWeatherData:WindStrength": "The wind strength curve (based on time of day [0-24]) we are targeting during this weather event",
    "FortTheaterMapViewer:HexMapSize": "The world bounds of the hex map",
    "FortWorldSettingsOverride:World": "The world for which the override data should be applied",
    "FortHeistDisplayCaseItemDataTableRow:WorldItemDefinition": "The world item definition to use in a display case.\nThese items use the UFortWorldItemDefinition child class so display cases\ncan use the \"PickupStaticMesh\" function for their visuals.",
    "BuildingGameplayActorSentry:LastActorBeingTrackedLocation": "The world location of our tracked actor the last time we had them focused.",
    "BuildingFoundationStreamingData:FoundationLocation": "The world location of the foundation - used with the name to uniquely identify this instance",
    "WaterSurfaceInfo:WaterPlaneLocation": "The world location of the water's surface plane.",
    "WaterSurfaceInfo:WaterSurfaceLocation": "The world location of the water's surface position.",
    "FortPoiVolume:PoiDataLayer": "The world partition data layer that contains all of the POIs actors",
    "PhaseInfo:DataLayers": "The world partition data layers that we want to manipulate",
    "FortGameStateComponent_WorldReactionsManager:WorldReactionsTables": "The world reactions table to read from for what types of player actions the world should react to.",
    "FortHeldObjectComponent:ObjectPickupRotation": "The world rotation of the held object at the time of pickup",
    "OrbSpawnPoint:Location": "The world space location of this spawn point.",
    "PaybackMutatorEffectData:EndTime": "The world time at which the effect should end",
    "PaybackMutatorEffectData:StartTime": "The world time at which the effect started",
    "FortAthenaMutator_SplitStorm:MoveStartTime": "The world time at which the proxy started moving (during either the MoveToHold or MoveToEnd phases).",
    "FortSafeZoneIndicator:SafeZoneFinishShrinkTime": "The world time at which we will have completed shifting from PreviousRadius/PreviousCenter to NextRadius/NextCenter",
    "FortAthenaMutator_EnvironmentalDamage:WorldActivationTime": "The world timestamp recorded when this activator was activated",
    "FortSourceWorldAndOverlayWorld:OverlayWorld": "The world to overlay on top of the source world, this is the world your plugin provides.",
    "FortLivingWorldConfigOverride:SourceWorld": "The world used for the override",
    "CurvePoint:Time": "The x-intercept of the curve",
    "CurvePoint:Value": "The y-intercept of the curve",
    "FortWorldManager:Z_StructuralGrid_Size": "The z-size for the structural grid",
    "FortLinkedAnimGraphsData:ZiplineAnimBlueprintClass": "The zipline animation blueprint to use on this pawn.",
    "ZiplinePawnState:Zipline": "The zipline we are on",
    "ZiplinePawnState:PreviousZipline": "The zipline we were previously on.\n     Do NOT set directly, use AFortPlayerPawn::SetPreviousZipline() to make sure that the value is cleaned up correctly.",
    "FortTheaterMapTileData:ZoneTheme": "The zone theme to use for this tile",
    "FortRewardReport:TheaterName": "Theater Name",
    "FortTheaterMapData": "Theater data to be stored/retrieved from the backend",
    "FortPartyCampaignInfo:TheaterId": "Theater id selected by the leader",
    "OutpostPOSTPerTheaterData:TheaterSlot": "Theater slot to identify the theater the following P.O.S.T. setup data belongs to",
    "OutpostUpgradesPerTheaterData:TheaterSlot": "Theater slot to identify the theater the following outpost upgrades data belongs to",
    "OutpostPrestigeEffectsPerTheater:TheaterSlot": "Theater slot to identify the theater the following prestige effects belong to",
    "FortGlobalMission:TheaterTagQuery": "Theater tag query that needs to be satisfied for this mission to be active.",
    "FortGlobalMission:AllowedTheaterTypes": "Theater types this mission is allowed to run in.",
    "EFortBuildingInteraction.None": "There is no available interaction with the building",
    "EFortItemCooldownType.None": "There is no cooldown associated with this value",
    "EAthenaQuickChatFilteringType.AlwaysVisible": "There is no filter, always show this item",
    "EFortFriendRequestStatus.None": "There is no friend request between the two players",
    "EValkyrieValidationErrorCode.InternalCommandLineError": "There were problems with the command line passed to the content sentry. This is an internal error and shouldn't be caused by the user upload",
    "EVoiceRepUploadRecordResult.NoAudioToUpload": "There's no audio record",
    "AthenaRewardItemReference:PreviewVariantSets": "These Variants will applied to create new additional previews from the original reward (i.e. if we have reward A and variant sets B and C, we will preview A, A with B applied and A with C applied)",
    "SimpleDestructiblePropGroup:OrderedInstancedStaticMeshCollisionProfiles": "These are cached at time of building the prop groups and are re-applied on BeginPlay.\nThis is because we want the collision disabled while in the editor and re-enabled at runtime / PIE.",
    "ObjectiveFilter_Custom:Values": "These are ranges for the filter, for arbitrary float values that can be sent accompanying the custom message.\nFor example, maybe the custom message has an associated Quality value that you need to filter on.",
    "FortClientAnnouncement:RecipientControllers": "These are the player controllers who are the intended recipients of this announcement",
    "PFWExample_ServiceWrapper_Settings": "These are the settings of service. The settings are used to initialize the service. They are also used to uniquely identify a\nservice inside the persistence framework. The framework can have more than instance of the same class of service wrappers as long as\ntheir settings are different.\nSo a service wrapper inside the persistence framework is uniquely identified by combination of its class and its settings.\nFor example in the case of inventory you can have many wrappers, as long as they all have a different VK project ID, which is their setting.\n\nIn this example I am just using a simple setting of a FString.",
    "BuildingActor:EditorOnlyVolumeTags": "These are the tags given from the map by a volume. These tags will be appended to StaticGameplayTags, which IS cooked",
    "BuildingActor:EditorOnlyMapTags": "These are the tags given from the map to this BuildingActor. These tags will be appended to StaticGameplayTags, which IS cooked",
    "MinimapCaptureRequest:CalendarEvents": "These completely override whatever is coming from MCP, so make sure it's a complete set.",
    "EFortGameFeature": "These correspond to things that can be downloaded, loaded, and made active",
    "WaxVisibilityModifiers:PermanentlyGrantedEffects": "These effects are granted and never removed.",
    "WaxVisibilityModifiers:TemporarilyGrantedEffects": "These effects are granted, but then removed after the player falls behind the point value.",
    "AudioWorldizationSend:EffectChain": "These effects will be used to override the target submix",
    "FortAthena_WaxToken:TravelTimeAtState": "These floats are used to drive the percentage of time (roughly) it takes the token to travel through each state.\nThese don't need to be designed as a percent adding to 1 (eg. .25, .5, .25), as this happens at runtime.",
    "PFWExample_Struct:IntValueNonPersistent": "These following vars do not need to",
    "PlayerLoadout:AlwaysGrantedLoadoutItems": "These items are always granted",
    "FortWorldManager:StartingMissionInfo": "These missions are the starting missions used by the map",
    "RemoteViewRotSnapshot": "These remote view rotation structs are used to take local snapshots of the view rot values replicated from the server for our currently viewed remote pawn.\n   These snapshots can then be used to get an accurate and smooth value for view rotation of a remote player, with a given delay applied.\n      Currently this is only being used for the gameplay camera of broadcast spectators but in the future could be used for stuff like spectate after death.",
    "FortAthenaMutator_SurvivalObjectiveData:ExtraSafezoneIndexes": "These safezone indexes will also have their center position set to this POI",
    "EFortInputActionGroup.ShoppingCart": "These shouldn't be changed by AllModes binding changes.\n      See UFortPlayerInput::AreInputActionGroupsOverlapping for more info on how they're used.",
    "FortCharacterVehicle_Ostrich:ExcludedEmotes": "These specific emotes are disabled when the player is driving the mech",
    "McpAddItemRequest": "These structures are used to request batch updates, and match structures in ProfileChangeRequest.java",
    "FortGameplayTagBuildingActor:TagsToApplyOnSave": "These tags are added to anything touching the BuildingActor",
    "BuildingActor:ConstTags": "These tags are default tags set in code, and cannot be edited at all",
    "BuildingActor:DefaultTags": "These tags are default tags, and not edited per instance",
    "FortProjectileBase:DefaultTags": "These tags are default tags, and not edited per instance. They can be modified by code or blueprints. If modified after stopping, you need to reregister with the TaggedActorsManager.",
    "BuildingActor:bEditorOnlyRenderCustomDepth": "These tags are per instance only",
    "BuildingActor:EditorOnlyInstanceTagsNoCopy": "These tags are per instance only, but they will NOT be copied when an instanced actor is duplicated. These tags will be appended to StaticGameplayTags, which IS cooked",
    "BuildingActor:EditorOnlyInstanceTags": "These tags are per instance only. These tags will be appended to StaticGameplayTags, which IS cooked",
    "BuildingActor:StaticGameplayTags": "These tags are the concatenated total of DefaultTags, MapTags, VolumeTags, and InstanceTags.",
    "BuildingGameplayActor:AnalyticsTags": "These tags are used for analytics tracking, and not edited per instance",
    "BuildingPropActorClassData:AnalyticsTags": "These tags are used for analytics tracking, and not edited per instance",
    "BuildingTrap:AnalyticsTags": "These tags are used for analytics tracking, and not edited per instance",
    "FortGameplayEffectDeliveryActor:AnalyticsTags": "These tags are used for analytics tracking, and not edited per instance",
    "FortAthenaJackalVehicle:AbortSprintPlayerTags": "These tags on the player will abort sprinting if active or reset the auto-sprint timer.",
    "FortCreativeMoveTool:MoveToolActivatedTags": "These tags on the player will indicate whether the Move Tool is activated or not",
    "FortAthenaJackalVehicle:PreventBoostPlayerTags": "These tags on the player will prevent boost activation if active.",
    "FortGameplayTagVolume:TagsToApplyOnSave": "These tags will get applied to every BuildingActor on Save of the level",
    "FortObjectiveFilter_ConversationChoiceMade:ConversationChoice": "These tags will specify what conversation choice was made.\nNOTE: If these tags are empty when sent with a verb, a designer needs to set the choice tags on the conversation entry.",
    "FortObjectiveFilter_CurrencySpent:PurchaseTags": "These will be tags defining what the currency was spent on\nNote: specific currency events will fire at the same time as general spent events\nTo look for all events or specific ones use Athena.GoldBars.Spent to filter out which events to process.",
    "SafeZoneLocationParams:MegaStormGridCellThickness": "Thickness of mega storm. Used for logging",
    "FortAthenaMutator_SafeZoneOrderOptimize:MapUILineThickness": "Thickness of the debug lines we will draw on the map UI, if debugging is enabled",
    "AIDebuggerRendererComponent:NavLinkLineThickness": "Thickness of the line drawn for NavLink",
    "MotorcycleWheel:TireWidth": "Thickness of the wheel",
    "FortRangedWeaponStats:CoolX3": "Third x-coordinate on spread cool-down curve",
    "FortRangedWeaponStats:HeatX3": "Third x-coordinate on spread heat curve",
    "FortRangedWeaponStats:CoolY3": "Third y-coordinate on spread cool-down curve",
    "FortRangedWeaponStats:HeatY3": "Third y-coordinate on spread heat curve",
    "EDBNOPlayStyle.ThristyButPassiveOnPlayers": "Thirsty but passive on human players",
    "AIRuntimeParametersSmartObjectActivityConfig:ActivityRequirements": "This Activity will be used only for SmartObjects whose activity tags match this Tag Query.\nDepending on the Activity Tag Merge Policy, it will use either the slot's Activity Tags (if available, otherwise the SO's Activity Tags) or the combination of the slot's and SO's Activity Tags.",
    "AIRuntimeParametersSmartObjectActivityCondition:SmartObjectActivityConditionTagQuery": "This Activity will be valid if the tags of the AI using this Activity are matching this Tag Query.",
    "FortPawn:EmoteComponent": "This Component Handles Emote Behavior",
    "MidiMsgBroadcasterComponent:Emitter": "This Music Emitter's \"Time Authority\" will be used as the source for midi messages to broadcast. If this is blank\nwe will first look for a Music Emitter component on the same actor we are on. If one isn't found we will use\nthe default Music Emitter.",
    "EFortAccoladeSubtype.Action": "This accolade type is not set (or undefined)",
    "AthenaBarrierFlag": "This actor also spawns the AAthenaBarrierObjective that is the target of player aggression.",
    "SpecialEventPlayerMannequin": "This actor class is used to create a mannequin that is optimized for event use.\nOptimizations include destroying unused skeletal mesh components on the client and\nmanaging skeletal mesh components' ticking based on visibility.\nNote: Visibility based tick management optimization requires for there to be a AFortAthenaMutator_SpecialEvent in the world.",
    "PlayspaceLogic": "This actor encompasses all of the gameplay logic for a Playspace.\nIt is meant to handle all of the logic and functionality GameMode and GameState have historically handled.",
    "AthenaHoldingArea": "This actor is responsible for holding the player in a confined area. Example use: At the start of an LTM.",
    "BuildingGameplayActorLaserGrid": "This actor represents a laser grid that can be placed in the world.\nThe laser grid consists of a set of outlets that create a pattern of lasers between them.\nThe patterns between these outlets change periodically between pre-specified configurations.\nThe laser grid is responsible for detecting players and firing a delegate to any listens in the world.",
    "FortPawnComponent_CustomDepth:CustomHighlightingDataPriorityStack": "This allows for objects outside of the pawn to tell it to do custom highlighting when it needs to, like a scanner that shows enemies through walls.\nThe stack will make sure that no override as they'll be push/popped accordingly + the stack will be ordered based on priority, so we'll be able to ensure some overrides stay at top of the stack",
    "FortBroadcastRemoteClientInfo": "This allows us to send information which would usually only exist on a particular client to multiple broadcast spectators.\n\nThe main use case of this is to allow us to take UI and gameplay elements which would normally only be visible to just the\nsingle local player, and show them from a broadcast client. (Structure previews/editing, interaction timers etc)\n\nObviously we do not want to be sending massive amounts of information unnecessarily, so this class should only be doing work\nwhen 1 or more broadcast spectators are currently watching the player this remote client info represents. We also have to be\ncareful what we add to this.\n\nThis class should only be relevant for replication to it's owned player, and any currently viewing broadcaster. This logic\nis handled in the replication graph.",
    "FortMeleeDeflectAnimData:HoldAnim": "This animation plays after the entry from guard. We can transition from here to another deflection animation if we deflect another attack. Otherwise, we transition back to guard.",
    "FortMapMarkerTagNameData:Maps": "This array holds map names in which the UFortMapMarkerUpdateCommandlet will be looking for the tag name for",
    "FortAthenaPatrolPath:PatrolPointsSoftCopy": "This array of soft ptrs is used as a temporary data structure to properly map from old ptrs to new before copying the new valid ptrs into the original array",
    "FortPlayerControllerAthena:BuildingAnalyticsArray": "This array tracks the last N seconds worth of building, refer to PlayerControllerAthena::DoCreateBuildingAnalytics",
    "FortAIAssignmentSettings:ProhibitedTags": "This assignment is only valid for pawns that do NOT have these tags.  (Invalid pawns will be given no goals by this assignment.)",
    "FortAIAssignmentSettings:RequiredTags": "This assignment is only valid for pawns that have these tags.  (Invalid pawns will be given no goals by this assignment.)",
    "FortAIPawn:bSupportsAdvancedMovementSet": "This bool is used to know if we pull the data from the PawnStats to fill in the AdvancedMovementSet member which will then propagate data to the CharacterMovement.\n If false, the default data from the CharacterMovementComponent will be used.",
    "FortPlayerCameraBase:bLockCameraWhileInactiveForNextTransition": "This bool is used to lock the camera position while it's inactive during a blend out.  Useful when you want to teleport the viewtarget and want to prevent camera snapping",
    "FortPoiVolume:bIsLargeGameVolume": "This boolean tells you if this volume is considered large. Large volumes behave differently than small volumes.",
    "BuildingSMActor:OnConstructionComplete": "This building piece has finished constructions",
    "CobaltPOICameraActor": "This camera actor is used as the view target before a round starts in the cobalt LTM",
    "FortPOICameraActor": "This camera actor is used as the view target before a round starts in the cobalt LTM",
    "FortAnimInput_PlayerAnimAsset:WeaponInspectAnimation": "This can be left unset if no inspect animation is needed for the weapon.",
    "FortObjectiveFilter_PawnEliminated:Killer": "This can be used to query against the tags from the Killer that eliminated the pawn",
    "FortObjectiveFilter_PawnEliminated:EliminatedPawn": "This can be used to query against the tags from the eliminated pawn",
    "FortObjectiveFilter_FinishDownedPlayer:DamageSource": "This can be used to query against the tags from the source of the elimination event\nThis is the tags passed in from the damage responsible for the pawn being eliminated.\nthis can contain everything from pawn tags to individual weapon tags depending on how the damage event was set up.",
    "FortObjectiveFilter_PawnEliminated:EliminationSource": "This can be used to query against the tags from the source of the elimination event\nThis is the tags passed in from the damage responsible for the pawn being eliminated.\nthis can contain everything from pawn tags to individual weapon tags depending on how the damage event was set up.",
    "LockedQuestOverrideData:DisplayIcon": "This can be used to swap the icon that is displayed on the widget. Uses default icon if not set.",
    "FortNonPlayerConversationParticipantComponent:QuestsTable": "This can optionally be set to override the defaults that are in the current AthenaSeasonItemDefinition.",
    "FortAthenaVehicleSessionTelemetryInfo": "This captures a vehicle session, meaning, a session starts when passengers enter.\nThe session will end when all passengers get out, the vehicle dies, or the match ends.\nWe'll then send the session info to analytics for recording.",
    "FortEmporiumFilterCategory:bIsTab": "This category represents a tab to switch to",
    "DynamicDestructionOpacityMask:MaskChannel": "This channel the opacity mask uses to get the alpha value.",
    "RufusWeeklyMapUpdater": "This class allows an instance to be controlled by an actor monitoring calendar events and requesting changes to the map images / textures accordingly",
    "FortTextHotfixConfig": "This class allows hotfixing individual FText values anywhere",
    "SparksMusicPlayspace:PlayerManagerComp": "This class can be used by child classes to add components to players in the playspace",
    "DelegateHandleController": "This class can be used to wrap a FDelegateHandle so we can control it's lifetime in a more decoupled way.  A cleanup\ndelegate is created on construction and it uses that to cleanup the delegate if this handle dies or is unbound.",
    "QuestEditorProfileData:ProfileQuestClass": "This class defines what class is used as \"base\" class for newly created quests (in case of not using quest template)\nFor example Athena Daily Profile uses specific quest class UAthenaDailyQuestDefinition while everything else in BR would use UFortQuestItemDefinition_Athena",
    "FortInventory": "This class has a list of items owned by a given character, and is directly serialized",
    "PlayspaceSpawnActor": "This class indicates a location where a Playspace can spawn",
    "FortStartingMissionInfo": "This class is used by the world manager",
    "FMInWorldKnobActorCopyComponent": "This class is used for modulators to change their knobs to match the appearance of what they're modulating.\nIt inherits from ChildActorComponent and implements the same interfaces as an InWorldKnob\nThis lets it act as an intermediary between InWorldKnobOptionsComponent and its child actor.\nThat, in turn, means it can switch out its child actor.",
    "FortBuildingActorSpawner": "This class is used for spawning objective actors for game modes.",
    "MilkshakeFieldSystemActor": "This class is used in the Milkshake event to handle tree/foliage movements\n    in the area of the earthquake by affecting materials and effects.\n    This actor is only expected to run on the clients.\n    This is the nativized version of the blueprint FN_RadialForce_Force used by the superstorm/tornado BP.",
    "CombatManagerComponentSTW": "This class keeps track of the current 'heat' of combat, based on events in the world",
    "FortMusicManager": "This class keeps track of the current 'heat' of combat, based on events in the world",
    "FortWorldManager": "This class manages all of the state and persistence for world-scoped data",
    "SkyfireTODOverrideVolume": "This class represents a 'null' gameplay volume which will house a FortVolumeTimeOfDayComponent. The TOD component\nwill be enabled/disabled by manually broadcasting player entered/exited events from SkyfireControllerComponent and\nwill not be enabled/disabled by any actor/player actually entering or exiting the volume. Though this class implements\nIFortSpatialGameplayInterface, it does not provide useful implementations of the functions in that interface as it\nis meant to act as a volume with infinitely small bounds (i.e. a 'null' volume).\n\nThe reason this class is necessary is that in order for FortVolumeTimeOfDayComponents to work properly, they must be\nattached to a GameplayVolume actor that implements IFortSpatialGameplayInterface. Skyfire cannot use the typical FortVolume\nthat is used by other TOD components because the TOD will automatically enable/disable based on if the player is inside\nthe volume.",
    "PlayspaceComponentVerseWrapper": "This class routes virtual methods on UPlayspaceComponent_Logic to coroutine wait contexts on the verse exposed verse::playspace_component",
    "FortPlayerSaveComponent": "This class was created with the intention of encapsulating all InventoryManager calls from Creative\nAt the moment this was created, main functionality is to:\n- Request and Release Inventories\n- Store, Load, and Clear player data in a specific Inventory Item at a specific folder path\n- Expose functionality to identify current Inventory State",
    "UnicornDriver": "This class will drive the unicorn process - being the central point of storage for information on players, as well as their highlights\nEach player is given a log, which will record their movements, build events, eliminations/deaths etc\nWhen an elimination occurs, the Driver will log it down, and then use a series of Evaluators to determine how interesting the elimination is\nEach evaluator will judge the elimination based off the player's Log, and the elimination information available\nEach evaluator will judge the elimination and give it a score based off what they are interested in, and when such a highlight clip should start and stop\nEvaluators combine their assessment of an EvaluatedElimination, and a highlight clip is created from it\nHighlight clips are saved to a players log. Any highlight clips that are close together get merged together\nAt the end of the game, the server extracts an significant highlights according to what BaseHighlightExtractors are enabled\nHighlight extractors make new highlight clips, or look at existing ones and say \"I don't care about the score, this is an important clip!\"\nThe server gathers all highlight clips from all players, and sorts them based off score (what the evaluators say about an interesting kill) and significance (what the Extractors say)\nThe top N game highlights are made into replay camera shots, and saved to the replay file",
    "ERedeemCodeFailureReason.AlreadyHasAccess": "This code is already in use",
    "ERedeemCodeFailureReason.CodeAlreadyUsed": "This code is invalid",
    "FortHealthBarComponent:HealthBarColorCurve": "This color curve is used for defining what the color should be at any health value. Curve should only have values from 0-1.",
    "PlayspaceManagerComponent": "This component adds the ability for the monolithic gameplay framework to support greater than one game by managing a list of one or more \"Playspaces\" in a native way.\nIt handles adding/removing \"Playspaces\" as well as feeding players to the \"Playspaces\".",
    "HurdleComponent": "This component controls the logic for all types of Hurdle that the player can use.",
    "ClamberingComponent": "This component controls the logic for all types of clambering that the player can use.",
    "FortCreativeLinearMoverComponent": "This component handles the core functionality of the linear mover device.",
    "FortPawnComponent_BlobPlayer": "This component handles the pawn status for blob player\nincluding the skeletal mesh and animation BP switching when enter/exit blob state",
    "FortControllerComponent_MapDiscoverability:OnStencilMIDCreated": "This component has created a new StencilMID",
    "DeathEffectsPawnComponent": "This component is attached to client player pawns in Cobalt to provide alternate death effects for round winners",
    "FortControllerComponent_TournamentStatsTracker": "This component is intended as a way to track stats in the AFortAthenaMutator_TournamentStats mutator.\n    Clients know which tournaments they are participating in, but the server tracks all active tournaments.\n    This component allows us to only send the stats a specific player cares about rather than those for\n    all active tournaments.",
    "FortAthenaTrackableAIObjectComponent": "This component is intended to be added to any actor that can be tracked by AIs for various behaviours (ex. Umami's kidnap)",
    "FortSkyTubePhysicsComponent": "This component is intended to be added to any actor with physics simulation\nwhich needs to interact with a skytube.",
    "FortWaterInteractionComponent": "This component is intended to be added to any actor with projectile simulation\nwhich needs to interact with a FortWaterBody.",
    "FortVehiclePontoonsComponent": "This component is intended to be added to any actor with vehicle pontoons.\nNOTE : Buoyancy configs are overridden via vehicle configs.",
    "FortGameStateComponent_KillFeedExtension": "This component is to give the game state the opportunity to override various kill feed\n styles, namely Victim and Killer (which are fairly popular styles used in various contexts).",
    "FortFXCustomizationComponent": "This component is used to easily override fx parameters at runtime.\n      NOTE: This requires BP or Code calls into one of ApplyFXCustomization\n                functions to actually apply the customizations.",
    "GameplayStateMachineManager": "This component manages the registration and updating of GameplayStateMachines\n - Any GameplayStateMachines and the GameplayStates contained with them use the actor this component is attached to for replication",
    "FortAthenaNpcPatrollingComponent": "This component must be use with :\n AIEvaluator: UFortAthenaNpcEvaluator_Patrolling\n Path : AFortAthenaPatrolPath + AFortAthenaPatrolPoint",
    "FortTemporaryItemsComponent": "This component tracks mcp profile updates in order to give an entry point for subscription temporary items injection",
    "ChromeWaterBodyComponent": "This component when added to a water body actor converts it to a chrome water body.\nActors that enter a chrome water body get chromed themselves.\nChrome is the theme for season 22; actors that get chromed may gain special behavior\nbased on the type of the actor they are.",
    "FortChromeComponentData:ChromeComponent": "This component will be added to actors that match the ChromeTagQuery",
    "FortWeaponCameraAnimationComponent": "This component will deal with applying Camera Shake modifiers",
    "AthenaNavPresenceDetectorComponent:bDisableUponNavMeshPresence": "This component will disable itself (more performant) as soon as Navmeshes is found.",
    "FortPlayerStateComponent_MilestoneQuests": "This component will grab a copy of the GameState quests map (which is the same starting map for all players).\nIt will then modify it to reflect this player's available replacements as they complete quests in this match.\n\nThis componentis also where we grant the replacement quest",
    "EUIStateChartContextConditionType.IsTrue": "This condition is met if the context value is a boolean true value or the string \"true\"",
    "EUIStateChartContextConditionType.IsNotTrue": "This condition is met if the context value is not the boolean true value or the string \"true\"",
    "EUIStateChartContextConditionType.IsNotEqualTo": "This condition is met if the context value is not the same as the comparison constant (ignoring case for strings)",
    "EUIStateChartContextConditionType.IsGreaterThanOrEqualTo": "This condition is met if the context value is numerically larger than or equal to the comparison constant",
    "EUIStateChartContextConditionType.IsGreaterThan": "This condition is met if the context value is numerically larger than the comparison constant",
    "EUIStateChartContextConditionType.IsLessThanOrEqualTo": "This condition is met if the context value is numerically smaller than or equal to the comparison constant",
    "EUIStateChartContextConditionType.IsLessThan": "This condition is met if the context value is numerically smaller than the comparison constant",
    "EUIStateChartContextConditionType.IsNotEmpty": "This condition is met if the context value is set or is set to a non-empty value",
    "EUIStateChartContextConditionType.IsEqualTo": "This condition is met if the context value is the same as the comparison constant (ignoring case for strings)",
    "EUIStateChartContextConditionType.IsEmpty": "This condition is met if the context value is unset or is set to an empty value",
    "EUIStateChartContextConditionType.StartsWith": "This condition is met if the context value when considered as a string begins with the comparison constant, ignoring case",
    "EUIStateChartContextConditionType.Contains": "This condition is met if the context value when considered as a string contains with the comparison constant, ignoring case",
    "EUIStateChartContextConditionType.EndsWith": "This condition is met if the context value when considered as a string ends with the comparison constant, ignoring case",
    "PlayerClampInfo": "This contains all of the clamping information for players\nMost clamped values should be set via the attribute clamps array\nSome additional columns may be needed to handle specific cases\nFRED_TODO: verify we're covered for what we need. Known cases: FORT stats, weapon skill, building skill, harvesting damage\nFRED_TODO: somewhere we're going to need to apply these values, that should probably happen with the rest of the player initialization in zone",
    "FortPawn:RegisteredMovementModeExtentionLogic": "This contains all the logic that could be active during the session based on loaded plugin. This need to exist on all instance of that object",
    "FortAIPawn:HeadHeightPercent": "This controls at what percentage of a Pawn's height its head can be considered to start going from the bottom of it's Mesh's collision cylinder.",
    "FortAscenderZipline:HandleActorHitPlayerHorizontalLaunchSpeed": "This controls the horizontal launch speed applied to another player when the actor using the handle hits them.  The direction of this horizontal velocity will always be away from the base of the ascender.",
    "FortAscenderZipline:DescendJumpedOffHorizontalLaunchSpeed": "This controls the horizontal launch speed applied to the player when they are moving down and jump off.  The direction of this horizontal velocity will always be away from the base of the ascender.",
    "FortAscenderZipline:DescendReachedEndHorizontalLaunchSpeed": "This controls the horizontal launch speed applied to the player when they are moving down and reach the bottom.  The direction of this horizontal velocity will always be away from the base of the ascender.",
    "FortAscenderZipline:AscendJumpedOffHorizontalLaunchSpeed": "This controls the horizontal launch speed applied to the player when they are moving up and jump off.  The direction of this horizontal velocity will always be away from the base of the ascender.",
    "FortAscenderZipline:AscendReachedEndHorizontalLaunchSpeed": "This controls the horizontal launch speed applied to the player when they are moving up and reach the top.  The direction of this horizontal velocity will always be towards the base of the ascender.",
    "EFortTopBarTabButtonGroup": "This controls the sort order in BuildAllTabs.",
    "FortAscenderZipline:HandleActorHitPlayerVerticalLaunchSpeed": "This controls the vertical launch speed applied to another player when the actor using the handle hits them.",
    "FortAscenderZipline:DescendJumpedOffVerticalLaunchSpeed": "This controls the vertical launch speed applied to the player when they are moving down and jump off.",
    "FortAscenderZipline:DescendReachedEndVerticalLaunchSpeed": "This controls the vertical launch speed applied to the player when they are moving down and reach the bottom",
    "FortAscenderZipline:AscendJumpedOffVerticalLaunchSpeed": "This controls the vertical launch speed applied to the player when they are moving up and jump off.",
    "FortAscenderZipline:AscendReachedEndVerticalLaunchSpeed": "This controls the vertical launch speed applied to the player when they are moving up and reach the top",
    "HurdleComponent:AutoHurdleEnabled": "This controls whether or not auto hurdling is enabled. 1.0 is auto-hurdle, 0.0 is manual hurdle.",
    "ClamberingComponent:ClamberIndicatorEnabled": "This controls whether or not the clamber indicator is currently enabled. 1.0 is enabled and it will look at the setttings to see if it should be shown, 0.0 is disabled regardless of setting.",
    "ClamberingComponent:ClamberingEnabled": "This controls whether or not the clambering feature is currently enabled. 1.0 is enabled, 0.0 is disabled.",
    "HurdleComponent:HurdleEnabled": "This controls whether or not the hurdle feature is currently enabled. 1.0 is enabled, 0.0 is disabled.",
    "ControllingRiderComponent:bCanControlRidable": "This controls whether or not this controlling rider component can currently control a ridable when it starts riding.",
    "WeaponCueReplicationStruct:RepCounter": "This counter is incremented to force replication",
    "CrashpadStaticParams:CrashpadMesh": "This crashpad's \"Pad\" mesh",
    "EFortTileEdgeType.Undefined": "This defines an edge that has not yet had its type determined",
    "ClamberingTargetingDebugData_Ledge": "This defines debug data which is used to display data to the screen about the status of targeting.",
    "FortGameMode:QuickBarDefinitions": "This defines how many slots each of the quick bars has, as well as what items will be allowed in each of the slots",
    "FortPlayerControllerAthena:QuickBarDefinitions": "This defines how many slots each of the quick bars has, as well as what items will be allowed in each of the slots",
    "FortPlayerControllerSpectating:QuickBarDefinitions": "This defines how many slots each of the quick bars has, as well as what items will be allowed in each of the slots",
    "PluginCheatMenuEntry:bIgnoreRunAllSeasonCheatsCommand": "This defines if this cheat should be ignored on the RunAllSeasonCheats command",
    "FortDeployableBaseManager:OnDeployableBasePlotsSpawned": "This delegate fires when all deployable base plots are spawned",
    "DeployableBasePlot:OnDeployableBasePlotSpacesChanged": "This delegate fires when the box spaces have changed",
    "DeployableBasePlot:OnDeployableBaseCoreDestroyed": "This delegate fires when the core is destroyed",
    "DeployableBasePlot:OnDeployableBaseCoreCreated": "This delegate fires when the core is spawned",
    "DeployableBasePlot:OnOccupantIdChanged": "This delegate fires whenever the occupant Id changes",
    "ActorComponent_ReplicatedParamHelper:OnReplicatedParamChanged": "This delegate is called when any replicated parameter has changed.",
    "FortPlayerPawn:OnMaterialOverrideApplied": "This delegate will be called whenever a material override is applied or updated.\nUse the property MaterialOverrideStateMap on the pawn to access all state data for components that have had materials or fx modified.",
    "FortPlayerPawn:OnMaterialOverrideCleared": "This delegate will be called whenever all material overrides have been cleared.",
    "CraftingObjectComponent:OnCraftingSuccess": "This delegate will be trigger when this crafting object successfully crafts an item.",
    "FortControllerComponent_CraftingNetworkEvents:OnCraftingSuccess": "This delegate will be trigger when this player controller successfully crafts an item.",
    "InteriorAudioDictionaryEntry:RotationConstraint": "This describes information needed to understand the rotation of the building piece in relation to the Player's position",
    "FortObjectiveFilter_HealingBase:SelfHealingBehavior": "This determines how self healing is handled for this objective\nAllowed = Self healing and non self healing will both progress the objective\nRequired = Only self healing will progress this objective\nProhibited = Self healing will NOT allow progress for this objective",
    "CreativeAudioMixerDevice:CanBeHeardBy": "This determines which players will experience the mix.",
    "CreativeGameStreamDeviceComponent": "This device component handles communication with the game stream device coordinator component. It also used as a container for\nother useful functions related to game stream functionality.\n\nThis device component handles instancing the Creative Game Stream Device Coordinator component for the owner's playspace.",
    "ECinematicSequenceVisibility.Everyone": "This device will be played back for everyone",
    "ECinematicSequenceVisibility.InstigatorOnly": "This device will only be played back for the instigating player",
    "ECinematicSequenceVisibility.InstigatingTeam": "This device will only be played back for the instigating player's team",
    "FortActorOptionsComponent:Internal_InteractionSpeed": "This dictates the interaction time for the owning actor\n@note If Internal_PlayerOptions is null then we'll attempt to get the data from the FUserOptionDefinitionContainer on the owner actor class",
    "BuildingActor:InteractionSpeed": "This dictates the length of the search time on this actor",
    "BuildingContainer:SearchSpeed": "This dictates the length of the search time on this container",
    "EGfeSDKHighlightSignificance": "This different from the version in sdk_types.h because\nUE4 only supports 8 bit enums. It must be translated",
    "FortObjectiveFilterType_VehicleFilter:DistanceFromGround": "This distance the Vehicle is from the ground while in the air in meters. Only settable while RequiredSurfaceType is InAir",
    "EIndicatorStateImage.DBNO": "This doesn't seem to work, need to figure out why.",
    "FortVehicleSeatWeaponComponent:bSeatUsesFastSharedReplication": "This enables fast shared replication for pawns in this seat.\nThe default behavior is to disable fast replication while attached to a vehicle. Disabled while attached allows for some performance savings.\nHowever, in some cases we need fast pawn rotation updates. eg a seat turret.",
    "FortPlayerParachute:bUsesDayPhaseChange": "This enables the artist to toggle delegate binding to OnDayPhaseChanged *",
    "EFortEncounterState.ReplacingRifts": "This encounter is active and running through its pacing states",
    "EMashAISpecialEncounterType.Boss": "This encounter will spawn a boss that will display a special boss health bar in the HUD.\n     When a boss is spawned the current safezone phase will NOT end until the boss is killed, then the phase will end immediately.\n     Bosses can also override the size of the safezone.",
    "EFortRichColorConflictResolutionRules": "This enum corresponds to AntiConflictData.FortRichColorConflictResolutionRules in Java code",
    "EFortGameplayAbilityTagChangedActionType": "This enum defines the actions that can be taken based on a tag changed event.",
    "EDynamicDestructionResourceType": "This enum defines the different resource types used when preforming dynamic destruction.",
    "EClamberingFailedReason": "This enum defines the various failure reasons for clambering",
    "EClamberingState": "This enum defines the various states of clambering.\n      NOTE: If you update this, you also need to update ClamberingStatics::GetClamberingStateTag",
    "EHurdleState": "This enum defines the various states of hurdle.",
    "EClamberingType": "This enum defines the various types of clambering.",
    "EHurdleType": "This enum defines the various types of clambering.",
    "EFortGameplayAbilityTagChangedEvent": "This enum defines the what tag changed event triggers an action.",
    "EAlertLevelComparisonOperator": "This enum is used to define the comparison operator desired for the alert level threshold",
    "EThrowingToyItemRemovedReason": "This enum represents how the reason why the throwing toy is getting removed from the player's inventory",
    "EFortCustomBodyType": "This enumerated type is actually a bit-field for small, medium, large types which are supported.",
    "EStateTransitionPauseRequestHandleClearType": "This enumeration acts as a named boolean for StateTransitionControlLibrary.ClearPauseRequest.",
    "EStateTransitionControlEvent": "This enumeration defines the types of events which can be relevant to a State Transition Controller.",
    "EConsoleAuthLinkState.ThisEpicAccountLinked": "This epic account is already linked to this console auth",
    "EConsoleAuthLinkState.PrimaryIdNotLinked": "This epic account is already linked to this console auth, but not the primary auth id",
    "EConsoleAuthLinkState.SecondaryIdNotLinked": "This epic account is already linked to this console auth, but not the secondary auth id",
    "FortControllerComponent_VictoryCrowns:OnVictoryCrownStatusChanged": "This event fired when inventory crown item status is changed",
    "FortControllerComponent_GameplayCinematic:BP_OnGameplayIntroFinished": "This event will go off on BOTH server and client",
    "EFortGameplayAbilityTagChangedEvent.Decreased": "This event will happen any time the tag count has decreased on the owner, even if the tag still exists after it was decreased.",
    "EFortGameplayAbilityTagChangedEvent.Increased": "This event will happen any time the tag count has increased on the owner, even if it has just been newly added.",
    "EFortGameplayAbilityTagChangedEvent.NewlyAdded": "This event will only happen if this tag does not previously exist on the owner and has just been added.",
    "EFortGameplayAbilityTagChangedEvent.FullyRemoved": "This event will only happen if this tag previously existed on the owner, and it was just fully removed.",
    "QuestItemDefinitionDesignerData:QuestTypeToCreate": "This field determines what kind of assets will be used to generate the quest data.",
    "CatalogDynamicBundle:CurrencySubType": "This field is a templateId if Currency = GameItem",
    "CatalogItemPrice:CurrencySubType": "This field is a templateId if Currency = GameItem, it is an ISO 4217 Currency Code if Currency = RealMoney (e.g. \"USD\")",
    "FortScriptedObjectMovement_MovableObjectBase:StaticFollowPath": "This field is populated via the static path tool. Generate a path with this object set as a traveler.",
    "FortObjectiveFilter_Emote:NearbyPlayersFilter": "This filter allows you to specify required number of players within a range of the player using the emote",
    "SoftClassFilterType_Expression_All": "This filter will only pass if all expression in is pass",
    "SoftQuestDefinitionFilterType_Expression_All": "This filter will only pass if all expression in is pass",
    "SoftClassFilterType_Expression_None": "This filter will only pass if no expressions in it pass",
    "SoftQuestDefinitionFilterType_Expression_None": "This filter will only pass if no expressions in it pass",
    "SoftClassFilterType_Expression_Any": "This filter will pass if any expression in it passes",
    "SoftQuestDefinitionFilterType_Expression_Any": "This filter will pass if any expression in it passes",
    "SoftClassFilterType_Rule_None": "This filter will pass if the object is NOT any of these classes",
    "SoftQuestDefinitionFilterType_Rule_Any_QuestDefinition": "This filter will pass if the object is a quest definition that matches any of these QuestItemDefinitions",
    "SoftQuestDefinitionFilterType_Rule_None_QuestDefinition": "This filter will pass if the object is a quest definition, and does not match any quest definition in this list",
    "BuildingActor:bShouldClearMarkerOnInteract": "This flag can be used to determine if a world marker should stop showing once the user has interacted with that building e.g campfire",
    "FortAthenaSKPushCannon:bDriverMustADSToAim": "This flag indicates that a driver will \"aim\" the cannon when in ADS (otherwise free to aim while driving)",
    "FortWeaponComponent_ScopeAnimation:TargetingTag": "This flag is set on the player when ADS",
    "EGateResetBehavior.DoesNotReset": "This gate does not reset the quest or the objective",
    "EGateResetBehavior.ResetQuestOnGateClose": "This gate will reset the entire quest when it closes",
    "EGateResetBehavior.ResetObjectiveAndDataOnGateClose": "This gate will reset the objective when it closes, and also resets instanced data (like data fromm the tracked data component)",
    "EGateResetBehavior.ResetObjectiveOnGateClose": "This gate will reset the objective when it closes, does not reset tracked data",
    "FortPawnComponent_Convert:bShouldShowIndicatorMarker": "This gets set when UI indicator should be shown and cleared when its meant to be hidden",
    "FortPlayerController:ForcedInputRotationSpeed": "This gets the current forced input rotation speed, which\n              forces any rotational inputs to be applied at this\n              speed, regardless of input amount or sensitivity.",
    "EMatchmakingInputSource.Local": "This gets the current input source the local player is using.",
    "EMatchmakingInputSource.Remote": "This gets the current or locked in 'ready' input source the remote player is using.",
    "FortPoi_DiscoverableComponent:DiscoverMinimapBitId": "This governs the bit ID of this discoverable location. -1 indicates an invalid entry.\n\n!! WARNING !!\n\nCannot clash! If multiple locations use the same ID, either one will reveal BOTH.",
    "FortCurieGrassFireReplicator:PlaysetUsedForGrassFX": "This grass fire replicator's playset used for grass fx used to check against the current playset.\nThis is used to avoid drawing burnt grass from one playset while playing in another playset.\nIf the GSA IsGrassFireBoundsUpdateEnabled is false (set to true via AFortAthenaMutator_CurieSettings),\ncurrent GrassPlayset will be nullptr and IsReplicatorWithinGrassPlayset will return true.",
    "FortItemEntry:TrackerGuid": "This guid can be used to track the item through its various forms of weapon actors, pick up actors, and inventory items.",
    "StateTransitionControllerHandle": "This handle refers to a State Transition controller. You can use it to request that the state transition be stalled.",
    "MassDeltaVelocityDamageHandlerData:bVehicleImminentDestruction": "This handler can be used to gather damage data for imminent destruction. Mark the damage data here as supporting that.\n              Could possibly use tags if we ever re-support dynamic physics object imminent destruction based on damage",
    "FortClassTrackerComponent:ClassTracker": "This handles tracking the class counts and limits",
    "FortAthenaMutator_Barrier:GameMsg_WallDown": "This happens when the wall is completely down",
    "EPartsShowingMode.NeverInitalized": "This has never been initialized so nothing to show",
    "TeamPlacementData": "This holds basic information regarding the teams participating in the mode and is replicated to the client for UI purposes.\nThis can be overloaded along with the TeamPlacement mutator if more specific information is needed",
    "EScoreDistributionType": "This holds enums used by the creature manager",
    "AthenaPawnReplayData": "This holds sensitive data we want to be encrypted on the client until the match has finished",
    "AthenaBatchedDamageGameplayCues_Shared": "This holds the data we send for the batched Activation/Impact/Damage cues. This could be further improved with custom net serialization and harder quantization. Possibly optimize the magnitude = 0 case. This struct sould only contain sharable net serialized data (No object references!)",
    "EMiniMapComponentDiscoverableVisibility.NotVisible": "This icon should NOT be visible.",
    "EMiniMapComponentDiscoverableVisibility.Discovered": "This icon should be visible and should use the discovered icon.",
    "EMiniMapComponentDiscoverableVisibility.Visible_NotDiscovered": "This icon should be visible, but marked as undiscovered (this is normally done with a ? icon.)",
    "CraftingObjectServerStateData:PendingPickupHeldCount": "This indicates how many of the pending item entry will be used towards the current contextual in world crafting.",
    "FortVolumeTimeOfDayComponent:LocalTrackingTickRate": "This indicates how often in seconds to update\n              if the local view target or camera are in this\n              TOD volume.",
    "FortPlayerControllerAthena:bIgnoreSpectatorViewRotation": "This indicates if GetControlRotation() should return the spectator\n              view rotation while the view target is currently an actor other than\n              the pawn for this controller.",
    "ClamberingTargetingConfig_Ledge:TargetValidationEnabled": "This indicates if target validation is enabled, which checks to make sure the player has room to fit at the target clambering location.",
    "ClamberingComponent:bPerformTargetingWhileSwimming": "This indicates if targeting should be performed while swimming.  This only applies if we are showing the clamber target indicator.",
    "ClamberingComponent:bPerformTargetingWhileWalking": "This indicates if targeting should be performed while walking.  This only applies if we are showing the clamber target indicator.",
    "FortAscenderZipline:bCableDropping": "This indicates if the cable is currently dropping.",
    "RiderComponent:bUseClientAttachGuideSocket": "This indicates if the client should use the ClientAttachGuideSocket defined on the\n              ridable component.  This will use that socket update the relative location on the\n              client based on the distance between this socket and the main attach socket.\n              This will be further offset by the rider prop attach location, that way the rider\n              prop location lines up with the client attach guide socket.",
    "BuildingSMActorClassData:bUseDynamicDestructionMaterial": "This indicates if the dynamic destruction material will be applied when this BuildingSMActor is destroyed.",
    "BuildingSMActorClassData:bUseDynamicDestructionNiagaraSystem": "This indicates if the dynamic destruction niagara system will be spawned when this BuildingSMActor is destroyed.",
    "FortAscenderZipline:bHandleReturning": "This indicates if the handle is currently returning to the spline end location.",
    "ClamberingTargetingConfig_Ledge:FowardCast2D": "This indicates if the initial forward cast uses the 2d aim vector or 3d aim vector.  If we are not showing the target indicator, then it will always use a 2D cast",
    "ClamberingComponent:bJumpInputPressed": "This indicates if the jump input is currently pressed or not. *",
    "FortVolumeTimeOfDayComponent:bDirectlyTrackLocalCameraPosition": "This indicates if the local camera should be\n              checked regularly to see if it is in this TOD volume.",
    "ClamberingTargetingConfig_Ledge:AllowNonWalkableSurfaces": "This indicates if the player can clambering onto not walkable surfaces.",
    "GiveInventoryItemParams:bNotifyPlayer": "This indicates if the player will be notified when given the inventory item.",
    "ShielderCollisionHelperComponent:ShouldUpdateShielderSkelMesh": "This indicates if the shielder bga skeletal mesh should be updated on the client to match this rotation.",
    "FortAscenderZipline:bAutoFindSplineEndLocation": "This indicates if the spline end location should automatically be determined.  If true, it will find ground under the cable attach location, and determine the spline end location from there.",
    "FortAscenderZipline:bUseComplexSplineCollision": "This indicates if the spline mesh should generate a complex collision body for it's the volume.\n              If false, SimpleSplineMeshCollision will be used, which will be a tall capsule.",
    "ClamberingComponent:bTutorialModeEnabled": "This indicates if the tutorial mode for clambering is currently enabled.",
    "FortVolumeTimeOfDayComponent:bDirectlyTrackLocalViewTarget": "This indicates if the view target of the local camera should be\n              checked regularly to see if it is in this TOD volume.",
    "FortPlayerPawn:bUseViewRotationForCameraOrigin": "This indicates if this pawn will use the yaw rotation of the view for the base camera origin.\n              This is automatically set when the controller is set to not rotate the pawn to the camera rotation.\n              NOTE: This was added to fix a camera pop when enabling/disabling bUseControllerDesiredRotation on\n                        the character movement component.",
    "ClamberingTargetingData:bValid": "This indicates if this target data describes a valid clambering target.",
    "HurdleTargetingData:bValid": "This indicates if this target data describes a valid vaulting target.",
    "HurdleTargetingData:bIsNarrowOpening": "This indicates if this target data describes a vault through a narrow opening.",
    "HurdleTargetingData:bInRange": "This indicates if this target data describes a vaulting target in range.",
    "FortSavedWeaponModSlot:bIsDynamic": "This indicates if this weapon mod slot is dynamic or static.",
    "FortWeaponModSlot:bIsDynamic": "This indicates if this weapon mod slot is dynamic or static.",
    "SimpleDestructiblePropGroup:LastBuiltPropGroupVersion": "This indicates of the last damage event was from fire, used to tie into dynamic destruction FX.",
    "SimpleDestructiblePropGroup:bLastDamageEventFromFire": "This indicates of the last damage event was from fire, used to tie into dynamic destruction FX.",
    "ControllableRidableComponent:bIsBeingControlled": "This indicates we are currently being controlled by our rider.",
    "ControllingRiderComponent:bIsControllingRidable": "This indicates we are currently controlling our active ridable.",
    "ClamberingInputConfig:ActivationMode": "This indicates what the current activation mode of clambering is",
    "ClamberingTargetingData:bCanStandOnLedge": "This indicates whether the character can fit onto this ledge.",
    "LaserGridOutletEntry:InstanceIndex": "This instance index of the instanced static mesh component\n     for the outlet that the entry is for.",
    "EncounterSelectLWMEncounterStateTreeTaskInstanceData:LWMEncounter": "This is LWM encounter that was selected",
    "LWMEncounterStartStateTreeTaskInstanceData:LWMEncounter": "This is LWM encounter to start",
    "BuildingActor:AssociatedMissionParam": "This is ONLY USED by SpawnActor",
    "FortPlayerParachute:bGliderFullyDeployed": "This is a *cosmetic only* scratch pad for animation and FX to work with (the anim BP is responsible for setting it to true, and code will clear it when the glider is being stowed)\nFor example, the space shuttle sets it to true on a notify, and VFX uses that to control trails",
    "FortCreativeBudgetOverride:AssetCostMultiplier": "This is a asset cost multiplier that is only applied to existing entries",
    "FortVerbMessage_Healing": "This is a base verb, and isn't intended for use, but rather to be built off of.",
    "FortVerbMessage_VehicleBase": "This is a base verb, and isn't intended for use, but rather to be built off of.",
    "FortControllerComponent_PluginHUDContent": "This is a class to facilitate pushing plugin hud content into parts of the HUD that don't\n have an easy path to access from either direction.",
    "FortPlayerStateZone:RS_Zone_Old": "This is a copy of ReplicatedStats_Zone kept on the server so that we can subtract the two to find the delta for analytics purposes",
    "FortProjectileBase:InitialSpeed": "This is a curve table row that defines the projectiles initial speed over leveling",
    "FortProjectileBase:VerticleFireOffset": "This is a curve table row that defines the projectiles initial vertical direction offset over leveling",
    "FortProjectileBase:MaxSpeed": "This is a curve table row that defines the projectiles max speed over leveling",
    "FortTracerBase:Speed": "This is a curve table row that defines the projectiles max speed over leveling",
    "SpecialClientEvent": "This is a generic struct used to communicate between the client and server",
    "FortAnimInput_BowWeapon:DisableIkFrameCounter": "This is a hack to get around the fact that curve values are 1 frame late in the graph causing FORT-624273. So we disable the IK when we fire until the curve kicks in which takes 2 frames:\n(0 = montage requested, 1 montage play first frame, 2 curve has a non-zero value)",
    "ShielderCollisionHelperComponent": "This is a helper class to automatically adjust the collision\n      of the shielder base on configuration in order for it to more\n      closely match the collision on client/server to the anims\n      the client sees.",
    "FortCreativeBudgetOverride:InstanceCostMultiplier": "This is a instance cost multiplier that is only applied to existing entries",
    "McpProfileChangeRequest:ChangeStatRequests": "This is a json object with statName and statValue subfields, needs to be an opaque object because value could be any node type",
    "VideoWidgetConfig:bInstanceForceGC": "This is a per instance override of any global settings to force GC before playback\n       * to in best effort to prevent hitching during playback",
    "FortPlayspaceReplicatedState": "This is a replicated state actor that is intended to be\n      spawned by a playspace, and will contain all data\n      that needs to be replicated from the playspace and\n      it's components to all clients.",
    "FortCosmeticProperty_SwapData": "This is a simple cosmetic property that stores data about a potential cosmetic swap, including the item to swap to,\nthe variants to swap (if any), and a unique ID for the swap.\n\nFor example, the swap data property CosmeticProperty.Swap.HideCape can be used to identify a specific cosmetic swap\nthat should be activated when the game wishes to hide the player's cape and the cape is built-in (not a separate\ncharacter part) from the player's body (see CID_A_368_Athena_Commando_M_Sienna for an example).",
    "FortBotDisablePOIRequest": "This is a struct to hold a request ID for systems that want to disable POIs at runtime.\nThe caller needs to create this object internally and call the Request and CancelRequests functions.",
    "OnlineDiscoveryModeSetDef": "This is a temporary struct to enable the A/B testing of the sub mode select feature.",
    "CatalogReceiptInfo:ReceiptId": "This is a transaction ID but needs to identify a single purchased product",
    "StateChangeData:StateIdentifier": "This is a value that will allow all FStateChangeDatas that are associated with the same StateObject to\n    be associated with each other on the client even if the StateObject isn't there yet or ever will be.\n    This allows the client to handle situations when the StateObject is known to not replicate to the client because it\n    ended before replicating\n    The value used is the Handle of the FStateChangeData that initiated a BeginState state change",
    "AthenaBuildingActorChildComponent": "This is a very simple component that just calls the appropriate InitializeKismetSpawnedBuildingActor function to finalize the building actor",
    "DynamicBacchusHUDDirector:WatermarkScene": "This is a watermark for the Dynamic UI, it's so we can verify if we're using the Dynamic UI or the old UI, it will not be displayed in a shipping build.",
    "FortSkyTubePhysicsComponent:PrevSkyTube": "This is a weak ptr because it may stream out",
    "FortBuildingActorSpawner:ActorClassToSpawn": "This is actor we are going to spawn once we find a location",
    "EFortGameFeature.DedicatedServer": "This is actually a dedicated server",
    "BuildingGameplayActorSpawnMachine:ResurrectionHeightOffset": "This is added to the height of the ResurrectionLocation",
    "CrashpadStaticParams:PawnLaunchVertOffset": "This is added to the vertical component of the pawn launch vector",
    "MtxPackage:Price": "This is always the current price of the package",
    "RiderComponent:TargetingAdditionalViewTargetSpaceViewOffset": "This is an additional offset to apply to the view target space view offset for the current third person camera.\n              Only applies when the rider owner is the view target and they are targeting.",
    "RidableComponent:TargetingAdditionalViewTargetSpaceViewOffsetOverride": "This is an additional offset to apply to the view target space view offset for the current third person camera.\n              Only applies when the rider owner is the view target and they are targeting.\n              Used if UseTargetingAdditionalViewTargetSpaceViewOffsetOverride is set.",
    "DynamicXpCircuitBreaker:TimespanOutlierMult": "This is an outlier if the XP acquisition rate over a time interval is X% higher than the XP Budget per minute.\nExpressed as a percentage.",
    "DynamicXpCircuitBreaker:TimespanOutlierDuration": "This is an outlier if the XP acquisition rate over a time interval is X% higher than the XP Budget per minute.\nThis is also used for the Booster system as a MinXpThresholdTimeInterval.\nExpressed in minutes.",
    "EFortGameFeatureState.Available": "This is available on disk but we haven't decided if we want to load it",
    "FortObjectiveFilter_KillCredit": "This is being deprecated in favor of using the new Pawn Eliminated verb, and will be removed in 26.00 with FORT-628903",
    "FortObjectiveFilter_ScoredPlayerElimination": "This is being deprecated in favor of using the new Pawn Eliminated verb, and will be removed in 26.00 with FORT-628903",
    "FortObjectiveFilter_SlayWildlife": "This is being deprecated in favor of using the new Pawn Eliminated verb, and will be removed in 26.00 with FORT-628903",
    "FortGameStateAthena:EndGameTimeDilationCompleteDelegate": "This is broadcast when the end game time dilation (slomo) is complete.",
    "SpecialRelevancyHealthComponent:OnSpecialRelevancyDamage": "This is called on the client and server whenever the owning actor takes damage by a relevancy group.",
    "SpecialRelevancyHealthComponent:OnSpecialRelevancyDeath": "This is called on the client when the actor has been killed by one group",
    "FortAthenaMutator_Barrier:GameMsg_Intro": "This is called when the wall is starting to come down",
    "FortAthenaMutator_Barrier:GameMsg_WallComingDown": "This is called when the wall is starting to come down",
    "FortAscenderZipline:CurrentSplineEndLocation": "This is current end location of the spline, and also where the handle will return to.",
    "DynamicXpPlayerSessionTransient:BankXpReductionTimer": "This is current timer for bank updating.",
    "FortInGameLeaderboardPlacementData:DisplayName": "This is either the local player's name or  the team's point leader",
    "AccoladePublishData": "This is essentially FAccoladeDeviceAnalyticsData, but because it did not use FGameplayTag for weight\n* and had changed GUID into ID when converted to JSON, it can't be used.\n* This data is only in non live data that is used to fill FDynamicXpAggregatedStats, but needs to be extracted\n* separately so it does not accidentally get used.",
    "ClamberingTargetingConfig_Ledge:DownwardDistanceCapsuleHeightMultiplier": "This is how far down to search for a ledge after the initial capsule cast, calculated by multiplying this by the player capsule height.",
    "FortAscenderZipline:SimpleSplineCollisionHeightExtension": "This is how far past the ends of the spline to extend the capsule used for simple spline mesh collision.",
    "ClamberingTargetingConfig_Ledge:UpwardStartDistanceCapsuleHeightMultiplier": "This is how high up from the players feet to start looking for a ledge (i.e. Min Z for the capsule cast), calculated by multiplying this by the player capsule height.",
    "ClamberingTargetingConfig_Ledge:UpwardDistanceCapsuleHeightMultiplier": "This is how high up from the players feet to stop looking for a ledge (i.e. Max Z for the capsule cast), calculated by multiplying this by the player capsule height.",
    "FortPawn:HolsterActiveDuration": "This is how long the holster has been active for.",
    "RiderComponent:RidingExitHoldTime": "This is how long the player needs to hold the exit input to exit riding.",
    "ClamberingTargetingConfig_Ledge:TargetValidationCapsuleHalfHeightModifier": "This is how much to decrease the half height of the capsule used to check if the player has room to fit at the target clambering location.",
    "ClamberingTargetingConfig_Ledge:TargetValidationCapsuleRadiusModifier": "This is how much to decrease the radius of the capsule used to check if the player has room to fit at the target clambering location.",
    "ClamberingTargetingConfig_Ledge:TargetValidationCapsuleBottomVerticalOffset": "This is how much to move up the bottom of the capsule used to check if the player has room to fit at the target clambering location.  NOTE: This does not always adjust the top of the capsule.",
    "ClamberingTargetingConfig_Ledge:DownwardSweepOffset": "This is how much to offset the sweep position from the wall when detecting a lip that would otherwise not allow the character to stand on.",
    "ClamberingMovementConfig_Ledge:BlockCheckTickRate": "This is how often to check if there is blocker between the upward move target and the forward move target while moving.",
    "StreamingRadioPlayerComponent:MaximumRetries": "This is in addition to any retry mechanism in the media source",
    "ClamberingComponent:LocalTargetingData": "This is local targeting data for clambering, used while actively targeting clambering.  When a valid clamber target is found, the data will be moved into LockedTargetingData.",
    "ClamberingComponent:ParallelTargetingData": "This is local targeting data for clambering, used while actively targeting clambering.  When a valid clamber target is found, the data will be moved into LockedTargetingData.",
    "HurdleComponent:ParallelTargetingData": "This is local targeting data for hurdle, used while actively targeting hurdle.  When a valid hurdle target is found, the data will be moved into LastHurdleTargetData.",
    "FortMovementComp_Character:ActiveMovementModeExtension": "This is mainly to get quick access to what is currently active",
    "FortAthenaMutator_UseCare": "This is native class for the LTM \"Use With Care\"",
    "FortAthenaMutator_Leave": "This is native class for the LTM Leave No Man Behind",
    "FortAthenaMutator_Tank": "This is native class for the LTM Tank",
    "DynamicBuildingFoundationRepData:Rotation": "This is not a quaternion on purpose, FRotator is a more capable replication vehicle\nEven tenths of a degree can cause sub-object positioning to be divergent enough on client and server to trigger movement fixups",
    "EFriendChestInstancedType.FreshDripCounter": "This is not granted to player visually, but is used to track if we are in Fresh or Drip conditions for Instanced Loot",
    "FortShowdownScoringRuleInfo": "This is old stuff that should be replaced with structures above*",
    "FortVehicleOutPersistent:bPossiblyTouchingTop": "This is only a maybe, we check with other contacts in the game thread to make sure.",
    "FortTeamHealthInfo:FortTeamInfo": "This is only valid on the server",
    "CatalogReceiptInfo:ReceiptInfo": "This is opaque data that can be passed to AppStore for validation. It correlates with AppStoreId and ReceiptId",
    "FortPlayerControllerAthenaXPComponent:CurrentLevel": "This is our faked level",
    "FortObjectiveFilter_StormPhaseChanged": "This is sent to all alive players when the storm phase changes",
    "FortInGameLeaderboardPlacementData:SortIndex": "This is separate from placement. You can have more than one team be #1\n       but this value represents where it is in the leaderboard array.",
    "FortNonPlayerConversationParticipantComponent:SalesInventory": "This is set to override the defaults that are in AthenaSeasonItemDefinition.",
    "FortNonPlayerConversationParticipantComponent:Services": "This is set to override the defaults that are in AthenaSeasonItemDefinition.",
    "FortAthenaAIBotController:bHasChangedPawnCullDistanceToAggroMode": "This is set to true after the pawn's cull distance is changed to the aggro cull distance, if the aggro cull distance was set.\n    We use this flag to avoid checking again after we change the cull distance.",
    "ECreativeQuickbarSlots.Phone": "This is setup in PlayerController data for the creative quickslot, if we change this it also needs to be updated there.",
    "EFortInputActionGroup.CombatAndAthenaLTMAbilities": "This is specifically for inputs that span across Combat and Athena LTM Ability modes.",
    "EFortInputActionGroup.CombatAndBuilding": "This is specifically for inputs that span across Combat and Building modes.",
    "EFortInputActionGroup.CombatBuildingAndAthenaLTMAbilities": "This is specifically for inputs that span across Combat, Building, and Athena LTM Ability modes.",
    "RiderComponent:ConnectorFXAsset": "This is the FX that connects the rider and ridable props",
    "DynamicDestructionStaticMeshEntry:MIDs": "This is the MIDs that have been created for this SM entry.",
    "ESkyfireBackpackAudioPhase": "This is the Native version of the BP E_SkyfireBackpackAudioPhase enum\nEnum for the different backpack audio phases",
    "SkyfireBackpackCountdownSoundStruct": "This is the Native version of the BP SkyfireBackpackCountdownSoundStruct structure\nContains data for the countdown sounds.",
    "FortGameModeDeployableBase": "This is the STW 'horde' mode",
    "ObjectiveEntry_Gate:GateGameplayAbility": "This is the UFortGameplayAbility_ObjectiveGate that will handle opening and closing this gate",
    "FortGameplayAbilityTagChangedAction:Action": "This is the action that will be executed for this tag change action.\n              NOTE: Purposely not exposed, as it only support canceling for now.",
    "RiderComponent:ActiveAnaltyicsData": "This is the active set of data being used to track this riding session,\n              which is sent at the end of the riding session.",
    "ClamberingTargetingData:TargetActorComponent": "This is the actor component that clambering target is on.",
    "ReplicatedClamberingTargetingData:TargetActorComponent": "This is the actor component that clambering target is on.",
    "ReplicatedClamberingTargetingData_SimClient:TargetActorComponent": "This is the actor component that clambering target is on.",
    "HurdleTargetingData:TargetActorComponent": "This is the actor component that vaulting target is on.",
    "ClamberingTargetingData:TargetActor": "This is the actor that clambering target is on.",
    "ReplicatedClamberingTargetingData:TargetActor": "This is the actor that clambering target is on.",
    "ReplicatedClamberingTargetingData_SimClient:TargetActor": "This is the actor that clambering target is on.",
    "ClamberingTargetingData:SourceActor": "This is the actor that requested the clambering target data.",
    "HurdleTargetingData:SourceActor": "This is the actor that requested the vaulting target data.",
    "HurdleTargetingData:TargetActor": "This is the actor that vaulting target is on.",
    "FortAscenderZipline:FloorActor": "This is the actor that was hit when DetermineSplineEndLocation() was last called",
    "FilterMessageEventStateArgs:EventCache": "This is the actual event cache struct so that we can see all that information",
    "RiderComponent:AdditionalAttachOffset": "This is the addition attachment offset that is currently applied.\n              This is exposed for debugging purposes.",
    "ClamberingTargetingData:SourceAim": "This is the aim that was used for the request for clambering target data.  NOTE:  This is only on the local client, and not valid on the server.",
    "HurdleTargetingData:SourceAim": "This is the aim that was used for the request for vaulting target data.  NOTE:  This is only on the local client, and not valid on the server.",
    "FortInGameMapManager:VisibilityMaxGradient": "This is the alpha value (0-255) that is assigned to the clouds at the middle of the graph, i.e. between the ExploredFalloffRadius and the SeenRadius.  If Explored radii are both zero, it's effectively the maximum alpha value at the center of exploration that falls linearly to 0.",
    "ClamberingComponent:JumpHeldInAirTime": "This is the amount of time that the jump input has been currently held while in the air.",
    "RiderComponent:HardBoundsAttachmentOffset": "This is the amount that the soft bounds have adjusted the attachment\n              position of the player.  This is exposed for debugging purposes.",
    "RiderComponent:SoftBoundsAttachmentOffset": "This is the amount that the soft bounds have adjusted the attachment\n              position of the player.  This is exposed for debugging purposes.",
    "ClamberingInputConfig:TargetAimInvalidateAngle": "This is the angle from where the player was aiming when they last had a valid clambering ledge location, beyond which any currently valid clambering ledge locations will be invalidated.",
    "ClamberingInputConfig:AutoStartLookAtThreshold": "This is the angle threshold in degrees which is used to consider if the player is looking towards the currently valid clambering location.",
    "ClamberingInputConfig:AutoStartMovementThreshold": "This is the angle threshold in degrees which is used to consider if the player is moving towards the currently valid clambering wall.",
    "ClamberingTargetingConfig_Ledge:HorizontalSurfaceThreshold": "This is the angle tolerance in degrees for determining a horizontal surface to be able to clamber on.",
    "ClamberingTargetingConfig_Ledge:VerticalSurfaceThreshold": "This is the angle tolerance in degrees for determining a vertical surface to be able to clamber on.",
    "RidableComponent:RiderAnimLayerOverlayClass": "This is the anim layer overlay class to apply to the riding FortPawn when riding this ridable.  No effect if the rider is not a FortPawn.",
    "DynamicDestructionStaticMeshEntry:OldMaterials": "This is the array of materials that were previously set on the static mesh before starting dynamic destruction",
    "FortCreativeBudgetOverride:AssetCost": "This is the asset cost of placing an instance of the ActorClass, this is added to existing entries",
    "RidableComponent:RiderPropAttachBoundsOverride": "This is the attach bounds override to apply to the riders attach bounds when\n              this ridable is being ridden.",
    "FortCreativeBudgetOverride:AudioCost": "This is the audio  cost of placing an instance of the ActorClass, this is added to existing entries",
    "HurdleTargetingData:BackCornerLocation": "This is the back corner of the vaulting object we are jumping on, invalid if we do a vault on",
    "ReplicatedHurdleTargetingData:BackCornerLocation": "This is the back corner of the vaulting object we are jumping on, invalid if we do a vault on",
    "DynamicBacchusHUDDirector:BaseHUDWidgetRegistry": "This is the base HUD widget registry that we use to create the HLT, it should usually be MobileHUDWidgetRegistry",
    "ClamberingTargetingDebugData": "This is the base class for clambering target debug data, includes a list of all debug draws requested.",
    "ClamberingTargetingDebugDrawData": "This is the base class for defining a clambering targeting debug draw.",
    "FortGameModePvE": "This is the base game mode for STW",
    "RepParamBaseArray": "This is the base struct type for am array of rep params.",
    "ClamberingTargetingData:TargetActorBoneName": "This is the bone name of the target actor that the clambering target is on.",
    "ReplicatedClamberingTargetingData:TargetActorBoneName": "This is the bone name of the target actor that the clambering target is on.",
    "ReplicatedClamberingTargetingData_SimClient:TargetActorBoneName": "This is the bone name of the target actor that the clambering target is on.",
    "HurdleTargetingData:TargetActorBoneName": "This is the bone name of the target actor that the vaulting target is on.",
    "FortAscenderZipline:PlayerDestroyBuildingsOverlapExtents": "This is the box extents to use for destroying buildings while a player is using the ascender.",
    "FortAscenderZipline:HandleDestroyBuildingsOverlapExtents": "This is the box extents to use for destroying buildings while the handle is lowering.",
    "DynamicDestructionMeshInfo:StatMeshComp": "This is the building that is a neighbor to.",
    "DynamicDestructionNeighboringBuildings:Building": "This is the building that is a neighbor to.",
    "RiderComponent:LastRidable": "This is the cached previous ridable that we were riding.",
    "RidableComponent:LastRider": "This is the cached previous rider that was riding us.",
    "FortPlayspaceReplicatedState:CachedRepParamHelper": "This is the cached replicated param helper for this replicated state object.",
    "RepParamBaseArray:CachedRepParamHelperComponent": "This is the cached value of the owning rep param helper component.",
    "RiderComponent:RidingSprintCameraModeClass": "This is the camera mode to use when the owner is riding a ridable and sprinting. Only applies if the owner has a FortPlayerCameraBase camera manager.",
    "RidableComponent:SprintCameraModeClassOverride": "This is the camera mode to use when the owner is riding a ridable and sprinting. Only applies if the owner has a FortPlayerCameraBase camera manager. If set, overrides the one from the rider.",
    "RiderComponent:RidingCameraModeClass": "This is the camera mode to use when the owner is riding a ridable. Only applies if the owner has a FortPlayerCameraBase camera manager.",
    "RidableComponent:CameraModeClassOverride": "This is the camera mode to use when the owner is riding a ridable. Only applies if the owner has a FortPlayerCameraBase camera manager. If set, overrides the one from the rider.",
    "FortAscenderZipline:SimpleSplineCollisionRadius": "This is the capsule radius used for interaction when generating the capsule for the simple spline mesh collision.",
    "ClamberingTargetingDebugDrawData_CapsuleCast": "This is the class for defining a capsule cast clambering targeting debug draw.",
    "ClamberingTargetingDebugDrawData_Capsule": "This is the class for defining a capsule clambering targeting debug draw.",
    "ClamberingTargetingDebugDrawData_DirectionalArrow": "This is the class for defining a directional arrow clambering targeting debug draw.",
    "ClamberingTargetingDebugDrawData_Line": "This is the class for defining a line clambering targeting debug draw.",
    "ClamberingTargetingDebugDrawData_SphereCast": "This is the class for defining a sphere cast clambering targeting debug draw.",
    "ClamberingTargetingDebugDrawData_Sphere": "This is the class for defining a sphere clambering targeting debug draw.",
    "RiderComponent:RidablePropClass": "This is the class to use to create the prop that is attached to the ridable.  Defaults to USceneComponent in the constructor.",
    "RiderComponent:RiderPropClass": "This is the class to use to create the prop that rider is attached to.  Defaults to USceneComponent in the constructor.",
    "RidableComponent:RidableProp": "This is the client-only prop that is attached to the owner while riding.",
    "RiderComponent:RiderProp": "This is the client-only prop that is attached to the owner while riding.",
    "RiderComponent:ConnectorProp": "This is the client-only prop that is used to connect the rider and ridable prop.",
    "FortAthenaLivingWorldManager:SpecialActorCompassIconBrush": "This is the compass icon used to represent spawned actors",
    "DebugMinimapData:DebugCompassIconBrush": "This is the compass icon used to represent this bot",
    "BagelAreaSpecialActorData:SpecialActorCompassIconBrush": "This is the compass icon used to represent this drop if a special actor is within it",
    "BagelScoreMultiplierSpawnData:SpecialActorCompassIconBrush": "This is the compass icon used to represent this drop if a special actor is within it",
    "MashAreaSpecialActorData:SpecialActorCompassIconBrush": "This is the compass icon used to represent this drop if a special actor is within it",
    "MashScoreMultiplierSpawnData:SpecialActorCompassIconBrush": "This is the compass icon used to represent this drop if a special actor is within it",
    "FortAthenaMutator_SurvivalObjectiveData:SpecialActorCompassIconBrush": "This is the compass icon used to represent this if a special actor is set",
    "BuildingRift:SpecialActorCompassIconBrush": "This is the compass icon used to represent this rift",
    "AthenaSpecialActorComponent:SpecialActorCompassIconBrush": "This is the compass icon used to represent this special actor",
    "MontageVisibilityData:TagQuery": "This is the condition to use if a tag query rule is selected",
    "FortAIPawn:RepSharedAnimInfo": "This is the core replicated shared animation info from the ability system.",
    "HurdleTargetingData:FacingCornerLocation": "This is the corner that of the object we are looking at now",
    "ReplicatedHurdleTargetingData:FacingCornerLocation": "This is the corner that of the object we are looking at now",
    "FortGameModeZone:BluGloMiniMapIconBrushOverride": "This is the current best way to control how BluGlo appears in the minimap, outside its specification in a Game Data table",
    "ClamberingComponent:LocalClamberingState": "This is the current local clambering state.",
    "FortAscenderZipline:CurrentHandleLocation": "This is the current location for the handle",
    "FortAscenderZipline:PawnUsingHandle": "This is the current pawn that is using the handle of this ascender. -- Replicated property on client and server.",
    "FortPawn:CurrentWeapon": "This is the currently equipped weapon.  NOTE: This variable will be made protected or private soon.  Please use the getters and setters below.",
    "ClamberingComponent:LockedTargetingData": "This is the currently locked targeting data for clambering.",
    "ClamberingComponent:ReplicatedClamberingState": "This is the currently replicated clambering state. This should not be used directly, as it pushes it's value into LocalClamberingState on simulated clients.",
    "HurdleComponent:ReplicatedHurdleState": "This is the currently replicated hurdle state. This should not be used directly, as it pushes it's value into LocalActiveHurdleState on simulated clients.",
    "PlayspaceUser:LeafPlayspace": "This is the deepest Placespace that has jurisdiction over this user.\n(A user could be nested inside multiple Playspaces and this is the furthest in that chain)",
    "BuildingGameplayActorChaser:DetachedNetCullDistanceSquared": "This is the default, unattached cull/relevancy distance. When attached it matches the distance of the actor it's attached to",
    "ClamberingComponent:SynchedActionFailDelay": "This is the delay We allow the system to end synched action before we push it out",
    "ClamberingComponent:ServerFailDelay": "This is the delay on the server before failing clambering after the validation fails.  This allows the movement to start, but be aborted, better syncing the failure.",
    "PluginCheatMenuEntry:DisplayName": "This is the display name for the cheat entry.",
    "PluginCheatMenuEntry:SectionName": "This is the display name of the section that this cheat should be added to.",
    "FortProjectileMoveComp_Chase:ChaseTargetReachedDistance": "This is the distance at which the target is considered reached",
    "RiderComponent:PropAttachSeparation": "This is the distance between the rider and ridable props, in the local\n              space of the main attachment transform. This is used to apply the soft\n              and hard attachment bounds.  This is exposed for debugging purposes.",
    "ClamberingTargetingConfig_Ledge:ForwardCastDistance": "This is the distance for the initial capsule cast when finding a ledge to clamber on.",
    "ClamberingInputConfig:TargetInvalidateDistance": "This is the distance from the player, beyond which any currently valid clambering ledge locations will be invalidated.",
    "FortCreativeBudgetOverride:DrawCall": "This is the draw call cost of placing an instance of the ActorClass, this is added to existing entries",
    "EmoteActivationTrigger:Duration": "This is the duration for which this triggers tags will be applied. NOTE: If multiple triggers are activated, the\n    duration will be the maximum of all triggers hit, and all will be applied/removed at the same time.",
    "ClamberingInputConfig:QueuedInputWindow": "This is the duration in seconds that, upon hitting the start clambering input, the input will be queued for and the player will try to start clambering.",
    "ClamberingInputConfig:EnableInputDelay": "This is the duration in seconds to wait before allowing input after entering the targeting state.",
    "ClamberingInputConfig:HeldInputDuration": "This is the duration that the jump input must be held to be considered \"held\".  If this is zero, then you just need to tap the input to clamber.",
    "RiderComponent:RidingCameraModeBlendTime": "This is the duration to apply to the blend when going in/out of the riding camera mode.",
    "DecoPlacementState:End": "This is the end of the placement trace",
    "DecoPlacementState:FallbackLocation": "This is the failure state fallback position in front of the pawn",
    "HurdleTargetingData:FinalLandingPosition": "This is the final landing position of our vault, on vault over, it's the ground behind the object, on vault on, it's the top of the object",
    "ReplicatedHurdleTargetingData:FinalLandingPosition": "This is the final landing position of our vault, on vault over, it's the ground behind the object, on vault on, it's the top of the object",
    "EFortQuestSubtype.MilestoneCapper": "This is the final quest in a milestone chain.",
    "FortAscenderZipline:MeshForwardAxis": "This is the forward axis to use for the spline mesh.",
    "AthenaSpecialActorComponent:SpecialActorFullScreenMapIconBrush": "This is the fullscreen map icon used to represent this special actor. If empty, will fallback to SpecialActorMinimapIconBrush.",
    "RiderComponent:ConnectorPropTargetMeshParameterName": "This is the fx parameter name for setting target mesh on the connector fx.",
    "RiderComponent:ConnectorPropSourceMeshParameterName": "This is the fx parameter name for setting the source mesh on the connector fx.",
    "RiderComponent:RidingExitStartedEventTag": "This is the gameplay event tag to send to the rider owner when riding exit hold has started.",
    "RiderComponent:RidingExitStoppedEventTag": "This is the gameplay event tag to send to the rider owner when riding exit hold has stopped.",
    "CraftingObjectComponent:CraftingFailedTags": "This is the gameplay tags to send to the client when crafting has failed",
    "HurdleInputConfig:CastRadius": "This is the general cast radius for all check on the hurdle detection side",
    "HurdleInputConfigCache:CastRadius": "This is the general cast radius for all check on the hurdle detection side",
    "HurdleInputConfigCache:Phase1_Floor_MaxFloorSearchHeight": "This is the height of the search for a ground surface in front of the hurdle object, this is used later also for angle correction and needs to be longer",
    "ClamberingTargetingConfig_Ledge:FutureLedgeLaunchMaxHorizontalDetectionRange": "This is the horizontal distance above the targeted ledge to detect the next potential ledge.",
    "ClamberingInputConfig:AutoStartWallCheckHorizontalRange": "This is the horizontal range to apply when checks if the player is considered to be looking at the wall that is currently at the clamber location.",
    "HolsterRequestData:HolsterId": "This is the id for this holster request",
    "ReplicatedClamberingTargetingData:AnimationIndex": "This is the index of the animation to use for clambering with this target data.",
    "ReplicatedClamberingTargetingData_SimClient:AnimationIndex": "This is the index of the animation to use for clambering with this target data.",
    "FortAscenderZipline:InitialSplineEndLocation": "This is the initial end location of the spline when the ascender was first setup.",
    "ControllingRiderComponent:ControllingRiderInputComponent": "This is the input component used to capture input specific to the rider while controlling a ridable.",
    "RiderComponent:RiderInputComponent": "This is the input component used to capture input specific to the rider while riding a ridable.",
    "ClamberingComponent:InputConfig": "This is the input config for clambering.",
    "FortCreativeBudgetOverride:InstanceCost": "This is the instance cost of placing an instance of the ActorClass, this is added to existing entries",
    "FortHeldObjectComponent:GuideProjectile": "This is the instance of the current guide projectile that the thrown held object is attached to.",
    "FortPlayspace:ReplicatedState": "This is the instance of the replicated state associated with this playspace.",
    "GiveInventoryItemParams:ItemLevel": "This is the item level of the item to be given.",
    "MontageVisibilityData:Item": "This is the item to use along with the visibility rule",
    "FortAscenderZipline:SplineLength": "This is the length of the spline, and also the max raycast distance for determining the ground if the spline end location is automatically found.",
    "FortAscenderZipline:RotationLockedPawns": "This is the list of actors that we have SetRotatePawnToCamera(false) on.\n              This list is stored so that we can make sure we never get into a scenario\n              where we don't enable it again.",
    "DynamicDestructionMeshInfo:InstanceIndex": "This is the list of buildings that were neighboring to this one when dynamic destruction started.",
    "DynamicDestructionNeighboringBuildings:NeighboringBuildings": "This is the list of buildings that were neighboring to this one when dynamic destruction started.",
    "FortPlayerControllerSpectating:CameraModeCycle": "This is the list of camera modes the user can actually activate, in the order they will be cycled. This can be a subset of\nall available modes, since some modes can be disabled, in development, etc",
    "PluginCheatMenuEntry:ConsoleCommands": "This is the list of console commands to execute when this cheat is executed.",
    "FortPawn:CurrentWeaponList": "This is the list of currently owned weapons; Not replicated directly & only valid on autonomous proxies & the server; Newly added/equipped weapons are at the head of the list",
    "FortFXCustomizationComponent:ParticleParams": "This is the list of fx systems and param customizations to apply.",
    "CraftingIngredientUIData:Icons": "This is the list of icons that this entry should display when needing to display this entry.",
    "CraftingIngredientUIData:ItemDefs": "This is the list of item defs that this entry should display when needing to display this entry.",
    "PlayspaceComponent_SpatialActorTracker:SceneQueryObjectTypes": "This is the list of object types to check against when performing a scene query.\n              If this is empty, it will default to FCollisionObjectQueryParams::InitType::AllObjects.",
    "SpatialGameplayActorTrackerComponent:SceneQueryObjectTypes": "This is the list of object types to check against when performing a scene query.\n              If this is empty, it will default to FCollisionObjectQueryParams::InitType::AllObjects.",
    "DynamicDestructionEntry:ShadowProxyStatMeshComps": "This is the list of shadow proxy static meshes that will be hidden/shown by dynamic destruction, but NOT have fx or materials applied.",
    "GiveInventoryItemParams:StateValues": "This is the list of state values to set on the FFortItemEntry when giving this inventory item.",
    "DynamicDestructionEntry:ActiveStaticMeshEntries": "This is the list of static meshes that were actively used for dynamic destruction for this entry (i.e. have fx and/or materials applied).",
    "DynamicDestructionEntry:VisibiltyOnlyStatMeshComps": "This is the list of static meshes that will be hidden/shown by dynamic destruction, but NOT have fx or materials applied.",
    "EmoteActivationTrigger:TagsToApply": "This is the list of tags to apply when this trigger is activated",
    "FortAthenaMutator_DadBro:DadBroSpawnLocation": "This is the literal location DadBro will spawn at, and all players will teleport around",
    "RiderComponent:RidableLocationLastFrame": "This is the location of the ridable last frame, used to\n              track how far the player has traveled this riding session.",
    "ClamberingTargetingData:TargetActorComponentLocation": "This is the location of the target actor component when the targeting data was captured.",
    "HurdleTargetingData:TargetActorComponentLocation": "This is the location of the target actor component when the targeting data was captured.",
    "ClamberingTargetingData:TargetLocation": "This is the location of the target found for clambering.",
    "ReplicatedClamberingTargetingData:TargetLocation": "This is the location of the target found for clambering.",
    "ReplicatedClamberingTargetingData_SimClient:TargetLocation": "This is the location of the target found for clambering.",
    "HurdleTargetingData:TargetLocation": "This is the location of the target found for vaulting.",
    "ClamberingTargetingData:WallLocation": "This is the location of the wall encountered in the first phase of clamber targeting.",
    "ReplicatedClamberingTargetingData:WallLocation": "This is the location of the wall encountered in the first phase of clamber targeting.",
    "HurdleTargetingData:WallLocation": "This is the location of the wall encountered in the first phase of vaulting targeting.",
    "FortHeldObjectComponent:GuideAttachLocationOffset": "This is the location offset to apply to the held object when it is attached to a guide projectile.",
    "ClamberingTargetingData:SourceLocation": "This is the location that request for the clambering target data came from.",
    "ReplicatedClamberingTargetingData:SourceLocation": "This is the location that request for the clambering target data came from.",
    "HurdleTargetingData:SourceLocation": "This is the location that request for the vaulting target data came from.",
    "EClassRepNodeMapping": "This is the main enum we use to route actors to the right replication node. Each class maps to one enum.",
    "ClamberingComponent:ServerValidatePlayerMaxDistance": "This is the max distance allowed when validating where the player started clambering from on the client, to where the player was on the server.",
    "ClamberingComponent:ClamberStartMaxFallingDamageFraction": "This is the max falling damage fraction that the player can currently have while falling and still being able to start clambering.\n              This fraction is calculated based on how far the player has fallen by calling into GetPawnStats<FFortPawnStats>().GetFallingDamageFraction().",
    "ClamberingComponent:ClamberingMaxAnalyticsEvents": "This is the max number of analtyics events this component will capture per zone.",
    "DynamicXpCircuitBreaker:MaxXpBoosterMult": "This is the maximum booster multiplier the player can get when XP is awarded. This cap is necessary to minimize spiky XP rewards",
    "VkProjectLimitsDoc:IndividualFileSizeKb": "This is the maximum size individual files can be.",
    "VkProjectLimitsDoc:ProjectUploadSize": "This is the maximum size of the project in bytes, before it's cooked.",
    "FortAthenaHandleSoftDisableStateTreeTask:MaxTeleportToTryPerActor": "This is the maximum teleport tries we can do per actor. This is needed to avoid doing too many checks.",
    "DynamicDestructionConfig:MaterialTextureSizeMax": "This is the maximum texture size to use when rolling a random texture size value to set on the dynamic destruction material.",
    "FortAthenaLivingWorldManager:SpecialActorMinimapIconBrush": "This is the minimap icon used to represent spawned actors",
    "FortLevelSpawnActor:MinimapIconBrush": "This is the minimap icon used to represent this actor",
    "DebugMinimapData:DebugMinimapIconBrush": "This is the minimap icon used to represent this bot",
    "FortCharacterVehicle:SpecialActorMinimapIconBrush": "This is the minimap icon used to represent this drop if a special actor is within it",
    "FortAthenaMutator_SurvivalObjectiveData:SpecialActorMinimapIconBrush": "This is the minimap icon used to represent this if a special actor is set",
    "BagelAreaSpecialActorData:SpecialActorMinimapIconBrush": "This is the minimap icon used to represent this objective if a special actor is within it",
    "BagelScoreMultiplierSpawnData:SpecialActorMinimapIconBrush": "This is the minimap icon used to represent this objective if a special actor is within it",
    "MashAreaSpecialActorData:SpecialActorMinimapIconBrush": "This is the minimap icon used to represent this objective if a special actor is within it",
    "MashScoreMultiplierSpawnData:SpecialActorMinimapIconBrush": "This is the minimap icon used to represent this objective if a special actor is within it",
    "BuildingRift:SpecialActorMinimapIconBrush": "This is the minimap icon used to represent this rift",
    "AthenaSpecialActorComponent:SpecialActorMinimapIconBrush": "This is the minimap icon used to represent this special actor",
    "ClamberingTargetingConfig_Ledge:MinimumLedgeDepth": "This is the minimum depth that a ledge must be to be a valid target.",
    "FortAscenderZipline:DescendMinDistanceFromBottom": "This is the minimum distance the player must be from the bottom of the cable in order to start descending the ascender.",
    "ClamberingTargetingConfig_Ledge:MinimumLedgeHeight": "This is the minimum height from the ground that a ledge must be in order to be a valid clambering location.",
    "ClamberingTargetingConfig_Ledge:MinimumLedgeFallingHeight": "This is the minimum height from the ground while falling that a ledge must be in order to be a valid clambering location.",
    "ClamberingTargetingConfig_Ledge:MinimumLedgeHeightWater": "This is the minimum height from the water that a ledge must be in order to be a valid clambering location.",
    "ClamberingTargetingConfig_Ledge:MinimumLedgeFallingWaterHeight": "This is the minimum height from the water while falling that a ledge must be in order to be a valid clambering location.",
    "ClamberingTargetingConfig_Ledge:FallingSpeedThreshold": "This is the minimum speed at which the clamber targeting will use the falling height values instead of the default ones.",
    "DynamicDestructionConfig:MaterialTextureSizeMin": "This is the minimum texture size to use when rolling a random texture size value to set on the dynamic destruction material.",
    "ClamberingComponent:MoveConfig_Ledge": "This is the movement config for ledge clambering.",
    "ClamberingComponent:TargetingConfig_Ledge": "This is the movement config for ledge clambering.",
    "RidableComponent:RiderMovementNoiseOverride": "This is the movement noise generation override applied to the rider when this ridable is being ridden.",
    "ControllableRidableComponent:BackwardMoveSpeedMultiplier": "This is the multiplier to apply our max speed while the controlling rider is moving us backward. Should be between 0.0 and 1.0.",
    "ControllableRidableComponent:ForwardMoveSpeedMultiplier": "This is the multiplier to apply our max speed while the controlling rider is moving us forward. Should be between 0.0 and 1.0.",
    "ClamberingInputConfig:AutoStartWallCheckLookAtThresholdMultiplier": "This is the multiplier to apply to the look at threshold for auto starting clambering when the player is considered to be looking at the wall they are trying to clamber on.\n              This is also applied if the player is looking above the clamber location.",
    "PauseMobEncounterStateTreeTaskInstanceData:MobIdentifier": "This is the name of the mob encounter to pause",
    "ResumeMobEncounterStateTreeTaskInstanceData:MobIdentifier": "This is the name of the mob encounter to resume",
    "StartMobEncounterStateTreeTaskInstanceData:MobIdentifier": "This is the name of the mob encounter to start",
    "StopMobEncounterStateTreeTaskInstanceData:MobIdentifier": "This is the name of the mob encounter to stop",
    "EncounterGetVariableActorClassStateTreeTaskInstanceData:VariableIdentifier": "This is the name of the variable",
    "EncounterGetVariableBoolStateTreeTaskInstanceData:VariableIdentifier": "This is the name of the variable",
    "EncounterGetVariableFloatStateTreeTaskInstanceData:VariableIdentifier": "This is the name of the variable",
    "EncounterGetVariableGameplayTagStateTreeTaskInstanceData:VariableIdentifier": "This is the name of the variable",
    "EncounterGetVariableIntStateTreeTaskInstanceData:VariableIdentifier": "This is the name of the variable",
    "EncounterGetVariableItemDefinitionStateTreeTaskInstanceData:VariableIdentifier": "This is the name of the variable",
    "EncounterGetVariableLWMEncounterStateTreeTaskInstanceData:VariableIdentifier": "This is the name of the variable",
    "EncounterGetVariableTagQueryStateTreeTaskInstanceData:VariableIdentifier": "This is the name of the variable",
    "FortAthenaMutator_Papaya": "This is the native class for the base Papaya mutator",
    "GameHubBaseMutator": "This is the native class for the base game hub mutator",
    "FortCreativeBudgetOverride:NetworkCost": "This is the network cost of placing an instance of the ActorClass, this is added to existing entries",
    "DecoPlacementState:Normal": "This is the normal of the location we hit",
    "BuildingSMActorClassData:AnimatingSubObjects": "This is the number of \"boards\" / \"brick layers\" (used for the shader) for the animated material",
    "DigestedEvasiveManeuverSkillSettingsSpecialization:OddsToBeUsed": "This is the odds that the bot will be able to use this specialization. The dice is rolled once per bot. (0 = never, 1 = always)",
    "EvasiveManeuverSkillSettingsSpecialization:OddsToBeUsed": "This is the odds that the bot will be able to use this specialization. The dice is rolled once per bot. (0 = never, 1 = always)",
    "AICustomTargetConfiguration:Offset": "This is the offset that will be used to dynamically generate offsets (based on the AI's rotation) on runtime.",
    "FortWorldMarkerData:Owner": "This is the owner of this marker's player state, it could be null if we don't have this player state replicated to us yet.",
    "DynamicDestructionParamNamesConfig:NiagaraIsInstantDeath": "This is the param name for flag that indicates if the damage source was an instant death on the dynamic destruction niagara system.",
    "DynamicDestructionParamNamesConfig:NiagaraIsCurieFireDamage": "This is the param name for flag that indicates if the damage source was curie fire on the dynamic destruction niagara system.",
    "DynamicDestructionParamNamesConfig:NiagaraBounds": "This is the param name for the bounds on the dynamic destruction niagara system.",
    "DynamicDestructionParamNamesConfig:NiagaraDamageDealt": "This is the param name for the damage dealt on the dynamic destruction niagara system.",
    "DynamicDestructionParamNamesConfig:NiagaraDestroyedMesh": "This is the param name for the destroyed mesh on the dynamic destruction niagara system.",
    "DynamicDestructionParamNamesConfig:MaterialDestructionTimeStamp": "This is the param name for the destruction time stamp on the dynamic destruction material.",
    "DynamicDestructionParamNamesConfig:MaterialDissolveDuration": "This is the param name for the dissolve duration on the dynamic destruction material. (i.e. how long it takes for the dissolve/erosion material animation to complete)",
    "DynamicDestructionParamNamesConfig:NiagaraStaticMeshInstanceIndex": "This is the param name for the flag that indicates which instanced static mesh index was destroyed. Will be -1 if it's not an instanced static mesh.",
    "DynamicDestructionParamNamesConfig:MaterialHitLocation": "This is the param name for the hit location on the dynamic destruction material.",
    "DynamicDestructionParamNamesConfig:NiagaraHitLocation": "This is the param name for the hit location on the dynamic destruction niagara system.",
    "DynamicDestructionParamNamesConfig:MaterialHitVector": "This is the param name for the hit vector on the dynamic destruction material.",
    "DynamicDestructionParamNamesConfig:NiagaraHitVector": "This is the param name for the hit vector on the dynamic destruction niagara system.",
    "DynamicDestructionParamNamesConfig:MaterialOpacityMask": "This is the param name for the opacity mask on the dynamic destruction material.",
    "DynamicDestructionParamNamesConfig:MaterialResource": "This is the param name for the resource on the dynamic destruction material.",
    "DynamicDestructionParamNamesConfig:NiagaraResource": "This is the param name for the resource on the dynamic destruction niagara system.",
    "DynamicDestructionParamNamesConfig:NiagaraScale": "This is the param name for the scale on the dynamic destruction niagara system.",
    "DynamicDestructionParamNamesConfig:MaterialSphereRadius": "This is the param name for the sphere radius on the dynamic destruction material.",
    "DynamicDestructionParamNamesConfig:NiagaraRadius": "This is the param name for the sphere radius on the dynamic destruction niagara system.",
    "DynamicDestructionParamNamesConfig:MaterialTextureSize": "This is the param name for the texture size on the dynamic destruction material.",
    "DynamicDestructionParamNamesConfig:MaterialOpacityChannel": "This is the param name of the opacity channel on the dynamic destruction material.",
    "BuildingWeakSpot:ParentObject": "This is the parent object that will receive the damage",
    "RiderComponent:PendingFailedEmoteErrorTags": "This is the pending error tags to be sent to the client for a failed emote.",
    "CraftingObjectServerStateData:PendingPickupCraftingFormula": "This is the pending formula that will be crafted with contextual in world crafting.",
    "CraftingObjectServerStateData:PendingPickupCraftingItemEntry": "This is the pending pickup item entry that will be used with contextual in world crafting.\n              This will only be used if the players bar is full, and the item they are contextually crafting\n              with would have caused a swap.",
    "CraftingObjectServerStateData:PendingPickupCraftingItem": "This is the pending pickup that is currently traveling to the player for use with contextual in world crafting.",
    "DecoPlacementState:PreviousLocation": "This is the previous location we have had a deco at",
    "FortAscenderZipline:PreviousPawnUsingHandle": "This is the previous pawn that was using the handle of this ascender.",
    "FortPickupInteractOverrideComponent:ContextOverrideWidget": "This is the primary context override widget to apply when FillContextInfo modifies the context info (and returns true)",
    "PersistenceFrameworkSettings": "This is the primary root asset that defines the settings of the persistence system.",
    "FortPickupInteractOverrideComponent:Priority": "This is the priority of this interact override component relative to other override components",
    "FortHeldObjectComponent:GuideProjectileClass": "This is the projectile class to use when spawning a guide projectile to attach to when throwing.\n              If this is set, the projectile movement component will not be used, and the thrown held object\n              will instead attach to a projectile to handle the throw.",
    "ReplicatedClamberingTargetingData:TargetNormalPitchQuantized": "This is the quantized pitch of the surface normal of the target found for clambering.",
    "ReplicatedClamberingTargetingData:WallNormalPitchQuantized": "This is the quantized pitch of the surface normal of the wall encountered in the first phase of clamber targeting.",
    "ReplicatedClamberingTargetingData:TargetNormalYawQuantized": "This is the quantized yaw of the surface normal of the target found for clambering.",
    "ReplicatedClamberingTargetingData:WallNormalYawQuantized": "This is the quantized yaw of the surface normal of the wall encountered in the first phase of clamber targeting.",
    "ReplicatedClamberingTargetingData_SimClient:WallNormalYawQuantized": "This is the quantized yaw of the surface normal of the wall encountered in the first phase of clamber targeting.",
    "ClamberingTargetingConfig_Ledge:ForwardCastRadius": "This is the radius for the initial capsule cast when finding a ledge to clamber on.  This will start at the back of the players capsule based on the current 2d aim direction.",
    "ClamberingTargetingConfig_Ledge:DownwardSphereCastRadius": "This is the radius of the downward sphere cast to find the ledge to clamber on.",
    "ClamberingTargetingConfig_Ledge:ForwardSphereCastRadius": "This is the radius of the forward sphere cast used to determine if there is a wall above where it is going to check for a ledge",
    "FortVolumeTimeOfDayComponent:LocalTrackingOverlapRadius": "This is the radius of the sphere to use when\n              checking if the local view target or camera are\n              in this TOD volume.",
    "ClamberingInputConfig:ClamberActivationHorizontalRange": "This is the range (in 2d distance/XY Plane) that clambering can be activated when we have a valid location.",
    "ClamberingInputConfig:ClamberActivationVerticalRange": "This is the range (in vertical/z distance) that clambering can be activated when we have a valid location.",
    "FortAscenderZipline:HandleReturnSpeed": "This is the rate per second to use when returning the handle to the spline end location.",
    "FortAscenderZipline:CableDropSpeed": "This is the rate per second to use when the ground breaks below the bottom of the ascender spline, and the end lowers to the new ground.",
    "ActorComponent_ReplicatedParamHelper:ParamFloatsArray": "This is the replicated array of float rep params.",
    "ActorComponent_ReplicatedParamHelper:ParamBoolsArray": "This is the replicated array of integer rep params.",
    "ActorComponent_ReplicatedParamHelper:ParamIntegersArray": "This is the replicated array of integer rep params.",
    "ControllingRiderComponent:ReplicatedControlInputState": "This is the replicated control input state, which will be used to simulate anything from the input.",
    "FortPlayspace:ReplicatedStateClass": "This is the replicated state class to use to create the replicated state actor that will be associated with this playspace.",
    "FortZoneInstanceDetails": "This is the return value from the server which provides info about the zone from a ZoneInstanceId.\nNew fields should go in this struct not FFortZoneInstanceInfo",
    "FortPlayerController:AntiAddictionPlayTimeMultiplier": "This is the reward rate to apply to match rewards earned by this player (defaults to 1.0, but can be influenced by IOnlinePlayTimeLimit for minors in some countries)",
    "RiderComponent:ActiveRidable": "This is the ridable the we are currently riding.",
    "RidableComponent:ActiveRider": "This is the rider that is currently riding us",
    "FortHeldObjectComponent:GuideAttachRotationOffset": "This is the rotation offset to apply to the held object when it is attached to a guide projectile.",
    "ControllableRidableComponent:SidewaysMoveRotationOffset": "This is the rotation offset to apply while the controlling rider is pressing their left/right movement inputs.",
    "FortPawnComponent_GrindRail:BaseMaxLeanAngularSpeed": "This is the rotational speed in deg/s at which the character will be at maximum lean",
    "MontageVisibilityData:Rule": "This is the rule that defines how this visibility data affects visibility of the montage",
    "RiderComponent:RiderPropAttachHardBoundsTargetingScalar": "This is the scalar to apply to the attach hard bounds while the rider\n              is targeting/using ADS and the ridable is the view target.",
    "RiderComponent:RiderPropAttachSoftBoundsTargetingScalar": "This is the scalar to apply to the attach soft bounds while the rider\n              is targeting/using ADS and the ridable is the view target.",
    "RiderComponent:RiderPropAttachVerticalBufferTargetingScalar": "This is the scalar to apply to the attach vertical buffer while the rider\n              is targeting/using ADS and the ridable is the view target.",
    "FortPickupInteractOverrideComponent:SecondContextOverrideWidget": "This is the secondary context override widget to apply when FillContextInfo modifies the context info (and returns true)",
    "SimpleDestructiblePropGroup:DamageEventServerTimestamp": "This is the server time stamp of when the last damage event happened, used\nto control if fx should be played or not when updating mesh states.",
    "FortAscenderZipline:SimpleSplineMeshCollision": "This is the simple collision volume used for interaction when bUseComplexSplineCollision is false.",
    "FortCreativeBudgetOverride:SimulationCost": "This is the simulation cost of placing an instance of the ActorClass, this is added to existing entries",
    "DecoPlacementState:CreateBuildingLocation": "This is the snapped grid location",
    "DecoPlacementState:CreateBuildingRotation": "This is the snapped grid location",
    "DecoPlacementState:GridLocation": "This is the snapped grid location",
    "FortAscenderZipline:SplineTopAttachPointName": "This is the socket to attach the top of the spline/cable to.",
    "RidableComponent:ClientAttachGuideSocket": "This is the socket to line the player up to on the client.  This will be used\n              to update the relative location on the client based on the distance between\n              this socket and the main attach socket. This will be further offset by the rider\n              prop attach location, that way the rider prop location lines up with this\n              socket.",
    "ItemWrapSlotMetadata:PreviewListSortOrder": "This is the sort order to apply to this slot when the full list of previews is grabbed for all slots.",
    "HolsterRequestData:HolsterSource": "This is the source of the holster request.\nNOTE: This will be overridden if another source requests the same holster",
    "FortSpectatorCameraComponent:SpectatorController": "This is the spectating playercontroller that this component was created for.",
    "RiderComponent:SimulatedSmoothedRotationSpeed": "This is the speed at which the rotation on simulated clients is smoothed.",
    "ClamberingInputConfig:AutoStartWallCheckCastRadius": "This is the sphere cast radius to use when performing the auto start check to see if the player is aiming at a wall near the clamber location.",
    "FortGameplayCueNotify_BurstLatent": "This is the standard FortGameplay cue for burst events that are one offs, but need to do latent things like time lines or delays.",
    "DecoPlacementState:Start": "This is the start of the placement trace",
    "FortCosmeticDependentSwapData:ForcedSwapState": "This is the state that will be forced when doing the swap. Default is None, which indicates that it will toggle the state.",
    "FortAscenderZipline:SplineStaticMesh": "This is the static mesh to apply to the spline mesh for the cable.",
    "RepParamBoolArray": "This is the struct type for am array of bool rep params.",
    "RepParamFloatArray": "This is the struct type for am array of float rep params.",
    "RepParamIntegerArray": "This is the struct type for am array of integer rep params.",
    "ClamberingTargetingData:TargetNormal": "This is the surface normal of the target found for clambering.",
    "HurdleTargetingData:TargetNormal": "This is the surface normal of the target found for vaulting.",
    "ClamberingTargetingData:WallNormal": "This is the surface normal of the wall encountered in the first phase of clamber targeting.",
    "HurdleTargetingData:WallNormal": "This is the surface normal of the wall encountered in the first phase of vault targeting.",
    "EmoteActivationTrigger:EmoteTagQuery": "This is the tag query that needs to be matched against the emotes gameplay tags in order to activate this trigger.",
    "EmoteActivationTrigger:PlayerTagQuery": "This is the tag query that needs to be matched against the players gameplay tags in order to activate this trigger.",
    "FortAthenaZiplineBase:EnterZiplineTag": "This is the tag to trigger when entering this zipline.",
    "FortAthenaZiplineBase:ExitZiplineTag": "This is the tag to trigger when exiting this zipline.",
    "FortCreativeMoveTool:ProgressTimerCueTag": "This is the tag to trigger when sending a progress timer gameplay cue",
    "FortGameplayAbilityTagChangedAction:Tag": "This is the tag to watch for changes.",
    "FortProjectileMoveComp_Chase:InternalChaseTarget": "This is the target being chased",
    "FortAscenderZipline:TargetSplineEndLocation": "This is the target location that the spline end is currently moving towards.",
    "FortProjectileMoveComp_Chase:ChaseTargetSocket": "This is the target socket on the target being chased",
    "ClamberingComponent:ReplicatedTargetingData": "This is the targeting data that is replicated to all non-owning clients.",
    "FortSavedWeaponModSlot:WeaponModTemplateID": "This is the template id of weapon mod associated with this slot.",
    "FortHealthBarComponent:DisplayText": "This is the text that goes above the health bar",
    "ControllableRidableComponent:AbilityDisplayText": "This is the text to display for the input prompt for this ridables riding ability.",
    "MarshalledVFXRuntimeData:BasedOn": "This is the thing we want to attach to",
    "FortPlayerStateAthena:TeamMemberStateRepTime": "This is the time we last received a replicated value from TeamMemberState that is NOT None",
    "ClamberingComponent:InputEnabledTimer": "This is the timer that delays input being enabled for the clambering component.",
    "ClamberingMovementConfig_Ledge:Duration": "This is the total duration for the clambering movement.",
    "ClamberingTargetingData:Type": "This is the type of this clambering target data.",
    "ReplicatedClamberingTargetingData:Type": "This is the type of this clambering target data.",
    "ReplicatedClamberingTargetingData_SimClient:Type": "This is the type of this clambering target data.",
    "HurdleTargetingData:Type": "This is the type of this vaulting target data.",
    "ReplicatedHurdleTargetingData:Type": "This is the type of this vaulting target data.",
    "HUDWidgetRegistryEntry:DynamicUIUniqueID": "This is the unique ID used by the dynamic HUD to keep track of widgets, should only be use by single instance widgets",
    "ClamberingTargetingConfig_Ledge:FutureLedgeLaunchMaxVerticalDetectionRange": "This is the vertical distance above the targeted ledge to detect the next potential ledge.",
    "RidableComponent:RidablePropAttachRiderVerticalBuffer": "This is the vertical distance to keep the attached rider above the ridable prop on the client.\n              This takes into account the orientation of the socket the player is attached to.",
    "FortAscenderZipline:CableOffsetFromSplineEnd": "This is the vertical offset to apply to the cable mesh from where the spline ends.",
    "FortAscenderZipline:SplineOffsetFromGround": "This is the vertical offset to apply to the ground location when automatically determining the spline end location.  This is also where the handle will rest when not in use.",
    "FortAscenderZipline:SplineMesh": "This is the visual mesh for the spline (i.e. the cable/rope)",
    "FortWeaponModSlot:WeaponMod": "This is the weapon mod associated with this slot, and can be null for dynamic slots.",
    "FortAscenderZipline:YawRotationOffsetWhileSlidingDown": "This is the yaw rotation offset to apply to the player while they are sliding down the ascender.  Player rotation will be: Ascender Yaw Rotation + YawRotationOffset",
    "FortAscenderZipline:YawRotationOffsetWhileUsingHandle": "This is the yaw rotation offset to apply to the player while they are using the handle.  Player rotation will be: Ascender Yaw Rotation + YawRotationOffset",
    "DynamicBacchusHUDDirector:CurrentContextTags": "This is to cache the current context, we need this to process the new widgets",
    "RidableComponent:RidableTag": "This is to track which creature is being riden by the rider",
    "MinigamePlayer:EnteredMinigameTime": "This is used as the time the player left the minigame in the InactivePlayerArray (when the player entered the InactivePlayerArray)",
    "FortPlayerControllerAthena:SightWeatherCapRadius": "This is used by the above IsBlindShot function",
    "FortNevadaVehicle:bTractorBeamChargeStarted": "This is used for FX",
    "RiderComponent:bIsSprintingReplay": "This is used for client replay to replicate sprinting status for autonomous proxy as it is considered a simulated proxy when playing replay",
    "EForcedIntroTextDisplayState": "This is used just for UI purposes, doesn't dictate actual state",
    "EClamberingDebugTextAlign": "This is used to define text alignment for outputting clambering debug text.",
    "FortObjectiveFilter_Land:NearbyPlayersFilter": "This is used to filter by players that are close to the author when they land",
    "FortGameStateAthena:MinimapSafeZoneFinalPosBrush": "This is used to show players the final/ending spot of the storm.",
    "AthenaCarPlayerSlot:ReservingActor": "This is used to signify this seat has been reserved by this actor, used by AI",
    "FortVerbMessage_PlayerReceivedGameplayEvent": "This is used when a Gameplay Event is Received by a player.\n* Note: This verb is never actually broadcast, instead handling for it resides in\n* UFortControllerComponent_QuestGameplayEventListener::ListenForEventTag",
    "FortAthenaMutator_Fill:SpawnHeight": "This is where we spawn the lava actor. Should be at 0,0,Z",
    "EFrontEndCamera.MissionControl": "This is where you go to find fights",
    "AthenaDeveloperSettings:FrontEndSeasonOverride": "This lets you force a specific season definition for front-end UI preview purposes only!  (It doesn't affect what actual MCP commands will do)",
    "FortFeedbackEventData:bCanBeInterrupted": "This line can be interrupted",
    "FortFeedbackLine:bCanBeInterrupted": "This line can be interrupted",
    "FortSpokenLine:bCanBeInterrupted": "This line can be interrupted",
    "FortFeedbackEventData:bCanQue": "This line can wait until the current line is finished",
    "FortFeedbackLine:bCanQue": "This line can wait until the current line is finished",
    "FortSpokenLine:bCanQue": "This line can wait until the current line is finished",
    "FortGenericKeybindsFeedbackModule:InputActionsDisplayMap": "This map contains all the display text for Input Actions.\n              Key: Action Name\n              Value: Display Text",
    "FortGenericKeybindsFeedbackModule:GamepadActionsDisplayMap": "This map contains all the display text for gamepad actions.\n              Key: Action Name\n              Value: Display Text",
    "FortGenericKeybindsFeedbackModule:KeyActionsDisplayMap": "This map contains all the display text for keyboard/mouse actions.\n              Key: Action Name\n              Value: Display Text",
    "FortAthenaMutator_AdHocSquads:AdHocSquadDataMap": "This map holds the ad hoc squad data objects for the various squad ids.\n     The key (uint8) of the map is the squad id.",
    "BuildingGameplayActorLaserGrid:LaserOutletToBuildingAttachmentMap": "This map holds the relationship between the outlet indexes and the building actor that it is loosely attached to.\n     When the specified building actor is destroyed, the attached outlet is destroyed as well.\n     The key is the instance index of the outlet static mesh component and the value is the building actor that it is to attach to.",
    "FortAthenaMutator_EQSActorSpawner:AIPawnSpawnRequestIdToEQSActorSpawnerMap": "This map tracks the request id of an AIPawn spawn request to the UEQSActorSpawner created from the ActorSpawningDatas entry that requested its spawn.",
    "EDynamicBuildingPlacementType.CountsTowardsBounds": "This means it counts towards the final bounding box",
    "EXPEventPriorityType.Feed": "This means it only shows up in the feed before going to the XP bar",
    "EXPEventPriorityType.NearReticle": "This means it will show up in the near-reticle pop up before going to the feed",
    "RiderComponent:RidableControlRuntimeData": "This member will be updated by character movement and through replication we send it back to the character movement\n          but on simulated proxies so it can then be read by the anim instance on the simulated proxies",
    "FortAthenaMutator_Barrier:GameMsg_Objective_Destroyed_Enemy": "This message is sent when the enemy objective is destroyed",
    "FortAthenaMutator_Barrier:GameMsg_Objective_Destroyed_Friendly_NotGameOver": "This message is sent when the friendly objective is destroyed, and respawning is off (but the game can continue)",
    "FortAthenaMutator_Barrier:GameMsg_Objective_Destroyed_Friendly": "This message is sent when the friendly objective is destroyed, and the game is over",
    "TowhookParams:RopeGive": "This much is added to the rope length for rope force application",
    "SpecialEventRewindComponent:ReplicatedRecordingFPS": "This much time must pass before recording another frame for the Authority's replicated recording.\nWe pre-allocate our local recording's frame array with size MaxRecordingDuration * ReplicatedRecordingFPS.",
    "ClientAILODSettings:ScoreMultiplier": "This multiplier will be used for:\n- calculating the priority of a pawn (based on the distance from the PoV of the player)\n- ordering the preloading if we have capped the maximum number of assets to preload (UFortCustomizationsPreloader)",
    "SkyfireBackpackComponent:PlayCountUpTimeNative": "This must be called from BP because it needs access to the BP's PlayCountUp Timeline",
    "SkyfireBackpackComponent:UpdateBackpackTickFunction": "This must be called from BP because it uses the BP Audio Manger instead of C++",
    "FortAthenaMutator_OverrideDamageNumberInfo": "This mutator can be used to override the information of the damage number actors.\nDamage number actors are the in-world damage numbers that pop off of characters/buildings when they take damage.",
    "ERespawnAndSpectatePlayerRespawningState.None": "This mutator is not currently handling this player's respawn. They could be alive or not far enough in the respawn process for this system to start managing it",
    "FortAthenaMutator_FogSettings": "This mutator is used by the skydome device to override the TODManager fog settings, the overrided function FortGameStateAthena_ShouldOverrideLighting\nis called in UFortVolumeTimeOfDayComponent::UpdateLocalTODManager\nTODO: In the future this shouldn't be necesary and replaced by a helper since the only used code is 'GetFogDensityValue'",
    "FortAthenaMutator_GameStartCountdown": "This mutator is used to run a countdown before a particular LTM commences.\nThis mutator requires the GameStartCountdownWidget to be added to the UI Extension of the playlist for the 3.2.1.GO text animation on screen.",
    "FortAthenaMutator_CenterSafeZonesOnAircraft": "This mutator overrides the default safe zone location selection behavior so the safe zones can be\nindividually centered along the centerline of opposing aircraft. Safe zones locations are chosen\nnaively with this mutator (i.e. minimal rejection, no force distances) and safe zones that are not\ncentered along the center path will be placed randomly according to the RejectRadius and the\nRejectOuterDistance as defined by the normal safe zone configuration. Safe zones are only centered\nif there are two or more aircraft in the mode, otherwise normal safe zone calculation is applied.",
    "FortAthenaMutator_SpawnInVehicle": "This mutator places players into vehicles that are either spawned or are already being driven by a teammate.\nPlacing a player in a vehicle can either be done by manually calling the PlacePawnInVehicle or automatically when the pawn is loaded.\nIf the player is placed in a vehicle automatically, they will be put in a vehicle at the location they loaded in if no teammates are available.",
    "FortAthenaMutator_ItemPromotion": "This mutator provides convenience methods for migrating weapons between rarities based on a provided data table.",
    "FortAthenaMutator_BasicLimitedLives": "This mutator serves to be a basic lives manager. Other mutators can interface with this mutator so that they can influence lives.",
    "FortAthenaMutator_CustomRespawnLogic": "This mutator simply forwards the specified settings to CalculateRespawnData",
    "QuestItemDefinitionDesignerData:CoreName": "This name is used automatically to assist asset name generation. You can manually adjust asset names on a per-asset basis.",
    "BuildingGameplayActorChaser:SetMarkerPositionMessageFloatPropertyName": "This name is used to populate the property that sets the marker position value in the UI",
    "LockedQuestRuntimeData:UnlockNumber": "This number is used to represent time until a challenge unlocks or a count of challenges to complete until unlock.",
    "SpecialEventScriptMeshActor:EncryptionKeyDeliveryTimeOffset": "This number should match the value on the Special Event Script. It is typically 15 seconds.",
    "FortGravityGunHolder": "This object is used on the gravity gun to hold an object in world space.\nWe created this to nativize portions that could be more performant.",
    "EFortObjectiveRequirement.Optional": "This objective is optional and is not necessary to complete the mission",
    "EFortObjectiveRequirement.Required": "This objective is required to be successfully completed to complete the mission. Failing causes the mission to immediately fail",
    "EFortObjectiveRequirement.RequiredButCanFail": "This objective is required to complete the mission but it is allowed to fail. Failing does not cause the mission to fail",
    "FortObjectiveFilter_CurrencySpent:SpentAmountToCountForProgress": "This objective will only progress if the currency amount Spent is within this range if use spent amount is true",
    "FortObjectiveFilter_CurrencyCollected:CollectionSizeToCountForProgress": "This objective will only progress if the currency amount collected is within this range if use collection size is true",
    "ECatalogOfferType.DynamicBundle": "This offers price changes based on ownership of items contained in the bundle",
    "ECatalogOfferType.StaticPrice": "This offers price does not change based on owned items (but still may be affected by sales)",
    "UIStateSettings:WidgetStateComponentDefaultUnloadBehavior": "This option controls whether Widget State Components will by default wait for their widgets to animate out before continuing with a transition.\nIf you want to allow other widgets to start animating in while these widgets are still animating out, choose \"Do Not Wait For Animations\".\nThis setting can be overridden on individual Widget State Components.",
    "RespawnAndSpectateTargetData:bHiddenAndAutoSelectedFallback": "This option is not visible to the player and will be autoselected (requiring no player input) when there are no other valid options.",
    "EFortCustomPartType.Backpack": "This part is not used by Character Item Definitions, rather used mostly for Backpack Item Definitions or as part of a Gadget.\nWhen present, backpacks determine where loot appears to enter the player.",
    "EFortCustomPartType.MiscOrTail": "This part is primarily used for extra cosmetic fluff, or as the name suggests, tails.",
    "SpecialEventCursorPawnComponent:ReplicatedWorldLocation": "This pawn's latest cursor world location, which the owning client sent to the server,\nvia ServerOnWorldLocationChanged() and is replicated to all other clients for display purposes",
    "CobaltPlayerComponent": "This player component is attached to all player controllers in Cobalt to handle controller specific Cobalt behavior\nHelps handle Last Man Standing UI messages\nHelps handle Round Corner UI messages",
    "FortPlayerStartCreative:bUseAsIslandStart": "This player start can also be used as an island start",
    "FortTeamMemberInfo:BattlePassLevel": "This player's free/battle pass level",
    "CreativeGameStreamDeviceCoordinatorComponent": "This playspace singleton component attaches to the playspace that the game stream device is in. Once attached, game stream device\ncomponents that are setup to be queued to trigger on mini game end game are added to a queue handled by this component.\n\nThis playspace singleton component is instanced and destroyed and is not designed to persist outside of minigame play.",
    "FortGameplayEffectDeliveryActor:AsyncExplosionTargetingPreset": "This preset will be used to get targets when using the DoExplosionAsync node",
    "FortAIPawn:bCanSleep": "This property is set automatically when the AIType is set (for now).\nEventually it may be controlled in other ways instead, but for now it should NOT be exposed separately.",
    "AIAssignmentInfo:bSuppressGoalUpdates": "This property is used to be able to suppress goal updates on an AI without losing useful data about that AI's\ncurrent goal.",
    "CharmSlotMetadata:MatchCriteria": "This query is run on the GameplayTags container of the weapon definition",
    "ItemWrapSlotMetadata:MatchCriteria": "This query is run on the GameplayTags container of the weapon definition",
    "DestroyActorsStateTreeTaskInstanceData:ActorQuery": "This query is used to find actors to delete (empty query will result in nothing stripped)",
    "SpawnActorStateTreeTaskInstanceData:AnchorQuery": "This query is used to find an anchor to spawn actor at (an empty query means all anchors will be considered)",
    "EChallengeBundleQuestUnlockType.GrantWithBundle": "This quest is automatically granted when the bundle is granted",
    "EChallengeBundleQuestUnlockType.ChallengesCompletedToUnlock": "This quest is granted after completing X number of other challenges in the bundle",
    "EChallengeBundleQuestUnlockType.Manually": "This quest is granted manually",
    "EChallengeBundleQuestExpireType.WithSchedule": "This quest is removed when the schedule is removed",
    "EChallengeBundleQuestUnlockType.DaysFromEventStart": "This quest will be automatically granted after a specific number of days",
    "EChallengeBundleQuestUnlockType.RequiresBattlePass": "This quest will be automatically granted only if the user owns the battle pass",
    "EChallengeBundleQuestExpireType.DaysFromEventStart": "This quest will be removed after a specific number of days",
    "EFortQuestObjectiveStatEvent.ManuallyCompleted": "This quest will only progress when it is manually completed by another quest. Target is empty.",
    "FortObjectiveFilter_Acquire:ItemCount": "This range will let you set min / max counts of acquired items required to progress this objective\nNote: This is applied to each individual item acquired in this event, only items that pass this range will allow progress",
    "OpenedCardPack": "This represents a card pack that has been opened",
    "Card": "This represents a single card",
    "AthenaRewardItemReference": "This represents a single reward at any level, which is preferentially a reference to an item definition asset, but can also point to a template ID if necessary",
    "SafeZoneRoundData:LivingPlayers": "This represents both human and bot players, unless overridden by cheat.",
    "CreativeIslandMatchmakingSettings:JoinInProgressTeam": "This represents the 'Join Immediately' JOI Type",
    "FortAnimInput_Skydiving:DirectionLast": "This represents the last non-Center value in LocalAccelDir",
    "XPEventEntry:SimulatedXpSize": "This represents the size of the simulated xp.",
    "ControllerRequirementTestContext": "This requirement test context is passed to calls for 'is requirement met'. It allows\ndata to be injected into the call for more advanced requirement test cases. For example\n'other actor/controller' could be passed in to allow for a requirement which tests that a\ndesired state exists between the query controller, and that contained within the context.\ne.g. testing for a specific faction relationship between the two",
    "FortCosmeticRestrictionDefinition:SourceItemQuery": "This restriction is considered active if a character matching the query is present in the loadout",
    "EAthenaRewardItemType.NonExportedFakeReward": "This reward is purely for UI display and will not be exported to MCP (typically used in conjunction with hidden rewards to show a merged entry for several hidden rewards)",
    "EAthenaRewardItemType.GiftboxHiddenReward": "This reward will not be shown anywhere in the UI (note: this is not a 'mystery' item, it is not shown at all), THIS IS NOT PLACED IN GIFTBOXES!",
    "EAthenaRewardItemType.HiddenReward": "This reward will not be shown anywhere in the UI (note: this is not a 'mystery' item, it is not shown at all), THIS IS STILL PLACED IN GIFTBOXES!",
    "CrashpadStaticParams:PlacedLaunchMod": "This scales the final launch velocity for pawns",
    "FortScriptedAction:ClientEventTrigger": "This scripted action is triggered by a specific client event",
    "ECobaltStatusTeam.MAX": "This should always be last.",
    "EFortTeam.MAX": "This should always be last.",
    "FortBulkFindAndReplaceSearchTerms:Replace": "This should either be empty if this is being used to just find (not replace),\nor the same size as the Find array for find-and-replace (in which case every Find string will be replaced by\nthe string in the corresponding index in the Replace array.)",
    "SpatialGameplayActorTrackerComponent:SceneQueryShape": "This should match the shape of your overlap component if you use it. For example, only use Capsule if you have set your\noverlap component to also be a capsule shape.",
    "EFortDayPhasePrio.DailySummary": "This should probably go after regular gameplay events",
    "RidableComponent:RidablePropAttachSocket": "This socket is used to attach the client-only prop/mesh used while being ridden.\n              (i.e. The part of the saddle that sockets onto the thing that is being ridden)\n\n              As well, this socket is used to handle offsetting the attached rider vertically so\n              that it does not clip into the mesh incase it animates up/down too far.",
    "FortAthenaPatrolPathPointProvider:AssociatedPatrolPathSoftCopy": "This soft ptr is used as a temporary data structure to properly map from old ptrs to new before copying the new value into the ptr",
    "FortAthenaPatrolPoint:LocalGameplayBehaviorSoftCopy": "This soft ptr is used as a temporary data structure to properly map from old ptrs to new before copying the new value into the ptr",
    "BuildingGameplayActorLaserGrid:SoundOutletTransitionOn": "This sound is played at the location of the outlet instance that transitions on.",
    "BuildingGameplayActorLaserGrid:SoundLaserTransition": "This sound is played on the laser beam itself when there's a transition in the laser's state.",
    "BuildingGameplayActorLaserGrid:SoundLaserTransitionPrimaryOutlet": "This sound is played on the primary outlet of a laser connection whenever there's a transition in the laser's state.",
    "BuildingGameplayActorLaserGrid:SoundLaserTransitionSecondaryOutlet": "This sound is played on the secondary outlet of a laser connection whenever there's a transition in the laser's state.",
    "VideoWidgetConfig:bStartMTTransparent": "This starts the widget with the MediaTexture as transparent",
    "GiveInventoryItemParams_StateValue:Value": "This state value to set",
    "FortMissionStormShield:bAntiStormShield": "This storm shield reverses the behavior of the generic storm shield - inside of the storm shield is dangerous while outside the storm shield is safe",
    "FortRespawnLogicData_Teams": "This struct also contains data relevant to grouping with teams.",
    "QuestEditorCommonData": "This struct can be used to pass data along to quest editor sub widgets\nIn derived Editor Class you can extend this struct with custom data\nOverride BuildEditorCommonData to set custom data",
    "FortClientAnnouncementData_ZoneModifiers": "This struct contains all the data needed by the zone modifiers announcement",
    "FortClientAnnouncementData_Conversation": "This struct contains all the data needed to define the different functions of the conversation announcement",
    "MashAISpecialEncounterData": "This struct contains data about possible special AI encounters.\n    Horde Rush's (i.e. Mash) special AIs can either be a UFortDifficultyEncounterSettings (original Horde Rush used this) or use an AI Bot Pawn.\n    Please specify EITHER DifficultyEncounterSettings or AIBotSpawnerDataAssetId (and AIBotSpawnLocationQuery).",
    "DynamicDestructionMeshInfo": "This struct contains data defining a mesh to use for destruction, and can indicate which index of an instanced static mesh component to use.",
    "BuildingDestructionData": "This struct contains the data defining how a building was destroyed.",
    "DynamicDestructionDamageData": "This struct contains the data defining the data of the damage event that triggered the destruction.",
    "DynamicDestructionEntry": "This struct contains the data for a dynamic destruction entry.",
    "FortPawnSpinParams": "This struct contains the data needed for pawn spinning",
    "DynamicDestructionNeighboringBuildings": "This struct contains the data of neighboring buildings when a BuildingSMActor started dynamic destruction.",
    "GiveInventoryItemParams_StateValue": "This struct defines a state enum and state value pair to be set on a FFortItemEntry.",
    "FortGameplayAbilityTagChangedAction": "This struct defines a tag change action that will trigger based on the configured parameters.",
    "FortSparseClassDataVersionEntry": "This struct defines an entry for a processed version in FVersionedSparseClassData.",
    "ClamberingTargetingData": "This struct defines the data for the results clambering targeting.",
    "HurdleTargetingData": "This struct defines the data for the results hurdle targeting.",
    "ClamberingInputConfig": "This struct defines the input configuration for clambering.",
    "ClamberingMovementConfig_Ledge": "This struct defines the movement configuration for ledge clambering.",
    "GiveInventoryItemParams": "This struct defines the parameters that will be used when calling GiveItemToInventoryOwnerWithParams.",
    "SpawnProjectileParams": "This struct defines the parameters that will be used when calling SpawnProjectileWithParams.",
    "ReplicatedClamberingTargetingData": "This struct defines the replicated data for the results clambering targeting, which is sent from the owning client to the server.",
    "ReplicatedClamberingTargetingData_SimClient": "This struct defines the replicated data for the results clambering targeting, which is sent from the server to simulated clients.",
    "ClamberingTargetingConfig_Ledge": "This struct defines the targeting configuration for ledge clambering.",
    "FortPickupLocationData": "This struct holds all the info that needs to arrive all at once for a pickup to work",
    "LaserOutletConnection": "This struct holds information regarding a laser connection between a primary and secondary outlet.",
    "LaserGridConnectionEntry": "This struct holds information regarding a single laser grid connection.",
    "LaserGridOutletEntry": "This struct holds information regarding the state of an outlet.",
    "LaserGridPattern": "This struct holds the information regarding the various connections\n    and duration of a particular laser grid pattern.",
    "StateDrivenState": "This struct is for defining state specific data in a state driven actor.\n  Aside from the Transition, these properties drive the look of tf the actor when this state is active",
    "StateDrivenStateTransitions": "This struct is for transitions out of a state into another in a state driven actor.\n  The tag is used to specify which state to go to and the array of events determines the conditions that could cause the transition",
    "QuestEditorProfileData:AutoSelectProfileData": "This struct is optional data that if set will be used for editor to automatically select profile",
    "BuildingActorClassData": "This struct is the sparse class data for ABuildingActor.\nNOTE: This class and any subclasses each need to define\n             the TStructOpsTypeTraits struct below this class\n             to ensure the implementation of this in\n              FUserOptionDefinitionContainer still works properly.",
    "BuildingFloorActorClassData": "This struct is the sparse class data for ABuildingFloor.\nNOTE: This class and any subclasses each need to define\n             the TStructOpsTypeTraits struct below this class\n             to ensure the implementation of this in\n              FUserOptionDefinitionContainer still works properly.",
    "BuildingGameplayActorClassData": "This struct is the sparse class data for ABuildingGameplayActor.\nNOTE: This class and any subclasses each need to define\n             the TStructOpsTypeTraits struct below this class\n             to ensure the implementation of this in\n              FUserOptionDefinitionContainer still works properly.",
    "BuildingPillarActorClassData": "This struct is the sparse class data for ABuildingPillarCorner.\nNOTE: This class and any subclasses each need to define\n             the TStructOpsTypeTraits struct below this class\n             to ensure the implementation of this in\n              FUserOptionDefinitionContainer still works Pillarerly.",
    "BuildingPropActorClassData": "This struct is the sparse class data for ABuildingProp.\nNOTE: This class and any subclasses each need to define\n             the TStructOpsTypeTraits struct below this class\n             to ensure the implementation of this in\n              FUserOptionDefinitionContainer still works properly.",
    "BuildingPropCornerActorClassData": "This struct is the sparse class data for ABuildingPropCornerCorner.\nNOTE: This class and any subclasses each need to define\n             the TStructOpsTypeTraits struct below this class\n             to ensure the implementation of this in\n              FUserOptionDefinitionContainer still works PropCornererly.",
    "BuildingPropWallActorClassData": "This struct is the sparse class data for ABuildingPropWallWall.\nNOTE: This class and any subclasses each need to define\n             the TStructOpsTypeTraits struct below this class\n             to ensure the implementation of this in\n              FUserOptionDefinitionContainer still works PropWallerly.",
    "BuildingRoofActorClassData": "This struct is the sparse class data for ABuildingRoof.\nNOTE: This class and any subclasses each need to define\n             the TStructOpsTypeTraits struct below this class\n             to ensure the implementation of this in\n              FUserOptionDefinitionContainer still works properly.",
    "BuildingSMActorClassData": "This struct is the sparse class data for ABuildingSMActor.\nNOTE: This class and any subclasses each need to define\n             the TStructOpsTypeTraits struct below this class\n             to ensure the implementation of this in\n              FUserOptionDefinitionContainer still works properly.",
    "BuildingStairsActorClassData": "This struct is the sparse class data for ABuildingStairs.\nNOTE: This class and any subclasses each need to define\n             the TStructOpsTypeTraits struct below this class\n             to ensure the implementation of this in\n              FUserOptionDefinitionContainer still works properly.",
    "BuildingTimeOfDayLightsActorClassData": "This struct is the sparse class data for ABuildingTimeOfDayLights.\nNOTE: This class and any subclasses each need to define\n             the TStructOpsTypeTraits struct below this class\n             to ensure the implementation of this in\n              FUserOptionDefinitionContainer still works TimeOfDayLightserly.",
    "BuildingTrapActorClassData": "This struct is the sparse class data for ABuildingTrap.",
    "BuildingWallActorClassData": "This struct is the sparse class data for ABuildingWall.\nNOTE: This class and any subclasses each need to define\n             the TStructOpsTypeTraits struct below this class\n             to ensure the implementation of this in\n              FUserOptionDefinitionContainer still works properly.",
    "FortConstructorBASEActorClassData": "This struct is the sparse class data for AFortConstructorBASE.",
    "FortTrackActorClassData": "This struct is the sparse class data for AFortTrack.",
    "FortVersionedSparseClassData": "This struct is to be used in any sparse class data structs that want to support\n      versioning for moving data into the sparse class data more than once.  In order\n      to use this, sublcasses will need to define the following static const inline...\n\n      static const inline FFortSparseClassDataVersionInfo VersionInfo{TEXT(\"MyStructName\"), 1};\n\n      As well, you will need to add the function in the classes that use the versioned sparse class data...\n\n      FORTNITEGAME_API virtual void MoveDataToSparseClassDataStructCustom(bool bIsSaving = false) const;\n\n      This function will need to be called in MoveDataToSparseClassDataStruct, passing in false. And also\n      called in PreSave, passing in true.\n\n      Each time a child class adds more data, it will need to increase the version number in the VersionInfo.\n      For an example of how to use this, please look at ABuildingActor and FBuildingActorClassData, along with\n      all of it's subclasses.  For further questions, please reach out to @andrew.thayer.",
    "SafeZoneRoute": "This struct is to hold the data we'll use for our SafeZone routes.",
    "ChangeTeamInfo": "This struct is used by the Kismet library function Change Team\n      to display a message in the kill feed",
    "CompositeBool": "This struct is used for cases where multiple sources want to change a bool, but not override the value of other sources.\nFor example...\n               1. Default value is false --    current bool value: false\n               2. Object A sets it to true --  current bool value: true\n               3. Object B sets it to true --  current bool value: true\n               4. Object A sets it to false -- current bool value: true\n               5. Object B sets it to false -- current bool value: false",
    "BuildingGameplayActorChaser:AttachedMessageType": "This struct is used to inform the UI that this chaser attached to its target",
    "BuildingGameplayActorChaser:DetachedMessageType": "This struct is used to inform the UI that this chaser detached from its target",
    "BuildingGameplayActorChaser:TargetDamagedMessageType": "This struct is used to inform the UI that this chaser has damaged its target",
    "VkContentFilter": "This struct is used to select which artifact (and via indirection which binaries) to use for a particular VK module",
    "BuildingGameplayActorChaser:SetMarkerPositionMessageType": "This struct is used to set the marker position in the UI",
    "UIStateChartContextEntryOverride": "This struct is used to store an optional player-specific override value for this entry,\nas well as a delegate for listeners that are interested in player-relevant changes to this entry.",
    "VkModuleBinaries": "This struct represents the specific binary objects (as URLs) which make up a VK module on a particular platform+build",
    "FortCreativeLinearMoverRotationMovementData": "This struct stores all of the data needed for the server / client to execute / simulate rotation movement of the target building actor.",
    "FortCreativeLinearMoverTranslationMovementData": "This struct stores all the data needed for the server / client to execute / simulate translation movement of the target building actor.",
    "FortSearchBounceData": "This struct stores the container's replicated bounce data",
    "ClamberingTargetingConfig_Ledge_CachedContextualValues": "This struct stores values that need to be cached for parallel targeting due to data registry Scalable Float values only being able to be resolved\n       with context on the game thread",
    "PersistenceFrameworkWorldPartInfo": "This structre stores the world tile identification information.\nIts used as a setting for create or find the world root area (FortPersistenceFrameworkRootAreaWorldPart)\nand its used for passing this information as single object",
    "FortEvenlySizedSegment": "This structure contains a list of evenly sized segments, meaning their end points are roughly \"evenly spaced\" along the trail constituted by the PathToDestination points.\nIt also contains the necessary info for calculating and setting up the associated spline mesh and its associated collision.\nThis is not replicated.  It is written to be initialized and kept only on the client as the client received points in PathToDestination from the server.\nWhile the points that make up the spline are meant to be static, there is some handling of interpolation of the end point, growth alphas, etc.\n\nThis structure can also be thought of as representing a section of the spline the length of EvenlySpacedPointsDistance (defined in AFortSplineGroundPath)",
    "FortBulletPatternEntryData": "This structure contains data pertaining to a single bullet in a weapon's spread pattern.",
    "CardPackOffer": "This structure defines a Fortnite store offer to the blueprints",
    "PersistenceFrameworkPlayerInfo": "This structure encapsulates player & its account information.\nThis is used as setting in creation of root area player root are player (UFortPersistenceFrameworkRootAreaWorldForPlayer) & root are 'world for player' UFortPersistenceFrameworkRootAreaWorldForPlayer",
    "FortAthenaCompassIcon": "This structure holds information regarding a compass icon.",
    "MarkerUtilitiesMapIcon": "This structure holds information regarding a map icon.",
    "VkArtifactOption": "This structure is used to select an ArtifactId based on matching Role and Filter.",
    "FortFeedbackAction": "This structure represents the options available for an action",
    "PersistenceFrameworkWorldForPlayerInfo": "This structure stores the identity of a world and a player account.\nThis is used as a setting in creating the root area for 'world for player'. UFortPersistenceFrameworkRootAreaWorldForPlayer\nThis is world data exclusive to one player.",
    "CreativeDeviceSubscription:bIsEvent": "This subscription is an event if true; function if false",
    "OnlineDiscoverySurfaceDevelopmentLinkCodes:DevelopmentLinkCodes": "This surface's development link codes.",
    "EPhaseCommit": "This system allows the ability to swap between N-phase commit protocols easily\nSee: https:en.wikipedia.org/wiki/Two-phase_commit_protocol\nSee: https:en.wikipedia.org/wiki/Three-phase_commit_protocol",
    "TargetDataEntry:FoundationTag": "This tag is used to identify what foundations we use for targets",
    "BuildingGameplayActorChaser:AttachedMessageTag": "This tag is used to inform the UI that this chaser attached to its target",
    "BuildingGameplayActorChaser:DetachedMessageTag": "This tag is used to inform the UI that this chaser detached from its target",
    "BuildingGameplayActorChaser:TargetDamagedMessageTag": "This tag is used to inform the UI that this chaser has damaged its target",
    "BuildingGameplayActorChaser:SetMarkerPositionMessageTag": "This tag is used to set the marker position in the UI",
    "EncounterGetKillCountStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "EncounterGetRemainingCountStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "LWMEncounterAddGameplayEffectStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "LWMEncounterAdvanceStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "LWMEncounterAlertLevelTransitionStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "LWMEncounterAssignPointProvidersStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "LWMEncounterKillCountTransitionStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "LWMEncounterPauseStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "LWMEncounterRemainingCountTransitionStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "LWMEncounterResumeStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "LWMEncounterSetAlertLevelStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "LWMEncounterSetStageStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "LWMEncounterStopStateTreeTaskInstanceData:EncounterQuery": "This tag query can be used to only affect some encounter instances (empty means all)",
    "LWMEncounterRemoveGameplayEffectStateTreeTaskInstanceData:GameplayEffectQuery": "This tag query identifies which previously added gameplay effects you want to remove",
    "LWMEncounterStartStateTreeTaskInstanceData:AnchorPointTagQuery": "This tag query is used to find anchor points in the corresponding EncounterGameplayVolume\nIf using valid leash radii, the anchor is considered the leash actor to follow for the AI Bot Controller controlling the mob.",
    "TempestTornadoForcesComponent:DamageSetByCallerTag": "This tag should match the SetByCaller tag in the applied GE",
    "AddGameplayCueStateTreeTask": "This task is used to add a gameplay cue to the context actor\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterAddGameplayEffectStateTreeTask": "This task is used to add gameplayeffects to mobs belonging to an encounter instance\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterAdvanceStateTreeTask": "This task is used to advance the stage of an encounter instance\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterAssignPointProvidersStateTreeTask": "This task is used to assign point providers for an existing LWM Encounter.\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "DestroyActorsStateTreeTask": "This task is used to destroy actors matching the given tag query\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterAlertLevelTransitionStateTreeTask": "This task is used to detect when a certain alert level threshold is reached within the given LWM Instance mobs\nOnce reached, the given transition is initiated\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterKillCountTransitionStateTreeTask": "This task is used to detect when a certain kill count is reached for mobs spawned by the given encounter instance\nOnce reached, the given transition is initiated\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterRemainingCountTransitionStateTreeTask": "This task is used to detect when the remaining mob count is reached for the given encounter instance\nOnce reached, the given transition is initiated\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "EnableEncounterPointProvidersStateTreeTask": "This task is used to enable/disable encounter point providers\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterPauseStateTreeTask": "This task is used to pause an encounter instance\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterRemoveGameplayEffectStateTreeTask": "This task is used to remove gameplayeffects to mobs belonging to an encounter\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterResumeStateTreeTask": "This task is used to resume an encounter instance\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterSetAlertLevelStateTreeTask": "This task is used to set alert level for mobs belonging to an encounter instance\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterSetStageStateTreeTask": "This task is used to set the stage of an encounter instance\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterStartStateTreeTask": "This task is used to spawn a LWM Encounter.  It ends the encounter when the task exits\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "SpawnActorStateTreeTask": "This task is used to spawn an actor at a chosen anchor\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "LWMEncounterStopStateTreeTask": "This task is used to stop an encounter instance\n\nNote: as most of the tasks, this will keep running forever until a transition happens.",
    "SBMusicalTargetsTimerComponent:HalfTimeTempoThreshold": "This tempo or faster will play the cue approach progress half as fast. 0 will disable the threshold.",
    "SBMusicalTargetsTimerComponent:DoubleTimeTempoThreshold": "This tempo or slower will play the cue approach progress twice as fast. 0 will disable the threshold.",
    "FortAthenaMutator_Wax:ShowTextOnEnteringSpecialBuilding": "This text is used in some future user interface, when players enter the special building.",
    "CraftingIngredientUIData:IngredientTags": "This the key for this entry, which maps from a set of tags to this entry.  NOTE: The order of the tags here MUST match the order in the crafting recipes.",
    "FortGameplayAbilityTagChangedAction:Trigger": "This the trigger that will cause this action to execute.",
    "FortPickup:StartSimulatingTime": "This time is set when the pickup starts simulating (i.e. moving) and is reset when it stops",
    "FortAthenaAIBotController:RevivePlayerPawnToken": "This token is used/reserved by the PlayerPawn than trying to revive this Bot, to be sure to get just one reviver in same time (Optional)",
    "RufusWeeklyMapUpdaterInfo": "This type is used to hold map images (textures) to use for different weeks of release",
    "ERedeemCodeFailureReason.FailedToGetItem": "This user has access",
    "FortAimedObjectConfig:CameraOffset": "This value defines how to adjust the position of the aimed object in camera space.  Basically you can use it to\nadjust the framing of the aimed object on screen.\nNOTE: This value can be ignored in certain circumstances.  See ThirdPersonToFirstPersonUpdateFunction's\n\"Allow Optic To Override Eye Relief\" property for more details.",
    "FortGameUserSettings:LastPlaylistInfoVersionViewedBR": "This value is not serialized, it is only used at runtime to prevent regenerating the playlist cache.",
    "CaptureComponent:OldSmoothedProgress": "This value is updated in OnRep_CaptureProgress. Represents the last progress before replication",
    "CaptureComponent:SmoothProgressTimer": "This value is updated in SyncClientProgress. Represents the current in the client",
    "CaptureComponent:SmoothedProgress": "This value is updated in SyncClientProgress. Represents the progress in the client",
    "FortPlayerConversationComponent:RidingOnActorRangeMultiplierSquared": "This value multiplies the AbortConversationRangeSquared when the player is riding an animal to prevent unintentional conversation exit",
    "FortMeatballVehicle": "This vehicle is a 4 player missile shooting boat with an attached water skier",
    "FortHoagieVehicle": "This vehicle is a five-passenger (including driver) helicopter.",
    "FortSparseClassDataVersionEntry:Version": "This version corresponds to the highest processed version for an entry in FVersionedSparseClassData.",
    "FortLevelUpDataV2:XP": "This was the old property name (represented total XP) TODO: remove this when the build has been pushed out for a while",
    "EFortUIFeature.ShowAthenaItemShop": "This widget has been deleted - TODO: Remove?",
    "EFortItemCooldownType.DirectProgressUpdate": "This widget's cooldown is set directly via the gameplay message router system",
    "CreativeMultiSelectedActorsInfo": "This will allow us to keep tracking of the Actors that are being selected.\nMulti-Selected Actor will have a bigger culling distance than its default value.",
    "FortObjectiveFilter_Build:ResourcesSpent": "This will allow you to set min / max resources spent needed to progress this objective",
    "FortObjectiveFilter_BuildingEdit:CurrentBuildingLevel": "This will allow you to set min / max values for building level to count for progressing this objective",
    "FortObjectiveFilter_PlacementUpdate:CurrentPlacement": "This will be the actual current placement of the player, and will take team placement into account",
    "FortObjectiveFilter_PlacementUpdate:PlayerThatSetPlacement": "This will be the player that died that triggered this placement update.",
    "ERollModifierOperation.Zero": "This will be used to zero out an entries weight,  regardless of other modifiers. Used to completely disable entries based on some state.",
    "FortMovementComp_Character:bComputeWaterSplineDataOnSimulatedMovement": "This will compute the Water Spline data even on simulated movement. Be careful as this has an impact on perf on client",
    "FortObjectiveFilter_VehicleBase:Passengers": "This will contain combined tags from all passengers in the vehicle when the event fires",
    "FortObjectiveFilter_Repair:ActorRepaired": "This will contain tags for the actor that was repaired",
    "FortObjectiveFilter_Repair:RepairType": "This will contain tags for the item used in this repair event",
    "FortObjectiveFilter_ConvertNPC:ConvertedNPC": "This will contain tags from the NPC that was converted",
    "FortObjectiveFilter_AugmentSelected:Augment": "This will contain tags from the augment that was selected for attachment.",
    "FortObjectiveFilter_Build:Building": "This will contain tags from the building object placed",
    "FortObjectiveFilter_BuildingRepair:Building": "This will contain tags from the building repaired",
    "FortObjectiveFilter_BuildingEdit:Building": "This will contain tags from the building that was edited",
    "FortObjectiveFilter_DestroyBuilding:DamageSource": "This will contain tags from the damage source that was responsible for destroying the building",
    "FortObjectiveFilter_DestroyBuilding:DestroyedBuilding": "This will contain tags from the destroyed building.",
    "FortObjectiveFilter_AddToInventory:Item": "This will contain tags from the item that was added to inventory",
    "FortObjectiveFilter_AddToCollection:ItemDiscovered": "This will contain tags from the item that was added to the collection",
    "FortObjectiveFilter_InitiatedNPCConversation:ConversingNPC": "This will contain tags from the npc that is being talked to.",
    "FortObjectiveFilter_UsedNPCService:NPC": "This will contain tags from the npc that is providing the service",
    "FortObjectiveFilter_TurnInQuest:NPC": "This will contain tags from the npc that the quest was turned in to.",
    "FortObjectiveFilter_SpentBarsOnNPCService:NPC": "This will contain tags from the npc vendor that bars were given to",
    "FortObjectiveFilter_Interact:Target": "This will contain tags from the object being interacted with",
    "FortObjectiveFilter_HealingBase:HealingType": "This will contain tags from the object used to cause the healing",
    "FortObjectiveFilter_VehicleBase:Driver": "This will contain tags from the pawn driving the vehicle in this event",
    "FortObjectiveFilter_RevealedPawnDisguise:RevealedPawn": "This will contain tags from the pawn that was revealed",
    "FortObjectiveFilter_RevivePlayer:RevivedPlayer": "This will contain tags from the player being revived",
    "FortObjectiveFilter_RevivedFromDBNO:RevivingPlayer": "This will contain tags from the player that revived the author",
    "FortObjectiveFilter_FinishDownedPlayer:DownedPlayer": "This will contain tags from the player that was downed",
    "FortObjectiveFilter_DamageTaken:DamageSource": "This will contain tags from the source of the damage (Usually the actor responsible for damaging the player)",
    "FortObjectiveFilter_HealingReceived:HealSource": "This will contain tags from the source of the healing",
    "FortObjectiveFilter_GainShields:ShieldGainSource": "This will contain tags from the source of the shields gained",
    "FortObjectiveFilter_HealingDone:SubjectHealed": "This will contain tags from the subject that was healed",
    "FortObjectiveFilter_GainShields:ShieldGainType": "This will contain tags from the type of shield gain (item used to gain shields)",
    "FortObjectiveFilter_VehicleBase:Vehicle": "This will contain tags from the vehicle being used in this event",
    "FortObjectiveFilter_DamageTaken:DamageType": "This will contain tags representing the Type of damage done, and the weapon used to do the damage",
    "FortObjectiveFilter_Visit:Location": "This will contain tags specifying the location that is being visited in this event",
    "FortObjectiveFilter_SpentBarsOnNPCService:ServiceType": "This will contain tags specifying the type of service that bars were spent on",
    "FortObjectiveFilter_VehicleMod:VehicleMod": "This will contain tags specifying what modification was put on the vehicle",
    "FortObjectiveFilter_MissionTimeElapsed:MissionTags": "This will contain tags that specify the specific mission this fired for",
    "FortObjectiveFilter_UsedNPCService:ServiceType": "This will contain tags that specify the type of npc service that was used",
    "FortObjectiveFilter_DiscoverPOI:POITags": "This will contain the POI tags from the location that was discovered",
    "FortObjectiveFilter_InitiatedNPCConversation:ServiceProviderIDTag": "This will contain the service type tag of the npc being conversed with.",
    "FortObjectiveFilter_VehiclePartDisabled:VehiclePart": "This will contain the specific Vehicle.Part tags to specify what parts were disabled in this event",
    "FortObjectiveFilter_Acquire:AcquireSource": "This will filter any Acquire verbs who come from/don't come from particular sources\nE.g. You can filter rewards from quests by adding the Owned Gameplay Tags of those quests here with a \"No Tags Match\" query",
    "FortObjectiveFilter_Acquire:ItemAcquired": "This will filter individually against each item acquired in this event\nIf ANY item passes this filter the objective will be able to progress so long as the rest of the filter passes as well.",
    "FortAthenaLivingWorldEventDataActorSpawnDescription:bSpawnAroundDefaultPoint": "This will force actors to spawn around the first valid generated point of the event. It can be used with SpawnAroundEnvironmentQuery to run an EQS around the generated point.",
    "EDBNOMutatorType.Off": "This will now be considered 'Classic'",
    "EClamberingActivationMode.ClientPreference": "This will pull the activation mode from the client settings",
    "FortAthenaLivingWorldPointProvidersEnabler:LinkedPointProviders": "Those point providers will be enabled based on the provided configurations. Note: MUST BE A \"START NOT ENABLED\" POINT PROVIDER.",
    "FortBotThreatActorInfo:ThreatActor": "Threat Actor (Projectile/Trap/etc)",
    "EFortThreatDeactivationType": "Threat deactivation type",
    "FortGameStateZone:ThreatParticleActor": "Threat particle actor",
    "FortThreatVisualsManager:StormWindDirectionAdditionalAngle": "ThreatVisuals handles creating 'storm winds' for encounters; these winds cover the area from the far side of the threat clouds to the opposite side of the encounter goals.  This angle is the value in degrees to be added on either side of the area that should be considered a cardinal direction when trying to find clouds in those directions.  We need additional angle because the clouds are on a grid formed over where the rifts form, and those are already random and may be near the edge of the relevant cone.",
    "FortThreatVisualsManager:StormWindActiveMagnitude": "ThreatVisuals handles creating 'storm winds' for encounters; these winds cover the area from the far side of the threat clouds to the opposite side of the encounter goals.  This magnitude is the percentage strength (0-1) of the wind in the storm area when the clouds are active.",
    "FortThreatVisualsManager:StormWindInactiveMagnitude": "ThreatVisuals handles creating 'storm winds' for encounters; these winds cover the area from the far side of the threat clouds to the opposite side of the encounter goals.  This magnitude is the percentage strength (0-1) of the wind in the storm area when the clouds are inactive.",
    "FortThreatVisualsManager:StormWindFalloffRadius": "ThreatVisuals handles creating 'storm winds' for encounters; these winds cover the area from the far side of the threat clouds to the opposite side of the encounter goals.  This radius is the distance around the outer perimeter of the storm wind over which the wind falls off from full wind to nothing.",
    "FortThreatVisualsManager:StormWindGoalRadius": "ThreatVisuals handles creating 'storm winds' for encounters; these winds cover the area from the far side of the threat clouds to the opposite side of the encounter goals.  This radius is the extra buffer around the primary encounter goal actors that needs to be guaranteed to be covered in wind.",
    "FortThreatVisualsManager:StormWindCloudRadius": "ThreatVisuals handles creating 'storm winds' for encounters; these winds cover the area from the far side of the threat clouds to the opposite side of the encounter goals.  This radius is the extra buffer around the storm clouds that needs to be guaranteed to be covered in wind.",
    "FortThreatVisualsManager:StormWindDesiredDeltaBlendTime": "ThreatVisuals handles creating 'storm winds' for encounters; these winds cover the area from the far side of the threat clouds to the opposite side of the encounter goals.  This time is time in seconds over which the wind will change whenever a change occurs (such as when clouds form, when they activate or deactivate, and when they die.  NOTE: This time is just a suggested time.  If the wind covers too large of an area, it may take more time to change in order to keep performance reasonable.",
    "FortGameState:UnplayableHitchThresholdInMs": "Threshold after which a hitch is considered unplayable (hitch must be >= the threshold)",
    "FortGameState:MaxUnplayableHitchesToTolerate": "Threshold after which we consider that the server is unplayable and report that.",
    "FortGyroV2Settings:GyroV2AccelMaxThreshold": "Threshold for full acceleration (degrees per second)",
    "FortGyroV2Settings:GyroV2AccelMinThreshold": "Threshold for no acceleration (degrees per second)",
    "RidableControlParams:SprintStopSpeedThreshold": "Threshold under which the sprint is stopped in cm/s",
    "FortGameMode:CPUTimeBuckets": "Thresholds for the cpu time buckets (in milliseconds) of the histogram",
    "EFortCombatThresholds": "Thresholds for the manager to inform kismet about",
    "FortGameMode:CPUPercentPerCoreBuckets": "Thresholds for the per-cpu utilization (0-1) buckets of the histogram",
    "FortHeldObjectComponent:HeldObjectThrownData": "Throw setup data defined on the component, like max speed and gravity scale",
    "MusicLength:Tick": "Tick",
    "FortCurieFXManagerTickFunction": "Tick function for the FX manager",
    "FortCurieFirePropagationManagerTickFunction": "Tick function for the Fire Propagation manager",
    "FortCurieVoxelFirePropagationManagerTickFunction": "Tick function for the Voxel Fire Propagation manager",
    "CursorSettings:lookAheadTicks": "Ticks in the future (negative for the past)",
    "EFortScriptedActionSource.Quest": "Tied to a specific quest, which will be in SourceItem. SourceData will be the objective row",
    "EFortAlteration.HeroSpecializationTier1Slot": "Tier 1 hero specialization",
    "EFortAlteration.HeroSpecializationTier2Slot": "Tier 2 hero specialization",
    "EFortAlteration.HeroSpecializationTier3Slot": "Tier 3 hero specialization",
    "EFortAlteration.HeroSpecializationTier4Slot": "Tier 4 hero specialization",
    "EFortAlteration.HeroSpecializationTier5Slot": "Tier 5 hero specialization",
    "HeroSpecializationDesignerData:TierFourSlots": "Tier Four spec slots for hero",
    "ActiveTieredCollectionLayout:Layout": "Tier collection layout",
    "HeroSpecializationDesignerData:TierOneSlots": "Tier one spec slots for hero",
    "HeroSpecializationDesignerData:TierThreeSlots": "Tier three spec slots for hero",
    "HeroSpecializationDesignerData:TierTwoSlots": "Tier two spec slots for hero",
    "FortHabaneroTier:TierType": "Tier type associated with this tier",
    "TieredWaveCollectionLootSet:LootSetData": "Tiered Loot Data",
    "FortGyroV2Settings:GyroV2Tightening": "Tightening for gyro aiming input",
    "FortWorldManager:TileManager": "Tile Manager object associated with this world, if this exists load tiles",
    "EFortTheaterMapTileType.Normal": "Tile behaves normally and will potentially be cycled active/inactive",
    "EFortTheaterMapTileType.Outpost": "Tile is always active, but not directly accessible from the hex map",
    "EFortTheaterMapTileType.AlwaysActive": "Tile is always active/available on the hex map and does not count against the mission quota",
    "PartyMemberCampaignInfo:ZoneInstanceId": "Tile selected by this user",
    "EFortTheaterMapTileType.NonMission": "Tile that never has missions useful for artistic only tiles",
    "FortFollowCam_Settings:TurnFullDeflectionThreshold": "Tilt threshold over which to come out of dampening (0-1).",
    "FortAthenaMutator_Uranium:MatchTimeAtStart": "Time (in seconds) given to the pusher team to complete their objective at the start of the match",
    "FortWeapon:TimeToEquip": "Time (in seconds) required to equip the weapon; -1.0f indicates the equip time will match the equip animation time.",
    "FortGameStateSurvival:TimeToDelayEndOfDayZoneScoreWidgetDisplay": "Time (in seconds) to delay displaying the end-of-day zone score widget (if bFireEndOfDayDelegate is true) after\n        the day ends.  Technically relies on blueprint function calls to be used properly.  Should be unused if\n        bFireEndOfDayDelegate is false.",
    "FortAIDirector:DespawnInterval": "Time Interval to do despawn checks",
    "FortTimeOfDayManager:TimeOfDay": "Time Of Day (24-hour time, in hours).  Only replicated initially, and then TimeOfDayReplicated takes over.",
    "FortAthenaMutator_Bagel:StreakScoreMultiplierTimeThresholdToActivate": "Time Threshold to do all the required kills to activate streak multiplier for the first level",
    "FortAthenaMutator_Mash:StreakScoreMultiplierTimeThresholdToActivate": "Time Threshold to do all the required kills to activate streak multiplier for the first level",
    "ThreatCloud:DeathTimerDuration": "Time after BeginDeath before the ThreatCloud is destroyed",
    "FortPawn:DefaultLifespanAfterDeath": "Time after death before the pawn is destroyed.",
    "FortRangedWeaponStats:AutofireReleaseTime": "Time after losing target before we stop autofire.",
    "PlaystyleSwitchToAggressiveData:TurnToAggressiveTime": "Time after target has been under TurnToAggressiveMinimumDistance to turn aggressive",
    "PlaystyleSwitchToAggressiveDataDigested:TurnToAggressiveTime": "Time after target has been under TurnToAggressiveMinimumDistanceSquared to turn aggressive",
    "FortAthenaZiplineBase:ExitZiplineRemoveFromIgnoreWhenMovingTimeDelay": "Time after zipline movement ends before the zipline is removed from the pawn's \"actors to ignore when moving\" list.\n     This delay exists because some zipline movement (example: moving up Ascender style ziplines) rely on the pawn being able to move through the part of the zipline actor immediately after zipline movement ends.",
    "FortCurieFXSettings:ElectricityArcFadeoutDuration": "Time arc takes to fadeout",
    "FortReplayPlaybackState:EndTime": "Time at the end of the timeline (usually total length of replay)",
    "FortReplayPlaybackState:StartTime": "Time at the start of the timeline (usually zero)",
    "FortAthenaVehicle:HealthZeroTime": "Time at which HP went to 0.",
    "BuildingActor:LastTakeHitTimeTimeout": "Time at which point the last take hit info for the actor times out and won't be replicated; Used to stop join-in-progress effects all over the screen",
    "FortPawn:LastTakeHitTimeTimeout": "Time at which point the last take hit info for the actor times out and won't be replicated; Used to stop join-in-progress effects all over the screen",
    "FortPartyBeaconClient:ReconnectionTimeout": "Time beacon will wait for packets after establishing a reconnection before giving up",
    "FortSpectatorBeaconClient:ReconnectionTimeout": "Time beacon will wait for packets after establishing a reconnection before giving up",
    "FortPartyBeaconClient:ReconnectionInitialTimeout": "Time beacon will wait to establish a reconnection with the beacon host",
    "FortSpectatorBeaconClient:ReconnectionInitialTimeout": "Time beacon will wait to establish a reconnection with the beacon host",
    "FortGameplayCueNotify_BurstLatent:MaxBurstLatentLifetime": "Time before cue gets cleaned up - this will stop any timeline progression so if a timeline is not finished the finishing event will never play",
    "FortGameSessionDedicated:ReservationAbandonmentTime": "Time before declaring a reservation is abandoned.",
    "LookAtDigestedSetting:LookAtDelay": "Time before doing a LookAt again",
    "LookAtSetting:LookAtDelay": "Time before doing a LookAt again",
    "AthenaDeveloperSettings:AthenaWarmupEarlyCountdownDuration": "Time before starting next phase after early percent of players are in match",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:WarmupEarlyCountdownDuration": "Time before starting next phase after early percent of players are in match.",
    "AthenaDeveloperSettings:AthenaWarmupCountdownDuration": "Time before starting next phase after required player count is met",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:WarmupCountdownDuration": "Time before starting next phase after required player count is met.",
    "FortExCaliberProjectile:TimeToExplode": "Time before the explosion effects are played",
    "TowhookParams:TractorBeamMaxStiffnessTime": "Time before the tractor beam max stiffness is reached in seconds (starting from 0 stiffness)",
    "FortLinkedAnimGraphComponent:FullBodyAdditiveDeactivationTime": "Time before unlinking full body additive state after exiting it. Should be at least as long as the transition out of this linked graph in the main animation BP",
    "FortPlayerPawn:TimeBeforeSwimmingLayerDeactivated": "Time before unlinking swimming layer after exiting relevant states (i.e SurfaceSwimming or WaterJumping). Should be at least as long as the longest tranisition time in specified swimming layer",
    "RidableControlParams:TimeBeforeInputsReleasedConsidered": "Time before we consider all inputs have been released",
    "ProjectileMovementDrunkConfig:InitialDelay": "Time before we start doing drunk movement.",
    "EvasiveManeuverSkillSettings:CrouchDelay": "Time between Crouch evasive maneuver",
    "DigestedEvasiveManeuverSkillSettings:CrouchDelay": "Time between Crouch evasive maneuvers",
    "EvasiveManeuverSkillSettings:DodgeDelay": "Time between Dodge evasive maneuver",
    "DigestedEvasiveManeuverSkillSettings:DodgeDelay": "Time between Dodge evasive maneuvers",
    "EvasiveManeuverSkillSettings:JumpDelay": "Time between Jump evasive maneuver",
    "DigestedEvasiveManeuverSkillSettings:JumpDelay": "Time between Jump evasive maneuvers",
    "TieredWaveSetData:BreatherBetweenWaves": "Time between each wave",
    "FortAthenaFerretVehicle:SpringCompressionRefireTime": "Time between firing spring compression effects such as force feedback",
    "FortAthenaSKMotorVehicle:SpringCompressionRefireTime": "Time between firing spring compression effects such as force feedback",
    "FortAthenaSKPushVehicle:SpringCompressionRefireTime": "Time between firing spring compression effects such as force feedback",
    "FortSafeZonePhaseInfo:WaitTime": "Time between this phase starting, and the safe zone beginning to shrink",
    "PulseIndicatorComponent:PulseTime": "Time between triggering pulses.\nIf this value equal to 0, there will be only 1 pulse\nIf the value is < 0, it will disable the pulsing entirely.",
    "SidewaysStateComponent_Player:UpdateFrequency": "Time between updates of closest sideways playspace.  If negative, it will only update when entering the sideways\nor when the Sideways volume it's inside changes size.  If positive, it's used to set a TimerCallback to update\nevery X seconds.",
    "DigestedFiringPattern:HoldTimeDeviation": "Time deviation on holding time, will be used to randomize the length of the shooting sections of the pattern",
    "FiringPattern:HoldTimeDeviation": "Time deviation on holding time, will be used to randomize the length of the shooting sections of the pattern",
    "DigestedFiringPattern:PreventFireTimeDeviation": "Time deviation on prevent fire time, will be used to randomize the length of the non shooting sections of the pattern",
    "FiringPattern:PreventFireTimeDeviation": "Time deviation on prevent fire time, will be used to randomize the length of the non shooting sections of the pattern",
    "FortGameStateComponent_TimeDilation:TimeDilationManager": "Time dilation manager that handles round end time dilation.",
    "FortAthenaMutator_Skyfire:RestartSelectionWeightTimePower": "Time elapsed since the last player restarted at a given teleport point is raised to this power to determine its selection weight when choosing a restart point.",
    "FortAthenaVehicle:RimScrapeDamageTimer": "Time for rim scraping damage.",
    "FortPawnComponent_Convert:ConvertTimeFromDBNO": "Time for this pawn to be converted from DBNO",
    "FortPlayerPawnAthena:ConvertFromDBNOTime": "Time for this pawn to be converted from DBNO",
    "FortCollisionResponseSwapperComponent:VisibilityModifiedTime": "Time for which we keep visibility off",
    "ObjectiveEntry_Gate:TimeToCloseGateAfterOpen": "Time in float seconds (1.0) that this gate will automatically close after it is opened.",
    "ObjectiveEntry_Gate:TimeToOpenGateAfterClose": "Time in float seconds (1.0) that this gate will automatically open after it is closed.",
    "FortGameMode:AbilityRefireHitchCooldown": "Time in seconds after server hitches that we don't report Ability refire",
    "FortGameMode:MovementTimeDiscrepancyHitchCooldown": "Time in seconds after server hitches that we don't report Time Discrepancies",
    "FortGameMode:GameplayServerHitchThreshold": "Time in seconds between game mode ticks over which we consider it a hitch",
    "FortTracerBase:MeshScaleTime": "Time in seconds taken by the mesh to grow/shrink",
    "FortMotorSimComponent_PatternPlayer:PatternResetCooldown": "Time in seconds the component needs to spend deactivated before it will start a new pattern when next activated",
    "FortCreativeInteractVisualizationComponent:TransitionInterval": "Time in seconds to get to the desired radius from the starting radius.",
    "ServiceRegistrySource_ServiceTableRules:CachedTableKeepSeconds": "Time in seconds to keep cached table alive if hard reference is off. 0 will release immediately, -1 will never release",
    "CrucibleSegmentData:MissedTargetPenalty": "Time in seconds to penalize the player in this segment for each missed AI/Target",
    "FortSpawnActorData:TimeUntilNextSpawn": "Time in seconds when the next actor will get spawned",
    "FortCuriePendingElectricityArcRequest:ExecutionTime": "Time in which the request should begin execution",
    "MontageBeatSyncComponent:MontageLengthInBeats": "Time information about the Montage that is playing. Like how many beats long it is.\nWill be setup when we find the timing info (or we attempt to force emote beat syncing)",
    "MontageBeatSyncComponent:MontageOffsetMs": "Time information about the Montage that is playing. Like its offset.\nWill be setup when we find the timing info (or we attempt to force emote beat syncing)",
    "DanceSynchronizerComponent:BeatInfo": "Time information about the dance that is playing. Like how many beats long it is.",
    "FMDanceSynchronizerComponent:DanceTimeSpan": "Time information about the dance that is playing. Like how many beats long it is.",
    "BuildingTrap:ObstructedTargetRecheckInterval": "Time interval at which we should check if obscured valid targets have become unobscured. If <= 0, we will not recheck on a timer",
    "TeleportSettings:TimeNeededOutsideTeleportRange": "Time interval pawn needs to be past TeleportDistance in order to trigger the teleport. NOTE: Is dependent on Teleport Condition Check Interval",
    "TeleportSettings:CheckTeleportConditionsTimeInterval": "Time interval to check teleport conditions (deactivated if <= 0.f)",
    "FortGamepadSettings:AimAssistPullRampUpTime": "Time it takes for aim assist pull to build up when a target is acquired",
    "FortGamepadSettings:AimAssistPullDecayTime": "Time it takes for aim assist pull to decay when target is lost.",
    "FortGamepadSettings:SlowDecayTime": "Time it takes for aim assist slow to decay when target is lost.",
    "FortSafeZonePhaseInfo:ShrinkTime": "Time it takes for the safe zone to shrink from its previous radius to the radius of this phase",
    "TornadoRadialForce:IncomingDuration": "Time it takes the force to fully fade in.  Force will be full strength this long after StartTime.",
    "WindField:IncomingDuration": "Time it takes the force to fully fade in.  Force will be full strength this long after StartTime.",
    "TornadoRadialForce:OutgoingDuration": "Time it takes the force to fully fade out.  Force will begin fading out this long before StopTime.",
    "WindField:OutgoingDuration": "Time it takes the force to fully fade out.  Force will begin fading out this long before StopTime.",
    "FortGamepadAdvancedOptions:LookBoostAccelerationTimeAds": "Time it takes to accelerate to boost speed (when aiming down sights).\nRange is [0.0, 1.0] in secs.",
    "FortGamepadAdvancedOptions:LookBoostAccelerationTime": "Time it takes to accelerate to boost speed.\nRange is [0.0, 1.0] in secs.",
    "FortGamepadSettings:GamepadLookAccelTime": "Time it takes to accelerate to the desired turn rate after initial stick deflection.",
    "FortDynamicBuilder:BuildingConstructionTime": "Time it takes to complete its animation when the bUsePlayerBuildAnimations is enabled. 0.0 will use original base construction time",
    "FortGamepadSettings:GamepadLookDecelTime": "Time it takes to decelerate back down the desired turn rate when there's no stick deflection.",
    "FortGamepadAdvancedOptions:LookEaseTime": "Time it takes to ease in/out stick input upon initial stick movement.  Helps to dampen view movement when stick tapping.\nRange is [0.0, 1.0] in secs.",
    "TimerObjectiveHUDData:TimeLeft": "Time left on the clock in seconds.",
    "RidableControlParams:TimeBeforeTurnInPlaceAllowed": "Time needed to be stopped for before we allow to turn in place",
    "TimeOfDayController_BlueprintBase:TimeOfDay": "Time of Day",
    "TimeOfDayController_BlueprintBase:bOverride_TimeOfDay": "Time of Day Settings",
    "FortTimeOfDayManager:WeatherComponent": "Time of Day Weather Support",
    "EFortDayPhase": "Time of day enum",
    "TimeOfDayOverride:TimeOfDay": "Time of day to start the game at (time in hours 0-23.999)",
    "EFortReportDayPhase": "Time of day used by the analytics system",
    "FortAthenaAIBotController:StartSpectatingTime": "Time of first spectating",
    "FortAthenaPartyRiftPortal:InitialDeploymentTime": "Time of initial deployment of portal, in seconds since match start",
    "SupplyDropZoneBasedSpawnData:NextSpawnTime": "Time of last individual SupplyDrop spawn",
    "GroundSplineLocationData:Timestamp": "Time of the last server update",
    "GroundSplineSpeedData:Timestamp": "Time of the last server update",
    "FortGameplayEffectContext:StunTime": "Time of the stun effect",
    "CrucibleCourseResults:CancelTime": "Time on server that this run was canceled (-1.0 if not canceled)",
    "CrucibleCourseResults:FinishTime": "Time on server that this run was finished (-1.0 if not finished)",
    "CrucibleCourseResults:StartTime": "Time on server that this run was started (-1.0 if not started)",
    "CrucibleSegmentResults:CancelTime": "Time on server that this segment was canceled (-1.0 if not canceled)",
    "CrucibleSegmentResults:FinishTime": "Time on server that this segment was finished (-1.0 if not finished)",
    "CrucibleSegmentResults:StartTime": "Time on server that this segment was started (-1.0 if not started)",
    "FortLobbyBeaconStateRM:LobbyTimeRemaining": "Time remaining for the restricted mode lobby countdown",
    "FortGameState:CurrentReadyToContinueTimer": "Time remaining until game will continue",
    "FortWeaponComponent_RecoilCurve:CurveTimeScale": "Time scale when updating the curve.",
    "ETempoListenerTimeSyncOption.SpeedScale": "Time setting is interpreted as a multiple of quarter note(s) and kept in sync with the current tempo.",
    "ETempoListenerTimeSyncOption.TempoSync": "Time setting will always be as authored",
    "AthenaReengagementRestedXp:TimeSinceLastSession": "Time since the user last received XP (in hours)",
    "BuildingFlagSpawn:SpawnDelay": "Time specified to delay the spawning of the object.",
    "FortAthena_WaxToken:TimeInState": "Time spent in the current state.",
    "FortGravityGunHolder:TrajectorySplineTimeStep": "Time step when calculating the trajectory spline using CalculateProjectileTrajectorySplineWithHit.",
    "ProjectileMovementDrunkConfig:DirectionChangeRate": "Time that drunk changes directions.",
    "CaptureComponent:CaptureTime": "Time that needs to be achieved by CaptureTimeCurrent to Finish Capture",
    "GasEventHistoryItem:Timestamp": "Time that the event occurred",
    "FortAthenaVehicle:BoostEndTime": "Time that the vehicle last finished boosting.",
    "FortWeapon:LastTargetingTransitionTime": "Time that we started our most recent targeting transition",
    "FortDelayRTMMData:TimeStamp": "Time the above values were set, so we are forced to replicate",
    "FortBounceData:StartTime": "Time the bounce started",
    "AthenaCapturePoint:ShutdownTime": "Time the capture point was told to destroy",
    "FortAIEncounterWaveProgressEstimation:SectionStartTime": "Time the current section started",
    "CatalogItemPrice:SaleExpiration": "Time the discounted price will change, or FDateTime::MaxValue() if not set",
    "FortAthenaVehicle:LastPopTireTime": "Time the last tire was popped.",
    "FortPartyRepData:LFGTime": "Time the party began LFG",
    "EFortQuestObjectiveItemEvent.MinigameTime": "Time the player has spent in the minigame",
    "FortPlayerPawnAthena:BecameSpecialActorTime": "Time this pawn became a \"special actor\"",
    "FortMovementLeans:BlendOutTime": "Time to blend the lean back to zero when movement stops",
    "FabricButtonBase:CloseTimeSeconds": "Time to close.",
    "FabricButtonComponentBase:CloseTimeSeconds": "Time to close.",
    "FortMovementLeans:SettleBlendTime": "Time to go from full lean to settle lean weight",
    "FortMovementLeans:BlendInTime": "Time to go from no lean to full lean when starting moving or changing direction",
    "PlayerMarkerConfig:HoldTime": "Time to hold Ping button to be considered as hold input",
    "AthenaGameMessageData:DisplayTime": "Time to keep this message displayed for",
    "FabricButtonBase:OpenTimeSeconds": "Time to open.",
    "FabricButtonComponentBase:OpenTimeSeconds": "Time to open.",
    "SupplyDropZoneBasedSpawnData:NextWaveSpawnTime": "Time to spawn the next wave of SupplyDrops (any previous wave drops will not be spawned)",
    "PendingSpawnInfo:TimeToSpawn": "Time to spawn this pawn",
    "FortCountdownSounds:StartTime": "Time to start",
    "FortCountdownSounds:StopTime": "Time to stop",
    "FortPlayerControllerAthena:EndMatchHeartbeatTimerDelay": "Time to wait between heartbeats",
    "FortEncounterSettingsFixedPace:RiftSpawnInterval": "Time to wait between next rift is spawned",
    "FortAthenaMutator_Bagel:TimeSecRetreiveLeaderboardTimeOut": "Time to wait for leaderboard before sending a potential update failed",
    "FortAthenaMutator_Mash:TimeSecRetreiveLeaderboardTimeOut": "Time to wait for leaderboard before sending a potential update failed",
    "FortEncounterSettings:SpawnAIIntervalTime": "Time waited before the encounter re-try to spawn AI.",
    "FortEncounterSettingsFixedPace:SpawnAIIntervalTime": "Time waited before the encounter re-try to spawn AI.",
    "FortEncounterSettings:SpawnRiftIntervalTime": "Time waited before the encounter re-try to spawn another rift.",
    "FortPlayerController:TimeFinishedNavigationBuild": "Time we finished doing any navigation work",
    "FortPlayerController:TimeStartedWaiting": "Time we start waiting for the game to start",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:TotalFinalCountdownTime": "Time when the countdown is considered to be in in the FINAL COUNTDOWN stage",
    "SupplyDropItemDeliverySpawnData:NextSpawnTime": "Time when the next drop can be spawned",
    "FortAthenaMutator_Heist:SpawnExitCraftTime": "Time when the next exit craft should spawn",
    "FortCreativeDynamicXpComponent:CalibrationTimestamp": "Time when we have received the Link data to report in analytics",
    "FortCurieToggleComponent:DeactivationTime": "Time, in seconds, since last activation before auto-deactivation; Only used if allowed by activation/deactivation behavior",
    "BuildingGameplayActorAbilityDeliveryInfo:ProximityPrePulseTime": "Time, in seconds, to let us know before the proximity-pulse based effects happen.",
    "BuildingGameplayActorAbilityDeliveryInfo:ProximityPulseInterval": "Time, in seconds, to wait before applying proximity-pulse based effects",
    "BuildingTimeOfDayLights:TimeOfDayControlledLightDataArray": "Time-of-day lighting data",
    "BuildingTimeOfDayLightsActorClassData:FourLayerMaterial": "Time-of-day lighting is handled a little differently on four-layer materials. We compare the current\nmaterial against this one to decide whether we need that special handling.",
    "XPEventEntry:Time": "Time. This is in case a new entry of the same type and amount ends up going in this slot",
    "FortDecoPreview:BounceTimeline": "Timeline for running the bounce motion curve",
    "FortPlayerPawn:BlueprintPaperPulseTimeline": "Timeline that drives the pulse effect",
    "FortWeap_BuildingTool:BlueprintPaperPulseTimeline": "Timeline to play to pulse the blueprint paper",
    "ELoginResult.LoginStepTimeout": "Timeout or hang during a login step.",
    "FortProjectileMoveComp_Drunk:DrunkHomingDirectionChangeTimer": "Timer for direction changes during drunk homing movement.",
    "FortProjectileMoveComp_Drunk:DrunkDirectionChangeTimer": "Timer for direction changes during drunk movement.",
    "ZiplinePawnState:RemoveZiplineFromIgnoreWhenMovingTimerHandle": "Timer for removing a zipline from the pawn's \"actors to ignore when moving\" list after zipline movement has ended.",
    "RidableComponent:RestoreCollisionHandle": "Timer handle for restoring collision callback",
    "RiderComponent:RestoreCollisionHandle": "Timer handle for restoring collision callback",
    "FortAIPawn:EncounterExpectedLifespanTimerHandle": "Timer handle for the encounter expected lifespan",
    "FortMaterialStyleComponent:ProcessRequestQueueTimerHandle": "Timer handle for timer which will process next pending request to becoming active",
    "UrgentQuestData:EventTimerHandle": "Timer handle to keep track of the event timer.",
    "FortComponent_Energy:BeginRechargeTimerHandle": "Timer handle to use to set when the next recharge will begin.",
    "FortCurieToggleComponent:TimedDeactivationHandle": "Timer handle tracking timed deactivation",
    "FortUserCloudRequestQueue:ProcessingTimerHandle": "Timer handle used for deferring processing on the queue",
    "ServerMigrationAlertData:TimerHandle": "Timer handler for the alert",
    "EWidgetInterfaceTimerStatus.Paused": "Timer is currently ticking along.",
    "ETimerDeviceState.Paused": "Timer paused",
    "ETimerDeviceState.Activated": "Timer running",
    "EWidgetInterfaceTimerStatus.Inactive": "Timer still has time, but is paused.",
    "FortMutatorMusicEventPlayInstance:LoopTimerHandle": "Timer to manage loop duration for looping sounds.",
    "FortPlayerControllerComponent_TacticalSprint:StopWantingToSprintTimerReceipt": "Timer to turn off wanting to sprint if it fails X seconds after toggle sprint is pressed.",
    "FortPlayerControllerPvE:IdleWarningUpdateTimerHandle": "Timer used to update the idle warning message while it is displayed.",
    "SkyfireBackpackComponent:AlmostOutOfTimeBackpackThreshold": "Times",
    "ETimespanAsTextFormat": "Timespan As Text Format",
    "FortCurieComponent:LastFireFXRelatedStateTime": "Timestamp (from server time) of last time a fire state driving VFX (such as charring, etc.) was modified",
    "VkTeamDoc:Created": "Timestamp for creation",
    "VkTeamDoc:Updated": "Timestamp for last update",
    "UrgentQuestData:EventStartTime": "Timestamp for when the event started.",
    "FortCreativeAFKComponent:LastInputChangeTimestamp": "Timestamp of the last time that the player input changed",
    "AIRuntimeParametersSmartObjectActivity:LastUseTimestamp": "Timestamp this activity was last used",
    "FortNevadaVehicle:TractorBeamDisruptedTimestamp": "Timestamp when the tractor beam gets disrupted",
    "FortNevadaVehicle:TractorBeamDeactivationTimestamp": "Timestamp when the tractor beam goes to inactive",
    "FortQuestObjectiveCompletion:TimestampOffset": "TimestampOffset of progress/completion - this will be calculated to be the number of seconds this stat event occured prior to the end of the match",
    "EFortMantisNotifyEvent": "Timing events for Mantis techniques.",
    "EFortMantisNotifyWindow": "Timing windows for Mantis techniques.",
    "FortSoundIndicatorComponent:DefaultTintOverride": "Tint of the sound indicator radial. If this field is left empty, the default tint associated with the selected DefaultSoundIndicatorType will be used (see B_SoundIndicator_01 uasset).",
    "ElevationArrowData:IndicatorColor": "Tint to apply to the indicator while the elevation arrows are displaying.",
    "FortCreativeOptionDestructiveAction:DialogTitle": "Title for the destructive action dialog.",
    "CatalogDynamicBundleItem:Title": "Title for this item",
    "FortRewardActivity:TitleText": "Title of the reward",
    "FortUITutorialData:DevComment": "Title to display for this tutorial step.",
    "FortUITutorialData:Title": "Title to display for this tutorial step.",
    "FortAIPawn:TetheredFollower": "To access this, use Set/GetTetheredFollower",
    "FortFallTeleportComponentBase:SafeManualLocation": "To be used as last resort if no other valid locations were found (like player starts for example). Initialized at BeginPlay if equal to ZeroVector.",
    "EFriendChestInstancedType.GrantXp": "To be used in future to grant XP",
    "FortCreativeMoveTool:OnFinishedSpawningDelegate": "To call once actors are spawned and setup. Not to be assigned externally, only used as a copy for the current callback passed to SpawnToDuplicateActorsHelper.",
    "ERoundVictoryAnimation": "To know type of end game animation effect to play. Set as an enum for possible future expanse.",
    "FortSplineGroundPath:bHasWarnedOfArrayOverfill": "To prevent spam, we'll only warn the first time our array gets too full.",
    "FortSplineGroundPath:bHasWarnedOfUnableToRepDestroy": "To prevent spam, we'll only warn the first time our array gets too full.",
    "FortSplineGroundPath:MaxReppedPointsBeforeOverfill": "To prevent the TArray of points from growing/replicating to much, limit the number of points.",
    "ConditionalBenefitsConfig": "Todo - May want to consider wrapping some/all data in here into a data table format eventually for added hotfixability",
    "VehicleModBuildingGameplayActorAttachmentData:ToggleablePhysicsShapeNamesIgnoringLandscape": "Toggable shapes in this collection will ignore landscape collision when activated.\n      Ideally this contains very little if any shapes. But may be necessary for game feel reasons.\n      Strive for only 1 shape being added here for ideal perf; if many shapes are used by a vehicle mod -- that may suggest a performance concern for other reasons.\n      Designers should consider each shape added here as having some performance cost as physics contacts will need to ensure they are not between a shape in this collection and landscape.\n      Please consult a programmer before adding to this if you're unsure about performance concerns.",
    "FortZiplineLinkComponent:bShowNavLinkDebug": "Toggle debug display for NavLink generation.",
    "CreativeToolPersistentData:bShouldDestroyPropsWhenPlacing": "Toggle determining whether or not we should destroy props around the building actors we place in Build on grid mode.",
    "FortCreativeMoveTool:bShouldDestroyPropsWhenPlacing": "Toggle determining whether or not we should destroy props around the building actors we place in Build on grid mode.",
    "SkyfireBackpackComponent:bUseBlueprintUpdateTime": "Toggle for using the Native or BP code",
    "FortGameModeAthena:bEnableMatchmakingRatingUpdateV2": "Toggle on/off reporting match results to MCP to update player MMR (V2 to MMR processing service).",
    "FortPlayerControllerZone:bJetpackExecuteToggle": "Toggle state for jetpack execute",
    "FortDaySequenceActor:bUseSkyLightCubeMapBlending": "Toggle this true to allow sky light cube map blending",
    "FortDaySequenceActor:bUseSunAngle": "Toggle this true to allow the 'Sun Angle' property to control the directional light position in the sky.  0 or 180 = horizon, 90 = center sky",
    "FortCampaignJackalVehicle:bVehicleLeftAnalogStrafing": "Toggle to enable/disable strafing",
    "FortProjectPlayComponent:bScaleVolumeBounds": "Toggles volume bounds scaling behavior.",
    "FortAthenaMutator_Wax:TokensToMarkPermanentlyMaxTier": "Token count to mark a player to always be drawn on the compass and/or minimap, or otherwise \"always dangerous\"",
    "FortTooltipDisplayStatInfo:Token": "Token passed to the tooltip to fill in the values",
    "PlayerToxicityReportRequest:EmeraldToken": "Token representing voice recording upload data.",
    "SubGameInfo:AccessToken": "Token required to play when access is limited",
    "EquippedItemTagAssociationData:TokenSystemTagQuery": "Token system tag query used when equipped item matches ItemTags",
    "TokenAttributePair:Token": "Token to search for",
    "FortAthenaMutator_Wax:TokensToStartWith": "Tokens a player will start with, at minimum",
    "FortAthenaMutator_Wax:TokensAwardedPerEliminationOnKill": "Tokens awarded on elimination for every elimination. Basically scales their eliminations (the resulting amount is granted).",
    "FortAthenaMutator_Wax:StateTokenCount": "Tokens for a given wax state.",
    "MeleeWeaponSkill:IdealAttackDistanceTolerance": "Tolerance on the Ideal distance, outside of which positions will be rejected",
    "FortAthenaMutator_SpecialEvent:MannequinRecentlyRenderedCheckToleranceValue": "Tolerance value (in seconds) when checking if a mannequin was recently rendered.\n     IF this value is <= 0, then this optimization feature is disabled.",
    "SettingsHUDVisibilityAndText:TooltipText": "Tooltip text for when the hud visibility is shown in UI settings",
    "EFortTextureDataType.Floor": "Top of floor texture",
    "EStructuralFloorPosition.Bottom": "Top of the grid cell",
    "EHUDMessagePlacement.TopCenter": "Top vertically, center horizontally",
    "EFortItemType.AthenaMapMarker": "Topper mesh/fx for the in-world map marker and potentially an icon replacement for the 2D version (theoretical)",
    "RockVehicleAbility_Flip:Torque": "Torque applied to rotate the vehicle",
    "FlightParams:HorizontalStabilizationTorque": "Torque per horizontal velocity for correcting heading. This is the\n              torque caused by the wind going over the vertical static part of\n              the tail.",
    "FlightParams:VerticalStabilizationTorque": "Torque per vertical velocity for correcting heading. This is the\n              torque caused by the wind going over the horizontal static part of\n              the tail.",
    "EFortReplicatedStat.BuildingsBuilt": "Total # of buildings built",
    "EFortReplicatedStat.BuildingsDestroyed": "Total # of buildings destroyed",
    "EFortReplicatedStat.ContainersLooted": "Total # of containers looted",
    "EFortReplicatedStat.CraftingPoints": "Total # of crafting points acquired",
    "EFortReplicatedStat.Repair_Metal": "Total # of metal resources spent on repair",
    "EFortReplicatedStat.FlagsCaptured": "Total # of pvp flags captured",
    "EFortReplicatedStat.FlagsReturned": "Total # of pvp flags returned",
    "EFortReplicatedStat.Repair_Stone": "Total # of stone resources spent on repair",
    "EFortReplicatedStat.TrapActivationPoints": "Total # of trap activation points",
    "EFortReplicatedStat.TrapPlacementPoints": "Total # of trap placement points",
    "EFortReplicatedStat.Repair_Wood": "Total # of wood resources spent on repair",
    "FortGameStateZone:TotalBuildingScore": "Total Building Score ever earned by all players in the game",
    "FortGameStateZone:TotalCombatScore": "Total Combat Score ever earned by all players in the game",
    "OldMusicTempometerComponent:MusicTickParameterName": "Total MIDI ticks from the beginning of the music.",
    "FortGameStateZone:TotalUtilityScore": "Total Utility Score ever earned by all players in the game",
    "XPEventInfo:TotalXpEarnedInMatch": "Total XP value accrued thus far in the match, inclusing the XP from this event - will include any rested XP amounts",
    "MtxPackage:TotalAmount": "Total amount of Mtx Currency you get",
    "FortXpRewards:TotalXp": "Total amount of XP rewarded from the quest",
    "AthenaRewardResult:TotalBookXpGained": "Total amount of book Xp gained",
    "FortWeaponRanged:TargetingRotAdjustmentTotal": "Total amount of rotational adjustment to make when transitioning between non-targeting and targeting",
    "AthenaRewardResult:TotalSeasonXpGained": "Total amount of season Xp gained",
    "AthenaRewardResult:PrePenaltySeasonXpGained": "Total amount of season Xp gained before penalties",
    "SeasonCurrencyMcpData:CurrencySeasonTotalCollectionLimit": "Total amount of the currency player can collect over the season.\nIf handle isn't set, or the curve value is 0 or below, means no limit.\nIf set to value greater than 0, then the CurrencyDefinition requires the StatTotalName to be set or a validation error thrown",
    "DynamicXpPlayerSessionTransient:TotalAfkTime": "Total amount of time player was AFK.",
    "OldMusicTempometerComponent:MusicBeatParameterName": "Total beats from the beginning of the music.",
    "ValkyrieModuleCookedSizeStats:SizeBytes": "Total cooked size (in bytes) that should be reported",
    "FabricSignificanceBasedUpdateBucketRuntime:TotalObjectsInBucketCount": "Total count of objects in this bucket",
    "MashPlayerDataEntry:TotalRiftDamageDealtByPickaxe": "Total damage dealt to AI Spawning Rifts using a pickaxe.",
    "MashPlayerDataEntry:TotalRiftDamageDealt": "Total damage dealt to AI Spawning Rifts.",
    "MashPlayerDataEntry:TotalAIDamageDealt": "Total damage dealt to AIs.",
    "FortVerbMessage_PawnEliminated:TotalDamageDoneByContributors": "Total damage done by all contributors to this elimination",
    "FortScoutDroneAnalyticsComponent:DistanceTraveled": "Total distance traveled throughout a session",
    "FortAthenaMutator_Rounds:RoundEndDuration": "Total duration of the RoundEnd/MatchEnd phase, before transition to RoundEndUI/MatchEndUI",
    "FortMcpCollectedItemProperties:Count": "Total ever collected of this variant",
    "UtilityData:RecentlySelectedPenaltyPercentage": "Total initial penalty after this utility gets selected. Range 0-1",
    "VkJobOutput:TotalSizeKb": "Total job output size (kb)",
    "MashPlayerDataEntry:StreakMultiplierKillCountCurrentForLevel": "Total kill count for the current kill streak multiplier level when the streak score multiplier is active.",
    "BagelPlayerDataEntry:StreakMultiplierCurrentKillCount": "Total kill count when the streak score multiplier is active",
    "MashPlayerDataEntry:StreakMultiplierKillCountCurrentTotal": "Total kill count when the streak score multiplier is active.",
    "TowhookParams:TractorBeamHeightModifierLength": "Total length before we apply the max HeightScalingForce",
    "FortCurieFXSettings:ElectricityArcLifetime": "Total lifetime of arc",
    "OldMusicTempometerComponent:MusicMeasureParameterName": "Total measures from the beginning of the music.",
    "EFortReplicatedStat.MetalGathered": "Total metal gathered",
    "BagelPlayerDataEntry:TotalAIKillCount": "Total number of AIs killed",
    "MashPlayerDataEntry:TotalAIKillCount": "Total number of AIs killed.",
    "SupplyDropZoneBasedSpawnData:TotalSupplyDropsSpawnedInSubPhase": "Total number of SupplyDrops in the current SubPhase of GamePhase",
    "FortPlayerPushableCart:TotalActiveDefenders": "Total number of active defender, replicated to the client for the client's UI",
    "FortPlayerPushableCart:TotalActivePushers": "Total number of active pushers, replicated to the client for the client's UI",
    "FortDailyLoginRewardStat:TotalDaysLoggedIn": "Total number of days logged in - starts off the same as the next reward index",
    "KeepItemContainer:MaxItems": "Total number of items that will be given, pulled from data table - when bShowChoiceUI is false",
    "FortAthenaMutator_Bagel:TotalObjectiveAreaCount": "Total number of objective areas  players have to clear",
    "FortAthenaMutator_Mash:TotalObjectiveAreaCount": "Total number of objective areas  players have to clear",
    "QueuedItemsToDropViaPickup:TotalNumItemsToDrop": "Total number of pickups to spawn, used in spreading pickup toss angles evenly",
    "TotalPlayers:Total": "Total number of players (humans + bots)",
    "PlayersLeft:Total": "Total number of players left (humans + bots)",
    "FortDailyLoginRewardStat_ScheduleClaimed:RewardsClaimed": "Total number of rewards ever claimed from this schedule",
    "BattlePassOfferSectionData:CategoryRewardCount": "Total number of rewards in the category",
    "BattlePassOfferSectionData:SectionRewardCount": "Total number of rewards in this section",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:TotalMinimapDebugCirclesSupported": "Total number of safezones FullMapDebugCircleDrawingMaterial can draw. Should also match the total number of debug circles parameters contained in MinimapMPC.",
    "VoteSelectionResults:AllServersVoteTotal": "Total number of votes tallied for all servers across the fleet",
    "VoteSelectionResults:ServerVoteTotal": "Total number of votes tallied for this selection on just this server",
    "EFortReplicatedStat.OldTotalScore": "Total score at the last time you tried to give the team XP. Used to deduce the delta, which is what we earn XP on",
    "BagelPlayerDataEntry:TotalScore": "Total score for that player",
    "MashPlayerDataEntry:TotalScore": "Total score for that player",
    "EFortReplicatedStat.TotalScore": "Total score. KEEP THIS RIGHT BELOW NONE! If you iterate to < Score it is all of the stats that are not derived",
    "OldMusicTempometerComponent:MusicSecondsParameterName": "Total seconds from the beginning of the music.",
    "EndZoneScoreAndAwards:TotalSecondsInMatch": "Total seconds this player was in the match.",
    "FortAthenaMutator_Wax:PodiumSize": "Total size of the leader podium.",
    "SpawnGroupInstanceInfo:TotalGroupCost": "Total spawn points that must be spent on the group including upgrades",
    "FortPlayerStateAthena:SquadSizeDecrements": "Total squad size decrements since the beginning of a match",
    "FortPlayerStateAthena:SquadSizeIncrements": "Total squad size increments since the beginning of a match",
    "EFortReplicatedStat.StoneGathered": "Total stone gathered",
    "FortPlayerStateAthena:SecondsAlive": "Total time alive. Updates on pawn death and end of match.",
    "BotPOI:Weight": "Total weight of the POI",
    "BotPOIDebugInfo:Weight": "Total weight of the POI",
    "EFortReplicatedStat.WoodGathered": "Total wood gathered",
    "FortInteriorAudioComponent_Ambient:TotalBuildingCountRequiredForInterior": "TotalBuilding count has to be equal-to or greater-than this for the player to be considered indoors",
    "FortTouchInputSettings:TouchAimAssist": "Touch aim assist settings",
    "EFortEventWindowEligibility": "Tournament Event Eligibility State",
    "EFortShowdownEventState": "Tournament Event State",
    "EFortDateTimeStyle": "Tournament Match Type",
    "EFortShowdownMatchType": "Tournament Match Type",
    "CachedPlayerReportingMatchInfoAnalytics:TournamentId": "Tournament data",
    "FortAnimNode_AttackIK:HandTraceChannel": "Trace Channel to use for finding the ground.",
    "FortAnimNode_PredictiveSlopeWarping:FootTraceChannel": "Trace Channel to use for finding the ground.",
    "FortTargetFilter:bTraceComplexCollision": "Trace against complex collision.",
    "FortGravityGunHolder:TrajectorySplineTraceChannel": "Trace channel when calculating the trajectory spline using CalculateProjectileTrajectorySplineWithHit.",
    "FortGravityGunHolder:TrajectorySplineTraceExtent": "Trace extent when calculating the trajectory spline using CalculateProjectileTrajectorySplineWithHit.",
    "FortAthenaMutator_Bagel:SpawnSscoreMultiplierTraceEndHeight": "Trace height end when spawning main/sub objectives",
    "FortAthenaMutator_Mash:SpawnSscoreMultiplierTraceEndHeight": "Trace height end when spawning main/sub objectives",
    "FortAthenaMutator_Bagel:SpawnScoreMultiplierTraceStartHeight": "Trace height start when spawning main/sub objectives",
    "FortAthenaMutator_Mash:SpawnScoreMultiplierTraceStartHeight": "Trace height start when spawning main/sub objectives",
    "FortCosmeticModification:TracerTemplate": "Tracer override for this alteration",
    "FortWeaponRanged:TracerTemplate": "Tracers for this weapon",
    "FortAthenaMapInfo:SkydivingForceDeployParachuteWorldZ": "Traces while skydiving use this as the min ground plane when scanning for impact to auto-deploy the parachute.",
    "EFortPartyMemberInGameMode": "Track current player mode when their location property is set to InGame.",
    "FortMcpCollectedCharacterProperties:QuestsCompleted": "Track how many quests have been completed.",
    "FortMcpCollectedCharacterProperties:QuestsGiven": "Track how many quests have been given.",
    "MoggMusicTrack:TrackName": "Track name",
    "MidiMusicTrackDesc:TrackName": "Track name. This should match a MIDI track name event on a given track in\nthe midi file",
    "FortEmoteVolume:TrackedPlayers": "Track players who are overlapping this volume",
    "FortEmoteVolume:PlayersWithEmotes": "Track players who have been granted the emotes - should be overlapping as well",
    "FortPlayerController:bReadyToStartMatch": "Track rather this player is ready to start playing the game, client requests this to be set",
    "FortPlayerController:bClientPawnIsLoaded": "Track rather this player's pawn is loaded on the client.",
    "FortPawn:TotalPlayerDamageDealt": "Track the amount of damage this player has done to other players",
    "PlayspaceComponent_CreativeLoadingStateProxy:CurrentLockedLoadingState": "Track the current state of the current Locked Loading state. Singular value used here to better manage replication.",
    "FortPlayerController:NumPreviousSpawns": "Track the number of times the player has already spawned in the current day/night cycle",
    "FortPhysicsObjectComponent:ActivationType": "Track the physics object component activation type",
    "FortAthenaMutator_Wax:WaxPickupsToDraw": "Track the pickups we want to draw",
    "FortWeapon:ShotLogFlags": "Track the shot results from this weapon. This is a bitfield of EFortShotLogFlags",
    "FortSprayDecalRepPayload:SortOrder": "Track the sort order of this spray on the server so it's always sorted properly even if not relevant to the client yet",
    "FortMcpCollectedCharacterProperties:EncounterTypeFlags": "Track the ways in which we have encountered this NPC (e.g Conversation/Attack)",
    "FortPlayerStateAthena:KeepPlayingTogetherVotingStatus": "Track this player's current status during end of match voting on\n     whether or not to keep playing together with the squad they just played with",
    "FortPlayerController:bAssignedStartSpawn": "Track whether or not the player has been assigned a start spawn",
    "FortPlayerController:bHasInitiallySpawned": "Track whether or not the player has made his initial spawn in",
    "RespawnAndSpectateTargetData:bPrevAvailableOnClient": "Track whether or not this element was available last time we checked on it\n     Used on client only to determine if we should trigger a UI update",
    "RespawnAndSpectateTargetData:bPrevEnabledOnClient": "Track whether or not this element was enabled last time we checked on it\n     Used on client only to determine if we should trigger a UI update",
    "FortPlayerControllerZone:PlayerLeecherStatus": "Track whether this player had just leeched for UI purposes only.",
    "FortPawn:ActiveSoundIndicators": "Tracked active sound indicators.",
    "FortAthenaCreativePortal:bLocalClientLacksPermission": "Tracked locally on the client to freeze new data updates while the client lacks permission to enter an island.",
    "FortAthenaPartyRiftPortal:bLocalClientLacksPermission": "Tracked locally on the client to freeze new data updates while the client lacks permission to enter an island.",
    "VehiclePontoonBuoyancyDataExtended:ScaledTime": "Tracked scale time as we're scaling.",
    "BuildingGameplayActorSentry:TrackedToAggroDelay": "TrackedToAggroDelay * TrackedToAggroDelayMultiplier == how much time after entering the tracking state before the sentry enters aggro (i.e. the shooting state.)\n     TrackedToAggroDelay is the hot fixable default time.",
    "BuildingGameplayActorSentry:TrackedToAggroDelayMultiplier": "TrackedToAggroDelay * TrackedToAggroDelayMultiplier == how much time after entering the tracking state before the sentry enters aggro (i.e. the shooting state.)\n     TrackedToAggroDelayMultiplier can be altered at runtime.",
    "EShowOnHudMode.Both": "Tracker will display both the detailed view and in the list",
    "EShowOnHudMode.Detailed": "Tracker will only be displayed at the top left of the screen and show the description",
    "EShowOnHudMode.List": "Tracker will only be displayed at the top right of the screen along a maximum of 2 other trackers",
    "EShowOnHudMode.No": "Tracker won't be displayed on screen",
    "LevelInstanceGameplayVolume:bDisabled": "Trackes if the device is disabled (If so we won't accept any actors into this volume)",
    "EDeployableTurretState.Tracking": "Tracking a target but not yet attacking",
    "FortCreativeDynamicXpComponent:AllPlayers": "Tracking for each player in Island for XP Calculator and to report players stats to analytics and MCP.",
    "LWMEncounterInfo": "Tracking info for LWM Encounters",
    "LWMEncounterInstanceEffectInfo": "Tracking info for a gameplay effect",
    "EncounterGroupEffectInfo": "Tracking info for a gameplay effect group",
    "GameplayEffectIdentifierInfo": "Tracking info for gameplay effects identifiers",
    "SpawnedActorInfo": "Tracking info for spawned actors",
    "FortDailyLoginRewardStat:AdditionalSchedules": "Tracking of additional daily rewards the player is entitled to",
    "CobaltCombatStormShieldDataEntry:Teams": "Tracking the teams handled in the storm shield",
    "FortAthenaTrackEventStateTreeTask": "Tracks StateTree events and saves them in an output bool and tag. Can be used in conjunction with FortAthenaTrackEventConsumeStateTreeTask or by itself.",
    "ECooldownTrackingType.AbilityCooldownTags": "Tracks a gameplay cue activate with magnitude duration",
    "EncounterManagerComponent:EncounterInfos": "Tracks a list of encounter infos created by this encounter",
    "EncounterManagerComponent:GameplayEffectInfos": "Tracks a list of gameplay effect identifier infos (used for looking up effect group indices by tag query)",
    "VolumeActorStats:BuildingTypeCounts": "Tracks building counts, split into buckets by building type",
    "FortCreativePortalManager": "Tracks creative portals",
    "FortAIDirectorDataManager": "Tracks data needed by the AI Director",
    "FortMinigame:InactivePlayerArray": "Tracks disconnected players and associated data",
    "ECooldownTrackingType.COUNT": "Tracks gameplay ability cooldown tags",
    "FortAthenaMutator_SynchronizedTeleport:bTeleportComplete": "Tracks if all teleports have completed",
    "FortAthenaMutator_Chrome:bRaceStarted": "Tracks if race has started.",
    "SynchronizedTeleportPlayer": "Tracks if the associated pawn has finished teleporting",
    "MidMatchRiftPoiManagerActor:bDynamicLandBrushApplied": "Tracks if the dynamic land brush has been set to render on the landscape layer of the map.\n     Only holds valid information on the client. Server will always be FALSE.",
    "FortAthenaMutator_Cobalt:bTeleportComplete": "Tracks if the end of round teleport is complete.",
    "CobaltCombatStormShieldDataEntry:bAwardedFirstEliminationOfRound": "Tracks if the first elimination accolade has been awarded this round",
    "CreativeRoyaleRootPlayspace:bHasPlotLoaded": "Tracks if the plot has finished loading.",
    "FortAthenaMutator_Cobalt:bRoundStartWidgetSequenceRunning": "Tracks if the round start widget sequence is running.",
    "BuildingGameplayActorSupplyDropRadio:bMoving": "Tracks if the supply drop actor is moving, i.e., falling towards the ground.",
    "LevelInstanceGameplayVolume:bInstanceLoaded": "Tracks if we have a level instance loaded",
    "CreativeRoyalePlayspaceComponent_LoadingScreen:bShouldDisplayLoadingScreenDuringPostGame": "Tracks if we should show the loading screen during the minigame post game.",
    "ValkyrieEditorPermissionSettings_Animation:AllowedAnimationEditorTracks": "Tracks in the animation editor to show",
    "FortPickupInstigatorRegistryComponent:ItemTemplateRegistry": "Tracks item templates and handles generation of underlying item template objects on client/server",
    "FortMinigame:PlayerArray": "Tracks participating players and associated data",
    "CustomCosmeticModifierBase:SpawnedComponents": "Tracks particle systems so we can properly destroy them when the part modifier is destroyed",
    "FortPartyRiftPortalManager": "Tracks party rift portals used to allow ad-hoc social parties and their respective owners",
    "CrashpadDynamicParams:TrackedPlayers": "Tracks player vertical velocities",
    "FortAthenaMutator_SynchronizedTeleport:PlayersInStasis": "Tracks players currently in stasis for debugging",
    "MinigamePlayers:Players": "Tracks players participating in the minigame session",
    "PlaylistPropertyArray:PropertyOverrides": "Tracks property overrides applied relative to the base playlist; used by clients to apply overrides to their local playlist instances",
    "PropertyOverrideDataRepl:PropertyOverridesReplCached": "Tracks property overrides applied relative to the target object",
    "PropertyOverrideDataReplChunk:PropertyOverridesRepl": "Tracks property overrides applied relative to the target object",
    "MinigameScoreArray:Scores": "Tracks scores recorded from minigame sessions",
    "BuildingGameplayActorSupplyDropRadio:BalloonState": "Tracks the balloon state of the supply drop actor.",
    "FortGameplayDataTrackerEventValue": "Tracks the current data of the event",
    "FortRemoteControlledPawnAthena:TriggeredHealthThreshold": "Tracks the current health threshold the remote control pawn is currently at",
    "PlayspaceComponent_CreativeLoadingStateProxy:SpatialLoadingState": "Tracks the current state for this component.",
    "GasEventHistory:CurrentItemDepth": "Tracks the depth of the current item to determine side-effects and parents\nIncreases when a GasEvent is recorded and decreases when it's committed (finished).\nAs history is forward-only, we can unwind it and determine which parent actions triggered child actions needing to record the whole stack",
    "EncounterManagerComponent:LastThreat": "Tracks the last threatening actor",
    "CreativeRoyaleIslandPlayspace:ActorMemoryTracker": "Tracks the memory of streamed in objects on the client. Used to limit placement of devices",
    "FortPlayerStateAthena:HumanKillScore": "Tracks the number of human kills for the player (vs bot kills)",
    "FortGameStateZone:NumSurvivorsRescued": "Tracks the number of survivors rescued by all the players in the zone",
    "FortGameStateZone:NumSurvivorsSpawned": "Tracks the number of survivors spawned in the zone",
    "FortGameStateZone:NumSurvivorsDead": "Tracks the number of survivors who died in the zone",
    "FortControllerComponent_InventoryService:GlobalCurrencyTrackedData": "Tracks the player's total earned GlobalCurrency as well as their transactions and balance history",
    "FortAthenaMutator_Cobalt:bClientPlaylistTimerStarted": "Tracks the playlist timer initialization to let the client know if the timer UI should be shown or not",
    "EncounterManagerComponent:ReservoirActor": "Tracks the reservoir actor for this encounter",
    "LivingWorldEncounterPrefab:ReservoirActorOverride": "Tracks the reservoir actor override for this prefab",
    "FortSurfaceTrackingComponent": "Tracks the surface type that the pawn is standing on",
    "FortAthenaMutator_Heist:JewelHeldByTeamMap": "Tracks the time that each team is carrying the Jewel",
    "FortAthenaMutator_Chrome:FinishedPlayerStates": "Tracks the various player states that have reached the finish line.",
    "FortAthenaMutator_Chrome:ChromeSquadStarts": "Tracks the various squad start actors that are available for use.",
    "GlobalCurrencyTrackedData:CurrencyDataPerPhase": "Tracks time, player position, and balance at the end of each phase",
    "VictoryCrownAccountData:total_royal_royales_achieved_count": "Tracks total number of 'royal' royales this user has achieved (wins whilst wearing a crown)\nCan be used to drive 'Royal Royale Flex' Emote behaviour",
    "VictoryCrownAccountData:total_victory_crowns_bestowed_count": "Tracks total number of times the user has won a game and met the requirements to be bestowed a victory crown\nCan be used to drive 'Crown Flex' Emote behaviour",
    "FortAthenaMutator_Rounds:RoundPhase": "Tracks where we are in the overall flow of the match",
    "FortPlayerParachute:bGliderFullyLoaded": "Tracks whether all of the assets required for this glider have loaded and been fully initialized",
    "FortPlayerStateAthena:PersistenceErrorType": "Tracks whether player inventories have some problem that needs to be shown on the UI for players",
    "FortCurieNavRelevantSpatialGrid": "Tracks which spatial grid cells (sized to match building grid) have a dangerous element active in them for updating navmesh",
    "FortNevadaVehicle:TractorBeamAppliedForceMagnitude": "Tractor beam applied force magnitude",
    "TowhookParams:TractorBeamSideSpringDamping": "Tractor beam side spring damping constant",
    "TowhookParams:TractorBeamSideSpringStiffness": "Tractor beam stiffness constant",
    "TowhookParams:TractorBeamUpSpringStiffness": "Tractor beam stiffness constant",
    "TowhookParams:TractorBeamUpSpringDamping": "Tractor beam up spring damping constant",
    "EGliderTrailActivationMode.FullyDeployed": "Trail effect will be activated as soon as the glider is fully deployed according to its animation",
    "EGliderTrailActivationMode.AutoActivate": "Trail effect will be activated as soon as the glider mesh becomes visible",
    "EGliderTrailAttachmentMode.GliderMesh": "Trail effect will be attached to the main glider mesh",
    "EGliderTrailAttachmentMode.PlayerPawn": "Trail effect will be attached to the player pawn mesh",
    "EGliderTrailActivationMode.None": "Trail effect will be spawned but not activated. Useful if you want to activate a trail via Blueprints",
    "FortAnimNode_Flap:TargetComponent": "Transform component to use as input",
    "SourceDriver:SourceComponent": "Transform component to use as input",
    "FortChaseCameraHelper:PivotToViewTarget": "Transform for the Pivot, in the ViewTarget's space. This is the point the camera rotates around.",
    "BuildingContainersArrayEntry:Transform": "Transform from the Building Container",
    "SpawnBuildingActorParameters:SpawnTransform": "Transform of Actor to spawn",
    "SpecialActorTransform": "Transform of a special actor, separated from the rest of the data as it changes more frequently for moving actors.",
    "DeferredActorData:BuildingTransform": "Transform of the actor",
    "LevelSaveRecordCollectionItem:Transform": "Transform of the save record content relative its parent.",
    "BuffetBubblesReplicatedData:RelativeTransform": "Transform relative to the follow actor",
    "FortCharacterMovementMutatorComponent:BuffetBubblesIntroTargetTransform": "Transform that we will move toward",
    "FortGameplayCueNotifyAthena_AIFleeState:SpriteMeshTransform": "Transform to apply when attaching SpriteMeshComponent",
    "EnvironmentBuildingRestorationRecord:ActorTransform": "Transform to spawn the actor with",
    "EDeployableTurretState.Transforming": "Transforming into turret on deploy",
    "FortSpecialActorReplicationInfo:SpecialActorTransforms": "Transforms of moving special actors. Entries are added as soon as an actor location or yaw changes.",
    "FortCurieUpdraftActor:ActorToPreexistingGravityMultiplierMap": "Transient actor to gravity multiplier map so that gravity multipliers can be restored to their previous values",
    "FortNavLinkContainer": "Transient actor used to hold all navigation links created by FortNavGraph (static terrain)",
    "FortAvailableMissionAlertData:ItemDefinitionRefCache": "Transient cache of item definition references",
    "FortAvailableMissionData:ItemDefinitionRefCache": "Transient cache of item definition references",
    "FortGameModeOutpost:OwnerItemRefundCache": "Transient cache of items to grant to the outpost owner from a version-based refund",
    "BGAConsumableSpawner:ConsumablesToSpawn": "Transient cache of results from rolling against the SpawnLootTierGroup; Used to spawn actual consumable actors",
    "FortGameUserSettings:bAllowElectraPlayerDownloadOverride": "Transient override of bAllowElectraPlayerDownload",
    "FortGameUserSettings:bAllowFullGameDownloadOverride": "Transient override of bAllowFullGameDownload",
    "FortNavPathRendererComponent:PathVFXComponent": "Transient pointer to the Niagara component containing the VFX system",
    "FortGameSession:CurrentSessionParams": "Transient properties of a session during game creation/matchmaking",
    "BuildingContainer:SearchLootTierChosenQuotaInfo": "Transient quota information sourced from the world manager if this actor is selected for the quota system",
    "BuildingSMActor:DestructionLootTierChosenQuotaInfo": "Transient quota information sourced from the world manager if this actor is selected for the quota system",
    "FortGameUserSettings:bUserRenderingAPIWasMigratedThisSession": "Transient variable to flag when users have gone through a forced RHI migration (e.g. Ch4)",
    "FortMission:ConfigData": "Transient, instanced configuration data for the mission",
    "FortAnimWorldStriderComponent:WalkPlayRateValue": "Transients",
    "FortAnimInput_TurnCorrection:YawCorrectionOffset": "Transients // Offset to apply to the root bone in the anim graph.",
    "TurnTransitionData:PriorityLevel": "Transition Priority Level. Highest wins.",
    "EFortAthenaPlayContextualAnimExecutionMethod.TransitionAllActors": "Transition a single actor in an interaction to a different section",
    "EFortAthenaPlayContextualAnimExecutionMethod.TransitionSingleActor": "Transition all the actors in an interaction to a different sections",
    "FortMeleeDeflectAnimData:ExitToGuardAnim": "Transition animation from a deflection back to guard.",
    "FortMeleeDeflectAnimData:EntryFromGuardAnim": "Transition animation from guard to deflecting an attack",
    "FortMeleeDeflectTransitionAnimData:TransitionAnim": "Transition animation from the current deflection to the next deflection.",
    "EFortTileEdgeType.BorderTransitionSingle_5": "Transition between border and outer",
    "EFortTileEdgeType.BorderTransitionDouble_6": "Transition between outer, to border, then back to outer.",
    "FortScoutDroneDiveTransitionData": "Transition data for easing in and out of velocity change",
    "EFortTileEdgeType.Transition_2": "Transition edge",
    "EFortSynchedActionEndMovementMode.PhysFalling": "Transition to PhysFalling after the synched action",
    "EFortSynchedActionEndMovementMode.PhysWalking": "Transition to PhysWalking after the synched action",
    "EFortGameFeatureState.Preloading": "Transitioning from available into Preloaded, may be doing some async loading",
    "FortMeleeDeflectAnimData:TransitionsToNextDeflection": "Transitions to more deflections while in this deflection.",
    "FortCreativeLinearMoverComponent:TranslationMovementData": "Translation movement data that the server / client uses to execute / simulate translation movement.",
    "TrapItemDefintionDesignerData:TransmogSacrificeForm": "Transmog sacrifice data table",
    "EFortBuildingType.Trap": "Trap",
    "BuildingSMActor:OnTrapPlacementChanged": "Trap has been placed on SMActor",
    "TInteractionType.IT_TrapPlacement": "Trap placement",
    "EKeepContainerType.Workshop": "Traps of choice",
    "ESyncAnimBeatTo.Now": "Treat song start as beat one",
    "ESyncAnimBeatTo.Num": "Treat the last beat as beat one for the animation.",
    "ESyncAnimBeatTo.PrevBeat": "Treat this moment as beat one - meaning it might not fall on a beat",
    "BeginGroupTeleportParams:bFadeSound": "Trigger an audio fadeout along with the screen fade.  We automatically get an audio fade-in when the screen fades in.",
    "BuildingTrap:TriggerComponents": "Trigger box component",
    "BuildingProp_CreatureManager:CreatureAIDiedTriggerComponent": "Trigger message component responsible for sending channel message when an AI of the matching type of this manager has died.",
    "FortGameState:ScriptedActionManager": "Triggered action manager, global for entire game. Not replicated as events are handled on either client or server",
    "FortAthenaMutator_Crucible:OnCrucibleLatestCourseResultsUpdated": "Triggered on clients when LatestCourseResults have been replicated down by the server, specifically useful for replays to display latest results on timers/scoreboards",
    "FortAthenaMutator_Crucible:OnCrucibleLeaderboardUpdated": "Triggered on clients when any leaderboard state has been updated, used to notify Blueprint display logic of leaderboards of the need to update",
    "FortAthenaMutator_Crucible:OnCrucibleParticipantBestTimesUpdated": "Triggered on servers and clients when new best Crucible stats are available, either through new top scores being achieved during current run or stats have been retrieved from stats",
    "CreativeFunctionalTestConditionComponentBase:OnConditionSatisfiedChange": "Triggered when \"condition satisfaction\" has changed",
    "VoteListenerComponent:OnVoteSessionSetupEvent": "Triggered when a new voting session is about to begin.",
    "RockVehicleAbility_Supersonic:OnTrailsDeactivate": "Triggered when the parent vehicle falls below supersonic speed, or leaves the ground while at supersonic speed (Used for wheel trails FX)",
    "RockVehicleAbility_Supersonic:OnTrailsActivate": "Triggered when the parent vehicle is at supersonic speed, and on the ground (Used for wheel trails FX)",
    "AccoladeTriggerPerMinute:Tpm": "Triggers per minute for each grouping",
    "PlayspaceComponent_SpatialActorTracker:bCheckOverlapsOnStartup": "Triggers this components to do an initial scan on actors at startup by using the Gameplay Volume Overlap component.\nOnly picks up actors that have Triggers Overlap Events set to true.",
    "PlayspaceComponent_SpatialActorTracker:bSceneQueryOnStartup": "Triggers this components to do an initial scan on actors at startup by using the Gameplay Volume components bounding box\nto grab ALL actors within a basic shape style. More expensive than Check Overlaps On Startup.",
    "EFortTextureDataSlot.Tertiary": "Trim and misc",
    "EColorBlindMode.Tritanope": "Tritanope(blue weak / bind)",
    "BuildingActor:bUseHotSpotAsMoveGoalReplacement": "True by default, if False AI won't be allowed to create a HotSpot and move to it when this class' instance is the requested Move Goal",
    "FortEventResponderComponent:bClientRespondToEvents": "True by default, this component will respond to matching MeshEvents on clients",
    "FortEventResponderComponent:bServerRespondToEvents": "True by default, this component will respond to matching MeshEvents on gameplay servers",
    "RockVehicleState:bWheelsOnGround": "True if 3 or more wheels have contacts",
    "BuildingSMActor:bNeedsMIDsForCreative": "True if Creative mode currently needs animated MIDs for this mesh because the mesh is either hovered or selected locally or by a remote player. Also used for Chrome override MID.",
    "FortAthenaNPCLoopStateComponent:bSpawnOutsideTheLoop": "True if NPC should spawn outside the loop",
    "FortGameStateOutpost:bOutpostStatusAllowsMissionStart": "True if Outpost is being saved or is in the middle of an ongoing cascading disassembly sequence",
    "FortWeapon:bWeaponFireCustomAudioTriggered": "True if PlayWeaponFireCustomAudio has been called for a persistent fire weapon.",
    "FortGameplayCueCameraShakeInfo:bCalculateUserPlaySpaceRotationFromLocation": "True if UserPlaySpaceRotation should be calculated dynamically oriented from Target location to GC Location.\nMust have PlaySpace set to UserDefined to work.\nWhen this is enabled, anything entered into UserPlaySpaceRotation parameter is overridden.",
    "PawnBountyInteractionInfo:bBountyAvailable": "True if a bounty is available for the InstigatorPawn.",
    "FortAthenaCreativePortal:bIsPlotLoadTimeOut": "True if a creative island is taking too long to load",
    "FortPawnComponent_SpeechBubble:bIsLocalPlayerWithinSpeechBubbleDrawDistance": "True if a local player is in SpeechBubbleMaxDrawDistance radius",
    "FortPawn:bPrimaryInputQueued": "True if a primary fire input has been queued",
    "FortMantisReplicatedAnimInstanceInfo:bIsTechniqueActive": "True if a technique is currently running.",
    "BuildingSMActor:bHiddenDueToTrapPlacement": "True if a trap like the mounted turret has hidden this building actor",
    "PawnBountyInteractionInfo:bBountyInProgress": "True if a valid target was found for the granted bounty quest.",
    "FortPlayerController:bAutoRunOn": "True if auto-run is currently active for this player",
    "FortAthenaAIBotController:bForceHolsterWeapon": "True if bot is forced to unequip current weapon when no target.",
    "FortPlayerControllerFrontEnd:bUnlockAllZones": "True if cheat enabled to show all zones",
    "FortPlayerController:bIsClientTimingOut": "True if client has not received anything from the server within time specified by ClientBlockInputTimeout.",
    "FortAIController:bUsingNavMesh": "True if current movement should follow nav mesh path",
    "RandomDayphaseFXState:bRandomSelectionAlreadyHappened": "True if dice were already rolled to determine if this component should be spawned for this run of enabled dayphases",
    "FortPlayerController:bSuppressEventNotifications": "True if event notifications are suppressed",
    "FortWeapon:bIsPlayingFireFX": "True if fire effects are currently playing",
    "FortWeapon:bFireFXTriggered": "True if fire effects have been triggered",
    "FortWeaponRanged:bPersistentFireFX": "True if firing effects are looping, rather than spawned per weapon use",
    "JackalInPersistent:bBoosting": "True if game thread determined that the vehicle should be boosting",
    "FortTooltipDisplayStatInfo:bLowerIsBetter": "True if higher values of this stat are better for the player, false otherwise. This only applies to stats based on Tokens.",
    "FortNDCImpactInfo:bSimple": "True if impacts from this weapon will be very high frequency and should be simplified as much as possible to maintain reasonable performance.",
    "FortControllerComponent_QuickEdit:bEnabled": "True if quick editing is enabled",
    "FortWorldManager:bSavingEnabled": "True if saving should be enabled at all, modifiable at runtime and in defaults",
    "FortDecoHelper:CurrentPlacementType": "True if snapping to building grid",
    "FortAthenaVehicle:bIsTouchingGroundWithoutWheels": "True if some part of the vehicle is touching the ground, but the wheels are still not touching anything",
    "FortPlayerController:bForceJogHeld": "True if the \"Force Jog (Hold)\" action is being held down.",
    "FortPlayerController:bForcingJogFromToggle": "True if the \"Force Jog (Toggle)\" action has been toggled on.",
    "FortSpeechBubbleInfo:bIsSpeaking": "True if the AI is speaking (SpeechBubble must be displayed)",
    "FortNPCConversationParticipantComponent:bCanStartConversation": "True if the NPC is in the good state to start a conversation",
    "RiderComponent:bIsPetting": "True if the Rider is Petting his creature",
    "CreativeActorMetaData:bCostOverridden": "True if the actor has an overridden cost",
    "FortGameplayAttributeData:bIsBaseClamped": "True if the attribute is currently clamped; false otherwise",
    "FortGameplayAttributeData:bIsCurrentClamped": "True if the attribute is currently clamped; false otherwise",
    "FortExposedAssetProviderCachedVersion:bImplementsExposedAssetProvider": "True if the class actually implemented IFortExposedAssetProvider.",
    "FortPlayerController:bHasClientFinishedLoading": "True if the client has finished loading everything it needs to",
    "ValkyrieProjectSizeStats:bIsValid": "True if the data stored in here has been fully calculated and is valid to use",
    "ServiceRegistrySource_ServiceTableRules:bPrecacheTable": "True if the entire table should be loaded into memory when the source is loaded, false if the table is loaded on demand",
    "GameplayFeedbackEventInfo:bTeamBasedEvent": "True if the feedback event cares about team affiliations",
    "FortFocusedBuildingInfo:bIsInteractable": "True if the focused building is a player-built piece that can be interacted with",
    "FortPlayerParachute:bCustomizedPreview": "True if the glider has called CustomizePreviewInstance",
    "FortLootTierData:bAllowBonusLootDrops": "True if the item allows bonus loot to be dropped based on external factors, false if bonus loot is never dropped",
    "EFortItemEntryState.JustCrafted": "True if the item was just created via in-zone crafting",
    "FortWeapon:bUsingSecondaryFireAudio": "True if the last sound played on the FireAudioChannels was from secondary fire",
    "FortTimeOfDayManager:bTimeStarted": "True if the match has started",
    "FortGameFeatureOptionalInstallStatus:bContentReady": "True if the optional content for this feature is ready",
    "FortPawnComponent_PassiveHealer:bPassiveHealingRunning": "True if the passive healing behavior is enabled",
    "PlayerPawnShallowWaterVolumeData:bIsInWaterVolume": "True if the pawn CapsuleComponent's PhysicsVolume is an AWaterVolume_Shallow",
    "FortMantisTargetData:bIsLockedOn": "True if the player has a lock on target.",
    "FortPlayerController:bIsPlayerActivelyMoving": "True if the player is currently actively moving (inertia doesn't count), refreshed once per tick",
    "RidableControlRuntimeData:bIsRidingPetting": "True if the player is petting his creature during riding",
    "BattlePassLandingPageButtonDisplayBehaviorData:bIsDisplayActive": "True if the players owns an active subscription",
    "FortMissionRewardInfo:bIsMissionAlertReward": "True if the reward is coming from a mission alert; false otherwise",
    "FortCreativeRoundSettings:bIsRelevantThisRound": "True if the round settings should be used this round",
    "FortAthenaMutator_Uranium:bRoundTimerStarted": "True if the round timer has started for this round.\n used in situations where we want to start the round timer, but it is possible that it could have already started",
    "FortPlayerController:bHasServerFinishedLoading": "True if the server has finished loading everything it needs to",
    "FortCustomRepNodeClassMapping:bShouldDisableSquadNodes": "True if the squad node would need to be turned off in order for our new node to work properly (For example when routing Pawn classes)",
    "FortGameUserSettings:bShowTemperature": "True if the stat Temperature display should be shown",
    "FortGameUserSettings:bShowFPS": "True if the stat fps display should be shown",
    "FortCreativeMoveTool:bIsScalingInsteadOfRotating": "True if the user should have scaling be active, which clobbers over the rotating keys.",
    "CreativeToolPersistentData:bIsScalingInsteadOfRotating": "True if the user should have scaling be active.",
    "FortCreativeMoveTool:bIsPullPressed": "True if the user wants to pull the tractor beam toward",
    "FortCreativeMoveTool:bIsPushPressed": "True if the user wants to push the tractor beam outward",
    "FortCreativeMoveTool:bIsRotateClockwisePressed": "True if the user wants to rotate clockwise",
    "FortCreativeMoveTool:bIsRotateCounterclockwisePressed": "True if the user wants to rotate counterclockwise",
    "FortCreativeMoveTool:bIsScaleDownPressed": "True if the user wants to scale down our object",
    "FortCreativeMoveTool:bIsScaleUpPressed": "True if the user wants to scale up our object",
    "FortTournamentStatInfo:bIsDeltaCount": "True if the value is a delta rather than accumulative.",
    "FortExposedContentValidatePackagesResult:bHasAnyErrors": "True if there are any errors (general or per-package) within this validation result",
    "FortExposedContentValidatePackagesResult:bHasAnyWarnings": "True if there are any warnings (general or per-package) within this validation result",
    "PendingSpawnInfo:bDebugSpawnedAI": "True if this AI is being spawned for debug purposes such as a cheat",
    "FortAIDirector:bNightActive": "True if this AIDirector is spawning night time waves.",
    "BotPOI:bEnabled": "True if this BotPOI is enabled",
    "BotPOIDebugInfo:bEnabled": "True if this BotPOI is enabled",
    "TDMPlayerStandingInfo:bIsLocalPlayer": "True if this FTDMPlayerStandingInfo is for the local player.",
    "FortHitchhikerComponent_Telemetry:bWasInfectedAtSpawn": "True if this Hitchhiker was spawn already infected",
    "FortControllerAIBotComponentTelemetryData_PassiveHealer:bIsPassiveHealer": "True if this NPC is a Passive Healer",
    "FortControllerAIBotComponentTelemetryData_Disguise:bWasDisguised": "True if this NPC was disguised",
    "FortControllerAIBotComponentTelemetryData_Disguise:bWasRevealed": "True if this NPC was revealed",
    "BotPOI:bIsMainPOI": "True if this POI is used as a Main POI",
    "BotPOIDebugInfo:bIsMainPOI": "True if this POI is used as a Main POI",
    "FortScriptedAction:bIsActive": "True if this action is active",
    "BuildingActor:bAllowInteract": "True if this actor allows interaction",
    "BuildingGameplayActor:bShowInteractKeybind": "True if this actor shows keybind on interaction prompt",
    "FortAthenaBeaconComponent:bIsConsumed": "True if this beacon was already consumed by a bot",
    "FortVehicleFuelComponent:InitializeWithStartingFuel": "True if this component should handle setting its own starting fuel. Set to false if the owner vehicle or a vehicle manager wants to set the fuel instead.",
    "BuildingWeakSpot:bActive": "True if this is currently active and not in the pool",
    "BuildingWeakSpot:bFadeOut": "True if this is currently fading out",
    "BuildingWeakSpot:bHit": "True if this is playing the hit animation",
    "SavedSpectatorCameraShot:bIsShotStart": "True if this is the beginning of a shot and we should scrub to the timecode. False to enable going to this camera regardless of playback time.",
    "FortGameFeatureStatus:IsActive": "True if this is the state we are actively in, only valid in game",
    "FortGameFeatureStatus:IsPendingActive": "True if this is the state we are transitioning to, only valid in game",
    "EFortItemEntryState.DurabilityInitialized": "True if this item does not need it's durability initialized, ie it has already been set to a valid value.",
    "FortLabradorComponent_Telemetry:bWasAwake": "True if this labrador was awake",
    "UserOptionDefinitionStringMetaData:bLocalizeValue": "True if this option value should be localized for user-generated content.",
    "UserOptionDefinitionStringMetaData:bSanitizeValue": "True if this option value should be run through the content sanitizer.",
    "UserOptionDefinitionTextMetaData:bSanitizeValue": "True if this option value should be run through the content sanitizer.",
    "UserOptionDefinitionStringMetaData:bValidatePersistentID": "True if this option value should be validated as a persistent ID.",
    "UserOptionDefinitionTextMetaData:bValidatePersistentID": "True if this option value should be validated as a persistent ID.",
    "FortPlayerStateAthena:bIsContributingToOverbudgetHeatmap": "True if this player is currently holding an asset that is causing the heatmap to go over budget",
    "FortPlayerStateAthena:bIsAnAthenaGameParticipant": "True if this player is participating in BR",
    "EndZoneScoreAndAwards:bResultsPendingSave": "True if this player's results are waiting to be saved",
    "FortProjectileBase:bCanBePickedUpWhenStopped": "True if this projectile can be picked up when stopped",
    "FortChallengeBundleQuestEntry:bIsPrerequisite": "True if this quest is a prerequisite - ONLY USED FOR VISUAL DISPLAY",
    "FortGrantedQuestData:bQuestLoadedFromPersistence": "True if this quest was loaded from a backend service",
    "FortTeamMemberInfo:bHasBoostXp": "True if this team member has boost xp",
    "FortTeamMemberInfo:bIsInZone": "True if this team member has entered a zone",
    "FortTeamMemberInfo:bHasRestXp": "True if this team member has rest xp",
    "FortTeamMemberInfo:bPartyLeader": "True if this team member is the party leader",
    "FortTheaterMapTileData:CanBeMissionAlert": "True if this tile is allowed to have a mission alert; false otherwise",
    "UrgentQuestSettings:bQuestCompleteOnTimeExpiration": "True if this urgent quest should be completed successfully when it's event time expires (e.g. survival quest).\n if False, will treat the quest as failed on timer expiration (e.g. Do X within time limit)",
    "UrgentQuestData:bQuestCompleteOnTimeExpiration": "True if this urgent quest should be completed successfully when it's event time expires (i.e. survival quest).",
    "UrgentQuestData:bDisplayHUDData": "True if this urgent quest should display the urgent quest HUD data when it's granted.",
    "UrgentQuestSettings:bDisplayHUDData": "True if this urgent quest should display the urgent quest HUD data when it's granted.",
    "EFortItemEntryState.FromDroppedPickup": "True if this was from a pickup dropped from a player's inventory",
    "EFortItemEntryState.FromGift": "True if this was gifted from another player",
    "EFortItemEntryState.FromRecoveredBackpack": "True if this was picked up from the player's backpack",
    "FortWeapon:bHasCachedAdditionalMeshes": "True if this weapon has already cached any additional weapon meshes so we don't have to keep searching if we've found them all.",
    "FortWeaponRanged:bTracerFXSupportsMultipleSequentialTracers": "True if tracer beams use a Niagara system that supports multiple sequential tracer beams",
    "FortWeaponRanged:bTracerFXSupportsMultipleSimultaneousTracers": "True if tracer beams use a Niagara system that supports multiple simultaneous tracer beams",
    "FortAthenaAntelopeVehicle:bIsBoosting": "True if vehicle is boosting. Made UPROPERTY for async marshaling",
    "AntelopeInPersistent:bIsBoosting": "True if vehicle should be boosting",
    "CollisionResponseBaseData:bEnableTelemetry": "True if want to enable telemetry for this damage pair. (Only effective when a Fort player controller takes damage.)",
    "FortPassiveHealerPawnInfo:bEmoteStarted": "True if we already received the StartEmote callback from this pawn",
    "FortGameUserSettings:bAllowCellularDownload": "True if we are allowed to download data over cell on mobile",
    "FortPlayerController:bIsSavingGadgetLoadout": "True if we are currently saving the homebase gadget loadout",
    "FortGameFeatureStatusBase:bIsUsingBackgroundDownloads": "True if we can download while the app is backgrounded",
    "FortSpeechBubbleInfo:bIsValidSelectedText": "True if we have a valid selected text",
    "FortAICombatTokenConsumerComponent:bHasToken": "True if we hold a token from CurrentTargetTokenProvider",
    "FortPickupLocationData:bPlayPickupSound": "True if we should play a pickup sound when this pickup data is replicated",
    "FortGameUserSettings:bAllowDownloadHighResMips": "True if we want the high-rez mips to be downloaded",
    "FortGameUserSettings:bAllowFullGameDownload": "True if we want to allow downloading the full game.  Has no effect unless bAllowKairosDownload is also true.",
    "FortGameUserSettings:bAllowElectraPlayerDownload": "True if we want to allow downloading the necessary data for the ElectraPlayer.",
    "FortGameUserSettings:bAutoLaunchFullGame": "True if we want to automatically start the full game when downloaded",
    "FortCustomRepNodeClassMapping:bShouldDisableHighFrequencyPawnRouting": "True if we want to disable High Frequency Pawns being routed to the AlwaysRelevant node (We normally want to disable it if we're rerouting Pawn classes)",
    "EFortItemEntryState.ShouldShowItemToast": "True if we want to show an item toast, false if not",
    "EFortItemEntryState.DoNotShowSpawnParticles": "True if we want to suppress spawn particles/sound",
    "CustomCosmeticModifierBase:bRegisteredForWeaponChanges": "True if we'll know when the pawn's weapon changes.",
    "BuildingActor:bRegisteredForDayPhaseChange": "True if we're actively waiting for a day phase change event",
    "CustomCosmeticModifierBase:bRegisteredForDayPhaseChange": "True if we're actively waiting for a day phase change event",
    "CustomCosmeticModifierBase:bRegisteredForSkydiving": "True if we're actively waiting for a skydiving events",
    "CustomCosmeticModifierBase:bRegisteredForTargetingOrFirstPersonCamera": "True if we're actively waiting for a targeting/first person camera event",
    "FortProjectileMoveComp_Drunk:bDoingTimeBasedBlendOut": "True if we're doing a time based blend out.",
    "FortScriptedActionManager:bIsProcessingClientEvent": "True if we're in the middle of processing a client event, stops us from being recursive",
    "FortActiveMontageDecisionWindow:bAlreadyProcessedInput": "True if we've already processed input, don't reprocess at end of window",
    "CustomCosmeticModifierBase:bRegisteredForCurieChanges": "True if we've registered for curie events",
    "FortAthenaJackalVehicle:bShouldCorrectYaw": "True if yaw rotation of the vehicle needs to be corrected",
    "FortPlayerController:bPlaceHeldObjectPressed": "True indicates we pressed the interact place button while holding a held object",
    "FortTheaterMapTileData:bDisallowQuickplay": "True to force quickplay to be blocked, regardless of all other settings",
    "FortNPCConversationParticipantComponent:bConversationModeActive": "True when a player is close by or actively engaged in a conversation with the NPC.",
    "FortAthenaMutator_Uranium:CheckpointTeleportComplete": "True when a teleport is complete (but players are not necessarily released into gameplay). Access with SetCheckpointTeleportComplete() / IsCheckpointTeleportComplete().\nThis and CheckpointTeleportPlayersReleased above are used to tell the client what to do after a teleport sequence.",
    "FortAthenaMutator_Uranium:CheckpointTeleportPlayersReleased": "True when players are released into gameplay after a teleport. Note that this does not get set for teleports not using a post teleport hold.\n* Access with SetCheckpointTeleportPlayersReleased() / AreCheckpointTeleportPlayersReleased()",
    "JackalOutPersistent:bShouldCorrectYaw": "True when the Yaw is being corrected on the physics thread. Used to update steering on game thread",
    "FortPlayerPawn:bIsSwimmingAnimLayerPendingRemove": "True when the swimming layer is still linked for blending out purpose but about to time out and be removed (so that we don't relink it when changing anim instance class)",
    "FortLobbyBeaconState:bWorldRecordLoaded": "True when the world record has been loaded and is ready on the server",
    "PartyMemberLobbyState:HasPreloadedAthena": "True when this party member has Athena content fully loaded",
    "FortProjectileMoveComp_Drunk:bDrunkDirectionChange": "True when we should do a drunk direction change.",
    "BuildingSMActor:bIsInitiallyBuilding": "True while we are initially building. False when we have been built. Used to determine if we are repairing or building.",
    "EFortFeedbackSelectionMethod.FFSM_Priority_IRTE": "Try and play in the order of priority: Instigator, Recipient, Team Witness, Enemy Witness",
    "ELeashReturnLocationMode.ReturnToCenterAvoidObstacle": "Try returning to leash center and avoid obstacles",
    "WaterControlParams:MaxImmersionDepth": "Try to avoid going any lower than this immersion depth (like when running in to ramps above).",
    "SmartBuildingActor:bTryToConnectToPieceUnderPlayerFeet": "Try to connect this piece to the piece the player is standing on, if any",
    "EWorldItemDropBehavior.DropAsPickupDestroyOnEmpty": "Try to drop as a pickup, but destroy instead if the item being dropped is empty (persisted through zero count)",
    "EWorldItemDropBehavior.DropAsPickup": "Try to drop the item as a world pickup",
    "FortAthenaVehicle:DebugDestroyLogCount": "Trying to capture a bad state after we should be destroyed.\nThis keeps us from spamming the log but also being able to see if this section of code is the issue.",
    "FortAnimInput_TurnCorrection:CharacterMeshYawOffset": "Tunable to handle Characters that have their mesh offset from facing direction in their Blueprint.",
    "FMDeviceCable:CableStubLength": "Tuning variables",
    "EventDependentTag": "Tuple for relating arbitrary tags to Calendar event flags. Used to automatically change theater tags for spawning seasonal husks.",
    "FortPlayerController:bTurboBuild": "Turbo building means we'll continually try to build a piece while the button is held down.",
    "FortPlayerController:bCreativeTurboDelete": "Turbo delete means we'll continually try to delete a piece while the button is held down.",
    "FortGamepadSettings:AimAssistPullMaxRate": "Turn rate cap on amount of aim assist pull.",
    "FortTouchAimAssistSettings:PullMaxRate": "Turn rate cap on amount of aim assist pull.",
    "FortGamepadSettings:EditModePullMaxRate": "Turn rate cap on amount of edit mode aim assist pull.",
    "EFortThreatDeactivationType.Dormant": "Turn the threat cloud off (hide)",
    "MusicalPlayerRuntimeState:Debug": "Turn this on to update the standard state in real-time",
    "FortAIPawn:TurnTransitionGameplayAbilityTag": "Turn transition Ability Gameplay Tag",
    "DigestedVehicleDriving:TurnInPlace": "Turn-in-place",
    "VehicleDriving:TurnInPlace": "Turn-in-place",
    "VehicleTurnInPlace:IdleAngleEnd": "Turn-in-place idle angle end",
    "VehicleTurnInPlace:MovingAngleEnd": "Turn-in-place moving angle end",
    "EBuildingGameplayActorSentry_State.LocatingDamager": "Turning to the location of damage.",
    "FortPlayerController:bRequireTraceToExistingBuildingToSetContext": "Turns out this blocks editing pieces that are partially in the floor or if you have your feet too close to the floor, should probably remove this feature in the future\nOriginally a mitigation for FORT-232550 which hasn't resulted in a major incident yet",
    "EBuildingGameplayActorSentry_State.Dormant": "Turret is currently doing nothing, same behavior as deactivated.",
    "EBuildingGameplayActorSentry_State.Deactivated": "Turret is disabled, same behavior as dormant.",
    "EBuildingGameplayActorSentry_State.ReturningToIdle": "Turret is rotating back to one of its default positions.",
    "DeployableTurretBPAnimData:AimRotation": "Turret's aim rotation",
    "DeployableTurretBPAnimData:State": "Turret's state",
    "EFrontEndCamera.TutorialPhaseOne": "Tutorial phases",
    "EFortTheaterType.Tutorial": "Tutorial theater, only available during tutorial",
    "FortPickup:PickupSourceTypeFlags": "Type flags for sources for this pickup.  Used only for analytics.  Because pickups can combine, more than one\ntype can be set at once.",
    "PendingSpawnInfo:AIType": "Type of AI we are spawning",
    "EAbilityHistoryEventType": "Type of GAS event - the thing that happened to the item.",
    "BotPOI:Type": "Type of POI (what it was generated by)",
    "BotPOIDebugInfo:Type": "Type of POI (what it was generated by)",
    "AshtonStoneData:StoneType": "Type of Stone this is",
    "AshtonStoneState:StoneType": "Type of Stone this is",
    "SavedCredentials:Type": "Type of account persisted",
    "FortAIAssignmentIdentifier:AssignmentType": "Type of assignment which indicates which list(s) must be searched to find the assignment.",
    "FortAthenaAIBotBuildDescriptor:BuildingType": "Type of building to build.",
    "KeepItemContainer:ContainerType": "Type of container",
    "ECosmeticMetaTagRequirementCategory": "Type of cosmetic used in meta tag requirements.\nDefined here as it is narrower than customization category or item type, and so we can avoid circular dependencies",
    "BattlePassOfferPurchaseRecord:CurrencyType": "Type of currency used for the purchase",
    "FortMovementLeans:BlendInType": "Type of curve to use when blending in",
    "FortMovementLeans:BlendOutType": "Type of curve to use when blending out",
    "FortMovementLeans:SettleBlendType": "Type of curve to use when blending towards settle weight",
    "GasEventHistoryItem:EventType": "Type of event (ability started, cancelled, etc)",
    "FortGameStateAthena:FriendlyFireType": "Type of friendly fire currently active (should be set by playlist and can be gameplay dependent)",
    "ECameraResetAxes": "Type of input action used",
    "EFortInputActionType": "Type of input action used",
    "EGyroButtonResponse": "Type of input action used",
    "FortCosmeticLockerSlotInformation:CustomizationCategory": "Type of item that can be held in this slot.",
    "FortGameUserSettings:ChosenLoginType": "Type of login chosen by user (Facebook/MCP/Google/etc)",
    "FortUnableToPerformData:MatchType": "Type of match for the tags in the Container",
    "EFortCreativeLinearMoverMode": "Type of movement to perform.",
    "FortDifficultyEncounterSettings:PacingMode": "Type of pacing wanted for the encounter",
    "RealitySaplingEnvQueryParam:Type": "Type of param, either int, float or bool.",
    "ECreativeMannequinAnalyticsInteractType": "Type of player interaction with a Creative Mannequin",
    "ProximityBasedGEDeliveryInfoBase:ProximityApplicationType": "Type of proximity-based application",
    "QuestItemDefinitionDesignerData:QuestType": "Type of quest for acquisition purposes",
    "FortWeaponComponent_RecoilCurve:RecoilBehaviorType": "Type of recoil behavior: update recoil with time or with weapon overheat",
    "FortUserCloudRequestPayload:RequestType": "Type of request",
    "FortDepositedResources:TemplateId": "Type of resources that has been deposited",
    "FortPlayspace:UserAcceptanceType": "Type of rules used for allowing a user in this Playspace",
    "CatalogItemPrice:SaleType": "Type of sale currently active (if any)",
    "AthenaScoreData:ScoringEvent": "Type of scoring event this data is describing",
    "PlayspaceComponent_SpatialActorTracker:SceneQueryShape": "Type of shape used to determine which actors are inside the playspace. Based on the Components Bounding Box of the\ngame play volume attached to the Playspace. This does not support complex collision as its root.\nThis should match the shape of your overlap component if you use it. For example, only use Capsule if you have set your\noverlap component to also be a capsule shape.",
    "AudioDynamicSoundData:SoundOverrideType": "Type of sound to apply override to",
    "EDynamicSoundOverride": "Type of sound to dynamically adjust audio data",
    "StateChangeData:StateChangeType": "Type of state change that the state is going through (e.g BeginState or EndState)",
    "FortScriptedActionParams:SourceType": "Type of thing that granted this",
    "EFortCreativeLinearMoverTranslationType": "Type of translation to perform.",
    "FortCreativeLinearMoverComponent:TranslationType": "Type of translation to perform.",
    "BuildingActor:WeaponResponseType": "Type of weapon damage this building actor responds to",
    "FortAthenaVehicle:WeaponResponseType": "Type of weapon damage this building actor responds to",
    "FortPhysicsPawnObject:WeaponResponseType": "Type of weapon damage this building actor responds to",
    "FortScoutDrone:WeaponResponseType": "Type of weapon damage this building drone responds to",
    "FortProjectileBase:WeaponResponseType": "Type of weapon damage this projectile actor responds to",
    "FortMinigame:MinigameMapWidget": "Type of widget to display in the fullscreen map panel widget.",
    "FortCurieMaterialElementIntensityDecayMultiplier": "Type to allow data driven material decay multipliers",
    "EFabricUserOptionType": "Types of UserOptions can be automatically translated to MetaSounds types (see EMetasoundFrontendLiteralType)",
    "FortAthenaMutator_Uranium:ActorClassesToDestroy": "Types of actors we should destroy in DestroyActors()",
    "KeepItemContainer:ItemsInChoiceUI": "Types of items to be available to create for free if bShowChoiceUI is true",
    "EAthenaGameMsgType": "Types of messages to send when playing specific game modes",
    "BuildingGameplayActorChaser:PatrolAvoidObjectTypes": "Types of object to avoid patroling through",
    "CraftingUpgradeRule:UpgradeFlags": "Types of transient values to copy from the source item to the target items",
    "BuildingGameplayActorChaser:TargetObjectTypes": "Types to target",
    "FlightParams:AntigravityHorizontal": "Typically zero (for a plane which does not drop when cruising).\n              Percent gravity \"remaining\" at full speed lift.",
    "AttachableWheelsComponent": "UAttachableWheelsComponent\n\nThis component does not _need_ to be added to actors which have wheels attached\nto them, but can be used for cases where it's needed for some game feature to get\na list of wheels attached to a particular actor.",
    "FortPlayerStartupController": "UCLASS(Blueprintable, meta = (ChildCanTick))",
    "FMusicTimelineMapping.kTimelineMapping_FromStart": "UE4 4.24.1 change wants one enum value to be zero",
    "ELevelSaveRecordVersion.InitialUEFiveChange": "UE5",
    "EOnlineRegionSelection.Auto": "UEFN will detect the best region to use.",
    "FortNevadaVehicle": "UFO vehicle class",
    "FortPlayerStateZone:OnOvershieldVisibilityChanged": "UFUNCTION(Client, Reliable)\nvoid ClientSetOvershieldBarVisible(bool NewVisible);",
    "FortAICombatTokenConsumerComponent": "UFortAICombatTokenConsumerComponent : Component that can hold tokens from UFortAICombatTokenProviderComponent to avoid that too many AIs attack at the same time the same target.",
    "FortAIControllerPerksComponent": "UFortAIControllerPerksComponent\nComponent that handle the Activation and Cooldown of perks for an AI agent",
    "FortAthenaAIRuntimeParameters_AIBotLoopSettings": "UFortAthenaAIRuntimeParameters_AIBotLoopSettings\nRuntime settings for quest givers that have a specific behavior regarding in/between/out of the loop",
    "FortAthenaAICoverComponent": "UFortAthenaCoverComponent\nAllow the Controller to look for cover positions behind building actors",
    "FortAthenaLeashComponent": "UFortAthenaLeashComponent : Component used to setup a Leash on AI",
    "FortAttachableProjectileComponent": "UFortAttachableProjectileComponent:\nComponent to support projectiles that attach to their target. The attachment must be initiated by the projectile's\nauthority calling AuthorityAttachToActor typically in blueprint in response to the OnTouched event. The the attachment\nparams are replicated to other nodes. The exact attachment location is determined separately on each client based on\nthe hit location and the client's animation state. The attachment location on the server will be the target's origin.\nThis component can be used with AFortProjectileBase (which does uses the server side capsule collision volume for\ninitial hit detection), or the newer AFortProjectileAthena (which offers more precise hit detection using the owning\nplayer's mesh collision volume). Any other actor class with a ProjectileMovementComponent can utilize this component\nfor basic projectile attachment functionality.\nThe logic for this component is mostly ported from AFortAttachableProjectileDeprecated, which is now deprecated in\nfavor of this component. The motivation for pulling the logic into a component was to allow it to be shared amongst\ndifferent projectile actor types.\nNote that if we notice attachment latency especially with client side predicted or athena projectiles, we can refine\nthis algorithm. All attachment is initiated server side at the moment.",
    "FortAudioParameterComponent_Pawn": "UFortAudioParameterComponent_Pawn",
    "FortAudioParameterComponent_Weapon": "UFortAudioParameterComponent_Pawn",
    "FortButterCakeComponent_Telemetry": "UFortButterCakeComponent_Telemetry : Custom ButterCake Telemetry Component",
    "FortControllerComponent_EndMatchPersistence": "UFortControllerComponent_EndMatchPersistence is used to track information about a player that needs to be passed on to Mcp in the\nUFortQuestManager::EndBattleRoyaleMatchForPlayer() that is not necessarily about quests.  It is only created if there\nis data to send.",
    "EFakeKillRelevancyPlayerKillStep.Initiated": "UFortControllerComponent_FakeKillRelevancy has been told the player should die, but blueprint has not yet been informed",
    "FortControllerComponent_InputContextTracker": "UFortControllerComponent_InputContextTracker Tracks various active game contexts",
    "FortControllerComponent_SpyTechPerkSystem": "UFortControllerComponent_SpyTechPerkSystem",
    "FortControllerStateHandlerComponent": "UFortControllerStateHandlerComponent listens for state changes on actor controllers",
    "FortFootstepComponent": "UFortFootstepComponent - functions and data for handling footsteps on FortPawns",
    "FortGamepadSettings": "UFortGamepadSettings",
    "FortHitNotifySoundLibraryComponent": "UFortHitNotifySoundLibraryComponent",
    "InteriorAudioScanResults:BuildingGrid": "UFortInteriorAudioComponent_BuildingGrid",
    "InteriorAudioScanResults_BuildingGrid:Size": "UFortInteriorAudioComponent_BuildingGrid",
    "InteriorAudioScanResults:SphereTrace": "UFortInteriorAudioComponent_SphereTrace",
    "InteriorAudioScanResults_SphereTrace:BlockingHitRatio": "UFortInteriorAudioComponent_SphereTrace",
    "FortItemEntryAbilityData": "UFortItemEntrySubsystem\nUsed to store extra data for item entries.",
    "FortMantisPawnComponent": "UFortMantisPawnComponent\n\n    Pawn component that drives the mantis system.\n    Mantis abilities listen for events on this component.\n      - This component should NOT directly call into abilities.\n    This component does NOT replicate.  It relies on the ability for replication.\n The component activates when the technique sequence starts.\n The component deactivates when the technique sequence ends and is no longer processing saved character moves.",
    "FortMixModComponent": "UFortMixModComponent",
    "FortPawnComponent_AIBotPingCommand": "UFortPawnComponent_AIBotPingCommand : Component used to manage ping command orders on AI Bot",
    "FortPawnComponent_AIFormation": "UFortPawnComponent_AIFormation: Component pushed on AI to provide some relative locations to other AIs to allow them to follow it in formation",
    "FortPawnComponent_AIGroup": "UFortPawnComponent_AIGroup : Component use to store a group members list to be able to identify them and so communicate with them.",
    "FortPawnComponent_AIInventoryManagement": "UFortPawnComponent_AIInventoryManagement : Component that allows to override the inventory management",
    "FortPawnComponent_PingCommand": "UFortPawnComponent_PingCommand : Component use manage ping command order on AI",
    "FortPlayerControllerAthenaXPComponent": "UFortPlayerControllerAthenaXPComponent",
    "FortPointLightComponent": "UFortPointLightComponent allows overrides of various properties for the UPointLightComponent per platform",
    "FortSpotLightComponent": "UFortPointLightComponent allows overrides of various properties for the UPointLightComponent per platform",
    "FortPreferredItemSlotSettings": "UFortPreferredItemSlotSettings",
    "FortRootViewportLayoutInfo:RootLayout": "UFortRootViewportLayout*",
    "FortSidebarPanelSettings": "UFortSidebarPanelSettings",
    "FortSkydiveSoundLibraryComponent": "UFortSkydiveSoundLibraryComponent",
    "FortSoundCueTemplateDefaultSettings": "UFortSoundCueTemplateDefaultSettings - A data asset containing the\n  mapping between Fortnite SoundCueTemplates and their default settings",
    "FortTouchInputSettings": "UFortTouchInputSettings",
    "EFortUISpecialEvents": "UFortUISpecialEventSubsystem\nUsed to simplify special event communication /one-offs to different UI from different modules",
    "FortVehicleSoundComponent": "UFortVehicleSoundComponent - Base component for vehicle sound functionality",
    "FortVehicleSoundComponent_Speed": "UFortVehicleSoundComponent_Speed - Used for handling audio playback related to the speed of a vehicle",
    "FortVehicleSoundComponent_Surface": "UFortVehicleSoundComponent_Surface - Used for handling audio playback related to surfaces the vehicle is driving on",
    "FortWeaponComponent": "UFortWeaponComponent is an actor component made for AFortWeapon.\nNote: This class previously registered for weapon events and dispatched them to virtual functions. This is an\nperformance anti-pattern, as most weapon components do not need most events. It will scale poorly as we use more\nweapon components and add support for more weapon events. Derived classes should register for exactly the events\nthey want to consume.",
    "FortWeaponFxComponent": "UFortWeaponFxComponent is an actor component made for AFortWeapon and receives weapon fx events.",
    "FortWeaponFxComponent_Beam": "UFortWeaponFxComponent_Beam extends the beam functionality of the base weapon classes",
    "FortWeaponSoundLibraryComponent": "UFortWeaponSoundLibraryComponent",
    "FortWorldMultiItemXPComponent": "UFortWorldMultiItemXPComponent is an actor component that will be automatically added to the actor currently\nassociated with a UFortWorldMultiItem in order to run blueprint script which can add experience to that actor's item.\nIt should never be manually placed on an actor.",
    "GravityGunTargetTrackingComponent": "UGravityGunTargetTrackingComponent is an actor component for weapons to use to track existing and find new targets.",
    "PendingSpawnInfo:UpgradeUIData": "UI Data for the upgraded AI",
    "FortAthenaMutator_Infiltration:RoundCosmeticInfo": "UI Display text name for each round",
    "FortAthenaMutator_Infiltration:RoundResultsText_Attacker_Lose": "UI Display text shown when the local player is an attacker and lost the round",
    "FortAthenaMutator_Infiltration:RoundResultsText_Attacker_Win": "UI Display text shown when the local player is an attacker and won the round",
    "FortAthenaMutator_Infiltration:RoundResultsText_Defender_Lose": "UI Display text shown when the local player is an defender and lost the round",
    "FortAthenaMutator_Infiltration:RoundResultsText_Defender_Win": "UI Display text shown when the local player is an defender and won the round",
    "SkyfireInGameMapManager": "UI Map Manager that will be used when the Skyfire plugin is active. It uses the Skyfire Mutator\n   to hide indicators that are on the mothership behind fog of war. This is so that players don't\n   see indicators floating in the middle of the ocean, outside the bounds of the main map.",
    "EFrontEndCamera.SpatialUI": "UI Navigated by clicking in 3D world",
    "GiftUINotificationInfo": "UI Notification data describing an item based gift",
    "WeaponSeatDefinition:WeaponActionDefForUI": "UI helper text for our weapon controls",
    "SavedSpectatorCameraState:FollowedPlayerUniqueId": "UID of followed player. For replays, this will persist across a scrub, whereas playerstates are destroyed and recreated",
    "FortReplaySpectator:FollowedPlayerUniqueId": "UID of followed player. This persists across a scrub, whereas playerstates are destroyed and recreated",
    "CatalogOffer:DisplayAssetPath": "UObject path to the DisplayAsset (necessary since this struct is deserialized from JSON)",
    "SparksPlayspaceInteractor:Object": "UObject pointer (to the object that has the Interface)",
    "ImGuiSettings": "UObject used for loading and saving ImGui settings. To access actual settings use FImGuiModuleSettings interface.",
    "OldMusicTempometerComponent": "UOldMusicTempometerComponent provides playback properties of a ISongPosInterface on its actor and optionally updates a UMaterialParameterCollection.",
    "FortOctopusVehicle:ShellRotation": "UPROPERTY so that it auto marshals between the game and physics thread.",
    "ModerationAsset:InputHash": "UPROPERTY()\n       TArray<FString> DebugStrings;",
    "FortExperienceSettingsComponent:EliminationsToScoreMultiplier": "UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category=\"Experience Settings|GameRules\")\nFScalableFloat AfterLastSpawnGoTo = -1.0F;\nDECLARE_SHARED_SETTING_ACCESSORS(FCreativeTeamOption, AfterLastSpawnGoTo);",
    "FortWeaponCameraAnimationComponent:OwnerWeapon": "UPROPERTY(BlueprintReadWrite, EditDefaultsOnly, Category=\"CameraShake\")\nTObjectPtr<UClass> ADSShakeData;",
    "PatrolPathRenderingComponent": "UPatrolPathRenderingComponent",
    "PatrolPointRenderingComponent": "UPatrolPointRenderingComponent",
    "AgeRatingDisplayData:RatingImageURL": "URL of the image used to represent the rating. We use this to download the image to populate RatingImageTexture.",
    "FortHttpRequestCompletedAnalyticsFilter:UrlSubstring": "URL substring this applies to, or empty for applying to all URLs",
    "FortEmporiumItemData:ThumbnailURL": "URL to Displayable image",
    "CreativeLoadedLinkData:LobbyBackgroundUrl": "URL to lobby background image",
    "EmporiumSettings:CustomUrl": "URL used when the [Emporium (custom)] frontend is selected",
    "SparksMusicPlayspace:CameraDirector": "USparksCameraDirectorComponent",
    "StreamingTestSkydivePath": "UStruct obj for skydive path",
    "CatalogItemSalePrice:EndTime": "UTC End time of this sale",
    "CatalogItemSalePrice:StartTime": "UTC Start time of this sale",
    "ReplayTimecodeEventInfo:UTCTimecode": "UTC time in ticks",
    "ETasksOverFramesSchedulePriorityCategory": "UTasksOverFramesScheduleManager.cpp: A manager to split work over multiple\nframes to reduce frame hitches.  Any function can be added to this queue\nand it will be called back based when frame time is available, likely within\na few frames.\n\nNOTE: All functions queued via this manager will appear as part of CharacterCustomization in Perf reports\nfor the time being. Contact #fn-pi-cosmetics-tech-ext if that is undesired for your use case.\n\nThe manager uses a priority queue to decide on what to work on next.\nPriority is determined by a Category (feel free to add more) and a\nSubPriority     within that Priority.  The SubPriority can be different\ndepending on the category.  For some it might be based on how visible\nsomething is to the camera for example, for others some other heuristic might\nbe used.\n\nThere are various ways to configure TasksOverFramesScheduleManager with CVars.\nSee CVars in the CPP.\n\nNote the complexity of this class is the result of trying to make sure we cover future use\nsuch as cases:\n - Reentrant functions where a callback tries to do work in a callback\n - Lifetime of objects who own the function pointer\n - Making sure we don't accidentally skip a callback call by replacing it\n - Doing work immediately if we are still within the budget so we can see things a frame\n - earlier\n - Preventing users from accidentally making a copy of the handle\n\n=============================================================================// List of priorities types the higher in the list the higher the priority",
    "XpEverywhereUIComponent": "UXpEverywhereUIComponent",
    "ESkyfireBackpackComponentCachedExec.Fail": "Unable to cache the data",
    "ELookAtType.ScanAround": "Unaware nervously looking around",
    "FortControllerComponent_Telemetry:TotalItemsConsumed": "Uncapped number of items consumed by this player/bot.",
    "FortControllerComponent_Telemetry:TotalNavLinkTimeouts": "Uncapped number of navlink timeouts the bot has encountered.",
    "FortControllerComponent_Telemetry:TotalTeleports": "Uncapped number of teleports the bot has made.",
    "FortControllerComponent_Telemetry:TotalTimesRevived": "Uncapped number of times this player/bot was revived.",
    "FortEncounterSettings:bDisplayThreatVisuals": "Uncheck this box if the encounter should NOT display threat visuals such as storms (including clouds and wind), particles from storms, post process effects, and radar indicators.",
    "EUIExtensionSlot.UnderMobileLocalPlayerInfo": "Under Mobile Local Player Health/Shields",
    "FortGyroV2Settings:FlickSmoothingThreshold": "Under what threshold (degrees per second) do we smooth flick stick rotations?",
    "ThreatLocationInfo:ThreatVisualsManager": "Unfortunately, every location has to have a pointer back to the manager to notify it when added or removed over the net.  :(",
    "StormWind:ThreatVisualsManager": "Unfortunately, every storm wind has to have a pointer back to the manager to notify it when added or removed over the net.  :(",
    "FabricMeshProviderMeshReferenceParams:UniformScale": "Uniform scale to apply to mesh",
    "EDeviceTrackingFilterType.Favorites": "Unimplemented",
    "EDeviceTrackingSortingType.Favorites": "Unimplemented",
    "EAssignmentType.Encounter": "Uninitialized",
    "InteriorAudioDictionaryEntry:EditCode": "Unique EditCode for this building piece",
    "FortEntitlementNameAndTag:Name": "Unique Entitlement Id associated with this entitlement (Used where FUniqueEntitlementId is needed, but can't use because this is UPROPERTY)",
    "FortEntitlementStateBase:Name": "Unique Entitlement Id associated with this entitlement (Used where FUniqueEntitlementId is needed, but can't use because this is UPROPERTY)",
    "FortMission:MissionGuid": "Unique GUID for this Mission",
    "FortItemEntry:ItemGuid": "Unique GUID for this item",
    "FortEmporiumItemData:Id": "Unique ID",
    "FortMissionRecord:MissionGuid": "Unique ID for the Mission so we don't load it twice",
    "FortAvailableMissionData:MissionGuid": "Unique ID representing this mission",
    "FortAvailableMissionAlertData:MissionAlertGuid": "Unique ID representing this mission alert",
    "FortAthenaAIBotController:BotControllerUID": "Unique ID that identifies this bot controller",
    "FortTheaterMapData:UniqueId": "Unique ID used to identify this theater",
    "FortCheckPointCosmeticActor:CheckPointIndex": "Unique Index identifier for the checkpoint along the same path",
    "DynamicXpSessionAccoladeStats:AccoladeName": "Unique Name/Id of accolade device.  In Creative it is the GUID of the accolade device. (this does not include Grouping)",
    "FortEmporiumItemData:SketchfabUID": "Unique Sketchfab ID",
    "FortZoneInstanceInfo:TheaterId": "Unique TheaterId this zone is part of",
    "FortErrorInfo:ErrorCode": "Unique error code. This is generally \"errors.com.fortnite.stuff\" and is considered to be machine parse-able.\nThe dialog uses this to let the user report this error to the fortnite website (pass blank string to disable this feature).",
    "DynamicUIAllowed:UniqueID": "Unique id is used to make this widget a separate instance from other widget of the same class.",
    "FortPlayerRecord:UniqueId": "Unique id of the player on the backend service",
    "FortActorComponent_Affiliation:AffiliationUID": "Unique identifier",
    "CreativeItemTemplate:TrackedIndex": "Unique identifier corresponding to the item template slot we're associated",
    "TrackedObjective:TrackedIndex": "Unique identifier corresponding to the objective being tracked",
    "PickupInstigator:TrackedIndex": "Unique identifier corresponding to the pickup instigator being tracked",
    "EventCacheID": "Unique identifier for a given cache",
    "VoteSelectionSettings:VoteSelectionId": "Unique identifier for a possible selection in the context of a vote",
    "LockedQuestRuntimeData:UnlockUID": "Unique identifier for the data.",
    "FortEmoteVolume:EmoteCategoryName": "Unique identifier for the emote category",
    "VoteSessionSettings:VoteSessionId": "Unique identifier for this voting session",
    "ActiveGameplayStateData:PreviousStateId": "Unique identifier of the GameplayState that preceded this currently active one",
    "MinigameItemData:TrackedIndex": "Unique identifier used for identifying instances of this item in the pickup instigator registry",
    "VoteSettings:VoteId": "Unique identifier within the voting session for this vote",
    "FortMantisTechniqueData:Name": "Unique name for this technique. The name is used for branching between techniques.",
    "CatalogDynamicBundleItem:BundleItemId": "Unique name used for display and unique loc keys",
    "MtxPackage:OfferId": "Unique offer ID, not for display. Pass to PurchaseRealMoneyCatalogEntry to initiate purchase",
    "SpawnerDataComponentAffiliationSharedBBConfiguration:SharedBlackboardTag": "Unique tag that is used to map this blackboard: this is needed so that the AI can understand which shared BB to use.",
    "FortZoneInstanceInfo:WorldId": "Unique world this is bound to, for player-owned worlds. Is empty for global worlds",
    "FortGameMode:CurrentWUID": "UniqueId of the world to load",
    "VariantUID": "Uniquely identifies a variant, with no additional data about it. Used for selecting a variant\nwith no other context, such as in UFortControllerRequirement_HasVariant::AllowedVariants.",
    "ExternalAccountServiceConfig:Type": "Uniquely identifies what service this config belongs to",
    "RigUnit_BoneGroundTrace:Above": "Units above the trace to start",
    "RigUnit_BoneGroundTrace:Below": "Units below the trace to start",
    "EFortTextureDataType.Any": "Universal texture can be used anywhere",
    "EDefensivePlayerStyleSource.Unknown": "Unknown",
    "EFortStartupPhase.Invalid": "Unknown",
    "ELoginResult.Console_AuthAssociationFailure": "Unknown error occured while attempting auth association",
    "EFortErrorSeverity.Unspecified": "Unknown error state, may not be an error",
    "EFortCustomGender.Male": "Unknown gender, default value",
    "EPerceptionState.Unknown": "Unknown state",
    "EBannerUsageContext.Unknown": "Unknown usage, default to conservative interpretation of usage rights",
    "EFortGameFeatureState.Unknown": "Unknown what state this is in",
    "EFortGameFeature.Invalid": "Unknown, still initializing",
    "McpEntitlementRefreshTimerInfo:NextEntitlementRefresh": "Unless it is Forced, (RefreshType == Default), Next date that the entitlements of the current platform will be called to get refresh the purchases of the player",
    "LootPackageRow:RequiredTag": "Unless tag is present, row will not be considered",
    "LootTierDataRow:RequiredTag": "Unless tag is present, row will not be considered",
    "FortAthenaMutator_SurvivalObjectiveData:BuildingActorObjectiveClass": "Unloaded soft reference to Building Actor class",
    "ControlPointAssetData:CapturePointClass": "Unloaded soft reference to the control point class",
    "EChallengeScheduleUnlockType.OnScheduleGranted": "Unlock as soon as the schedule is granted",
    "FortChallengeBundleScheduleEntry:UnlockValue": "Unlock parameter value (e.g., days)",
    "LockedQuestRuntimeData:UnlockTime": "Unlock time for the source quest or bundle.",
    "EChallengeScheduleUnlockType.DaysSinceEventStart": "Unlocked a certain number of days after the associated event has started",
    "EChallengeScheduleUnlockType.Manually": "Unlocked manually via other means",
    "FortDeployableBaseManager:SupportedSkillTreeBasedUnlocks": "Unlocks supported originating from a skill tree",
    "ETeamPerformanceMessageReplicationType.MulticastFunction_Unreliable": "Unreliable function replication. Low cost, some messages will get lost. Losses are less predictable than with variable replication.\n     Sometimes many messages sent one after another will get through, sometimes a message sent by itself will be lost.",
    "EAILootExcludeListReason.UnsupportedItem": "Unsupported items are added to the octree for other AIs than bots using it",
    "DeltaComponent": "Unsure how we want to know and track actors but we want to use a GUID.",
    "ButterCakeUnstuckComponent:PauseUnstuckBehaviorTags": "Until we have one of these tags the UnstuckBeahvior is paused",
    "BuildingGameplayActorPetrol:Neighbors": "Up to 4 nearby neighbors (when aligned to grid).",
    "AthenaAISettings:MaxPlayerSpeedScaleFootstepSounds": "Up to this speed footstep sound hearing range will be scaled linearly based on the players current speed. Beyond it there will be no further scaling.\nCurrently vehicles are treated the same as footsteps! Value should be > 0",
    "ProfileUpdateSingle": "Update data for a single profile, corresponding to ProfileCommandResult in the Java Profile module",
    "ProfileUpdate": "Update data for potentially multiple profiles, corresponding to ProfileResponse in the Java Profile module",
    "TokenProviderPositioningData:QueryUpdateFrequency": "Update frequency",
    "GameplayStatMetadataTableRow:Metric": "Update function (how the new stat is computed when the client sends an update)",
    "UpdateBotSkillInfo": "Update info for one Target ELO",
    "ActiveFortCamera:TransitionUpdateRate": "Update rate for transition",
    "CaptureComponent:CurrentCaptureSpeed": "Updated speed based on num of players and boosts.",
    "FortObjectiveFilter_DistanceTraveled": "Updates on a looping timer when a player has travelled more than 1 meter on a specific travel mode.\nwhen movement mode changes it reports accumulated distance from the previous mode regardless of timer\nand then resets for processing the new travel mode.\nNote: Will not process on movement modes that no quest cares about.",
    "EAcquireIncrementType.UniqueMatchingItems": "Updates the objective by the number of unique items that pass the filter",
    "EAcquireIncrementType.HighestMatchingItemCount": "Updates the objective by the size of the biggest item stack that passes the filter",
    "EAcquireIncrementType.TotalMatchingItemCounts": "Updates the objective by the total of all stack sizes that match the filter",
    "FabricInteractionTool:OnInteractionStateChanged": "Updates when the state of the fit changes. Will pass the parent device for the interaction state when it's valid.",
    "ELevelSaveRecordVersion.UpdatePackageNameFromIslandTemplateId": "Updating PackageName from IslandTemplateId",
    "ELevelSaveRecordVersion.EnforceUniqueLabels": "Updating to force unique names for actors on load once",
    "EFortQuestObjectiveItemEvent.UpgradeRarity": "Upgrade Rarity of an item",
    "EFortQuestObjectiveStatEvent.UpgradeRarity": "Upgrade Rarity of an item",
    "EFortQuestObjectiveItemEvent.AlterationUpgrade": "Upgrade an alteration",
    "EFortQuestObjectiveStatEvent.AlterationUpgrade": "Upgrade an alteration",
    "SpawnGroupInstanceInfo:PawnUpgrades": "Upgrade data for each pawn in the group. Each upgrade data corresponds to the enemy with the same index in the group",
    "EFortQuestObjectiveItemEvent.Upgrade": "Upgrade/Level up an item",
    "EFortQuestObjectiveStatEvent.Upgrade": "Upgrade/Level up an item",
    "EFortReplicatedStat.BuildingsUpgraded_Metal2": "Upgraded a building to Metal 2",
    "EFortReplicatedStat.BuildingsUpgraded_Metal3": "Upgraded a building to Metal 3",
    "EFortReplicatedStat.BuildingsUpgraded_Stone2": "Upgraded a building to Stone 2",
    "EFortReplicatedStat.BuildingsUpgraded_Stone3": "Upgraded a building to Stone 3",
    "EFortReplicatedStat.BuildingsUpgraded_Wood2": "Upgraded a building to Wood 2",
    "EFortReplicatedStat.BuildingsUpgraded_Wood3": "Upgraded a building to Wood 3",
    "SpyTechWeaponUpgradeRow:UpgradedItemToGrant": "Upgraded item to grant, when permitted to do so",
    "ValkyrieProjectSizeStats:UploadSizeBytes": "Upload size (in bytes) that should be reported (does not include dependencies)",
    "FakeKillRelevancyPhaseData:RelevancyDelay": "Upon replicating the kill list to clients, the server waits this long before modifiying relevancy.\nSpecified as a parameter to SetUpKillPhase().",
    "EFortConnectivityCubeFace.Upper": "Upper floor cube face",
    "FortSkyTube:ProjectileTangentialMaxSpeed": "Upper limit for projectile tangential speed, if projectile usually goes faster.",
    "FortAthenaSKPushVehicle:bIsDriverTargetting": "Uproperty so this auto marshals. If the driver is targetting.",
    "FortAthenaSKPushVehicle:bConstrainedRotation": "Uproperty so this auto marshals. If the rotation is constrained because the vehicle is turning in place.",
    "FortAthenaSKPushVehicle:bIsCoastingOrDismounting": "Uproperty so this auto marshals. If the vehicle is coasting",
    "FortAthenaSKPushVehicle:ForwardForceTractionScale": "Uproperty so this auto marshals. Scales the amount of forward force traction.",
    "FortAthenaSKPushVehicle:CurrentAnimCoastState": "Uproperty so this auto marshals. The coast state for updating animation.",
    "FortAthenaSKPushVehicle:CurrentPhysicsCoastState": "Uproperty so this auto marshals. The coast state for updating movement.",
    "FortAthenaSKPushVehicle:PushForceRelativeLocation": "Uproperty so this auto marshals. The relative offset where the push force should be applied.",
    "FortAthenaSKPushVehicle:StandingInPlaceSteerAngle": "Uproperty so this auto marshals. The turning angle when turning in place.",
    "FortAthenaSKPushVehicle:bPedalForceCooldown": "Uproperty so this auto marshals. Tracks when the player is allowed to pedal.",
    "EFortMovementUrgency": "Urgency of movement for AI characters.  Used to translate to an EFortMovementStyle::Type depending on the AI.",
    "FortSmartObjectSlotDefinitionData:Urgency": "Urgency used to select the Movement Speed (Low, Normal, High) when the AI move to a SmartObject",
    "UrgentQuestData:ObjectiveCategory": "Urgent quest objective category",
    "EFortQuestSubtype.UrgentQuest": "Urgent quest that should bring up the special event UI on the HUD",
    "WebEnvUrl:Url": "Url to use",
    "FortPlayerController:EmoteUsageCounts": "Usage stats for emotes/sprays/toys (server only)",
    "EDeployableBaseUseType": "Usage types of deployable bases",
    "BotPOIExcludedZonesDebugInfo:UsagesToExclude": "Usages discard by this excluded zone",
    "QuickHealPrioritySpecifier:PriorityInsertionPlacement": "Use Before Reference Tag for insertions that are at the beginning of the list of QuickHeal items, otherwise, prefer using After Reference Tag.",
    "FortSpeechBubbleDataTableRow:FilterTags": "Use GameplayTags to filter text selection",
    "EVorbisMemoryScheme.Platform": "Use Malloc and Free",
    "TrackingOffsetModifiers:TargetLowHealthThreshold": "Use Target Low Health curve when target is below this health threshold",
    "FortMiniMapData:bUseTeamAffiliationColors": "Use Team Affiliation Colors?",
    "ETenacityType.MaxHealth": "Use Tenacity Amount from DataTable",
    "ValkyrieEditorConfig:bUseUnrealSourceControlForNewProjects": "Use Unreal Revision Control when creating new projects",
    "EAthenaPIEStartupMode.UseDefaults": "Use a PIE start location instead of anything gamemode specific",
    "AudioParam:isDefined": "Use a defined param?",
    "TowhookParams:bUseAsTractorBeam": "Use a mix of physics constraints and springs to model a low gravity field",
    "EFortExposedAssetPathCustomizationType.RelativeTo": "Use a path relative to an entry in the RelativeToPaths array for the generated path, eg if RelativePathsTo contains /Plugin/Some, then /Plugin/Some/Folder/Asset -> /Plugin/Prefix/Folder/Asset",
    "TowhookParams:bUseRope": "Use a physics constraint to model a hard rope-like distance limit",
    "EDayNightCycleMode.RandomFixedTime": "Use a random, fixed time for the day/night cycle",
    "EFortMantisTechniqueAnimationType.SingleMontage": "Use a single, unchanging montage for this technique.",
    "TowhookParams:bUseSpring": "Use a squishy spring to contract the towhook",
    "FortAthenaVehicle:bAllowInteractBetweenFortVolumes_Runtime": "Use a transient variable at runtime to no cause serialization issues when validating vehicles.",
    "EFortAbilityCostSource.AmmoMagazine": "Use ammo out of a weapon's magazine, only supported for weapons",
    "FortAnimNode_PredictiveSlopeWarping:bCorrectForMeshOffset": "Use an additional trace to correct for instances where the mesh/capsule doesn't align with the floor.",
    "EFortAbilityCostSource.Item": "Use an arbitrary item definition as a cost",
    "ETextureFilterMode.Linear": "Use bilinear filtering when sampling this texture in a shader",
    "MountedWeaponInfo:bUseAimingClampAngles": "Use clamping angles for mounted weapon aiming",
    "EBuildingWallArea.Special": "Use convex collisions to generate 2D area.",
    "EFortHandIKOverrideType.UseDefault": "Use default behavior, which is usually to control hand IK via curves",
    "FortSpectateAFriendController": "Use for 'spectate-a-friend' where players have access to a limited live spectator to watch their friend's PoV",
    "FortAthenaMutator_Bagel:bUseLootTierOverrides": "Use of custom loot tier overrides for AIs when they die",
    "FortAthenaMutator_Mash:bUseLootTierOverrides": "Use of custom loot tier overrides for AIs when they die",
    "CrewScreenData:ItemShopTileData": "Use of this has been deprecated. Use ItemShopData",
    "FortPOIInjector:bNullifyPOIQuestReferences": "Use one method of discovering all POIs that bypasses so much Quest related updating logic",
    "EFortExposedAssetPathCustomizationType.NameOnly": "Use only the asset name for the generated path, eg /Plugin/Some/Folder/Asset -> /Plugin/Prefix/Asset",
    "FortPlayerStartCreative:PriorityGroup": "Use player starts in the highest available priority group first",
    "ETextureFilterMode.Point": "Use point filtering when sampling this texture in a shader",
    "BuildingSMActor:bUseComplexForWeakSpots": "Use simple collision for weak spots or not",
    "FortAthenaMutator_Bagel:StreakScoreMultiplierUseSpecialMechanicToActivate": "Use special mechanic to activate streak than increase levels (Kill [X] enemies in [Y] seconds)",
    "FortAthenaMutator_Mash:StreakScoreMultiplierUseSpecialMechanicToActivate": "Use special mechanic to activate streak than increase levels (Kill [X] enemies in [Y] seconds)",
    "AircraftFlightConstructionInfo:bSystematicFlightPath": "Use systematically calculated flight paths instead of default random behavior",
    "FortGameMode:bEnableReplicationGraph": "Use the Replication Graph system for gameplay replication. See UFortReplicationGraph",
    "FortMiniMapData:bUseIconSize": "Use the actual Icon size?",
    "FortMapIconDefinition:bUseIconSize": "Use the actual Icon size? Or take defaultIconSize from the component?",
    "EWithinBoundsEvaluationType.UseBoxBounds": "Use the bounds of the game play volume as a box to evaluate overlaps.",
    "EAthenaInventorySpawnOverride.NoOverride": "Use the default settings for how things drop",
    "EAthenaLootDropOverride.NoOverride": "Use the default settings for how things drop",
    "EFortExposedAssetPathCustomizationType.FullPath": "Use the full path of the asset for the generated path, eg /Plugin/Some/Folder/Asset -> /Plugin/Prefix/Some/Folder/Asset",
    "EFortMinigameTimeAliveTeamTrackingMethod.Max": "Use the highest stat value on the team",
    "EFabricUserOptionConversionType.Lookup": "Use the incoming value as an index into a provided array of inputs",
    "EFortAbilityCostSource.AmmoPrimary": "Use the item's primary ammo type, supported for weapons and gadgets",
    "EFortMinigameTimeAliveTeamTrackingMethod.Min": "Use the lowest stat value on the team",
    "EStatTeamAggregateFunction.Max": "Use the max stat value of all team members (eg furthest storm circle reached or bool values like objective completed)",
    "EStatTeamAggregateFunction.Min": "Use the min stat value of all team member",
    "MountedWeaponInfo:bUseMountedWeaponAimRotOverride": "Use the mounted weapon orientation override for aiming",
    "FortDynamicBuilder:bUsePlayerBuildAnimations": "Use the same flow as when players build walls in game",
    "ECreativeClassType.ClassSlot": "Use the specified class slot value",
    "ECreativeTeamType.TeamIndex": "Use the specified team index value",
    "ECollectionSelectionMethod.TierAsIndex": "Use the specified tier as an array index into the collection; Will fail and select nothing if out of bounds",
    "ECollectionSelectionMethod.TierAsIndexOverflowToLastValid": "Use the specified tier as an array index into the collection; Will stop at the last valid index if tier is over the maximum; Will fail if array is empty",
    "FortObjectiveBase:ObjectiveAnalyticsName": "Use this analytics name if specified.",
    "FortAthenaMutator_TeamPartSwapper": "Use this class if you want to swap out custom character parts on a per-team basis in a generic way",
    "FortFallTeleportComponentBase": "Use this component with the appropriate GA/GEs teleport a pawn back to a previous location after falling off the play area\n(E.g. apply GE_FallTeleportation_TeleportPlayerInstantly to the pawn when overlapping with a volume).\n\nThis component should only exist on the server.",
    "EFortUrlType.EULALink": "Use this for web-pages that are EULA-related content",
    "EFortUrlType.HelpLink": "Use this for web-pages that are help-related content",
    "EFortUrlType.NormalWebLink": "Use this for web-pages that are not required to viewed to play the game",
    "EFortUrlType.AccountCreationLink": "Use this for web-pages that are required to create an account",
    "FortClientAnnouncement_Tutorial:AutoContinueDelay": "Use this property to force the tutorial to continue after a set amount of seconds when OnAnnouncementContinue is called.",
    "FortClientAnnouncement_TutorialConversation:AutoContinueDelay": "Use this property to force the tutorial to continue after a set amount of seconds when OnAnnouncementContinue is called.",
    "PreferredItemSlotSettingData:OverrideTag": "Use this tag on an item definition to override any gameplay tag slot preference",
    "FortObjectiveFilter_Acquire:IncrementType": "Use this to determine what the objective should increment by if the filter passes.",
    "FortObjectiveFilter_LandVehicleTrick:IncrementBy": "Use this to determine what the objective should progress by",
    "FortTimeOfDayManager:DaylightRotationRateGain": "Use this to extend the amount of time spent in the \"golden hour\" portion of the day. Less than 0.5 means less golden hour (sun speeds up). Greater than 0.5 means the sun slows and more time is spent in golden hour.",
    "FortObjectiveFilter_QuestUpdated:QuestTags": "Use this to filter by specific tags that are on the quest definition",
    "FortObjectiveFilter_SpentBarsOnNPCService:BarsSpent": "Use this to filter by the amount of bars spent in this event",
    "FortObjectiveFilter_VehiclePartDisabled:DamageDone": "Use this to filter by the amount of damage done in the event that disabled the vehicle part",
    "FortObjectiveFilter_LandVehicleTrick:AirTime": "Use this to filter by the amount of time spent in the air during this trick",
    "FortObjectiveFilter_MatchFinished:FinishingRankRange": "Use this to filter by the authors rank at the end of the match",
    "FortObjectiveFilter_LandVehicleTrick:AirDistance": "Use this to filter by the distance traveled in the air during this trick",
    "FortObjectiveFilter_LandVehicleTrick:AirHeight": "Use this to filter by the highest height off the ground reached during this trick",
    "FortObjectiveFilter_MatchFinished:PlayersOutLived": "Use this to filter by the number of players the author outlived during the match",
    "FortObjectiveFilter_LandVehicleTrick:TrickPoints": "Use this to filter by the number of points earned in this trick",
    "FortObjectiveFilter_LandVehicleTrick:TrickCount": "Use this to filter by the number of unique stunts performed in this trick",
    "FortTimeOfDayManager:HeightFogZOffset": "Use this to offset the fog Z position relative to the camera.",
    "FortWrapSkeletalMeshActor:MaterialSectionMask": "Use this to only apply the wrap to a specific index in the materials array of the viewed items",
    "WrapPreviewGridActor:MaterialSectionMask": "Use this to only apply the wrap to a specific index in the materials array of the viewed items\nNote: This is ignored when the thing being previewed is a weapon, and we instead use the mask from the weapon itself",
    "FortObjectiveFilter_HealingBase:IncrementBy": "Use this to set the increment type for the objective.\nSingle, Healing Amount, Over Healing Amount, Percent Healed, or Total Healing Done",
    "FortObjectiveFilter_GainShields:IncrementBy": "Use this to set the increment type for the objective.\nSingle, Shield Gained Amount, Shield Gained Over Full, Shield Gain Percent, or Total Shield Gained",
    "FortMatchmakingActor:LeaderInteractDetailsColor": "Use to control the color of the additional details.",
    "FortMatchmakingActor:MemberInteractDetailsColor": "Use to control the color of the additional details.",
    "FortMatchmakingActor:LeaderInteractDetailsText": "Use to display additional details for the interaction prompt.",
    "FortMatchmakingActor:MemberInteractDetailsText": "Use to display additional details for the interaction prompt.",
    "FortProceduralLayeringWeaponData:bUseMotionMatchingWithoutProxyTable": "Use to enable new locomotion on items that do not have a proxy table and do not use procedural layering",
    "FortControllerComponent_Interaction:LongInteractAudioComponents": "Use to play and fadeout the SearchingSoundCueLoop when interacting with BuildingContainers or other interactables",
    "FortLevelStreamComponent:StreamedLevels": "Use to track level streaming data and the corresponding level data.",
    "FortAbilityTargetSelection:bUseProjectileRotationForDamageZones": "Use trajectory of projectile for finding damage zones?\nThis is meant for small explosions only, anything bigger than 20-50 units should rely on world obstruction direction!",
    "FortDeployableBaseManager:DeployableBaseUseType": "Use type of the deployable base configuration",
    "EFortQuestObjectiveStatEvent.Consume": "Use up one or more of a specific item",
    "EFortQuestObjectiveItemEvent.Consume": "Use up one or more of a specific item, on the backend",
    "FortAnimInput_HandIK:HandsInRootSpaceAlpha": "Use virtual bones that are children of the root for hand IK. Setting this can help with jitter caused by using the default, weapon-based hand IK bone setup where the left hand is a child of the right.",
    "EFortQuestObjectiveStatEvent.Heal": "Use/Receive healing effects. Trait.Restoration.Health for HP, Trait.Restoration.Shields for Shields\n      Possible SourceTags/TargetTags: Quest.Metadata.HealedToFull, Quest.Metadata.HealedTeammate, Quest.Metadata.HealedFromTeammate\n      SourceTags captured from the InstigatingPlayer. TargetTags captured from the HealedPlayer, which could be yourself or another player.",
    "FortQuestLivingWorldVolume:PlayerNeedsQuestFilterTags": "Used as FilterTags if at least one player in the game has the Required Quest active",
    "FortQuestLivingWorldVolume:NoPlayerNeedsQuestFilterTags": "Used as FilterTags if none of the players in the game have the Required Quest active",
    "FortCreativeMoveTool:SpawnHelperNewlyPlacedActors": "Used as a holdover to dump actors into until we have finished spawning all of our actors and vetting they are structurally supported.",
    "BuildingProp_AISpawner:SpawnLocation": "Used as a means to set the spawn location of the creative rift",
    "JackalInPersistent:PendingJumpCharge": "Used as a notify to apply a jump force and is a ratio that controls the strength a jump\nCalculated by the game thread when the player has released the jump input.",
    "FortReppedPoint:LastServerIndex": "Used as a unique Id, and to keep the points in order, even though on the client, they may not come in in this order.",
    "FortVolume:AIGroupEncounterID": "Used as an ID for AI encounter budgeting. This should be unique to each volume",
    "EFortCreativeTeleporterGroup.Group_A": "Used as array indexes, do not explicitly define.",
    "EPlayerControllerFollow": "Used as instructions about which player to follow/spectate.",
    "BuildingGameplayActorSpawnMachine:bIsLocallyBeingInteractedWith": "Used as special flags in CanPlayerSquadInteract",
    "SpecialEventMathEaseData:BlendExp": "Used as the BlendExp param to UKismetMathLibrary::Ease().  Only applies to EEasingFunc::EaseIn, EaseOut, EaseInOut.",
    "SpecialEventMathEaseData:EasingFunc": "Used as the EasingFunc param to UKismetMathLibrary::Ease()",
    "SpecialEventMathEaseData:Steps": "Used as the Steps param to UKismetMathLibrary::Ease().  Only applies to EEasingFunc::Step.",
    "EFrontEndCamera.LegacyHeroLoadout": "Used as the camera for looking at the hero in the command screen, the until hero loadout system goes online permanently.",
    "EFrontEndCamera.Command_HeroLoadout": "Used as the camera for the command screen when hero loadout is enabled.",
    "FortGameplayTagQueryPerDifficulty:Difficulty": "Used at runtime to store evaluation of the data table.",
    "FortMissionPlacementActorPreferredTagInfo:Difficulty": "Used at runtime to store evaluation of the data table.",
    "EFortAnalyticsEventDenylistPlaylistKey": "Used below to indicate if a denylist entry is for a specific PlaylistName or a PlaylistType.",
    "FortBuildingAddStructuralSupportComponent": "Used by ABuildingSMActor's in coordination with one or more UFortBuildingAddStructuralSupportComponents to add intangible (invisible, non-colliding, non-ticking) structural building pieces to the building owner.\n    This is useful for having 1 building piece that acts like 2 or more structural building pieces (i.e. 1 building piece that can support and be supported by multiple spots on the building grid and can block the player from building on those grid spots)\n    To use this component on an ABuildingSMActor add 1 UFortBuildingAddStructuralSupportComponent and one or more UFortBuildingAddStructuralSupportMarkerComponents to the ABuildingSMActor. Place the UFortBuildingAddStructuralSupportMarkerComponents where you want the added buildings to be placed and set the BuildingClass values in each UFortBuildingAddStructuralSupportMarkerComponents.\n    Should ONLY be added to ABuildingSMActor objects",
    "FortAIDirector:DebugSpawnAIGroupTags": "Used by FortCheatManager for debugging elemental husks",
    "CraftingMessage": "Used by Game Event Messages",
    "FortMission:bObjectiveTimerExpireShouldFailObjectives": "Used by Gen_Timer to determine if objectives in this mission should fail when objective timers expire. If false, they succeed.",
    "FortMission:bMissionTimerExpireShouldFailMission": "Used by Gen_Timer to determine if this mission should fail when the mission timer expires. If false, it succeeds.",
    "FortAIDirector:PlayerControllersForBVTree": "Used by PlayersBVTree",
    "FortAIDirector:PlayerPawnsForBVTree": "Used by PlayersBVTree",
    "FortAIPawn:bIsCharging": "Used by Smasher.",
    "AutoAimWeaponBoneSegmentData": "Used by UAutoAimWeaponPawnComponent contains a list of bone segments used to find lock on locations for auto aim weapons.",
    "FortMediaEventsStreamAssets:ExternalVideoPlayer": "Used by external MediaControllers for reference only",
    "FortAthenaLivingWorldPointProvidersEnabler:EnablerTags": "Used by external systems to filter a specific enabler.",
    "EMiniMapComponentDiscoverableVisibility.Unset": "Used by individual players to mark that they do NOT have an override visibility and that the default visibility should be used.",
    "SavedPosition:bTouchingGround": "Used by movement mode to tell player is touching/over ground",
    "FortPlayerPawnAthena:CurrentQuickChatIcon": "Used by the SquadQuickChat system for applying the proper chat selection to the material",
    "RespawnAndSpectatePlayerComponent:ReplicateClientScreenFade_FadeIn": "Used by the server in conjunction with OnRep_ReplicateClientScreenFade_FadeIn to act like a Reliable Client function that fades in/out the client but without the overhead\n     Set the value to even to fade out, set to odd to fade in.\n     The value should ONLY ever increase in value to make sure that every time the desired state changes the network replication value changes as well",
    "FortAthenaMutator_TeamPerformanceMessage:MessageTriggerReplicated": "Used by the server to request that a message shows up for all clients.\n     Is ONLY used for messages that have their replication type set to VariableReplication.",
    "IndicatedActorInfoEntry:StartTime": "Used by the tick to figure out when we will start showing. This allows us to do stepped intervals.",
    "StenciledActorInfoEntry:StartTime": "Used by the tick to figure out when we will start showing. This allows us to do stepped intervals.",
    "IndicatedActorInfoEntry:EndTime": "Used by the tick to figure out when we will stop showing.",
    "StenciledActorInfoEntry:EndTime": "Used by the tick to figure out when we will stop showing.",
    "EFortSwimmingAudioType.SprintStart": "Used during sprint anim, triggered when hands enter the water during freestyle",
    "BuildingGameplayActorSentry:LocatingDamage_OvershootRotationDestination": "Used during the Locating Damager state to give the sentry a rotation destination to track towards after it tracks to the exact rotation towards the damage.\n     This allows the sentry to act smart by looking past the damage source.",
    "BuildingGameplayActorSentry:LocatingDamage_NextIdleMinimumAngularDifference_Degrees": "Used during the Locating Damager state. How far in angular distance from the current idle rotation destination much a damage source be\n     to bother storing a secondary idle rotation destination to move towards once the sentry has finished tracking to the original source of damage.",
    "EFortPawnDisplayContext.VaultItemsFromOffer": "Used for Battle-Royale only cases, which need to use the old system.",
    "FortAthenaVehicle:bShouldDealDamage": "Used for Creative to configure knobs on vehicle spawn pads.",
    "PlayspaceControllerComponent_DeviceTracking:CurrentSelectedDevice": "Used for Device Info in a selected Device's Customization UI",
    "FortCreativeBudget:TotalBudget": "Used for Legacy CreativeAssetCostDirectory",
    "FortCreativeBudget:StaticAssetCostTotalBudget": "Used for New Static CreativeAssetCostDirectory",
    "EFortCraftFailCause.CurrentlyLocked": "Used for Onboarding, or cases where we locked.",
    "FortPlayerController:SkydiveMusicAudioComp": "Used for S11 intro movie transition",
    "BuildingSMActor:BuildingPlacementType": "Used for Trap/Deco placement.",
    "EMissionGenerationCategory.Survivor": "Used for any survivor missions",
    "FortVehicleSeatComponent:PlayerForCosmetics": "Used for applying custom wrap. Last driver, or nullptr if that driver has since exited the vehicle.",
    "FortBotBackfillSpawnRequest": "Used for bot backfill spawn requests",
    "FortAIPawn:MarkerDisplay": "Used for controlling how the marker will look for a particular if it's marked",
    "BuildingContainer:MarkerDisplay": "Used for controlling how the marker will look for a particular if it's marked.\n     Only used when bCanBeMarked == true.",
    "BuildingGameplayActor:MarkerDisplay": "Used for controlling how the marker will look for a particular if it's marked.\n     Only used when bCanBeMarked == true.",
    "BuildingRealitySapling:MarkerDisplay": "Used for controlling how the marker will look for a particular if it's marked.\n     Only used when bCanBeMarked == true.",
    "BuildingRealitySeedPod:MarkerDisplay": "Used for controlling how the marker will look for a particular if it's marked.\n     Only used when bCanBeMarked == true.",
    "BuildingRift:MarkerDisplay": "Used for controlling how the marker will look for a particular if it's marked.\n     Only used when bCanBeMarked == true.",
    "BuildingTrap:MarkerDisplay": "Used for controlling how the marker will look for a particular if it's marked.\n     Only used when bCanBeMarked == true.",
    "FortHeistDisplayCase:MarkerDisplay": "Used for controlling how the marker will look for a particular if it's marked.\n     Only used when bCanBeMarked == true.",
    "MidMatchRiftPoiManagerActor:MarkerDisplay": "Used for controlling how the marker will look for a particular if it's marked.\n     Only used when bCanBeMarked == true.",
    "MidmatchRiftPoiSpawnIndicator:MarkerDisplay": "Used for controlling how the marker will look for a particular if it's marked.\n     Only used when bCanBeMarked == true.",
    "SpookyEventEmotePad:MarkerDisplay": "Used for controlling how the marker will look for a particular if it's marked.\n     Only used when bCanBeMarked == true.",
    "FortAthenaVehicle:MarkerDisplay": "Used for controlling how the marker will look if it's marked",
    "FortPlayerPawnAthena:MarkerDisplay": "Used for controlling how the marker will look if it's marked.",
    "FortWeaponModDebugComponent": "Used for debugging weapon mods in non shipping builds, drawing info of the attaching weapon.",
    "RespawnAndSpectateTargetData:DisplayPriority": "Used for deciding the UI display order\n Id is used to tie break if two entries share have the same DisplayPriority\n     higher numbers are given higher priority",
    "FortDeferredNewActorData": "Used for deferring the updating of actors that were newly created",
    "DeleteActorRecord": "Used for destroying buildings authored into a base level and erasing corresponding NewObjectRecords (during cleanup phases).",
    "FortPhysicsObjectComponent:LinkToActorComponent": "Used for determining whether to wake sleeping objects on wake or destroy",
    "FortDisplayModifier": "Used for displaying individual modifiers to a stat",
    "EFrontEndCamera.SpecialEvent": "Used for events only",
    "FortPlayerControllerGameplay:SocialNotificationInputComponent": "Used for in game social notifications.",
    "FortLevelSpawnActor:SpecialActorID": "Used for keeping track of this pickup in the special actor system",
    "BuildingRift:SpecialActorID": "Used for keeping track of this rift in the special actor system",
    "AthenaSpecialActorComponent:SpecialActorID": "Used for keeping track of this supply drop in the special actor system",
    "FortAthenaMutator_SurvivalObjectiveData:SpecialActorID": "Used for keeping track of this supply drop in the special actor system",
    "FortAthenaSupplyDrop:SpecialActorID": "Used for keeping track of this supply drop in the special actor system",
    "FortCharacterVehicle:SpecialActorID": "Used for keeping track of this supply drop in the special actor system",
    "PlaylistPropertyArray:PlaylistReplicationKey": "Used for marking the \"base\" playlist as dirty",
    "EKoalaMockClipMode": "Used for mock clip behavior, since there's no clipping API for Windows",
    "FortProjectileMoveComp_Drunk:DrunkRandStream": "Used for net syncing random drunk movement.",
    "FortDagwoodVehicle:RandStream": "Used for net syncing random popped tire reactons.",
    "ETimerOverrideSetting": "Used for overriding the Display Data values via blueprints",
    "EFortWorldMarkerType.PingGROUPSTART": "Used for ping commands.",
    "FortRangedWeaponStats:AthenaRecoilMagnitudeScale": "Used for pitch/yaw recoil strength.",
    "FortCharacterVehicle:EmoteFoleyAudioComponent": "Used for procedural Emote foley. Only active when emoting.",
    "FortAthenaMutator_LoadoutSwap:NextItemsToGrant": "Used for quickbar slot info",
    "InventoryOverrideLoadoutRandomization": "Used for randomizing AFortAthenaMutator_InventoryOverride::InventoryLoadouts when bNoRepeat == true",
    "FortCreativeBudgetTracker:UsedAssetDependencies": "Used for recording the asset dependencies currently in use and how many assets are using that particular dependency.",
    "NyxGlassWeaponComponent_Swinging:ReelInForceAttackMaxDist": "Used for remapping attack distance to calculate a modifier for the calculated Gas Power.",
    "NyxGlassWeaponComponent_Swinging:ReelInForceAttackMaxMult": "Used for remapping attack distance to calculate a modifier for the calculated Gas Power.",
    "NyxGlassWeaponComponent_Swinging:ReelInForceAttackMinDist": "Used for remapping attack distance to calculate a modifier for the calculated Gas Power.",
    "NyxGlassWeaponComponent_Swinging:ReelInForceAttackMinMult": "Used for remapping attack distance to calculate a modifier for the calculated Gas Power.",
    "NyxGlassWeaponComponent_Swinging:NewAttackDistanceXRange": "Used for remapping attack distance to calculate how much time is left in the attack state.",
    "NyxGlassWeaponComponent_Swinging:NewAttackDistanceYRange": "Used for remapping attack distance to calculate how much time is left in the attack state.",
    "NyxGlassWeaponComponent_Swinging:OldAttackDistanceXRange": "Used for remapping attack distance to calculate how much time is left in the attack state.",
    "NyxGlassWeaponComponent_Swinging:OldAttackDistanceYRange": "Used for remapping attack distance to calculate how much time is left in the attack state.",
    "FortControllerComponent_MiniMapDiscoverable:FortControllerMiniMapComponentVisibilities": "Used for replicating the visibility information for each Mini Map Component.\n     This information is a copy of FortControllerMiniMapComponentVisibilitiesMap, it is not accessed because it would be slower than using the map. It is ONLY used because TMaps canNOT be replicated.",
    "MingiameScoreboardRow:TeamColorIndex": "Used for resolving the \"team color\" by indexing into a LUT texture",
    "MinigameStatRow:TeamColorIndex": "Used for resolving the \"team color\" by indexing into a LUT texture",
    "MinigameTeam:TeamColorIndex": "Used for resolving the \"team color\" by indexing into a LUT texture",
    "FortDisplayAttribute": "Used for showing an attribute value, potentially compared to some other stat source as a base value",
    "PerkMutatorData:ItemPerkTag": "Used for sorting",
    "EFortWorldMarkerType.SquadComsGROUPSTART": "Used for squad coms.",
    "FMDeviceCablePortComponent:SaveGuid": "Used for the Save system interface, not for connections, maybe isn't necessary?",
    "EFortPawnDisplayContext.CampaignNPC": "Used for the StW lobby, locker, and commander in the Hero Loadout.  Includes both local and remote players.",
    "EFortSwimmingAudioType.PickaxeSwing": "Used for the initial push when sprinting",
    "MutatorAbilitySetEntry": "Used for tracking applied ability sets originating from a particular AbilitySetSource (i.e. mutator instance)",
    "FortMutatorContextComponent": "Used for tracking state for a player within their mutator context (e.g. tracking what mutator ability sets are currently applied)",
    "PropertyOverride": "Used for tracking/serializing individual object property overrides",
    "PropertyOverrideMk2": "Used for tracking/serializing individual object property overrides",
    "UtilityTypeFloatPair": "Used for utility values and percentages",
    "FortAthenaLoadout:bForceUpdateVariants": "Used for variant cheats",
    "EDynamicUIZOrder.Top": "Used for widgets shown during loading screen",
    "MashScoreTrackingData": "Used in FMashPlayerDataEntry to track score data about different types of mash score events.",
    "BasicDeviceTrackingInfo": "Used in UPlayspaceControllerComponent_DeviceTracking to Replicate Device Info to PlayerController Owner (COND_OwnerOnly)\nCan be used on Clients to view Devices in an Overall Device Viewer UI Displaying All Devices Using Basic Info about Device",
    "PlayerMarkerConfig:MarkerTickOptimizationCullThresholdCosTheta": "Used in a quick marker-cull test to determine if we need to actually do the relatively-expensive projection calculations to determine if a marker is hovered.\nNote: FMath::Cos(FMath::DegreesToRadians(5.0f)) is approximately 0.996194720",
    "FortFallTeleportComponentBase:FallbackLocation": "Used in case TeleportLocation is no longer valid",
    "FortAthenaHandleSoftDisableGuardStateTreeTask": "Used in conjunction with \"FortAthenaHandleSoftDisableStateTreeTask\" to guard a ST state (and its children) for a particular state.\nThe current usage is to flag one or more actors to require teleport back to navmesh if this state is not successful.",
    "FortAthenaTrackEventConsumeStateTreeTask": "Used in conjunction with FFortAthenaTrackEventStateTreeTask to consume a tracked event, to be able to not react more than once if needed.",
    "BuildingActor:BaselineScale": "Used in creative mode to determine the \"default\" scale value of an actor. Modulates the Max/Min that an object can be scaled to.",
    "FortAthenaMutator_Mash:DebugObjectiveActorNameOverrides": "Used in debug builds to force the Mash Safezones to goto specific Mash objectives.\n     This list of mash objective actor names will be used in debug builds IF objective names set by cvar (MashConsoleVariables::CVarDebugObjectiveActorName) are NOT set.",
    "FortAthenaFerretVehicle:CurrentMaxSpringCompression": "Used in determining when to play spring compression related FX and force feedback",
    "FortAthenaSKMotorVehicle:CurrentMaxSpringCompression": "Used in determining when to play spring compression related FX and force feedback",
    "FortAthenaSKPushVehicle:CurrentMaxSpringCompression": "Used in determining when to play spring compression related FX and force feedback",
    "FortRiftSpawnerData:EncounterSequence": "Used in the case of intensification due to damage taken by spawner",
    "FortWorldManager:MissionGenerationPIEOverride": "Used in the editor to generate missions if specified and MissionGenerationDebugString is empty",
    "FortWorldManager:MissionGenerationDebugString": "Used in the editor to recreate mission generation in PIE from a real run of the game.",
    "FortWorldManager:DeferredActors": "Used in the loading of new actors",
    "CreativePowerBarComponent:StartTime": "Used in the power percentage calculations to subtract from the current time\nThis allows for our time value to start at 0 instead of whatever the current time is",
    "ScriptedObjectMovement_AStarGraphWrapper": "Used internally by FGraphAStar FindPath to run specific queries with nodes.\n      Defines typedef used internally.",
    "FortAthenaCollisionReactionComponent:LandscapeClampingHelper": "Used internally for landscape clamping",
    "FortAthenaMutator_BasicLimitedLives:AlreadySeenStates": "Used internally to track players who have already spawned in (and are thus respawning)",
    "AdditionalLevelStreamed": "Used on client to know if we need to load the levels already streamed on the server",
    "BuildingGameplayActorSupplyDropRadio:ClientLocationCorrectionMaxDistSqWhenBalloonDisabled": "Used on the client to determine if the actor location should be corrected if the distance between\n     the replicated server location and the client location is over this threshold.\n     This value is used when the balloon is in its closed or destroyed state.\n     This value is gathered from a hotfix table row (performed in blueprint).",
    "BuildingGameplayActorSupplyDropRadio:ClientLocationCorrectionMaxDistSqWhenBalloonEnabled": "Used on the client to determine if the actor location should be corrected if the distance between\n     the replicated server location and the client location is over this threshold.\n     This value is used when the balloon is in its open state state.\n     This value is gathered from a hotfix table row (performed in blueprint).",
    "FortPlayerControllerAthena:bHideWarmUpLoadingScreen": "Used on the client to mark that this player should NOT show warm-up loading screens.\n     This keeps the loading screen from appearing after the player has finished their initial level loads even if the player starts streaming more levels.\n     In practice, this allows players to run around the warm-up island without the loading screen re-appearing as parts of the island stream in.",
    "PiPPartnerSource:AssetConfig": "Used only for EXTERNAL_ASSETS SourceTypes",
    "PiPPartnerSource:bManual": "Used only for cheats!",
    "CollisionReactionConfiguration:BoxSweepTypes": "Used only if bBoxSweepEnabled is true; define here the CollisionObjectQueryParams for the sweep.",
    "CollisionReactionConfiguration:BoxSweepFollowBone": "Used only if bBoxSweepEnabled is true; if set to a valid value and if the current actor has a skinned mesh, then the box sweep will follow the provided bone's location and rotation.",
    "CollisionReactionConfiguration:BoxSweepRotation": "Used only if bBoxSweepEnabled is true; will apply this extra rotation on the box sweep.",
    "CollisionReactionConfiguration:BoxSweepVelocityMultiplier": "Used only if bBoxSweepEnabled is true; will be used to scale the velocity for the sweep end.",
    "CollisionReactionConfiguration:BoxSweepOffset": "Used only if bBoxSweepEnabled is true; will offset the the box sweep.",
    "CollisionReactionConfiguration:BoxSweepExtent": "Used only if bBoxSweepEnabled is true; will use this for the box sweep.",
    "AirControlParams:CustomGravityCeiling": "Used only in ballooning: elevation at which normal gravity is applied.",
    "AirControlParams:CustomGravityCeilingWidth": "Used only in ballooning: width of area between which we lerp gravity value until we hit the ceiling.",
    "SkyLightValues:DestinationCubemap": "Used purely if/when lerping between two cubemaps.  If null, no lerp is occurring, and only main Cubemap should be used.",
    "AnimInput_Defaults:QuadBikeInput": "Used so that we can reset the inputs without erasing manually set data from the component",
    "FortGameplayTagBuildingActor:BoxComponent": "Used so we have some amount of collision in the editor",
    "FortPlacementActor:BoxComponent": "Used so we have some amount of collision in the editor",
    "PlayspaceControllerComponent_DeviceTracking": "Used to Replicate Device Info via RPC Requests as well as Pages Replicated only to PlayerController Owner (COND_OwnerOnly).\nUsed on Clients to view all Devices in a All Device Viewer UI or view a Device's Detailed Info.\nClients will be able to send different Requests for Device Tracking Info via RPC to the Server and the Server will fill in the Property or send back RPC needed for this Request.\nClients can receive replicated data via Replicated Properties or RPCs.  A RPC or Property's OnRep will fire a delegate to let announce we have updated info for Request.",
    "DetailedDeviceTrackingInfo": "Used to Replicate a Device's Tracking Info including it's Function and Event Bindings\nNote: Should only be use as a Replicated Variable and not sent over RPCs.  We need to send over the bindings in batches and doing this makes it easier to keep track of what bindings have been sent for a specific device.",
    "FortWeaponCameraAnimationComponent:CameraShakeModifierToAdd": "Used to add a camera modifier.",
    "ColorSchemeParamaterValues:AlternateMaterialCollection": "Used to animate between two different color schemes if needed",
    "InteriorAudioBuildingRotationConstraint:StartingOrientation": "Used to apply a starting 'facing direction' for the building piece",
    "TrackedObjective:OldTeamIndex": "Used to avoid spamming OnTrackedObjectiveTeamUpdated events when not necessary",
    "TrackedObjective:OldTrackedState": "Used to avoid spamming OnTrackedStateChanged events when not necessary",
    "FortMissionPlacementItemLookupData:TagsAddedToPlacementActors": "Used to be able to do simple lookups for EQS context based on what tags we associated with each entry.",
    "FortWeaponCameraAnimationComponent:bLastTargetingState": "Used to cache BP values when firing multiple shots using the same firing state (ADS or Hip-fire) and to prevent useless BP calls.",
    "FortPlayerStateComponent_PlayerAugmentSystem:RuntimeAugmentMatchDataCacheFloat": "Used to cache data for the duration of the match.\neg: Augment abilities will be deactivated and reactivated from respawning, so this provides a way to transfer data between respawns via a tag look up.",
    "DynamicXpPlayerSessionTransient:SessionStartTime": "Used to calculate total time player has been in session.",
    "BattlePassLandingPageButtonDisplayBehaviorData:DisplayBehavior": "Used to change the button expected behaviour as required",
    "MountedWeaponInfo:MuzzleFallbackSocketName": "Used to check if the muzzle is through collision when we want to fire.\nWe do a trace from this socket to the muzzle to see if collision is in between.",
    "FortCowVehicle:PreviousSpeedMapRangeClamped": "Used to clamp the previous speed value for setting the target squash value.",
    "FortCowVehicle:SpeedMapRangeClamped": "Used to clamp the speed value for setting the speed parameter on the audio component.",
    "DynamicXpCircuitBreaker:XpCutoffThresholdMult": "Used to compute the total amount of XP a player can acquire a day before a minimum or no more XP can be acquired.\nXPCutoffThreshold = XPBudget * XPCutoffThresholdMult",
    "DynamicXpCircuitBreaker:ExcessXpThresholdMult": "Used to compute the total amount of XP acquired before diminishing return kicks in.\nExcessXPThreshold = XPBudget * ExcessXPThresholdMul",
    "CollisionReactionForcedLaunchDirection": "Used to configure a possible forced launch direction",
    "CollisionReactionConfiguration": "Used to configure how the Actor will react on collision with other actors.",
    "FortPickerTemporaryWheel": "Used to construct the adjacency list of wheels that can be tabbed through at runtime after entering a particular wheel",
    "FortNonPlayerConversationParticipantComponent:ServiceDiscountBenefitSettings": "Used to control how discounts on services from faction related benefits are applied to this NPC's services",
    "CreativeFunctionalTest:TimeScale": "Used to control the Time Dilation of the game during the test. It is set using the \"slomo\" cheat.\nScale is 0.1 - 10.0, and is applied when minigame starts, and reverted back to 1.0 when the test ends.",
    "MeshCosmeticsImageProviderWrapper": "Used to control the lifecycle of the Image Provider.",
    "FortProjectileMoveComp_Slider:SuspensionTensionToSpeedScalar": "Used to convert changes in upward speed to changes in suspension tension. SuspensionTensionToSpeedScalar * 1uu/seconds == 1 tension unit.\n     Set to 0.0 to disable suspension.\n     When enabled the suspension system will add tension when the projectile is deflected and loses/gains upward velocity.\n     When the suspension system has tension, tension will be removed every frame in TickComponent() and velocity will be added in the opposite direction. This allows the system to mitigate bounces and small curbs acting like ramps.",
    "BelongTreatyProjectileMovementComponent:ServerSpawnTime": "Used to correctly interpolate to the correct location in the client at spawn instead of not matching the server",
    "FortPawn:FallbackTag": "Used to decide what fallback we can use on this pawn.",
    "EMiniMapComponentDiscoverableVisibility": "Used to decide whether or not to show Discoverable Mini Map icons and what state to show them in.",
    "TrackedObjective:TrackedState": "Used to define HUD behvaiour along with objective types",
    "TrackedObjective:TrackedStateOwnerTeam": "Used to define HUD behvaiour along with objective types",
    "FortObjectiveEntry": "Used to define an Objective and the loot for it",
    "ScoutDroneDeferredDestructionData": "Used to define delays for drone de-possession and destruction",
    "FCollisionWithBuildingActorReactionTypes": "Used to define how the AI wants to react with a Building Actor's collision.",
    "FCollisionWithLaunchableReactionTypes": "Used to define how the AI wants to react with a Launchable (ex. vehicle or pawn) Actor's collision.",
    "EEventBubblingRule": "Used to define if we want to do bubbling or not for this broadcast",
    "TrackedObjective:bIsInteractionAllowed": "Used to define on HUD if show this objective as Allowed Interaction or not",
    "CollisionReactionConfigurationPerPhysicsObjectSize": "Used to define per physics object size (check UFortPhysicsSimulationLibrary::GetPhysicsObjectSimSize and EFortPhysicsSimSize)\n the velocity and angular velocity the object will be launched at.",
    "BarrierFlagDisplayData": "Used to define the display data for this object",
    "EFortMantisTechniqueAnimationType": "Used to define the type of animation asset a technique uses.",
    "EFortMantisTechniqueRootMotionType": "Used to define the type of root motion a technique uses.",
    "EFortNearbyActorsTypes": "Used to define what kind of actors we want to fetch.",
    "EFortMantisTechniqueActivationTimingType": "Used to define when techniques should be activated, when the technique input is either pressed or released.",
    "EFortMantisTechniqueActivationInputType": "Used to define which input a technique should be triggered by.",
    "PickupTagConvertInfo": "Used to define which tags owned by a pickup should deal convert damage to an AI Pawn when picking it up and how much",
    "GearConfig:bForwardGear": "Used to denote if this is a forward or reverse gear",
    "FCollisionReactionType": "Used to describe which case we are reacting to.",
    "FortImpulseHandlerComponent:ImpulseResponseSet": "Used to detect impulse change events that apply to our owning actor.",
    "AIPatrolPathComponent:MultiSelectActorToEnterList": "Used to detect when all points of a multiselection operation have been inserted in the current playspace, so we can generate its new path",
    "DynamicXpCircuitBreaker:MinXpThresholdMult": "Used to determine MinXPThreshold, where the player can get an XP Boost in the next time interval if the amount of XP they\n      acquire in the current time interval is below this threshold",
    "DynamicXpProfileStats:BoosterBucketXp": "Used to determine amount of boosting we may need to give to a player if they are under-performing.",
    "FortCreativePersistenceComponentBase:DevicePath": "Used to determine at what path persistence is going to be stored for this component",
    "CreativePowerBarComponent:PowerCurve": "Used to determine the current percentage of the bar at a given time",
    "PartyMemberLobbyState:ReadyInputType": "Used to determine the input-based matchmaking pool.",
    "FortCreativeTagCategory:SortPriority": "Used to determine the order that creative tag categories show up in the UI. Lower values show up first.",
    "FortCreativeTag:SortPriority": "Used to determine the order that creative tags show up in the UI. Lower values show up first.",
    "FortCreativeItemListData:SortPriority": "Used to determine the order that elements will show up in the UI. Lower values show up first.",
    "AudioWorldizationSend:VolumeModulators": "Used to determine the output volume of the submix",
    "FortCreativeMoveTool:SelectionProperty": "Used to determine what kind of state our selection is in. Allows us to toggle on/off specific features.",
    "BuildingActor:DynamicBuildingPlacementType": "Used to determine what to do when this piece is used in a dynamic building",
    "FortFallTeleportSpawnerComponent": "Used to determine when the FortFallTeleportComponentBase should be added and removed from player pawns.\nThis component should be added to the Gamemode (AFortGameModeAthena).",
    "FortMantisRootMotionWarpInfo:WarpRotationMethod": "Used to determine whether we want to warp rotation how target rotation is calculated",
    "FortMantisRootMotionWarpInfo:WarpTranslationMethod": "Used to determine whether we want to warp translation and how target location is calculated",
    "FortBattleRoyalePlayerAugmentSystem:EnableUnlocking": "Used to disable unlocking for certain playlists.",
    "EFrontEndCamera.CosmeticDisplay": "Used to display a wide variety of cosmetics",
    "BuildingActorEditorComponent": "Used to display information related to a BuildingActor in the Editor",
    "FortGameModeFrontEnd:TheaterMapViewer": "Used to display the theater hex map",
    "PIPVideoPlayerConfig:bAutoPlay": "Used to enable auto playback after the video is loaded",
    "FortObjectiveFilter_HealingBase:HealingAmount": "Used to filter by the amount of healing done (Not counting over-healing)",
    "FortObjectiveFilter_HealingBase:HealthOverHealed": "Used to filter by the amount of over-healing done",
    "FortAIDirector:SpawnLocationActorSearchQueries": "Used to find existing actors to be locations for spawning AI (Rifts). Maps Encounter Spawn Location Placement Mode settings to Environment Query Infos to be used by encounters",
    "FortAIDirector:SpawnLocationPlacementQueries": "Used to find locations to spawn actos to be locations for spawning AI (Rifts). Maps Encounter Spawn Location Placement Mode settings to Environment Query Infos to be used by encounters",
    "BuildingGameplayActorSentry:ForceReplicateTargetRotation": "Used to force TargetRotation to update on the client. This is necessary in conditions where the new desired rotation maybe near 180 degrees from the current rotation.\n     We need to force the client to have the same starting rotation as the server so that they are both guaranteed to rotate in the same direction.\n     This fixes a bug where when the sentry entered the LocatingDamager sentry state sometimes the client and server's current rotation data would be off causing the client and sentry to rotate in different directions",
    "PlaysetInfo": "Used to force replication a Playset and trigger On_rep functions when the Playset has been reset to identical values in a single frame.",
    "WeaponCueReplicationStruct": "Used to force replication of a gameplay cue.",
    "FlashCountedActorInfo": "Used to force replication on an array and trigger On_rep functions when the array has been reset to identical values in a single frame.",
    "FortCreativePersistenceComponentBase:LogicComponent": "Used to get the current minigame and bind to OnAddedToMinigame and OnRemovedFromMinigame",
    "PhysicsPawnObjectInitialParameters": "Used to give initial data to the client spawned physics object.",
    "FortPlayerPawn:NPCRetargetingInfo": "Used to give retargeting ability to Player AI (NPC, bots) in UEFN through user provided content",
    "BattleMapSharedData": "Used to handle any shared data between the pawn and the nodes/edges",
    "FortAthenaHandleSoftDisableStateTreeTask": "Used to handle the SoftDisable from the Fort BT Task but also cleanup of Contextual Anims and Montages.",
    "PlayerDefinedStatFilterEntry": "Used to help identy and instantiate a stat filter during replication of player stats",
    "FortAudioFloatParameter": "Used to help re-map and smooth out raw game parameters before they get sent to an AudioComponent",
    "FortUnableToPerformData": "Used to hold data related to \"Unable to perform action\" feedback",
    "PluginUIStateWidgetEntry": "Used to hold widgets that are loaded via plugin ini file.",
    "FortAthenaMutator_SpecialEvent:WarmupIslandPlayerStartTag": "Used to identify player starts  when doing infinite warmup",
    "FortCreativeStatManagerComponent:StatEventFilter": "Used to identify this player defined stat",
    "CustomCharacterPartModifier:ChildComponentTag": "Used to identify which components should be adjusted in SetChildMeshComponentsHidden and SetChildParticleComponentsVisible",
    "BuildingActor:bSkipNavigationDirtiness": "Used to ignore area dirtiness when actor is spawned from an instance actor.",
    "FortServiceDiscountBenefitSettings:RequiredConditionalBenefitTag": "Used to indicate the conditional benefit tag which a player must have from their relationship with an NPC to receive service discount benefits for this NPC",
    "FortHeldObjectComponent:bDroppedFromWeaponSwap": "Used to indicate we are unequipping because of weapon swap, so don't force us to last equipped weapon",
    "FortCreativeMoveTool:OnSelectedActorsCleared": "Used to inform UI that we have cleared our entire selection via a key or placement of some kind.",
    "MaterialParamterLerpInfo": "Used to interpolate material instance parameters during transition",
    "EUIExtensionSlot.Count": "Used to iterate the enum",
    "FortAIDirector:bAIDisabled": "Used to keep the AIDirector disabled",
    "ActorAndTimePair": "Used to keep track of actors that have been placed recently. Stores a Time and an actor.",
    "ActorAndTransformPair": "Used to keep track of actors that have been placed recently. Stores a Time and an actor.",
    "MoveToolSettings": "Used to keep track of any settings me might want to reset on the move tool",
    "FortCreativeMoveTool:CutActors": "Used to keep track of the actors we intend to \"Cut\". The Move Tool tries its best to never move real actors, only temporary previews.",
    "FortAthenaMutator_RoundHelper:UsedSpawnSlots": "Used to keep track of what PC is using what player starts. PlayerStart -> Num of players using it",
    "BuildingSMActor:DamageVisualsState": "Used to keep track of which material to have on the static mesh component. Used to swap out more efficient materials when not animating or not damaged. Only relevant on client",
    "TrackedObjective:bOldIsInteractionAllowed": "Used to know that bIsInteractionAllowed has changed and avoid spamming OnTrackedObjectiveAllowedInteractionChanged event",
    "FortDaySequenceActor:bServerTODIsVisible": "Used to let the server override and update all client TODs when necessary. This is not normally done as TOD visibility is set on clients individually.",
    "FortTimeOfDayManager:bServerTODIsVisible": "Used to let the server override and update all client TODs when necessary. This is not normally done as TOD visibility is set on clients individually.",
    "FortScoutDroneMovementComponent:BacktrackingInputMultiplier": "Used to limit backtracking speed",
    "FortScoutDroneMovementComponent:StrafeInputMultiplier": "Used to limit strafing to simulate air force",
    "ScriptedObjectMovement_StaticPathSplineInputKeyData:bLockGeneratedData": "Used to lock the path from being affected by generation. this allows designers to selectively regenerate paths.\nThe static path has utility buttons on it to assist in locking large number of segments at once.",
    "PersistenceFrameworkSaveData_VersionTable": "Used to maintain a list of supported versions and guid pairs",
    "FortAIDirector:bRegisteredForDayPhaseChange": "Used to make sure I only register for OnDayPhaseChanged() notifications once.",
    "ESidebarState": "Used to manage which part of the sidebar we are navigating.",
    "FortCreativeMoveTool:ToDuplicateActors": "Used to managed state of the actors we want to spawn over a series of frames. Acts as the payload spawned by SpawnSelectedActorsHelper",
    "HoverDroneMovementComponent:TurboAccelerationAltitudeRange": "Used to map Altitude to Acceleration (using TurboAccelerationRange)",
    "FortControllerComponent_SpatialSampler": "Used to move Player around a Level to certain locations for sampling",
    "DynamicXpProfileStats:BankXpMult": "Used to multiply Potential XP in case player has gained too much XP previously.",
    "IntensityData:ContributionsTotal": "Used to normalize current contributions to a 0-1 Range. Above max gets clamped to 1",
    "InteriorAudioDictionaryEntry:EditCodeDescription": "Used to optionally describe this Dictionary Entry",
    "FortMissionTimerComponent:TimerVisibilityOverrideSetting": "Used to override the behavior that is defined in FMissionTimeDisplayData",
    "FortEncounterSettings:NumRiftsToUseOverride": "Used to override the number of rifts the encounter would like to use to spawn AI from.  Non-positive values mean there is no override; positive values should only be set if necessary.  This number is not necessarily the number that will be used for the entire encounter, as it's per active EQS query instance, which can be per direction (for example).  So directions * this number in most cases.  However, this number should not be changed unless strictly necessary.",
    "QuestDisplayInfo": "Used to pass display information about the quest reward entry to any UI that wants to display it",
    "DuelOverlayData": "Used to pass information to the AthenaDuelOverlay about the names / icons associated with a duel.",
    "EDuelState": "Used to pass information to the UAthenaDuelOverlay about the state the duel overlay should be in.",
    "BattlePassLandingPageButtonDisplayBehaviorData:BehaviorTimespan": "Used to pass time information if required by an specific display behavior, may or may not be used",
    "FortScoutDrone:bPlayedDeath": "Used to prevent calling PlayDeath multiple times",
    "FortCosmeticAdaptiveStatPreview": "Used to preview interesting stat thresholds for stat-based adaptive items (e.g., Rainbow Smash).",
    "CubeMovement_CorruptionGenerationSplinePointData": "Used to provide data for tech art to generate corruption texture\n      Contains an individual spline point data.",
    "CubeMovement_CorruptionGenerationTravelerData": "Used to provide data for tech art to generate corruption texture\n      Contains an the spline points for a traveler.",
    "CubeMovement_CorruptionGenerationData": "Used to provide data for tech art to generate corruption texture\n      Contains data for all the travelers on a static path spline.",
    "LevelStreamedDeleteActorRecord": "Used to record deletions to a specific POI. We might want to save the actor out in a FActorInstanceRecord.\n   That might not be scalable.\n\n      NO LONGER BEING USED. Needed for backwards compatibility",
    "FortNavPathRendererComponent:PathMode": "Used to render variation when path is used with a patrol path",
    "EUIExtensionSlot.InventoryGroupPanel": "Used to replace the current resources panel in the inventory",
    "BuildingActorMinimalReplicationProxy": "Used to replicate building actor data with a minimum amount of data to transfer.",
    "FortPlayerAthenaAttributeReplicationProxy": "Used to replicate common moveset values to remote clients.",
    "FortProjectileBase:CurrentSkyTube": "Used to replicate current sky tube, or null if none.",
    "FortPlayerAthenaGravityAttributeReplicationProxy": "Used to replicate gravity moveset values to remote clients. These values change rarely so push replication is used.",
    "FortProjectileMovementComponent:HomingData": "Used to replicate homing data",
    "FortProjectileBase:ResumeSimulationCount": "Used to replicate that this projectile has resumed simulation after stopping",
    "FortMangBotInfo": "Used to replicate the array of Mang bots and their alert level",
    "BuildingFoundation:DynamicFoundationTransform": "Used to reposition a dynamically placed foundation, replicated using DynamicFoundationRepData",
    "EKeepPlayingTogetherAnalyticEventPhase": "Used to represent which phase of the Keep Playing Together UX flow that the player is in\n    when we trigger an analytic event.  Provides context as to when the analytic was triggered.",
    "DeleteActorRecord:ActorClass": "Used to resolve name conflicts just in case.",
    "FortFirstPersonModifier:Priority": "Used to resolve overlapping active FirstPersonModifiers",
    "FortNonPlayerConversationParticipantComponent:ConditionalBenefitsSeasonDataAssetTag": "Used to resolve the ConditionalBenefitsConfigCollection data asset from AthenaSeasonItemDefinition's SeasonDataAssets property,\nif 'ConditionalBenefitsConfigCollection' not directly set. e.g. see 'SeasonDataAssets' property in AthenaSeason24/25 etc.",
    "FortNonPlayerConversationParticipantComponent:GiftItemInventorySeasonDataTableTag": "Used to resolve the Gifts data table from AthenaSeasonItemDefinition's SeasonDataTables property, if 'GiftItemInventory' not set.",
    "FortNonPlayerConversationParticipantComponent:GiftsSeasonDataTableTag": "Used to resolve the Gifts data table from AthenaSeasonItemDefinition's SeasonDataTables property, if 'Gifts' not set.",
    "FortNonPlayerConversationParticipantComponent:GiftTypeDefinitionsSeasonDataAssetTag": "Used to resolve the Gifttype data asset from AthenaSeasonItemDefinition's SeasonDataAssets property, if 'GiftTypeDefinitions' not set.",
    "HitData": "Used to save hit events on the client and server\nRequired for predictive hit resolution and confirmation",
    "BuildingSMActor:bAttachmentPlacementBlockedFront": "Used to save replication costs for AttachmentPlacementBlockingActors",
    "FortScoutDroneMovementComponent:LastInputState": "Used to save the last input state before consuming input",
    "MilkshakeFieldSystemActor:RadialVectorComponent": "Used to set a radial vector field value.",
    "MashAIEncounterWeights": "Used to set up what Mash Special AI Encounters are possible during a specific safe zone phase.",
    "FortVolume:bNeverAllowSaving": "Used to set volumes as Epic Curated and we should never modify the level record for these. This will be set when loading published islands",
    "FortPickupEffect:ItemDefinition": "Used to setup the pickup effect",
    "CatalogOffer:SortPriority": "Used to sort catalog items after they become FStorefrontOffers (higher numbers are shown first)",
    "FortMinigameObjectiveComponent:ObjectiveSortOrder": "Used to sort objectives in the Objective tracker UI",
    "TrackedObjective:ObjectiveSortOrder": "Used to sort objectives in the Objective tracker UI",
    "FortAthenaMutator_DamageZoneOverride": "Used to specify critical damage zones outside of just the head",
    "LockedQuestRuntimeData:UnlockType": "Used to specify if we are dealing with quests or bundles and how they unlock.",
    "FortBulletPatternEntry": "Used to specify the starting location and direction of each bullet.",
    "FortVolume:VolumeState": "Used to specify when to rollback",
    "FortAthenaMutator_SpawningPolicyBase:CachedSpecialActorIdx": "Used to speed up access to the special actor data in the GameState",
    "FortAthenaSupplyDrop:CachedSpecialActorIdx": "Used to speed up access to the special actor data in the GameState",
    "FortLevelSpawnActor:CachedSpecialActorIdx": "Used to speed up access to the special actor data in the GameState",
    "FortPickup:CachedSpecialActorIdx": "Used to speed up access to the special actor data in the GameState",
    "BattlePassShowRewardParams": "Used to store all information regarding previewing / showing a reward",
    "FabricStepSequencerComponentBaseInstanceData": "Used to store the PackedStepTable during RerunConstructionScripts",
    "CreativePersistenceComponentBaseInstanceData": "Used to store the PersistenceID during RerunConstructionScripts. This avoids regeneration of the ID while moving objects or non-destructing modifications",
    "MarshalledVFXData:EffectIdTag": "Used to strongly associate systems.",
    "EFortItemType.ConversionControl": "Used to take account items and convert them to a more specific item",
    "InfiltrationModeState:CurrentPOITag": "Used to tell which POI the current round is taking place at",
    "FortPlayerControllerAthena:SwappingItemDefinition": "Used to the case where player queues a weapon swap and then switches to pickaxe",
    "ETutorialType": "Used to to represent the type of tutorial segment",
    "FortPlayerControllerZone:NumForceQueryProfileRequestsInFlight": "Used to track forceQueryProfile requests that in flight as a result of a purchase request while the server is out-of-date",
    "FortMangSentryInfo": "Used to track the alert level of cameras and turrets. Data for this must be passed in by bp",
    "FortPlayerControllerAthena:UnprocessedXp": "Used to track the amount of XP the user has received but has not yet been reported to the quest manager via the AthenaGainXp stat event",
    "EAvailableSquadSlotsListEntryState": "Used to track the current state of a given available slot entry",
    "EKeepPlayingTogetherVotingStatus": "Used to track this player's current status during end of match voting on\n    whether or not to keep playing together with the squad they just played with",
    "DynamicXpPlayerSessionTransient:LastTimeUpdate": "Used to track time passed since last update.",
    "FortPlayerStateComponent_Quests:ProgressedObjectives": "Used to track which objectives have already been progressed. This list is only populated for objectives that can\nonly be updated once per match. And if an objective is found in this list it will not update again.\nThis is only updated on the server.",
    "PartyMemberLobbyState:CurrentInputType": "Used to transmit a predictive input type before they lock in.",
    "FortMovementComp_Character:bTriggeredFallingFeedbackSinceLanded": "Used to trigger the falling feedback only once",
    "EShowPlacardPhase.StartShow": "Used to trigger the screen to start the show sequence",
    "NativeBuildingPropFourLayerMaterial": "Used to update lighting on four-layer materials",
    "FortCreativePersistenceComponentBase:OptionsComponent": "Used to update persistence possible and bind to OnAnyPropertyChanged and OnAnyPropertyChanged",
    "JackalOutPersistent:bShouldOverrideWaterSpringParams": "Used to update spring length and stiff in water",
    "FortMinigame:RaceProgressStatFilter": "Used to update the minigame race progress",
    "FortMinigame:RaceTimeStatFilter": "Used to update the minigame race time",
    "FortEncounterSettings:bUseEQSQueryToFindAISpawnLocations": "Used to use the EQS query to find AI spawn locations (rather than using the EQS query to find rift locations)",
    "VehicleRuntimeModifiers:DataVersion": "Used to verify matching versions in AFortAthenaVehicle::ValidateMultistateProperties",
    "RotationDebugInfo": "Used to wrap up debug info for ADS aim maintain rotation issue",
    "ParameterNameMapping:CascadeName": "Used when applying to a Cascade system",
    "ParameterNameMapping:NiagaraName": "Used when applying to a Niagara system",
    "FortGravityGunHolder:MaxAxisLengthPercent": "Used when calculating the current forward distance, we use a percentage of the object's largest extent axis.\nCurrentForwardDistance = HoldForwardDistance + (MaxAxisLength * MaxAxisLengthPercent) + ProjectedForwardVector.Size()",
    "FabricMetaSoundManagerComponent:OldGeneratorHandle": "Used when crossfading between two nodes",
    "EPartsShowingMode.ShowingTemporaryFallbackParts": "Used when delay has elapsed (or if delay is 0) and we have a preloaded fallback that matches this pawn's FallbackTag, then we show the fallback parts while loading desired parts",
    "EPartsShowingMode.ShowingTemporaryDefaultParts": "Used when delay has elapsed (or if delay is 0) and we show default parts while loading desired parts",
    "FortPlayerControllerAthena:GameChannelRecommendationInputComponent": "Used when showing a pop-up that recommends joining a chat channel.",
    "EPartsShowingMode.ShowingDefaultParts": "Used when there are no slots in the cosmetic budget and the default parts gets loaded",
    "EPartsShowingMode.ShowingFallbackParts": "Used when there is no space for desired parts and fallback parts are already loaded and available; alternatively when fallback parts are enforced",
    "EMiniMapIconParameterDataType.None": "Used when unset",
    "FortPlayerControllerGameplay:AbilityActivatedByInputInputComponentMap": "Used when we have abilities that will activate on input in that slot. We're using the item guid as the key.",
    "ConfirmationDialogAction:ResultName": "Used with DisplayName.",
    "FortQuestObjectiveStatTableRow:TemplateId": "Used with Mcp events to set what template to look for. Can also be a raw Type with no colon",
    "FortQuestObjectiveStat:TemplateIds": "Used with Mcp events to set what template to look for. Can also be a raw Type with no colon. Additional entries past the first are treated as 'AlternateTemplateIds'",
    "FortChallengeBundleQuestEntry:UnlockValue": "Used with a variety of unlockTypes\n\nDaysFromEventStart - how many days after the event starts should this be granted\nChallengesCompletedToUnlock - how many challenges need to be completed\nBundleLevelUp - what prestige level does the bundle need to be to unlock this quest",
    "FortAthenaMutator_Uranium:bCheatDrawRespawnLocations": "Used with the cheat manager to draw debug spheres at the respawn locations",
    "EFortMeleeFX": "Useful for verbose indexing. This is also the order of the tags in the PickAxe Authored Data Preset.",
    "EValkyrieSyncProjectOptions.AllowClientUpdate": "Useful to just run validation without continuing to upload and sync",
    "EDeviceFireVolumeFireOption": "User FireOption settings for FireVolume in Minigame",
    "AIPatrolPathComponent:SharedOptionNames": "User Option Names that will be shared to other path nodes (including event binding names)",
    "FortMutatorListComponent:UserOptions": "User Options that the designer is able to override",
    "VkProfileBuildResult_Client:AccountId": "User account ID for this client",
    "ELoginResult.AuthFailed_LoginLockout": "User account has been locked out, eg. from too many failed logins",
    "ELoginResult.ExternalAuth_Canceled": "User canceled during external auth linking",
    "EVoiceRepUploadRecordResult.Cancelled": "User cancelled the report",
    "FortGameUserSettings:bMotionBlur": "User choice if motion blur should be used (e.g. to prevent motion sickness)",
    "EFortActivityIsLockedReason.K3SAllowCreateSetting": "User does not allow Creative on a Creative mode.",
    "ESubGameAccessReason.NoAccess": "User does not have access to play",
    "EFortVolumeType.Featured": "User entered island code for a published island on a rift in a Hub.",
    "StructRecord": "User extend struct record which will be serialized",
    "FortClientAnnouncement_Basic:BasicData": "User facing data for this announcement",
    "FortCollectionBookRewards:Description": "User facing description of what the reward came from",
    "FortLoginReward:Description": "User facing description of what the reward came from",
    "CreativeDeviceSubscription:DestinationDeviceDisplayName": "User facing name for the destination device",
    "CreativeDeviceCached:DisplayName": "User facing name for the device",
    "CreativeDeviceSubscription:DestinationSubscriptionDisplayName": "User facing name for the event/function on the destination device",
    "CreativeDeviceSubscription:SourceSubscriptionDisplayName": "User facing name for the event/function on the source device",
    "FortTooltipValueData:DisplayName": "User facing name for the value, this may be empty for some values",
    "CreativeDeviceInfo:DisplayName": "User facing name for this device",
    "FortCollectionBookPageData:Name": "User facing page name",
    "FortCollectionBookSectionData:Name": "User facing section name",
    "FireVolumesForMinigame:FireOption": "User fire option setting where use of fire and water can be No, Yes, or UseIslandSettings",
    "FortUserCloudRequestPayload:UserNetID": "User for the request",
    "ValkyrieProjectDescriptor:Title": "User friendly name for the project",
    "ESubGameAccessReason.XboxHomeSharingAccess": "User has home-sharing access",
    "ESubGameAccessReason.LimitedAccess": "User has limited access",
    "FortGameUserSettings:SocialImportOptedOutVersion": "User has met the requirements to not be shown the Social Import prompt again",
    "ERegisteredPlayerUnregistrationStatus.UnregistrationWaitingForScoreSave": "User has not yet acquired the initial profile lock but has a request in flight, waiting for it to return before proceeding",
    "ERegisteredPlayerUnregistrationStatus.UnregistrationWaitingForProfileUnlock": "User has requested a save before unregisteration is complete and is waiting for it",
    "ERegisteredPlayerUnregistrationStatus.UnregistrationWaitingForFinalSave": "User has requested score be saved before unregistration is complete and is waiting for it",
    "ERegisteredPlayerUnregistrationStatus.UnregistrationComplete": "User has requested their profile lock be relinquished and is waiting for it to complete",
    "ELoginResult.Banned": "User is banned from this product",
    "ERegisteredPlayerUnregistrationStatus.UnregistrationStarting": "User is currently registered, no attempt at unregistration",
    "ESubGameAccessReason.XboxServiceOutageAccess": "User is given complimentary access during a service outage",
    "EAthenaRebootEligiblityStatus.User": "User is neither eligible themselves or in an eligible party",
    "ERegisteredPlayerUnregistrationStatus.UnregistrationWaitingForInitialLock": "User is starting the unregistration process",
    "ELoginResult.Console_PatchOrUpdateRequired": "User needs to patch their client or update their console",
    "ELoginResult.AuthFailed_CorrectiveActionRequired": "User needs to provide additional information or perform an additional corrective action to play",
    "FortCreativeVolumeLinkComponent:EditorOptionDefinition": "User options that a UFortCreativeVolumeLinkComponent should show in-editor\nNeeds to be set on the default class object. A different value set on an instance of the parent object will not work\nOn the minigame settings machine, this will effect the default island settings values when an island is first created",
    "ESubGameAccessReason.TokenItemAccess": "User owns item that grants access",
    "ValkyrieEditorConfig:EffectivePermissions": "User permissions the editor is currently running with",
    "ValkyrieEditorConfig:EnabledPermissions": "User permissions to simulate in the editor. If left empty, base permissions are used. This is only available in dev builds or when the user has the VKCreateUGCEpicDeveloper entitlement.",
    "AIHotSpot:UserSlots": "User placed slots",
    "FortMinigameSettingsBuilding:PostGameSettingsOverride": "User settings for Creative Royale Post Game flow.\nThese will be initialized elsewhere to the island settings, but can be overridden",
    "CatalogPurchaseInfoGift:PersonalMessage": "User specified custom message",
    "EAthenaRebootEligiblityStatus.Squad": "User themselves are eligible",
    "McpLeaderboardResultRow:PlayerUniqueNetId": "User this stat belongs to",
    "FortAthenaAIFormationSlotRuntime:UserPawn": "User who has reserved a slot",
    "EFortActivityIsLockedReason.AgeRating": "User's rating is set below the content rating.",
    "FortPlayerState:PlayerOSSName": "User-Reported OSS at login",
    "FortLobbyBeaconPlayerState:Platform": "User-Reported Platform",
    "DaySequenceModifierComponent:Bias": "User-defined bias.",
    "HomebaseBannerIconData:DisplayDescription": "User-facing display description for the banner icon item",
    "HomebaseBannerIconData:DisplayName": "User-facing display name for the banner icon item",
    "DaySequenceActor:DayInterpCurve": "User-provided interpolation curve that maps day cycle times to desired cycle times (usually from 0-24 hours).\nWhen disabled, the cycle will interpolate linearly.",
    "VkProjectOwnerInfo:Owner": "Username of whoever currently owns the project\nWill be the owner of a team if this project is owned by a team",
    "VkTeamOwnerInfo:Owner": "Username of whoever currently owns the team",
    "ERoundVictoryAnimation.None": "Uses BR Victory confetti",
    "EFortAntiAliasingMethod.DLSS": "Uses NVIDIA's DLSS plugin (NVIDIA RTX hardware only)",
    "EFortMantisTechniqueActivationInputType.Secondary": "Uses Primary Weapon ability",
    "EFortMantisTechniqueActivationInputType.Max_Invalid": "Uses Secondary Weapon Ability",
    "EFortAntiAliasingMethod.FXAA": "Uses UE4's Fast Approximate Anti-Aliasing",
    "EFortAntiAliasingMethod.TAA": "Uses UE4's Temporal Anti-Aliasing",
    "EFortAntiAliasingMethod.TSRLow": "Uses UE5's Temporal Super Resolution",
    "EVoteSessionNetworkType.DedicatedServer": "Uses a dedicated server, but not a mesh network of servers",
    "EWithinBoundsEvaluationType.UseSphereBounds": "Uses box extents as a sphere to evaluate overlaps.",
    "EWithinBoundsEvaluationType.UseOverlaps": "Uses component overlaps. Accurate for complex shapes and uses collision profiles to determine overlaps.",
    "EReachLocationValidationMode.Leash": "Uses leash radius to know location can be reached",
    "EFortIntensityCurveSequenceType.Random": "Uses random curves.",
    "EReachLocationValidationMode.SoftLeash": "Uses soft leash radius: bot can choose to go out deliberately",
    "ETankAimingMode.CameraRotationNoTrace": "Uses the camera rotation with no trace.",
    "EValueCostCalculationMethod.Max": "Uses the cost of the most expensive sibling Option Value and includes it in the instance cost",
    "EFortIntensityCurveSequenceType.Loop": "Uses the curves from first to last then repeats from the beginning.",
    "EFortIntensityCurveSequenceType.Sequence": "Uses the curves from first to last then repeats the last.",
    "EFortAbilityCostSource.Durability": "Uses the durability of the item owning this ability",
    "EFortAbilityCostSource.Stamina": "Uses the player's stamina",
    "FortAIBaseLootDropRow:Priority": "Uses the row with the greatest priority found",
    "FortAILootDropModifierRow:Priority": "Uses the row with the greatest priority found",
    "ETankAimingMode.CameraTraceFromDistanceScalar": "Uses trace from the camera starting at a position calculated by the AimingCameraToMuzzleDistanceScalar.",
    "ETankAimingMode.CameraTraceFromPivotSocket": "Uses trace from the camera starting at the pivot socket.",
    "LiquidRibbonSplineSegment:A": "Using a catmull-rom spline. A,B,C,D are vectors calculated and cached for use in getting points along the spline with p(t) = at^3 + bt^2 + ct + d",
    "LiquidRibbonSplineSegment:B": "Using a catmull-rom spline. A,B,C,D are vectors calculated and cached for use in getting points along the spline with p(t) = at^3 + bt^2 + ct + d",
    "LiquidRibbonSplineSegment:C": "Using a catmull-rom spline. A,B,C,D are vectors calculated and cached for use in getting points along the spline with p(t) = at^3 + bt^2 + ct + d",
    "LiquidRibbonSplineSegment:D": "Using a catmull-rom spline. A,B,C,D are vectors calculated and cached for use in getting points along the spline with p(t) = at^3 + bt^2 + ct + d",
    "FortItemEntryStateValueConstObject:StateType": "Using a tag gives us flexbility to define this within plugins. But we only really support direct tag look ups, not parent tags.",
    "EFortMatchmakingPrivacyConfiguration.UserPartyConfigured": "Using privacy settings of user party",
    "EFortDualWieldDataSource.DataDriven": "Using the additional single wield weapon data from weapon item definition",
    "EFortDualWieldDataSource.BaseConfiguration": "Using the base weapon data from the weapon item definition",
    "CosmeticsLayoutSlot:LinkedAnimGraphTag": "Using the the same Tags (values of the map) in different Slots will result in undefined behavior.",
    "FortAthenaMutator_EditModeHUDElements:bPendingNotify": "Using this boolean to trigger a call on the client. Can't use an RPC on this class as they don't work.",
    "PropertyToShowData:bForceShowProperty": "Usually if property path matches allowed property paths it will be shown. Sometimes though we may not have the required property path\ngenerated in this case this setting will force property to show regardless of it's property path",
    "FortCreativeItemVariantNotifierComponent": "Utility component for Actors needing event notifications and access to template objects for a given item variant",
    "FortAISpawnerUtilityComponent": "Utility component to use in Blueprint to assist in some common AI Spawning functionality.\nThis currently includes leveraging the EQS system, as well as capping the global spawn count",
    "ConditionalMaterialStyle": "Utility data structure defining a single material style with associated conditions which must be satisfied\nin order for this material style to be considered a valid candidate (e.g. health < 50%)",
    "ContextualMessageCandidate": "Utility data structure defining a single variant of an Message which can be used in a given conversation\nscenario e.g. with a specific conversation participant, or depending on the current world/player/npc state.\n(e.g. participant using specific CID)",
    "PriorityOrderedConditionalStyleList": "Utility data structure defining the variants of a Material style which can be used in a given scenario\nscenario e.g. when target actor is on low health, or under some other effect (e.g. gameplay tag)",
    "ContextualMessageConfig": "Utility data structure defining the variants of an Message which can be used in a given conversation\nscenario e.g. with a specific conversation participant, or depending on the current world/player/npc state.",
    "EFortReplicatedStat.UtilityScore": "Utility score. KEEP THIS BETWEEN MAX AND SCORE!",
    "FortMaterialStyleParameterData": "Utility struct Defining common types of parameters to be modified, and data required to be passed to them",
    "ThresholdTestConfig": "Utility struct for testing queries against variable data driven threshold values",
    "FortWeightedActorTypeList": "Utility struct to allow specification of a list of weighted actor class types, along with\nBP Exposed functionality to extract an actor type from the list",
    "FortCameraModeOverride": "Utility struct to override original FortCameraMode class with a prototype one",
    "SupportedService": "Utility structure to allow caching of frequently accessed data about a 'supported service' on init",
    "EFortActivityContextFeedbackReason": "Utilized to add special feedback when playing activities. Think \"warnings\" that don't disable gameplay:\nPossible additions:\nNoRoomOnTeam\nNoRoomInSession\nActivityEndingSoon\nLong Matchmaking Times\nParty size exceeds group size (Team rumble, for example)",
    "UnicornDriver:VATReelEliminationLookbackTime": "VAT highlight reel",
    "VKEditPlayspace": "VK Edit playspace for managing bonus bits of functionality such as improved island control or game phase control.",
    "VkProjectSearchResultSlim": "VK project result of a search",
    "VkProjectSearchResult": "VK project result of a search (legacy)",
    "ValkyriePluginDescriptor:ValkyrieSettings": "VK settings section of the VK plugin descriptor",
    "VkTeamMembershipResult": "VK team result of a search",
    "DAD_MediaItemUserOption:OptionValueName": "VUID of the media we will be streaming.",
    "FortWorldConditionTimeOfDay:ValidTimesOfDay": "Valid Times of Day.",
    "RockVehicleDemoConfig:DemolishAnglePitch": "Valid demo cone Pitch angle.",
    "RockVehicleDemoConfig:DemolishAngleYaw": "Valid demo cone Yaw angle.",
    "UserOptionDefinitionStringMetaData:bAllowLineBreaks": "Valid for RichTextEditor. True if this option value should allow line breaks in the text.",
    "UserOptionDefinitionTextMetaData:bAllowLineBreaks": "Valid for RichTextEditor. True if this option value should allow line breaks in the text.",
    "UserOptionDefinitionStringMetaData:bAllowStyleEditing": "Valid for RichTextEditor. True if this option value should allow rich text editing.",
    "UserOptionDefinitionTextMetaData:bAllowStyleEditing": "Valid for RichTextEditor. True if this option value should allow rich text editing.",
    "FortCurieFXSettings:ElectricityArcMeshes": "Valid meshes to use for electricity arc VFX",
    "SkyfireVaultOrbSpawner:CachedSkyfirePawnComponentsOnMothership": "Valid on Server Only. A cached list of the SkyfirePlayerPawnComponents for all players that are on the mothership when the spawner is initialized.\n    Used to keep track of what loot rarity each player has earned.",
    "FortAthenaMutator_Skyfire:PlayerAnalyticData": "Valid on Server Only. Stores analytic data for each player that is in the mothership.",
    "SkyfireVaultOrbSpawner:CachedSkyfireMutator": "Valid on Server Only. The active Skyfire mutator, cached for easy access.",
    "FortAthenaMutator_CenterSafeZonesOnAircraft:SafeZoneIndicesToCenter": "Valid on Server Only. The indices of the safe zones that should be centered between the aircraft path. Safe zones whose\nindices are not in this set will be placed randomly at a point in the safe zone that was generated before them.",
    "SkyfireVaultOrbSpawner:OrbSpawnPoints": "Valid on Server Only. The locations at which orbs can be spawned.",
    "SkyfirePlayerPawnComponent:AbductionTeleportStartTime": "Valid on Server Only. The time at which the abduction teleport started for this player. Used for analytics only.",
    "FortAthenaMutator_Skyfire:LoadedSkyfireAssets": "Valid on Server and Client. An array of loaded UObjects that will be used in skyfire (ability sets, backpack, knockback weapon). Prevents the contained objects from being GC'd.",
    "SkyfireVaultOrbSpawner:bHasSpawnedInitialOrbs": "Valid on Server and Client. Has the initial round of spawning been completed on the server. Replicated to clients.",
    "EMoveToolPlacementCheckResult.Valid": "Valid position",
    "FortPlayerControllerAthena:CabinModeRestartTimeInterval": "Valid values are from 1 to 60 seconds",
    "FortGlobalWindInfo:ValidWindInfos": "Valid wind (intensity, direction) pairs to choose from.  (One will be chosen randomly.)",
    "FortAthenaMutator_SplitStorm:SplitParallelTravelDistance": "Value A in the Split Storm Design Doc. The distance the two split circles should be from the previous circle, parallel to the direction\n    of the storm's movement (for testing purposes, this direction is always from the previous circle center towards the center of the map).",
    "FortAthenaMutator_SplitStorm:JoinParallelTravelDistance": "Value B in the Split Storm Design Doc. The distance the two split circles should be from the next circle, parallel to the direction\n    of the storm's movement (for testing purposes, this direction is always from the previous circle center towards the center of the map).",
    "FortAthenaMutator_SplitStorm:SplitPerpendicularTravelDistance": "Value C in the Split Storm Design Doc. The distance each of the two split circles should be from the center line (for testing purposes,\n    this center line is always from the previous circle center towards the center of the map).",
    "FortAthenaMutator_SplitStorm:JoinAngleFromParallelDegrees": "Value D in the Split Storm Design Doc. The angle in degrees that the next circle can vary towards or away from one of the storm circles.",
    "FortAIPerceptionComponent:LosingSightRadiusBump": "Value added to SightRadius to calculate radius for losing sight",
    "ZiplinePawnState:AuthoritativeValue": "Value adjusted by the authoritative client (in case start/end come out of order)",
    "PhysicsConstantForceData:EndValue": "Value at which the force reduction hits 0",
    "FortInGameMapManager:UnexploredOpacity": "Value at which to consider terrain still unexplored for exploration badges.",
    "FortSkyTube:EntryBiasTowardTangent": "Value between 0 and 1, which determines on entering a tube how much to redirect (rotate) velocity toward spline direction (in dominant velocity direction).\nIf 0, does nothing. If 1, always sends you parallel to the spline on entering. 0.5 would be a blend between entry direction and spline direction, etc.",
    "FortGameState:bCharacterCollectionEnabled": "Value for Default.Collections.Character.Enabled",
    "FortGameState:bFishingCollectionEnabled": "Value for Default.Collections.Fishing.Enabled",
    "FortGameStateAthena:bCraftingEnabled": "Value for Default.Crafting.Enabled",
    "FortGameStateAthena:bDamageComboHUDEnabled": "Value for Default.DamageComboHUDEnabled.",
    "FortGameStateAthena:DamageComboHUDMinHits": "Value for Default.DamageComboHUDMinHits.",
    "FortAthenaMutator_HealthAndShield:NumericalMutatorOverride": "Value for Max Health",
    "FortSplineGroundPath:LerpedMostRecentLocation": "Value for smoothed out/interpolated position of the splines end point.",
    "McpLeaderboardResultRow:Value": "Value for this stat",
    "GameRewardOverridesInfo:LootLevel": "Value for use determining loot levels.",
    "GameDifficultyInfo:LootLevel": "Value for use determining loot levels.  (Will be used to replace what was previously known as 'World Level'.",
    "LatentRepPlayerData:LerpStartLocation": "Value of CurrentLocation the last time we received a new LastRepLocation which required us to start lerping",
    "SpecialActorRepData:LerpStartLocation": "Value of CurrentLocation the last time we received a new LastRepLocation which required us to start lerping",
    "LatentRepPlayerData:LerpStartYaw": "Value of CurrentYaw the last time we received a new LastRepYaw which required us to start lerping",
    "SpecialActorRepData:LerpStartYaw": "Value of CurrentYaw the last time we received a new LastRepYaw which required us to start lerping",
    "OutpostPOSTBoost:PlayerStructureHealthModPerPOSTLevel": "Value of gampeplay effect applied to each player-built structure. Index represents level of P.O.S.T. (level 0 - no P.O.S.T. activated).",
    "FortDecoPreview:InvalidPlacementScalarParam": "Value of the can be placed scalar parameter when placement is not possible",
    "FortDecoPreview:ValidPlacementScalarParam": "Value of the can be placed scalar parameter when placement is possible",
    "RealitySaplingEnvQueryParam:Value": "Value of the param",
    "BuildingValueRules:AttackWeight": "Value per-attack required to destroy possible targets.",
    "FortAthenaMutator_SpyRumble:KillCountCutOff": "Value that controls when the required kills for next perk UI should stop displaying. When the number of kills for next perk exceeds this, the UI will become hidden",
    "HeldObjectMovementReplicatedData:RepIncrement": "Value that gets increment to ensure replication",
    "FortSplineGroundPath:ServerIndexToAssign": "Value that increments as points are added to the FortReppedPointList fast array.",
    "FortGameModeAthena:MaxActiveAIActors": "Value that overrides the setting of the AIDirector's MaxActiveAlive when set to a value greate than 0",
    "FortAthenaMutator_Knockback:KnockbackMultiplierInitialValue": "Value that the KnockbackData.KnockbackMultiplier is initialized to.\nIf increasing knockback multiplier with each hit (handled in the GA), it may be desired to have this > 0 (eg Shockwave uses 1)",
    "FortAthenaMutator_TimeStep:TimeStep": "Value the World Settings Time Diliation will be set to.",
    "LWMEncounterRemainingCountTransitionStateTreeTaskInstanceData:Value": "Value the count needs to be less than or equal to to transition",
    "BuildingValueRules:StructuralWeight": "Value to add when a target actor could be structurally supporting the objective actor.  Positive values discourage attacking structural supports; negative values encourage it.",
    "BuildingValueRules:TrapWeight": "Value to associate with traps.  Positive values discourage trap attacks, while negative values encourage them.  0 ignores them.",
    "DistanceToTargetComparison:AddedOffset": "Value to be added for comparision",
    "FortAnimNotifyMaterialOverride_ScalarParameter:ParameterValue": "Value to set for the parameter",
    "CustomPartScalarParameter:ScalarOverride": "Value to set into the scalar parameter.",
    "CustomPartTextureParameter:TextureOverride": "Value to set into the texture parameter.",
    "CustomPartVectorParameter:VectorOverride": "Value to set into the vector (i.e. linear color) parameter.",
    "MorphValuePair:MorphValue": "Value to set the morph target to.",
    "PhysicsConstantForceData:StartValue": "Value to start the force reduction",
    "FortFirstPersonCameraController:CameraBlendSwitchMeshTime": "Value to use during the camera blend to/from the custom camera mode to trigger the custom/stock mode mesh visibility events",
    "LivingWorldCalendarEventCondition:RatioValue": "Value use to compare against the ratio with the RatioBehavior.",
    "FortAthenaVehicle:CustomDepthStencilValueForHighlightedVehicle": "Value used for rendering a stencil under scopes using post-processing for special vehicle highlighting (when\nspecially highlighted, such as if locked on).",
    "FortAthenaVehicle:CustomDepthStencilValue": "Value used for rendering a stencil under scopes using post-processing for special vehicle highlighting by default.",
    "FortAthenaLivingWorldActorSpawnDescription:ActorDensityValue": "Value used in the density grid. It should reflect the client cost of the actor to spawn.",
    "FlashCountedActorInfo:FlashCounter": "Value used to force replication after every reset.",
    "PlaysetInfo:FlashCounter": "Value used to force replication after every reset.",
    "FortCurieVoxelReplicationDataNetSerializerConfig:MaxAllowedDataBits": "Value used to sanity check incoming data so that we do not over-allocate dynamic memory",
    "MaterialParamterLerpInfo:StartValue": "Value used with an alpha of 0",
    "MaterialParamterLerpInfo:EndValue": "Value used with an alpha of 1",
    "FortVehicleDerived": "Values derived from config at runtime",
    "FortGameStateAthena:DefaultGliderRedeployCanRedeploy": "Values for Default.GliderRedeploy.CanRedeploy",
    "FortGameStateAthena:DefaultParachuteDeployTraceForGroundDistance": "Values for Default.Parachute.DeployTraceForGroundDistance",
    "FortGameStateAthena:DefaultRedeployGliderHeightLimit": "Values for Default.RedeployGlider.HeightLimit",
    "FortGameStateAthena:DefaultRedeployGliderLateralVelocityMult": "Values for Default.RedeployGlider.LateralVelocityMult",
    "RadiusTrackingInfo:RadiusTrackingStaticValues": "Values set at initialization time which should remain unchanged afterwards.  (NOTE: The two exceptions are the\nTargetTrackerPointers and OwnerSquadMemberIndexBitMask within this struct.  I (Daniel.Broder) might reorganize this to clean it up later.)",
    "EffectUIParameters:ParameterKeyValuePairs": "Values should be stored in here by ID e.g. \"Quantity\" \"100\" etc.",
    "FortCowVehicle:SquashFloatSpringInterp": "Values used for doing the float spring interp.",
    "EDynamicUIZOrder.CustomMin": "Values used only from code and only in special cases",
    "SKPushVehicleInternalPersistent": "Values which only exist on the physics thread",
    "ETeamPerformanceMessageReplicationType.VariableReplication": "Variable replication. Low cost, mostly reliable. If several messages are sent near the same time only the last message will get sent.",
    "FortAthenaCreativePortal:bIsUsingUGC": "Variable that tracks whether the island/volume this portal is linked to is using UGC.",
    "FortAthenaMutator_Disco:TimeUntilPointAccrual": "Variable to let us know when it's time to count points from the control points",
    "FortBroadcastRemoteClientInfo:bRemoteIsInteracting": "Variables which we can populate on the server after receiving RPCs from our remote client.",
    "FortCosmeticDependentSwapData:SwapData": "Variant swaps to be applied",
    "FortDeathCauseInfo:DeathCauseInfoVariants": "Variants to this main death cause, like the main cause is falling but we were in a shopping cart.",
    "BuildingItemCollectorActor:ItemRotationTimeVariation": "Variation added to ItemRotationTime after we've read from the ActiveItemRotationTimeCurve.  We will add a value in the range [-ItemRotationTimeVariation, ItemRotationTimeVariation] to the result.",
    "EAppStore": "Various app stores supported.",
    "CatalogOffer:Prices": "Various prices this item can be offered at",
    "EFortSessionHelperJoinResult": "Various results that may occur in the course of using the session helper to reserve/join a session",
    "FortSourDropperColorData:TypeColors": "Various shades used in the Sour Dropper UI widget",
    "EFortMissionStatus": "Varying status of the Objective",
    "EFortObjectiveStatus": "Varying status of the Objective",
    "EFortBangType.VaultSchematics": "Vault Main Tabs",
    "FortMcpQuestObjectiveInfo:LinkVaultTab": "Vault tab to link to",
    "AntelopeOutPersistent:LeanPositionBack": "Vector containing passenger's current lean alphas. Y being right alpha, Z being forward alpha",
    "FortAthenaAntelopeVehicle:LeanPositionBack": "Vector containing passenger's current lean alphas. Y being right alpha, Z being forward alpha",
    "AntelopeOutPersistent:LeanPositionTargetBack": "Vector containing the target lean alphas. Y being right input alpha, Z being forward input alpha",
    "FortAthenaAntelopeVehicle:LeanPositionTargetBack": "Vector containing the target lean alphas. Y being right input alpha, Z being forward input alpha",
    "FortPartyRiftPortalManager:BoxHalfSize": "Vector for the center point of the box used to trace the space for the portal.",
    "FortDecoPreview:InverseInnerScaleVectorParam": "Vector parameter name for the inverse inner scale vector",
    "FortDecoPreview:InverseMovementVectorMaterialParam": "Vector parameter name for the inverse motion vector",
    "FortDecoPreview:InverseOuterScaleVectorParam": "Vector parameter name for the inverse outer scale vector",
    "FortDecoPreview:WorldSpacePivotVectorParam": "Vector parameter name for the world space pivot scale vector",
    "AthenaCarPlayerSlot:SeatTransitionVector": "Vector representing the direction and distance of a seat entry or transition, used for animation.",
    "FortAthenaGoatVehicle:LeanImpulseScaleBL": "Vector that holds the current forward and right alphas used to apply lean force to the back left of the vehicle",
    "FortAthenaGoatVehicle:LeanPositionBL": "Vector that holds the current forward and right alphas used to apply lean force to the back left of the vehicle",
    "GoatOutPersistent:LeanPositionBL": "Vector that holds the current forward and right alphas used to apply lean force to the back left of the vehicle",
    "FortAthenaGoatVehicle:LeanPositionBR": "Vector that holds the current forward and right alphas used to apply lean force to the back right of the vehicle",
    "GoatOutPersistent:LeanPositionBR": "Vector that holds the current forward and right alphas used to apply lean force to the back right of the vehicle",
    "FortAthenaGoatVehicle:LeanPositionFR": "Vector that holds the current forward and right alphas used to apply lean force to the front right of the vehicle",
    "GoatOutPersistent:LeanPositionFR": "Vector that holds the current forward and right alphas used to apply lean force to the front right of the vehicle",
    "FortAthenaGoatVehicle:LeanPositionTargetBL": "Vector that holds the forward and right input alphas of the passenger in the back left seat",
    "GoatOutPersistent:LeanPositionTargetBL": "Vector that holds the forward and right input alphas of the passenger in the back left seat",
    "FortAthenaGoatVehicle:LeanPositionTargetBR": "Vector that holds the forward and right input alphas of the passenger in the back right seat",
    "GoatOutPersistent:LeanPositionTargetBR": "Vector that holds the forward and right input alphas of the passenger in the back right seat",
    "FortAthenaGoatVehicle:LeanPositionTargetFR": "Vector that holds the forward and right input alphas of the passenger in the front right seat",
    "GoatOutPersistent:LeanPositionTargetFR": "Vector that holds the forward and right input alphas of the passenger in the front right seat",
    "FortMantisRootMotionWarpInfo:WarpTranslationVector": "Vector used to calculate the target location based on WarpTranslationMethod\n\nOffsetFromTargetActor: This vector is used as offset from the target actor\nStaticLocation: This vector is used as the target location\nReorient: This vector is used to reorient the original translation in the animation",
    "FortMaterialStyleParameterData:Vector": "Vector value of the material parameter this data will be changing",
    "FortMiniMapIconMaterialParameterData:Vector": "Vector value of the material parameter this data will be changing",
    "HoagieInPersistent:FortHoagieVehicleConfigs": "Vehicle Config",
    "VehicleDrivingCategory:VehicleDriving": "Vehicle Driving for this category",
    "EUIExtensionSlot.VehicleActionsSpacer": "Vehicle actions horizontal box spacer",
    "DigestedVehicleDrivingCategory:VehicleDriving": "Vehicle driving for this vehicle category",
    "FortVerbMessage_VehicleBase:VehicleFuelPercent": "Vehicle fuel percent 0-100",
    "FortVerbMessage_VehicleBase:VehicleHealthPercent": "Vehicle health percent 0-100",
    "FortMinigame:bVehiclesDamageObjectsMinigame": "Vehicle impact damages objects",
    "FortPlayerSettingsComponentBase:bVehiclesDamageObjects": "Vehicle impact damages objects",
    "FortMinigame:bVehiclesDamageVehiclesMinigame": "Vehicle impact damages vehicles",
    "FortPlayerSettingsComponentBase:bVehiclesDamageVehicles": "Vehicle impact damages vehicles",
    "CrashpadStaticParams:VehicleImpactRadius": "Vehicle impact radius",
    "VehicleModStaticMeshAttachmentData": "Vehicle mod static mesh attachment.",
    "FortGameFeatureActionParameters_AddVehicleModData:TargetVehicleTags": "Vehicle(s) to apply this mod data to.",
    "EFortItemType.Vehicle": "Vehicles",
    "FortAthenaMutator_Chrome:VehicleStartSearchParam": "Vehicles are spawned at Squad Starts that are selected with these search params.",
    "RockVehicleDemoConfig:VehiclesThatCanBeDemolished": "Vehicles with any one of these tags can be demoed when at supersonic.",
    "FlightParams:StallVelocityHigh": "Velocity above which stalling clamps are applied at their weakest.",
    "FlightParams:StallVelocityLow": "Velocity below which stalling clamps are applied at their hardest.",
    "FortAnimWorldStriderComponent:LocalVelocityYawAngle": "Velocity in local space converted to an angle",
    "BuffetBubblesReplicatedData:RelativeVelocity": "Velocity relative to the follow actor",
    "FortMovementComp_Character:SlideIfVelocityLessThanZ": "Velocity.Z must be less than this to be considered a slide.",
    "EContentChanges.VerseAssets": "Verse changes that can be pushed directly to the server (Verse Hot-Reload)",
    "EContentChanges.VerseServer": "Verse changes that need to be pushed to the content service",
    "CreativeDataChannelTarget:VersionByte": "Version Byte. Currently ignored.",
    "CreativeDataChannelTargetFN:VersionByte": "Version Byte. Currently ignored.",
    "CreativeDataChannelTargetRL:VersionByte": "Version Byte. Currently ignored.",
    "BaseReplayEventInfo:VersionNumber": "Version number for custom versioning, please bump me and gracefully handle degradation if you change this struct",
    "DynamicXpAggregatedStats:UniqueGameVersion": "Version number of what UniqueGameId represents.",
    "FortLobbyBeaconPlayerState:HomeBaseVersion": "Version number that is incremented whenever player's Home Base is changed",
    "PartyMemberCampaignInfo:HomeBaseVersion": "Version number that is incremented whenever player's Home Base is changed",
    "PublicDynamicXpStats:UniqueGameVersion": "Version number when these stats were set",
    "VkProfileBuildResult_Client:BuildId": "Version of Fortnite this client was running",
    "VkProfileBuildResult_Server:BuildId": "Version of Fortnite this client was running",
    "ValkyrieSourceControlSettings:FileVersion": "Version of the SourceControl settings file format",
    "FortCatalogMetaPreload": "Version of the catalog with asset pointers, so they can be preloaded",
    "ValkyrieProjectDescriptor:FileVersion": "Version of the project descriptor file format",
    "ValkyrieProjectReferenceDescriptor:FileVersion": "Version of the project reference file format",
    "VkResolvedModule:Version": "Version of the resolved module",
    "FabricStepSequencerComponent:LocalStepTable": "Version of the save table used locally and populated by the sequencer save",
    "BuildingActor:DataVersion": "Version of this object, saved to map or persisted",
    "ValkyrieProjectDescriptor:VersionSuffix": "Version suffix on the project name",
    "GameplayAbilityRepSharedAnim_Index": "Version that gets replicated in FastShared path using AFortGameStateZone::ReplicatedMontageMap",
    "FortCatalogMeta": "Version with hard pointers used by UI",
    "CrashpadStaticParams:NonPawnLaunchOffsetZ": "Vert offset for launching non-pawns",
    "CrashpadStaticParams:NonPawnLaunchScaleZ": "Vert scale for launching non-pawns",
    "FortHexMapCoord:Vertical": "Vertical Coord",
    "TurretCosmeticData:VerticalAimDeltaParamName": "Vertical aim delta param name",
    "FortMovementLeans:MaxVerticalFalloffAngle": "Vertical aiming angle at which the lean will be fully blended to 0 (applies both aiming up and down). Negative value to disable.",
    "FortMovementLeans:MinVerticalFalloffAngle": "Vertical aiming angle at which the lean will start to blend towards 0 (applies both aiming up and down). Negative value to disable.",
    "SlipperySlopeParams:SlopeLaunchVerticalVelocityBoostMultiplierJumping": "Vertical multiplier to usual ramp boost applied when jumping. 0 = no jump velocity (just use ramp velocity + vertical boost), 1 = normal boost (normal ramp angle + boost) + jump.",
    "CrashpadStaticParams:CrashpadLaunchVertOffset": "Vertical offset for crashpad-on-crashpad",
    "FortGyroV2Settings:GyroV2VerticalMultiplier": "Vertical sensitivity multiplier for having different gyro aiming sensitivity in each axis",
    "BuildingActor:VertSnapGridSize": "Vertical size of the grid to snap to",
    "SlipperySlopeParams:SlopeLaunchVerticalVelocityBoost": "Vertical velocity boost applied when leaving an upward ramp. Curve table is looked up by angle of the ramp (0=horizontal, +45 slopes up, etc)",
    "FortPlayerPawn:bIsTouchingTouchpadSimple": "Very simple test for whether this pawn's touchpad (if there is one) is being touched. Doesn't try to account for multiple simultaneous touch/releases.",
    "FortWeapon:PrimaryImpactForceFeedbackEffect": "Vibrate while impacting melee primary fire. Null for no vibe.",
    "FortWeapon:SecondaryImpactForceFeedbackEffect": "Vibrate while impacting melee secondary fire. Null for no vibe.",
    "FortWeapon:PrimaryForceFeedbackEffect": "Vibrate while shooting primary fire. Null for no vibe.",
    "FortWeapon:SecondaryForceFeedbackEffect": "Vibrate while shooting secondary fire. Null for no vibe.",
    "ESettingType.WindowMode": "Video Tab Settings",
    "VideoWidgetConfig:VideoDisplayDataID": "Video data display lookup key. Searches DefaultVideoDisplayData",
    "ViewOffsetData:OffsetHigh": "View point offset for high player view pitch",
    "ViewOffsetData:OffsetLow": "View point offset for low player view pitch",
    "ViewOffsetData:OffsetMid": "View point offset for medium (horizon) player view pitch",
    "FortSpectatorCameraComponent:IntendedViewTarget": "ViewTarget this cam comp was created for",
    "ELetoDisplayMode.Simultaneous": "Viewports displayed simultaneously for both players",
    "FortVisibilityComponent": "Visibility Component\n\n      The base component that acts as an interface to specialized component. By\n      default his component is used to setup observer state, register the actor\n      with the visibility manager and offer the CanBeSeen overridable method.\n\n      CanBeSeen by on the base level check for Same Team against an observer.\n\n      Observer - Indicates this actor is an observer and should register as such.",
    "WaxVisibilityModifiers:UI_VisibilityMode": "Visibility mode for UI.\nValues are EWaxMinimapDrawMode\nKeyed by EWaxState\n\n0 - EWaxMinimapDrawMode::NoDrawing Not visible at all.\n1 - EWaxMinimapDrawMode::DrawCloseAndMoveOrShoot Only visible nearby and while moving/shooting.\n2 - EWaxMinimapDrawMode::DrawMoveOrShoot Only visible while moving/shooting.\n3 - EWaxMinimapDrawMode::DrawAlways Visible at all times.",
    "FortGameCueCloakModifier": "Visibility modifier data used by AFortGameCueNotifyLoop_Cloak.\n    Creates a visibility modifier for the cloak that can easily be toggled on/off and will smoothly fade in/out.",
    "FortAthenaMutator_Wax:VisibilityModifiers": "Visibility modifiers for a given wax state",
    "FortGameCueNotifyLoop_Cloak:CloakModifiersByNameMap": "Visibility modifiers that can be toggled on/off during runtime.\n     When enabled a modifier will add to and/or multiply the target player's visibility level.",
    "AIVisibilityRangeSettings:VisibilitySettings": "Visibility options. When HiddenWhenCrouched and HiddenWhenIdle are both set, the pawn is only hidden when its both idle AND crouched (not or)",
    "FortPlayerMannequin:bIsMannequinVisible": "Visibility to apply to all character parts and weapon skelatal mesh.",
    "VisibilityInfo": "VisibilityInfo\n\n      Struct that stores the visibilty state against each team.\n\n      Actor - The actor this info is for\n      TeamVisibilityFlag - Bitfield for each team to store true/false if\n                                               they see the actor.",
    "FortVisibilityManagerComponent": "VisibilityManager\n\n      This manager handles looping through all visibility infos and checking if each\n      observer can see that info and if so marks the info and syncs it to all clients.\n\n      The visibility manager has a 1 to 1 relationship to the visibility components. A\n      component will automatically register its owner actor with the manager and if the\n      component is marked for observing then that actor will be registered as an observer\n      too. This is normally reserved for Players, and if we have almost everything observers\n      we should change this tech a bit...\n\n      ObserverArray - The list of observers that all info's check against.\n      VisibilityInfoArray - The array of infos that are sync'ed to the clients indicating an\n                                                Actors visibility.",
    "EAthenaRewardItemType.Normal": "Visible and exported to MCP",
    "FortAthenaMutator_Tag:BlueTeamVisuals": "Visual Data for how to color players on the blue team.",
    "FortAthenaMutator_Tag:RedTeamVisuals": "Visual Data for how to color players on the red team.",
    "FortProjectileTrajectory:SplineMeshComponents": "Visual mesh components used by this trajectory to display our SplineComponent. These will be lazily created.",
    "FortAthena_WaxToken:TokenMesh": "Visual mesh used to represent the token.",
    "WantedSystemCombatAbilities:Tier": "Visual tier of this buff.  It will change the UI effects. 0 is first tier.",
    "FortMultiActorVisualizerComponent": "Visualizer component for tracking Actors connected to parent actor.\nCan be used for seeing which actors a spawner might control for example.",
    "EPartyMemberVoiceChatStatus.Disabled": "Voice chat is disabled",
    "EPartyMemberVoiceChatStatus.Enabled": "Voice chat is enabled",
    "HeroSpecializationDesignerData:FemaleOverrideFeedback": "Voice for females",
    "HeroSpecializationDesignerData:MaleOverrideFeedback": "Voice for males",
    "PresetVols:Vols": "Vols are in decibels relative to full scale (dBFS), and should be in the range -96.0 to 0.0",
    "EncounterMobInstance:VolumePointProvider": "Volume LWM point provider used for this mob  - only valid if the  is set to use a volume-based point provider.",
    "FortSpicySakeGameplayCueNotifyLoop_Alive:TetheredVolumeMultiplier": "Volume change when tethered",
    "FortSpicySakeGameplayCueNotifyLoop_Alive:VelocityClampingMaximum": "Volume change when tethered",
    "FortSpicySakeGameplayCueNotifyLoop_Alive:VelocityClampingMinimum": "Volume change when tethered",
    "EFortVolumeType.Hub": "Volume for Featured islands.",
    "FortGameStateAthena:VolumeManager": "Volume manager",
    "FortPlayerFoleyContextSettings:VolumeMultiplier": "Volume multiplier for sound playback",
    "AudioDynamicSoundData:Volume": "Volume multiplier to apply to sound. Range = [0.0f, inf], where 0.0f is silent and 1.0f is unchanged.",
    "FortAthenaMapInfo:AircraftDropVolume": "Volume representing the area in which players can eject from the aircraft.\n      Will be used instead of AircraftDropZone.",
    "SimpleDestructiblePropGroup:IncomingExplosionDamageVolume": "Volume used to detect when explosions occur in our prop group",
    "FortSafeZoneVolumeDefinition:Volume": "Volume used to reject safe zone locations.",
    "DevicesDataTrackingComponent": "Volume's component used to track specific devices' data",
    "FortAthenaMapInfo:SafeZoneVolumeDefinitions": "Volumes representing the area in which safe zones can spawn. Volumes must be added largest to smallest.",
    "FortMovementComp_Character:VortexVolumeSkydivingControlParams": "Vortex Volume controls. Similar to Vortex active params, but this does not apply gravity.",
    "FortMovementComp_Character:VortexSkydivingControlParamsActive": "Vortex active active downward dive",
    "FortMovementComp_Character:VortexSkydivingControlParamsActiveUpward": "Vortex active active upward dive",
    "FortMovementComp_Character:VortexParachuteControlParams": "Vortex parachute",
    "FortMovementComp_Character:VortexSkydivingControlParamsPassive": "Vortex passive controls",
    "VoteListenerComponent": "Voting component responsible for listening to the updates and results of a voting scenario.\nAllows for cosmetic feedback about the voting scenario.",
    "VoteBroadcasterComponent": "Voting component responsible for managing a voting scenario by receiving commands from the mesh network, or other authority entity, and\ncommunicating updates/results to other entities such as responders and listeners through the voting subsystem",
    "VoteResponderComponent": "Voting component responsible for receiving direction about a voting scenario from the voting dispatch subsystem, and\ncommunicating out either a single vote selection for many users, or a single user's selection from the choice of all possibilities.\nNOTE: Inherits from VoteListenerComponent because designers will likely attach this to something that wants the same\n      information listeners want, but with added functionality to push responses.",
    "HarmonixAnalyzerEffectResults:VuChLevels": "Vu",
    "EKeyboardMouseKeybindingsAtRegistrationTime.GameFeatureRegistrationTime": "WARNING: for legacy input, having this action run at registration time may not be able to read the defaults, leaving the actions unbound.",
    "FortAthenaSKPushCannon:PushCannonPhysicsMaterial": "WORKAROUND for FORT-275229 : Default physics material for the cannon body",
    "FortAthenaSKPushCannon:PushCannonNoSleepPhysicsMaterial": "WORKAROUND for FORT-275229 Modified physics material for the cannon body with his sleep thresholds on zero so the body cannot sleep",
    "StartCondition:WaitAtLeast": "Wait at least (seconds or ticks, depending on what's specified above. ticks will be rounded down to the nearest integer)",
    "EFortWaitForTimeOfDayManagerUpdatedBehavior.ContextAware": "Wait for local TODM if the OwningContextObject is a minigame or a gameplay volume, otherwise will wait for global TODM",
    "FortAthenaLivingWorldEvent:ActivationGamePhaseStep": "Wait for this game phase step before activating the event .",
    "FortAthenaLivingWorldEvent:ActivationSafeZoneIndex": "Wait for this safe zone index before activating the event .",
    "FortGameSessionDedicatedAthena:PostBackfillAssignmentUpdateDelay": "Wait this long after completing a backfill request before sending the updated params to MMS.",
    "FortGameSessionDedicated:ConsoleSessionRetryWaitSeconds": "Wait this many seconds after a console creation failure to try again",
    "EMatchmakingState.CleaningUpExisting": "Waiting for cleanup and continue",
    "EActivePreTravelSetupStepsMask.WaitingForServerInitialization": "Waiting for content being downloaded by the content beacon",
    "EActivePreTravelSetupStepsMask.WaitingForDownloadableContent": "Waiting for sub game content to be ready",
    "EShowPlacardPhase.WaitBeforeInitialFadeOut": "Waiting period before we fade out the screen before showing our placard",
    "ELoginResult.WaitingRoomFailed": "Waiting room errored",
    "FortGameStateZone:WaitingToLeaveZoneTimeLeft": "Waiting to leave the zone after completion",
    "EActivePreTravelSetupStepsMask.WaitingForSecondContentBeacon": "Waiting until the contentbeacon has confirmed disconnected state, this is required so we\ndon't have a stale connection laying around when we reconnect after travel",
    "EActivePreTravelSetupStepsMask.WaitingForContentBeaconDisconnect": "Waiting until the server is ready to receive players (When the playlist is initialized)",
    "EFortWaitForTimeOfDayManagerUpdatedBehavior.GlobalOnly": "Waits for global TODM only",
    "EFortWaitForTimeOfDayManagerUpdatedBehavior.LocalOnly": "Waits for local TODM only, but requires the OwningContextObject to be a minigame or a gameplay volume",
    "EFoundationOrdering.GridWalkSnake": "Walk the grid by rows and columns",
    "EFoundationOrdering.GridWalkSpiral": "Walk the grid by rows and columns, alternating direction",
    "EFoundationOrdering.SkydivePaths": "Walk the grid in a Z-order/Morton curve",
    "EFoundationOrdering.ZOrderCurve": "Walk the grid spiralling towards the center (prioritizes placing foundations on the edge of the island together first)",
    "FortPawnStats:SpeedWalk": "Walking speed for the pawn",
    "EFortBuildingType.Pillar": "Wall taking up entire square",
    "EFortBuildingType.Roof": "Wall with width for roofing",
    "TurretCosmeticData:WarmColor": "Warm color",
    "TurretCosmeticData:WarmThreshold": "Warm threshold",
    "FortLockerCategorySlotInfo:Priority": "Warning: Categories and slots should ideally be structured in priority order, if out of order this value will force them back into order when loaded",
    "FortExposedContentValidatedPackage:PackageWarnings": "Warnings reported from validating this package",
    "FortExposedContentValidatePackagesResult:GeneralWarnings": "Warnings reported that aren't tied to a specific package",
    "EFortMantisNotifyRotationWarpRateRule.Snap": "Warp rotation toward the target such that it snaps to facing immediately.",
    "EFortMantisNotifyRotationWarpRateRule.WindowDurationLerp": "Warp rotation toward the target such that it takes the duration of the window to complete the rotation.",
    "EFortMantisNotifyRotationWarpRateRule": "Warping rules to apply to rotation rate during a RootMotionWarp mantis notify window",
    "CreativeSelectedActorInfo:bWasCollisionEnabled": "Was collision enabled on this thing?  We might need to restore the setting later.",
    "EFortMissionStatus.Created": "Was freshly created",
    "EFortObjectiveStatus.Created": "Was freshly created",
    "FortPartyCampaignInfo:SessionIsCriticalMission": "Was the SessionId found via the critical mission flow",
    "FortSearchPassState:FailureType": "Was there a failure of some kind",
    "FortItemEntry:bWasGifted": "Was this a gifted item?",
    "FortAthenaAircraft:bWasSpawnedForAircraftPhase": "Was this aircraft spawned during the aircraft phase, or spawned out of phase for a special event?",
    "BuildingActor:bPlayerPlaced": "Was this built by a player?",
    "FortItemEntry:GiftingInfo": "Was this item gifted from a player and if so, what was their player ID",
    "FortMissionRecord:MissionStatus": "Was this mission finished or not?",
    "BuildingActor:bEditorPlaced": "Was this placed in the editor?",
    "FortSearchPassState:bWasCanceled": "Was this search attempt canceled",
    "EFortPartyMemberLocation.WatchingReplay": "Watching a replay",
    "FortPlayerPawn:IgnoredWaterBodies": "Water body",
    "FortProjectileBase:WaterInteractionComponent": "Water interaction component",
    "FortMovementComp_Character:SurfaceSwimmingWaterControlParams": "Water params",
    "FortSpaghettiVehicle": "Water ski vehicle to attach to the meatball boat - functionality based around hamsterball",
    "TieredModifierSetData:WaveNumber": "Wave number this applies to; Note that it is valid to specify multiple entries with the same wave number",
    "TieredWaveSetData:WaveRules": "Wave ruleset",
    "HarmonixAnalyzerEffectResults:Waveform": "Waveform",
    "TieredWaveSet:WaveData": "Waves",
    "FortDifficultyEncounterSettings:SpawnLimitMode": "Way to know when to stop the encounter by the number of AI spawned. Use No Limit to never stop the encounter (Need to stop it manually).",
    "EFortWeaponTriggerType": "Ways that a weapon ability can be activated by button press",
    "LWMEncounterInfo:LWMEncounter": "We are the owner of the instance, use a strong ptr",
    "EFortGameplayState.LeavingZone": "We are transitioning out of the zone",
    "ERespawnAndSpectatePlayerRespawningState.WaitingOnPlayerSelection": "We are waiting on the player to select a respawn target before we respawn them\n If the player does NOT pick a target quickly enough we will attempt to force the default option upon them",
    "ERespawnAndSpectatePlayerRespawningState.WaitingOnTimer": "We are waiting on the player's respawn timer before they can respawn",
    "SpecialEventTODMSubphaseData:SpeedFactor": "We call SetTimeOfDaySpeedFactor() with this value, if it's non-negative",
    "SpecialEventTODMSubphaseData:TimeOfDay": "We call SetTimeOfDayValue() with this value, if it's non-negative.\nExpected range is [0, 24).  Values beyond that will be modded by 24.",
    "PartyRiftEmotesPlayerComponent:bIsOwnerPartyLeader": "We can check if the component's owner is a party leader on the client, but not on the server\n     so store whether or not the player is the party leader on the server when server functions are\n     called by the client. Replicated in case getter is called on the client, but this value is not\n     100% reliable on client and is noted as such by function comments.",
    "QualitativePerfMetricSettings:Profiles": "We can point different device profiles to these metric profiles via the Cvar Fort.QualitativePerfMetricProfile.",
    "BuildingSMActorClassData:BlueprintMICs": "We can use preset MICs here so that we don't have to have the overhead of MIDs",
    "RockVehicleAxleConfig:Suspension": "We can't calculate this value because we don't have the box center different from the actor center anymore.",
    "LacklusterData:ClassesToActorTypes": "We check this array in order, and if the actor can be cast to the class, we define it as the actor type",
    "FortTargetFilter:bConsiderFriendlyFireWhenExcludingFriends": "We consider friendly fire when excluding friends, meaning if we are friends and friendly fire is on -> trigger",
    "DayPhaseInfo:LowPriPostProcessComponent": "We copy all of the settings from the actor's corresponding DayPhasePostProcessComponent[] entry into this\nidentical component with a lower priority so that we can use it when transitioning from the last phase back to\nthe first (Night->Morning).  (Actually, for consistency we have to have it on at all times, but the reason we\nneed it is Night->Morning.)  For that reason, for Morning (which needs no duplicate), LowPriPostProcessComponent\nis null.",
    "FortTeamMemberPedestal:VisualOrderIndex": "We could determine this from the world, but that's more complicated than we really need, compared to a one-time setup",
    "LacklusterData:MaterialsToIgnore": "We don't want to apply chrome to these materials",
    "FortAthenaVehicle:MobileCustomUI": "We filter mobile custom UI if we're on mobile.",
    "FortMission:PlacementActorPreferredTagData": "We go through each entry to determine which preferred tags to use for placement actors\nbased on difficulty. Once we find the highest difficulty that matches our current difficulty,\nwe use those tags.",
    "EShowPlacardPhase.FadeOut": "We have finished showing our UI placard, we tell the placard to hide and start fading out the screen",
    "EShowPlacardPhase.DoneShowingScreen": "We have finished showing the screen, broadcast OnShowPlacard_Finished",
    "EVoteSessionNetworkType.NotDetermined": "We have not determined the network type yet",
    "BattleMapNode:NextEdges": "We have two versions of the next nodes, one with the pair <node, edge> and one with only the <edge> to enforce the GC to keep it in memory",
    "EFortWorldRecordState.WaitingForResponse": "We haven't started yet",
    "PowPlayerDataEntry:POWMutator": "We keep the mutator to get access to POW data",
    "EFortWorldRecordState.LoadingZoneRecord": "We load world records first",
    "EItemContextAction": "We might want to have a different button action depending on what item is selected in the presentation screen.\n* This enum represents all these possible actions.",
    "RepMovementModeExtension:DummyVar": "We need a variable in the properties just so we get sent to the serialize, without this, we don't go there at all, until I have a variable, I'm keeping this one",
    "PinModalCallback": "We need to store a callback for each local player to support split-screen showing pin modals correctly\n* @jan.orlowski: in a future ideal world, we don't use the UIDirector to be an intermediary for this at all since everything in this flow is separate for each user, only this director is shared.",
    "FortPlayerControllerAthena:bMatchStatsForPlayerSent": "We only fire the match stats once",
    "ERespawnAndSpectatePlayerRespawningState.WaitingOnClientReady": "We shouldn't attempt to respawn until the normal respawn system has marked the client as ready.\n     If we attempt to respawn before this flag has been marked, it can get marked again in the middle of the screen transition the respawn select screen triggers\n     this will cause the player to respawn before the camera can be safely attached on the client.",
    "FortAthenaMutator_Uranium:TeleportMutator": "We teleport players out as the payload arrives at each checkpoint, then back in for the next leg.",
    "EFortWorldRecordState.SavingZoneRecord": "We then load a zone record if applicable",
    "FortReplaySpectator:FollowedPlayerPrivate": "We track playerstates because pawns can move in/out of relevancy unpredictably.\n      #NOTE: Don't access this directly, generally. Use GetFollowedPlayer() above.",
    "ETriState": "We use TrueState and FalseState because unreal doesn't allow True and False as enum values",
    "FortVehiclePhysicsCollisionDamageComponent:OverriddenDamageData": "We use this array to match tags with the damaging actor to override the way we do damage",
    "FortGameFeaturePluginMetadata": "We use this object to display plugin properties using details view.",
    "EFortGameplayCueAttachType.AttachToTarget": "We will attach to the target if possible",
    "SpecialEventRewindComponent:LocalRecordingFPS": "We will attempt to record as many as this number of frames per second.\nWe pre-allocate our local recording's frame array with size MaxRecordingDuration * LocalRecordingFPS.",
    "EFortGameplayCueAttachType.DoNotAttach": "We will not attach to target. We may use it to get spawn location/info but will not attach the spawned component",
    "ELevelSaveRecordVersion.SpawningActorsWithConsistentName": "We will now spawn actors with the FName they had when they were spawned",
    "FortMinigame:AutoEndTeamThreshold": "We'll end the game when the number of teams with living players remaining is equal to or less than this",
    "AthenaCobaltStormShield:ClientStormShieldShrinkTimerValue": "We'll replicate the initial timer value to control whether the timer should be on or off.",
    "FortAthenaMutator_DadBro:ListeningPawn": "We're awaiting this pawn's OnLanded event.",
    "EFortWorldRecordState.RetrievingTheaterInformation": "We're waiting for a callback of some sort",
    "EFortWorldManagerState.WMS_WorldQueryComplete": "We've finished querying the world state, are ready to load or create",
    "FortPlayerScoreReport:PlayerState": "Weak pointer this is bound to, if valid",
    "FortAthenaMutator_SpecialRelevancy:SpecialRelevancyNode": "Weak ptr to the node",
    "LevelSaveRecordCollectionItem:LevelSaveRecord": "Weak ptr to the original level save record template.",
    "CatalogOfferDefinition:DisplayAsset": "Weak reference to the asset used to display this offer.\nCan be a texture or material directly or an item definition (like the one this offer corresponds to)\nThis is only used when linking to assets in the editor.",
    "WeaponAccuracyCategorySpecialization:WeaponAccuracy": "Weapon Accuracy for this specialization",
    "FortWeapon:WeaponAdditiveAnimSet": "Weapon Additive anim sets to be used for this weapon (used for adjusting hand positioning on shared anims, etc.)",
    "EPerceptionSoundType.WeaponFiring": "Weapon Firing",
    "DigestedWeaponAccuracy:TrackingOffsetError": "Weapon accuracy (hip fire)",
    "DigestedWeaponAccuracyCategorySpecialization:WeaponAccuracy": "Weapon accuracy for this specialization",
    "DigestedWeaponAccuracyCategory:WeaponAccuracy": "Weapon accuracy for this weapon category",
    "WeaponAccuracyCategory:WeaponAccuracy": "Weapon accuracy for this weapon category",
    "DigestedWeaponAccuracy:TrackingDistanceFarError": "Weapon accuracy when erring farther from the target (hip fire)",
    "DigestedWeaponAccuracy:TargetingTrackingDistanceFarError": "Weapon accuracy when erring farther from the target when targeting (ADS)",
    "DigestedWeaponAccuracy:TrackingDistanceNearError": "Weapon accuracy when erring nearer from the target (hip fire)",
    "DigestedWeaponAccuracy:TargetingTrackingDistanceNearError": "Weapon accuracy when erring nearer from the target when targeting (ADS)",
    "DigestedWeaponAccuracy:TargetingTrackingOffsetError": "Weapon accuracy when targeting (ADS)",
    "FortAthenaMutator_PlayerSettingsBase:TargetQueries": "Weapon and target filters for whether or not we should damage ourselves",
    "FortWeapon:WeaponPawnAnimSet": "Weapon anim sets to be used for this weapon",
    "FortAthenaMutator_OnDmgDamageSelf:WeaponQueries": "Weapon filter for whether or not we should damage ourselves",
    "FortAthenaMutator_OnDmgDamageSelf:WeaponQueryIndex": "Weapon filter for whether or not we should damage ourselves",
    "FortBaseWeaponStats:ReloadType": "Weapon fire behavior when the trigger is pressed / released",
    "FortRangedWeaponStats:RecoilHoriz": "Weapon horizontal recoil, in degrees",
    "FortWeapon:ImpactArraySupportData": "Weapon impact data for impact fx that support arrays. Uses surface type as index.",
    "EFortWeaponAbilityRemovalReason.RemovedFromInventory": "Weapon is being removed from its owner's inventory",
    "FortHeldObjectComponent:EquippedWeaponItemDefinition": "Weapon item definition to equip behind the scenes for the held object.",
    "WeaponSeatDefinition:VehicleWeapon": "Weapon item definition to use for Vehicle Weapon",
    "WeaponSeatDefinition:LastEquippedVehicleWeapon": "Weapon item definition used to temporarily override VehicleWeapon (e.g. collected weapons on biplanes LTM)",
    "WeaponSeatDefinition:VehicleWeaponOverride": "Weapon item definition used to temporarily override VehicleWeapon (e.g. collected weapons on biplanes LTM)",
    "DigestedWeaponAccuracy:TrackingDistanceNearErrorProbability": "Weapon probability to err nearer to the target based on range",
    "FortAthenaMutator_WeaponSettings:WeaponSettings": "Weapon settings components registered with this mutator.",
    "DigestedRangedWeaponSkillCategorySpecialization:WeaponSkill": "Weapon skill set for this specialization",
    "RangedWeaponSkillCategorySpecialization:WeaponSkill": "Weapon skill set for this specialization",
    "DigestedMeleeWeaponSkillCategory:WeaponSkill": "Weapon skill set for this weapon category",
    "DigestedRangedWeaponSkillCategory:WeaponSkill": "Weapon skill set for this weapon category",
    "MeleeWeaponSkillCategory:WeaponSkill": "Weapon skill set for this weapon category",
    "RangedWeaponSkillCategory:WeaponSkill": "Weapon skill set for this weapon category",
    "TrapItemDefintionDesignerData:WeaponStatHandleForm": "Weapon stat handle data",
    "WeaponAmmoCheat:WeaponTag": "Weapon tag associated to the cheat",
    "DigestedWeaponAccuracy:TargetingActivationProbability": "Weapon targeting activation probability based on range",
    "WeaponAccuracy:TargetingActivationProbability": "Weapon targeting activation probability based on range [0..1]",
    "EFortWeaponType": "Weapon type used for reporting, currently used only in PvP",
    "FortRangedWeaponStats:RecoilVert": "Weapon vertical recoil, in degrees",
    "EKeepContainerType.Armory": "Weapons of choice",
    "CrashpadStaticParams:WebLaunchGameplayEffect": "Web launch gameplay effect",
    "EFortQuestSubtype.WeeklyChallenge": "Weekly challenge",
    "FortAthenaAIBotTargetHeuristicSettings:ThreatDamageWeightMultiplier": "Weight Multiplier from target hurting bot -> TotalWeight += Weight + MULTIPLIER * Square(AccumulatedReceivedDamage) * TimeSinceLastDamage.GetValueAtLevel(TimeSinceLastDamage)",
    "AthenaFortAIBotDigestedWeightedBuildingList:Weight": "Weight associated with the building list.",
    "AthenaFortAIBotWeightedBuildingList:Weight": "Weight associated with the building list.",
    "SharedQuestRow:Weight": "Weight for this quest. This allows us to weight quests differently (or disable a quest)",
    "FortAthenaLivingWorldEvent:Weight": "Weight in the budget of available actors to spawn.",
    "EncounterMobManagerComponent:LWMDensityWeight": "Weight of the LWM density to reserve for all Mob s to be spawned by this encounter",
    "PerceptionStateSettings:ThreatDistanceWeight": "Weight of the target based on distance",
    "FortAthenaLivingWorldEventDataEntry:Weight": "Weight of this event entry.",
    "WeightedAIInventoryLoadout:Weight": "Weight of this loadout relative to other loadouts",
    "MMRSpawningDataTableInfo:Weight": "Weight of this spawn item",
    "FortCreativeDeviceButtonComponent:WeightOffset": "Weight offset used for sorting options in the customize panel",
    "FortGameplayMessageComponentBase:WeightOffset": "Weight offset used for sorting options within the customize panel",
    "FortBotClusterLootWeightDataTableRow:Weight": "Weight to assign",
    "FortLootPackageData:NamedWeightMult": "Weight to chance to pick this entry. Sum of weights are added and divided to find actual chance",
    "FortLootPackageData:Weight": "Weight to chance to pick this entry. Sum of weights are added and divided to find actual chance",
    "FortLootTierData:Weight": "Weight to chance to pick this entry. Sum of weights are added and divided to find actual chance",
    "FortMissionEntry:Weight": "Weight to chance to pick this entry. Sum of weights are added and divided to find actual chance",
    "LootPackageRow:Weight": "Weight to chance to pick this entry. Sum of weights are added and divided to find actual chance",
    "LootTierDataRow:Weight": "Weight to chance to pick this entry. Sum of weights are added and divided to find actual chance",
    "WeightedAIPerk:RandomWeight": "Weight to use to select the Perk compared to the others in the list",
    "FortBotCosmeticItemDataTableRow:Weight": "Weight used during the roll of Cosmetic Items",
    "FortBotCosmeticItemSetDataTableRow:Weight": "Weight used during the roll of Cosmetic Set Items",
    "FortLivingWorldEventTableVariation:VariationWeight": "Weight used to bias the random to select which EventTableVariation is used during the game.",
    "EQSActorSpawnerData:SpawnClassesData": "Weighted Array of classes available to spawn\n     When it comes time to pick what to spawn an option will be picked from this list at random (using the weights assigned)",
    "FortMissionWeightedReward": "Weighted mission reward for randomly rolling various different rewards",
    "AlterationWeightData:InitialRollWeight": "Weighting for alteration during initial roll.",
    "MinigameTeam:InitTeamSizeWeight": "Weighting for how many players should be on this team.",
    "FortBotCosmeticLibraryWeightRegionOverrideDataTableRow:RegionWeights": "Weights for the specified region id",
    "InteriorAudioPlayerInfo:StartingWalls": "Weird edge case with walls in the same cell as the player",
    "FortPlayerController:bAutoRunWasHoldingForward": "Were we holding forward last frame when using auto run?",
    "FortMission:bLoadedFromRecord": "Were we loaded from a record",
    "FabricMetaSoundPatchWrapperWetDryOutputBinding:WetOutputSignalBinding": "Wet output signal binding",
    "FabricMetaSoundPatchWrapperWetDryOutputBinding": "Wet/Dry Patch Wrapper",
    "BuildingWeakSpot:Level": "What \"Level\" is this weak spot? This wraps around at MaxLevel",
    "FortGameFeatureInstallBundleURLData:OptionalBundleNames": "What Bundles need to be installed as part of our optional bundle installs",
    "FortGameFeatureInstallBundleURLData:RequiredBundleNames": "What Bundles need to be installed as part of our required bundle installs",
    "RepGraphActorSettingsBase:ClassNodeMapping": "What ClassNodeMapping we should use when adding Class to ClassRepNodePolicies Map In UFortReplicationGraph",
    "FortCustomRepNodeClassMapping:ClassesToRoute": "What Classes should be routed to this custom node? Note that the exact class to route has to be added to this array, child classes will NOT be routed.",
    "FortGameFeatureInstallBundleURLData:OptionalGameFeaturePluginName": "What GameFeaturePlugin corresponds to our optional bundle installs",
    "FortGameFeatureInstallBundleURLData:RequiredGameFeaturePluginName": "What GameFeaturePlugin corresponds to our required bundle installs",
    "FortPickupLocationData:PickupGuid": "What Guid is this pickup?",
    "FortObjectiveEntry:ObjectiveRef": "What Objective we are using",
    "DagwoodManagedState:PC": "What PC is controlling this object",
    "InteriorAudioBuildingRotationConstraint:Quadrant": "What Quadrant the player must be in for this piece to be considered obstructing",
    "XPEventEntry:NewXPValue": "What XP value (out of total XP for NewLevel) did we end at?",
    "XPEventEntry:OldXPValue": "What XP value (out of total XP for OldLevel) did we start at?",
    "FortGyroV2Settings:FlickDeadZone": "What additional DeadZone do we apply to flick stick flicks?",
    "AnimNode_PlayBeatSyncedAnim:InSequence": "What animation are we playing",
    "FortClientAnnouncement:Channel": "What announcement channel this runs on, multiple channels can be running at once",
    "FortAthenaMutator_ItemDropOnDeath:RespawnRequirements": "What are the respawn requirments? Respawn, no respawn, or both?",
    "FortMusicSection:Sound": "What asset to play",
    "EFortSentenceAudioPreference": "What audio should be returned first, if valid? The USoundBase* asset or the audio from the Feedback bank",
    "FortObjectiveEntry:ObjectiveRewardBadge": "What badge to give on success",
    "FortAthenaMutator_DamageZoneOverride:BoneNames": "What bones do we consider to be headshots",
    "FortGameplayCueParticleInfo:FXType": "What broad category is this particle part of ?",
    "FortPortableSoftParticles:FXType": "What broad category is this particle part of ?",
    "BuildingSMActor:AttachedBuildingActors": "What building actors are attached to this piece. This is not directly replicated, and will not be complete on the client",
    "BuildingSMActor:BuildingAttachmentType": "What can this attach to?",
    "WeaponItemDefinitionDesignerData:MeleeWeaponCategory": "What category of melee weapon is this? This is ignored for ranged weapons.",
    "WeaponItemDefinitionDesignerData:RangedWeaponCategory": "What category of ranged weapon is this? This is ignored for melee weapons.",
    "FortAthenaMutator_Uranium:RoundEndCondition": "What causes a round to end (if there is more than 1 round)",
    "FortSafeZoneVolumeDefinition:RejectionChance": "What chance [0.0, 1.0] the spawn location in this volume will be rejected.",
    "FortGameState:MusicManagerBank": "What class should we use to create our Music Manager?  May vary based on zone theme, etc.",
    "FortGameState:MusicManagerSubclass": "What class should we use to create our Music Manager?  May vary based on zone theme, etc.",
    "MissionTimeDisplayData:PulseColor": "What color is the pulse, if we are pulsing?",
    "FortMiniMapData:EnemyColor": "What color is used for enemies?  Only applies if bUseTeamAffiliationColors is true.",
    "FortMiniMapData:FriendColor": "What color is used for friends?  Only applies if bUseTeamAffiliationColors is true.",
    "FortMiniMapData:NeutralColor": "What color is used for neutral actors?  Only applies if bUseTeamAffiliationColors is true.",
    "FortMiniMapData:PulseColor": "What color is used for pulsating?",
    "FortMiniMapData:Color": "What color is used when ignoring team affiliation (i.e. when bUseTeamAffiliationColors is false)?",
    "Playspace_ActorComponentInfo:ComponentClass": "What component should be spawned",
    "Playspace_ControllerComponentInfo:ComponentClass": "What component should be spawned",
    "Playspace_PlayerStateComponentInfo:ComponentClass": "What component should be spawned",
    "FortStatEvent:Conditions": "What conditions are required to trigger this stat event",
    "FortStatEventSequence:Conditions": "What conditions are required to trigger this stat event",
    "MilkshakeEarthquakeActor:AsyncOverlappedActorsPreallocateCount": "What count to preallocate the AsyncOverlappedActors array to.\n(AsyncOverlappedActors has been seen to go up to 500 when the earthquake is over a POI)",
    "ReplicatedStreamingProperties:CurrentStreamingDevice": "What device is currently the highest priority device for streaming",
    "XPDisplayData:DisplayText": "What do we display in the HUD",
    "BuildingContainer:LootedWeaponsDurabilityModifier": "What durability percentage should the spawned weapon be at",
    "FortPawn:SpottedEvent": "What event should we play when this pawn is 'spotted', i.e. targeted by a fort weapon reticle?",
    "FortAIPawn:InCombatNearPlayerEvent": "What event should we use when this AI is in follow range of a player?",
    "FortAIPawn:FollowPlayerEvent": "What event should we use when this AI starts following a player?",
    "EventChannelState:ActiveEvents": "What event types are active during this state and how long do they last",
    "AthenaCarPlayerSlot:ExitSocketIndex": "What exit socket did we use",
    "ClientAILODMovementCompOptimizationConfiguration:FrameSkippingOnLowestLODWithSmallViewAngleRendered": "What frame skipping we'll have on lowest LOD when the local player is zoomed and the pawn is in view and rendered.",
    "ClientAILODMovementCompOptimizationConfiguration:FrameSkippingOnLowestLODWithSmallViewAngleNotRendered": "What frame skipping we'll have on lowest LOD when the local player is zoomed and the pawn is in view but not rendered.",
    "FortGameState:GameplayState": "What general state the entire game is in, only one at a time",
    "FortClientEvent:EventSource": "What generated this event? Usually a widget or blueprint",
    "RadiusTrackingInitializer:GroupingType": "What group of players should share this Tracking Info. A group that shares tracking info will see the same exact tracking info on their maps. If 2 groups do NOT share tracking info their tracking data will generate different randomized values..",
    "XPDisplayData:IconMaterial": "What icon to show in the HUD",
    "CreativeFunctionalTest:ActiveRecordSpawner": "What is spawning actors from the generated LevelSaveRecord (LSR). The actors will be based on what is in the DeviceMap",
    "FortMissionManager:MissionClosestToPar": "What is the Missiont that is closest to par?",
    "EFortAnnouncementDelivery": "What is the delivery status of this Announcement",
    "FortMissionEvent:EventFocus": "What is the focus of this event?",
    "FortZoneEvent:EventFocus": "What is the focus of this event?",
    "DynamicXpSessionAccoladeStats:Grouping": "What is the grouping of this accolade.  This is a string after the first ':' in AccoladeId.",
    "MMRSpawningBracketBaseDataTableRow:MMRBracketHigh": "What is the high MMR for this bracket",
    "MMRSpawningBracketBaseDataTableRow:MMRBracketLow": "What is the low MMR for this bracket",
    "SphericalDriveParams:MassDirectionMaxAngleDeg": "What is the maximum angle that the internal mass can tilt in order to steer\n              the vehicle?",
    "FMDeviceCable:CableCenterSectionsMaxCount": "What is the maximum cable center section count possible?",
    "SparksPlayspaceEvent_KeyChanged:Key": "What is the new key",
    "SparksPlayspaceEvent_KeyModeChanged:KeyMode": "What is the new key mode",
    "SparksPlayspaceEvent_TempoChanged:Tempo": "What is the new tempo",
    "XPDisplayData:TitleText": "What is the title of this accolade/XP event?",
    "FortLOSComponent:FOVInDegrees": "What is the total FOV this thing needs to be in? Must be from 10-180",
    "CollisionReactionConfiguration:TypeOfBuildingActor": "What kind of Building Actor we want to handle.",
    "ETypeOfBuildingActor": "What kind of Building Actor we want to handle.",
    "FortRewardActivity:ActivityType": "What kind of activity was being performed",
    "BuildingSMActor:BuildingAttachmentSlot": "What kind of attachments does this SMActor accept?",
    "FabricMetaSoundRuntimeInputInfo:InputType": "What kind of input this represents",
    "FortGliderLayeredAudioFloatParam:InterpType": "What kind of interpolation to use",
    "FortLayeredAudioFloatParam:InterpType": "What kind of interpolation to use",
    "FortAthenaArithmeticStateTreeTask:Operation": "What kind of operation we want to do.",
    "CollisionReactionConfiguration:PhysicsObjectReaction": "What kind of reaction we want to have with actors that have a \"UFortPhysicsObjectComponent\" on them (note that this will have priority over building actors handling, if a building actor has this component).",
    "CollisionReactionConfiguration:BuildingActorReaction": "What kind of reaction we want to have with building actors.",
    "CollisionReactionConfiguration:PawnReaction": "What kind of reaction we want to have with pawns.",
    "CollisionReactionConfiguration:VehicleReaction": "What kind of reaction we want to have with vehicles.",
    "AIScalableFloat:ScalingType": "What kind of scaling we want.",
    "FortTheaterRuntimeData:TheaterType": "What kind of theater this is, used by the UI",
    "FortGlobalMission:AllowedZoneTypes": "What kind of zones this mission is allowed to run in",
    "PhaseInfo:Levels": "What levels do we want to load",
    "TeamPerformanceMessageData:TeamAffiliationMessagesMap": "What message to show the client based their affiliation with the team the message pertains to. So we can show positive or negative messages based on if an ally or enemy achieved a goal.",
    "FortPlayerController:AimHelpMode": "What mode of aim help is enabled. 0 means no aim help",
    "MotorcycleWheel:WheelTraceMode": "What mode to use for performing the trace for the wheel contacts",
    "FortClientEvent:EventFocus": "What object is this event about? Optional and event specific",
    "FortErrorInfo:Operation": "What operation was trying to complete that generated this error",
    "AthenaBuildingFoundationObjective:LowHealthPercent": "What percent of low health do we need to be before we are considered destroyed",
    "SBMusicalTargetsTimerComponent:ProgressOverrun": "What percentage over 1.0 (arrival beat) we allow the cue to continue to progress be advanced before clearing the cue.",
    "FortAthenaMutator_Barrier:SafeZonePhaseToTurnOffRespawning": "What phase do we turn off respawning? Checked on StormShrinking",
    "AthenaDeveloperSettings:AthenaStartupPhase": "What phase of the game should BattleRoyale PIE start in?",
    "MontageBeatSyncComponent:OwnerPlayerPawn": "What player pawn owns this component - if there is one",
    "NeighboringFloorInfo:FloorPosition": "What position is the floor in?",
    "NeighboringWallInfo:WallPosition": "What position is this wall in?",
    "CatalogPurchaseInfo:ExpectedTotalPrice": "What price does the client think this item is (so we can fail if the price has changed)",
    "CatalogPurchaseInfoGift:ExpectedTotalPrice": "What price does the client think this item is (so we can fail if the price has changed)",
    "FortItemViewSettings:RotationMode": "What rotation mode should be used. NOTE: There is a \"None\" rotation mode to disable rotation.",
    "TankWeaponAimingData:SeatIndex": "What seat index is this for?",
    "FortWeapon:WrapSectionMask": "What sections of the mesh should the wrap (or STW cosmetic alteration) be applied to?  (defaults to only the first section)",
    "FortGamepadBasicOptions:LookSensitivityPresetAds": "What sensitivity preset to use (when aiming down sights).\nRange is [0, 10].  0 = Same as non-ADS, 1 = Slowest, 10 = Fastest.",
    "FortGamepadBasicOptions:LookSensitivityPreset": "What sensitivity preset to use.\nRange is [1, 10].  1 = Slowest, 10 = Fastest.",
    "AthenaSeasonPageGrid:CustomGridName": "What should the grid be called when displayed. Leaving it empty will give it a default name of \"PAGE X\" where X is the order of the grid.",
    "EFortTextureDataSlot": "What slot to use the specified texture data in",
    "EConsumerRole": "What sort of consumer is this content meant for. This is more of a security clearance than platform.",
    "CardPackOffer:SaleType": "What sort of sale is going on for this item",
    "FortGameMode:PendingTimerState": "What state to continue to after the countdown timer is complete",
    "FortItemEntryStateValue:StateType": "What state type are we?",
    "FortStatEvent:StatsToMonitor": "What stats are relevant to firing this event",
    "FortStatEventSequence:StatsToMonitor": "What stats are relevant to firing this event",
    "TargetDataEntry:StormCircleIndices": "What storm phases need to be updated so their location correctly centers on the targeted POI?",
    "FortGameModeZone:AssociatedSubGame": "What sub-game this GameMode is associated with for validation reasons",
    "BuildingTrap:AttachmentHintText": "What text to show during placement mode as a hit",
    "CardPackOffer:SaleText": "What text to use for displaying the sale (depends on SaleType).",
    "DynamicXpPlayerSessionTransient:PrevAfkTime": "What the AFK timer was last time to see if we go past thresholds",
    "BuildingWeakSpot:MaxLevel": "What the Max Level is",
    "BuildingTrapFloor_Turret:CurrentAmmoCount": "What the current ammo count is for the turret",
    "FortPartyRepData:PartyState": "What the party is doing at the moment",
    "BuildingSMActor:ResourceType": "What this is primarily made of, may be modified by texture swaps",
    "ActorInstanceRecord:TemplateRecordID": "What this object is based on.",
    "FortLootTierData:LootTier": "What tier the loot is. May be used to affect the look of the container.",
    "LootTierDataRow:LootTier": "What tier the loot is. May be used to affect the look of the container.",
    "MinigameSpawnerSpawnParams": "What to spawn and where\n  Cannot use fast serialize because it doesn't guarantee order and this needs order to be correct",
    "CameraPair:Type": "What type is this camera being registered for",
    "EMashAISpecialEncounterType": "What type of AI Special Encounter to spawn. Different encounters have different rules about how the encounter is displayed and if the encounter affects the safezone phase.",
    "FortMissionManagerRecord:MissionManagerClass": "What type of Mission Manager do we want to spawn?",
    "XPDisplayData:XPType": "What type of XP is this",
    "FortNearbyActorsPerceptionConfiguration:RequiredTypes": "What type of actors we want to register for",
    "LivingWorldCalendarEventCondition:Behavior": "What type of check the condition should apply to the calendar event",
    "CreativeClassOption:ClassType": "What type of class are we?",
    "MashAISpecialEncounterData:EncounterType": "What type of encounter will be spawned.\n     This can affect the rules for the phase (if it will end based on a timer or if the spawned AI must be killed or if the safezone shrinks to a specific size.)",
    "FortClientEvent:CategoryName": "What type of event was this?",
    "FortClientEvent:EventName": "What type of event was this?",
    "FortMissionEvent:EventType": "What type of event was this?",
    "FortZoneEvent:EventType": "What type of event was this?",
    "BuildingFoundation:FoundationType": "What type of foundation this is, to match with appropriate BuildingGroup",
    "EFortGameType": "What type of game is this? WARNING: Changes to this enum must be reflected in the LexToString overload below!!",
    "FortWorldMarkerData:MarkerType": "What type of marker is this?  Location, Enemy, Item...etc.",
    "FortMission:MissionCategory": "What type of mission is this (Primary, secondary etc)",
    "EFortScriptedActionSource": "What type of object enabled this action to exist",
    "FortMinigame:MinigamePlayerPawnType": "What type of player pawn should be used in the mini game.",
    "FortSnapOnSurfaceComponent:Behavior": "What type of snap the component should use.",
    "CreativeTeamOption:TeamType": "What type of team are we?",
    "FortAbilityCost:CostSource": "What type of thing to spend as a cost",
    "EFortZoneType": "What type of zone this is, used by the UI and game flow",
    "FortAthenaMutator_Mash:SafeDetonationScoreEventTypes": "What types of scoring events can reward players with the Safe Detonation Kill bonus.\n     NOTE: ONLY non-boss AI scoring events are valid, other scoring events will not get processed.",
    "MissionPerDifficultyProperties:OverrideGlobalWindInfo": "What values for global wind are valid (or invalid) for this mission?  Ultimately the choice will be made from the valid possibilities at random for this mission.  If none are specified, it will fall back to the zone theme settings.",
    "ZoneThemeDifficultyProperties:GlobalWindInfo": "What values for global wind are valid (or invalid) for this zone?  Ultimately the choice will be made from the valid possibilities at random in this zone.",
    "WorldAmbientPropertiesMatchingGameContext:GlobalWindInfo": "What values for global wind are valid (or invalid)?  Ultimately the choice will be made from the valid possibilities at random.  If none are specified, it will fall back to the mission settings and then the zone theme settings (and then defaults).",
    "MontageBeatSyncComponent:LastKnownMontageInstanceId": "What was the last known playing montage",
    "DynamicXpPlayerSessionTransient:LastPotentialXp": "What was the potential XP last time calculated.",
    "EFrontEndCamera.Login": "What we look at during the login screen",
    "FortAIPawn:CurrentAimTarget": "What we're currently aiming at.",
    "FortPlayerDeathReport:KillerWeapon": "What weapon the killer used",
    "FortWorldManager:CurrentZoneIndex": "What zone does this world correspond to?",
    "CreativeFunctionalTest:LevelStreamComponent": "What's handling the streaming in of levels.",
    "FortGyroV2Settings:FlickWindingSpeed": "What's the flick stick winding speed factor?",
    "PartyMemberScratchEntry:T": "Whatever the type of this is entry, can be cosmetic specific.",
    "FortAthenaCreativePortal:PortalIndex": "When 0 or greater, used to line up with FortPlayerStartCreative that face this portal",
    "FortAthenaPartyRiftPortal:PortalIndex": "When 0 or greater, used to line up with players that face this portal",
    "FortNavModifierComponent:ExtrapolationMultiplierForFailsafeExtent": "When > 0 and bForceFailSafeExtent is true, it will use the provided \"ComponentAffectingNavMesh\"'s velocity to extrapolate the future position of the component and apply an offset to the navmesh patching based on this multiplier.",
    "FortPlayerPawn:SetByCallerReviveHealth": "When > 0 will set the \"ReviveHeal\" SetByCaller data property.\n      It will use the current health to calculate the heal amount needed to reach this health value.",
    "FortAIPawn:AthenaRVOWeightOverride": "When >= 0 used to set the RVO Weight. Will take priority over DeimosRVOWeight. Only applied with AthenaAIController",
    "FortAthenaMutator_ReroutePlayerEvent": "When AbilitySystemComponent gameplay events are received, and specified filter tags are matched,\ntriggers additional specified events on the ASC",
    "CinematicSequenceDeviceBase:EnabledOnPhase": "When Auto Play is enabled, this sequence is played on this phase",
    "VehicleModBuildingGameplayActorAttachmentData:bBuildingGameplayActorDestroyedDisablesMod": "When BGA runs out of health, it will disable the mod until repaired.",
    "FortPhysicsConstantForceComponent:bActivateFortPhysicsObjectOnBeginConstantForce": "When BeginConstantForce is called, attempt to activate the thing we're attached to. Otherwise, do nothing until it is activated by someone else",
    "FortCustomTickComponent:WasRecentlyRenderedTolerance": "When Condition == WasRecentlyRendered, if our owner was rendered within this much time ago, we use MinFramesToSkipBetweenCustomTicks.\nOtherwise, use MaxFramesToSkipBetweenCustomTicks.",
    "BuildingGameplayActorChaser:ChaseDistanceFromTargetToAttach": "When I get this close to my target, attach to the target",
    "FortSafeZoneIndicator:TimeRemainingWhenPhasePaused": "When OnSafeZoneTimerPauseChanged(true) is called, we set this variable to track\nthe time remaining to reach SafeZoneFinishShrinkTime.\nWhile paused, we use this variable to return properly adjusted values\nfrom GetStart/FinishShrinkTimes() on server and client.\nWhen OnSafeZoneTimerPauseChanged(false) is called, we use this stored variable\nto adjust the Start/FinishShrinkTimes once.\nWhile NOT paused, this will be -1, and not used.",
    "FortAthenaMutator_SafeZoneOrderOptimize:ChosenRouteOrder": "When PauseAndChooseRouteOrder() is called, we pick a random route order out of ShortestRouteOrders.\nReplicated for debug purposes only.",
    "FortSafeZoneIndicator:bSafezoneEventDriven": "When TRUE, the WaitTime timer will not switch the the next phase, we need to call AFortGameModeAthena::StartNewSafeZonePhase to advance to the next phase",
    "FortNavModifierComponent:bForceFailSafeExtent": "When True and bAutomaticNavBoundComputation is false, it will use the Failsafe Extent instead of calculating the bounding boxes of the provided \"ComponentAffectingNavMesh\".",
    "FortStaticMeshActor:bUseAutoNavmeshFlags": "When True and the mesh has valid collision, the mesh will affect Navigation (since 'Can Ever Affect Navigation' on the mesh component will be internally set to True).",
    "FortNavModifierComponent:bAutomaticNavBoundComputation": "When True, it will recalculate using all registered PrimitiveComponent with collision enabled to compute navigation bounds to affect navmesh.",
    "CreativeAudioMixerDevice:FaderValue": "When a Mix isn't set, this is the value that the Bus above will be set to.",
    "CreativeAudioMixerDevice:Bus": "When a Mix isn't set, we can assign a Bus here that will be used instead.",
    "AttachedInfo:StickyOffsetFromPhysicsMesh": "When a physics asset is valid, uses this offset from the surface of the physics asset.",
    "ReplicatedAttachParams:StickyOffsetFromPhysicsMesh": "When a physics asset is valid, uses this offset from the surface of the physics asset.",
    "FortAthenaMutator_Wax:TokenPickupClass": "When a player doesn't have a downer, we spawn this pickup to hold the tokens.",
    "EFortQuestObjectiveStatEvent.Finish": "When a player finishes a DBNO player, but was not the killer",
    "FortAthenaMutator_Wax:TokenThresholdAboveWhichToWarn": "When a player first reaches at/above this token level, warn players.",
    "FortAthenaMutator_PlayerIndicators:BlockSinglePlayerIndicatorTag": "When a player has this tag applied to its ASC, its indicator will not be seen by the local player",
    "FortPlayerPawn:bResetGliderOverrideOnLanding": "When a player lands if this flag is true and they have an override it will reset it",
    "FortPlayerControllerComponent_RespawnOnDeath:RespawnDelay": "When a player uses this component to respawn how long in seconds after death before the player respawns.\n     0 for instantaneous.\n     < 0 for do not override the drone manager's respawn time.",
    "FortControllerComponent_RealitySapling:bUpdateSaplingPersistentLocationEachMatch": "When a sapling is spawned at match start from persistent data, the spawn EQS may adjust the sapling's spawn location from the stored persistent location if the\nstored location is not valid (eg, too many other saplings nearby, inside a building, etc).\nIf true, the sapling's stored persistent location will be updated each match with the actual sapling's location from that match.\n(If the persistent location is invalid, the new valid location will be stored. The EQS wills still test location validity each match in case the new location becomes invalid.)\nIf false, the sapling's stored persistent location will remain the original planted location. (If the persistent location is invalid, the EQS will find a valid location each match.)",
    "FactionData:MaxDistanceCondition": "When a specific relation is applied to an entire faction, this is the max distance a member can be and get the relation.",
    "FortFactionInfo:MaxDistanceCondition": "When a specific relation is applied to an entire faction, this is the max distance a member can be and get the relation. -1.f deactivates condition",
    "SpecialEventStatComponent:OnValueChangedDelegate": "When a stat Value changes, we broadcast this delegate on server and client",
    "PlayspaceComponent_PlayerSpawning:bQueueUserForSpawnWhenAdded": "When a user is added to a playspace w/ this component, should we queue them immediately for spawn?\n          Useful when this is on the lowest root playspace that governs a whole level, or the one expecting to\n              receive logged in players.",
    "EPageItemTileSize": "When add a new tile sizes be sure to add an entry in the TILE_SIZES macro in the AthenaSeasonItemPageUtils.cpp",
    "EActivityBrowserTileStyle.Default": "When adding something here, make sure its string is defined in ActivityBrowserTileStyleUtility::ConvertFromFName",
    "FortPrioritizedWidgetData:WhenContesting": "When an EQUAL priority widget is active and this widget is either added or becomes active, the behavior to use.",
    "AutoAimWeaponPawnComponent:UseSingleLocationTargetingPawnTags": "When an auto aim weapon targets a pawn with any of these gameplay tags it will ONLY target the actor's location not any of the bones specified in MultiSocketTargetingBoneSegmentDatas.",
    "AutoAimWeaponPawnComponent:LowPriorityTargetPawnTags": "When an auto aim weapon targets a pawn with any of these gameplay tags, that pawn will be marked as low priority and will only be considered for targeting if no higher priority targets are found.",
    "BattleLabDeviceGameplayActor_VendingMachine:DroppedIntoFunnelPickup": "When an item is dropped by a player in the funnel area, this ptr is updated and replicated to clients",
    "MontageBeatSyncComponent:DefaultToAnimationBPM": "When attempting to beat sync an animation that does not have BeatSyncData (no anim data or DataTable)\nWe use this as the assumed BPM fro the animation - and then we can calculate the length of the animation\nin beats.  If this is set to zero - use the cvar MontageBeatSyncComponentComponent.DefaultAnimBPM",
    "FortAthenaLivingWorldEncounterStage:MaximumConcurrentNumberOfAI_LowValue": "When bAllowRandomMaximumActorCount is true, each time the stage is started it will use a random maximum actor count from the [MaximumConcurrentNumberOfAI_LowValue, MaximumConcurrentNumberOfAI] range.",
    "FortProjectileCues:MaxSurfaceNormalDeviationAngle": "When bOrientHitGCsToProjectileVelocity is true, this is the max deviation in degrees from the surface normal that\nthe GC orientation can be.\nThis is necessary so that we can prevent decals/other effects on the GC from being stretched out/distorted too heavily\nwhen at extreme angles to surface normal.",
    "FortGameModePvE:RestrictedMaxIdleTime": "When bRestrictMaxIdleTime is true, the ceiling for MaxIdleTime values and the maximum time a player is allowed to be idle even where it's permitted.",
    "SpecialEventCursorMode:AdditiveRotationInterpSpeed": "When calculating additive rotation, we pass this data to FMath::RInterpTo() for smoothing",
    "LiquidRibbonManager:MaxPointSizePercentForFlashIntensity": "When calculating flash intensity of a point, max flash intensity corresponds to this point size (as a % between min-max point size)",
    "LiquidRibbonManager:MinPointSizePercentForFlashIntensity": "When calculating flash intensity of a point, min flash intensity corresponds to this point size (as a % between min-max point size)",
    "LiquidRibbonManager:NumPointsAtMaxPointSize": "When calculating the size of a point, this value represents how many \"close together\" points mean max size",
    "LiquidRibbonManager:NumPointsAtMinPointSize": "When calculating the size of a point, this value represents how many \"close together\" points mean min size",
    "LiquidRibbonManager:SplineLengthForSizeCalculation": "When calculating the size of a point, use this spline length when determining how many points are \"close together\"",
    "FortAimedObjectConfig:HidePawnBlendInWeight": "When camera weight exceeds this value while blending in, player will be turned invisible",
    "FortAimedObjectConfig:HidePawnBlendOutWeight": "When camera weight is lower than this value while blending out, player will be turned back to visible",
    "FortProjectileAthena:bProcessLocalHits": "When collisions are processed locally.  True for bots on the server.  True for players on the client.",
    "EStatTeamAggregateFunction": "When compiling this stat for a team, how should the per-player stat value be aggregated.",
    "FortItemEntry:ItemVariantDataMappingIndex": "When creating a pickup, this is the index into the item variant data mappings. That item variant data is then used for the random roll.",
    "FortItemEntry:PickupVariantIndex": "When creating a pickup, this is the item variant index from the variant roll.",
    "FortSplineGroundPath:TangentDistance": "When creating spline mesh, this is the distance of each tangent from its corresponding evenly spaced points.",
    "FortFollowCam_Settings:TurnFullRate": "When dampening has warn off and stick is fully horizontal, turn this many degrees per second.",
    "FortProjectileMovementComponent_FloorSnapped:MaxClimbableSlope": "When detecting sudden changes in slope we use this angle as the min angle at which we consider this slope change \"too sudden\"",
    "UnicornDancePartyInfo:PeakEndTimestamp": "When did the dance party drop off from its peak to a lesser number",
    "UnicornDancePartyInfo:PeakStartTimestamp": "When did the dance party hit it's peak",
    "FortTrackMovementComponent:TrackSnapExtent": "When discovering a spline to snap to (when first place or when the track is changed from under you) this is the size of the overlap to search for the new spline",
    "EFortAnnouncementDisplayPreference": "When display channel does the announcement prefer to use?",
    "EventChannelState:ValidFrom": "When does this state become active on the channel",
    "TankWeaponAimingData:AimPitchRotationEasingCurve": "When easing, this curve controls the speed (value) to rotate at the current pitch (time).",
    "TankWeaponAimingData:AimYawRotationEasingCurve": "When easing, this curve controls the speed (value) to rotate at the current yaw (time).",
    "GasDebuggerMenu:EditedAttributeIndex": "When editing an attribute, this is the index of it",
    "GasDebuggerMenu:EditedAttributeValue": "When editing an attribute, this is the value of it",
    "FortPlayerControllerSpectating:ClampDroneToCameraBoundsVolume": "When enabled and a CameraBoundsVolume is set, the drone location will be clamped within that volume",
    "FortGameModeZone:bEnableLongRangeAutoPickup": "When enabled long range auto pickup allows the player to auto pickup auto-pickable items at a larger radius than normal.",
    "FortAthenaMutator_Mash:bCheatMakeFirstPhaseTheFinalPhase": "When enabled the first phase becomes the final phase. This makes it quicker and easier to test the final phase.\nOnly functions if MUTATOR_CHEAT_MANAGER_SUPPORT && WITH_CHEAT_MANAGER",
    "FabricSteppedPreviewFXComponent:bManuallySpaceMeshInstances": "When enabled, FX mesh instances will be positioned based on the instance transform distance properties instead of aligning automatically",
    "PickupManagementSettings:bFlagPlayerDropsAsImportant": "When enabled, any items dropped by the player will be considered \"Important\".",
    "BuildingActor:bStructurallySupportOverlappingActors": "When enabled, forces this actor to directly structurally support buildings that are placed overlapping it.  Does not use the building grid.",
    "UserOptionDefinitionFloatMetaData:bRestrictSliderValues": "When enabled, in-game options usage will be restricted to the values explicitly called out in ValueEntries.",
    "UserOptionDefinitionIntMetaData:bRestrictSliderValues": "When enabled, in-game options usage will be restricted to the values explicitly called out in ValueEntries.",
    "UserOptionDefinitionFloatMetaData:bUseNumericInput": "When enabled, in-game options will be allowed to use the numeric input editor.",
    "UserOptionDefinitionIntMetaData:bUseNumericInput": "When enabled, in-game options will be allowed to use the numeric input editor.",
    "FabricSteppedPreviewFXComponent:bAlignToTransformCenter": "When enabled, instances will be evenly distributed across the space defined by CenterAlignmentBounds",
    "FortAthenaMutator_Uranium:bPerkSelectBeforePOICamera": "When enabled, the Perk Select screen will show before the POI camera, otherwise it will display the POI camera before Perk Select",
    "CreativeAudioMixerDevice:bActivateInEditMode": "When enabled, the mix will automatically activate in Edit Mode.",
    "CreativeAudioMixerDevice:bActivateOnGameStart": "When enabled, the mix will automatically activate when the game starts.",
    "DaySequenceModifierComponent:bIgnoreBias": "When enabled, these overrides will always override all settings regardless of their bias",
    "CinematicSequenceDeviceBase:bLoopPlayback": "When enabled, this cinematic device will loop continuously until stopped",
    "CinematicSequenceDeviceBase:bAutoPlay": "When enabled, this device will automatically begin playing based on the the desired minigame state",
    "FortAthenaSKPushCannon:bShouldConstrainDriverCameraToBarrelOnlyWhenTargeting": "When false we will lock the player camera to the barrel otherwise only lock the camera to the barrel when ADS'ing",
    "FortAIController:bIgnoreAllActorsThatAreNotPawnsOrBuildings": "When false, ShouldIgnoreActor() function always returns false. Otherwise, only returns false for pawns and building actors. Used for Goal Selection.",
    "FortAIPawn:bCanBeLaunched": "When false, this will prevent LaunchCharacter from doing anything",
    "MegaStormManager:bFloorRadiusToGridConversion": "When false, we allow destruction on the edge vs outside the edge.  Basically, this",
    "FortAIPawn:bUpdateWeaponCollisionShapeOnKnockback": "When false, we will not be updating the weapon collision shape when knocked back",
    "FortAthenaAIBotController:bMultiplyEffectivenessOfWeaponWithSurfaceDamageToFindBestWeapon": "When finding the best weapon, multiply effectiveness of the weapon with their damage to the actor's surface (only support when targeting BuildingActors)",
    "SphericalDriveParams:ShellAngularDrag": "When flying through the air, how quickly will the ball stop spinning? Units are percent angular velocity per second.",
    "BuildingActor:HealthBarIndicatorDifficultyRating": "When greater than 0 will display as the power level next to the health bar indicator",
    "FortProjectileBase:MaxLifespanOnStop": "When greater than zero lifespan will be clamped to this when the projectile stops.",
    "BuildingActor:bForceDamagePing": "When hit, does this thing always show a damage radar ping",
    "FortMovementComp_Character:FallingSlopeSafeSlideAngleScalable": "When hitting a slope this angle or shallower, it's safe to slide on. Apply falling damage (if any) and reset falling height to player location at time of impact.\nSteeper slopes than this angle do not cause damage until the player hits a harder impact or lands (so will do more damage at the bottom).\nIf you want generous sliding, set the angle to be high. Sliding commences and continues to reset the height until landing.\nFalls from a high altitude will still damage you on impact of the slope if it is shallower.\n(Note: 0 = horizontal, 90 = vertical. 0 disables this behavior. 90 allows sliding down any slope for no damage. Characters can normally walk up slopes < 45 degrees).",
    "VehicleWeaponReticle3DConfig:OffsetCloserDistance": "When hitting geometry, world space reticle widget can clip into geometry. This distance moves the reticle closer along the aim direction.\nExpected to be some small number to make world space widgets feel nice.",
    "ObjectInteractionBehavior:HoverReticleColor": "When hovering over something that uses this interaction, changes the reticle to match this color.",
    "LevelInstanceGameplayVolume:bEditMode": "When in edit mode this volume will update the level save record when tracked actors change",
    "FortGameModePickup_Wax:TimeUntilDespawn_InsideStorm": "When in the storm, how long this pickup lasts from spawning.",
    "FabricStepSequencerComponent:LocalInteractionStartStepIndex": "When interaction started against the sequencer, what step did it start on?",
    "FabricStepSequencerComponent:LocalInteractionStartTrackIndex": "When interaction started against the sequencer, what track did it start on?",
    "FortCharacterMovementMutatorComponent:BuffetFlyingRicochetControlRotationInterpSpeed": "When interpolating ControlRotation toward Velocity direction during ricochet, this is passed to FMath::RInterpTo()",
    "FortCharacterMovementMutatorComponent:BuffetFlyingVelocityDirectionInterpSpeed": "When interpolating Velocity direction toward ControlRotation, this is passed to FMath::VInterpTo()",
    "InteriorAudioScanResults": "When introducing new InteriorAudioComponent's that use PreUpdate to share data to other PostUpdate components\n*      Make a new ScanResults_XXX struct and add here",
    "FortGameplayEffectDeliveryActor:bSetHiddenOnKill": "When killed, should we automatically set this actor to hidden?",
    "FortAthenaMutator_TDM:GoalScoreMinToWin": "When lowering the score, minumum amount of kills remaining that will be required to end the game.\n     In other words, how close can a new goal score be to the highest current team score.",
    "SynchronizedTeleportPlayerComponent:FadeOutData": "When modified on the server will trigger a screen fade out on the client.",
    "FlightParams:LandingSpeedKmh": "When moving at this speed horizontally relative to the ground,\n              the lift force of the vehicle will cancel gravity completely\n              when engine is off.",
    "FlightParams:LiftoffSpeedKmh": "When moving at this speed horizontally relative to the ground,\n              the lift force of the vehicle will cancel gravity completely\n              when engine is on.",
    "SphericalDriveParams:DragCoefficientAutoBrake": "When moving below MaxAutoBrakeSpeedKmh on ground and providing no accelerating input,\n              drag coefficient is increased for an automatic braking effect.",
    "ContextualMessageCandidate:Priority": "When multiple candidates are found to be valid, the subset of valid candidate(s) with the highest priority will be chosen from randomly.\nCandidate priority can be mutually exclusive (i.e. a simple priority ordered list), or can be shared to implement mutually exclusive\npriority buckets. For example bucketing between 'Default Priority: 0' 'Contextual Response Priority: 1'  'Gameplay Critical Priority: 2'",
    "ContextualMessageCandidate:Weight": "When multiple candidates with the same priority are valid, this weighting can be used to bias selection between them",
    "CustomCharacterPartsByKillOverrideData:Weight": "When multiple sets of customization data have the same kill threshold the weight is used to randomly pick which customization to apply.\n     Weights are relative to all other weights with the same KillThreshold.\n     Set to 0 or less to invalidate (i.e. the overrides will NOT be used.)",
    "AthenaSpecialActorComponent:RenderTags": "When not empty, special actor UI will only render if local player's ability system component contain any of these tags.",
    "SpecialActorRepData:RenderTags": "When not empty, special actor UI will only render if local player's ability system component contain any of these tags.",
    "FortGameModePickup_Wax:TimeUntilDespawn_OutsideStorm": "When not in the storm, how long this pickup lasts from spawning.",
    "FortTrackMovementComponent:DiscoverSplineFrequency": "When not on a track, this is the frequency to look for a new spline in case one shows up",
    "FortMediaEventsStreamAssets:bAutoActivate": "When on, the receiving media controller is expected to activate and play this asset when received.",
    "GasDebuggerMenu:PausedClientGasDebugSnapshot": "When paused, this is the client GAS debug snapshot as pause",
    "GasDebuggerMenu:PausedServerGasDebugSnapshot": "When paused, this is the server GAS debug snapshot as pause",
    "FortPlayerPawn:ShallowWaterVolumeSurfaceTraceEndOffsetZ": "When performing the trace to detect the surface of a shallow water volume, this is added to the pawn capsule location Z, for the trace end location",
    "FortPlayerPawn:ShallowWaterVolumeSurfaceTraceStartOffsetZ": "When performing the trace to detect the surface of a shallow water volume, this is added to the pawn capsule location Z, for the trace start location",
    "FortAthenaMutator_InventoryOverride:bNoRepeat": "When picking a random loadout, don't pick one that has been used before, until we have gone through all of them",
    "DynamicXpPlayerSessionTransient:bHitXpThreshold": "When player has gained too much XP in the day, this is set",
    "DynamicXpPlayerSessionTransient:bHitExcessXpCutoff": "When player has pass the XP Cutoff in one day.",
    "FortAutoMarkableActorComponent:bUseHoveredMarkerDetail": "When player markers are added should we include HoverMarkerDetails.",
    "EJoyConMotionSelection": "When playing with Joy-Cons on Switch, which Joy-Con should be used for motion?",
    "QuestInstanceInitializationData": "When qs2 quest managers grant and initialize a new quest instance, all properties from this data bundle (taken post-initialization)\nwill be replicated from the server quest instance and injected back into the client quest instance as part of its creation and initialization\nThis allows us to guarantee certain data will be present on a client quest instance before any post-creation logic executes\nIt also provides a route for non-deterministic 'server authoritative' state to be routed to a client. (e.g. 'Randomly chosen' objectives also conditional on server world state)",
    "EncounterEnvironmentQueryInstance:FoundRifts": "When querying to find existing rifts they fill this array instead of QueryLocations",
    "BuildingSMActor:OnRepairBuildingStarted": "When repairing a building begins this will fire.",
    "BuildingSMActor:OnRepairBuildingFinished": "When repairing a building finishes this will fire.",
    "RepeatableMusicalAssetPlayerComponentBase:mRepeatingTick": "When repeating on a specific tick, which tick to repeat on",
    "RepeatableMusicalAssetPlayerComponentBase:mPlayOnStartPosition": "When repeating, whether to play on start position",
    "FortAthenaMutator_Pow:GrantMaxHealthAtRespawnsOff": "When respawning turns off, should players be granted max health?",
    "FortAthenaMutator_Pow:GrantMaxShieldAtRespawnsOff": "When respawning turns off, should players be granted max shield?",
    "FortRespawnLogicData:SingleBusRespawnNearDeathLocation": "When respawning with a single bus, whether to respawn near where the player last died. (false is away)",
    "FortPlayerPawn:DBNOInteractionBoxExtent": "When reviving players, this is the box extent of the interaction component",
    "FortPlayerPawn:EmoteInteractionBoxExtent": "When reviving players, this is the box extent of the interaction component",
    "FortPlayerPawn:DBNOInteractionCollisionProfile": "When reviving players, this is the collision profile used for the box collision",
    "FortGravityGunHolder:bUseCameraRightAsReference": "When rotating the held object, this helps us understand which axis to use on the camera, right or up.",
    "WrapPreviewGridActor:bFilterOutRarityDupesForRangedWeapons": "When scanning files, only include one weapon across all rarities of the same weapon.",
    "FortniteEditorSettings:bKeepCurrentBuildingActorTexturesOnEditorReplace": "When selecting a building actor and replacing it with another, decide whether to keep the existing textures with the new building actor",
    "BuildingActorEditorSettings:bForceBuildingActorsTo90DegreeRotation": "When selecting a building actor, automatically set the rotation grid size to 90 degrees. This reverts back to the original value when deselecting.",
    "FortMission_RiftSpawners:RequiredRiftTagsQuery": "When set this tag query must pass on tags on a rift for the rift to be used by the mission for spawning",
    "FortProjectileBase:InitialGravityScaleOverride": "When set to a valid curve table row handle, this will be set as the initial gravity multiplier",
    "FortProjectileMoveComp_Slider:bSuspensionEnabled_Down": "When set to true allows downward tension to be added on deflection and eased every tick. Downward tension is built up when the projectile gains downward velocity after a deflection, downward tension will add upward velocity to the projectile over time; might be useful to minimize jumping curbs in uncommon gravity situations.\n     Turning this on can cause the projectile to build up suspension while sliding on the ground and cause it to jump, especially if a lot of gravity gets dumped into the velocity during a fire rate spike.\n     If disabled tension will not update nor build in the downward direction. Tension will ease every frame as long as bSuspensionEnabled_Up or bSuspensionEnabled_Down is enabled.",
    "FortProjectileMoveComp_Slider:bSuspensionEnabled_Up": "When set to true allows upward tension to be added on deflection and eased every tick. Upward tension is built up when the projectile gains upward velocity after a deflection, upward tension will add downward velocity to the projectile over time; this is a good way to minimize jumping curbs.\n     If disabled tension will not update nor build in the upward direction. Tension will ease every frame as long as bSuspensionEnabled_Up or bSuspensionEnabled_Down is enabled.",
    "ValkyrieEditorConfig:bTestOnLocalMachine": "When set to true, will enable the ability to launch clients automatically when testing. When false sends an message on the backend to instruct clients to join a session.",
    "ValkyrieEditorConfig:bAutoStartGameOnLaunch": "When set to true, will start the minigame when launch session or push changes is pressed.",
    "PapayaPlayerSpawningComponent:HighPrioritySpawnPoints": "When set we try to use these first, but will need to check for collisions",
    "QuickBar:SharedVisibleSlotIndicesWhenUsingGamepad": "When set, only the active or first slot from these indices will be visible when using a gamepad.",
    "DaySequenceModifierComponent:VolumeShapeComponents": "When set, the shape components will be used for the modifier volume, otherwise the default Box component will be used.",
    "FortVehiclePhysicsCollisionDamageComponent:DestructionTraceSocketRear": "When set, this will be used instead of the bounding box to determine the lenght of the vehicle.",
    "FortNavModifierComponent:DisableForNavmeshClasses": "When set, will disable the nav modifier for any Navmesh using one of the provided classes. If not set will apply the modifier to every Navmesh.",
    "FortNavModifierVolume:EnableOnlyForNavmeshClasses": "When set, will enable the nav modifier for any Navmesh using one of the provided classes. If not set will apply the modifier to every Navmesh.",
    "FortAthenaToggleAllowInteractStateTreeTaskTreeTask:AddExecutionMode": "When should the task add the provided actor from the allowed actors list on the target.",
    "FortAthenaToggleGameplayEffectStateTreeTask:AddExecutionMode": "When should the task add the provided gameplay effect.",
    "FortAthenaAddGameplayTagsStateTreeTask:AddExecutionMode": "When should the task add the provided gameplay tags.",
    "FortAthenaToggleAllowInteractStateTreeTaskTreeTask:RemoveExecutionMode": "When should the task remove the provided actor from the allowed actors list on the target.",
    "FortAthenaToggleGameplayEffectStateTreeTask:RemoveExecutionMode": "When should the task remove the provided gameplay effect.",
    "FortAthenaAddGameplayTagsStateTreeTask:RemoveExecutionMode": "When should the task remove the provided gameplay tags.",
    "EMusicClipUnmutePoint": "When should this clip unmute if it is started as a Time Follower?\"",
    "HarmonixPlayerComponentBase:StartCondition": "When should this sound be started (or unmuted in the case of music with a different sync point)?",
    "StartCondition:StartPosition": "When should this sound be started (or unmuted in the case of music with a different sync point)?",
    "FortCharacterMovementMutatorComponent:BuffetFlyingMaxSpeedInterpSpeed": "When smoothing to the desired BuffetFlying speed, this is passed to FMath::FInterpTo()",
    "FortAthenaMutator_DadBro:DadBroVerticalImpulseOffset": "When spawning DadBro with impulse, a vertical offset to apply to the origin of the impulse",
    "FortAthenaMutator_DadBro:DadBroImpulseForce": "When spawning DadBro with impulse, the force to impart",
    "FortAthenaMutator_DadBro:DadBroImpulseRadius": "When spawning DadBro with impulse, the radius of the force",
    "FortAthenaMutator_DadBro:DadBroApplySpawnImpulse": "When spawning DadBro, whether to apply an impulse clearing players from his spawn",
    "FortGameStateComponent_AssignedObjective:SpawnObjectivesInsideSafeZonePct": "When spawning objectives, spawn them within this percent (0-1) of the safe zone radius.\n      (eg 1.0 would be within the whole safe zone radius, 0.5 would be within the inner half of the safe zone radius)",
    "MusicClipSyncConfig:minWaitTicks": "When specifying an unmute point, this allows you to add an additional condition... at least this many midi ticks (480/beat) must pass before the un-mute point is considered..",
    "MusicClipSyncConfig:minWaitMs": "When specifying an unmute point, this allows you to add an additional condition... at least this much time must pass before the un-mute point is considered..",
    "PartOverrideData:CosmeticSwapTag": "When swapping, if a skin requires a custom part swap, then this is the tag the skin uses for that",
    "TeamBucketPartOverrideData:CosmeticSwapTag": "When swapping, if a skin requires a custom part swap, then this is the tag the skin uses for that",
    "BuildingProp_DestructionObject:OnBuildingAttributeSetHealthChangedDelegate": "When the BuildingAttributeSet Health Attribute is updated. *",
    "BattlePassLandingPageButtonTexts:LandingPageDescriptionText": "When the battle pass is showing the info about the button (like on hover), the description of this info",
    "BattlePassLandingPageButtonTexts:LandingPageTitleText": "When the battle pass is showing the info about the button (like on hover), the title of this info",
    "FortAthenaMutator_Uranium:EventTracking_CheckPointIsNearDistance": "When the cart is within this distance of a checkpoint, the near checkpoint message will play",
    "FortAthenaMutator_Uranium:CurrentMovingRespawnOffset_DefenderTeam": "When the cart starts moving, this is the respawn location offset from the cart for the DEFENDER team BEFORE it is multiplied by MovingRespawnOffsetMult_DefenderTeam.\nIt is aligned to the spline or cart depending on bAlignMovingRespawnToCart",
    "FortAthenaMutator_Uranium:CurrentMovingRespawnOffset_PusherTeam": "When the cart starts moving, this is the respawn location offset from the cart for the PUSHER team BEFORE it is multiplied by MovingRespawnOffsetMult_PusherTeam.\nIt is aligned to the spline or cart depending on bAlignMovingRespawnToCart",
    "FortAthenaSKPushCannon:bUseCameraForSteering": "When the config AllowsVehicleCameraSteering then this flag will allow camera turning to turn the cannon",
    "ECountdownDisplay.EventEndTime": "When the event ends",
    "BuildingFillFloor:EventHeights": "When the floor reaches the heights listed in this array, OnHeightEvent will be called",
    "ServerLaunchInfo:LaunchServerTime": "When the launch occurred, used to decide whether or not to trigger cosmetics(because we don't want to show cosmetics for launches that happened a long time ago.)",
    "FortAthenaMutator_PlayerIndicators:BlockAllPlayerIndicatorsTag": "When the local player has this tag applied to its ASC, no indicators will be seen by the local player",
    "EMemorySamplerState.Ready": "When the memory sampler is ready to be used",
    "FortMinigame:OnCurrentRoundChangedDelegate": "When the minigame current round changes.",
    "FortMinigame:OnPlayModeChangedDelegate": "When the minigame state crosses the boundaries of MinigameGameStatesToCheckForPlayModeChange",
    "FortGliderLayeredAudioOneshotGate:GateValue": "When the param passes this value in the Direction specified below, it will trip the gate",
    "FortLayeredAudioOneshotGate:GateValue": "When the param passes this value in the Direction specified below, it will trip the gate",
    "PhaseLevelEntryBase:MakeVisibleAtPhaseTags": "When the phase changes, make this level visible if the new phase tag is in this container",
    "PhaseLevelEntryBase:UnloadLevelAtPhaseTags": "When the phase changes, make this unload if the new phase tag is in this container",
    "FortObjectiveFilter_MatchFinished": "When the player has finished a match, whether by leaving or end of match",
    "FortMissionStormShield:AutoHideRadius": "When the radius is smaller than this value, then the storm shield will hide automatically. Don't make this zero as you'll get issues with floating point inaccuracies.",
    "FortAthenaMutator_Uranium:MovingRespawnOffsetMultiplier_DefenderTeam": "When the respawn point starts moving, it holds its distance from the pushcart. This is a multiplier to adjust that distance for the PUSHER team",
    "FortAthenaMutator_Uranium:MovingRespawnOffsetMultiplier_PusherTeam": "When the respawn point starts moving, it holds its distance from the pushcart. This is a multiplier to adjust that distance for the PUSHER team",
    "FortCreativeRoundSettings:WinningTeamOnMessageReceived": "When the round is called to end via a message, this is the team that will win. -1 == No team.",
    "EStateTransitionControlEvent.OnStateTransitionComplete": "When the state transition has occurred.",
    "FortStormShieldComponent:OnStormShieldStatusChanged": "When the status of being in or out of the shield has updated",
    "FortGameStateAthena:bStormReachedFinalPosition": "When the storm has reached its final position.",
    "FortCreativeStormShield:InstancedServerTime": "When the storm shield was instanced.",
    "FortCreativeStormShield:FinishDestroyTime": "When the storm shield will finish destroying itself. This is calculated in the Blueprint.",
    "FortCreativeStormShield:FinishShrinkTime": "When the storm shield will finish shrinking. This is calculated in the Blueprint.",
    "FortCreativeStormShield:StartShrinkTime": "When the storm shield will start shrinking. This is calculated in the Blueprint.",
    "FortCreativeStormShield:StartWaitTime": "When the storm shield will start waiting. This is calculated in the Blueprint.",
    "FortAthenaMutator_Tag:ServerEndTime": "When the tag match is over",
    "GliderTrailParticleDefinition:ActivationMode": "When the trail effect should be activated",
    "BuildingGameplayActorSentry:FixedRotationGoalReplicated": "When the turret is in an idle state or the Locating Damager state, this is the rotation the sentry is currently panning towards.\n     This version of the variable replicates from the server to the client.",
    "VehicleRuntimeModifiers:WaterDestructionDelay": "When the vehicle becomes too deep in water to drive, destroy it after this delay in seconds. A negative will disable this functionality.",
    "FortWeaponRangedDual:OnHandFired": "When the weapon fires, get the hand that just fired. Client only.",
    "EFortGameplayState.EndOfZone": "When the zone is complete, players deciding on next action",
    "EFortFeedbackSelectionMethod": "When there is more than one context to play, how should we select which context to play",
    "FortAthenaMutator_SpecialEvent:PlayerCountToTriggerBackfill": "When there is only this many (or fewer) Players in the Match, Server should look to start accepting backfill.  If <= 0, value is taken from Playlist's MinPlayers variable",
    "FortMission:StartingDay": "When this Mission is activated, the starting day is stored. This is used when figuring out rewards at the end of the Mission",
    "BuildingSMActor:bPropagateBounce": "When this actor plays the bounce animation, should it propagate to its children? Ignored if bPlayBounce is false.",
    "FortAthenaMutator_Uranium:EventTracking_TimeIsExtraLowTime": "When this amount of time is remaining on the clock, the extra low time message will play",
    "FortAthenaMutator_Uranium:EventTracking_TimeIsLowTime": "When this amount of time is remaining on the clock, the low time message will play",
    "BuildingGameplayActorChaser:PatrolTargetHeightAboveGround": "When this chaser is on patrol, it will move at this height above the ground",
    "FortControllerComponent_PhotoMode:ForcedExitCallback": "When this is called the PhotoMode is being forcibly shutdown by the game.\nOne example is when UEFN needs to push new data to the client.",
    "FortControllerComponent_PhotoMode:PhotoFinishedRenderingCallback": "When this is called the captured photo has finished rendering and was saved to disk.",
    "FortGameCueCloakModifier:AlphaTimeToDisabled": "When this modifier becomes disabled how long does it take to fully fade out (i.e. for CurrentAlpha to move from 1.0 to 0.0.)",
    "FortGameCueCloakModifier:AlphaTimeToEnabled": "When this modifier becomes enabled how long does it take to fully fade in (i.e. for CurrentAlpha to move from 0.0 to 1.0.)",
    "ActiveGameplayModifier:Expiration": "When this modifier expires (e.g. in waves)",
    "FortAthenaVehicle:ReasonsWhyCantContainPlayers": "When this stack of texts is not empty, the vehicle is not allowed to contain players,\n              and the top string that it contains will be displayed for the interact prompt.",
    "FortCurieExecutionEntry:ApplicationEvent": "When to apply the element to the interacting object.  Only configurable if Application Type is Application *",
    "FortAthenaArithmeticStateTreeTask:OperationTrigger": "When to do the operation.",
    "FortAthenaMutator_MatchCondition:TimingType": "When to end the round or match, after bSatisfied == true",
    "EMatchConditionMutatorTimingType": "When to end the round or match, after the condition is satisfied.\nIn order of priority, lowest to highest.",
    "CreativeFunctionalTest:bShouldStartMinigame": "When true StartTest() will not be called until the creative minigame has started.",
    "FortTheaterRuntimeData:bOnlyMatchLinkedQuestsToTiles": "When true only quests that are manually linked to tiles in this theater can\nbe matched to tiles in the theater for the play now button or the tile pinging",
    "PFWExtensionToAdd:bLeaveActiveOnDeactivate": "When true the add extension will not be removed on deactivate",
    "FortEncounterSettings:bIgnoreCollisionWhenSpawningAI": "When true this will spawn AI from this encounter with ESpawnActorCollisionHandlingMethod::AlwaysSpawn instead of ESpawnActorCollisionHandlingMethod::AdjustIfPossibleButDontSpawnIfColliding",
    "CreativeFunctionalTest:bShouldLevelStreamMap": "When true will use level streaming to create the devices, otherwise will spawn via LevelSaveRecord (LSR)\nTODO: Instead of this have an option for LevelStreamed, RecordSpawned, Combined. This way the same test can run multiple scenarios and prove consistency.",
    "AthenaCarPlayerSlot:bConstrainPawnToSeatDuringTransitionMontage": "When true(default), pawn constrains transform to seat's transform during transition.  Ignored for driver for which seat, this is assumed to always be true.",
    "VideoWidgetConfig:bHoldToSkip": "When true, Button_Skip action is set to HoldToSkipAction.\n       * Otherwise, this action is set to PressToSkipAction",
    "VideoWidgetConfig:bAllowSkipping": "When true, Button_Skip will be made usable",
    "UserOptionDefinition:bOverrideDescription": "When true, Description will be left as-is rather than synced from its source data.",
    "UserOptionDefinition:bOverrideDisplayName": "When true, DisplayName will be left as-is rather than synced from its source data.",
    "UserOptionDefinitionEnumValueEntry:bOverrideDisplayName": "When true, DisplayName will be left as-is rather than synced from its source data.",
    "VideoWidgetConfig:bFadeFromColor": "When true, StartFadeFromColor is executed on PlaybackResumed",
    "BuildingGameplayActorSentry:bYawLimitWhileTracking": "When true, When the sentry is in tracking or aggro states it will only be able to rotate its yaw TrackingYawLimit degrees from its starting rotation.",
    "FortGameStatePvE:bWeaponSwappingEnabled": "When true, a picked up weapon will swap into the current quickbar weapon slot, and the equipped weapon will be dropped.\n              Weapons will not accumulate in the inventory beyond what the quickbar can hold.",
    "FortVehicleAimingWeaponComp:bAllowCameraLocalVerticalRotationOnly": "When true, all sideways movement on camera is disabled.  Camera up vector will match the vehicle's.  Useful if you only want to rotate the camera on one axis (vertical axis, e.g. the ship cannon)",
    "FortMinigameItemListComponent:FilterAssetsWithoutMetaDataTags": "When true, assets without gameplay tags in their meta data will not be allowed if MandatoryTags are specified. Those assets must be saved.",
    "FortVehiclePhysicsCollisionDamageComponent:bOnlyAffectBuildingsIfKillingDamage": "When true, buildings will only be deleted with the damage is high enough to kill them.  When false, all damageable building actors will be deleted.",
    "FortSplineGroundPath:bDrawDebugCollision": "When true, collisions are rendered (via handle damaged).",
    "FortSplineGroundPath:bDrawDebugEvenlySizedSegments": "When true, debug lines show the evenly spaced segments (which are kept in the same order on all clients and server because of their associated LastServerId.)",
    "FortSplineGroundPath:bDrawDebugReppedPoints": "When true, debug lines show the repped points.",
    "FortMinigameItemContainerComponent:bHideInActorDetails": "When true, ensure this component is hidden from detail panels for instances of the owning Actor class",
    "FortWeaponComponent_RecoilCurve:bRandomizeHorizFlip": "When true, horizontal axis of curve is negated randomly every time it starts.",
    "FortWorldSettings:bGenerateTestLevelSaves": "When true, in the editor, you will automatically generate",
    "FortMinigameItemListComponent:bEnableItemTemplates": "When true, item templates hosted by this item list will be marked as enabled",
    "FortMovingPlatformComponent:AttachActorIgnoreBaseRotation": "When true, pawns will NOT rotate with the platform while basing on it",
    "FortAthenaVehicle:bShouldClearFallDamageImmunityForPawnsOnExit": "When true, pawns will clear fall damage immunity when they exit this vehicle",
    "FortSplineGroundPath:bDrawDebugRawEnd": "When true, server's most recent raw points.",
    "FortSplineGroundPath:bDrawDebugRawPoints": "When true, server's raw points are drawn using debug lines.",
    "VideoWidgetConfig:bUseSkipBoundaries": "When true, skip operations will use the\n       * UFortRuntimeOption FTUESeasonTrailerBoundary for skipping.\n       * Typically, this is used in multi-append FTUE VODs",
    "FortSplineGroundPath:bSomeSectionsAreFadingOut": "When true, some sections are disappearing (i.e. shrinking because they've timed out.)",
    "FortSplineGroundPath:bDrawDebugTangents": "When true, tangents of the spline sections (on the evenly spaced points) are drawn using debug lines.",
    "AthenaAIController:bIsGoalRequiredForBehavior": "When true, the behavior tree will be shut down when there is no goal",
    "RewardKeyData:bUseUnlockingItemDisplayName": "When true, the consumer of this will use the unlocking item definition display name.",
    "FortEncounterSettings:bSpawnFirstRiftNoDelay": "When true, the encounter will try to spawn a rift once as soon as it is ready, then apply the SpawnRiftIntervalTime",
    "FortSplineGroundPath:bDrawDebugSplineEnd": "When true, the end of the spline is shown.",
    "PlaylistStreamedLevelData:bIsServerOnly": "When true, the level data won't be streamed on the client",
    "CosmeticDeveloperSettings:bForcedMontageAccess": "When true, the local player can always access montages that have their access restricted, regardless of if they meet access requirements.",
    "FortAthenaVehicle:bIgnoreNextFallingDamage": "When true, the next time the Pawn lands it will not take any falling damage.",
    "FortPawn:bAllowDeathFromFallingDamage": "When true, this FortPawn can die from falling damage, regardless of\n              existing logic in AFortPawn::ApplyFallingDamageFromHeight.",
    "UserOptionDefinitionEnumValueEntry:bIsHidden": "When true, this enum entry will be hidden in-game and in-editor.\n@note Ideally set the \"Hidden\" meta-data on the source enum entry itself if it should be hidden in all usage contexts.",
    "FortWorldMarkerData:bHeldMarkerInput": "When true, this marker was upgraded to a \"hold input marker\" (user held place marker input).",
    "FortPlayerPawn:bIsPedestalHero": "When true, this means the pawn is in the frontend lobby screen.",
    "FortPlayerController:bAtNameBaseScreen": "When true, this means we are at the \"name your home base screen\" after on boarding and need to turn this to true\nto prevent some alt-tabbing bugs where the player loses control of mouse input",
    "UserOptionDefinition:bRequireExplicitOverride": "When true, this option will require an additional boolean \"{PropertyName}_Override\" property that controls whether the value in \"{PropertyName}\" should be used.\n@note \"{PropertyName}_Override\" must default to false.\n\nIn-editor this generates a linked property edit-condition for \"{PropertyName}\" against the state of \"{PropertyName}_Override\".\nIn-game this adds an additional \"No Override\" value option for \"{PropertyName}\".",
    "TileGroupInfo:bPlaceAdjacent": "When true, this will require that all tiles placed in an iteration be adjacent to each other. Being unable to do so will result in failure.",
    "FortWeaponComponent_RecoilCurve:bRandomizeVertFlip": "When true, vertical axis of curve is negated randomly every time it starts.",
    "PhysicsSimValidateObject:bRejectEmbeddedInLandscape": "When true, we will test if the physics object is embedded in landscape, if it is then validation will fail",
    "FortVehicleAudioController:bForceUpdatePastListenerRange": "When true, will update audio controller regardless of listener range",
    "FortGeneratePropertyPathData:NestedPropertiesIndexData": "When using auto property path generation to generate path to a property that's either inside a map or an array.\nWe expect to have a valid index for that property to be added to this map via AddGeneratePathPropertyNestedIndexData\nExample lets say you are looking for property bCount for Objective 2 the path would be Objectives[2]->bCount\nAuto generation how ever doesn't know it has to look for Index = 2. So in this case we need to specify that for Property Objectives we are looking for Index 2\nIn case of maps the property path also use Indexes. You can generate an array of keys using maps GenerateKeyArray function.\nThen find the key you are looking for inside that array and get it's index. That would be the index the property index data expects",
    "PhaseInfo:RequireLevelsFromPhaseTags": "When using cheats, you can use this to force a level to get loaded that might\nBe loaded by another phase. This is only used when skipping around using cheats.",
    "SpecialEventCursorMode:GamepadMoveSpeed": "When using the Gamepad input type, we apply this speed to the eased movement input",
    "SpecialEventCursorMode:GamepadMoveEaseData": "When using the Gamepad input type, we pass this data to UKismetMathLibrary::Ease() to modify the raw movement input",
    "SpecialEventCursorMode:TouchMoveSpeed": "When using the Touch input type, we apply this speed to the eased movement input",
    "SpecialEventCursorMode:TouchDeadzoneTreshold": "When using the Touch input type, we ignore move below the threshold",
    "SpecialEventCursorMode:TouchMoveEaseData": "When using the Touch input type, we pass this data to UKismetMathLibrary::Ease() to modify the raw movement input",
    "FortPlayerPawn:LaunchPadParachuteDeployTraceForGroundDistance": "When using the launch pad glider: Once under the map's ParachuteForceDeployWorldZ, trace this far to see if we are close enough to the ground to force deployment.",
    "FortPlayerPawn:LaunchPadParachuteDeployTraceForDownwardSpeed": "When using the launch pad glider: only deploy parachute when the downward speed is greater than this",
    "ObjectInteractionBehavior:ActiveReticleColor": "When using this interaction, changes the reticle color to be this color.",
    "SpecialEventCursorMode:TouchAttenuator": "When using touch, identical input on the screen will attenuate each frame.",
    "GiftBoxInfo:GiftedOn": "When was this gift box record created",
    "FortClientAnnouncement:ClientDeliveryTime": "When was this notification delivered to this client",
    "FortWaterInteractionComponent:WaterVelocityShallowMultiplier": "When water is shallow, affects velocity.",
    "FortWaterInteractionComponent:WaterVelocityShallowDepth": "When water is this shallow or less, scale down velocity by interping towards WaterVelocityShallowMultiplier at 0 depth.",
    "FortCharacterMovementMutatorComponent:BuffetBubblesMoveToBoxSpeed": "When we first enter the movement mode, move toward the follow actor at this speed, until we're within the box",
    "FortAIPawn:DefenderPlacedTime": "When we last placed the Defender",
    "CreativeAudioMixerReplicationProxy:bIsActive": "When we only want some players to have the mix active, we store that state here",
    "CreativeAudioPlayerReplicationProxy:InstigatorData": "When we only want some players to hear audio, we store the instigator data in proxies instead of the Audio Player itself",
    "FortAthenaVehicle:InitialOverlapBehavior": "When we spawn overlapping a building actor, should it be ignored,\n      destroyed, destroyed only if moved-into, etc...",
    "FortCachedWeaponOverheatData:OverheatValueAtUneqip": "When we unequip a weapon that overheats (and is cooling down) we store the value so we can properly adjust the value on re-equip",
    "FortPlayerPawn:bFXPlayDustOnMovement": "When we update ground interaction effects, this will allow us to turn off dust fx while moving around.\nUseful for things that make us invisible.",
    "FortPawnComponent_CustomDepth:DefaultHighlightingData": "When we're not overriding the highlight data, what are the values we want to use?",
    "SpecialEventCursorMode:GamepadZoomMoveSpeed": "When zooming with the Gamepad input type, we lerp between the normal speed and this speed, based on the current zoom percent",
    "SpecialEventCursorMode:TouchZoomMoveSpeed": "When zooming with the Touch input type, we lerp between the normal speed and this speed, based on the current zoom percent",
    "FortCreativeStreamingController:ReplicatedStreamingProperties": "Whenever the number of streaming devices changes, the client needs to respond appropriately",
    "EFortScriptedActionEnvironment": "Where can this scripted action be spawned?",
    "EUIExtensionSlot.ControllerBindingCallout": "Where controller binding callouts are for vehicles and alternate modes.",
    "FortWorldMarkerData:BasePosition": "Where in the world is this marker?  The location may not match the MarkedActor, like a physical moving item sliding down a hill.",
    "FortWorldMarkerData:BasePositionOffset": "Where in the world is this marker?  The location may not match the MarkedActor, like a physical moving item sliding down a hill.",
    "CharacterPartAttachmentParams:SocketName": "Where on the Attachment Target to attach",
    "FortCreativeMoveTool:SelectionToWorld": "Where our selected actors are in the world.  This is the pivot point we've created for the entire selection set.",
    "FortMinigame:PostGameSpawnLocationSetting": "Where players spawn at the end of the minigame",
    "FortMinigame:SpawnLocationSetting": "Where players spawn when they die during minigame play; base player created minigame also uses this to determine start location",
    "FortActorRecord:ActorTransform": "Where the actor spawns",
    "FortPlacedBuilding:PlacedTag": "Where the building is placed",
    "FortOpticConfig:OpticCenter": "Where the center of the optic is when looking through it.  i.e. this defines the point that is visually stationary on screen/where the reticle is rendered.",
    "FortAthenaHandleSoftDisableGuardStateTreeTaskInstanceData:SoftDisableStateReference": "Where the change will be stored.",
    "FortPawn:SpawnSpot": "Where the creature should idle/ become dormant",
    "FortOpticConfig:OpticEntrance": "Where the front/entrance of the optic is.  This is used to check that the front of the optic doesn't obscure the reticle.",
    "FMDeviceCableOrderingMovementState:RelevantPorts": "Where the movement is in seconds",
    "FortPlayerController:PendingSpectatorLocation": "Where the player is going to spectate after the pawn is dead",
    "EPlaysetOffsetType": "Where the playset gets spawned relative to its bounding box",
    "PlaysetSettings:OffsetType": "Where the playset gets spawned relative to its bounding box",
    "FortQuestMapNode:LabelPosition": "Where the quest name text should appear on the quest node",
    "FortAthenaIntArithmeticStateTreeTaskInstanceData:ReferencedResult": "Where the result will be stored.",
    "AthenaAwardGroup:RewardSource": "Where the reward originated from",
    "FortScriptedAction:ActionEnvironment": "Where this action exists",
    "FortItemEntry:ItemSource": "Where this item came from, usually a template name such as a hero type",
    "FortControllerComponent_Telemetry:SkyDiveJumpLocation": "Where this player jumped.",
    "FortControllerComponent_Telemetry:SkyDiveLandLocation": "Where this player landed from skydiving.",
    "AntelopeInPersistent:BounceOffsetBack": "Where to apply bounce force",
    "SpringConfig:LocalApplyTM": "Where to apply the spring force in local space",
    "FortWeapon:MuzzleSocketName": "Where to attach the muzzle effect",
    "AnimNode_PlayBeatSyncedAnim:SyncAnimBeatTo": "Where to beat sync this animation (Treat as beat one)",
    "MatchmakingParams:StartWith": "Where to begin matchmaking",
    "SpringConfig:LocalStartTM": "Where to begin the spring raycast",
    "FortFocusedBuildingInfo:IndicatorRelativeLocation": "Where to place the indicator widget relative to the building it's attached to",
    "CreativeFunctionalTest:DeviceSpawnLocation": "Where to spawn the device",
    "CreativeFunctionalTest:PawnStartLocation": "Where to teleport the first player pawn to when the test starts.",
    "FortPawnComponent_Tether:TetherViewPlayerLength": "Where we change view target back to the player because they are probably stuck on something",
    "FortPawnComponent_Tether:TetherCatchupLength": "Where we start moving faster to catch up to the desired length",
    "PendingSpawnInfo:SpawnPoint": "Where we want to spawn it",
    "ValkyrieFortniteEditorPermissionSettings:bEnableAccessToLegacyContent": "Whether \"legacy\" content should be available in the content browser",
    "ValkyrieFortniteEditorPermissionSettings:bEnableAccessToUnreleasedContent": "Whether \"unreleased\" content should be available in the content browser",
    "ValkyrieEditorPermissionSettings_Animation:bEnableAnimationBlueprintDelegates": "Whether Animation Blueprint delegates are visible",
    "ValkyrieEditorPermissionSettings_Animation:bEnableAnimationBlueprintMacros": "Whether Animation Blueprint macros are visible",
    "ValkyrieEditorPermissionSettings_Animation:bEnableAnimationBlueprints": "Whether Animation Blueprints can be used",
    "FortSafeZoneDamageInfo:bPercentageBasedDamage": "Whether Damage will be applied as a percentage of the pawns max health, or as a direct damage value",
    "ImGuiSettings:bShareGamepadInput": "Whether ImGui should share gamepad input with game.\nThis defines initial behaviour which can be later changed using 'ImGui.ToggleGamepadInputSharing' command or\nmodule properties interface.",
    "ImGuiSettings:bShareKeyboardInput": "Whether ImGui should share keyboard input with game.\nThis defines initial behaviour which can be later changed using 'ImGui.ToggleKeyboardInputSharing' command or\nmodule properties interface.",
    "ImGuiSettings:bShareMouseInput": "Whether ImGui should share mouse input with game.\nThis defines initial behaviour which can be later changed using 'ImGui.ToggleMouseInputSharing' command or\nmodule properties interface.",
    "FortPartyRepData:AthenaSquadFill": "Whether MMS is going to fill out squads for Athena",
    "FortGameStateComponent_RealitySapling:bUsePerfCulledSaplingAssetOnSpawnFailed": "Whether PerfCulledSaplingAsset should be spawned if the sapling fails to spawn normally",
    "FortAIPawnStats:bAlertSightEnabled": "Whether Sight is enabled when alert",
    "FortAIPawnStats:bDormantSightEnabled": "Whether Sight is enabled when dormant",
    "EMatchConditionMutatorTeamStatus": "Whether a MatchCondition mutator considers a team to be a winner or loser",
    "EDynamicFoundationEnabledState": "Whether a foundation is enabled or disabled",
    "EDynamicFoundationType": "Whether a foundation will always remain in the same place/state or whether it can be dynamically moved or enabled",
    "VoteResponderComponent:bShouldLockVotingAfterCasted": "Whether a player is allowed to change their vote after casting it",
    "AIVisibilityRangeSettings:bUsesRangeSettings": "Whether a range check is performed for this visibility setting",
    "FortDailyLoginRewardStat_ScheduleClaimed:ClaimedToday": "Whether a reward was claimed in this refresh interval",
    "FortFocusedBuildingInfo:bIsTrapAttachedFacingPlayer": "Whether a trap is attached facing the player.",
    "FortChangeMonitoringStruct:bAnyValueDirty": "Whether a value has been changed via SetValue\n\nBlueprintReadOnly until we get really comfortable with UFortChangeMonitoringStructHelpers",
    "FortAthenaMutator_CenterSafezonesOnPOIs:UseFirstEntryForAllSafezones": "Whether all safezone indices are going to use the same data",
    "AlterationSlot:bRespeccable": "Whether alteration can be swapped by player.",
    "ChaserPatrolTurnData:bPatrolTurning": "Whether an interpolated patrol turn is currently being processed",
    "FortCheckPointSplineActor:bSplineMapUIAntialias": "Whether antialiasing should be applied to the spline map UI",
    "FortUserCloudRequestQueue:bFreezeIncomingRequests": "Whether any incoming cloud requests should be frozen for processing until explicitly unfrozen later",
    "FortFocusedBuildingInfo:bIsAnyTrapAttached": "Whether any trap is attached.",
    "FortCreativeMoveTool:bIsAutoTractorBeamRunning": "Whether automatic initial tractor beam is currently running",
    "FortAthenaMutator_SpecialEvent:bCanStreamBuildingFoundationsIn": "Whether building foundation streaming should be enabled. Can be used to prevent sublevels of the main map (e.g. Apollo POIs) from streaming in during a special event.",
    "AthenaCapturePoint:bSupportsPerPlayerCapturing": "Whether capturing and losing possession of the point is increased with more players",
    "FortAttachableProjectileComponent:bDisableCollisionWhileAttached": "Whether collision should be disabled while actor is attached",
    "DagwoodRuntimeModifiers:bDamageFriendlyVehicles": "Whether collision with other friendly driven vehicles will cause damage to own or other vehicles.",
    "RockRuntimeConfigOverrides:bDamageFriendlyVehicles": "Whether collision with other friendly driven vehicles will cause damage to own or other vehicles.",
    "DagwoodRuntimeModifiers:bDamageOtherVehicles": "Whether collision with other vehicles will cause damage to other vehicle.",
    "RockRuntimeConfigOverrides:bDamageOtherVehicles": "Whether collision with other vehicles will cause damage to other vehicle.",
    "DagwoodRuntimeModifiers:bDamageOwnVehicle": "Whether collision with other vehicles will cause damage to own vehicle.",
    "RockRuntimeConfigOverrides:bDamageOwnVehicle": "Whether collision with other vehicles will cause damage to own vehicle.",
    "BuildingProp_CreaturePlacer:bEnableCreativeCreatureSpawners": "Whether creative rifts should be inactive or not.",
    "BuildingProp_DeimosSpawner:bEnableCreativeCreatureSpawners": "Whether creative rifts should be inactive or not.",
    "GasDebuggerMenu:bIsDataPaused": "Whether data capture is paused for the client using it. If so, data is stored in PausedClientDebugGasSnapshot and PausedServerDebugGasSnapshot",
    "AIPatrolPathComponent:bAllowPartialPaths": "Whether drawing of the pathfinding between two patrol points use partial path or not.",
    "FortGeneratedEncounterProfile:bShouldReselectOptionsPerInstance": "Whether each instance of the encounter should reselect new difficulty options",
    "ActorTemplateRecord:ActorDataHardReferences": "Whether each of the ActorDataReferenceTable entry is a hard reference",
    "ActorComponentRecord:ComponentDataHardReferences": "Whether each of the ComponentDataReferenceTable entry is a hard reference",
    "FortAthenaVehicleInputState:bUsingTrigger": "Whether either trigger is currently held. Set by base vehicle.",
    "FortAthenaVehicleInputStateReliable:bUsingTrigger": "Whether either trigger is currently held. Set by base vehicle.",
    "RadialWindField:bPawnForceIsPush": "Whether field should push pawns away from center",
    "MilkshakeControllerComponent:bForceFeedbackEnabled": "Whether force feedback is enabled",
    "SkyTubeAsyncInPersistent:bMagnetized": "Whether forces should be applied while in a skytube. (auto-marshaled)",
    "FortCreativeMoveTool:bIsImmersiveEditModeEnabled": "Whether immersive edit mode is enabled",
    "FortAthenaPatrolPath:bIsPatrolPathEnabled": "Whether is patrol path is enabled, will affect CanBeUsed() result",
    "FortEncounterSettings:bMustFindSpawnPoints": "Whether it is acceptable if the encounter is unable to find spawn points (the encounter will fail whether this is true or false, but this just prevents us from ensuring).",
    "BuildingActor:bBeingRotated": "Whether it was being rotated",
    "BuildingActor:bBeingScaled": "Whether it was being scaled",
    "BuildingActor:bBeingTranslated": "Whether it was being translated",
    "CreativeSelectedActorInfo:bWasDormant": "Whether it was dormant when we picked it up",
    "FortPlaysetRoot:bBeingDragged": "Whether it's being dragged in the editor",
    "FortPlaysetRoot:bBeingRotatedOrScaled": "Whether it's being rotated or scaled in the editor",
    "FortPlaysetRoot:bBeingTranslated": "Whether it's being translated in the editor",
    "FortEmporiumItemData:bRequiresEntitlement": "Whether item requires entitlement validation",
    "ValkyrieEditorPermissionSettings_Project:bLocalizationEnabled": "Whether localization is enabled",
    "BuildingContainer:bCanBeMarked": "Whether markers can be attached to this actor. When true, markers will be snapped to the position of the Actor (see MarkerPositionOffset) and will follow the actor around.\n     To set use SetCanBeMarked().",
    "BuildingGameplayActor:bCanBeMarked": "Whether markers can be attached to this actor. When true, markers will be snapped to the position of the Actor (see MarkerPositionOffset) and will follow the actor around.\n     To set use SetCanBeMarked().",
    "BuildingProp:bCanBeMarked": "Whether markers can be attached to this actor. When true, markers will be snapped to the position of the Actor (see MarkerPositionOffset) and will follow the actor around.\n     To set use SetCanBeMarked().",
    "BuildingRealitySapling:bCanBeMarked": "Whether markers can be attached to this actor. When true, markers will be snapped to the position of the Actor (see MarkerPositionOffset) and will follow the actor around.\n     To set use SetCanBeMarked().",
    "BuildingRealitySeedPod:bCanBeMarked": "Whether markers can be attached to this actor. When true, markers will be snapped to the position of the Actor (see MarkerPositionOffset) and will follow the actor around.\n     To set use SetCanBeMarked().",
    "BuildingRift:bCanBeMarked": "Whether markers can be attached to this actor. When true, markers will be snapped to the position of the Actor (see MarkerPositionOffset) and will follow the actor around.\n     To set use SetCanBeMarked().",
    "BuildingTrap:bCanBeMarked": "Whether markers can be attached to this actor. When true, markers will be snapped to the position of the Actor (see MarkerPositionOffset) and will follow the actor around.\n     To set use SetCanBeMarked().",
    "FortHeistDisplayCase:bCanBeMarked": "Whether markers can be attached to this actor. When true, markers will be snapped to the position of the Actor (see MarkerPositionOffset) and will follow the actor around.\n     To set use SetCanBeMarked().",
    "SpookyEventEmotePad:bCanBeMarked": "Whether markers can be attached to this actor. When true, markers will be snapped to the position of the Actor (see MarkerPositionOffset) and will follow the actor around.\n     To set use SetCanBeMarked().",
    "ValkyriePluginReferenceDescriptor:bIsPublic": "Whether modules from other projects can reference this module",
    "FortCreativeMoveTool:bIsMultiselectEnabled": "Whether multiselect is currently enabled",
    "TornadoConfigEntry:bAllowPickupPawns": "Whether non-player pawns (ex: Creatures) are allowed to be picked up by the tornado",
    "FortSkyTube:bApplyTangentialForce": "Whether objects in the skytube should have any tangential force applied to them. If false, only radial forces will be applied. Currently only applies to vehicles. */",
    "FortActorComponent_MultiInteract:bOnlyUpdateForLocalInteractingPlayer": "Whether only interacting player should trigger UpdateFor BP Implementable event; or else all players would trigger",
    "CreativeToolPersistentData:bShouldUsePrecisionGridSnapping": "Whether or not MoveFreely should snap to a grid of some kind.",
    "FortCreativeMoveTool:bShouldUsePrecisionGridSnapping": "Whether or not MoveFreely should snap to a grid of some kind.",
    "FortAIBatchedDamageCues:bImpactWeapon": "Whether or not a physical impact cue was found. Used for weapon impact cues",
    "BeginGroupTeleportParams:bForceKillPlayers": "Whether or not all players should be killed and respawned rather than just teleported",
    "FortCreativeMoveTool:bBuildingsAsPropsSnapToCenter": "Whether or not buildings as props should snap to their center instead of their origin.",
    "FortAthenaMutator_MarkerUtilities:bWorldIndicator_IndicatorClampToScreen": "Whether or not enemy player indicators should be clamped to the screen.",
    "SpecialEventAudioHapticsComponent:bStartHapticsOnBeginPlay": "Whether or not haptics will be started when begin play is called on this component.\n    Starting haptics will fail if there is no local player controller.",
    "FortAthenaMutator_Uranium:bIsSafeToTurnOnCameraAfterRespawn": "Whether or not it is safe to fade back in the camera after respawn",
    "CreativeFunctionalTestConditionComponentBase:bConditionSatisifed": "Whether or not our \"condition\" has been satisifed",
    "FortGameModeZone:bForceSpectateAfterDeathRegardlessOfRespawnTime": "Whether or not players are forced to spectate before respawning. This is needed for some respawning systems (like FortAthenaMutator_RespawnAndSpectateSelect) to work properly.",
    "SubGameInfo:bCanPartyWithoutFullInstall": "Whether or not players in this subgame play in parties without having a Full Install",
    "FortCreativeItemDropParams:bSpawnPickups": "Whether or not removed items should be dropped as pickups",
    "FortCreativeItemDropParams:bSpawnPickupsAtPreviousGround": "Whether or not removed items should be dropped as pickups",
    "FortAthenaMutator_Cobalt:bIsFinishedDisplayingRoundEndUI": "Whether or not round end UI has finished displaying for the current round",
    "FortAthenaMutator_Cobalt:bShouldSkipWinLossScreen": "Whether or not skip the win loss screen in the infiltration round info widget",
    "FortAIPawn:bIsCowering": "Whether or not the AI is currently cowering.",
    "FortGameUserSettings:bEulaAccepted": "Whether or not the EULA was accepted",
    "SubGameInfo:RequiredFullInstall": "Whether or not the Full Install is required to play this SubGame",
    "FortControllerComponent_MarkActorsInRadius:bClampIndicatorToScreen": "Whether or not the HUD Indicators above the Vendetta AI should be clamped to the screen or not",
    "BuildingFoundation:bForceDitheringTransition": "Whether or not the LOD Actors should be forced into view when the sublevel is added to the world",
    "FortBounceData:bIsPlaying": "Whether or not the bounce animation is currently active",
    "FortBounceData:bLocalInstigator": "Whether or not the bounce was instigated by the local player",
    "FortGameFeatureStatusList:bIsUsingCellularConnection": "Whether or not the current connection is a cellular connection",
    "FortAthenaMutator_SpecialEvent:bCanToggleCursorModeInStasis": "Whether or not the cursor mode can be toggled when the pawn is in stasis. This allows the cursor mode to be toggled for all actions when set to true. Used by FortGameStateAthena_CanToggleCursorModeInStasis.",
    "FortPickupTossOverrideData:bIsValid": "Whether or not the data should be used",
    "FortObjectiveBase:bRelevantToSpecificTeam": "Whether or not the event is relevant only to a specific team, or any/all teams.",
    "CreativeItemTemplateData:bEnabled": "Whether or not the item template should be active",
    "Recipe:bIsConsumed": "Whether or not the item that has the recipe is consumed on recipe use",
    "SpecialEventInputHelperComponent:bConsumeLookInput": "Whether or not the look input is consumed by the special event input component",
    "SpecialEventInputHelperComponent:bConsumeMoveInput": "Whether or not the move input is consumed by the special event input component",
    "FortAIBatchedDamageCues:bDamageWeapon": "Whether or not the physical damage cue was found. Used for weapon damage cues",
    "FortGameStateAthena:bPlaylistDataIsLoaded": "Whether or not the playlist data has been loaded",
    "FortGameStateAthena:bPlaylistDataIsActivelyLoading": "Whether or not the playlist data is in the act of being loaded",
    "UserOptionAssetTypeMetaData:bSoftReference": "Whether or not the property is a \"soft\" reference.",
    "UserOptionClassTypeMetaData:bSoftReference": "Whether or not the property is a \"soft\" reference.",
    "FortPlayerPushableCart:bIsNearCheckpoint": "Whether or not the pushcart is \"near\" the checkpoint (computed at the mutator since we don't have a tick function)",
    "TransientOverride:bMarkTransient": "Whether or not the referenced property should be forced to Transient",
    "FortQuestRewardTableRow:Selectable": "Whether or not the reward is selectable by the player. Conflicts with the Hidden property.",
    "FortQuestRewardTableRow:Hidden": "Whether or not the reward is visible to the player",
    "FortQuestRewardTableRow:Exportable": "Whether or not the reward should be exported to the rewards array on mcp.",
    "FortQuestRewardTableRow:Feature": "Whether or not the reward should show as a feature",
    "SynchronizedTeleportPlayerComponent:bIsServerWaitingForClientToCancelRespawn": "Whether or not the server is waiting for the client to cancel respawning on its end.\n Setting the value on the server lets the client know to cancel its respawn",
    "FortWorldManager:bUseSimMaps": "Whether or not the tile manager should use sim maps or normal maps",
    "DagwoodRuntimeModifiers:bTireModAdjustsPosition": "Whether or not the tire mod should update the position of the vehicle post application\n              to avoid tire clipping",
    "BuildingTrapFloor_Turret:bIsSearching": "Whether or not the turret is currently searching for targets on overlap",
    "BuildingTrapFloor_Turret:bUseOwnerTeam": "Whether or not the turret should use its owner's team when damaging things",
    "FortPlayerController:TutorialCompletedState": "Whether or not the tutorial has been completed",
    "FortAIBatchedDamageCues:bWeaponActivated": "Whether or not the weapon activation cue was found",
    "FortLiveMannequin:bUpdateInEditor": "Whether or not this Actor's SkeletalMeshComponent should have UpdateAnimationInEditor.\nThis should almost always be set to true to ensure that Tracking is visible in editor.",
    "CosmeticsToApplyOnItemPickupData:bEnabled": "Whether or not this Cosmetics set is enabled. If disabled, these cosmetics will not be applied on item pickup",
    "FortAthenaMutator_SpecialEvent:bManageBackfill": "Whether or not this Mutator should manage backfill settings",
    "FortSkyTube:bCanEverBeEnabled": "Whether or not this SkyTube can ever be enabled. Setting this to false will disable the SkyTube on BeginPlay and prevent it from being re-enabled",
    "BuildingProp_DeimosSpawner:bDamageBuildingsOnSpawn": "Whether or not this Spawner will destroy buildings on spawn or not",
    "HUDWidgetRegistryEntry:bIsMandatory": "Whether or not this Widget is Mandatory. When true this HUD Element is required on screen and cannot be deleted from a player's HUD Layout Profile.",
    "BuildingSMActor:bRegisterWithStructuralGrid": "Whether or not this building actor should attempt to register with the structural support grid",
    "FortCreativeCostComponent:bShowCostInInteractionIndicator": "Whether or not this component allows costs to be shown in the interation indicator widget",
    "FortPlayerInputSettings:bBuildingPickerOnlyChoosesCategories": "Whether or not this configuration allows the building picker to only choose building categories",
    "FortPlayerInputSettings:bWeaponPickerShowOnlySlottedItems": "Whether or not this configuration allows the weapon picker to only choose slotted weapons",
    "FortPlayerInputSettings:bRadialClosesOnRelease": "Whether or not this configuration expects the button to remain held during radial picker use",
    "FortPlayerInputSettings:bTrapPickerUsesRadial": "Whether or not this configuration uses a radial for the trap picker",
    "ControlPointInstanceData:bPointFinished": "Whether or not this control point is done/dead",
    "ControlPointSpawnData:bAlwaysInPlay": "Whether or not this control point should always be in the game (doesn't destroy, re-enables, etc)",
    "SpecialEventAudioHapticsAction:bAffectsLeftLarge": "Whether or not this haptics action trigger the large motor on the left side of the controller",
    "SpecialEventAudioHapticsAction:bAffectsRightLarge": "Whether or not this haptics action trigger the large motor on the right side of the controller",
    "SpecialEventAudioHapticsAction:bAffectsLeftSmall": "Whether or not this haptics action trigger the small motor on the left side of the controller",
    "SpecialEventAudioHapticsAction:bAffectsRightSmall": "Whether or not this haptics action trigger the small motor on the right side of the controller",
    "FortLayeredAudioFloatParam:bEnabled": "Whether or not this parameter is currently in-use. Calls to SetFloatParameterExt will early out if false.",
    "FortAthenaMutator_PerkSystemMutator:bDelayedPerkSelection": "Whether or not this perk system should display unlocked perks instantly or wait until the player enters their inventory after a perk has been granted by gameplay",
    "HeroAbilityKit:bShowInAbilityScreen": "Whether or not this should show up on the hero abilities screen",
    "HeroItem:bShowInAbilityScreen": "Whether or not this should show up on the hero abilities screen",
    "SkyfireSquadMemberStatusData:bIsOnMothership": "Whether or not this squad member is on the Mothership",
    "BuildingTrapFloor_Turret:bCanTakeDamage": "Whether or not this turrent can take damage",
    "FortVolume:bAddToFortVolumeGrid": "Whether or not this volume should be added to the replication graph FortVolumeGrid.",
    "FortVolume:bShouldIgnoreTransientObjectLimits": "Whether or not this volume should ignore transient object class limits on objects created during gameplay that will not be saved.",
    "FortVolume:bShouldTrackObjects": "Whether or not this volume should track objects that enter it.",
    "RemoteViewRotSnapshotManager:bUseVariableTimeDelay": "Whether or not time delay should be variable based on the rate updates are received from the server.",
    "CreativeToolPersistentData:bAllowGravityOnPlace": "Whether or not to allow gravity on props when placing them. Gravity causes them to fall to the ground if they are placed in the air",
    "FortCreativeMoveTool:bAllowGravityOnPlace": "Whether or not to allow gravity on props when placing them. Gravity causes them to fall to the ground if they are placed in the air",
    "FortAthenaMutator_Cobalt:bRespawnEnabled": "Whether or not to allow respawning for the LTM",
    "GliderBitsDefinition:bApplyGliderMaterialOverrides": "Whether or not to apply material overrides from the base glider definition to this bit mesh",
    "FortCosmeticModification:bModifyColor": "Whether or not to apply the color modification defined by ColorAlteration",
    "FortCosmeticModification:bModifyDecalColour": "Whether or not to apply the colour modification defined by DecalColourAlterationStart and DecalColourAlterationEnd",
    "FortCosmeticModification:bModifyShellColour": "Whether or not to apply the colour modification defined by ShellColourAlteration",
    "FortAthenaAIBotRunTimeCustomizationData:bCheckForOverlaps": "Whether or not to check for overlapping objects before spawning a bot",
    "FortAnimNode_Flap:bUseClamp": "Whether or not to clamp the driver value and remap it before scaling it",
    "SourceDriver:bUseRange": "Whether or not to clamp the driver value and remap it before scaling it",
    "FortWorldManager:bConstructTileWorld": "Whether or not to construct a tile world",
    "BuildingProp_AISpawner:bCanAIDespawnWhenTooFar": "Whether or not to despawn based on distance at all",
    "BuildingProp_AISpawner:bUseDistanceToAI": "Whether or not to despawn based on distance to AI or distance to Spawner",
    "FortMinigame:bShowMapWidget": "Whether or not to display the fullscreen map",
    "FortMinigame:bShowCareerScoreboardMapWidget": "Whether or not to enable the career scoreboard widget within the fullscreen map",
    "FortMinigame:bShowScoreboardMapWidget": "Whether or not to enable the scoreboard widget within the fullscreen map",
    "FortVehicleAudioOneshotGate:FadeWhenOutsideGate": "Whether or not to fade the sound when the has decayed below/above the gate threshold",
    "FortGliderLayeredAudioOneshotGate:FadeWhenOutsideGate": "Whether or not to fade the sound when the has dropped outside of the gate threshold",
    "FortLayeredAudioOneshotGate:FadeWhenOutsideGate": "Whether or not to fade the sound when the has dropped outside of the gate threshold",
    "FortAnimNode_SlopeWarping:bUseFloorOffsetInterpolator": "Whether or not to interpolate the results for the distance to the floor during movement.",
    "FortAthenaMutator_MarkerUtilities:bMarkIndicatedPlayersOnCompass": "Whether or not to mark actors on the compass",
    "FortAthenaMutator_MarkerUtilities:bMarkIndicatedPlayersOnMap": "Whether or not to mark actors on the map",
    "FortAthenaMutator_MarkerUtilities:bOverlayTopScoringTeamIndicatorOnLocalPlayerOnMap": "Whether or not to overlay a Top Scoring Team indicator on top of the local\n     player indicator on map/minimap if they are on a top scoring team currently",
    "FortAthenaMutator_MarkerUtilities:bDisplayLocalPlayerAsTopScoringTeamsOnMap": "Whether or not to override the local player indicator on map/minimap with a\n     Top Scoring Team indicator if they are on a top scoring team currently",
    "FortAthenaMutator_ItemPromotion:bPromoteAllItemsOnRespawn": "Whether or not to promote a players items by one level when they respawn.",
    "ParticleVariant:bResetParameterOverridesOnSwap": "Whether or not to reset parameter overrides on a Niagara system component after applying this particle variant.\n\nIf this is false, then any user parameters that have the same name between the original Niagara system and the\noverride system will retain the values set in the original Niagara system. (In most cases this should be true).",
    "DaySequenceActor:bRunDayCycle": "Whether or not to run a day cycle. If this is unchecked the day cycle will remain fixed at the time specified by the Initial Time setting",
    "FortMinigame:bShowPreGameCountdownBars": "Whether or not to show the black bars across the screen during the pregame countdown",
    "FortAthenaMutator_MarkerUtilities:bDrawMarkedActorStencils": "Whether or not to stencil marked actors in world",
    "FortWorldManager:bStreamInBuildings": "Whether or not to stream in buildings. Useful for LD debugging.",
    "FortAthenaMutator_MarkerUtilities:bUseAthenaTeamScoreForRanking": "Whether or not to use the athena scoring data to determine team placements or rely on custom placement data.",
    "FortPOIInjector:bWaitForCanRecordPlayerVisits": "Whether or not to wait for CanRecordPlayerVisits() to return true before injecting POIs",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:bIsInCountdown": "Whether or not we are currently in the countdown for the end of the game (for time based games)",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:bIsInFinalCountdown": "Whether or not we are currently in the final countdown (for time based games)",
    "FortPlayerControllerGameplay:bIsFlightSprinting": "Whether or not we are flight sprinting.",
    "FortAthenaMutator_OnDmgDamageSelf:bRequiresNonZeroDamage": "Whether or not we have to have actually inflicted damage in order to damage ourselves",
    "AimingCircleSettings:UseAimingCircle": "Whether or not we should be using the aiming circle",
    "DigestedAimingCircleSettings:bUseAimingCircle": "Whether or not we should be using the aiming circle",
    "FortWorldManager:bUseFixedSeed": "Whether or not we should use a fixed seed instead of a random one",
    "FortCreativeMoveTool:bAlwaysMoveFreely": "Whether or not we want to force the Move Freely movement mode.",
    "DagwoodRuntimeModifiers:bDamageAllowedFromOtherVehicle": "Whether other vehicles colliding will cause damage to this vehicle.",
    "RockRuntimeConfigOverrides:bDamageAllowedFromOtherVehicle": "Whether other vehicles colliding will cause damage to this vehicle.",
    "FortAthenaMutator_SafeZoneOrderOptimize:bPaused": "Whether our processing is paused.  If true, we will not Tick, nor call ProcessData().\nReplicated for debug purposes only.",
    "FortControllerComponent_RealitySapling:bPersistentRealitySaplingsEnabled": "Whether persistent reality saplings are enabled.",
    "FortGameStateComponent_RealitySapling:bPersistentRealitySaplingsEnabled": "Whether persistent reality saplings are enabled.",
    "FortMovingPlatformComponent:AttachPickupsToPlatform": "Whether pickups that land on this platform should attach to and move with it",
    "FortFocusedBuildingInfo:bIsPreviewTrapAttached": "Whether player has preview trap attached to the focused building.",
    "TornadoConfigEntry:bAllowPickupPlayers": "Whether players are allowed to be picked up by the tornado",
    "FortGameModeZone:bAllowSpectateAfterDeath": "Whether players should be able to spectate other players after they are eliminated",
    "FortVisibilityManagerComponent:bPlayersAlwaysVisible": "Whether players should be visible amongst each other",
    "FortGameStateZone:bGlobalCeaseFire": "Whether players should have their weapon bar disabled and force pickaxes out",
    "FortGameModeAthena:bPlaylistHotfixChangedGCDisabling": "Whether playlist hotfix changed the disabling of GC",
    "FortPawn:bPrimaryInputHeld": "Whether primary and secondary input buttons are currently held",
    "FortMcpQuestObjectiveInfo:bCanProgressInZone": "Whether progress on this objective can be made while the player is in the zone",
    "ValkyrieEditorPermissionSettings_Project:bProjectExternalContentAllowed": "Whether project external content referencing is allowed",
    "TornadoConfigEntry:bAllowPickupProjectiles": "Whether projectiles are allowed to be picked up by the tornado",
    "ValkyrieEditorPermissionSettings_Project:bPublishingEnabled": "Whether publishing is enabled",
    "FortCreativeMoveTool:bIsQuickbarSupported": "Whether quickbar is currently supported by this move tool",
    "ActorTemplateRecord:bUsingRecordDataReferenceTable": "Whether reference tables are used to externalize references serialized into ActorData and ActorComponents ComponentData",
    "BuildingActor:bSavedMetaPropertiesProcessed": "Whether saved meta-properties have been processed or not yet; Used as a lock that prevents the meta-properties from being updated until ready",
    "RuntimeOptionSpectateAPartyMemberOverride:bEnabled": "Whether spectate a party member should be enabled",
    "TornadoConfigEntry:bAffectStaticObjects": "Whether static objects will be affected by the tornado (mainly damage)",
    "ValkyrieAllowedAssetType:Subclasses": "Whether subclasses should also be affected by the rule, or only one specific class",
    "ValkyrieAllowedClass:Subclasses": "Whether subclasses should also be affected by the rule, or only one specific class",
    "FortAthenaMutator_LootChoice:bUsingExperimentalTables": "Whether the \"experimental\" tables should be used",
    "FortAFKComponent:bIsAFKWarningActive": "Whether the AFK warning is active, drives the warning appearance in the client via EventMessages",
    "FortAIPawn:bIgnoreDefender": "Whether the AI doesn't need to be a defender to get the attribute sets",
    "PendingSpawnInfo:bIgnoreCollision": "Whether the AI should ignore collision when spawning",
    "ValkyrieEditorPermissionSettings_Animation:bEnableAnimationBlueprintEventGraphs": "Whether the Animation Blueprint event graphs are visible",
    "ValkyrieEditorPermissionSettings_Blueprints:bEnableBlueprintGraph": "Whether the Blueprint graph, and all associated data (variables, functions) are visible",
    "FortPlayerControllerAthena:bHasSentMatchEndedQuestProgress": "Whether the GameMode has already called SendMatchHasEndedQuestProgress() - required because some games will allow players to win and leave prior to the entire game ending",
    "FortNPCConversationParticipantComponent:bCanConverseWhenConverted": "Whether the NPC can still converse if converted",
    "ValkyrieEditorPermissionSettings_Editor:bEnablePropertyMatrix": "Whether the Property Matrix is enabled",
    "ActorOwnedStateTreeConfig:bShouldReplicate": "Whether the StateTree should replicate to the client in a situation where it's authoritative on the server",
    "GasDebugAbilitySnapshot:bIsActive": "Whether the ability is active",
    "GasDebugAbilitySnapshot:bIsReplicated": "Whether the ability is replicated (if active)",
    "BuildingActor:bHasRegisteredActorStateAtLeastOnce": "Whether the actor has registered actor state with the world manager at least once this session; Used as an optimization to avoid a slow, iterative search",
    "SpecialActorRepData:bActorIsRelevant": "Whether the actor is relevant right now",
    "BuildingActor:bRefreshFullSaveDataBeforeZoneSave": "Whether the actor should refresh its full save data right before a zone save or not. If enabled, actor will serialize to its actor record before a zone is saved",
    "SpecialActorRepData:bWasActorRelevantLastUpdate": "Whether the actor was relevant the previous time we updated",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:bAircraftIsLocked": "Whether the aircraft phase is locked",
    "ValkyrieAllowedClass:Visible": "Whether the allowed class should be visible in class pickers (UClass properties, Blueprint parent class, etc)",
    "ActiveGameplayModifierArray:bSupportRuntimeModifierShutdown": "Whether the array supports run-time modifier shutdown; Essentially whether or not modifier GE/ability applications can be removed at run-time",
    "BuildingGameplayActorAbilityDeliveryBucket:bEnabled": "Whether the bucket is enabled or not",
    "BuildingGameplayActorAbilityDeliveryBucket:bEnabledByDefault": "Whether the bucket is naturally enabled by default when the owning actor spawns or not",
    "FortPlayerController:bBuildPreviewMirrored": "Whether the build preview is mirrored or not",
    "BuildingSMActor:bAllowBuildingCheat": "Whether the building cheat should apply to this actor or not",
    "BuildingOptionData:ClassMirrored": "Whether the building class should be mirrored",
    "BuildingSMActor:bUnderConstruction": "Whether the building has its health increasing or not; Replicated instead of the actual increasing health value to minimize bandwidth use",
    "BuildingActor:bDirtyForLevelRecordSave": "Whether the building is dirty for level record save purposes or not. If it is, will be re-serialized at save time",
    "FortLiquidGunProjectile:bCapsuleTraceComplex": "Whether the capsule trace should be complex",
    "FortRespawnData:bClientIsReady": "Whether the client is ready for the respawn to happen (level loaded and such?)",
    "DeployableBasePlot:bCloudFileSavedSinceLastCloudItemUpdate": "Whether the cloud save file for the plot has been saved again since the last time the user's cloud save item has been updated on the backend",
    "FortAthenaMutator_Wax:PodiumIcons_TeamBased": "Whether the coin-leader icons are the top coin-haver in each team.\n#1 becomes the player with the most coins on the top team.\n#2 becomes the player with the most coins in the second team.\n\nELSE, if disabled, #1, #2, and #3 are the players with the most individual coin counts",
    "ActiveTieredCollectionLayout:bLocked": "Whether the collection layout is locked or not",
    "BagelAreaSpecialActorData:bShouldDrawCompassIcon": "Whether the compass icon should be draw by default for this objective",
    "BagelScoreMultiplierSpawnData:bShouldDrawCompassIcon": "Whether the compass icon should be draw by default for this objective",
    "MashAreaSpecialActorData:bShouldDrawCompassIcon": "Whether the compass icon should be draw by default for this objective",
    "MashScoreMultiplierSpawnData:bShouldDrawCompassIcon": "Whether the compass icon should be draw by default for this objective",
    "BuildingRift:bShouldDrawCompassIcon": "Whether the compass icon should be draw by default for this rift",
    "FortAthenaMutator_MatchCondition:bSatisfied": "Whether the condition for this class has been satisfied",
    "ValkyrieEditorPermissionSettings_Editor:bShowConsole": "Whether the console should be shown in shipping builds",
    "FortAthenaMutator_Heist:bCurrExitCraftDeparted": "Whether the current ExitCraft has already departed",
    "FortGameModeAthena:PlaylistSupportsStormCapSystem": "Whether the current playlist allows the \"storm cap\" system (this setting is a hotfixable value that playlists can override in their data tables)",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:PlaylistSupportsStormCapSystem": "Whether the current playlist allows the \"storm cap\" system (this setting is a hotfixable value that playlists can override in their data tables)",
    "FortGrindRailConnector:bConstructedFromDragging": "Whether the currently running construction script is called when still dragging in editor",
    "FortRespawnData:bRespawnDataAvailable": "Whether the data contained within this structure is ready for use on a respawn for this player",
    "FortCachedMatchmakingSearchParams:bValid": "Whether the data structure is valid or not",
    "SpecialActorRepData:bDrawCompassIcon": "Whether the default compass code should draw the CompassIconBrush (useful when a mutator wants control of an icon and not have the default code draw it)",
    "SpecialActorRepData:bDrawCompassDistanceText": "Whether the default compass code should draw the distance to the player",
    "FortDeployableBaseManager:bBusyWithPlotActions": "Whether the deployable base manager is busy with plot actions",
    "DeployableBasePlot:bDirty": "Whether the deployable base plot is dirty or not in regards to saving",
    "FortDialogDescription_NUI:bShouldWaitForLatentActionOnConfirmAction": "Whether the dialog should wait for an external latent action if the dialog is in a confirmation state before dismissing",
    "FortAIEncounterQueryDirectionTracker:bHasTriedPreviousDirections": "Whether the directions chosen by the previous round of querying have been tried for this round.",
    "EditModeState:bMirrored": "Whether the edit represents a mirrored pattern (regardless of whether the owning actor is mirrored or not)",
    "CurieElementDefinitionBase:bIsEnabled": "Whether the element is enabled for usage in game or not",
    "FortEncounterProfile:bShouldReselectOptionsPerInstance": "Whether the encounter will force a reselect of difficulty options each time it starts or have the same options every time.\nNOTE - Options will always be reselected if game difficulty changes or if categories are injected from the tiered waves system",
    "FortEncounterSettings:bDestroyAllBuildings": "Whether the encounter's rifts and spawns should destroy all buildings. Note: at time of writing AI spawns will only ever attempt to destroy player built buildings",
    "FortEncounterSettings:bDestroyPlayerBuildings": "Whether the encounter's rifts and spawns should destroy all player built buildings. Note: Setting bDestroyAllBuildings takes precedence over this setting.",
    "FortEncounterSettings:bValidateIfPlayerIsAtSpawnLocation": "Whether the encounter's rifts should validate if a player is in the location (and prevent the rift from spawning)",
    "FortCurieGlowFadeRequest:bIsFadeIn": "Whether the fade is fading in (true) or out (false)",
    "PhysicsConstantForceData:bVelocityChange": "Whether the force directly modifies velocity (if false, mass affects acceleration)",
    "PhysicsConstantForceData:bForceIsRelative": "Whether the force is relative to the owner's transform",
    "PhysicsMagneticForceData:bShouldAffectOwner": "Whether the force should also affect the owner",
    "PhysicsConstantForceData:bUseLegacyDeltaSecondsBehavior": "Whether the force uses the old way of applying delta seconds to the amount of force per tick.",
    "PhysicsConstantForceData:bAtLocation": "Whether the forces is applied at a location",
    "PhysicsMagneticForceData:bAtLocation": "Whether the forces is applied at a location",
    "BuildingFoundation:DynamicFoundationType": "Whether the foundation will always remain in the same place/state or whether it can be dynamically moved or enabled",
    "ValkyrieEditorPermissionSettings_Project:bRemapLocalContentToReferencedContentAllowed": "Whether the functionality to remap references on local content to Referenced Content is exposed",
    "FortGameModeAthena:PlaylistEnableBotSpectate": "Whether the game allows bot to be spectated. Can be overriden by playlist",
    "FortGameModeAthena:PlaylistEnableBotDynamicELO": "Whether the game allows bot to dynamically changes their ELO through a game. Can be overriden by playlist",
    "FortGameModeAthena:PlaylistEnableBots": "Whether the game has bots enable or not. Can be overridden by playlist",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:bGameModeWillSkipAircraft": "Whether the game mode will skip the aircraft phase",
    "FortAthenaMutator_GG:GameIsReverse": "Whether the game progresses normally when the IsReverseRowName is None",
    "FortGameStateZone:bAllowedToOverrideBackendRewards": "Whether the game state is allowed to ask the backend to override its reward tier groups and loot level or not\n\n@CAUTION: This should only be flipped to true under known and controlled circumstances. This allows for potential exploiting if not\nused properly.",
    "FortGameStateZone:bAllowedToUpdateBackendDifficulty": "Whether the game state is allowed to ask the backend to update its difficulty info or not\n\n@CAUTION: This should only be flipped to true under known and controlled circumstances. This allows for potential exploiting if not\nused properly.",
    "SpecialActorRepData:bDrawRotated": "Whether the icon should be drawn rotated",
    "FortCurieActiveElectricityArc:bPlayedImpact": "Whether the impact effect has already been played for the arc",
    "FortAthenaMutator_CenterSafezonesOnPOIs:InitialSafezoneForcedToMapCenter": "Whether the initial safe zone should be forced to the map center\n\nFor instance, Arsenal should NOT center its initial safezone on the map.",
    "PlaylistStreamedLevelData:bIsFinishedStreaming": "Whether the level has finished streaming in or not",
    "FortAthenaMutator_ScoutDrone:bIsControllingDrone": "Whether the local player has deployed the drone so far",
    "PhysicsConstantForceData:bLocationIsRelative": "Whether the location is relative to the owner's transform",
    "PhysicsMagneticForceData:bLocationIsRelative": "Whether the location is relative to the owner's transform",
    "SpecialActorRepData:bDrawUnderStorm": "Whether the map icon should be drawn over or under the storm.",
    "FortAthenaMutator_Wax:MapLeaderboard_TeamBased": "Whether the map leaderboard will use the team leaders in order or not.\nIf disabled, individual podium players are used instead.",
    "Playspace:bMatchHasEnded": "Whether the match has ended",
    "PlayspaceLogic:bMatchHasEnded": "Whether the match has ended",
    "FortCurieMaterialDefinition:bShouldIgniteLandscapeGrass": "Whether the material should ignite any landscape grass around it",
    "FortCurieMaterialDefinition:bTrackGridFireStatus": "Whether the material should keep track of if it is in a burning grid cell or not",
    "FortAthenaMutator_Uranium:bAlignMovingRespawnToCart": "Whether the moving respawn aligns with the cart's orientation or with the checkpoint spline's start-end vector",
    "FortAthenaMutator_Wax:AboutToWinPopup_TeamBased": "Whether the nearing win coin display will use the team leaders in order or not.\nIf disabled, individual podium players are used instead.",
    "FortPlayerControllerAthena:bNextRespawnInAir": "Whether the next respawn is expected to be in air",
    "FortObjectiveBase:ObjectiveStatus": "Whether the objective is over or not; Set via game info",
    "FortAthenaMutator_Barrier:ObjectivesSpawnSameHeight": "Whether the objectives should be spawned in at the same height",
    "FortGeneratedEncounterOption:bChangedSinceLastVLog": "Whether the option for this category has changed since the last time it was VLogged",
    "TempestStateMachineComponent:bDestroyOnCompletion": "Whether the owner of this component should be automatically destroyed after dissipation",
    "SkyTubeAsyncInPersistent:bInSkyTube": "Whether the owning actor is currently in a skytube. (auto-marshaled)",
    "FortAFKComponent:bIsConfirmedAFK": "Whether the owning player is officially confirmed AFK (They spent TimeUntilConfirmedAFK seconds being AFK so they are permanently marked as AFK)",
    "LatentRepPlayerData:bPawnIsRelevant": "Whether the pawn is relevant right now",
    "AthenaCarPlayerSlot:bOverrideVehicleExit": "Whether the pawn should ignore normal vehicle exit protocol. Use when needing to teleport out of a vehicle",
    "LatentRepPlayerData:bWasPawnRelevantLastUpdate": "Whether the pawn was relevant the previous time we updated",
    "FortPlayerController:bPickerOpen": "Whether the picker is open",
    "FortPickup:bSplitOnPickup": "Whether the pickup should split into separate pickups while acting as a multi-item pickup upon being picked up or not; Basically should it blow up into component parts visually or not",
    "FortPickupEffect:bOwnedByALocalPlayer": "Whether the pickup that spawned this effect is owned by a local player or not",
    "FortPickupEffect:bOwnedByPlayer": "Whether the pickup that spawned this effect is owned by a player or not",
    "FortItemViewSettings:UsesPlacementActor": "Whether the placement actor (\"pad\") should be visible.",
    "FortPlayerDeathReport:bDroppedBackpack": "Whether the player dropped their backpack upon death or not",
    "FortPlayerController:bHoldingSprint": "Whether the player is currently attempting to sprint",
    "FortPlayerController:bWantsToSprint": "Whether the player is currently attempting to sprint",
    "FortPlayerDeathReport:bNotifyUI": "Whether the player shows the you died UI",
    "HeistExitCraftIconData:bTeamHasBling": "Whether the player's team has a bling or not",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:bPlaylistStoppedSafeZonePhases": "Whether the playlist has stopped the progression of safezones (for things like TimedTeamFinalFight win condition)",
    "PlaylistAccess:bIsDefaultPlaylist": "Whether the playlist should be displayed as a default playlist",
    "PlaylistFrontEndData:bDisplayAsDefault": "Whether the playlist should be displayed as a default playlist",
    "PlaylistAccess:bEnabled": "Whether the playlist should be enabled or disabled",
    "PlaylistAccess:bInvisibleWhenEnabled": "Whether the playlist should be hidden whilst enabled.",
    "PlaylistAccess:bDisplayAsLimitedTime": "Whether the playlist should display itself as \"limited time\"",
    "PlaylistFrontEndData:bDisplayAsLimitedTime": "Whether the playlist should display itself as \"limited time\"",
    "PlaylistAccess:bVisibleWhenDisabled": "Whether the playlist should still be displayed (as disabled) if bEnabled is false",
    "DeployableBasePlot:bDirtiedSinceLastWriteToBuffer": "Whether the plot has been dirtied since the last time it wrote its contents to a buffer",
    "ValkyriePluginReferenceDescriptor:bIsRoot": "Whether the plugin is the root one in the project",
    "FortProjectileMovementComponent:bUseSurfaceMaterial": "Whether the projectile should take into account the impacted surface's friction and restitution",
    "FortQuestMapNode:UseHighContrastMode": "Whether the quest node should use high contrast for its name text",
    "ValkyrieProjectReferenceDescriptor:bEnabled": "Whether the referenced content should be enabled (downloaded/loaded/mounted) when opening the project",
    "FortUserCloudRequest:bStartedProcessing": "Whether the request has started processing or not",
    "FortUserCloudRequest:bNeedsFileEnumeration": "Whether the request requires a file enumeration before starting in earnest",
    "FortRespawnData:bServerIsReady": "Whether the server is ready for the respawn to happen (respawn timer perhaps?)",
    "FortGameMode:bCheckWeaponTracesForPlayerBuiltWalls": "Whether the server should perform checks to confirm that client-reported shots hit players without passing through a wall first.\n          See AFortWeapon::CheckWeaponTraceForPlayerBuiltWall() for a lot more info about this.",
    "FortCharacterVehicle_Ostrich:bAutomaticallyFiringShotgun": "Whether the shotgun weapon is being fired",
    "BuildingProp_DeimosSpawner:bInvulnerable": "Whether the spawner will be damageable or not.",
    "BuildingProp_DeimosSpawner:bVisible": "Whether the spawner will be visible in game or not.",
    "BuildingProp_CreaturePlacer:bHideVFX": "Whether the spawner will hide VFX or not.",
    "BuildingProp_DeimosSpawner:bHideVFX": "Whether the spawner will hide VFX or not.",
    "FortAIPawn:bNotifySpawnRift": "Whether the spawning rift should be notified to play effects when this pawn spawns",
    "AthenaSpecialActorComponent:bDrawMapIconUnderStorm": "Whether the special actor map icon should be drawn over or under the storm.",
    "FortPlayerController:bSprintToggleable": "Whether the sprint is handled as a toggle or a hold",
    "CurieEntityStateDefinitionBase:bIsEnabled": "Whether the state is enabled for gameplay usage or not",
    "BuildingTrapFloor_Turret:bCurrentlyActive": "Whether the turret is currently active or not",
    "BuildingTrapFloor_Turret:bInSlowdownMode": "Whether the turret is slowing down its rotational speed or not",
    "BuildingTurretComponent:bPerformPeriodicValidationOnCurrentTarget": "Whether the turret should perform periodic target validation checks or not",
    "NativeCurieFXTypeSettings:bNeedsGlow": "Whether the type needs a glow or not",
    "NativeCurieFXTypeSettings:bNeedsAmbientAudio": "Whether the type needs ambient audio or not",
    "NativeCurieFXTypeSettings:bNeedsSignificanceTracking": "Whether the type needs significance tracking or not to accomplish its effects",
    "FortItemViewSettings:SupportsZooming": "Whether the user can zoom in/out.",
    "ValkyrieEditorPermissionSettings_Project:bProjectKindExposed": "Whether the user has access to various kinds of project as opposed to only Experience projects",
    "ValkyrieEditorPermissionSettings_Project:bMultiPluginProjectAllowed": "Whether the user is allowed to make a project with multiple plugins",
    "ValkyrieEditorPermissionSettings_Project:bAddProjectExternalContentAllowed": "Whether the user is allowed to manually add external content to a project",
    "HeistExitCraftData:bHasDeparted": "Whether the van has departed",
    "FortAthenaVehicle:bHasDriver": "Whether the vehicle has a driver",
    "FortItemViewSettings:UsesFixedCamera": "Whether the view when fully zoomed out should be the raw view of the camera without any dynamic framing logic.",
    "FortMantisRootMotionWarpInfo:bAllowRotationWarp": "Whether the warp request should allow rotation warping or not",
    "FortMantisRootMotionWarpInfo:bAllowTranslationWarp": "Whether the warp request should allow translation warping or not",
    "FortDeployableBaseManager:bWorldInitialized": "Whether the world has been initialized or not",
    "FortLobbyBeaconHost:bWorldRecordLoaded": "Whether the world record has been loaded or not",
    "FortAIPawn:bHasInventory": "Whether this AI has an inventory.",
    "FortAIPawn:bHasDroppedLoot": "Whether this AI has dropped loot yet. Used to ensure dropping loot is only done once.",
    "FortAIPawn:bEncounterExpectedLifespanExpired": "Whether this AI has lasted longer than its expected encounter lifespan",
    "FortAIPawn:bHasEngaged": "Whether this AI has reached the area of engagement for the encounter",
    "FortAIPawn:bTrackNearbyPickups": "Whether this AI keeps track of nearby Pickups.",
    "FortAIPawn:bIsAlwaysGameplayRelevant": "Whether this AI should be considered for gameplay relevancy (non-relevant AIs are despawned, so setting this to false will keep the AIs from being despawned).",
    "FortAIPawn:bTurnOffOnMatchEnd": "Whether this AI should be turned off on match end",
    "FortAIPawn:bUseFastPreReplicationStep": "Whether this AI should keep the fast pre replication path",
    "FortAIPawn:bUseFastAbilityReplication": "Whether this AI should use the fast replication path",
    "FortAIPawn:bShowCustomCSVRelevantKey": "Whether this AI should write its own csv key for relevancy instead of the accumulated aipawns one.",
    "FortAIPawn:bShouldTossInventoryOnDeath": "Whether this AI tosses its inventory on the ground on death.",
    "FortAIPawn:bUsesDBNO": "Whether this AI uses DBNO instead of death",
    "FortAIPawn:DBNOInteractionType": "Whether this AI uses interactions while in DBNO.  (Use LongPress along with DBNOInteractionDuration.)",
    "FortAIPawn:bIsDebugSpawnedAI": "Whether this AI was spawned through cheats for debug purposes",
    "FortAIPawn:bUseAIGoalComponent": "Whether this AI's controller should use an AI goal component which provides goal selection.\nCreates a component of class AIGoalComponentClass which should be set if this is true",
    "Playspace:bIsInitialized": "Whether this Playspace has been initialized",
    "FortPlayspace:bSubscribeToMeshNetwork": "Whether this Playspace wants to subscribe to mesh network events",
    "CustomCosmeticModifierBase:bUsesTargetingOrFirstPersonCameraChange": "Whether this actor consumes the begin/end targeting/first person camera blueprint event",
    "CustomCosmeticModifierBase:bUsesDayPhaseChange": "Whether this actor consumes the day phase change blueprint event",
    "CustomCosmeticModifierBase:bUsesWeaponChange": "Whether this actor consumes the day phase change blueprint event",
    "BuildingActor:bWorldReadyCalled": "Whether this actor has had WorldReady called on it yet",
    "FortLevelScriptActor:bWorldReadyCalled": "Whether this actor has had WorldReady called on it yet",
    "FortMusicManager:bWorldReadyCalled": "Whether this actor has had WorldReady called on it yet",
    "FortPrefabSpawner:bWorldReadyCalled": "Whether this actor has had WorldReady called on it yet",
    "BuildingSMActorClassData:bCanSpawnAtLowerQuotaLevels": "Whether this actor is allowed to spawn at a lower quota level than its maximum bound or not",
    "BuildingActor:bUseTickManager": "Whether this actor will be ticked via the TickManager, which could tick it less frequently if building ticks take too long.",
    "FortAIAppearanceOverrideEntry:AppearanceName": "Whether this appearance is a female or male.",
    "FortAIAppearanceOverrideEntry:bIsFemale": "Whether this appearance is a female or male.",
    "BuildingSMActorClassData:bAllowResourceDrop": "Whether this building is allowed to drop resources for the player when it is destroyed",
    "BuildingActor:bUseFortHealthBarIndicator": "Whether this building uses the alternate health bar indicator similar to pawns instead of a normal health bar",
    "FabricButtonBase:bHasToggle": "Whether this button has a toggle.",
    "FabricButtonComponentBase:bHasToggle": "Whether this button has a toggle.",
    "EDeviceCableLoadableState": "Whether this cable can be loaded as part of ::LoadPortConnection",
    "AthenaCapturePoint:bPermanentShutdown": "Whether this capture point has been permanently shutdown",
    "FortCosmeticLockerSlotInformation:bHasDynamicSlotCount": "Whether this category can support a dynamic amount of slots",
    "FortSurfaceTrackingComponent:bDebug": "Whether this component should display debug information",
    "FortPlayspaceComponent:bSubscribeToMeshNetwork": "Whether this component wants to subscribe to mesh network events",
    "ControlPointInstanceData:bIgnoreForOrderMessaging": "Whether this control point counts against determining first/last when displaying messages",
    "ControlPointSpawnData:bIgnoreForOrderMessaging": "Whether this control point counts against determining first/last when displaying messages",
    "OstrichWeapon_RetainedData:bHasPrevious": "Whether this data is valid",
    "VehicleWeapon_RetainedData:bHasPrevious": "Whether this data is valid",
    "HeistExitCraftData:bIsUsed": "Whether this data was used",
    "DestroyActorsAndComponentsMutator_ActorDefinition:bStartEnabled": "Whether this definition should be enabled from the start of time",
    "FortQuestDelete:bSendAnalytics": "Whether this deletion should fire off analytic events",
    "EncounterEnvironmentQueryInfo:bIsDirectional": "Whether this encounter query will be directional.",
    "CenterOnLocationPOI:RelativeToPreviousChosenLocation": "Whether this entry is applied as an offset relative to the last chosen location.\nIn example, if the last chosen location is Dusty, you're offsetting relative to that POIs location.\n\nUseful when you want to \"walk\" the storm but don't care where it starts.",
    "GGCenterDisplayEntry:bIsEnabled": "Whether this entry is enabled - disabled entries are outside of the range of the weapon awards.",
    "CenterSafeZoneOnPOIInfo:Enabled": "Whether this entry is enabled or not.",
    "FortInGameLeaderboardPlacementData:bRepresentsLocalPlayer": "Whether this entry represents the local player.",
    "GGCenterDisplayEntry:bShowHarvestingTool": "Whether this entry should display the Harvesting Tool",
    "FortPartyRepData:AllowJoinInProgress": "Whether this game can be joined in progress",
    "FortPartyRepData:PartyIsJoinedInProgress": "Whether this game can be joined in progress",
    "GunGameGunEntry:Enabled": "Whether this gun is enabled, hotfixable",
    "HomebaseBannerColorData:bGrantByDefault": "Whether this icon should be granted to users by default or not",
    "HomebaseBannerIconData:bGrantByDefault": "Whether this icon should be granted to users by default or not",
    "BuildingActor:bIsPlayerBuildable": "Whether this is a player buildable actor or not",
    "FortGameFeatureKeyboardMouseKeybindInfo:bIsAxisMapping": "Whether this is is an axis mapping",
    "BuildingRealitySapling:bIsPerfCulledSapling": "Whether this is the \"perf culled\" version of the reality sapling - the BP that is spawned if the normal sapling fails to spawn",
    "FortAthenaMutator_TDM:bIsTwoTeamTDM": "Whether this is the 2 team variety of TDM or many teams",
    "SafeZoneLocationParams:bIsEndingLocation": "Whether this is the final safe zone phase location. Used as additional information when determining whether to reject locations.",
    "WaxPlacementData:bIsPlayer": "Whether this is the player.",
    "FortPickupCreative:bPickupOnTouch": "Whether this item should be picked up when touched by a player. Overrides auto pickup behavior",
    "AvailableTierLayout:bLocked": "Whether this layout is locked or not",
    "PlaylistOptionLevelValue:bNewLevel": "Whether this level is new to the list",
    "VkLinkCodeInfo:IsActive": "Whether this link code version is the active one (the one returned when no version is explicitly specified)",
    "LocationPOIList:Enabled": "Whether this list is enabled or not.",
    "TaggedPOIList:Enabled": "Whether this list is enabled or not.",
    "TaggedPOI:Enabled": "Whether this list is enabled or not. Hotfixable.",
    "PlayspaceUserList:bIsInitialized": "Whether this list was initialized or not (purposely not replicated to we can handle it differently on the client)",
    "AthenaGameMessageData:bIsTeamBased": "Whether this message is team based",
    "FortAthenaMutator_TDM:bShouldGrantInventoryToNewPlayers": "Whether this mode should apply the inventory of the player with the highest elimations if a player joins while the game is running",
    "FortGameplayMutator:bNetworkDormantWhenDeactivated": "Whether this mutator actor should be networking dormant when not active",
    "FortAthenaMutator_SpecialEvent:DelayPlayersFromReturningToLobbyData": "Whether this mutator is currently delaying players from returning to lobby",
    "FortAthenaMutator_SpecialEvent:bPlayersAreInvincible": "Whether this mutator is currently making players invincible",
    "FortAthenaMutator_SpecialEvent:bDisableHUD": "Whether this mutator is currently making players pull out their pickaxes and not use weapons",
    "FortAthenaMutator:bMutatesGameMode": "Whether this mutator should hook into the game mode",
    "FortAthenaMutator:bMutatesGameState": "Whether this mutator should hook into the game state",
    "FortGameplayMutator:bAvailableInEditMode": "Whether this mutator will respond to being gathered by FortMinigame::GetMutatorsForContextActor while in edit mode. Previously,\nonly minigames that were in PlayMode or in progress would be added as Mutator Owners so this boolean default to false to match\nthat behaviour",
    "SquadQuickChatOptionData:bEnabled": "Whether this option should be displayed as enabled or disabled",
    "PrototypeCraftingOutput:bIsUnique": "Whether this output can only be crafted once.",
    "PrototypeCraftingOutput:bIsFailure": "Whether this output is considered a failure for the Fail Craft Event.",
    "BuildingSMActor:bSupportedDirectly": "Whether this piece is directly supported by the ground",
    "SkyfirePlayerPawnComponent:bInMothership": "Whether this player is in the skyfire mothership.",
    "WaxPlayerDataEntry:bPermanentlyWaxed": "Whether this player should always be a canidate for drawing on the UI",
    "WaxPlayerDataEntry:bPlayerWasLeader": "Whether this player was a leader the previous check",
    "PlaylistOverrideData:bEnabled": "Whether this playlist should be turned on (typically for turning on LTMs)",
    "GameHubPlayspace:bSimulatePlayerDamage": "Whether this playspace should put players in a state of simulating but not receiving damage",
    "FortChallengeBundleRewards:bBundlePrestige": "Whether this quest should increase the prestige level of the bundle",
    "FortCuriePendingElectricityArcRequest:bIsFirstIteration": "Whether this request represents the first arc iteration for a specific component or not",
    "BuildingRift:bIsReadyToSpawnAI": "Whether this rift has finished setup and is ready to spawn AI.",
    "BuildingRift:bHasBadRiftSlots": "Whether this rift has slots that haven't been good for spawning (AIs despawning at them).",
    "BuildingRift:bRecalculateSpawnPointsPeriodically": "Whether this rift will recalculate spawn points periodically",
    "RotatorErrorCheck:bEnabled": "Whether this rotator error check is active",
    "OwnedRealitySaplingData:bEnemyAttacking": "Whether this sapling is being attacked by an enemy",
    "OwnedRealitySaplingData:bEnemyLooting": "Whether this sapling is being looted by an enemy",
    "OwnedRealitySaplingData:bInGhostState": "Whether this sapling is in ghost state",
    "OwnedRealitySaplingData:bNeedsWeeding": "Whether this sapling needs weeding",
    "FortOptionsMenuData:bDisplayOption": "Whether this setting type should be displayed",
    "LiquidRibbonSplineSegment:bHasDetachment": "Whether this spline segment has a detachment",
    "VehicleSpringInfo:bIsLookAhead": "Whether this spring is a special lookahead spring",
    "VehicleSpringInfo:bNormalToGroundTriangle": "Whether this spring length/rotation should project onto a ground triangle",
    "SkyfireSquadDataEntry:bHasTeleportedToLootRoom": "Whether this squad has teleported to the loot room.",
    "AshtonStoneState:bHasEverSpawned": "Whether this stone has ever spawned before",
    "FortAbilityTargetSelection:TargetSelectionUsage": "Whether this target selection is exclusively for CanHit tests or not (used for ballistic projectile tests vs. projectile exploding, for example).",
    "FortVehicleFuelComponent:UsesFuelSystem": "Whether this vehicle uses the fuel system. (Setting it to false will cause the vehicles to not use the new system, but will not opt them into any other fuel system.)",
    "VoteSettings:bLocksSelection": "Whether this vote locks a player's first selection when it is made",
    "VoteSessionSettings:NetworkType": "Whether this voting session is to use and aggregate a mesh network",
    "FortGameplayEffectContext:bIsDiceCritical": "Whether this was a dice crit",
    "OnFortScoutDroneMarkedEnemies:Source": "Whether this was caused by a radial mark or a passive mark",
    "FortPIEMissionOverrideData:bIsTestTheater": "Whether to act as a test theater for PIE, only used if MissionGenerator is specified",
    "BuildingGameplayActor:bApplyDefaultEnabledAbilityBucketsOnInit": "Whether to actually apply ability delivery buckets marked \"enabled by default\" during initialization of the actor or not; Useful\nfor actors that want to manage their own \"active\" states",
    "FortAthenaAddGameplayTagsStateTreeTask:bReplicateChange": "Whether to add only on the server or replicate the change on the client as well.",
    "DigestedWeaponAccuracy:ChanceToAimAtTargetsFeet": "Whether to aim at the feet of the target instead of the center of body.",
    "FortWeaponRanged:bAllowAutomaticWeaponCatchup": "Whether to allow automatic weapons to catch up with shorter refire cycles",
    "FortLobbyBeaconHost:bAllowReservationsToProceedToLobby": "Whether to allow beacon reservations to advance to register/login to the lobby or not",
    "FortAthenaMutator_CreativePartyRiftIslandSettings:bAllowGuestPartyRiftsUserSetting": "Whether to allow or restrict party rifts from guest players",
    "BGAConsumableSpawner:bAllowQueryVisualization": "Whether to allow query visualization or not",
    "FortGameStateZone:bAllowBuildingThroughBlockingObjects": "Whether to allow the player to build through objects that would normally block placement",
    "FortGameStateComponent_AssignedObjective:bAllowUnopposedSquads": "Whether to allow unopposed (single squad) objectives or not.\n(eg if there are 5 squads with IdealNumSquadsPerObjective = 2, should it be 2, 2, 1 or 2,3)",
    "FortAISpawnGroupUpgradeUIData:bAlwaysDisplayHealthBar": "Whether to always show the AI health bar",
    "UtilityData:bApplyRecentSelectionPenalty": "Whether to apply a penalty after this utility gets selected",
    "BuildingSMActorClassData:bRandomScaleOnPlacement": "Whether to apply a random scale on editor placement",
    "BuildingSMActorClassData:bRandomYawOnPlacement": "Whether to apply a random yaw on editor placement",
    "PhysicsConstantForceData:bApplyDrag": "Whether to apply a v^2 based drag to the force",
    "VehicleSpringInfo:bForceAlongSpringGroundNormal": "Whether to apply force in the direction of the spring or the impact normal.\n              For flat wheelbases, we apply only in the direction of the spring.",
    "FortHeldObjectComponent:bApplyAngularImpulseOnThrow": "Whether to apply randomized angular impulse to held physics objects on throwing",
    "FortAIPawn:bAttemptLootDropOnDeath": "Whether to attempt to drop loot on death",
    "FortCurieCableSocket:bAutoSendSignalOnElementAttachment": "Whether to auto send an element signal when an element attaches to the curie component",
    "FortCurieCableSocket:bAutoSendSignalOnElementDetachment": "Whether to auto send an element signal when an element detaches from the curie component",
    "PlaysetSettings:bAutomaticBoundingBox": "Whether to automatically calculate the playset bounding box",
    "ValkyrieEditorConfig:bAutomaticallyCheckoutOnAssetModificationValkyrieOverride": "Whether to automatically checkout on asset modification. This is not exposed in the settings window and overrides the editor-wide setting in UEditorLoadingSavingSettings",
    "BuildingSMActorClassData:bHideOnDeath": "Whether to call SetActorHiddenInGame(true) on this actor upon death (normally should be true unless doing special death animations)",
    "FortEncounterPawnNumberCaps:bApplyPawnNumberCaps": "Whether to cap the number of pawns in this encounter",
    "FortDeployableBaseManager:bCaptureEnvironmentActorsForRestoration": "Whether to capture destroyed environment actors for restoration",
    "BuildingSMActor:bConsiderOverrideMaterialsOnAnimationCleanup": "Whether to consider override materials when reverting to default materials during CleanupAnimatingStaticMeshes",
    "FortEncounterSettings:bRelevantForTotalAICap": "Whether to count AI spawned for this encounter for the total AI cap maintained by the AI Director",
    "BuildingWall:bCreateDoorLink": "Whether to create a navigation link across door for AI - Turn off for doors that AI can't use",
    "FortLiquidGunProjectile:bDrawDebugCollision": "Whether to debug draw collision",
    "FortDelayRTMMData:bDelayRTTM": "Whether to delay the return to main menu",
    "FortGameUserSettings:bDisableMouseAcceleration": "Whether to disable Mac mouse accel",
    "FortAthenaMutator_StormAlteration:DisableStormAlterations": "Whether to disable storm alterations",
    "FortMcpQuestObjectiveInfo:bDisplayDynamicAnnouncementUpdate": "Whether to display an announcement widget when this objective updates",
    "FortAthenaMutator_Wax:DrawSecondGenTokensOnCompass": "Whether to draw loose tokens that have been relocated on the compass",
    "AthenaSpecialActorComponent:bDrawRotated": "Whether to draw rotated icon",
    "FortAthenaMutator_MarkerUtilities:bDrawLocalPlayerTopScoringTeamOnCompass": "Whether to draw the local player's own team on the compass if they are one of the top scoring teams.\nIgnored if NumTopScoringTeamsToShowOnCompass <= 0.",
    "EnableEncounterPointProvidersStateTreeTaskInstanceData:bEnableProvider": "Whether to enable or disable (true=enable)",
    "FortPlayerController:bEnableShotLogging": "Whether to enable shot logging for accuracy testing",
    "GCSettingsOverride:bEnableGCOnServerDuringMatch": "Whether to enable/disable Garbage Collection for this playlist",
    "AthenaSpecialActorComponent:bUseCompassIcon": "Whether to generate a compass icon",
    "FortWorldSettings:bIsPlayset": "Whether to generate a creative playset from this level",
    "AthenaSpecialActorComponent:bDrawCompassDistanceText": "Whether to generate compass distance-to-player text",
    "CreativeDeveloperSettings:bGeneratePlaysetOnSave": "Whether to generate playset and prop item definitions when saving a playset level/blueprint",
    "PlaysetSettings:bGenerateProps": "Whether to generate playset props that can be browsed and placed individually",
    "BountyQuestSettings:bGrantProtectorQuests": "Whether to grant \"protector\" quests to the target's squad.",
    "FortAIPawn:bUseDefenderInventoryManagement": "Whether to have defender style single weapon restrictions, weapon auto equipping etc. TODO split this into better configuration or move the code out of FortAIPawn",
    "BuildingGridActorFilter:bIncludeCenterCell": "Whether to include center cell actors in the filter",
    "BuildingSMActor:bIncludeChildActorsForCullDistance": "Whether to include child actors when computing the cull distance in server and client",
    "BuildingGridActorFilter:bIncludeFloors": "Whether to include floors in the filter",
    "BuildingGridActorFilter:bIncludeWalls": "Whether to include walls in the filter",
    "FortPartyRepData:AthenaPrivateMatch": "Whether to join a private or public match",
    "BuildingFoundation:bFlipXAxis": "Whether to mirror the building along the X axis (negative X scale)",
    "BuildingFoundation:bFlipYAxis": "Whether to mirror the building along the Y axis (negative Y scale)",
    "IntensityContribution:bModifyContributionByCompletionPercentage": "Whether to modify the this contribution based on the completion percentage of the ecnounter",
    "ValkyrieEditorConfig:bOnlyShowUnseenNewsOnStartup": "Whether to only show unseen news on startup as opposed to always showing them",
    "FortAISpawnGroupUpgradeUIData:bOverrideHealthBarColor": "Whether to override the color of the health bar",
    "FortNativeCurieFXResponse:bShouldPlayAmbientAudio": "Whether to play C++-driven ambient audio for the native type",
    "FortNativeCurieFXResponse:bShouldPlayGeneralVFX": "Whether to play general C++-driven effects for the native type",
    "FortNativeCurieFXResponse:bShouldPlayGlow": "Whether to play the Curie glow for the native type",
    "BuildingSMActor:bPropagatesBounceEffects": "Whether to propagate bounce effects originating from this actor or not. Ignored if bPropagateBounce is false.",
    "BakedMetadataConfig:bIncludeMembersOfMembers": "Whether to reach into members and iterate their properties",
    "BuildingGameplayActorConsumable:bReplicateLongInteractionDetails": "Whether to replicate information about long use interaction. If true, ServerNotifyStartLongUse and ServerNotifyEndLongUse will be called.",
    "FortHeistDisplayCase:bReplicateLongInteractionDetails": "Whether to replicate information about long use interaction. If true, ServerNotifyStartLongUse and ServerNotifyEndLongUse will be called.",
    "SpecialActorRepData:bReplicateHealth": "Whether to replicate the health (if that makes sense)",
    "SpecialActorRepData:bReplicateShield": "Whether to replicate the shield (if that makes sense)",
    "FortProjectileCues:bOrientHitGCsToProjectileVelocity": "Whether to rotate HitCharacter, HitCharacterShield, and HitWorld GCs to projectile velocity instead of surface normal.",
    "FortCurieCableSocket:bAutoRouteToCurieComponentOnReceive": "Whether to route the received automatically to the curie component",
    "ImGuiDPIScaleInfo:ScalingMethod": "Whether to scale in ImGui or in Slate. Scaling in ImGui gives better looking results but Slate might be a better\noption when layouts do not account for different fonts and styles. When scaling in Slate, ImGui canvas size will\nbe adjusted to get the screen size that is the same as defined in the Canvas Size property.",
    "BuildingRift:bSendMissionEvents": "Whether to send mission event on spawn/destroy",
    "FortAthenaFocusAtStateTreeTaskInstanceData:bSetBackOnExit": "Whether to set the focus back on how it was before entering this task, on exit.",
    "BountyQuestSettings:bSetTargetForSquad": "Whether to set the given bounty target for the hunter's whole squad.",
    "FortInGameMapManagerCreative:bShowLocationNames": "Whether to show location names such as POI locations in BR\nUsually not needed in Creative",
    "ValkyrieEditorConfig:bShowOnlyLocalProjects": "Whether to show online+local projects, or only local projects, in the project browser",
    "ServerExpirationAlertData:ShowCountdown": "Whether to show second countdown for this event",
    "BuildingActorEditorSettings:bEnableWarnAboutMaterial0Override": "Whether to show the suppressible dialog for bWarnAboutMaterial0Override",
    "BuildingSMActorClassData:bSkipConstructionSounds": "Whether to skip playing construction sounds",
    "FortMantisRootMotionWarpInfo:bSnapshotTargetLocation": "Whether to snapshot the target warp location or not; If so, will track it exactly once up-front and then never update it again",
    "BuildingSMActorClassData:bPlayDestructionEffects": "Whether to spawn death particles and sounds when dying",
    "FortAthenaMutator_SpawningPolicyBase:bShouldCenterGroundCheckAtFoundLocation": "Whether to trace (using MinTraceHeight + MaxTraceHeight) for the ground centered around the location found instead of around 0 on Z",
    "FortSupplyDropMutatorData:bShouldCenterGroundCheckAtFoundLocation": "Whether to trace for the ground centered around the location found for the supply drop instead of around 0 on Z",
    "FortNativeCurieFXResponse:bShouldPlayFXAsAOE": "Whether to treat the general FX as for a special AoE-actor",
    "FortGameModePickup_Wax:bIsFirstGeneration": "Whether to try and spawn a new pickup when this one expires.",
    "WaxRespawnLogicData:TryPlaceAwayFromLeaders": "Whether to try to spawn away from leaders",
    "FortRespawnLogicData_Teams:TryPlaceByTeammates": "Whether to try to spawn behind teammates",
    "WaxRespawnLogicData:TryPlaceByTeammates": "Whether to try to spawn behind teammates",
    "FortGameModeAthena:bUseRandomTimeOfDay": "Whether to use a random time of day at the beginning of each match.  If disabled, the default time of day will be used (6am)",
    "DigestedWeaponAccuracy:ShouldUseProjectileArcForAiming": "Whether to use arc calculation to determine aiming angle (only used for weapons with arc projectiles) (based on range).",
    "WeaponAccuracy:ShouldUseProjectileArcForAiming": "Whether to use arc calculation to determine aiming angle (only used for weapons with arc projectiles) (based on range).",
    "ImGuiDPIScaleInfo:bScaleWithCurve": "Whether to use curve-based scaling. If enabled, Scale will be multiplied by a value read from the DPICurve.\nIf disabled, only the Scale property will be used.",
    "DeployableBaseSupportSettings:bUseDeployableBases": "Whether to use deployable bases or not",
    "FortGameUserSettings:bUseHeadphoneMode": "Whether to use headphone mode (HRTF) *",
    "FortAthenaMutator_Wax:UseSquadPlacementIconsOnCompass": "Whether to use squad placement icons in place of regular icons.",
    "FortAthenaMutator_Wax:UseSquadPlacementIconsOnMap": "Whether to use squad placement icons in place of regular icons.",
    "FortExposedAsset:bUseAutogeneratedAliases": "Whether to use the autogenerated aliases or not. If this is a public alias and autogenerated aliases are not used, there should be at least one CustomAlias defined.",
    "DaySequenceModifierComponent:bUseVolume": "Whether to use the bounding volume for enabling this modifier. If not enabled this modifier will always be active.",
    "FortPhysicsConstantForceComponent:bUseLegacyDeltaSecondsBehavior": "Whether to use the legacy way of applying delta seconds to the relevant forces.",
    "FortQuestMapPageCosmetics:bUseNodeArrowColorOverride": "Whether to use the node_arrow color override",
    "BuildingFoundation:bStreamingDataBasedBounds": "Whether to use the streaming data's bounds (i.e. if the streaming data is valid)",
    "FortAthenaMutator_SpecialEvent:bWaitForPlayerCountToTriggerBackfill": "Whether to wait until we reach the PlayerCountToTriggerBackfill to start backfill, rather than potentially enabling it as Players are first entering the match",
    "VariantParticleSystemInitializerData:bWeldSimulatedBodies": "Whether to weld simulated bodies together when attaching",
    "AttachToComponentParams:bWeldSimulatedBodies": "Whether to weld together simulated physics bodies.",
    "FortPawn:bPrioritizeEarlierTubes": "Whether tubes entered earlier or later should take priority when deciding which tube to use.",
    "TornadoConfigEntry:bAllowPickupVehicles": "Whether vehicles are allowed to be picked up by the tornado",
    "FortAthenaMutator_Ashton:VillainsDisplayStoneIcons": "Whether villains should be able to see map icons",
    "TrackMovement:bReverseDirectionAlongSpline": "Whether we are currently moving along with the spline direction or against it",
    "FortPawn:bUROCanTieToLODs": "Whether we are ever eligible for URO being tied to LODs. Note this is a way to opt out, not opt in",
    "FortAthenaMutator_Uranium:bInOvertime": "Whether we are in overtime or not",
    "GearConfig:bAutoBrake": "Whether we auto brake when in this gear. Useful for gears representing slow movement like character walking and pushing something along",
    "SMVehicleGear:AutoBrakeHotfixable": "Whether we auto brake when in this gear. Useful for gears representing slow movement like character walking and pushing something along",
    "PlayerMarkerConfig:EnableHoldClickAction": "Whether we care about Hold Click Action input",
    "HomebaseSquad:bAlwaysRemoveOldestDefenderWhenReplacing": "Whether we consider always remove the oldest Defender in the squad when replacing a Defender.",
    "HomebaseSquad:bConsiderNumPlayersForMaxNumDefenders": "Whether we consider the number of players for our maximum number of Defenders.",
    "GearConfig:bIgnoreGravity": "Whether we experience gravity when in this gear. Useful for going up a hill from standing still while pushing (i.e. don't want to see vehicle roll back for a split second)",
    "SMVehicleGear:IgnoredGravityHotfixable": "Whether we experience gravity when in this gear. Useful for going up a hill from standing still while pushing (i.e. don't want to see vehicle roll back for a split second)",
    "FortAthenaMutator_SafeZoneOrderOptimize:bInitialized": "Whether we had a successful call to BeginRouteOrderGeneration(), and are ready to process data.\nReplicated for debug purposes only.",
    "AthenaNavPresenceDetectorComponent:bHasValidNavMesh": "Whether we have valid NavMesh under the owner's location.",
    "FortPlayerControllerPvE:bRecycleBrokenWeapons": "Whether we recycle instead of destroy breaking weapons.",
    "FortVolumeTimeOfDayConfig:bUseRandomTimeOfDay": "Whether we should choose a random time of day when the match starts",
    "FortPlayspace:bShouldCreateEventRouter": "Whether we should create an Event Router for this playspace.\nDisabled by default so the generic use case of FortPlayspace is less expensive universally and to prevent creating an unused event router component unintentionally",
    "FortAthenaMutator_Uranium:DestroyActorsOnNewRound": "Whether we should destroy actors from ActorClassesToDestroy when a new round is started",
    "FortPlayerStartupController:DestroyImmediately": "Whether we should destroy this controller immediately, skipping the entire holding area and countdown process.",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:bDisableStormCapSystem": "Whether we should disable the \"storm cap\" system that kills players if the game is exceeding a cap based on current safe zone",
    "FortCheckPointSplineActor:bDrawSplineMapUI": "Whether we should draw the spline on the map UI",
    "CreativeAssetCostFilter:Method": "Whether we should eliminate the elements from the definitions list or only let these ones through.",
    "FortEncounterSettings:bAIDespawnWhenTooFar": "Whether we should even consider despawning AI based on distance",
    "PendingSpawnInfo:bKillBuildingActorsAtSpawnLocation": "Whether we should kill any building actor at the spawn location",
    "LeaderboardEntry:ShowDetailsPanel": "Whether we should show additional stats when displaying the leaderboard",
    "LogoutLogSubmitOptions:bSubmitLogsDuringLogin": "Whether we should submit logs for a logout that occurred during the login process",
    "KairosSubmitLogOptions:bSubmitSecondaryLogs": "Whether we should submit logs for secondary players or not",
    "PartyFailureLogSubmit:bSubmitSecondaryLogs": "Whether we should submit logs for secondary players or not",
    "PurchaseFailureLogSubmitOptions:bSubmitSecondaryLogs": "Whether we should submit logs for secondary players or not",
    "VoiceChatLogSubmitOptions:bSubmitSecondaryLogs": "Whether we should submit logs for secondary players or not",
    "KairosSubmitLogOptions:bSubmitLogs": "Whether we should submit logs or not",
    "PartyFailureLogSubmit:bSubmitLogs": "Whether we should submit logs or not",
    "PurchaseFailureLogSubmitOptions:bSubmitLogs": "Whether we should submit logs or not",
    "VoiceChatLogSubmitOptions:bSubmitLogs": "Whether we should submit logs or not",
    "FortGameModeAthena:bDisableGCOnServerDuringMatch": "Whether we suppress GC while a match is in progress on the server, with the expectation that our memory high water mark\n          doesn't increase sufficiently enough during a match (which runs a fixed length of time) to cause a problem on our servers.",
    "FortAIPawn:bUseAppearanceOverride": "Whether we use appearance overrides.",
    "FortPickup:bUsePickupWidget": "Whether we use the Pickup Widget (default) or the simpler Basic Interaction Widget when the player views this Pickup",
    "GameplayEventDefinition:bIsStateful": "Whether we want to save the state of the event or not.",
    "FortAthenaMutator_Disco:bRespawnWarningGiven": "Whether we've given the respawn warning",
    "CreativeFunctionalTest:RequiredGameMode": "Which Gamemode needs to be used for this test to function correctly.",
    "HUDWidgetBehaviorRegistryEntry:HUDWidgetOverrideTag": "Which HUD Widget the HUD Widget Behavior will be affected to.",
    "FortMiniMapData:MiniMapIcon": "Which Icon is on the minimap?",
    "SafeZoneRoute:EndPOITag": "Which POI the storm will move to.  If not specified, EndLocation is used.",
    "SafeZoneRoute:StartPOITag": "Which POI we will start at",
    "FortPhoenixLevelUpData:Level": "Which Phoenix level this data represents",
    "FortAthenaMutator_ShowPlacard:ShowPlacardPhase": "Which Placard showing phase we are in is used to help with timing and to manage visuals between the server and client",
    "CreativeFunctionalTest:RequiredPlaylist": "Which Playlist needs to be used for this particular test to function correctly.",
    "MissionPerDifficultyProperties:OverrideTimeOfDayTheme": "Which Time Of Day Managers are specified specifically as valid (and invalid) for this mission?  Ultimately the choice will be made from the valid possibilities at random for this mission.  If none are specified, it will fall back to the zone theme settings.",
    "WorldAmbientPropertiesMatchingGameContext:TimeOfDayTheme": "Which Time Of Day Managers are specified specifically as valid (and invalid)?  Ultimately the choice will be made from the valid possibilities at random.  If none are specified, it will fall back to the mission settings and then the zone theme settings (and then defaults).",
    "ZoneThemeDifficultyProperties:TimeOfDayTheme": "Which Time Of Day Managers are valid (and invalid) for this zone?  Ultimately the choice will be made from the valid possibilities at random in this zone.",
    "HUDWidgetBehaviorExtensionsRegistryEntry:HUDWidgetBehaviorTag": "Which Widget Behavior will have these Behavior Extensions appended to it.",
    "IndicatedActorInfoEntry:Actor": "Which actor should be marked. Has to be a soft object pointer in order for the connection to the object to be maintained on the client even when the object is loaded late or unloaded/reloaded.",
    "RespawnAndSpectateTargetData:RespawnTargetActor": "Which actor the player will respawn near\n Can either be set to an AActor with a valid World Transform OR an AFortPlayerStateAthena\n     If set to an AFortPlayerStateAthena it will be used to spawn on the player's pawn (when a pawn is available)\n CanNOT be set to a PlayerController and will log warnings if attempted",
    "RespawnAndSpectateTargetData:CameraActor": "Which actor will be used as a camera when this option is selected before the player respawns\n     Can either be set to an AActor with a valid World Transform OR an AFortPlayerStateAthena\n     If set to an AFortPlayerStateAthena it will be used to spawn on the player's pawn (when a pawn is available)\n     CanNOT be set to a PlayerController and will log warnings if attempted\n Not Replicated because the client never needs this information",
    "FortAthenaMapInfo:AircraftClass": "Which aircraft class to spawn.",
    "CatalogReceiptInfo:AppStore": "Which app store was this purchase made from",
    "CatalogRedeemRealMoneyPurchasesInfo:AppStore": "Which app store was this purchase made from",
    "XboxDedicatedServerSessionCreationParams:TitleId": "Which application/game this session belongs to",
    "SpecialEventAudioHapticsAction:ChannelIndex": "Which audio channel(s) to use to pull loudness from. -1 pull from all channels",
    "PhysicsConstantForceData:BoneName": "Which bone to attach to in the parent component.",
    "SharedQuestRow:Bucket": "Which bucket is this quest relevant for. A bucket is defined on the season and is just an array of relevant playlists",
    "FortPlacedBuilding:BuildingTag": "Which building is being talked about, turns into a gameplaytag",
    "FortSurfaceTrackingComponent:TraceTypeQuery": "Which channel the ray should be blocked on",
    "CreativeClassOption:ClassSlot": "Which class slot are we?\nOnly used when ClassType == ClassSlot.",
    "WeaponModMagnitudeCalculationData:Attribute": "Which column to use for the FortWeaponModDataRow.",
    "CharacterPartAttachmentParams:AttachmentTarget": "Which component of the character part to attach to",
    "FortCustomTickComponent:Condition": "Which condition to evaluate when calculating NumFramesToSkipBetweenCustomTicks",
    "CreativeFunctionalTest:RequiredControllerComponentClasses": "Which controller components to attach to the player controller while the test is in progress",
    "XboxDedicatedServerSessionCreationParams:SandboxId": "Which development/cert/release sandbox this session is created in",
    "FortPickupLocationData:StartDirection": "Which direction the loot starts flying in",
    "FortCustomTickComponent:DefaultClientQualitySettingsTag": "Which element of QualitySettingsMap to use by default on the client, for platforms not defined in ClientPlatformQualitySettingsTagMap,\nor in case of malformed properties.  If not found, we'll use the first entry.",
    "FortCustomTickComponent:AuthorityQualitySettingsTag": "Which element of QualitySettingsMap to use on authority.  If not found, we'll use the first entry.",
    "StormWind:Encounters": "Which encounter(s) is this wind associated with?  This is only non-empty on the server.\nIt may be problematic if we ever associate a wind with more than one encounter, because the direction may not\nmatch, etc.  See operator==.  But for now, this is the easiest way to detect if that ever happens while being\nable to remove winds based on an encounter ending without having to calculate where the winds should be.",
    "SpecialEventCursorPawnComponent:DefaultCursorModeTag": "Which entry from CursorModes we should start with, if any",
    "FortAthenaMutator_Skyfire:SquadMemberStatusWidgetExtensionSlot": "Which extension slot we should add the SquadMemberStatusWidgetClass to",
    "FortGameFeatureStatusBase:Feature": "Which feature this is for",
    "CombinedFeatureProgressSummary:GameFeature": "Which feature this progress is for",
    "ValkyrieEditorPermissionSettings_Editor:AllowedContentBrowserFolders": "Which folders are allowed to be shown in the content browser. Subfolders are automatically included.",
    "TireInfo:AppliedGameplayEffect": "Which gameplay effect to apply when this mod is applied",
    "CreativeMiniMapComponentIconData:IconIndex": "Which icon in the icon list to use",
    "CreativeMiniMapComponentIconData:IconTexture": "Which icon texture, assigned from the class where associated icon library user option is called",
    "FortControllerComponent_MarkActorsInRadius:MarkedAIIndicatorImageType": "Which indicator image type marked Vendetta AIs should have",
    "InteractionType:InteractionBeingAttempted": "Which interaction attempt we're trying to use for this current check.",
    "FortAthenaMutator_InventoryOverride:InventoryAutoEquipSlot": "Which inventory slot should be equipped after new inventory is given to a player.\n-1 Disables. 0 is pickaxes, 1-5 are the weapon slots.",
    "FortCreativeMoveTool:TraceType": "Which kind of hit trace this should this tool use for detecting actors, single, or multi.",
    "CreativeFunctionalTest:DeviceMap": "Which map to use for level streaming and spawning a device.",
    "EmptyServerReservation:MatchmakingPool": "Which matchmaking platform pool is allowed to play on this server\n\nAny implied opt in to crossplay, otherwise platform indicates lockdown",
    "CreativeMiniMapComponentIconData:IconTextureMaterialParam": "Which material param to override for for the icon texture, by detail set to \"IconTexture\" but can changed to other text depending on art needs",
    "GliderTrailParticleDefinition:AttachmentMode": "Which mesh should the Niagara system be attached to",
    "FortGameFeatureComponentEntry:WhenToInjectThisComponent": "Which modes should this action run in",
    "PlayspaceComponentConfiguration:CreationType": "Which playspace(s) this component should be added to",
    "EQSActorSpawnerData:SafeZoneIndexToSpawnIn": "Which safe zone index to spawn actors for (if SpawnTrigger == SafeZoneState.)\n     Set to 0 or greater to ONLY spawn actors for that specific safezone index\n     Set to -1 to spawn actors for all safezones indices.",
    "FortAthenaMutator_Barrier:SafeZonePhaseWhenToBringDownWall": "Which safe zone index we use to start bringing down the wall",
    "FortCreativeMoveTool:SelectedScaleAxis": "Which scale axis is currently selected",
    "FortMinigameStatQuery:Stat": "Which stat is queried?",
    "FortCosmeticRestrictionSourceQuery:TagType": "Which tags to test against",
    "FortMiniMapData:Team": "Which team (1 - 16) this icon belongs to",
    "TeamPerformanceMessageReplication:TeamId": "Which team does this message pertain to.",
    "CreativeTeamOption:TeamIndex": "Which team index are we?\nOnly used when TeamType == TeamIndex.",
    "RespawnAndSpectateTargetData:Team": "Which team this option is available to. EFortTeam::MAX for available to all\n     NOT used if RespawnTargetActor is an AFortPlayerStateAthena instead RespawnTargetActor->GetTeam() will be used\n     (this makes sure that even if the player changes teams they are kept up to date)",
    "TeamPerformanceMessageData:TeamsThatTriggeredMessage": "Which teams have already seen this message (so we can prevent them from seeing it again.)",
    "BuildingGameplayActorChaser:PatrolDriftRange": "Which this chaser is on patrol, this is how far it moves in a straight line before turning",
    "GasEventHistoryItem:ClassType": "Which type of ability-related class (UGameplayAbility, UGameplayEffect...) is involved",
    "XboxDedicatedServerSessionCreationParams:XboxUserIds": "Which users are pre-added to this sessions",
    "FortAthenaMutator_Disco:SentDiscoOpenedMessagesIndex": "Which wave of message is this",
    "GGCenterDisplayEntry:WeaponAt": "Which weapon this entry represents",
    "FortWorldSettings:PluginLandscapeLayers": "While in a plugin, only these landscape layers should be modified. Layers other than these layers will be imported from the main game, and these layers will be exported to the main game when you decide to export",
    "TankWeaponAimingData:bAimRotationLerpWithEasing": "While interpolating the aim rotation from current to camera, do we want easing?\nThis means we'll use curves to control the speed as we rotate.",
    "CraftingObjectComponent:DecayRate": "While paused, the PausedCraftingTime will decay at this rate per-second. Useful for \"push to hold\" UI that slowly resets when the player stops holding",
    "FortAthenaMutator_Payback:bNewEffectPerKill": "While the payback effect is active for a killer/victim-team pair, then the killer kills\nanother member of that team...\nIf bNewEffectPerKill is true, we will stop the old effect and apply a new one.\nIf false, we will reset the timer of the old effect.",
    "EUIStateAutomationType.Continual": "While this State is active it will monitor the Context and automatically transition to the appropriate Child State (according to State Automation Rules) when relevant data changes.",
    "ScriptedObjectMovement_StaticPathSplineInputKeyData:PauseCalendarEvent": "While this calendar event is active, SOM objects will not move passed the end of the spline point group.",
    "ClamberingComponent:QueuedInputTimer": "While this timer is active, the auto proxy client will attempt to start clamber each frame.",
    "FortPlayerControllerZone:bAllowMovementCancellableActionsWithIceFeet": "While true, emotes will continue to play while the player is in slippery movement",
    "FortPlayerControllerZone:bAllowMovementCancellableActionsDuringInputWithIceFeet": "While true, emotes will continue to play while the player is in slippery movement and providing movement input\nDoes nothing if bAllowMovementCancellableActionsWithIceFeet is disabled",
    "FortWeaponCameraAnimationComponent:ADSShakeDataCached": "While we do not have the below explained C++ class for ShakeData and the migrated data to this class,\n       * we will cache both Hip-fire and ADS ShakeData by using a BP getter.",
    "FortWeaponCameraAnimationComponent:HipfireShakeDataCached": "While we do not have the below explained C++ class for ShakeData and the migrated data to this class,\n       * we will cache both Hip-fire and ADS ShakeData by using a BP getter.",
    "FortLightweightProjectileConfig:WhipTrackerData": "Whip audio data for bullet flyby. Currently just one effect, could support one",
    "FortParticipantRequirement:ParticipantID": "Who is subject to the test? the player? or the NPC?",
    "FortFeedbackLine:Addressee": "Who the line addresses",
    "FortMissionEvent:EventInstigator": "Who triggered this event?",
    "FortZoneEvent:EventInstigator": "Who triggered this event?",
    "SparksPlayspaceInteractor:AddedForActor": "Who was this added for (so we can remove all items added for a given actor)",
    "FortMinigameStatQuery:Scope": "Whose stat is being queried?",
    "MinigameStatRow:PlayerStats": "Why can't blueprint functions take in BlueprintReadOnly TArrays???",
    "UIStateSettings:WidgetStateComponentUnloadTimeout": "Widget State Components that are set to \"Wait For Animations\" will wait up to this many seconds when transitioning out of their States.\nIf the timeout is reached then the transition will proceed even if animations have not completed. This is to prevent a misconfigured\nwidget from soft-locking the game.",
    "UIStateSettings:WidgetStateComponentLoadTimeout": "Widget State Components will wait up to this many seconds for their widget classes to load when transitioning into their States.\nIf the timeout is reached then the transition will proceed even if the widgets are not ready. This is to prevent load errors\nor related problems from soft-locking the game.",
    "FortPawnComponent_Convert:IndicatorMarkerWidgetClass": "Widget class to use when displaying marker above converted",
    "FortScoutDrone:TeamMateIndicatorMarkerWidgetClass": "Widget class to use when displaying marker for TeamMates",
    "DynamicUIWidgetTarget": "Widget target that stores only the path to the asset and reconstructs it at runtime to\n      allow referencing widgets in other package without breaking asset restrictions.",
    "DynamicUIAllowed:Widget": "Widget to allow on screen.",
    "DynamicUIWidgetTarget:WidgetPath": "Widget to attach to.",
    "DynamicUIPreload:Widget": "Widget to pre-load.",
    "DynamicUIUnallowed:Widget": "Widget to unallow.",
    "FortMatchmakingActor:MatchmakingWidgetClass": "Widget to use for opening the matchmaking UI",
    "EMinigameFullscreenMapWidgetType": "Widget type to display on the fullscreen map panel",
    "FortPawnComponent_PassiveHealer:GreetingTextWidgetComponent": "WidgetComponent use to display the Greeting text",
    "FortPawnComponent_SpeechBubble:TextWidgetComponent": "WidgetComponent use to display the text",
    "FortPawnComponent_PassiveHealer:GreetingTextWidgetComponentClass": "WidgetComponentClass use to display the Greeting text",
    "FortPawnComponent_SpeechBubble:SpeechBubbleWidgetComponentClass": "WidgetComponentClass use to display the Speech Bubble",
    "ValkyrieEditorPermissionSettings_UMG:AllowedMVVMConversionClass": "Widgets that the factory uses as Common Widget",
    "ValkyrieEditorPermissionSettings_UMG:FavoriteWidgetParentClasses": "Widgets that the factory uses as Common Widget",
    "FortAimAssist2D_Settings:AssistInnerReticleWidth": "Width of aim assist inner reticle in world space.",
    "FortAimAssist2D_Settings:AssistOuterReticleWidth": "Width of aim assist outer reticle in world space.",
    "FortTouchAimAssistSettings:AssistReticleWidth": "Width of aim assist reticle in world space.",
    "FortTouchAimAssistSettings:AutoFireReticleWidth": "Width of auto fire reticle in world space.",
    "FortTouchAimAssistSettings:AutoFireTrackingReticleWidth": "Width of auto fire tracking reticle in world space.",
    "IceGroundPath:SplineColliderExtentWidth": "Width of extents for box collider placed around each spline mesh segment",
    "FortAimAssist2D_Settings:TargetingReticleWidth": "Width of targeting reticle in world space.",
    "FortTouchAimAssistSettings:TargetingReticleWidth": "Width of targeting reticle in world space.",
    "EClassRepNodeMapping.Custom": "Will always be relevant to all clients inside the given FortVolume",
    "FortGameStateComponent_AffiliationManager:bApplyAttitudeChangesOnAllSquadActorsInNonCreativeWithFactions": "Will apply attitude changes to all the squad members, if the game is not a creative one with valid factions.",
    "FortGameStateComponent_AffiliationManager:bApplyAttitudeChangesOnConverted": "Will apply attitude changes to also all the relative converted.",
    "EFortQuestObjectiveStatEvent.SquadDamage": "Will be called on the players quest manager when any squadmate or themselves deal damage. The target is the object, player, or creature which was damaged.",
    "AthenaMapScreenContainerTabInfo:Order": "Will be inserted after elements of lesser order and before elements of greater order",
    "CollisionReactionForcedLaunchDirection:LaunchDirection": "Will be normalized and multiplied with the owner's direction.",
    "FortAthenaHandleSoftDisableStateTreeTaskInstanceData:bHasReceivedSoftDisableEvent": "Will be set (once and forever) to true if a soft disable event comes in.",
    "FortAthenaTrackEventStateTreeTaskStateTreeParameter:bHasReceivedTrackedEvent": "Will be set (once and forever) to true if an event matching the provided query comes in. FortAthenaTrackEventConsumeStateTreeTask would reset it.",
    "FortAthenaTrackEventStateTreeTaskStateTreeParameter:ReceivedEventTag": "Will be set to the latest event we received that matched the provided query. FortAthenaTrackEventConsumeStateTreeTask would reset it.",
    "FortAthenaHandleSoftDisableStateTreeTaskInstanceData:ReceivedSoftDisableEvent": "Will be set to the latest soft disable event we received.",
    "OverriddenSupportedAgentsByReleaseVersion:OverriddenSupportedAgentsMask": "Will completely override the default Supported Agents Masks with this, if we are within a valid version.",
    "FortAthenaLivingWorldPointProvidersEnabler:EnabledLinkedPointProviders": "Will contain a list of all the enabled point providers after the evaluation has happened.",
    "FortObjectiveFilter_MatchFinished:MatchMetaData": "Will contain relevant for this match. e.g. Thanks the bus driver, played with a squad, etc.",
    "FortAthenaLivingWorldPointProvidersEnabler:PointProvidersToEnable": "Will enable at most this number of point providers.",
    "EFortVariantTokenEquipRule.EquipAllExceptUnowned": "Will equip the primary + additional variants this token grants, along with any preview variants that are currently owned. Not supported on MCP.",
    "EFortVariantTokenEquipRule.AlsoEquipAdditionalGrants": "Will equip the primary + additional variants this token grants. Not supported on MCP.",
    "EFortVariantTokenEquipRule.AlsoEquipPreviewGrantsIfOwned": "Will equip the primary variant this token grants, along with any preview variants that are currently owned. Not supported on MCP.",
    "BuildingActor:bAlwaysExportNavRelevantComponent": "Will export NavRelevantComponent even if there are not collidable",
    "VideoWidgetConfig:bForceAutoPlay": "Will force playback after loading the video",
    "ServerRollQuestTableRow:Quest": "Will get automatically populated if QuestPAID is imported from a csv (via OnPostDataImport)",
    "FortAIPawn:OnCustomizationsLoadedEvent": "Will get called when the customizations have been locally loaded, either asynchronously or synchronously.",
    "FortAIPawn:OnCustomizationsUnloadedEvent": "Will get called when the customizations have been locally loaded, either asynchronously or synchronously.",
    "FortAthenaAIObjectTrackerQuerySimplified:MaximumDistance": "Will ignore objects that are outside of this range.",
    "FortWeapon:bImpactFXAttachedToHitActor": "Will impact FX attach to the hit actor?",
    "FortObjectiveFilter_AddToInventory:bIncrementByItemCount": "Will increment by the stack size of the item added to inventory. If set to false will only increment by 1 when the event passes the filter.",
    "FortSquadComsPickerCategory": "Will likely replace categories with just firmly set \"Squad coms\" OR \"npc commands\"",
    "FortAthenaMutator_GG:CachedContext": "Will most likely either be the player pawn or nullptr.",
    "ENavigationObstacleOverride.ExportAsPrimitive": "Will not use the NavModifier export flow, and will export the component geometry directly",
    "FortPlayspaceMembershipActorComponent:CustomRequiredTagForPlayspace": "Will only binds to playspaces that have the following tag. Note: if not set uses the defaults: 'Playspace.Bindable'.",
    "EFortVariantTokenEquipRule.EquipBaseVariantOnly": "Will only equip the primary variant this token grants. Default functionality on MCP.",
    "EDBNOPlayStyle.Default": "Will only kill DBNO until safe to do, Passive = completely ignore DBNO",
    "FocusSetting:bRequireAmmoToMatch": "Will only match the weapon if it has ammo.",
    "DynamicUIUnallowed:UniqueID": "Will only unallow the widget using this unique ID & class.",
    "EAutoplayOptions.GameEnd": "Will play automatically at the end of each game.",
    "EAutoplayOptions.RoundEnd": "Will play automatically at the end of each round.",
    "EAutoplayOptions.Countdown": "Will play automatically during the Game Countdown",
    "EAutoplayOptions.WaitingForPlayer": "Will play automatically during the pregame lobby.",
    "EAutoplayOptions.Create": "Will play automatically while Creating.",
    "EAutoplayOptions.Gameplay": "Will play automatically while the game is in progress.",
    "FortAthenaToggleGameplayEffectStateTreeTaskInstanceData:GameplayEffectsByAppliedTagsToRemove": "Will remove any GameplayEffect that has the provided applied tags. Note: can be used together with any other *ToRemove parameter or by itself.",
    "FortAthenaToggleGameplayEffectStateTreeTaskInstanceData:GameplayEffectsByGrantedTagsToRemove": "Will remove any GameplayEffect that has the provided granted tags. Note: can be used together with any other *ToRemove parameter or by itself.",
    "FortAthenaToggleGameplayEffectStateTreeTaskInstanceData:GameplayEffectsBySourceTagsToRemove": "Will remove any GameplayEffect that has the provided source tags. Note: can be used together with any other *ToRemove parameter or by itself.",
    "FortAthenaToggleGameplayEffectStateTreeTaskInstanceData:GameplayEffectsByTagsToRemove": "Will remove any GameplayEffect that has the provided tags. Note: can be used together with any other *ToRemove parameter or by itself.",
    "FortLauncherAthena:bLaunchPlayersFromVehicles": "Will remove players from vehicles and launch them separately when they hit a launcher.",
    "EFortNearbyActorsTypes.Bots": "Will return bots participating in the match",
    "EFortNearbyActorsTypes.AIPawns": "Will return only AI Pawns",
    "EFortNearbyActorsTypes.NPCs": "Will return only bots not participating (ex. NPCs, guards, etc.) in the match",
    "EFortNearbyActorsTypes.RealPlayers": "Will return real players",
    "FortAthenaLivingWorldPointProvidersEnabler:EvaluateAutomatically": "Will run the evaluation automatically after the playlist has been loaded, from BeginPlay.",
    "EAIScalableFloatScalingType.ReceivedDamageByTarget": "Will scale the damage based on the absolute damage received by the current target",
    "ETimespanAsTextFormat.ColonsWithMilliseconds": "Will show milliseconds if we're less than 1 hour.",
    "FortAthenaTrackEventStateTreeTask:EventTagQuery": "Will test every StateTree event's tag with this query.",
    "DynamicUIUnallowed:bTargetAll": "Will unallow all widget matching this class regardless of their unique ID usage.",
    "FortAthenaHandleSoftDisableStateTreeTask:TeleportOnNavmeshQueryBoxExtents": "Will use this box to find valid navmesh points to teleport onto, if required.",
    "EFortQuestObjectiveStatEvent.Win": "Win the specified number of PvP battles. Target is empty.",
    "FortWindImpulseCylinderRadial": "Wind Impulse Cylinder is a vertical cylinder of infinite height from the ground altitude up (i.e. it does not apply\ninside caves, although it would apply in the center of an area in a vertical shaft down into a cave).  The wind\ndirection is fixed for now, but can eventually be radial or cyclonic if we decide it's necessary.",
    "WindSplineComponent": "Wind Spline Component\nA spline that provides wind style gameplay that can push players and physics objects\nTODO: Support moving splines\nTODO: Support moving blockages\nTODO: Support per spline point scaling",
    "EClamberingState.Window_Moving": "Window Clambering specific states -- Stubs for now, will implement in a future release",
    "EFortMantisNotifyWindow.Execution": "Window that defines the section between the windup and recovery portions of the technique.",
    "EFortMantisNotifyWindow.Input": "Window that defines when input is accepted for the next technique.\nNote: This window is optional.  If present, it will override the input window delay set on the technique.",
    "EFortMantisNotifyWindow.Damage": "Window that defines when the technique will collide and register damage.",
    "EFortMantisNotifyWindow.RootMotionWarp": "Window that defines when the technique will potentially allow for root motion warping\nNote: This window is optional. If present and calling gameplay code has a valid warping target, will attempt to warp\nroot motion translation and rotation as appropriate toward the target.",
    "CobaltWidgetRoundData:PreviousRoundWinners": "Winning team numbers from the previous round",
    "FortWeapon:ModLeftHandPoseOffsets": "With each mod (specified by their mod tag) attached, we will offset player's left hand pose with given data accordingly",
    "FortWeapon:ModReloadAnimData": "With each mod (specified by their mod tag) attached, we will override the reload animations with given data accordingly",
    "FortGyroV2Settings:FlickForwardDeadZone": "Within this angle from forward, flicks are ignored.",
    "BuildingFillFloor:ZMovementToleranceOffset": "Within this distance of the top of the floor pawn movement error tolerance is high to prevent network sync issues.",
    "FortAthenaMutator_Fill:ZMovementToleranceOffset": "Within this distance of the top of the lava pawn movement error tolerance is high to prevent network sync issues.",
    "EMatchConditionMutatorTeamStatus.Won": "Won the current segment of the match",
    "FCollisionWithLaunchableReactionTypes.OverrideOther": "Won't do anything but will still get used internally to override other behaviours\nex. if you set the PhysicsObjectReaction to OverrideOther, it will stop a building actor physics object to trigger a reaction",
    "EFortReplicatedStat.BuildingsBuilt_Wood": "Wood buildings built",
    "EFortItemType.WorldResource": "Wood, metal, etc",
    "EFortInventoryFilter.Workers": "Workers = Survivors + LeadSurvivors",
    "DanceSynchronizerComponent": "Works with a Pawn or SkeletalMeshActor to synchronize playing montages\nwith a given music source and beat information for the montage.",
    "FMDanceSynchronizerComponent": "Works with a Pawn or SkeletalMeshActor to synchronize playing montages\nwith a given music source and beat information for the montage.",
    "MontageBeatSyncComponent": "Works with a Pawn or SkeletalMeshActor to synchronize playing montages\nwith a given music source and beat information for the montage.",
    "FortAthenaWorldConditionInstanceData:QueryState": "World Condition query state.",
    "FortGameState:CurrentWUID": "World Id of the curent world record (clients don't have the world record)",
    "EmptyServerReservation:WUID": "World Id to load",
    "MatchmakingParams:WUID": "World Id to load",
    "FortLootPackageData:MaxWorldLevel": "World Level needs to be <= to this value or weight is treated as 0. -1 means don't check",
    "FortLootTierData:MaxWorldLevel": "World Level needs to be <= to this value or weight is treated as 0. -1 means don't check",
    "FortMissionEntry:WorldMaxLevel": "World Level needs to be <= to this value or weight is treated as 0. -1 means don't check",
    "LootPackageRow:MaxWorldLevel": "World Level needs to be <= to this value or weight is treated as 0. -1 means don't check",
    "LootTierDataRow:MaxWorldLevel": "World Level needs to be <= to this value or weight is treated as 0. -1 means don't check",
    "FortLootPackageData:MinWorldLevel": "World Level needs to be >= to this value or weight is treated as 0. -1 means don't check",
    "FortLootTierData:MinWorldLevel": "World Level needs to be >= to this value or weight is treated as 0. -1 means don't check",
    "FortMissionEntry:WorldMinLevel": "World Level needs to be >= to this value or weight is treated as 0. -1 means don't check",
    "LootPackageRow:MinWorldLevel": "World Level needs to be >= to this value or weight is treated as 0. -1 means don't check",
    "LootTierDataRow:MinWorldLevel": "World Level needs to be >= to this value or weight is treated as 0. -1 means don't check",
    "FortCreativeLinearMoverComponent:PreviousTargetPosition": "World Location used to determine the wall position when movement requires an update",
    "FortWorldConditionWorldStat:Value": "World Stat threshold.",
    "FortWorldConditionWorldStat:WorldStatDefinition": "World Stat to check against.",
    "FortWorldConditionWorldState:WorldStateQuery": "World State(s) to filter against.",
    "FortWorldManager:Theme": "World Theme to use",
    "BuildingActor:bBoundsAreInvalidForMelee": "World bounds for this actor are not valid when determining if melee is valid",
    "FortWorldConditionPlayerHasConvertedNPC": "World condition that can be used to check if the referenced player has a converted NPC",
    "FortWorldConditionGameplayTagActor": "World condition that checks if the provided Actor (which must implement 'IGameplayTagAssetInterface' and have an AbilitySystemComponent) has any or all of the provided TagContainerToCheck gameplay tags.",
    "FortAthenaLivingWorldCondition_TrackedPlayerPresence": "World condition that checks if the provided Actor has any player tracked by the Living World Manager in range",
    "FortWorldConditionPerceivedHostilePlayer": "World condition that checks if the provided Actor has perceived any hostile player",
    "FortWorldConditionAthenaGamePhase": "World condition that checks if the provided Athena Game Phase has been reached.",
    "FortWorldConditionInSafeZone": "World condition that checks if the provided actor is inside the safe zone (a.k.a. outside of the Storm).",
    "FortAthenaLivingWorldDensityCondition": "World condition that checks the LivingWorldManager density around the actor location",
    "FortWorldConditionWorldState": "World condition to check world states flag system",
    "FortWorldConditionWorldStat": "World condition to check world stats for a given threshold value",
    "FortWorldConditionTimeOfDay": "World condition to match certain Time Of Day (TOD) needs.\nNote: right now this does not support the case where the actor we are referencing to moves outside of the playspace:\n- in such a case we'll keep using the contextual TOD found when we started the condition\n- if you need this feature we can add it to the 'UFortPlayspaceMembershipActorComponent' and use that component here (so we can work in an event-base environment and avoid pooling)",
    "EFortItemType.WorldItem": "World item, parent of following types",
    "PhaseLevelEntry:Location": "World location at which to place the level",
    "GameplayFeedbackEventParams:EventLocation": "World location in which the feedback event occurred",
    "PartyMemberFrontEndMapMarker:MarkerLocation": "World location without Z-axis because it is irrelevant to the map.",
    "FortGameState:WorldManager": "World manager for this world",
    "FortAthenaFocusAtStateTreeTaskInstanceData:FocusWorldPoint": "World point/location to set the focus point at. Note: not used if FocusActor is set.",
    "CreativeIslandResource:WorldRadius": "World radius around world location that counts towards this resource.",
    "PhaseLevelEntry:Rotation": "World rotation at which to place the level",
    "FortPoiGridInfo:WorldGridEnd": "World space start position of the Grid.",
    "FortPoiGridInfo:WorldGridSpacing": "World space start position of the Grid.",
    "EFortBudgetCategory.Simulation": "World tick CPU cost",
    "FortCurieActiveElectricityArc:StartTime": "World time stamp when arc began",
    "FortCurieGlowFadeRequest:StartTimestamp": "World time when fade began",
    "GameplayCueNotify_Jetpack_Hovering:ActivationTime": "World time when this GCN was activated",
    "FortAthenaWorldConditionInstanceDataStateTreeTask:Conditions": "WorldCondition Query that will be used to set the output result bool: bOutResult.",
    "FortWorldProfileUpdateRequest:WorldProfilesToSave": "WorldProfiles to save",
    "VehicleSpringInfo:Start": "Worldspace info",
    "FortMtxPlatformList": "Wrapper class around TArray since you can't have nested containers",
    "StyleSequenceElement": "Wrapper defining a style to be activated in sequence",
    "GrantQuestBlueprintParameters": "Wrapper for common parameters used when requesting a manager grant a quest",
    "MutatorContext": "Wrapper for managing/interacting with an array of mutator-owning actors",
    "ContextualMessageQueryResult": "Wrapper for returned result parameters",
    "EventScopeInfo": "Wrapper for scoping quest events when stored for later processing\ncontains scope (e.g. 'squad' and quest owner)",
    "FortModSetModEntry": "Wrapper struct for a mod set. Contains the mod definition and any extra data related to this this entry.\nA mod set contains multiple of these for a given rarity.\n\nCurrently this is only the mod definition, but by wrapping in a struct it will be\ntrivial to add additional data here after the fact, without requiring us to rebuild the entire mod sets.",
    "WindSplineBlockageArray": "Wrapper struct for supporting fast array replication of FWindSplineBlockage",
    "WindSplineTargetData": "Wrapper struct for supporting fast array replication of FWindSplineTargetDatum",
    "FortCreativeTagsHelper": "Wrapper struct helper for storing and editing creative tags on an object.\nBest used with meta=(ShowOnlyInnerProperties).\n@todo Add property details customization to easily select and sanitize creative tags.",
    "WindSplineMeshData": "Wrapper struct that encapsulates the spline mesh component and it's material instances",
    "HUDElementVisibilityPriorityStacks": "Wrapper struct to allow for replication of a 2D array. Each index in the list corresponds to a priority from EFortHUDElementVisibiltyPriority",
    "ServicePricingKeyRemappings": "Wrapper structure containing a map of pricing key name remapping entries for a given NPC",
    "FortWeaponModHISMComp": "Wrapper subclass for HISM for weapon mods. Adds data so that it can keep track of what indices have been updated for the frame.",
    "FortWeaponModISMComp": "Wrapper subclass for ISM for weapon mods. Adds data so that it can keep track of what indices have been updated for the frame.",
    "FortAugmentPassiveUnlockResult": "Wraps an unlocked augment as directly return augment is less refactorable than adding fields to struct.",
    "EInventoryPersistenceMode.Deferred": "Writing of any changes is deferred until SetPersistence(Normal) is called",
    "FortLevelRecord:X_Loc": "X Location of this saved tile",
    "EVehicleTrickAxis.XNeg": "X Negative/Roll Negative",
    "EVehicleTrickAxis.X": "X Positive/Roll",
    "BuildingSupportCellIndex:X": "X index",
    "SplatterCellIndex:X": "X index",
    "XPEventInfo:EventXpValue": "XP Value of this event - will include any rested XP amount",
    "AthenaDynamicRestedXpGoldenPath:GoldenPathXPAvailable": "XP amount available to the user at specified day into season",
    "SecondaryXpGained:secondaryXp": "XP amount gained",
    "FortLevelUpDataV2:BoostXPPerConsumable": "XP boost amount received per consumable at this account level",
    "AthenaDynamicRestedXpGoldenPath:GoldenPathXP": "XP expectation at specified day into season",
    "AthenaRewardResult:XpMultipliers": "XP multiplier breakdown",
    "EFortQuestObjectiveStatEvent.CreativeDevice": "XP that comes from a Creative Device in a published Island. Target is only the XPAward tag.",
    "FortQuestAchievementTableRow:XboxAchievementID": "Xbox AchievementID",
    "FortExperienceDelta:Xp": "Xp after the delta was applied (NOT CUMULATIVE)",
    "TrapItemDefintionDesignerData:LevelToXpHandleForm": "Xp handle",
    "FortLevelRecord:Y_Loc": "Y Location of this saved tile",
    "EVehicleTrickAxis.YNeg": "Y Negative/Pitch Negative",
    "FortAthenaCompassIcon:YOffset": "Y Offset for displaying the icon in the compass",
    "EVehicleTrickAxis.Y": "Y Positive/Pitch",
    "BuildingSupportCellIndex:Y": "Y index",
    "SplatterCellIndex:Y": "Y index",
    "FortVehicleSeatWeaponComponent:AttachmentAngleOffsetYaw": "Yaw Angle offset to use when attaching weapon mesh to vehicle",
    "FortMeleeWeaponStats:ConeYawAngle": "Yaw component of Cone Angle",
    "AthenaVehicleShootingCone:YawConstraint": "Yaw constraint (+- around the vehicle up axis)",
    "FortGamepadAdvancedOptions:LookHorizontalSpeedAds": "Yaw look speed (when aiming down sights).\nRange is [1, 100] percent.",
    "FortGamepadAdvancedOptions:LookHorizontalSpeed": "Yaw look speed.\nRange is [1, 100] percent.",
    "EConsoleAuthLinkState.NotOnConsole": "You aren't on a console why are you even asking, really?",
    "FortPoi_DiscoverableComponent:bIsPlayerFacingNameLocalizable": "You can enable/disable localization here - PlayerFacingName has a deterministic namespace/key, this is the only way to allow that enforcement to continue",
    "HmxSettings:numAudioBusGenerators": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:numDaggerGenerators": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:numFusionGenerators": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:numMidiMusicGenerators": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:numMoggGenerators": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:numMoggMusicGenerators": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:numMultiFusionGenerators": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:numMusicTimelineGenerators": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:numStretchable": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:numSynthRackGenerators": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:numTotalVoices": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:onLoadDecompressionIsAsynchronous": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:scanAllBussesForTempoAwareDSP": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:shouldDecompressSamplesOnLoad": "You must rerun Unreal for these changes to take effect.",
    "HmxSettings:softVoiceLimit": "You must rerun Unreal for these changes to take effect.",
    "ThreatLocationInfo:CloudLocation": "Your data:",
    "RockVehicleAxleConfig:RestDistanceZ": "Z Distance down, from the vehicle Center of Mass to the center of the axle *",
    "EVehicleTrickAxis.ZNeg": "Z Negative/Yaw Negative",
    "AthenaNavMesh:ShallowWaterTraceEndOffsetZ": "Z Offset from the nav poly center for the the end of the shallow water check.",
    "AthenaNavMesh:ShallowWaterTraceStartOffsetZ": "Z Offset from the nav poly center for the the start of the shallow water check.",
    "RockVehicleAxleConfig:TranslateZ": "Z Offset from where to start the Raycast. *",
    "EVehicleTrickAxis.Z": "Z Positive/Yaw",
    "BuildingSupportCellIndex:Z": "Z index",
    "SplatterCellIndex:Z": "Z index",
    "FortStormShieldCameraActor:CameraOffsetZ": "Z offset added to the camera's location",
    "TornadoConfigEntry:PlayerGravityFloorOffset": "Z offset from tornado base for vortex gravity floor",
    "FortGameStateAthena:EliminationMarkerHUDZOffset": "Z offset to apply to the elimination marker appearing in the HUD (in centimeters)",
    "FortAthenaVehicle:TargetingZOffset": "Z offset to apply when aiming at target inside this vehicle (used for AI aiming).",
    "DynamicUIAllowed:ZOrder": "Z order used to draw this widget.",
    "SwingingControlParams:JumpZVelocity": "Z velocity applied when jumping during swinging",
    "FortMovementComp_Character:FallingStartedZ": "Z where falling started",
    "CustomCharacterPartModifier_SlurpLegendsBody:VariantData": "Zero is the base variant, one is the fullshield variant",
    "FortAscenderZipline": "Zipline building that moves players straight up and down.",
    "FortPlayerPawn:ZiplineSpeedFactor": "Zipline value, for playing audio and VFX, and setting pitch, etc.  Check in conjunction with SpeedTargetAlpha to determine changing direction, etc. -1.0 = max downhill speed.    1.0 = max uphill speed.",
    "FortGameMode:ZoneIndex": "Zone Index to load/save to",
    "FortGameMode:CurrentZoneInstanceId": "Zone instance id of the zone to load",
    "FortPartyRepData:ZoneInstanceId": "Zone instance id selected by the leader",
    "EmptyServerReservation:ZoneInstanceId": "Zone instance to load",
    "MatchmakingParams:ZoneInstanceId": "Zone instance to load",
    "ECaptureState.Capturing": "Zone is actively being captured",
    "ECaptureState.Captured": "Zone is captured by a team",
    "ECaptureState.Contested": "Zone is contested (members from multiple teams are in the zone)",
    "ECaptureState.Disabled": "Zone is disabled",
    "ECaptureState.Neutral": "Zone is uncaptured",
    "FortPIEMissionOverrideData:ZoneRecommendedRating": "Zone recommended rating to use for PIE, only used if MissionGenerator is specified",
    "ERepGraphMutatorSpatializationZoneType.AINonFast": "Zone settings for AI actors that do NOT support FastShared replication.\n(UFortReplicationGraphNode_DynamicSpatialFrequency::AISettings::ZoneSettings_NonFastSharedActors)",
    "ERepGraphMutatorSpatializationZoneType.AI": "Zone settings for AI actors that support FastShared replication.\n(UFortReplicationGraphNode_DynamicSpatialFrequency::AISettings::ZoneSettings)",
    "ERepGraphMutatorSpatializationZoneType.NonAINonFast": "Zone settings for non-AI actors that do NOT support FastShared replication.\n(UReplicationGraphNode_DynamicSpatialFrequency::DefaultSettings::ZoneSettings_NonFastSharedActors)",
    "ERepGraphMutatorSpatializationZoneType.NonAI": "Zone settings for non-AI actors that support FastShared replication.\n(UReplicationGraphNode_DynamicSpatialFrequency::DefaultSettings::ZoneSettings)",
    "FortGlobalMission:ZoneTagQuery": "Zone tags that are required for this mission to be active.",
    "FortZoneInstanceInfo:ZoneThemeClass": "Zone theme used by this zone, can be loaded on demand",
    "FortWorldManager:ZoneThemeForPIE": "Zone theme used in PIE if the zone theme wasn't already specified (such as by choosing a zone to load in PIE).  If not specified, zone theme settings won't apply at all.",
    "FortPartyCampaignInfo:ZoneTileIndex": "Zone tile index selected by the leader",
    "ECaptureState.Deneutralizing": "Zone was previously neutralized but is now recovering back to fully captured",
    "ContainerStatInfo": "Zone-Wide stat structure for containers",
    "DefenderNPCStatInfo": "Zone-wide stat structure for Defender NPCs",
    "EnemyNpcStatInfo": "Zone-wide stat structure for Enemy NPCs",
    "CustomTickComonentQualitySettings:OuterDistance": "[\"Distance\" conditions only] When we are outside of this distance of the nearest test location, NumFramesToSkipBetweenCustomTicks will be MaxFramesToSkipBetweenCustomTicks",
    "CustomTickComonentQualitySettings:InnerDistance": "[\"Distance\" conditions only] When we are within this distance of the nearest test location, NumFramesToSkipBetweenCustomTicks will be MinFramesToSkipBetweenCustomTicks",
    "SpecialEventCursorMode:MinCursorPercentForAdditiveRotationYaw": "[0-1] When the horizontal cursor location goes this percent away from the screen center, begin applying additive yaw rotation",
    "SpecialEventCursorMode:MinCursorPercentForAdditiveRotationPitch": "[0-1] When the vertical cursor location goes this percent away from the screen center, begin applying additive pitch rotation",
    "FortAthenaMutator_MarkerUtilities:IndicatedActorCompassIconOverrideMap": "[CLIENT] Map of compass icons to use per indicated actor, added by OverrideIndicatedActorCompassIcon().\nActors not found in this map will use the default IndicatedPlayerCompassIcon.",
    "CursorSettings:broadcastPitchbendMsgs": "[FUTURE - currently not supported] Send events for pitchbend messages",
    "FortPlayerPawn:SetByCallerReviveSignalInStorm": "[GAPP] When reviving players, the amount of Signal",
    "FortWeap_EditingTool:bEditConfirmed": "[LOCAL ONLY] Whether the current edit operation has been confirmed or not via the user; Doesn't necessarily guarantee a valid edit result (pattern could be wrong, etc.)",
    "ControllerRequirementTestContext:OtherActor": "[Optional] Any 'other' actor relevant to the requirement test(s) (e.g. an NPC conditionally offering some service to the player / prop actor)",
    "ControllerRequirementTestContext:OtherController": "[Optional] Any 'other' controller relevant to the requirement test(s) (e.g. the controller of an NPC conditionally offering some service to the player)",
    "EffectRequestContext:InstigatingActor": "[Optional] Any logical 'instigator' actor responsible for any applied effect (e.g. NPC/Actor providing Gift)",
    "EffectRequestContext:InstigatingController": "[Optional] Any logical 'instigator' controller of any applied effect (e.g. NPC/Actor providing Gift)",
    "GrantQuestBlueprintParameters:QuestParticipationScope": "[Optional] If set, the subsystem will attempt to grant the quest to the quest manager associated with this participation scope\nIf not set, the subsystem will attempt to grant the quest through auditing its data to see where what manager it likely belongs to\n(i.e. a quest definition with a shared quest component will end up be granted to a team/squad/party quest manager)",
    "EffectRequestContext:ContextTags": "[Optional] Tags describing the context in which the request was made e.g. (Freebie gift type tag, Game Mode, POI etc)",
    "EffectRequestContext:SourceTags": "[Optional] Tags related to any logical 'Source'/'Requester' of the effect e.g. (Unique ServiceProviderID Tag)",
    "EffectRequestContext:TargetTags": "[Optional] Tags related to any logical 'Target' of the effect request e.g. (Player tags)",
    "GrantQuestBlueprintParameters:Instigator": "[Optional] The object that instigated this quest grant event and should be used for quest scoping\nFor example, if a player is passed in as the Instigator and the quest is marked to be a squad quest,\nthen the quest will be granted to the Instigator's squad.\nIf bInstigatorOwnsQuest is marked true, then the Instigator will also be treated as the QuestOwner",
    "GrantQuestBlueprintParameters:bInstigatorOwnsQuest": "[Optional] True if the passed in Instigator should have ownership over the newly granted quest\nIf true, the newly granted quest will attempt to export progression to the Instigator through our backend services\n(i.e. a player exporting their quest progress to MCP)",
    "SpecialEventStatArrayEntry:Value": "[REPLICATED] Our current value",
    "SpecialEventStatArrayEntry:StatDefinitionIndex": "[REPLICATED] The index of this stat into StatComponent's StatDefinitions array",
    "DestroyActorsAndComponentsMutator_ActorDefinition:bPermanentlyDisabled": "[REPLICATED] Whether this definition has been permanently disabled by PermanentlyDisableActorDefinitions() on the server",
    "DestroyActorsAndComponentsMutator_ActorDefinition:bCurrentlyEnabled": "[REPLICATED] Whether this definition is currently enabled.  If true, we will execute the defined component destruction as new actors are spawned.",
    "BuildingSMActor:AccumulatedAutoBuildTime": "[SERVER ONLY] Accumulated auto-build time; Used to parse out auto-build in small increments instead of every frame for network perf. reasons",
    "BuildingSMActor:HealthToAutoBuild": "[SERVER ONLY] Amount of health to auto-build for the actor",
    "FortAIPawn:bShouldUseRootComponentForTargetSelectionOverlap": "[default: true] If false will use the overlapping component to the root component for target selection.",
    "ConversationGiftTypeDefinition:UINotificationType": "[optional] If set, indicates a UI Notification type to processed after effects have executed",
    "ConversationGiftTypeDefinition:OptionalSelectionCooldown": "[optional] If set, indicates a cooldown which should be obeyed before selecting this gift type again. If <= 0.f, will not be applied",
    "EFortItemType.RestedXpBoosterToken": "a Token that will auto consume once it grants its rested XP amount, if it requires the battle pass but the user does not own it the token will sit on the profile\nuntil it can be consumed upon the purchase of the battle pass",
    "EFortQuestObjectiveStatEvent.ComplexCustom": "a better use than custom, allows BP to still pass in gameplay tags and use gamecontext so we they dont have to do a ton of extra logic the quest manager already does. Target is chosen by caller.",
    "FortNavigationVisibilityComponent:bEnableCollision": "a bool used by the event level to turn on and off collision as needed when we go to active cameras since the active camera will turn on collision for all nav actors that can be interacted with by that camera",
    "EFabricInteractableType.Continuous": "a button",
    "EFabricInteractableType.None": "a cable",
    "EServerRestartReason.BeaconJoinDelayRestart": "a client has joined a beacon while we are trying to die",
    "SwingingControlParams:ReelForceByRopeLength": "a curve for applying reeling force by rope length",
    "AttachedWheel:MatInstance": "a dynamic material instance so that we can hide the verts for when the tire is popped (via material param)",
    "ERewardTimePlayedType.FlatValue": "a flat value given for just playing",
    "EFortServerContentRestartReason.ForceRestartEventFlagsChanged": "a game feature plugin was disabled that wasn't disabled before the fork point",
    "FortWeaponComponent_Swinging:SpeedLinesGE": "a gameplay effect used for speed lines",
    "FortWeaponComponent_Swinging:SwingInputHeld": "a gameplay tag indicating that the swinging input is held",
    "FortWeaponComponent_Swinging:UseIsBlocked": "a gameplay tag indicating that use of swinging is blocked",
    "InteractionType:OptionalObjectData": "a generic UObject to shove in extra data required for the interaction on the server side",
    "EFabricContinuousInteractionDirection.Horizontal": "a knob",
    "EFabricInteractableType.Cable": "a knob",
    "FortAthenaVehicle:PawnsToIgnoreForCollision": "a list of pawns that were bumped. collision will be ignored until they're no longer in contact",
    "EFortItemType.BannerToken": "a physical representation of the banner icon so we can put it in the store and challenge bundles and no longer have dirty hacks.",
    "ProjectileHomingData:RandomSeed": "a random seed used for drunk homing",
    "FortDagwoodVehicle:RandomSeed": "a replicated random seed used for popped tire reactions",
    "FortCharacterVehicle_Ostrich:PassengerRootSocket": "a root socket for passenger cams to use as a reference",
    "AttachedWheel": "a tire mod involves a mesh and a suspension/road tuning",
    "TireInfo": "a tire mod involves a mesh and a suspension/road tuning",
    "BuildingItemCollectorActor:ManualOutputOverride": "a way to handle the output event mannually in BP, this is used by the difficulty pylon where there is no output but will change the world level when this event fires off",
    "FortCharacterVehicle_Ostrich:SelfDestructAbilityComp": "ability system comp of player that started a self destruct",
    "FortCharacterVehicle_Ostrich:AccelFromIdle": "accel applied when less than max speed",
    "SwingingControlParams:ReelingSpeed": "acceleration that multiplies onto the reel force curve result",
    "SwingingControlParams:ReelingSpeedGrounded": "acceleration that multiplies onto the reel force curve result while grounded",
    "SwingingControlParams:ReelingSpeedGroundedAttachedVehicle": "acceleration that multiplies onto the reel force curve result while grounded and attached to a vehicle",
    "EFortItemType.Accolades": "accolades",
    "VkProjectUserInfo:AccountId": "account ID of the calling user context",
    "CreativeLoadedLinkData:AccountId": "account ID of the link OWNER (may or may not be the same account as CreatorName)",
    "EContentRequestInstallState.ClientsUninstalled": "active and usable, REQUESTABLE STATE",
    "AudioWorldizationGlobalSettings:IgnoreTraceActorTag": "actor tag you can add to actor BP's or instances that will make them not count towards trace enclosure",
    "EHotspotTypeConfigMode.WhenNotDefined": "add ExtraTypeConfig slots of type X when config doesn't define any slots of type X",
    "EHotspotTypeConfigMode.WhenNotValid": "add ExtraTypeConfig slots of type X when none slots of type X were valid (not defined / not projected / not in range)",
    "EFortWeaponType.MAX": "add melee types here",
    "EFortWeaponType.MeleeAny": "add ranged types here",
    "FortWeaponRanged:ScopeImpactEffectDistanceOffset": "add this value to both impact and decal min distance when using scope targeting (local player)",
    "McpBanInfo:AdditionalInfo": "additional ban info, if any",
    "FortPlayerSurveyCMSCondition:ConditionInfo": "additional info potentially needed per-condition",
    "TireInfo:TireMeshLateralAdjustment": "adjusts the position of the tire mesh toward or away from the axle socket",
    "FortNevadaVehicle:bDeadBattery": "after hitting zero battery, cant enter flight until we've reached min battery",
    "FortCharacterVehicle_Ostrich:GroundDashAnimationDuration": "after this duration, ground dash animation can start blending out",
    "FortCharacterVehicle_Ostrich:AirDashOverrideAngle": "air dash dir overrides velocity if angle in degrees between dash direction and velocity is greater than this",
    "EFortKickReason.GenericKick": "all non specific kick reasons, set by KickPlayer if not set elsewhere",
    "FortNavigationActor_EventGraphItem:LevelDefinedNodeToRollFor": "all the tags we might want this package to be, no tag is an error, one tag is a discrete node, multi tags will randomly roll for the node",
    "FortProjectileAthena:TimeToWaitForPawnHitBeforeKillOnServer": "allow data to specify how long projectiles can live",
    "FortAthenaMutator_SpectateBeforeRespawn": "allows players to spectate other living players while they are dead and waiting for respawn",
    "EAthenaWinCondition.TimedLastMenStanding": "altered last man/men standing where everyone alive after a set amount of time wins",
    "EHotspotTypeConfigMode.AlwaysAdd": "always add ExtraTypeConfig slots",
    "EFortGameType.MAX": "always at the end",
    "EFortPrioritizedWidgetPriority.NumberOfPrios": "always at the end",
    "EFortHealingIncrementType.HealthOverHealing": "amount of healing wasted (healed above full health)",
    "EFortHealingIncrementType.HealingAmount": "amount of health gained from this event",
    "EFortShieldGainIncrementType.ShieldGainedOverFull": "amount of shield gain wasted (gain above full shields)",
    "EFortShieldGainIncrementType.ShieldGainAmount": "amount of shields gained from this event",
    "MissionTimerData:LastTimeAddedOrRemoved": "amount of time added or removed since the last update",
    "SwingingControlParams:UnattachedGroundedCounterInput_MaxDrag": "an additional drag force that is scaled based on input direction relative to current velocity. the max force is applied when input is directed away from current velocity.",
    "SwingingControlParams:UnattachedGroundedCounterInput_MinDrag": "an additional drag force that is scaled based on input direction relative to current velocity. the min force is applied when input is directed toward from current velocity.",
    "UraniumRoundData:SingleRoundInfos": "an array of which teams won each round (indexed by round number)\n This array should be NumberOfRounds long",
    "CrewPlatformAndCountriesPair:CountryCodes": "an empty list of Country Codes is treated as an \"Any\" entry - if CountryCodes is empty, only condition off the Subscription Platform",
    "EFortServerContentRestartReason.ForceRestartFlagActiveStateChanged": "an event flag was added or removed from the list of flags that force a parent restart",
    "CalendarRequirement:DaysFromEeventStart": "and if event must be active an optional day offset",
    "VkResolvedContent:Resolutions": "any moduleId->version resolutions we want to enforce (optional). Used to ensure WYSIWYG if we're publishing a recent preview.",
    "SwingingControlParams:InitialAttachedSpeed": "apply an initial speed when attaching to give the player a quicker boost toward the attach point",
    "FortNevadaVehicle:bInitialLift": "apply lift to a certain height when first entering the vehicle",
    "ECoastState.PreDismount": "applying push force on way to coasting",
    "FortCharacterVehicle_Ostrich:ApproxGunnerCameraOffset": "approximate gunner's camera offset",
    "GiftBoxInfo:Params": "arbitrary item-specific params (usually for the localized message)",
    "FortCommunityVotesState:Candidates": "array of offer candidates (one or more may be present with the same OfferId in \"CommunityVoteWinners\" storefront)\nif voting is available use UFortMcpProfileAthena::GetVoteInfo(ElectionId) to see if there's votes available to cast\nuse UFortMcpProfileAthena::ApplyVote to to cast a vote",
    "FortGameStateZone:GameplayVotesArray": "array of voters to keep track of who voted for what",
    "XPEventEntry:Accolade": "asset id to the accolade, this holds the name, XP amount, Icons and so forth for display",
    "EFortSpawnActorTime.StartOfStormHoldTime": "at the start of the hold time of the storm",
    "SwingingControlParams:SpeedForMaxInputAccel": "at this speed the player will have the full input accel force",
    "FortMovementComp_Character:SwingAttachLocation": "attach location for swinging",
    "LootPackageRow:ItemAttributesJson": "attributes to set on the item dropped by this row",
    "BuildingPropMusicPlayer:SongAudioComponent": "audio component playing the song",
    "TireInfo:SuspensionHeavy": "audio property for tire mod",
    "TireInfo:SuspensionLight": "audio property for tire mod",
    "TireInfo:SuspensionMedium": "audio property for tire mod",
    "TireInfo:TireDirtLoop": "audio property for tire mod",
    "TireInfo:TireGrassLoop": "audio property for tire mod",
    "TireInfo:TireRoadLoop": "audio property for tire mod",
    "EVkModuleAccess.Public": "available to any project owned by the same team (at the time of dependency creation)",
    "FortAthenaSKVehicle:AxleOffsetZ_B": "axle Z offset for back tires",
    "PawnDamageZones:bActive": "bActive status. Defaults to Active, can be disabled at runtime (and networked).",
    "FortGameStateOutpost:bWargameActive": "bOutpostDefenseActive is not set until 8 seconds after the mission is activated and starts, this messes up some things that key off this variable, so this is definitive about the very start of the combat phase",
    "FortPlayerPawn:bUseControllerRotationYawToRestore": "bUseControllerRotationYaw value before the personal vehicle movement style is activated",
    "EFortKickReason.WasBanned": "ban hammer",
    "DeathEvent": "bare bones information on a death event that unicorn records. A death event is made for every elimination in the game.",
    "VkModuleBinaries:BaseUrl": "base URL for Files",
    "FortAthenaVehicle:ImpulseResponseMultiplier": "base value, read current from ability set",
    "FortAthenaVehicle:ImpulseResponseZBias": "base value, read current from ability set",
    "ERewardPlacementBonusType.Duo": "based on placement when in a game where the player is in a game with one other person",
    "ERewardPlacementBonusType.QuickDuo": "based on placement when in a game where the player is in a game with one other person (short length game)",
    "ERewardPlacementBonusType.LargeTeam": "based on placement when in a game where the player is part of a large team",
    "ERewardPlacementBonusType.QuickLargeTeam": "based on placement when in a game where the player is part of a large team (short length game)",
    "ERewardPlacementBonusType.MediumTeam": "based on placement when in a game where the player is part of a medium sized team",
    "ERewardPlacementBonusType.QuickMediumTeam": "based on placement when in a game where the player is part of a medium sized team (short length game)",
    "ERewardPlacementBonusType.Squad": "based on placement when in a game where the player is part of a squad (usually 4)",
    "ERewardPlacementBonusType.QuickSquad": "based on placement when in a game where the player is part of a squad (usually 4) (short length game)",
    "ERewardPlacementBonusType.Solo": "based on placement when in a game where the player is solo",
    "ERewardPlacementBonusType.QuickSolo": "based on placement when in a game where the player is solo (short length game)",
    "ERewardPlacementBonusType.TwoTeam": "based on placement when in a game where there are exactly two teams",
    "ERewardPlacementBonusType.QuickTwoTeam": "based on placement when in a game where there are exactly two teams (short length game)",
    "FortWeaponRanged:BeamNiagaraSystem": "beam asset resolved for use",
    "FortCharacterVehicle_Ostrich:BeamAttachName": "beam attach socket name",
    "FortCharacterVehicle_Ostrich:BeamLifeName": "beam life param name",
    "FortWeaponRanged:BeamNiagaraSystemAsset": "beam particle system asset used in firing FX (on every shot)",
    "FortWeaponRanged:BeamParticleSystem": "beam particle system used in firing FX (on every shot)",
    "FortCharacterVehicle_Ostrich:BeamScaleName": "beam scale param name",
    "FortDagwoodVehicle:PreFlipControlLossTimer": "before the flip starts, lose control for a duration",
    "EventRecord:ActiveSince": "best guess at how long this event has been active. non-authoritative",
    "EventRecord:ActiveUntil": "best guess at how long this event will be active. non-authoritative",
    "VkModuleBinaries:Files": "binary files to download (prepend BaseUrl)",
    "FortPlayspaceGameMode:bAllowRestartFromPlayspaceGameStateComponent": "bool to check if we should allow Playspace Gamestate Component to perform restart",
    "FortPlayerControllerComponent_TacticalSprint:bUseMovementModeExtension": "boolean to turn off movement mode extension per component",
    "FortNevadaVehicle:BoostChargeProgress": "boost charge progress cursor",
    "FortNevadaVehicle:BoostChargesAvailable": "boost charges",
    "FortNevadaVehicle:CachedBoostMoveDir": "boost move direction",
    "EDadBroHealthType.Guy": "boss health",
    "BuildingNavObstacle:LocalBounds": "box defining navigation obstacle in actor's local space",
    "SwingingControlParams:AttachedNoAccelBraking": "braking decel applied attached with no input accel",
    "SwingingControlParams:AttachedGroundedSwingingBraking": "braking decel applied attached, swinging and grounded",
    "SwingingControlParams:UnattachedGroundedBraking": "braking decel applied while unattached and grounded",
    "FortDagwoodVehicle:CurrentBumpiness": "bumpiness value used for adjusting shocks on and doing rumble [0-1]",
    "AudioWorldizationGlobalSettings:Quadrants": "buses for each quadrant, ordered N, E, S, W, Up",
    "MusicPlayerComponentBase:LoadedMusicAsset": "cache a pointer to the asset off so the garbage collector doesn't unload\nour midi/mogg while it's scheduled and waiting to play",
    "PoiDiscoverabilityDataEntry:bWasInitiallyDiscovered": "cache for change detection",
    "FortCharacterVehicle_Ostrich:ChargeJumpStartTime": "cache the time clients receive jump start flag",
    "FortControllerComponent_SkydiveFeedback:SkydiveCamShake": "cached cam shake for skydive feedback dynamic updating",
    "FortDagwoodVehicle:bCanBoostPitch": "cached flag for start/stop boost pitch",
    "FortNevadaVehicle:Native_LastHitNormal": "cached last damage location normal",
    "FortNevadaVehicle:Native_LastHitLocation": "cached last hit location",
    "FortCharacterVehicle:OstrichAnimInstance": "cached ostrich anim instance",
    "FortUnderwaterDamageComponent:OwnerAbilityComp": "cached owner ability system component",
    "FortCharacterVehicle_Ostrich:ShieldActor": "cached shield actor for guner",
    "FortAIHotSpot_Building:ExtraTypeConfig": "cached value of UBuildingActorHotSpotConfig.ExtraTypeConfig",
    "FortDagwoodVehicle:DriverCamShakeClass": "cam shake class for driver",
    "FortDagwoodVehicle:HandBrakeCamShakeClass": "cam shake class for handbrake",
    "FortDagwoodVehicle:HardLandingCameraShake": "cam shake class for hard landings",
    "FortControllerComponent_SkydiveFeedback:SkydiveCamShakeClass": "cam shake for class",
    "SavedSpectatorCameraState:FilmbackSettings": "camera and lens settings",
    "FortWeaponComponent_Swinging:CameraLocation": "camera current location",
    "FortWeaponComponent_Swinging:CameraDirection": "camera facing direction",
    "FortDagwoodVehicle:PassengerCameraModeClass": "camera mode class for passengers",
    "FortMeatballVehicle:BoostingCamera": "camera mode for boosting",
    "FortCharacterVehicle_Ostrich:DriverChargeJumpCamera": "camera mode for driver during charge jump",
    "FortNevadaVehicle:PassengerCameraModeClass": "camera mode for passengers",
    "FortNevadaVehicle:CockpitDestroyedCamShake": "camera shake for cockpit destroyed",
    "FortDagwoodVehicle:AccelCameraShakeInstance": "camera shake instance for accel",
    "FortDagwoodVehicle:DriverCameraShakeInstance": "camera shake instance for driver",
    "FortDagwoodVehicle:HandBrakeCameraShakeInstance": "camera shake instance for handbrake",
    "FortDagwoodVehicle:OffroadCameraShakeInstance": "camera shake instance for offroad",
    "EObjectTypeUsability.BlockedGameExperienceFiltering": "cannot be used because the class is excluded by game experience filtering",
    "EObjectTypeUsability.BlockedInvalidDependency": "cannot be used because the class wouldn't be a valid dependency for the quest asset",
    "FortRangedWeaponStats:PitchLimitForPerBulletRecoil": "cap the amount of camera pitch that can be applied by per-bullet recoil, so that the angle of the aim vector with world-up doesn't drop below this",
    "BuildingItemCollectorActor:bCurrentInteractionSuccess": "captures the ConsumeItems() result and stores it until after the BlueprintOnInteract() and OnInteract.Broadcast() then sets it back to false. This bool is only valid buring this window",
    "EUraniumCartMovementRuleOnNewRound.MoveToRandomCheckPointOfNewSpline": "cart is moved to a random checkpoint of a new spline chosen at random",
    "EUraniumCartMovementRuleOnNewRound.MoveToNextCheckPointOfNewSpline": "cart is moved to the next check point index of a new spline chosen at random",
    "EUraniumCartMovementRuleOnNewRound.MoveToStartOfNewSpline": "cart is moved to the start of a new spline chosen at random",
    "EUraniumCartMovementRuleOnNewRound.MoveToNextCheckpoint": "cart moves to the next checkpoint",
    "EUraniumCartMovementRuleOnNewRound.NoChange": "cart stays where it is",
    "SpecialActorStatData:CategoryTag": "category tag of the special actor being tracked",
    "EAthenaGameMsgType.CenterCriticalMessage": "center screen critical message",
    "EAthenaGameMsgType.CenterImportantMessage": "center screen important message",
    "EAthenaGameMsgType.CenterMessage": "center screen message",
    "FortWorldSettings:bValidateNavGraphConnectivity": "change this value during PIE or simulate to force navgraph validation",
    "EFortItemType.AthenaCharmCosmetic": "charms that attach to the characters, weapons, pickaxes,",
    "FortWeaponComponent_Swinging:MaxDotForProximityDetach": "checks the dot between player velocity and the offset to the attach point to see if we've \"gone past\" the target",
    "EDamageCauserType.RangedWeapon": "chopped down by pickaxe",
    "DampedSpringConfig:MaxAccel": "clamps the strength of the total force applied",
    "EFortButterCakeFootPhase": "class UAnimSequence;",
    "FortMLDeformerComponent": "class UFortMLDeformerComponent\n\nFortnite specific wrapper class for the engine MLDeformer component that effectively disables\nthe ML Deformer component when the owning pawn is not the current View Target.",
    "MLDeformerComponentManager": "class UMLDeformerComponentManager\n\nDynamically creates MLDeformer components for actors that require them.",
    "FortDagwoodVehicle:VehicleClass": "class of the vehicle",
    "EContentRequestInstallState.Initialized": "client has no state, requests are not in this state this is uninitialized, NOTREQUESTABLE STATE",
    "EFortKickReason.ClientIdRestriction": "client id restriction",
    "EClientContentReadinessV2.Disconnecting": "client is in the process of disconnecting",
    "FortContentBeaconClientV2:IsPendingProjectIDSet": "client only variable",
    "EContentRequestInstallState.Uninstalled": "clients are uninstalled host could be loaded or active",
    "FortAthenaVehicle:PredictedDestroyedBuildings": "clients need to hold onto buildings they've predicted destruction on, in case of a mis-predict",
    "FortNevadaVehicle:NativeSys_CockpitDestroyed": "cockpit destroyed particle system",
    "FortNevadaVehicle:CockpitDeactivatedForceFeedback": "cockpit destroyed rumble",
    "FortNevadaVehicle:CockpitDamagedSound": "cockpit sound damaged",
    "FortNevadaVehicle:CockpitDestroyedSound": "cockpit sound destroyed",
    "FortNevadaVehicle:CockpitRespawnSound": "cockpit sound respawn",
    "LootTierDataRow:LootPackageCategoryWeight": "colon delimited list of loot package category weights",
    "LootTierDataRow:LootPackageCategoryMax": "colon delimited list of loot package maximum drops per category",
    "LootTierDataRow:LootPackageCategoryMin": "colon delimited list of loot package minimum drops per category",
    "MaterialParamterDef:ColorParams": "color data",
    "ParticleParamterVariant:ColorParams": "color data, use to set the vector param on the particle system, same operations as VectorParams just different way to view the data",
    "EFortHealingIncrementType.TotalHealingDone": "combined healing and overhealing done durign this event",
    "FortAIGoalManager:CombinedQueries": "combined queries created from assignment & AI, list for GC",
    "EFortShieldGainIncrementType.TotalShieldGained": "combined shield gain and overhealing done during this event",
    "EContentRequestInstallState.Loaded": "completely loaded states",
    "CompletionCountEntry": "completion count entry for usage with CompletionCounts array",
    "FortPlayerPawn:UnderwaterDamageComponent": "component for handling underwater damage",
    "FortVehicleAudioController:EngineComponent": "component tasked with playing the main engine loop",
    "NevadaMoveModeConfig": "config data about movement modes",
    "DampedSpringConfig": "configure a damped spring system",
    "FortPhysicsChainWeaponComponent:bCreateChain": "connects a chain automatically if the current attach point is already filled and this is the second end point",
    "SwingingControlParams:DistanceThresholdForGrounded": "consider the player grounded if distance is less than this",
    "ItemQuantity": "container type for a grouping of templateId and quantity",
    "PhysicsImpactData:Settings": "continuous modulation parameters",
    "PhysicsStateData:Settings": "continuous modulation parameters",
    "EUraniumRoundPhase.FadeOut": "control is removed and the screen is told to fade out",
    "FortWeaponRanged_Ostrich:RocketsCooldown": "cooldown after firing rockets",
    "FortCharacterVehicle_Ostrich:bDriverPrimaryCooldownReady": "cooldown for driver primary attack",
    "FortCharacterVehicle_Ostrich:bDriverSecondaryCooldownReady": "cooldown for driver secondary attack",
    "FortCharacterVehicle_Ostrich:ShieldBoostCooldown": "cooldown of shield boost",
    "FortVehicleSeatWeaponComponent:CachedWeaponOverheatData": "copy of overheat specific data for the weapon",
    "FortPlayerSurveyCMSCondition:ComparisonValue": "could be interpreted as integer/decimal depending on condition type, e.g. ComparisonValue = \"0.015\"",
    "FortWeaponRanged:TimeRemainingForBulletSpread": "count down timer for bullet spread recovery.",
    "FortDagwoodVehicle:FlipAirTimer": "count how long we're in the air",
    "FortDagwoodVehicle:FlipLanding": "count how long we've been in contact with geometry after flipping",
    "FortWeaponRanged_Ostrich:ServerLoadedRockets": "count how many rockets loaded on server for use by audio",
    "FortMovementComp_Character:SwingDetachTime": "counting duration of being detached",
    "FortHoagieVehicle:TimeWhileCritical": "counts up how long we've been critical",
    "FortHoagieVehicle:TimeWhileLanding": "counts up how long we've been landing/crashing",
    "FortHoagieVehicle:CrashingNotMovingTimer": "counts up while crashing and moving slow/not moving",
    "FortNevadaVehicle:CrashingNotMovingTimer": "counts up while crashing and moving slow/not moving",
    "FortHoagieVehicle:CrashingScrapingTimer": "counts up while crashing and touching stuff",
    "FortCraftingResultNotification": "crafting notification",
    "FortHoagieVehicle:bHasAppliedCrashDamage": "crash damage while critical only applies - after that the fire does the rest.",
    "EBuildingNavObstacleType.SmashWhenLowHeight": "creates smashable area even if there's not enough room above (e.g. under stairs)",
    "EBuildingNavObstacleType.SmashAll": "creates smashable area for all AI",
    "EBuildingNavObstacleType.SmashSmasherOnly": "creates smashable area for smasher, no effect on husk",
    "EBuildingNavObstacleType.SmashOnlyLowHeight": "creates smashable area only if there's not enough room above (e.g. under stairs)",
    "EFortKickReason.CrossPlayRestriction": "cross play restriction (ie mixed consoles)",
    "PhysicsStateData:CrossfadeInputFast": "crossfade values for Fast loop based on Speed",
    "PhysicsStateData:CrossfadeInputSlow": "crossfade values for Slow loop based on Speed",
    "FortCharacterVehicle_Ostrich:LocalSelfDestructPrimeUnderway": "cue active while initiating a self destruct",
    "FortCharacterVehicle_Ostrich:IndividualRocketFired": "cue for firing individual rockets",
    "FortCharacterVehicle_Ostrich:RocketFireCue": "cue for firing rockets",
    "FortCharacterVehicle_Ostrich:IndividualRocketLoaded": "cue for loading individual rockets",
    "FortCharacterVehicle_Ostrich:RocketLoadingCue": "cue for loading rockets",
    "FortCharacterVehicle_Ostrich:RocketSettleCue": "cue for settle rockets",
    "FortUnderwaterDamageComponent:CurrentLevel": "current GE level to apply",
    "FortCharacterVehicle_Ostrich:PassengerCamBlendTarget": "current blend target value for passenger cam vertical offset",
    "FortCharacterVehicle_Ostrich:BlendedPassengerVerticalCamOffset": "current blend value of passenger cam vertical offset",
    "FortCharacterVehicle_Ostrich:GunnerAimPoint": "current cached aimpoint of the gunner",
    "FortDagwoodVehicle:CurrentCameraAssistStrength": "current cam assist strength",
    "BuildingSMActor:ConstructionAudioComponent": "current construction sound component",
    "CalendarDownload:CurrentTime": "current events time as of the request",
    "FortDagwoodVehicle:CurrentForwardAcceleration": "current forward accel applied",
    "AttachedWheel:CurrentHealth": "current health of the tire",
    "LimitedLifeDataEntry:Lives": "current number of lives",
    "FortDagwoodVehicle:ActivePoppedTireReaction": "current pop tire reaction being applied",
    "ProfileGoRequest:CurrentResult": "current result",
    "FortAthenaVehicle:TireSurfaces": "current surface a specific tire is on",
    "ComponentRecordRedirect:NewComponentName": "currently not hooked up",
    "HomebaseSquadAttributeBonus:BonusCurve": "curve of bonus magnitudes given by a crew member in this slot",
    "FortLayeredAudioComponent:FloatParameters": "curve/attack/release values for N number of float params to be set in the sound cue",
    "FortCharacterVehicle:IgnoreRiderDamageFalloff": "damage falloff is not applied to riders if any of these tags are used",
    "FortNevadaVehicle:NativeComp_DamageState": "damage state audio comp",
    "FortNevadaVehicle:NativeComp_DamageStateLastLife": "damage state last life audio comp",
    "FortNevadaVehicle:Native_DamageStateLastLifeSound": "damage state last life sound",
    "FortNevadaVehicle:NativeSys_DamageStateFX": "damage state particle system",
    "FortNevadaVehicle:NativeComp_DamageStateFX": "damage state particles",
    "FortNevadaVehicle:Native_DamageStateSound": "damage state sound",
    "TireInfo:PoppedTireSpringDamp": "damp used when tire is popped",
    "TireSimulationRuntimeData:PoppedTireSpringDamp": "damp used when tire is popped",
    "DampedSpringConfig:Damping": "damping force that scales how quickly the system comes to rest",
    "ProjectileHomingData": "data about homing projectiles that is replicated to clients",
    "GrayscaleGradient:Curve": "data members",
    "TireSimulationRuntimeData": "data used at runtime for tire simulation",
    "InitialVolumeSettings:transitionTime": "db! 0 = normal, -96 = silent!",
    "BuildingGameplayActorPetrol:DamageRange": "deal damage in this range",
    "EFortServerContentRestartReason.CreativeCuratedHubChanged": "default",
    "FortPlayerStartupController:ErodeShieldTime": "default",
    "FortPlayerStartupController:ContainmentTimer": "default (5 minutes)",
    "FortAIPawn:BehaviorTree": "default behavior tree asset to run",
    "FortAthenaAIBotController:BehaviorTree": "default behavior tree asset to run",
    "FortSplineGroundPath:StaticMeshScaleTarget": "default scale a section will lerp into.",
    "EFortKickReason.NotKicked": "default state",
    "BuildingActorHotSpotDirection:TypeConfigUsage": "defines when BoundsBasedConfig slots will be added to hotspot",
    "FortCharacterVehicle:ClearMoveIgnoreActorsDelay": "delay after adding a move ignore actor until we clear them out",
    "FortPlayerControllerGameplay:OnAddFuel": "delegate for telling the fuel HUD widget that we just added fuel",
    "BuildingActor:OnAbilitySystemComponentInitialized": "delegate that fires when the ability system component is initialized",
    "FortPlayerPushableCart:PlayerPushableCartOnTeamsRolesChanged": "delegate that is triggered when team roles changed. Is triggered on the server and clients",
    "McpInAppPurchases:FulfillmentCounts": "deprecated",
    "FortGameplayEffectModifierDescription:bIsBuff": "deprecated, use DisplayType parameter",
    "SlotDescription": "description of how to set up the CMS tiles in each named slot",
    "AthenaMidSeasonUpdate:Name": "descriptive name for this Mid Season update.  For organizational purposes only.",
    "FortHoagieVehicle:FoliageOverlapsBoxTag": "destroy foliage with this tag",
    "FortExpeditionResultNotification:bExpeditionSucceeded": "did the expedition succeed",
    "CustomizableObjectProjectorValue:UpDirection": "differentiated from Direction on the basis that UpDirection needs to be the current pawn Up",
    "FortDagwoodVehicle:FlipYawMult": "directional multiplier for flips",
    "FortMovementComp_Character:SwingingDistanceToGround": "distance of the pawn to the ground(from the feet location) while swinging",
    "ProjectileHomingData:LockTargetDistanceThreshold": "distance threshold for firing blueprint events during lock on homing",
    "FortWeaponComponent_Swinging:DistanceForProximityDetach": "distance to the attach point needed to trigger a proximity detach",
    "SwingingControlParams:LengthForMaxReelForce": "distance to the attach point used to apply the reel force curve",
    "SwingingControlParams:GroundTraceDistance": "distance to trace when looking for ground distance",
    "EPostGamePlacement.NoPlacement": "do not show the player how they placed",
    "FortAthenaVehicle:PawnIgnoreBumpTags": "don't bump pawns that have any of these tags",
    "SwingingControlParams:MinTimeDetachedForExit": "don't exit swinging movement until at least this duration has elapsed after detaching",
    "FortUnderwaterDamageComponent:DamageDelay": "don't start dealing damage until we've been under water this long",
    "FortHoagieVehicle:bOrientedForLanding": "don't start landing until the vehicle is roughly upright",
    "Storefront": "download structure for a storefront (list of items for sale)",
    "KeychainDownload": "download structure for the encryption keys",
    "CatalogDownload": "download structure for the store catalog",
    "EDamageCauserType.Vehicle_Empty": "driven through by a vehicle",
    "EDamageCauserType.IndirectCauser": "driven through by a vehicle (driver exists prior to collision)",
    "FortCharacterVehicle_Ostrich:bDriverLocalChargingJump": "driver's local charging jump flag",
    "FortCharacterVehicle:DriverExitLaunchScale": "drivers exit launch scalar",
    "FortCharacterVehicle:PassengerExitLaunchScale": "drivers exit launch scalar",
    "ProjectileMovementDrunkConfig:HomingRandomTargetPositionRadius": "drunk projectiles home toward a random position centered at the aim point within this radius",
    "FortCharacterVehicle_Ostrich:SelfDestructInteractDuration": "duration of self destruct interact",
    "ProjectileMovementDrunkConfig:HomingDrunkDuration": "duration of the drunk behavior",
    "FortCharacterVehicle_Ostrich:KickRootMotionDuration": "duration of the root motion of the kick",
    "FortNevadaVehicle:Native_CockpitMaterial": "dynamic material instance for cockpit",
    "FortNevadaVehicle:Native_EnergyFieldMatInstance": "dynamic material instance for energy field",
    "FortNevadaVehicle:Native_EnergyRingMatInstance": "dynamic material instance for energy ring",
    "ETimespanUnitDisplayFormat.Abbreviated": "e.g. \"Days\" \"Months\"",
    "EDamageCauserType.Inactivation": "e.g. physics tree chain reaction, Fortanium, etc.",
    "ExperimentalBucketPercentList:BucketPercents": "each entry is meant to correspond to the buckets defined by the experiment.",
    "FortAthenaVehicle:PushForceCurrentMultiplier": "easy way to clamp top speed in things like water",
    "FortGameplayEffectContext:EffectDirectionX": "effect direction X  - used because we can't netserialize vectors here",
    "FortGameplayEffectContext:EffectDirectionY": "effect direction Y - used because we can't netserialize vectors here",
    "FortCommunityVotesState:ElectionId": "election unique ID (will be blank if no election is currently active)\nvoting may or may not be open currently (if storefront \"CommunityVoteWinners\" is empty then voting is open)",
    "FortGameModeAthena:bEnableCompetitiveDDoSDetectionMatchInvalidation": "enable ending matches early if we detect a given number of escalations to the given DDoS severity (see engine config [DDoSDetection] for tiers)\nwithin a given time threshold after we end aircraft phase. the above detections should limit the effectiveness of DDoS attacks in warmup and aircraft,\nbut we can't have such clearly defined behavior detection during the course of a match for a number of reasons. that being said, we can determine\nanalytically the threshold at which a match is _almost certainly_ being DDosed during safezones and kill it to take away their candy.",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:bEnableCompetitiveMissingPlayerMatchInvalidation": "enable ending matches early if we detect abnormalities in the number of players alive both at the start and end of aircraft phase.\nfor this to happen, either the internet is on fire or someone is trying to DDoS the server. in any case, we do not want the match to count.",
    "FortPlayerPawn:bHasWaterParticleSystem": "enable/create the water particle systems effects",
    "FortPlayerControllerGameplay:bDisplayNPCNumbers": "enables/disables client debug display of server NPC numbers",
    "FortWorldSettings:WorldCells": "encoded cells with static geometry, used for automatic creation of navigation links (jump down)",
    "InteractionSplinePoints:SplineEndLocation": "end of the spline on the Fabric interactable",
    "FortAthenaFerretVehicle:BoostParam": "end of virtuals used with VehicleSeatWeaponComponent",
    "FortOctopusVehicle:CacheDriverCameraShake": "end of virtuals used with VehicleSeatWeaponComponent",
    "FortSpaghettiVehicle:CacheDriverCameraShake": "end of virtuals used with VehicleSeatWeaponComponent",
    "VkProjectUserInfo:Permissions": "entitlement-based permissions tokens",
    "ETagGoalScoringCategory": "enum class ETagGoalScoringCategory : uint8\n Not using enum class because then NumCategories cannot be used for the size of a fixed-size array.",
    "EProgressiveSetProgress.NoProgress": "enum order defines sorting order when comparing by set progress",
    "FortMovementComp_GroundSpline:SplineDistanceReplicationRecoveryMinDistancePerSecond": "even if the speed is 0, this is the minimum amount of distance that will be recovered per second",
    "FortLayeredAudioComponent:OnOneshotEvent": "event that gets called whenever a one-shot is triggered from this component",
    "FortPlayerControllerAthenaXPComponent:WaitingQuestXp": "events from EventArray that are tied to a quest and we want to sit on until the client displays the reward gain for said quest",
    "FortPoiManager:AllPoiVolumes": "every poi volume",
    "FortNavigationVisibilityComponent:ExcludedActiveCameraTags": "excluded camera tags",
    "VkExperienceData": "experience data, currently bundled with game feature data, but may move elsewhere",
    "McpBanInfo:ExploitProgramName": "exploit program name, if exists",
    "FortControllerComponent_SkydiveFeedback:DropSpeedBlendExponent": "exponent used to have a curve mapping for the drop speed alpha",
    "PenetrationAvoidanceFeeler:Extent": "extent to use for collision when tracing this feeler",
    "FortCharacterVehicle_Ostrich:DestroyDelayAfterExplosion": "extra lifespan after explosion to allow for replication",
    "FortCharacterVehicle:ExtraInteractTraceRange": "extra range on the interact trace check",
    "EAppStore.DebugStore": "fake store that just short-circuits with success (this is only enabled in dev environments).",
    "FortMissionState:TimerForOnAllPlayersLoadedIn": "fall back timer that will be used for SetTimer function to call the OnAllPlayersLoadedIn event once expired",
    "FortFeedbackDropdownCategoryHotfix_Modify:bAddFlag": "false will remove flag",
    "ECoastState.Pedaling": "feet on cart, coasting",
    "ECoastState.Mount": "feet on ground regular drive mode",
    "FortWeaponComponent_Swinging:TargetingHitResult": "final hit result of targeting",
    "FortAnimNode_Flap:SelectionMode": "find what is best\nmax angle",
    "EDamageCauserType.Vehicle": "fire",
    "FortAthenaVehicle:FireEnvDamageTags": "fire damage tags",
    "FortDagwoodVehicle:FireDamageTags": "fire damage tags",
    "EAthenaWinCondition.FirstToGoalScore": "first player to reach the goal score wins",
    "FortUnderwaterDamageComponent:bIsUnderWater": "flag for caching under water state",
    "FortCharacterVehicle:bDidChargeJump": "flag for if we did a charge jump",
    "FortProjectilePetrol:bImpacted": "flag for preventing repeat impacts",
    "FortCharacterVehicle_Ostrich:bLocalJumpButtonDown": "flag for the actual jump button pressed",
    "FortDagwoodVehicle:bTireSmokeActive": "flag for tire smoke",
    "FortDagwoodVehicle:bBoostFailed": "flag for tracking boost fail state",
    "FortMeatballVehicle:bBoostFailed": "flag for tracking boost fail state",
    "FortPlayerController:bOnPressExecuteJetpack": "flag indicating the button was pressed",
    "FortAthenaVehicle:bUseGravity": "flag indicating this vehicle is currently using gravity or not in the async update",
    "FortCharacterVehicle_Ostrich:bEmoteAudioForceStopped": "flag to fix an out of order bug with emote audio due to the unique nature of emotes on the mech",
    "FortDagwoodVehicle:bFlipDidLeaveGround": "flag to know if we ever left ground, so we can explode on impact during a flip-crash",
    "FortDagwoodVehicle:bCanCinematicFlip": "flag to prevent re-entering flip state",
    "VkContentPackage:Content": "flattened array of all modules",
    "FortDagwoodVehicle:bInFlipPitch": "flip pitch stage",
    "FortDagwoodVehicle:bInFlipYaw": "flip yaw stage",
    "EncounterVarRow_Float": "float Encounter Variable row",
    "RockVehicleSuspensionConfig:Stiffness": "float Frequency = 0.0f;",
    "MaterialParamterDef:FloatParams": "float data",
    "ParticleParamterVariant:FloatParams": "float data",
    "FortAthenaMutator_Wax:OnFlyingTokensApplied": "flying tokens applied",
    "AthenaBarrierFlag:FoodDisplayData": "food team is used to index into this array to get correct HeadMesh, Mini Map, and Compass icons",
    "MapRangeClamped_Ranges": "for collecting input range parameters used in UKismetMathLibrary::MapRangeClamped calls",
    "FortVariantSprayCustomizerCosmeticOptions:ChannelOptions": "for each Variant Channel tag, specific channel options will be used",
    "ETrackVerticality.Max_None": "for the 'gradual' slope that takes two tiles to go up/down one tile.",
    "ProgressiveStageItemInfo:RewardTokens": "for the most part, there will only ever be one Reward Token per stage item; however, override display data may need to refer to multiple Reward Tokens",
    "FortNevadaVehicle:TractorBeamObjectsTypes": "for the trace query looking for tractor beam targets",
    "FortNevadaVehicle:CrashingDesiredUp": "for tilting the vehicle while it's crashing",
    "FortDagwoodVehicle:bEnableNativizedTick": "for toggling the nativized tick at runtime so we can debug compare nativized to BP behavior",
    "FortSoundLibraryPlaybackSettings:bForceComponentCreation": "force creation of an audio component",
    "VkExtendedError:FormatNs": "format key",
    "VkExtendedError:Message": "format string namespace (for localized text)",
    "VkExtendedError:Params": "formatting string",
    "BuildingProp_QuestGlyph": "fortbytes / quest glyph / datachip",
    "FortDagwoodVehicle:FlipYawOriginalForward": "forward dir at time flip yaw starts",
    "LevelStreamedDeleteActorRecord:ActorID": "found by calling Actor->GetFName()",
    "SwingingControlParams:AttachedNoAccelFriction": "friction applied while attached with no input accel",
    "SwingingControlParams:AttachedGroundedSwingingFriction": "friction applied while attached, swinging and grounded",
    "SwingingControlParams:UnattachedGroundedFriction": "friction applied while unattached and grounded",
    "EMidiControllerID.PresetSelection": "from midi specification...\nNOTE: If you add any here also add them to the GetControllerName function!",
    "EHighlightFeatures.InterestingDeathCause": "from standing, did we get eliminated. Name is wrong but the values are there in the DB now!",
    "EFortFrontendInventoryFilter.WorldItemsTransfer": "frontend storm shield storage, read only",
    "RuntimeFuelInfo": "fuel capacity and consumption properties",
    "VkContentManifest:Content": "full content list",
    "ProjectileMovementDrunkConfig:HomingDrunkBlendOutRange": "fully blend out drunk turning inside this range",
    "EFortMutatorReturnValue.Override": "functions returning this value should be handled by the calling code",
    "EFortMutatorReturnValue.OverrideReturn": "functions returning this value should be handled by the calling code and want to return from the function they were called from",
    "EFortMutatorReturnValue.Ignore": "functions returning this value want to be ignored and not processed by the calling code",
    "ERewardPlacementBonusType.SinglePlacement": "game where only first place receives a bonus (used for game modes where there is a single event that will determine a winner such as Heist)",
    "FortDagwoodVehicle:SpeedLinesCueTag": "gameplay cue tag for speed lines",
    "FortMissionManager:PrimaryMissionGE": "gameplay effect applied to building actors spawned for primary missions",
    "FortCharacterVehicle_Ostrich:KillExplosions": "gameplay effects applied after a delay when the ostrich reaches zero health",
    "PerkMutatorData:ShowPerkSelectTag": "gameplay tag for showing perk select screen",
    "VkProjectSnapshot:UniqueId": "generated id unique to the snapshot",
    "SpecialActorSingleStatData:StatLogicValue": "generic value that can be used for logic when tracking the stat (eg. radius of check for \"NumEliminationNearby\")",
    "FortGameModeAthena:AISettings": "gets overridden by playlist's AI settings if the playlist has any",
    "FortDagwoodVehicle:bDidHandbrakeCatchup": "gets set true to prevent re-entering into a handbrake catchup state",
    "FortAthenaMutator_Wax:OnTokensAwarded": "given tokens on event",
    "EFireModeType.Unset": "go to whatever the user setting is",
    "EDeployableBaseBuildingState.Empty": "goal states",
    "SwingingControlParams:GravityMultiplierWhileAttached": "gravity multiplier applied while attached",
    "SwingingControlParams:SwingGravity": "gravity while swinging",
    "FortUnderwaterDamageComponent:GE_UnderWaterDamage_Handle": "handle to the GE that applies damage",
    "FortAthenaVehicle:BaseTireInfo": "handling params that are defined in configs",
    "EEndOfMatchReason.TimeRanOut": "happens in Score Based Modes indicating the game's score was reach by 1 or more teams",
    "EEndOfMatchReason.WinEventOccurred": "happens in Timed and Score based modes to indicate time ran out so it will pick the winner",
    "EEndOfMatchReason.AllLoggedOut": "happens when a mode grants victory due to a special win condition",
    "EEndOfMatchReason.AllEliminated": "happens when all players have logged out of the game",
    "EEndOfMatchReason.ScoreReached": "happens when only 1 player or 1 team is standing for victory",
    "EFortItemType.HardcoreModifier": "hardcore modifier object",
    "MtxPurchaseHistoryEntry:bHasBeenRefunded": "has this purchase been refunded (easier check than having to look at RefundDate with knowledge of default)",
    "TireInfo:TireHealth": "health of the modded tire",
    "EDadBroHealthType.Horn": "health percent is the horn's health",
    "EDadBroHealthType.Weakpoints": "health percent should be cumulative (.75 for two full points and a damaged one)",
    "FortNevadaVehicle:HeightAtLandingTime": "height when entering landing state",
    "FortHarvestingToolMontageOverrides": "helper struct to hold the array of FFortHarvestingToolMontageOverrideData",
    "HeroAbilityKit:InherentAbilityKit": "hero ability",
    "FortNevadaVehicle:AttachedPawnHiddenVehicle": "hidden vehicle to spawn when the tractor beam attaches to a pawn",
    "FortAIPawn:bShouldStartSleeping": "hint for minimap indicators, this AI is supposed to start sleeping, don't bother with visibility check for short time after spawning",
    "FortHoagieVehicle:CurrentHoagieState": "hoagie state",
    "BuildingNavigationCellInfo": "holds info about navigation properties of cell",
    "FortDagwoodVehicle:DagwoodRuntimeModifiedProperties": "holds property values that can be modified at runtime",
    "RockVehicle:RockRuntimeConfigs": "holds property values that can be modified at runtime",
    "FortNevadaVehicle:NativeComp_HologramScreen": "hologram screen particles",
    "NevadaMoveModeConfig:ThrustForce": "horizontal acceleration force",
    "FortNevadaVehicle:CockpitHealthPerTick": "hotfixable cockpit param",
    "FortNevadaVehicle:CockpitHealthTickRate": "hotfixable cockpit param",
    "FortNevadaVehicle:CockpitMaxHealth": "hotfixable cockpit param",
    "FortNevadaVehicle:CockpitRegenDelay": "hotfixable cockpit param",
    "FortCreativeMoveTool:HoveredActor": "hovered actor for cost preview",
    "FortMovementComp_GroundSpline:GroundCheckDistance": "how far above and below the spline will we check for the ground",
    "FortProjectileMovementComponent:HomingLaserTargetDistance": "how far along player's aim to home toward during laser targeted homing",
    "AudioWorldizationSettings:TracesPerFrame": "how far away from the player to check for walls",
    "FortInteriorAudioComponent_SphereTrace:TraceRadius": "how far away from the vehicle to check for walls",
    "TireInfo:MidAxleForwardAdjust": "how far forward/back to adjust the middle axle if there is one",
    "FortAthenaMutator_Uranium:SupplyDropRadius": "how far from the cart can supply drops be spawned at",
    "FortMovementComp_GroundSpline:ClientImmediatelySnapToReplicatedLocationDistanceMinimumSquared": "how far in distance squared the client has to be before it can be immeidately teleported to the replication location\nthis prevents the vehicle from always snapping when it reaches the target speed 0",
    "FortMovementComp_GroundSpline:ClientImmediatelySnapToReplicatedLocationTime": "how far out of sync (in seconds) the client has to be before it is immediately teleported to the replicated location",
    "FortMovementComp_GroundSpline:PawnPushForceMultiplier": "how hard to push players out of the vehicle's way relative to the vehicle's speed\n1.0 means the vehicle will push at the speed it moves",
    "FortCharacterVehicle:SeatTransitionDuration": "how long after entering a seat is it \"usable\" i.e. can drive or shoot",
    "FortDagwoodVehicle:FlipExplodeTimer": "how long after flipping until explode",
    "FortCharacterVehicle_Ostrich:GunnerAimPointUpdateDelay": "how long after gunner enters to start ticking aimpoint updates",
    "FortCharacterVehicle_Ostrich:KickRootMotionDelay": "how long after kick input before root motion starts",
    "FortCharacterVehicle_Ostrich:DetonateDelay": "how long after reaching 0 HP until the ostrich is destroyed",
    "FortCharacterVehicle_Ostrich:DetonateDelaySelfDestruct": "how long after reaching 0 HP until the ostrich is destroyed in the case of a self destruct",
    "FortWeaponRanged_Ostrich:AutofireDelay": "how long after reaching full charge to auto fire",
    "FortCharacterVehicle_Ostrich:DriverPrimaryCooldownTime": "how long between driver primary attacks",
    "FortCharacterVehicle_Ostrich:DriverSecondaryCooldownTime": "how long between driver secondary attacks",
    "FortUnderwaterDamageComponent:LevelDuration": "how long does each level of the GE last",
    "McpBanInfo:BanDurationDays": "how long is the ban (From start to finish)",
    "FortRangedWeaponStats:FortHomingTimeUntilMaxTurnSpeed": "how long it takes to ramp up to the max turn speed",
    "FortRangedWeaponSpread:RecoveryTime": "how long it will take for spread to fully recover from reaching this shot number.",
    "FortCharacterVehicle_Ostrich:DriverKickMoveLockDuration": "how long move locks during kick",
    "FortCharacterVehicle:DashMovementLockDuration": "how long movement is locked after a dash",
    "FortCharacterVehicle_Ostrich:LandingMovementLockDurationMax": "how long movement is locked after landing from max charge jump",
    "FortCharacterVehicle_Ostrich:LandingMovementLockDurationMin": "how long movement is locked after landing from min charge jump",
    "FortProjectileMovementComponent:HomingTravelTime": "how long projectile has been moving",
    "FortDagwoodVehicle:FlipPushForceTimer": "how long to continue applying push force",
    "FortCharacterVehicle:FullyChargedJumpTime": "how long to hold button for max charged jump boost",
    "FortCharacterVehicle:MinHoldDuration": "how long to hold button to count as a hold",
    "FortWeaponRanged_Ostrich:TimeToLoadOneAmmoCharge": "how long to load one set of rockets",
    "BuildingItemCollectorActor:DespensingDelayTime": "how long to wait before paying out the output items",
    "BuildingItemCollectorActor:ItemRotationTime": "how long to wait before rotating to the next item",
    "FortHoagieVehicle:BoostCooldown": "how long until we can boost again",
    "FortNevadaVehicle:CrashingScrapingTime": "how long vehicle has been scraping geometry while crashing",
    "FortDagwoodVehicle:HandbrakeTime": "how long we held handbrake",
    "FortDagwoodVehicle:LostGripTime": "how long we lost grip for",
    "FortCharacterVehicle_Ostrich:IdleTime": "how long we're idle for",
    "FortCharacterVehicle_Ostrich:MovingTime": "how long we're moving for",
    "FortWeaponComponent_Swinging:TimeBelowDetachSpeedThreshold": "how long we've been below the speed threshold to detach",
    "FortCharacterVehicle:MaxBoostDuration": "how long you boost for if you fully charged",
    "FortCharacterVehicle:MinBoostDuration": "how long you boost for if you minimally charged",
    "FortAthenaPastSeasonStats:NumHighBracket": "how many 1-10 placements (in solo), 1-5 in duo, 1-3 in squad",
    "FortAthenaSeasonStats:NumHighBracket": "how many 1-10 placements (in solo), 1-5 in duo, 1-3 in squad",
    "FortAthenaPastSeasonStats:NumLowBracket": "how many 1-25 placements (in solo), 1-12 in duo, 1-6 in squad",
    "FortAthenaSeasonStats:NumLowBracket": "how many 1-25 placements (in solo), 1-12 in duo, 1-6 in squad",
    "FortAthenaPastSeasonStats:NumWins": "how many 1st place placements (across solo/duo/squad) has the user earned",
    "FortAthenaSeasonStats:NumWins": "how many 1st place placements (across solo/duo/squad) has the user earned",
    "RewardNode:DaysFromEventStartToUnlock": "how many days from event start that this reward can be a valid choice",
    "FortMovementComp_GroundSpline:PitchThresholdSmoothing": "how many degrees between the PitchThreshold and when no more smoothing is applied to the target pitch",
    "CatalogOfferRequirement:MinQuantity": "how many of the RequireId do they have to have to trip this requirement",
    "CatalogOfferRequirementEditor:MinQuantity": "how many of the RequireId do they have to have to trip this requirement",
    "MtxPurchaseHistory:RefundCredits": "how many refund credits does this user have remaining (must be > 0 for self-service refund attempt)",
    "MtxPurchaseHistory:RefundsUsed": "how many refund credits has this user (or CS on their behalf) used in their lifetime (for display).",
    "FortWeaponRanged_Ostrich:AmmoPerCharge": "how many rockets are loaded per charge iteration",
    "FortWeaponRanged_Ostrich:MinRocketsForFiring": "how many rockets are needed before we can fire",
    "FortWeaponRanged_Ostrich:MaxRockets": "how many rockets can be loaded/fired in one salvo",
    "FortUpdatedObjectiveStat:StatDelta": "how much StatValue changed",
    "FortCollectionBookXPData:XpToNextLevel": "how much XP it takes to get to the next level (0 indicates this is max level)",
    "FortCharacterVehicle_Ostrich:MechMissileDamageToGunnerShield": "how much damage mech missiles do to gunner shield",
    "FortMovementComp_GroundSpline:SpeedTimeReplicationRecoveryPercent": "how much quicker the client's acceleration/speed calculations will be performed in order to catch up to the server's current acceleration/speed\nis a percent of deltatime, 0 for no catch-up",
    "FortMovementComp_GroundSpline:SplineDistanceReplicationRecoveryPercent": "how much quicker the object will move/slow down the client will do to catch up to the server's location\nis a percent of current speed, 0 for no catch-up",
    "FortWeaponRanged_Ostrich:RocketAmmoLocal": "how much rocket ammo is charged locally",
    "FortRangedWeaponSpread:Spread": "how much spread (in degrees) the weapon should have on this shot number.",
    "PenetrationAvoidanceFeeler:PawnWeight": "how much this feeler affects the final position if it hits a APawn (setting to 0 will not attempt to collide with pawns at all)",
    "PenetrationAvoidanceFeeler:WorldWeight": "how much this feeler affects the final position if it hits the world",
    "FortHoagieVehicle:BoostTimeLeft": "how much time is left in current boost",
    "FortHoagieVehicle:BoostBrakingTimeLeft": "how much time is left in post-boost braking",
    "AudioWorldizationSettings:SideQuadrantDegrees": "how narrowly to choose which traces are selected for a quadrant\nfor larger scales, lowering this may reduce the amount of floor/ceiling hits skewing the average wall distance",
    "AudioWorldizationSettings:UpQuadrantDegrees": "how narrowly to choose which traces are selected for the up quadrant",
    "CalendarDownload:CacheIntervalMins": "how often does MCP recompute the forward timeline",
    "FortMovementComp_GroundSpline:GroundCheckFrequency": "how often ground checks are performed to find the the exact ground location",
    "FortMovementComp_GroundSpline:ClimbSpeedPercent": "how quickly (relative to our speed) this object can change Z location away from the spline.\nthis is necessary for handling elevation changes that do not exactly match the spline",
    "FortMovementComp_GroundSpline:LinearJerk": "how quickly linear acceleration can change",
    "FortMovementComp_GroundSpline:YawJerk": "how quickly rotational acceleration can change",
    "FortMovementComp_GroundSpline:PitchSpeed": "how quickly the vehicle can pitch (turn along the Y axis). This number is constant and will not be smoothly start or stop",
    "TireInfo:PontoonScaleRadiusPerTick": "how quickly the vehicle sinks in water via reducing the radius of the pontoons",
    "FortMotorSimComponent_SurfaceModifier:OnsetInterpTime": "how quickly to activate when a surface is set",
    "FortInteriorAudioComponent_SphereTrace:NumTracesPerFrame": "how quickly to do the many traces, for perf reasons",
    "ESourceSelectionMode": "how to pick which one",
    "FortPlayerControllerAthena:CabinModeCheckTimeInterval": "if 0, CabinMode kick off players is disabled (this include kicking off from leader using back to hub, and being in an invalid match)\nmax value is 600",
    "FortHoagieVehicle:FoliageDestructionTimer": "if < 0, do a foliage destruction trace",
    "FortHoagieVehicle:ShutdownTimer": "if > 0, shutting down",
    "AudioWorldizationSettings:EnclosureSmoothSpeed": "if > 0: will clamp the rate of change to this many units/second",
    "AudioWorldizationSettings:WallDistanceSmoothSpeed": "if > 0: will clamp the rate of change to this many units/second",
    "RequestStyleParams:DurationOverride": "if >= 0.f, this is the custom duration that the style should be applied for. 0.f == infinite duration",
    "AthenaMidSeasonUpdateItemReq:Count": "if Count is 0, we require that the profile doesn't own this Item.  For values > 0, at least that many must be owned in order to pass",
    "AthenaAISettings:MinFootstepHearingRange": "if MaxFootstepHearingRange is greater than zero, AI will hear ANY footstep sound within this range.\nValue must be >= 0 <= MaxFootstepHearingRange. If this is set to zero then there will be no minimum range footstep sounds\ncan be heard for",
    "BuildingProp_ConversationCompatible:SpecialActorComponentClass": "if UseSpecialActorComponent is set, this is the \"SpecialActorComponent\" that this actor will spawn. This class details the desired map/compass display behaviour",
    "FortEventLevelCamera:PreviousCamera": "if a special back tag is defined will set this and use this when navigating back",
    "AthenaCarPlayerSlot:bReserved": "if bReserved is true, this seat is reserved for some other purpose and can not be entered normally",
    "FortAthenaVehicle:AngleDegreesThresholdFromCurrentCameraToTarget": "if current camera rotation is within this degrees of the target, we consider the camera to have recovered",
    "FortTopBarTabButtonInfo:CalendarEventName": "if defined will look to see if this event is active, if it is not we will not create the tab button",
    "ProjectileMovementDrunkConfig:HomingDrunkBlendOutTimeThreshold": "if drunk turning hasn't blended out after this time (very far away target position), use a time based blend instead",
    "ProgressiveStageItemInfo:OverrideName": "if empty, name of first Variant Token will be used",
    "BaseVariantDef:bStartUnlocked": "if false this variant will be locked by default and will require a variant token to be applied to the account to unlock",
    "FortGameModeAthena:bEnableSendingIndividualTournamentScoresOnLogout": "if false, don't send individual scores on logout",
    "FortCharacterVehicle_Ostrich:IdleTimeThreshold": "if idle for this long, when moving again will accel from idle",
    "EVisibilityResponse.Custom": "if it fails will hide the item and turn off collision by setting bEnableCollision = false",
    "EVisibilityResponse.Show": "if it fails will show the item and turn on collision by setting bEnableCollision = true",
    "FortDagwoodVehicle:bLostGrip": "if lost grip during a handbrake",
    "MarshalledVFXData:AttachAtBone": "if not NAME_None, the specific bone to attach to.",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:PlaylistEndTime": "if positive, the time when the playlist timer will finish\n if <= 0, no timer is active",
    "FortGameStateAthena:ReticulatedSplineIds": "if present, replace all stream IDs on matching FortStreamMediaSource instances with this stream id.\npurely a galileo hack. coming soon: a better way to do all of this.",
    "FortGameModeAthena:ReticulatedSplineIds": "if present, replace all stream IDs on matching FortStreamMediaSource objects to these\npurely a galileo hack. coming soon: a better way to do all of this.",
    "FortRangedWeaponStats:ScopedPerBulletRecoilOverride": "if scoped per bullet spread is set, it overrides per bullet recoil while looking down the scope of a weapon",
    "BuildingItemCollectorActor:bHasToHaveSomething": "if set to true the player has to have at least 1 of the input item to be able to interact with the collector",
    "BaseVariantDef:bHideIfNotOwned": "if set to true will hide this variant in the UI if it is not owned",
    "CameraSequence:UseCinematiceMode": "if set to true will put the player in the cinematic mode allowing the to ignore FOV clamps and apply camera FX",
    "BuildingActor:bIgnoreMoveGoalCollisionRadius": "if set, AI trying to reach this actor will ignore collision radius and keep walking until they can get at exact spot",
    "BuildingActor:bIsNavigationRelevant": "if set, actor will be used for building navigation (dynamic obstacle or collision export)",
    "BuildingActor:bCanExportNavigationObstacle": "if set, all colliding parts will create an obstacle area on navmesh",
    "BuildingActor:bCreateVerboseHealthLogs": "if set, all incoming damage will be logged in vlog, use only for mission goals",
    "BuildingAutoNav:bAutoAssignNavProperties": "if set, all navigation properties will be assigned automatically\nit should work decent for commonly used props, but will NOT cover all possible shapes\nautomation test will always pass if this option is set and actor has only one primitive component: static mesh!",
    "BuildingActor:bForceAutomationPass": "if set, automation test won't report any errors\nshould be used only when automatic collision detection can't recognize actor type\nPLEASE MAKE SURE THAT ALL NAVIGATION PROPERTIES ARE SET CORRECTLY!",
    "BuildingActor:bForceAutomationPass_NavmeshOnTop": "if set, automation test won't report any errors related to navmesh on top (collision export for large props)\nPLEASE MAKE SURE THAT ALL NAVIGATION PROPERTIES ARE SET CORRECTLY!",
    "BuildingActor:bForceAutomationPass_SmashableFlat": "if set, automation test won't report any errors related to smashable areas for flat actors\nPLEASE MAKE SURE THAT ALL NAVIGATION PROPERTIES ARE SET CORRECTLY!",
    "BuildingActor:bCanExportNavigationCollisions": "if set, collisions will be exported (unless mesh is marked to be dynamic obstacle)",
    "BuildingActor:bCreateObstacleNavModifierForEachComponent": "if set, each UPrimitiveComponent will create it's own NavModifier instead of 1 box for the whole building",
    "BuildingActor:bShowSmashHotSpotExtraConfig": "if set, extra type config will be included on preview",
    "BuildingActor:bBlockNavLinksInCell": "if set, incoming \"jump off side\" navlinks will be ignored, hacky fix for atlas frame",
    "BuildingActor:bBlockNavigationLinks": "if set, jump/smash links will stop on hitting this actor",
    "FortPawn:bPostProcessNavLocation": "if set, location for pathfinding purposes will be adjusted to avoid markup of nearby walls",
    "FortWorldSettings:bLimitNavGraphSkyCells": "if set, only NavGraphSkyCells receive seeds and are valid on top of first collisions",
    "FortAIPawn:bCanUseMeshPooling": "if set, pawn skeletal mesh will try to use pooling mechanic (UFortPooledSkelMeshComponent) on clients",
    "FortAIPawn:bCanUseNavWalking": "if set, pawn will be allowed to use NavWalking mode in lower LOD",
    "FortAIPawn:bCanUseSimpleCollisions": "if set, pawn will be allowed to use simple collision profile in NavWalking mode (ignores world & buildings)",
    "FortAIController:bInstantRotation": "if set, pawn won't use rotation rate but will update its rotation instantly",
    "BuildingActor:bHasCustomAttackLocation": "if set, ranged attacks will be aimed at closest colliding geo instead of center of meshes",
    "BuildingActor:bForceDisableRootNavigationRelevance": "if set, root component's relevance will be disabled",
    "BuildingFloor:bShouldIgnoreForHorizontalHotspotSearch": "if set, skip this actor when tracing horizontally for a hotspot",
    "FortPawn_Taker:bUseClimbLinks": "if set, taker will use climb links for pathfinding",
    "FortAIPawn:DefaultNavFilter": "if set, this filter will be used for pathfinding if no other filters are specified by movement task",
    "FortTracerBase:bOwnedByPool": "if set, tracer actor is owned by FXPool",
    "FortWeapon:bIsCosmeticLimited": "if set, weapon is cosmetically limited and shouldn't load cosmetic overrides (Pickaxes in BR)",
    "FortWeapon:bIsCosmeticGatedLocally": "if set, weapon is gated locally and needs to be replaced with a default version appropriate for its anim set.",
    "AudioWorldizationSettings:TraceDirectionPolicy": "if set, will override trace direction logic",
    "AudioWorldizationSettings:TracePolicy": "if set, will override trace logic",
    "FortAIPawn:bCanUseStepAside": "if set, will try to step aside after bumping player",
    "FortGameModeAthena:DisableMatchStatsReportingPlaylists": "if the current playlist is in this array, disable sending match/leaderboard stats for this match",
    "FortGameModeAthena:DisableProgressionReportingPlaylists": "if the current playlist is in this array, disable sending player progression to MCP for this match",
    "DynamicCompositeWorld:GetDefaultLevelTransitionTime": "if the level is streamed in this is how long we wait before moving on",
    "BuildingItemCollectorActor:bTossOnGround": "if the loot spawned from this collector should be toss on the ground or granted to the player",
    "BuildingItemCollectorActor:bPickupOwnedByLooter": "if the loot spawned from this collector should only be owned by looter",
    "SwingingControlParams:WaterUpSpeed": "if the player is under the max immersion percent allowed in water, this vertical speed is applied to push them up out of the water",
    "FortAthenaMutator_Uranium:bPushCartIsPushableAtStart": "if the push cart starts out as pushable or not",
    "StormShieldRadiusGrowthData:State": "if the radius is growing, shrinking, or idling",
    "FortWeaponComponent_Swinging:TargetOutOfRange": "if the range to target is less than this, clear the target",
    "McpBanInfo:CompetitiveBanReason": "if there is a competitive ban, the reason for the ban",
    "SwingingControlParams:DefaultForwardInputAccel": "if there is no player movement input, apply a default forward input scaled by this value. a value of zero will have no effect",
    "FortAIController:bTurnTransitionsEnabled": "if this AI is allowed to use turn transitions",
    "FortEventLevelCamera:bRestorLastSelected": "if this camera should store what was last selected and use that as the default object instead",
    "BuildingItemCollectorActor:bIncrementCaptureCountWhenGoalIsReached": "if this collector should increment the capture count when ever the goal is reached",
    "FortVariantSprayCustomizerCosmeticOptions:ItemShopPreviewStyles": "if this cosmetic's styles are previewed in the Item Shop, this list of sprays will populate in the editor widgets - typically the sprays that come bundled with the cosmetic",
    "CalendarRequirement:bActive": "if this event must be active or not",
    "FortAthenaVehicle:bDisableUpdateAutoRun": "if this is true UpdateForcedDebugInput will not be called.",
    "FortAthenaVehicle:bDisableUpdateForcedDebugInput": "if this is true UpdateForcedDebugInput will not be called.\nDerived classes may want to handle to disable this if their collisions with builds are handled by UpdateImminentCollision and they do not need to bump pawns.",
    "FortAthenaVehicle:bDisableUpdateHonk": "if this is true UpdateHonk will not be called.",
    "FortAthenaVehicle:bDisableUpdateIgnoredBuildingActors": "if this is true UpdateIgnoredBuildingActors will not be called.",
    "FortAthenaVehicle:bDisableUpdateIngoredPawnsForDamage": "if this is true UpdateIngoredPawnsForDamage will not be called.",
    "FortAthenaVehicle:bDisableUpdateSafeTeleport": "if this is true UpdateSafeTeleport will not be called.",
    "FortMovementComp_Character:bAllowVerticalPawnRotation": "if this is true, ShouldRemainVertical will return false and therefore allow the pawn to pitch and roll rather than being forced upright",
    "McpBanInfo:bRequiresUserAck": "if this is true, the ban reasons need to be shown to the player (followed by a call to SetMatchmakingBansViewed)",
    "FortAthenaVehicle:bUseForceHeading": "if this is true, the force heading defined by the boundary spline is used",
    "RewardNode:bGrantedAtGraphDestruction": "if this item should be granted when the reward graph is destroyed",
    "FortDagwoodVehicle:bExplodeAfterFlip": "if true explode on impact after flipping",
    "ItemRequirement:bMustOwnItem": "if true must own this item to pass the check, if false must NOT own",
    "FortGameplayAttributeData:bShouldClampBase": "if true the base value will be clamped as well as the current value; if false only the current value is clamped",
    "BaseVariantDef:bIsDefault": "if true this variant is the default variant for the channel",
    "FortDeveloperSettings:bAllowAllPlayerToCountAsPartyAssist": "if true this will allow all players in the world to be party assister to everyone else",
    "FortDeveloperSettings:bAllowAllSquadMembersSharedQuests": "if true this will allow all squad members to share shared quests",
    "DynamicCompositeWorld:bStreamInLevel": "if true this world is being requested to stream in, if false this level should not be loaded",
    "DynamicCompositeWorld:bStreamInOnDemand": "if true this world will only stream in upon request, if false this level will always be loaded",
    "FortDagwoodVehicle:bApplyHandbrakeCatchupForce": "if true we allow applying extra push force to re-gain speed after drifting",
    "FortWeaponComponent_Swinging:bAllowTargetWalkableTerrain": "if true we allow targeting walkable terrain",
    "FortWeaponComponent_Swinging:bCheckForCloseDetach": "if true we check if we are close enough to the attach point to detach",
    "FortVehicleSeatWeaponComponent:bSaveAndRestoreWeaponData": "if true we'll save off firing time/ammo data and restore it when re-entering the vehicle",
    "FortWeaponComponent_Swinging:bAllowTargetNonBGAStaticMesh": "if true we're allowed to target non BGA static meshes",
    "FortWeaponComponent_Swinging:bAllowTargetProjectiles": "if true we're allowed to target projectiles",
    "FortWeaponComponent_Swinging:bAllowTargetSplineMesh": "if true we're allowed to target spline meshes",
    "FortWeaponComponent_Swinging:bAllowTargetVehicles": "if true we're allowed to target vehicles",
    "CameraSequence:PlayFromStart": "if true will play from the start and forward, if false will start and the end and play in reverse",
    "FortAIPawn:bCanUseDoors": "if true, AI will be able to use and open doors",
    "FortAIPawn:bCanUseOpenedDoors": "if true, AI will be able to use only if door is already opened",
    "FortMovementComp_GroundSpline:bOffsetZIsAbsolute": "if true, SplineLocationOffetZ will be treated as a absolute Z location\nif false, SplineLocationOffetZ  will be a relative offset from the spline",
    "SwingingControlParams:bDisableGroundedSwingingCalculations": "if true, all requests to use grounded swinging movement will be rerouted to use normal swinging movement calculations.",
    "SwingingControlParams:ClampNegVerticalSpeedWhileAttached": "if true, attached swinging vertical speed will be clamped in the negative direction",
    "SwingingControlParams:ClampPosVerticalSpeedWhileAttached": "if true, attached vertical swinging speed will be clamped in the positive direction",
    "BattlePassLandingPageEntryPreviewInfo:bEnableDynamicWeeklyPreview": "if true, button for Weekly Special Entry Type will dynamically update tile render and 3D preview; otherwise, default render and 3D previews will be used",
    "FortHeldObjectComponent:bBlocksVehicleDriverSeat": "if true, can't enter driver seat of a vehicle while holding this",
    "FortNevadaVehicle:bDissolvingCockpit": "if true, cockpit dissolving from a shield dissable",
    "FortNevadaVehicle:bRestoringCockpit": "if true, cockpit reforming",
    "FortPlayerControllerAthena:bIgnorePlayerInfoAbandonStateForSpecialEventRtmm": "if true, continue the RTMM flow regardless of playerinfo abandon state if progression reporting is disabled\nand we're currently in a SpecialEvent",
    "FortAIPawn:bDebugAIAnim": "if true, display AI animation debug information over the pawn",
    "FortAIPawn:bDebugAI": "if true, display AI debug information over the pawn",
    "FortCharacterVehicle_Ostrich:bBufferedDriverExit": "if true, driver has tried to exit and we buffered it",
    "FortPlayerPawn:EnableSwimSprintDiveCooldown": "if true, enables use of the cooldown on swim sprint dive",
    "FortCharacterVehicle_Ostrich:bHoldingSelfDestruct": "if true, local client holding self destruct interaction",
    "FortAIPawn:bCanUseShootingHotspots": "if true, pawn will be allowed to use shooting hotspots",
    "FortAthenaMutator_Uranium:PlayersImmediatelyReenterGameplayAfterSelectingAPerk": "if true, players respawn immediately after selecting a perk\n if false, players must wait for the perk countdown timer OR for every other player to select a perk before they can reenter gameplay",
    "FortGameModeAthena:bReticulateSplineKeysOnStart": "if true, replicates the encryption keys to clients when we set up the game state.\nif false, only replicate keys once AddContentEncryptionKeysToGameState() is called.",
    "ProjectileHomingData:ResetTurnSpeedTimer": "if true, reset the turn speed ramp",
    "FortWeaponComponent_Swinging:bFoundTarget": "if true, targeting found a valid target",
    "FortAIPawn:bHideHealthBar": "if true, the health bar will never appear above the AI pawn",
    "FortMovementComp_Character:bSwingInstantVelocity": "if true, the swing vector will be applied as an instant velocity while entering the swinging movement mode",
    "FortAIPawn:bHasBuildingHitEffects": "if true, this enemy has some visual effects that are applied when they hit a player's building.",
    "FortAIPawn:bAnimateOnServer": "if true, ticks animations on the server. This could be expensive. Try to avoid using unless it's needed and remember to turn off when it's not needed.",
    "SwingingControlParams:ClampNegVerticalSpeedWhileUnattached": "if true, unattached swinging vertical speed will be clamped in the negative direction",
    "SwingingControlParams:ClampPosVerticalSpeedWhileUnattached": "if true, unattached vertical swinging speed will be clamped in the positive direction",
    "FortAIPawn:bUseSharedAnimation": "if true, uses Animation Sharing system if available",
    "HarmonixStutterEditEffectSettings:SilenceWhileScheduled": "if true, we output silence while pending scheduled stutters have not started yet.",
    "FortHoagieVehicle:bCanSleep": "if true- allow sleep",
    "ContentBeaconError:InnerErrorMessage": "if we have an inner error this string will be populated",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:StartAircraftPhaseRequiredAlivePlayersPercent": "if we have less than this percent of players (versus the number we received in match assignment) alive at the start of aircraft phase,\nkick all players, invalidate the match, and do not record scores for anyone.",
    "ReplayTeamFlightEventInfo:IndexNum": "if we have lots of battle buses then well gosh darn",
    "FortHoagieVehicle:bForceNegativeLift": "if we're forcing negative lift due to being above the max height",
    "FortNevadaVehicle:bForceNegativeLift": "if we're forcing negative lift due to being above the max height",
    "FortNevadaVehicle:bForcePositiveLift": "if we're forcing positive lift due to tractor beam/energy cannon",
    "RewardNode:bRequiredOwnership": "if you must have purchased access to the RewardEventGraph to be able to receive this reward node",
    "BuildingGameplayActorPetrol:IgniteRange": "ignite other nearby petrol within this range",
    "EFortSpawnActorTime.PostPlaylistLoad": "immediately after the playlist is loaded",
    "FortDagwoodVehicle:bInPopTireVeer": "in the pop tire veer state",
    "EClientContentReadinessV2.GeneratingManifests": "in the process of generating manifests\nwe could be delayed at this point if the contentbeacon is not ready for clients to join",
    "EClientContentReadinessV2.MountingContent": "in the process of mounting the content",
    "EMatchmakingSourceV2.ForcedIntro": "in-game (post-match)",
    "EMatchmakingSourceV2.Unknown": "in-game (post-match) alertnative to using Ready Up Screen",
    "FortReplicatedVelocityData:RepIncrement": "increment value to ensure replication",
    "FortStopSimulatingRepData:RepIncrement": "increment value to ensure replication",
    "MtxPurchaseHistoryEntry:IndexInBundle": "index within the bundle",
    "EBuildingGameplayActorAircraftSpawnSide.Side1": "indicates a side wasn't picked",
    "ContentBeaconClientV2:bIsClientInSync": "indicates that the client is in sync with the server and will be considered for all future load content calls",
    "GameplayCueNotify_Jetpack_FuelRegen:bAudioEnabled": "indicates the audio is enabled for this cue",
    "EBuildingGameplayActorAircraftSpawnSide.Side2": "indicates we spawned the last BGA on side 1",
    "BackendExportedClipInfo": "information about the video clip that was exported and uploaded",
    "ECorePerceptionTypes.Prediction": "information from teammates",
    "EPersistenceFrameworkState.ReadyForPersistence": "initialized to start persistence operations",
    "MapRangeClamped_Ranges:InRangeA": "input",
    "MapRangeClamped_Ranges:InRangeB": "input",
    "MapRangeClamped_Ranges:OutRangeA": "input",
    "MapRangeClamped_Ranges:OutRangeB": "input",
    "PoseDeformationQuery:Angle": "input",
    "PoseDeformationQuery:EndJoint": "input",
    "PoseDeformationQuery:PoseJoint": "input",
    "PoseDeformationQuery:StartJoint": "input",
    "PoseDeformationQuery:bDrawDebug": "input",
    "SwingingControlParams:InputAccelMultiplier": "input acceleration multiplies by this",
    "SwingingControlParams:InputAccelMultiplierAirbornUnattached": "input acceleration multiplies by this while unattached and airborn",
    "SwingingControlParams:AirbornUnattachedInputFriction": "input friction applied while airborn unattached to assist with changing direction",
    "EContentRequestInstallState.Active": "installed and loaded in the game feature subsystem (REQUESTABLE STATE)",
    "StreamingRadioPlayerComponent:BasePlayerInstance": "instance that is created whenever we start the radio",
    "StreamingRadioPlayerComponent:AudioShape": "instantiated at runtime",
    "StreamingRadioPlayerComponent:SoundComponent": "instantiated at runtime",
    "FortGameStateAthena:ReticulatedSplineDefinitions": "intentionally misleading name to throw off dataminers.\nthis contains encryption keys that we get from the game mode for replication to clients\nthat they then use to decrypt content (videos, cosmetics, et al.)",
    "EDeployableBaseBuildingState.WaitingToBuild": "internal states",
    "SidecarFileInfo:bIsCheckedOut": "is the file currently checked out",
    "CatalogGiftInfo:bIsEnabled": "is this offer enabled for gifting (if false, other params should be ignored)",
    "CatalogGiftInfoEditor:bGiftingEnabled": "is this offer enabled for gifting (if false, other params should be ignored)",
    "MtxPurchaseHistoryEntry:FreeRefundEligible": "is this purchase refundable without the use of a refund token",
    "AthenaCarPlayerSlot:bIsPushDriver": "is this seat for a pushing driver",
    "ProjectileMovementDrunkConfig:HomingDrunkBlendOutTime": "it takes this long after the threshold to blend out drunk turning",
    "AthenaMidSeasonUpdateItemReq:Item": "item definition we are going to check ownership of",
    "EValkyrieValidationErrorCode.InvalidJSONFile": "json file contains malformed json",
    "EValkyrieValidationErrorCode.InvalidEncodingJSONFile": "json file is there but encoded incorrectly",
    "EValkyrieValidationErrorCode.InvalidJSONSchema": "json file schema is invalid",
    "RiderComponent:JumpExitLaunchVelocity": "jump exit launch velocity",
    "ECoastState.Coasting": "jump on cart and get ready to pedal",
    "MarshalledVFXRuntimeData:DynamicSystems": "keep alive and easily reference the FX systems",
    "FortAthenaMutator_SafezoneBlacklist:HotfixedEntries": "keep track of instances we've added from hotfixing so we don't accumulate trash",
    "FortAthenaTutorial_Ambush:MaxLocationErrorKeyName": "key name on the behavior tree blackboard used to handle the aiming accuracy (maximum location error)",
    "FortAthenaTutorial_Ambush:MinLocationErrorKeyName": "key name on the behavior tree blackboard used to handle the aiming accuracy (minimum location error)",
    "SidecarFileInfo:Meta": "key value meta properties",
    "FortCharacterVehicle_Ostrich:KickAnimationDuration": "kick animation has finished after this time - for use by server to know when kick anim is finished",
    "EPerceptionState.Threat_LKP": "know there is a threat but lost LOS (Last Know Position)",
    "EContextualContext.BusPhase": "land at/visit - might eventually be dynamic?",
    "EFortQuestObjectiveStatEvent.Land": "landing after using a parachute. Target is empty.",
    "ELevelSaveRecordVersion.LargeWorldCoordinateSerializationChange": "large world coordinates changed serialization of FVector and FTransform we need to use the old type of FVector3 and FTransform3",
    "ETimespanAsTextFormat.ApproximateWithYears": "largest unit is months",
    "ETimespanAsTextFormat.ApproximateWithMonths": "largest unit is weeks",
    "FortHoagieVehicle:LastRotorSweepDirection": "last direction we swept for rotor damage",
    "FortProjectileMovementComponent:PreviousHomingTargetPosition": "last frame homing target position",
    "EAthenaWinCondition.LastManStandingIncludingAllies": "last man standing but includes allies with friendly fire",
    "FortDagwoodVehicle:LastPoppedTire": "last popped tire location",
    "FortNevadaVehicle:LastBatteryRegenTickTime": "last tick time for battery regen",
    "FortNevadaVehicle:LastCockpitHealthTickTime": "last time cockpit health was ticked",
    "FortNevadaVehicle:LastCockpitDamageTime": "last time cockpit was damaged",
    "VehicleGamepadLiftInputs:MoveDownPressTime": "last time move-down button was pressed",
    "VehicleGamepadLiftInputs:MoveUpPressTime": "last time move-up button was pressed",
    "VehicleWeapon_RetainedData:LastFireTime": "last time we fired",
    "FortProjectileMovementComponent:InitialDirection": "launch direction of the projectile",
    "FortProjectileMovementComponent:LaunchPosition": "launch position of the projectile",
    "FortMovementComp_Character:SwingLaunch": "launch vector that can apply while swinging is active",
    "EMontageSelectionPredicateType.NotSet": "legacy default value. If seen, please select an alternate mode.",
    "FortHoagieVehicle:CurrentHLODDistanceOverrideScale": "lerp value for hlod distance override",
    "FortHoagieVehicle:CurrentHLODMaxDrawDistanceScale": "lerp value for hlod draw distance",
    "FortHoagieVehicle:CurrentViewDistanceScale": "lerp value for view distance scaling",
    "FortAthenaVehicle:bTricksEnabled": "let BP turn on/off tricks at runtime",
    "AthenaExtendedXPCurveEntry:UntilLevel": "level at which our 'XpPerLevel' will stop",
    "CreativeLoadedLinkData:DescriptionTags": "links service description tags",
    "TireInfo:CollisionShapeNames": "list of  collision shape names to toggle on when this mod is applied",
    "PlatformPrefixIconList": "list of \"icons to use for this platform\", used in conjunction with a mapping to \"my current platform\"",
    "EncounterGameplayVolume:BuildingActors": "list of actors",
    "EncounterGameplayVolume:EncounterAnchors": "list of anchors",
    "CalendarDownload:Channels": "list of channels",
    "FortGameModeAthena:ReticulatedSplineDefinitions": "list of key tuples we want to (eventually) (maybe) replicate to clients\nthis is intentionally named something dumb to throw off dataminers.",
    "FortCharacterVehicle_Ostrich:StopMontagesOnGunnerExit": "list of montages to stop when the gunner exits",
    "EncounterGameplayVolume:EncounterPointProviders": "list of point providers",
    "FortHoagieVehicle:RotorHits": "list of recent rotor hits so we don't duplicate damage dealt",
    "FortHoagieVehicle:CachedSeatCollision": "list of seat collision changes that were accured before vehicle is finished spawning",
    "SpecialActorStatData:Stats": "list of the stats being tracked for this category",
    "EventsTimeline:States": "list of upcoming states for this timeline",
    "ZoneLoadingScreenConfig:LoadingTips": "loading screen tips that replace the default tips.  Specialized game modes/missions need different tip sets.",
    "FortCharacterVehicle_Ostrich:bLocalSimulatedChargingJump": "local charging jump flag for triggering BP events",
    "FortNevadaVehicle:CurrentVehicleState": "local vehicle state",
    "EFortLockerAnalyticAction.Locker_SaveChanges": "locker tab level actions",
    "EFortItemCollectorBehavior": "look at tug of war I don't think that works and might just need to be removed as we don't use it and not sure it was working when the refactor happened.",
    "FortLootNotification": "loot notification",
    "FortLootNotification:LootSource": "magic string indicating the system that generated this notification",
    "VkExperienceData:DefaultMap": "main map to stream in",
    "VkMapExperienceData:Map": "main map to stream in",
    "VehicleGamepadLiftInputs": "manages input states of a vehicle using move-up and move-down inputs, such that we can use the most recent input when both buttons are pressed",
    "FortHoagieVehicle:LiftInputs": "managing vehicle lift inputs for moving up and down",
    "FortNevadaVehicle:LiftInputs": "managing vehicle lift inputs for moving up and down",
    "EContentRequestInstallState.Installed": "manifests are built but no modules have been created, REQUESTABLE STATE\nModulesCreated,  modules are created for all the client requests",
    "EFortAILODLevel.BelowNormal": "many of these NPC's will be visible but it will be harder to ascertain how precise their simulations are, some NPC's in this group could be not 'that' far behind a player.",
    "PhysicsStateData:PitchOutput": "map pitch to the Speed parameter",
    "PhysicsImpactData:PitchOutput": "map pitch to the Strength parameter",
    "VkMapExperienceData": "map specific experience data, currently bundled with game feature data, but may move elsewhere",
    "PhysicsStateData:VolumeOutput": "map volume to the Speed parameter",
    "PhysicsImpactData:VolumeOutput": "map volume to the Strength parameter",
    "EBuildingNavObstacleType.UnwalkableAll": "marks navmesh as unwalkable for all AI",
    "EBuildingNavObstacleType.UnwalkableHuskOnly": "marks navmesh as unwalkable for husks, no effect on smasher",
    "EMatchmakingCompleteResult.CreateFailure": "matchmaking failed creating a new session",
    "EMatchmakingCompleteResult.Failure": "matchmaking failed internally",
    "EMatchmakingCompleteResult.Success": "matchmaking is complete",
    "EMatchmakingCompleteResult.NotStarted": "matchmaking not started",
    "EMatchmakingCompleteResult.NoResults": "matchmaking returned no results",
    "CreativeLoadedLinkData:MatchmakingSettings": "matchmaking v1 (creative) settings",
    "CreativeLoadedLinkData:MatchmakingV2Settings": "matchmaking v2 (vk) settings",
    "EMatchmakingCompleteResult.Cancelled": "matchmaking was canceled",
    "FortProgressiveSet:TileMaterial": "material to display in UI button",
    "FortProgressiveStageOverrideDisplayData:TileMaterial": "material to display in UI button",
    "FortProgressiveReward:TileMaterial": "material to display in UI button, required if bHidden is false",
    "SwingingControlParams:MaxAttachedNegVerticalSpeed": "max attached neg vertical speed while swinging",
    "SwingingControlParams:MaxAttachedPosVerticalSpeed": "max attached pos vertical speed while swinging",
    "NevadaMoveModeConfig:MaxHorizontalSpeed": "max horizontal speed",
    "SwingingControlParams:MaxHorizontalSpeedGrounded": "max horizontal speed while grounded",
    "SwingingControlParams:MaxHorizontalSpeedGroundedAttachedVehicle": "max horizontal speed while grounded and attached to a vehicle",
    "SwingingControlParams:MaxHorizontalSpeed": "max horizontal speed while swinging",
    "SwingingControlParams:WaterMaxImmersionPercent": "max immersion percent allowed while swinging through water",
    "DBNOCustomSettings:TenacityAmount": "max player's health during DBNO state (is used when TenacityType is Custom)",
    "ProjectileMovementDrunkConfig:HomingAimPointMaxRange": "max range of trace used for aim point",
    "FortControllerComponent_SkydiveFeedback:CachedSkydiveDropSpeedMax": "max skydive fall speed as grabbed from the move component",
    "TireInfo:MaxDriveInclineAngle": "max surface angle to allow driving",
    "ProjectileHomingData:MaxTurnSpeed": "max turn speed when fully ramped",
    "SwingingControlParams:MaxUnattachedNegVerticalSpeed": "max unattached neg vertical speed while swinging",
    "SwingingControlParams:MaxUnattachedPosVerticalSpeed": "max unattached pos vertical speed while swinging",
    "NevadaMoveModeConfig:MaxVerticalSpeed": "max vertical speed",
    "FortPlayerPawnAthena:MaxLandForceDuration": "maximum dynamic force feedback's duration lerp B for land",
    "FortPlayerPawnAthena:MaxLandForceIntensity": "maximum dynamic force feedback's intensity for land",
    "FortAthenaTutorial_Ambush:MaxLocationErrorValue": "maximum location error to use when aiming at the player in the ambush tutorial",
    "FortPlayerControllerGameplay:ServerMaxNumNPCs": "maximum number of NPCs on the server. Only valid in non shipping builds",
    "AthenaMidSeasonUpdateItemReq": "mcp item ownership check for mid season update requirement",
    "AthenaMidSeasonUpdateQuestReq": "mcp quest completion check for mid season update requirement",
    "HighlightClipPayload:UCRN_HighlightId": "meaningful for debugging when playing back a replay in PIE. Also handy for a unique id in a given replay for the database",
    "VehicleAttachment:SkeletalMesh": "mesh to attach",
    "EFortGiftWrapType.Message": "messaging \"gift box\" (cannot contain anything)",
    "PegasusJobMeta": "meta information for a job. is forwarded on after successful render for AWS to work with",
    "FortWeaponRanged:BeamSignificance": "min distance between camera and bullet path to use smoke beams / tracers",
    "FortPlayerPawnAthena:DamageFXSignificance": "min distance between camera and damage location to play damage effects",
    "FortWeapon:FireFXSignificance": "min distance between camera and firing location to play weapon fire effects",
    "FortWeaponRanged:ImpactSignificance": "min distance between camera and impact location to play impact effects (sound, particles, hit animations, etc)",
    "FortWeaponRanged:DecalSignificance": "min distance between camera and impact location to use decals",
    "FortCharacterVehicle:MinDistForInteract": "min distance from the actor for interaction",
    "FortEffectDistanceQuality:MinDistanceCinematic": "min distance to camera to play effects, negative = always play",
    "FortEffectDistanceQuality:MinDistanceEpic": "min distance to camera to play effects, negative = always play",
    "FortEffectDistanceQuality:MinDistanceHigh": "min distance to camera to play effects, negative = always play",
    "FortEffectDistanceQuality:MinDistanceLow": "min distance to camera to play effects, negative = always play",
    "FortEffectDistanceQuality:MinDistanceMedium": "min distance to camera to play effects, negative = always play",
    "FortCharacterVehicle:SplashDamageMinPercent": "min percent of base damage to apply as splash damage to riders",
    "FortControllerComponent_SkydiveFeedback:CachedSkydiveDropSpeedMin": "min skydive fall speed as grabbed from the move component",
    "ProjectileHomingData:MinTurnSpeed": "min turn speed applied when ramp time is zero",
    "FortPlayerPawnAthena:MinLandForceDuration": "minimum dynamic force feedback's duration lerp A for land",
    "FortPlayerPawnAthena:MinLandForceIntensity": "minimum dynamic force feedback's intensity for land",
    "PenetrationAvoidanceFeeler:TraceInterval": "minimum frame interval between traces with this feeler if nothing was hit last frame",
    "FortAthenaTutorial_Ambush:MinLocationErrorValue": "minimum location error to use when aiming at the player in the ambush tutorial",
    "FortMovementComp_GroundSpline:PitchThreshold": "minimum pitch (in degrees) before the UpdatedComponent will start pitching\nall pitches below this threshold will be set to 0.0",
    "FortMotorSimPatternState:ThrottleThreshold": "minimum throttle amount to start a pattern playing",
    "BuildingActor:bMirrorNavLinksX": "mirror navigation links: X axis",
    "BuildingActor:bMirrorNavLinksY": "mirror navigation links: Y axis",
    "FortAthenaMutator_SpecialRelevancy:ClientRelevancyGroups": "mirrors the server layout",
    "EFortKickReason.EncryptionRequired": "missing encryption when required",
    "ContentBeaconClientReplicatedModule:ModuleId": "module id for matching up with the content beacon host modules",
    "VkProjectSnapshot:DeltaFileIndex": "monotonically increasing int for a project+user's preview record. This modulo's at some point. Used to keep a short history of expired delta files.\ndelta file paths are (approximately) /.../{projectId}/{accountId}/{deltafileindex}/<files>",
    "FortClientEventsState:SeasonNumber": "monotonically increasing season number (may be 0 in between seasons)",
    "FortPhysicsChainWeaponComponent:CurrentAttachPoint": "most recent point that has been attached to",
    "FortHoagieVehicle:BoostDirection": "move direction at the time the boost was started",
    "EHighlightFeatures.VehiclePlayerLaunchDistance": "multiple eliminations within a time range using a vehicle",
    "FortControllerComponent_SkydiveFeedback:DropSpeedForMaxShakeMultiplier": "multiplier of cached max drop speed used for computing drop speed alpha",
    "FortControllerComponent_SkydiveFeedback:DropSpeedForMinShakeMultiplier": "multiplier of cached min drop speed used for computing drop speed alpha",
    "RuntimeSpringsInfo:SpringDampMultiplier": "multiplier on damping for suspensions spring force",
    "RuntimeSpringsInfo:SpringStiffMultiplier": "multiplier on stiffness for suspension spring force",
    "TireInfo:WaterTopSpeedMultiplier": "multiplier on top speed for water movement",
    "FortHoagieVehicle:CriticalExplodeTimer": "must be <= 0 to trigger an explosion",
    "FortHoagieVehicle:bCriticalExplosionPlayed": "must be == 0 to trigger an explosion effect - local only",
    "FortWeaponRanged_Ostrich:SecondaryFireMuzzleName": "muzzle name for rockets",
    "FortWeaponRanged_Ostrich:ShotgunSecondBarrelMuzzleName": "muzzle name for shotgun second barrel",
    "FortWeaponRanged:BeamSourceSocketName": "name of socket in WeaponMesh to position start of smoke beam",
    "CalendarRequirement:CalendarEventName": "name of the calendar event to key off of",
    "VariantParticleSystemInitializerData:ParticleComponentName": "name of the particle system to initialize",
    "VehicleAttachment:ModName": "name of this mod",
    "ETempoListenerTimeSyncOption": "namespace HmxThreading",
    "FortNevadaVehicle:Native_CockpitEnabled": "native flag for cockpit enable/disable",
    "FortNevadaVehicle:CockpitHealth": "nativized cockpit health",
    "FortNevadaVehicle:LastDamageAlpha": "nativized damage alpha param",
    "FortDagwoodVehicle:FadeDelay": "nativized fade timeline data",
    "FortDagwoodVehicle:FadeDuration": "nativized fade timeline data",
    "FortHoagieVehicle:RotorTraceArray": "nativized from BP (rotorwash)",
    "FortHoagieVehicle:RotorWashObjectsTypes": "nativized from BP (rotorwash)",
    "FortHoagieVehicle:RotorWashTickTimer": "nativized from BP (rotorwash)",
    "FortHoagieVehicle:Theta_Native": "nativized from BP (rotorwash)",
    "FortHoagieVehicle:WashAltAlpha_Native": "nativized from BP (rotorwash)",
    "FortDagwoodVehicle:AccelForceFeedbackHandle": "nativized from BP (rumble)",
    "FortDagwoodVehicle:BrakeForceFeedbackHandle": "nativized from BP (rumble)",
    "FortDagwoodVehicle:HandBrakeForceFeedbackHandle": "nativized from BP (rumble)",
    "FortDagwoodVehicle:SkidForceFeedbackHandle": "nativized from BP (rumble)",
    "FortHoagieVehicle:LiftForceFeedbackHandle": "nativized from BP (rumble)",
    "FortHoagieVehicle:LiftRumbleTimer": "nativized from BP (rumble)",
    "FortHoagieVehicle:PassiveForceFeedbackHandle": "nativized from BP (rumble)",
    "FortHoagieVehicle:bLiftUp": "nativized from BP (rumble)",
    "FortDagwoodVehicle:NativeComp_Damage": "nativized fx component for damage",
    "FortAthenaVehicle:NativeSys_LowFuelSputter": "nativized fx component for fuel sputter",
    "FortAthenaVehicle:NativeComp_LowFuelSputter": "nativized fx component for low fuel sputter",
    "FortDagwoodVehicle:NativeComp_RoadAndExhaust": "nativized fx component for road/exhaust",
    "FortDagwoodVehicle:NativeSys_TireExhaust": "nativized fx component for road/exhaust",
    "FortDagwoodVehicle:NativeComp_SpeedLines": "nativized fx component for speed lines",
    "FortDagwoodVehicle:NativeSys_SpeedLines": "nativized fx component for speed lines",
    "FortDagwoodVehicle:NativeComp_TireSkid": "nativized fx component for tire skid",
    "FortDagwoodVehicle:NativeSys_TireSkid": "nativized fx system for tire skid",
    "FortHoagieVehicle:HoagieAnimBP_Native": "nativized hoagie anim BP",
    "FortHoagieVehicle:DamageFX_Native": "nativized hoagie damage fx component",
    "FortHoagieVehicle:HoagieIdleFX_Native": "nativized hoagie idle fx component",
    "FortHoagieVehicle:RotorWashFX_Native": "nativized hoagie rotor wash fx component",
    "FortNevadaVehicle:Native_EnergyFieldMat": "nativized material",
    "FortNevadaVehicle:Native_EnergyRingMat": "nativized material",
    "FortNevadaVehicle:CockpitDissolveStartTime": "nativized start time for cockpit dissolve",
    "FortNevadaVehicle:FortNevadaAudioController": "nevada audio controller actor instance",
    "FortNevadaVehicle:AudioControllerActor": "nevada audio controller child actor component",
    "FortNevadaVehicle:FortNevadaAudioControllerClass": "nevada audio controller class",
    "EMatchmakingSourceV2.ReadyUpScreenWidget": "new \"activity browser\"",
    "EMontageSelectionPredicateType.Invalid": "new default - should never be serialized",
    "EAthenaGameMsgType.None": "no message",
    "FortControllerComponent_PlayerAugmentPersistence:AugmentsCollectedThisMatch": "no need to replicate - can be separately derived by the client.",
    "EDeathCause.LoggedOut": "no need to update ToDeathCause and GetWeaponTypeFromDeathCause for logout situation",
    "ERewardPlacementBonusType.None": "no placement used",
    "ERewardTimePlayedType.NoReward": "no reward for time played",
    "FortQuestObjectiveStat": "non data table based Objective Stat data - for use by quest objective that have inline object stats data",
    "EDamageCauserType.Pickaxe": "non-categorized",
    "StaticMeshBudget:MaxNonNaniteRadius": "non-nanite static meshes that have high vert counts are expensive to render so we flag them. Configurable in /FortniteGame/Config/DefaultEditor.ini",
    "ERewardTimePlayedType.Default": "normal handling of XP per minute",
    "EAthenaWinCondition.LastManStanding": "normal last man standing",
    "EMatchmakingSourceV2.ActivityMatchmakingWidget": "normal lobby",
    "HarmonixAnalyzerFFTSettings:FftLength": "normally half the fftResolution",
    "EUraniumRoundPhase.None": "not currently processing round phases",
    "FortAnimInput_FerretVehicle:bIsBraking": "not same as bIsEBraking, this has threshold and used to drive animation",
    "FortAnimInput_GolfCart:bIsBraking": "not same as bIsEBraking, this has threshold and used to drive animation",
    "FortAnimInput_Motorcycle:bIsBraking": "not same as bIsEBraking, this has threshold and used to drive animation",
    "FortAnimInput_Quad:bIsBraking": "not same as bIsEBraking, this has threshold and used to drive animation",
    "HarmonixPlayerComponentBase:RuntimeState": "note: only used for UE4 Editor mode",
    "StreamingRadioPlayerComponent:PercentAutostartRadio": "note: these could be split off into their own object (or made sparse) but this is just easier to do in our timeframe.",
    "EFortPawnState.InCombat": "nothing going on (this will not set a bit in the integer)",
    "FortControllerComponent_Telemetry:TotalAmmoCheats": "number of TotalAmmoCheats the bot has made.",
    "FortGameModeAthena:DDoSDetectionMatchInvalidationCount": "number of acceptable escalations in the given time interval; if we exceed this, invalidate the match",
    "PenetrationAvoidanceFeeler:FramesUntilNextTrace": "number of frames since this feeler was used",
    "BuildingGameplayActorSpawnMachine:RebootResourceCost": "number of resource needed to reboot a player, use level 0 value as integer",
    "EUraniumRoundPhase.MAX": "number of total values, not to be used",
    "ObjectiveExtensionMapMarkers:ObjectiveIconOverride": "objective tag to identify icon override in tag to quest icons data table if tag is set on active objective it takes over QuestItemDef IconOverride",
    "FortDagwoodVehicle:OffroadEnvironmentDamageTags": "offroad damage tags",
    "WeaponModAnimData:LeftHandPoseOffset": "offset pose for left hand grip on weapon",
    "McpBanInfo:BanReasons": "one or more reasons for the ban",
    "FortPlayerPawn:SwimDiveBoostTimeThreshold": "only allow a swim dive boost if if we've come from a water jump within this time window",
    "EVkModuleAccess.Protected": "only available within the same project",
    "FortInGamePerkDisplayData:Row": "only matters when we are dealing with SupportTeamStandardPerk and ClassPerk",
    "FortPawn:SwingAttachLocationUpdateDistanceThreshold": "only replicate the new swing location to clients if it's moved beyond this far",
    "EFortPrioritizedWidgetContestedBehavior": "only used when an equal priority thing is occupying the active slot.",
    "FortAthenaTutorial_Ambush:BotController": "only used with the runtime option bEnableBotsInTutorial",
    "VkExperienceData:MapData": "optional base map (intended to support using ready-made base terrains)",
    "VkMapExperienceData:BaseMaps": "optional base maps (intended to support using ready-made base terrains)",
    "FortItemShopLayout:SubsectionId": "optional secondary Subsection ID for this layout, contextualized within the parent Section ID;\nSubsection is not required, as content can live in Offer Groups directly parented to a Section",
    "RewardKeyData:NodeTagMatchReq": "optional tag match to make sure that the key is always associated to particular reward nodes that we expect",
    "FortReplayFXState:DefaultDepthOfFieldQuality": "original depth of field quality",
    "FortReplayFXState:OverrideDepthOfFieldQuality": "original depth of field quality",
    "FortReplayFXState:DefaultParticleLODBias": "original particle LOD bias value",
    "FortReplayFXState:OverrideParticleLODBias": "original particle LOD bias value",
    "EPoppedTireReactionStates.Yaw90": "oscillate between left/right steering for a duration",
    "EMatchmakingCompleteResult.OutpostNotFound": "outpost was not found",
    "PoseDeformationQuery:Alpha": "output result",
    "AudioWorldizationGlobalSettings:WallDistanceBus": "outputs a normalized value representing the average distance of trace hits relative to max trace radius",
    "AudioWorldizationGlobalSettings:ListenerAzimuthBus": "outputs a value in degrees [-180, 180] representing the primary listener orientation",
    "AthenaStreamIdOverride": "overridden stream IDs (a galileo hack)",
    "BuildingPropWall:AreaPatternOverride": "override for shape of navigation area",
    "BuildingStairs:RailingType": "override for shape of navigation area",
    "BuildingWall:AreaPatternOverride": "override for shape of navigation area",
    "WeaponModAnimData:PlayerReloadAnimMontage": "override reload animation for player pawn",
    "WeaponModReloadAnimData:PlayerReloadAnim": "override reload animation for player pawn",
    "WeaponModAnimData:WeaponReloadAnimMontage": "override reload animation for weapon mesh",
    "WeaponModReloadAnimData:WeaponReloadAnim": "override reload animation for weapon mesh",
    "ELinkToDirection.Forward": "owners -right vector",
    "ELinkToDirection.Right": "owners -up vector",
    "ELinkToDirection.Backward": "owners forward vector",
    "ELinkToDirection.Left": "owners right vector",
    "ELinkToDirection.Down": "owners up vector",
    "StateDrivenEvent:StateDrivenOwner": "owning state driven actor component",
    "FortCharacterVehicle_Ostrich:PassengerCameraFixedVerticalOffset": "passenger cam fixed offset from root",
    "FortCharacterVehicle_Ostrich:PassengerCameraFixedVerticalOffsetNoDriver": "passenger cam fixed offset from root when no driver",
    "VkProjectSnapshot:MapPath": "path to the level to load when previewing this snapshot. If blank, the DefaultMap property\nin the .uplugin file will be used.",
    "VkSnapshotSaveRequest:MapPath": "path to the level to load when previewing this snapshot. If blank, the DefaultMap property\nin the .uplugin file will be used.",
    "CommunityVoteInfo:VoteHistory": "per offer vote info (key is offerId)",
    "EFortHealingIncrementType.PercentHealed": "percentage of health that was healed in this event (0 - 100)",
    "EFortShieldGainIncrementType.ShieldGainPercent": "percentage of shields that were gained in this event (0 - 100)",
    "FortAthenaMutator_WarEffort:MeshNetworkMetadata": "persistence for the current active item tags",
    "EDamageCauserType.EnteringWater": "physics snowball will be killed when inactivated",
    "FortNevadaVehicle:BoostPitchAlpha": "pitch alpha at the time of boosting",
    "EPoppedTireReactionStates.FlipRoll": "pitch style flip, tail over head",
    "EFortContentRating.IARC_Everyone": "placeholder! waiting on actual breakdown",
    "ECoastState.EndCoast": "play dismount animation, but don't apply any slowdown yet",
    "FortAthenaMutator_Wax:OnTokensCollected": "player found tokens on their own - client",
    "EFortPawnState.IsReviving": "player is DBNO",
    "EFortPawnState.Dead": "player is being revived by someone",
    "EFortPawnState.DBNO": "player is in combat",
    "EFortPawnState.BeingRevived": "player is reviving someone else",
    "EFortQuestObjectiveStatEvent.Spray": "player using a spray. Target is empty, spray asset tags are passed in Source tags.",
    "EFortQuestObjectiveStatEvent.Toy": "player using a toy. Target is empty, toy asset tags are passed in Source tags.",
    "EFortQuestObjectiveStatEvent.Emote": "player using an emote. Target is empty, emote asset tags are passed in Source tags.",
    "FortControllerComponent_Telemetry:IgnoreTelemetryCapForConsumedItems": "playlists with these tags will ignore the max array cap for consumed items",
    "EDamageCauserType.ShockwaveMace": "plugin contents",
    "FortDecoTool:DecoHelper": "pointer to our helper actor",
    "BuildingGameplayActor:PostProcessOverlapBlendWeight": "postprocess blend weight for automated overlap activation",
    "MtxBreakdown:UnavailableTotalMtx": "premium mtx on this platform",
    "MtxBreakdown:UnavailablePremiumMtx": "premium or common mtx on other platforms",
    "MtxBreakdown:AvailablePremiumMtx": "premium or common mtx on this platform (or shared)",
    "EFortLockerAnalyticAction.Preset_Delete": "preset selector screen",
    "FortDagwoodVehicle:PreviousTurnAlpha": "prev turn alpha",
    "FortCharacterVehicle_Ostrich:DriverPrimaryCooldownHandle": "primary cooldown handle for driver input",
    "EHabaneroProgressError.EmptyRankType": "progress processing issues",
    "VkContentPackage:ProjectFlags": "project flags detected for this project",
    "RuntimeBoostInfo": "properties relating to boost behavior",
    "RuntimeTerrainHandlingInfo": "properties relating to on-road vs off-road",
    "AthenaMidSeasonUpdate:InsertionIndex": "property used to validate declaration order for mid season updates. These initialize to -1, and should be in 0 ascending order once saved",
    "MtxPurchaseHistory:Purchases": "purchase history eligible for refunds",
    "RmtPurchaseHistory:Purchases": "purchase history eligible for refunds",
    "HarmonixVibeEffectSettings:QuadratureFrequency1": "quadrature frequencies of the all-pass filters",
    "AthenaMidSeasonUpdateQuestReq:Quest": "quest definition that we are going to check complete/claimed state for",
    "RepeatableDailiesCardDateOverride:Quest": "quest definition that we are going to make sure is injected into generated repeatable dailies if we are in the given date range",
    "FortCharacterVehicle_Ostrich:ShieldRadius": "radius shield boost",
    "FortMotorSimPatternState:RpmOffsetMax": "randomizes RPM offset",
    "FortMotorSimPatternState:RpmOffsetMin": "randomizes RPM offset",
    "FortCharacterVehicle_Ostrich:DetonateRange": "range of detonate explosion",
    "FortWeaponComponent_Swinging:SphereTraceOneRange": "range of the first sphere trace",
    "FortWeaponComponent_Swinging:SphereTraceTwoRange": "range of the second sphere trace",
    "FortCharacterVehicle:SplashDamageFalloffRange": "range to use for applying splash damage to riders",
    "EDamageCauserType.Fire": "ranged weapon damage",
    "CustomCharacterPartModifier_SlurpLegendsBody:InterpolationRate": "rate of interpolation per second",
    "FortLogoLoadingScreen:LogoSize": "ratio of the image,  1 = use the texture size",
    "WarEffortMeshActor:CurrentFundingData": "raw funding data as determined by the mesh root",
    "FortItemShopCMSSectionMetadata:Subsections": "really just TArray<FFortItemShopCMSSection>, but circular USTRUCT via TArray is not allowed",
    "FortPlayerSurveyCMSCondition:ChildConditions": "really just TArray<FFortPlayerSurveyCMSCondition>, but recursive USTRUCT via TArray is not allowed",
    "EContextualEvent.StartSkydiving": "really, the only special one - here we want to surface visit/land objectives.",
    "FortRangedWeaponStats:PerBulletRecoil": "recoil specified per bullet fired",
    "PendingDeployableManagerAction:Manager": "reference to the deployable base manager",
    "ELoginResult.AuthFailed_RefreshInvalid": "refresh credentials used were no longer valid",
    "EContentRequestInstallState.COMPLETELYLOADED": "registered and has manifests but is not installed, REQUESTABLE STATE",
    "AudioWorldizationSettings:TraceOrigin": "relative position to offset traces from - recommend raising to avoid tracing straight into the floor",
    "FortInteriorAudioComponent_SphereTrace:TraceOrigin": "relative position to offset traces from - recommend raising to avoid tracing straight into the floor",
    "EFortPrioritizedWidgetInterruptedBehavior.RemainInQueue": "remain in place in the queue.",
    "FortScoutDroneMovementComponent:ReplicatedAcceleration": "replicate the input acceleration for animated transitions",
    "FortVehiclePontoonsComponent:OverridePontoonRadiuses": "replicated array of pontoon override radiuses that will be initialized to be the same size as the pontoons array.\n              needed so that if a player enters relevancy of a vehicle with runtime overridden pontoon radius, they can get the correct values.",
    "FortTimeOfDayManager:bHeightFogEnabled": "replicated copy of ExponentialHeightFogComponent's bHeightFogEnabled property",
    "FortPhysicsChainConstraint:StartPointAttachData": "replicated data\nattach data is used to save the offsets to chains",
    "FortCharacterVehicle_Ostrich:bKickRep": "replicated flag - true if we're kicking",
    "FortWeaponRanged_Ostrich:bRocketsOnCooldown": "replicated flag for rocket cooldown",
    "FortHoagieVehicle:HoagieStateRep": "replicated hoagie state",
    "FortAthenaMutator_WarEffort:PreloadedItemList": "replicated list of assets to attempt to preload on clients",
    "FortDagwoodVehicle:ServerRepWheelData": "replicated list of attached wheel data needed so that clients can know when the mesh components\n              have replicated, and to store the current wheel health",
    "WarEffortMeshActor:ActiveFundedItems": "replicated list of fully funded items as determined by the mesh root",
    "WarEffortMeshActor:ActiveTryBeforeYouBuyItems": "replicated list of try-before-you-buy items",
    "FortNevadaVehicle:ServerReplicatedState": "replicated nevada state",
    "FortDagwoodVehicle:ReplicatedPoppedTireReaction": "replicated popped tire reaction decided by the server",
    "TeamMapInfo:ReplicatedSeedPack": "replicated to clients",
    "FortPlayerStateAthena:AIKillCount": "replicatedUsing = OnRep_AIKills,",
    "EBracketNodeState.Neutral": "represents the enemy team's current position in the bracket",
    "EBracketNodeState.EnemyTeam": "represents the local player's team's current position in the bracket",
    "ContentBeaconError:RequestId": "request id will be valid if the error is associated with a specific request\nthis is useful if the error handler wants to cancel the request",
    "VkContentFilter:Platform": "requesting client should populate with FPlatformProperties::IniPlatformName()",
    "FortGameplayEffectDeliveryActor:bAddHitResultToTouchApplication": "required for damage zone support (headshots)",
    "FortItemShopLayout:SectionId": "required top-level Section ID for this layout",
    "EGateCheckType.RequireSequentialOrder": "requires the last gate in the array to be open to allow objective progression.\n      * This will not allow gates to open unless the previous gate in the array is open.\n      * The final gate can still use advanced gate logic to require others to be open at the same time.\n      * Each gate state checked in order will use advanced logic if it is specified but only for determining if it is already open, not if it can open.\n      * Note: Sequential ordering only affects gate opening not closing. And only affects opening when directly called, not if triggered off a timer from close.",
    "EFortAILODLevel.BelowLower": "reserved for dormant or sleeping NPCs. Its assumed in some code that there won't be lower value EFortAILODLevel's than this",
    "VkProjectSnapshot:Content": "resolved modules to include in this snapshot (version pinned)",
    "VkSnapshotSaveRequest:Content": "resolved modules to include in this snapshot (version pinned)",
    "FortCharacterVehicle_Ostrich:ShieldBoostResourceCost": "resource cost of using shield boost",
    "FortAthenaVehicle:DriverReticleBrush": "reticule for driver",
    "FortWeaponRanged_Ostrich:AimPointCacheRange": "return range for cached aimpoint",
    "EAthenaRewardVisualImportanceType.Crazy": "rewards that have new features",
    "FortWeaponRanged_Ostrich:FireRate": "rocket fire rate - shots per second",
    "FortControllerComponent_SkydiveFeedback:RotOscPitchMaxAmplitude": "rot pitch max amplitude",
    "FortControllerComponent_SkydiveFeedback:RotOscPitchMaxFreq": "rot pitch max freq",
    "FortControllerComponent_SkydiveFeedback:RotOscPitchMinAmplitude": "rot pitch min amplitude",
    "FortControllerComponent_SkydiveFeedback:RotOscPitchMinFreq": "rot pitch min freq",
    "FortControllerComponent_SkydiveFeedback:RotOscRollMaxAmplitude": "rot roll max amplitude",
    "FortControllerComponent_SkydiveFeedback:RotOscRollMaxFreq": "rot roll max freq",
    "FortControllerComponent_SkydiveFeedback:RotOscRollMinAmplitude": "rot roll min amplitude",
    "FortControllerComponent_SkydiveFeedback:RotOscRollMinFreq": "rot roll min freq",
    "FortControllerComponent_SkydiveFeedback:RotOscYawMaxAmplitude": "rot yaw max amplitude",
    "FortControllerComponent_SkydiveFeedback:RotOscYawMaxFreq": "rot yaw max freq",
    "FortControllerComponent_SkydiveFeedback:RotOscYawMinAmplitude": "rot yaw min amplitude",
    "FortControllerComponent_SkydiveFeedback:RotOscYawMinFreq": "rot yaw min freq",
    "FortVariantSprayCustomizerChannelOptions:RotationOffset": "rotation offset for Frontend 3D preview when this spray should be in focus",
    "FortHoagieVehicle:RotorImpactTraceAngle": "rotor trace yaw angle - trace will go along this direction",
    "FortHoagieVehicle:RotorTraceProfile": "rotors trace profile name",
    "EUraniumRoundEndCondition.RanOutOfTime_Or_CheckpointReached": "round ends when any check-point has been reached",
    "EUraniumRoundEndCondition.RanOutOfTime_Or_LastCheckpointReached": "round ends when the last check-point on the spline has been reached",
    "FortVFXMarshaller:RuntimeData": "runtime data filled by our component",
    "MilkshakeEarthquakeActor": "s19 Earthquake actor. Parent class of BP_Milkshake_Earthquake where most of the logic lives.",
    "EClientSettingsSaveType.LocalDisk": "saving locally to the GeneratedConfigDir",
    "EClientSettingsSaveType.CloudStorage": "saving to the currently active cloudstorage provider",
    "FortSplineGroundPath:StaticMeshScaleStart": "scale a section starts with.",
    "TireInfo:TireMeshScaleFront": "scale to the apply to the tire mesh front tires",
    "TireInfo:TireMeshScaleRear": "scale to the apply to the tire mesh rear tires",
    "FortMotorSimComponent_SurfaceModifier:ThrottleRange": "scales the amount that throttle is affected by the curve",
    "DampedSpringConfig:Stiffness": "scales the strength of the spring force",
    "EUraniumRoundPhase.SetupForNextRound": "screen should be fully faded, teleport the cart and set the new view target, modify the world as needed for the new round",
    "FortDagwoodVehicle:PassengerLeanSockets": "seat index maps into this array of socket names that correspond to a \"lean\" socket while aiming/shooting out of the window",
    "FortWeaponRanged_Ostrich:ShotgunFireSecondBarrel": "second barrel version of shotgun fire asset because it's got two barrels that alternate",
    "FortCharacterVehicle_Ostrich:DriverSecondaryCooldownHandle": "secondary cooldown handle for driver input",
    "AccoladeSecondaryXpType:Type": "secondary xp categories are defined by gameplay tag",
    "FortWeaponRanged_Ostrich:StartLoadingSectionName": "section name for start loading",
    "EFortGiftWrapType.UserUnlock": "selectable by users with an item of this type in their profile (not consumed)",
    "EFortGiftWrapType.UserConsumable": "selectable by users with an item of this type in their profile (q=1 is consumed on use)",
    "EFortSelfHealingHandling.Prohibited": "self healing is not allowed",
    "PegasusJob": "sent from AWS for what clips we should extract from a replay",
    "FortPlayerStateZone:OnBeginSpectatingEvent": "server event called when this player state begins spectating",
    "DeathInfo:Downer": "server only explicit downer, never finisher.",
    "FortWeaponComponent_Swinging:DotForValidTargetPosition": "server uses this to valid the target position received via RPC",
    "FortAthenaMutator_ContextTutorial:MessageSound": "set above zero to have an effect. The context tutorial will be enabled for people equals or less than the value.",
    "FortTopBarTabButtonInfo:bInteractAnalytic": "set for 'FireEvent_TopTab_Interaction' analytic on click",
    "FortGameStateOutpost:StormShieldDefenseType": "set to EStormShieldDefense",
    "ConsolidatedQuestComponent:bIsInteractable": "set to true if this object SHOULD be interactable",
    "DynamicCompositeWorld:bLevelStreamedIn": "set to true once the level has been streamed in",
    "FortMovementComp_Character:bSwingFromMovingBase": "set true if we're standing on a moving base when attaching to swing",
    "FortPlayerPawn:bInitializedPostRepPlayerState": "set when player state to prevent re-init of customization, spawning effects",
    "FortGameModeAthena:DDoSDetectionMatchInvalidationSeverity": "severity to count escalations for. this is given to us as an FString since the tiers are defined at runtime by config.\nfor Fortnite, \"DebilitatingDDoS\" is what we want to look for.",
    "FortAthenaMutator_DadBro:InitialLandingCueTag": "should fire once when the player lands.",
    "EPostGamePlacement.Lose": "show the player that they lost",
    "EPostGamePlacement.Tie": "show the player that they tied",
    "EPostGamePlacement.Win": "show the player that they won",
    "EUraniumRoundPhase.ShowRoundIntro": "show the round intro screen which tells players their objective",
    "FortAIPawn:OnActorBeginCrowdOverlap": "similar to OnActorBeginOverlap notify, called when two crowd agents overlap each other",
    "FortGameStateComponent_BattleRoyaleGamePhaseLogic:EndAircraftPhaseRequiredAlivePlayersPercent": "similar to the StartAircraftPhase variant of this property, if we have less than this percent of players (versus the number we received\nin match assignment) alive at the end of aircraft phase (before we start safezones), kick all players, invalidate the match, and do not record\nscores for anyone. this is necessary as we've seen DDoS attempts both on the warmup island and during the bus phase, unfortunately.\n\nin most cases, we want this to be slightly smaller than the StartAircraftPhase percent to allow for people who actually get r3kt on drop.",
    "PlatformPrefixIcon": "simple pairing of Platform and Icon",
    "EFortPrioritizedWidgetInterruptedBehavior.Drop": "simply drop",
    "FortHoagieVehicle:LiftFromOverrideButton": "since we allow keymapping the up/down movement to buttons (Default is axis on the mouse), need to way to track if input was used here so mouse input that happens with a 0\nmagnitude every frame regardless doesn't override it",
    "FortCosmeticReactivePreview:PotentiallyResponsiveObjects": "since we might be calling into AnimInstace or a number of different Actors/Components, store the references to them as UObject.",
    "FortWeaponComponent_Swinging:AngleFromTargetForSphereSweep": "skip the sphere sweep if we're still aimed within this angle of our last valid target",
    "EFortItemType.AthenaSkyDiveContrail": "sky diving trail",
    "ProjectileMovementDrunkConfig:HomingPassedTargetSlackTime": "slack time after we set our final homing target position before we can consider having passed it",
    "FortHoagieVehicle:SeatTransition_ToDriver": "slot for driver seat transition",
    "FortHoagieVehicle:SeatTransition_ToPassenger": "slot for passenger seat transition",
    "NevadaMoveModeConfig:DragForceMultiplier": "slows the vehicle down when there's no thrust input",
    "FortHoagieVehicle:AltimeterTraceSocketName": "socket name for altimeter trace",
    "VehicleAttachment:SocketName": "socket name for attachment",
    "FortHoagieVehicle:MainRotorCritSocketName": "socket name for main rotor crits",
    "FortCharacterVehicle_Ostrich:PassengerCameraSocket": "socket name for passenger camera",
    "FortHoagieVehicle:RotorDamageTraceSocketName": "socket name for rotor damage trace",
    "FortHoagieVehicle:TailRotorCritSocketName": "socket name for tail rotor crits",
    "EFortItemType.AthenaExtResource": "some external resource, eg streaming radio or podcast",
    "EServerRestartReason.Other": "something else",
    "FortCharacterVehicle_Ostrich:SpawnedBeam": "spawned component for beam emitter",
    "FortCharacterVehicle_Ostrich:SpawnedImpactEnemy": "spawned component for enemy impact emitter",
    "FortCharacterVehicle_Ostrich:SpawnedImpact": "spawned component for impact emitter",
    "FortCharacterVehicle_Ostrich:SpawnedSource": "spawned component for source emitter",
    "ESupplyDropSpawnType.SafeZoneDriven": "spawning is automatic and based on data configured on a per SafeZone basis",
    "ESupplyDropSpawnType.ItemDeliveryManagement": "spawning is automatic, is responsible for dropping an item into the world and\nto maintain some number of said item across the game",
    "FortEventLevelNavigationActor:SpecialInteractionTags": "special interaction to do when this actor is interacted with from a given camera",
    "EFortItemType.CosmeticVariantToken": "special token that will grant a cosmetic skin access a variants on the item def",
    "EFortItemType.ChallengeBundleCompletionToken": "special token that will track the completion progress of ChallengeBundles",
    "ContentBeaconError:ModuleURL": "specific FVkRequest which caused the error\nfor logging purposes",
    "ContentBeaconError:ModuleId": "specific FVkResolvedModule which caused the error\nset only if the error was caused by a specific module\nfor logging purposes",
    "FortDeployableBaseManager:NumPiecesDestroyedOnZoneCleanupPerUpdate": "specifies the number of pieces we will destroy per update",
    "ObjectiveEntry_Gate:GateName": "specify a unique name for this gate, used for advanced logic gate matching",
    "EGateType.SingleEvent": "specify an event tag and this gate will open when that event is received",
    "RepeatableDailiesCardDateOverride:End": "specify end of override date range",
    "AthenaMidSeasonUpdateQuestReq:bCompletionRequired": "specify if we expect this quest to be in a complete/claimed state or not",
    "RepeatableDailiesCardDateOverride:Start": "specify start of override date range",
    "FortWeaponComponent_Swinging:SpeedLinesTag": "speed lines gameplay tag",
    "FortNevadaVehicle:NativeComp_SpeedLines": "speed lines particles",
    "FortWeaponComponent_Swinging:MinSpeedForProximityDetach": "speed needed to trigger a proximity detach",
    "FortHoagieVehicle:CurrentRotorAngle": "speed of the rotors",
    "FortHoagieVehicle:CurrentRotorSpeed": "speed of the rotors",
    "FortAthenaVehicle:BoundsXYSplineComponent": "spline component used for defining a map boundary that turns the vehicle around",
    "FortRangedWeaponStats:PerBulletSpread": "spread specified per bullet fired",
    "RuntimeSpringsInfo:SpringLengthMultiplier": "spring length multiplier for front tires",
    "RuntimeSpringsInfo:RearSpringLengthMultiplier": "spring length multiplier for rear tires",
    "TireInfo:PoppedTireSpringLength": "spring length used when tire is popped",
    "RuntimeGearInfo": "spring multipliers for tuning suspension",
    "RuntimeSpringsInfo": "spring multipliers for tuning suspension",
    "EUraniumRoundPhase.FadeIn": "start fading the screen in",
    "InteractionSplinePoints:SplineStartLocation": "start of the spline on the FIT muzzle",
    "FortNevadaVehicle:CurrentStateStartTime": "start time of the current vehicle state",
    "FortWeaponComponent_Swinging:SphereTraceOneRadius": "starting offset from the camera for the first sphere trace",
    "FortWeaponComponent_Swinging:SphereTraceOneStartOffset": "starting offset from the camera for the first sphere trace",
    "FortWeaponComponent_Swinging:LineTraceStartOffsetFromCamera": "starting offset from the camera for the initial line trace",
    "FortWeaponComponent_Swinging:SphereTraceTwoRadius": "starting offset from the camera for the second sphere trace",
    "EObjectiveConversationTriggerType.StatEquals": "stat equals x amount",
    "EObjectiveConversationTriggerType.StatIncreasedby": "stat increased by x amount",
    "EObjectiveConversationTriggerType.StatLessThan": "stat less than amount by x",
    "FortNevadaVehicle:NativeComp_ShieldMesh": "static mesh of the cockpit shield",
    "ESpecialActorStatType.NumEliminationsNearby": "stats for any generic actor",
    "ESpecialActorStatType.PickupNumSpawns": "stats for when the special actor is a FortPickup",
    "ESpecialActorStatType.PlayerWon": "stats for when the special actor is a player",
    "EPoppedTireReactionStates.VeerRight": "steering angle goes left for a duration",
    "EPoppedTireReactionStates.Wiggle": "steering angle goes right for a duration",
    "TireInfo:PoppedTireSpringStiff": "stiffness used when tire is popped",
    "TireSimulationRuntimeData:PoppedTireSpringStiff": "stiffness used when tire is popped",
    "FortCharacterVehicle_Ostrich:AccelFromIdleDuration": "stop accelerating from idle when velocity exceeds this",
    "RockRuntimeConfigOverrides": "store and replicate vehicle config values that can be modified at runtime",
    "DagwoodRuntimeModifiers": "store and replicate vehicle properties that can be modified at runtime",
    "FortVehicleSeatComponent:PreviousDriver": "store last driver for use later",
    "FortGenericDataStoreManagerComponent:ClassToNameMapping": "store our Name -> Object map by class lookup (reduces likelihood of collisions and we can do particular operations more efficiently)",
    "ExcelImportUtil:LastExcelFilePath": "store the last XLS file we imported from so we can support quick reimport (relative path)",
    "FortPickup:OwnerInstigator": "stores the OwnerInstigator passed in from FortPickupCreationData",
    "LogicTreeBase": "struct FLogicTreeBase\n\nAbstract Base Class defining elements in a binary decision tree. This class and its decedents\nare used to display the tree in the editor UI. A separate structure represents the tree at runtime.",
    "LogicTreeBranch": "struct FLogicTreeBranch\n\nClass defining branch elements in a binary decision tree displayed in the editor UI only.\nEach branch contains two children (true and false) and a the name of a property that can\nbe used to look up a boolean condition in the runtime structure.",
    "LogicTreeLeaf": "struct FLogicTreeLeaf\n\nClass defining the final, leaf elements in a binary decision tree displayed in the editor UI only.",
    "BackendJobsPayload": "struct received from AWS about what work we have to do",
    "OnTimeHitInfo": "struct that defines a call back to be called at a designated time",
    "SpecialActorStatData": "struct used to store all stats across all special actors across the game",
    "SpecialActorSingleStatData": "struct used to store data that keeps track of stats related to the special actor",
    "FortReconstructibleAthenaLoadout": "struct which intends to hold fewer resources to represent a full loadout (both lower persistent memory impact and shorter utilization of higher memory)",
    "InteractionData": "structure for replication of important interaction data. Our visual states need to know these peices of data.",
    "MeshMetaDataStruct": "stub struct type for use in custom struct param metadata functions",
    "ProjectileHomingData:HomingStyle": "style of homing to use",
    "FortTheaterRuntimeData": "subset of FFortTheaterMapData that is opaque to the backend (serialized via JsonNode)",
    "FortNavigationVisibilityComponent:ValidActiveCameraTags": "supported camera tags",
    "ESocialImportPanelPlatform": "synchronize with enum in com/epicgames/fortnite/core/game/commands/ClaimImportFriendsReward.java",
    "EPlayerBanReasons": "synchronize with enum in com/epicgames/fortnite/core/model/toxicity/BanType.java\nthis is closely related to EPlayerReportReasons but not exactly the same",
    "EPlayerCompetitiveBanReasons": "synchronize with enum in com/epicgames/fortnite/core/model/toxicity/CompetitiveBanReason.java",
    "FortQuestObjectiveStat:TagConditions": "tag check data, generated from various gameplay tag editor only data",
    "FortCharacterVehicle_Ostrich:FireShotgunTag": "tag for firing shotgun",
    "FortCharacterVehicle:IgnoreDamage": "tag for ignoring damage",
    "FortCharacterVehicle:BlockEntry": "tag for kick stomp ability",
    "FortCharacterVehicle_Ostrich:KickStompTag": "tag for kick stomp ability",
    "FortWeaponRanged_Ostrich:LoadRocketTag": "tag for loading a rocket",
    "FortCharacterVehicle_Ostrich:ReloadShotgunTag": "tag for reloading shotgun",
    "EncounterVariableSelectionsRow:RequiredCapabilities": "tag query to check capabilities required for this encounter",
    "FortCharacterVehicle_Ostrich:MissilesTag": "tag used on missiles ability for seeing if damage was done by mech missiles",
    "AthenaCarPlayerSlot:SeatTags": "tags applied to the player in this seat",
    "FortEventLevelCamera:NavigationActorsToTurnOn": "tags to all the navigation actors to turn on",
    "FortDagwoodVehicle:FlipYawForwardTargetDirection": "target direciton during flip yaw",
    "FortProjectileMovementComponent:LockedOnTarget": "target for lock on homing",
    "ProjectileHomingData:LockedOnTarget": "target for lock on homing",
    "ProjectileHomingData:LockedOnTargetPosition": "target position for lock on homing",
    "TeamMapInfo:TeamId": "team id\nreplicated to clients",
    "FortGameStateAthena:CurrentHighScoreTeam": "team of the highest score so far",
    "EAthenaWinCondition.TimedTeamFinalFight": "team with most players wins after a timer expires that is set when the last storm circle begins (ties allowed)",
    "FortCharacterVehicle_Ostrich:BeamTemplate": "template for the beam",
    "FortCharacterVehicle_Ostrich:BeamHitEnemyTemplate": "template for the beam enemy hit",
    "FortCharacterVehicle_Ostrich:BeamHitTemplate": "template for the beam hit",
    "FortCharacterVehicle_Ostrich:BeamSourceTemplate": "template for the beam source",
    "FortProjectilePetrol:PetrolTemplate": "template of the actor to spawn on impact",
    "FortProjectilePetrol:FortSplineGroundPathTemplate": "template of the ground path spline to spawn on impact",
    "GameLogStream:DeathEvents": "template structs can't be UProperties, so duplication is unavoidable",
    "VariantParticleSystemInitializerData:ParticleSystem": "template to apply to the component",
    "FortWorldManager:MaxConsecutiveFails": "temporary properties for FORT-162331, to make hanging servers crash earlier until we fix the problem",
    "EActivePreTravelSetupStepsMask.CancelingPreTravelSetup": "test mode for creating a second content beacon",
    "CosmeticDeveloperSettings:CosmeticItemsToPreRegister": "test out pre-registering these items",
    "MaterialParamterDef:TextureParams": "texture data",
    "EFortAccoladeType.Medal": "that was kinda cool",
    "FortCharacterVehicle_Ostrich:KneelingDriverSeatVerticalOffset": "the \"kneeling down state\" animation moves the driver seat vertically by this amount",
    "FortCharacterVehicle_Ostrich:KneelingGunnerSeatVerticalOffset": "the \"kneeling down state\" animation moves the gunner seat vertically by this amount",
    "EFortBuildingInteraction.Creative": "the Building Piece is being interacted by a creative tool.",
    "PartyMemberCosmeticLoadout:BackpackEKey": "the Encryption Key for the BackpackDefinition",
    "PartyMemberCosmeticLoadout:CharacterEKey": "the Encryption Key for the CharacterDefinition",
    "PartyMemberCosmeticLoadout:PickaxeEKey": "the Encryption Key for the PickaxeDefinition",
    "PartyMemberCosmeticLoadout:ContrailEKey": "the Encryption Key for the SkyDiveContrailDefinition",
    "FortUnderwaterDamageComponent:GE_UnderWaterDamage": "the GE that applies to deal the actual damage",
    "VkModuleVersion:ModuleId": "the Module ID (UUID)",
    "VkProjectDoc:ProjectId": "the Project ID (UUID)",
    "VkProjectSearchResult:ProjectId": "the Project ID (UUID)",
    "VkProjectSearchResultSlim:ProjectId": "the Project ID (UUID)",
    "FortControllerComponent_Ghost:DBNOToGhostReviveGameplayEffect": "the Revive Gameplay Effect used when the player becomes DBNO while bBecomeGhostOnDBNO is set to true",
    "BackendAlarmPayload:PGS_RenderQueueUrl": "the SQS queue we polled",
    "BackendJobCompletePayload:PGS_RenderQueueUrl": "the SQS queue we polled",
    "XPEventEntry:AccoladeDef": "the accolade def for this XP event",
    "EMontageSelectionPredicateType.ActiveSwapPresence": "the active swap requirements of the montage section will be evaluated",
    "CardPackResultNotification:LootGranted": "the actual loot result",
    "FortClaimedDifficultyIncreaseRewardNotification:LootGranted": "the actual loot result",
    "FortCollectionBookClaimRewardNotification:Loot": "the actual loot result",
    "FortLootNotification:LootGranted": "the actual loot result",
    "FortMissionAlertCompleteNotification:LootGranted": "the actual loot result",
    "FortMissionCompletionNotification:LootGranted": "the actual loot result",
    "FortPlayerControllerAthenaXPComponent:PlayerXp": "the amount of XP the player has, this is seeded from MCP then added to as the game is player, When a player \"levels\" we reduce this value by the XP needed to level",
    "AccoladeSecondaryXpType:XpAmount": "the amount of XP this accolade will grant to the user in tis secondary type category",
    "XPEventEntry:EventXpValue": "the amount of XP this event granted to the player",
    "FortProjectilePetrol:FuelAmount": "the amount of fuel given by this projectile",
    "CollectorUnitInfo:InputCount": "the amount of input items needed, curve is based on rarity or capture count",
    "EDeployableBaseBoxType.PlotSpace": "the area of buildable space that gets saved",
    "EDeployableBaseBoxType.NumSpaceTypes": "the area that encompasses the entire plot",
    "EDeployableBaseBoxType.SaveSpace": "the area you can build in",
    "FortControllerComponent_HasCoupledWidgets:SpawnableWidgets": "the array of widget classes and the slots to construct them in.",
    "FortGiftBoxFortmatData:StringAssetType": "the asset string inside the gift box to apply to, i.e. header, body and so on",
    "FortNavigationActor_EventGraphItem:NodeTag": "the assigned tag from the reward event graph",
    "BackendJobCompletePayload:PGS_AsgName": "the auto scaling group we belong to",
    "BaseVariantDef": "the base class for all variant types, this defines the variant tag, if it is the default and if it starts unlocked or not",
    "AthenaCapturePoint:CaptureComponent": "the box collision component that will be responsible for overlap events triggering capture point logic",
    "AthenaCapturePoint:StructuralComponent": "the box component that will be responsible for the entire capture point building (encompasses the overlap detection as well as the cosmetic structure)",
    "FortEventLevelNavigationActor:CalendarEventName": "the calendar event that must be present to navigate to this object, if empty can always nav to",
    "DynamicCompositeWorld:CalendarEventName": "the calendar event that must be present to stream in the level, if empty will not stream in",
    "DynamicCompositeWorld:CameraOverride": "the camera in the settings to override",
    "DynamicStreamingLevelData:CameraName": "the camera name to apply this to",
    "FortEventLevelCamera:BackOutCamera": "the camera tag that on \"back out\" / \"cancel\" button press will transition to",
    "NavOptions:CameraTag": "the camera that these nav options are for",
    "DynamicStreamingLevelData:CameraOverride": "the camera to to use for this streaming level",
    "EncounterSelectLWMEncounterStateTreeTaskInstanceData:Capabilities": "the capabilities for this task (some entries have required capabilities)",
    "EMontageSelectionPredicateType.CharacterParts": "the character part requirements of the montage section will be evaluated",
    "FortAIPawn:SimpleCollisionsProfileName": "the collision profile name we will switch to when using simple collisions",
    "MaterialVariants:ComponentToOverride": "the component part the change the material on, if name is none will replace all materials of MaterialToSwap with the OverrideMaterial",
    "MeshVariant:ComponentToOverride": "the component part the change the mesh on, if name is none will replace all meshes of MeshesToSwap with the OverrideMesh",
    "ParticleVariant:ComponentToOverride": "the component part the change the particles on, if name is none will replace all particles of ParticleSystemToAlter with the OverrideParticleSystem",
    "SoundVariant:ComponentToOverride": "the component to change the sound on, if name is none will replace all sounds",
    "FortRangedWeaponRecoil:BulletNum": "the count of bullets since firing started. if this value is 1, then these recoil values will apply to the first bullet fired.\n      if 2, then the second bullet fired and so on. this must be greater than the previous entry.",
    "FortRangedWeaponSpread:BulletNum": "the count of bullets since firing started. if this value is 1, then these spread values will apply to the first bullet fired. if 2, then the second bullet fired and so on. if there's a gap between this and the previous entry, in-between shots will interpolate their values.",
    "FortUpdatedObjectiveStat:CurrentStage": "the current stage of the quest",
    "BuildingItemCollectorActor:OutputDespenseDelayTime": "the curve to use on how long to wait from input payment to output granting",
    "BuildingItemCollectorActor:ActiveItemRotationTime": "the curve to use to rotate between the active items",
    "FortAthenaMapInfo:VendingMachineRarityCount": "the curve with how many of vending machines to spawn at each rarity, 0 = common, 1 = uncommon and so on",
    "BattlePassOfferPurchaseRecord:PurchaseDate": "the date at which the purchase was made (server time)",
    "MtxPurchaseHistoryEntry:PurchaseDate": "the date at which the purchase was made (server time)",
    "RmtPurchaseHistoryEntry:PurchaseDate": "the date at which the purchase was made (server time)",
    "MtxPurchaseHistoryEntry:OriginalPurchaseDate": "the date at which the purchase was originally made (server time). This will only ever be set if the PurchaseDate was modified due to a user purchasing a dynamic bundle",
    "MtxPurchaseHistoryEntry:RefundDate": "the date at which the purchase was refunded (server time). If the purchase has not been refunded, this will be MaxValue()",
    "AthenaDynamicRestedXpGoldenPath:Day": "the day into the season",
    "FortPlayerPet:SavedMaterials": "the default materials used on the pet mesh",
    "FabricSteppedPreviewFXComponent:NumberOfSteps": "the default number of steps that will be spawed. Change at runtime via SetNumSteps()",
    "FortEventLevelCamera:DefaultSelectedObject": "the default object to have in a \"selected State\" when going to this camera",
    "EFortItemType.PlayerTech": "the definition for player tech unlocked through progression",
    "EFortItemType.AthenaRewardGraph": "the definition of a reward graph",
    "FortWeaponComponent_Swinging:DetachTooSlowMaxDotUp": "the dot product of the offset to the attach point with world-up must be less than this to detach for being too slow",
    "FortChallengeBundleInfoLockedReason:EventName": "the event to use for the start time when calculating time until unlock",
    "FortExpeditionResultNotification:ExpeditionRewards": "the expedition rewards",
    "FortGameStateAthena:WinningScore": "the final winning score of the game, not set until the game is over",
    "FortCreativeVkPalette_ProjectInfo:PublicModules": "the following info is filled in as we resolve the link (not serialised)",
    "ChallengeGiftBoxData:GiftBoxToUse": "the giftbox to use",
    "FortGameStateAthena:CurrentHighScore": "the highest score attained in the game so far",
    "BackendExportedClipInfo:PGS_DatabaseId": "the highlight data entry on the backend database this clip represents",
    "FortProjectileBase:CachedImpactResult": "the hit result cached on impact",
    "EServerRestartReason.HotfixApplied": "the hotfix manager has changed config/assets and needs to restart",
    "ClipInfo:DatabaseId": "the id this clip represents in the database",
    "RewardKeyData:RewardKeyInitialCount": "the initial number of RewardKeys granted at point of purchase",
    "BuildingItemCollectorActor:ActiveInputItem": "the input item this collector is actively accepting",
    "BuildingItemCollectorActor:ItemCollections": "the input item, input count, output item, and output gameplay effects container",
    "CollectorUnitInfo:InputItem": "the item that needs to be collected",
    "ItemRequirement:ItemDef": "the item that we are checking for, use bMustOwnItem to know if it must be there or must NOT be there",
    "CollectorUnitInfo:OutputItem": "the item to spawn",
    "RewardNode:RequiredKey": "the key needed to unlock this reward node",
    "FortCharacterVehicle:LastController": "the last controller that possessed the mech",
    "FortAthenaVehicle:PreviousBuildingQueryPosition": "the last position we did a building query from",
    "FortWeaponComponent_Swinging:LastTargetPosition": "the last targeted position",
    "CreativeLoadedLinkData:LinkId": "the link code id",
    "CreativeLoadedLinkData:BuildCodeLinkId": "the link code referring to the underlying promoted link code for a given project. this link code id is populated when we use the new publishing flow.\nNOTE: only available on server as it relies on private metadata.",
    "FortActiveTheaterInfo:Theaters": "the list of active theaters",
    "FortDagwoodVehicle:PassngerLeanRelativeOffsets": "the local offset of the lean socket location relative to the seat - cached to avoid constant calls to GetSocketLocation",
    "MaterialVariants:MaterialToSwap": "the material that should be replaced",
    "RichColorVariant:MaterialsToAlter": "the material to apply this color variant to",
    "RichColorVariant:ParticlesToAlter": "the material to apply this color variant to",
    "FortRangedWeaponRecoil:MaxHorizontal": "the max amount of horizontal recoil applied when this bullet num is fired. negative values will kick left.",
    "FortRangedWeaponRecoil:MaxVertical": "the max amount of vertical recoil applied when this bullet num is fired. negative values will kick downward",
    "DamageDistanceTagEval:DistanceLimit": "the max distance this tag is valid for",
    "PerkMutatorData:MaxRerollsPerPlayer": "the maximum amount of re-rolls the player can have a one time (-1 for no limit)",
    "RewardKeyData:RewardKeyMaxCount": "the maximum number of RewardKey items that will be granted by calendar/date over the course of the event",
    "MeshVariant:MeshToSwap": "the mesh that should be replaced - won't be loaded as we only need the name for comparison",
    "FortPhysicsChainWeaponComponent:ChainLinkMesh": "the mesh that will be used for the chain itself - this must be set for CreateChain to successfully complete",
    "FortEventLevelNavigationActor:DisplayMesh": "the mesh the user will hover over and that will trigger the OnBeginCursorOver, OnEndCursorOver, OnClicked, OnInputTouchEnd delegates to fire",
    "EMontageSelectionPredicateType.MetaTags": "the meta tag requirements of the montage section will be evaluated",
    "FortRangedWeaponRecoil:MinHorizontal": "the minimum amount of horizontal recoil applied when this bullet num is fired. negative values will kick left.",
    "FortRangedWeaponRecoil:MinVertical": "the minimum amount of vertical recoil applied when this bullet num is fired. negative values will kick left.",
    "FortAILODSetting_CharacterMovement:MinimumDynamicInterval": "the minimum tick interval ControlledCharacterMove will have.",
    "EHighlightFeatures.PlacementScore": "the moment when the player wins the game",
    "TireInfo:CollisionBoneName": "the name of the bone that the collision shape for this tire is associated with",
    "TireInfo:PoppedTireBoneName": "the name of the bone to hide on the wheel skel mesh when the tire is popped",
    "DynamicCompositeWorld:CameraName": "the name of the camera in the sub level to use",
    "VariantSwapMontageData:MontageSectionName": "the name of the section to play",
    "FortEventFlagsNotification:RefreshTime": "the next time we should request a new set of flags",
    "RewardNode:KeyCount": "the number of keys needed to unlock this node",
    "FortChallengeBundleRewards:CompletionCount": "the number of quests needed to complete in the bundle to get this reward, -1 mean all the quests in the bundle",
    "CustomCharacterData:Parts": "the number of replicated variant parts",
    "FortPoiManager:MaxNumTestsPerFrame": "the number of tests we will perform during a single frame, -1 means do all the tests",
    "ChallengeGiftBoxData:GiftBoxFormatData": "the optional data to apply to the gift box",
    "VkProjectSnapshot:AccountId": "the owner of this preview record",
    "DynaimcLevelStreamingLocations:StreamingLevelPackageName": "the package name that has been loaded into this location",
    "CollectorTrackedData:Player": "the player this data is tracked for",
    "FortNevadaVehicle:PreviousTractorBeamAttachedPrimitive": "the previous primitive component that is attached to the tractor beam",
    "FortNevadaVehicle:TractorBeamAttachedPrimitive": "the primitive component that is attached to the tractor beam",
    "CreativeLoadedLinkData:Privacy": "the privacy of the island",
    "VkContentPackage:ProjectId": "the project context we are executing within",
    "CreativeLoadedLinkData:ProjectId": "the project id",
    "FortRangedWeaponStats:ProjectileVelocity": "the projectile speed to use for the weapon (must be projectile weapon, and if <= 0 will use the projectile's default)",
    "XPEventEntry:QuestDef": "the quest def that triggered this XP event, used so the client can time when it pops the quest update and this XP event at the same time",
    "QuestRequirement:QuestDef": "the quest def we are keying off of",
    "FortPoi_DiscoverableComponent:QuestObjectiveBackendName": "the quest objective backend name we refer to in our QuestPartOf",
    "StormShieldRadiusGrowthData:StartingRadius": "the radius at the start of the change in size",
    "FortAthenaMutator_Uranium:RespawnRadius": "the radius of the circle around the respawn location where a random location will be chosen for the player to respawn at",
    "FortPickupTagTestContainer:FailReason": "the reason the player will see for the failed interaction",
    "FortBuildingWallDoorComponent:DoorDesiredRotOffset": "the relative rotation offset it used for double or swinging door",
    "FortNavigationVisibilityComponent:ActorResponse": "the response this actor will have when the conditions are met",
    "VkResolvedContent:Root": "the root moduleId+version pair",
    "EServerRestartReason.GracefulShutdown": "the server wants to gracefully shut down",
    "FortEventFlagsNotification:EventFlags": "the set of event flags",
    "VariantParticleSystemInitializerData:MeshToBindTO": "the skel mesh we want to bind to",
    "FortCharacterVehicle:EmoteMesh": "the skeletal mesh we use to copy emotes from (null most of the time, unless the driver is emoting)",
    "VariantParticleSystemInitializerData:AttachSocketName": "the socket to attach to",
    "SoundVariant:SoundToSwap": "the sound that should be replaced - won't be loaded as we only need the name for comparison",
    "FortEventLevelCamera:CameraTransitionParams": "the specific transition from a camera to this camera",
    "FortWeaponComponent_Swinging:SpeedThresholdDetachTooSlow": "the speed threshold used for too slow detach",
    "QuestRequirement:DesiredState": "the state the quest item must be in for the corresponding quest def",
    "FortGiftBoxFortmatData:StringData": "the string data to use, i.e. Epic.Rewards and so on,",
    "PoiDiscoverabilityDataEntry:PoiTag": "the tag for the location we care about",
    "EncounterGetVariantTagQueryStateTreeTaskInstanceData:BaseTagQuery": "the tag query to be combined with the variant tag query",
    "EncounterSelectLWMEncounterStateTreeTaskInstanceData:LWMEncounterTagQuery": "the tag query to use to select an LWM Encounter",
    "LWMEncounterStartStateTreeTaskInstanceData:LWMEncounterTagQuery": "the tag query to use to select an LWM Encounter",
    "LWMEncounterStartStateTreeTaskInstanceData:PointProviderTagQuery": "the tag query to use to select point providers",
    "LWMEncounterAssignPointProvidersStateTreeTaskInstanceData:PatrolPathTagQuery": "the tag query used to select patrol paths",
    "EnableEncounterPointProvidersStateTreeTaskInstanceData:ProviderTagQuery": "the tag query used to select providers",
    "DamageDistanceTagEval:DistanceTag": "the tag to apply to the dmg tags",
    "FortNavigationActor_EventGraphItem:ParentNavObject": "the tag to the nav object (NavigationActorTag) that is our parent, they must do a random roll BEFORE us, this is so we can have \"piles\" of rewards, and we will make sure this item roll on the parent nodes childre",
    "BaseVariantDef:CustomizationVariantTag": "the tag used to identify this index on the back end, should be not be shared with any other FProgressiveAlterationDef inside the UFortCosmeticMaterialAlteration MaterialOptions array.",
    "BuildingItemCollectorActor:AllowedItemRotationDamageTags": "the tags that are require on incoming damage to allow the active item to cycle",
    "BuildingProp_VendingMachine:AllowedItemRotationDamageTags": "the tags that are require on incoming damage to allow the active item to cycle",
    "SpawnActorStateTreeTaskInstanceData:ActorTags": "the tags to add to the spawned actor",
    "CollectorTrackedData:Team": "the team that this data is tracked for",
    "FortPlayerPawn:ClientSwimDiveInputTime": "the time the swim dive input was pressed on the client",
    "FortWeaponComponent_Swinging:TimeThresholdDetachTooSlow": "the time threshold used for too slow detach",
    "MtxPurchaseHistoryEntry:UndoTimeout": "the timeout date for which the purchase can be cancelled. If not present, will be MinValue()",
    "VkProjectUserInfo:Title": "the title of the project",
    "DynaimcLevelStreamingLocations:LoadLocation": "the transform to apply to the level being loaded",
    "FortEventLevelCamera:FallbackTransitionParams": "the transition params to use if ones are not defined in CameraTransitionParams",
    "BuildingItemCollectorActor:bRequireAllForTurnIn": "the user must have all the required input item count for turning anything in",
    "BuildingItemCollectorActor:bRequireAllForInteraction": "the user must have all the required input item count to even interact with this objective",
    "VariantSwapMontageData:VariantMetaTagRequired": "the variant meta tag that is required to play this section of the montage",
    "SwingingControlParams:VerticalDistanceToAttachPointToLeaveGround": "the vertical distance to the attachment point must be greater than this to leave the grounded swing state",
    "EFortMissionStatus.Max_None": "there is no current status",
    "EFortObjectiveStatus.Max_None": "there is no current status",
    "CustomCharacterData:VariantRequiredCharacterParts": "these are all the character parts required when registering this players character with the cosmetic manager\n              these parts may be swapped out at any time and to prevent issues of not having space for the swap we are using this data to preregister that data",
    "EContentRequestInstallState.HostLoadedClientsInstalled": "these are only valid for requests, (not client requests), they indicate the clients are in a different state then the server",
    "FortAthenaCreativePortal:SanitizedTitle": "these are pulled from IslandInfo (sanitized/localized on client side)",
    "FortActorComponent_StateDriven:VariableFloats": "these floats can be referenced by index in state tree params",
    "NevadaInPersistent:FortNevadaVehicleConfigs": "these properties uses the \"automatic marshalling\" (named the same as the property on the vehicle, so is automatically copied over into this struct)",
    "FortActorComponent_StateDriven:VariableTagQueries": "these tag queries can be referenced by index in state tree params",
    "FortChallengeBundleQuestEntry:MenuOverrideRewardPreview": "this allows us to override all quests in this chain to display this item only",
    "FortPlayerStateAthena:bShowingSeasonLevel": "this applies to the player season level in the elimination feed",
    "RockVehicleAbilityOutPersistent:ActiveSeconds": "this changes every frame on the phys thread, but we need it in the persistent data\nsince it has to persist between frames",
    "LivingWorldEncounterPrefab": "this class is instantiated by an actor spawner.  It instantiates an encounter item from the specified encounter definition.",
    "FortGameStateComponent_DynamicStreamingLevel:bDisableDynamicStreamingLevels": "this config setting will disable all our front end streaming levels",
    "FortGameStateComponent_DynamicStreamingLevel:bAlwaysLoadDynamicAsyncStreamingLevels": "this config setting will disable async streaming - bStreamInOnDemand (async) levels will be treated as 'always load'",
    "SoftClassFilterType_Rule_Any": "this filter will pass if the object is any of these classes",
    "FortCreativeVkPalette_ProjectInfo:LinkVersion": "this gets serialized so we can get the same version each time",
    "ECardPackPurchaseError.CannotAffordItem": "this is \"success\" for all intents, wait for the callback to know for sure",
    "EOfferPurchaseError.CannotAffordItem": "this is \"success\" for all intents, wait for the callback to know for sure",
    "FortClientEventsState:WeeklyStoreEnd": "this is NOT exact (it's actually the next market refresh time AFTER this date)",
    "FortClientEventsState:StwWeeklyStoreEnd": "this is NOT exact (it's actually the next market refresh time AFTER this date) for StW (used by the Storefront only)",
    "FortClientEventsState:SectionStoreEnds": "this is NOT exact (it's actually the next market refresh time AFTER this date) for the new item shop",
    "EFortFacialAnimTypes.FaceOnly": "this is default behavior of game",
    "FortClientEventsState:SeasonDisplayedEnd": "this is displayed season end time (if set).  The client will show this time in order to allow for a potential delay shipping a client\n(e.g., we could set displaySeasonEnd to Day X at 4 am, but actual seasonEnd set to X+7 days in season X, and when season X+1 release update the events)",
    "FortClientEventsState:StwEventStoreEnd": "this is exact date the current StW event finishes (used by the Storefront only)",
    "FortClientEventsState:SeasonBegin": "this is exact date the current season began",
    "FortClientEventsState:SeasonEnd": "this is exact date the current season finishes",
    "SrirachaPerClassSpecialSeats": "this is here because it can't be specific to a particular subset of vehicles",
    "FortAthenaCreativePortal:VolumeStatus": "this is loading/error status for the volume",
    "EOfferPurchaseError.PendingServerConfirmation": "this is no error returned in cases where the purchase isn't being atempted.",
    "AthenaExtendedXPCurveEntry:XpPerLevel": "this is the XP per level amount from the starting level until the level specifies by 'UntilLevel'",
    "FortWeaponRanged:BulletCountForPerBulletSpread": "this is the number of shots fired since starting to fire, resetting at potentially a different rate than per bullet recoil.",
    "FortWeaponRanged:BulletCountForPerBulletRecoil": "this is the number of shots fired since starting to fire, resetting to zero after a delay.it's used to index into the list of per-bullet recoil settings.",
    "DecoPlacementState:RawLocation": "this is the raw, unsnapped location we hit",
    "CosmeticDeveloperSettings:CosmeticItemOverrides": "this lets you force items into your inventory without them being on MCP yet.",
    "FortDeveloperSettings:QuestItemOverrides": "this lets you force quests into the quest manager and simulates granting them from MCP with out them being on MCP yet.",
    "SwingingControlParams:UnattachedGroundedCounterInput_MaxDot": "this max value is used to remap the dot result of input direction with current velocity in oder to determine when the input is pointing toward or away from current velocity",
    "EXPEventPriorityType.TopCenter": "this means it will show up in the top center slot before going to the feed",
    "EXPEventPriorityType.XPBarOnly": "this means it won't show up anywhere but the XP bar",
    "EDynamicBuildingPlacementType.DestroyIfColliding": "this means that if it is in the way, it gets destroyed",
    "EDynamicBuildingPlacementType.DestroyAnythingThatCollides": "this means that it will destroy anything in its way when placed",
    "SwingingControlParams:UnattachedGroundedCounterInput_MinDot": "this min value is used to remap the dot result of input direction with current velocity in oder to determine when the input is pointing toward or away from current velocity",
    "EFortCustomPartType.Face": "this part is for facial accessories such as glasses, goggles, masks, etc.",
    "FortSafeZoneIndicator:NextNextCenter": "this property is no longer replicated to all, see: AFortSafeZoneIndicatorFuture",
    "FortSafeZoneIndicator:NextNextRadius": "this property is no longer replicated to all, see: AFortSafeZoneIndicatorFuture",
    "FortAthenaMutator_BallerRace:DelayBeforeRace": "this should be set to 5 seconds before the storm starts moving",
    "EncounterPrefabEntry": "this struct is used to describe an encounter entry to be used in EncounterSpawnerData",
    "EventsTimeline:CacheExpire": "this timeline is guaranteed accurate until CacheExpire. Don't query before then.",
    "EStateDrivenStateID": "this type is used to identify state driven actors states.  They use letters from A to J or higher if we increase the size.  They all have Success and Failure states",
    "FortWeaponComponent_Swinging:MaxRangeMultiplierBasedOnHeight": "this value is used to scale the trace range such that the horizontal max distance is maintained as the player aims upwards, allowing for easier attaching to taller buildings",
    "MaterialVariantDef": "this variant supports changing materials and setting material params on the object",
    "MeshVariantDef": "this variant supports changing meshes on the object",
    "ScriptedActionVariantDef": "this variant supports changing meshes on the object",
    "PartVariantDef": "this variant supports changing out character parts, materials and material params for character parts. This is the Cadillac of variants, it is kinda the summations of all the other variant types into one",
    "DynamicVariantDef": "this variant supports dynamic variant entries",
    "CollectorUnitInfo:OutputGameplayEffect": "this will try to apply an AbilitySets to all pawns in the world, will only apply to pawns that pass the filter",
    "FortWeaponRanged:MuzzleTraceNearWallThreshold": "threshold for determining if the muzzle trace is near a wall",
    "FortWeaponComponent_Swinging:GroundedThreshold": "threshold for skidding grounded",
    "FortWeaponComponent_Swinging:SpeedLinesThreshold": "threshold for speed lines",
    "VolumePerformanceMetrics:PerformanceLowendThreshold": "threshold value for low end devices",
    "FortAthenaVehicle:FireDamageTickTimer": "tick timer for applying fire damage",
    "FortNevadaVehicle:BoostStartTime": "time boost started",
    "FortDagwoodVehicle:FlipStartTime": "time flip started",
    "FortCharacterVehicle_Ostrich:GroundDashStartTime": "time ground dash started",
    "FortGameModeAthena:DDoSDetectionMatchInvalidationEvalDurationSeconds": "time interval over which to count the number of escalations\nwe are not evaluating this over a sliding window, so keep this relatively small so we have decent resolution. if this is deemed\nnot sufficient to detect DDoSes, change this to a sliding window... or possibly an exponential weighted moving average so it's lightweight",
    "FortCharacterVehicle:JumpPressTime": "time jump button was pressed",
    "FortDagwoodVehicle:LastFlipDamageTime": "time last flip damage was taken",
    "FortHoagieVehicle:LastRotorImpulseTime": "time of last rotor impulse",
    "FortCharacterVehicle_Ostrich:ShieldBoostStartTime": "time shield boost started",
    "StormShieldRadiusGrowthData:SafeAreaStartRadiusChangeTime": "time that the radius change started",
    "StormShieldRadiusGrowthData:SafeAreaFinishRadiusChangeTime": "time that the radius change will finish",
    "FortDagwoodVehicle:FadeStartTime": "time the fade was started",
    "AudioWorldizationGlobalSettings:EffectCrossfadeTime": "time to crossfade submix effect chains when changing reverb settings",
    "ECoastState.Dismount": "time to give a chance to pedal again before dismounting (For example going from long coast to a single pedal)",
    "ProjectileHomingData:RampTimeFromMinToMaxTurnSpeed": "time to ramp from min to max turn speed",
    "FortCharacterVehicle_Ostrich:RequestSeatChangeTime": "time we requested a steat change",
    "FortCharacterVehicle_Ostrich:KickStartTime": "time we started kick on the server",
    "EContentBeaconErrorCode.TimeoutRequestTransitionClientsUninstalled": "timed out while trying to set the clients to active",
    "EContentBeaconErrorCode.TimeoutRequestTransitionClientsActive": "timed out while trying to set the host as active",
    "EContentBeaconErrorCode.TimeoutClientTransitionAllLoaded": "timed out while trying to uninstall on clients",
    "EContentBeaconErrorCode.TimeoutUnspecifiedClientTransition": "timeout errors",
    "FortHoagieVehicle:AltimeterTraceTimer": "timer for altimeter trace",
    "FortWeaponRanged_Ostrich:RocketFireTimer": "timer for firing rockets",
    "FortWeaponRanged_Ostrich:RocketChargeTimer": "timer for loading rockets",
    "FortWeaponRanged_Ostrich:AutoFireTimer": "timer handle for auto firing rockets",
    "FortWeaponRanged_Ostrich:ReloadShotgunTimer": "timer handle for reload shotgun",
    "FortPlayerPawn:WaterSprintBoostAllowedTimer": "timer used for allowing water sprint boost after a dolphin dive",
    "FortDagwoodVehicle:FlipTimer": "timer used for cinematic flips",
    "FortPlayerPawnAthena:SkydiveDebugTimer": "timer used to track the duration of a skydive - ticks in UpdateSkydiveDebugFeedback",
    "FortAvailableMissionAlerts:NextRefresh": "timing data to denote when the AvailableMissions list may change",
    "FortAvailableTheaterMissions:NextRefresh": "timing data to denote when the AvailableMissions list may change",
    "FortDagwoodVehicle:TireMeshes": "tire meshes that were spawned and attached at runtime",
    "FortAthenaVehicle:TireStates": "tire states - replicated from server",
    "FortDagwoodVehicle:FakeTireStates": "tire states for fake tires (no springs) - replicated from server",
    "EClientSettingsSaveType": "to generate the proper file path, we need to know where the settings will be saved",
    "EFortItemType.RewardEventGraphPurchaseToken": "token representing ownership of an athena reward graph",
    "FortDagwoodVehicle:RoadTopSpeedMultiplier": "top speed multplier for on vs off road handling",
    "SongPos:FractionalBeat": "total beats from the beginning of the song (floor).",
    "SongPos:Measure": "total beats from the beginning of the song.",
    "SongPos:FractionalMeasure": "total measures from the beginning of the song (floor).",
    "SongPos:BeatInMeasure": "total measures from the beginning of the song.",
    "AudioWorldizationSettings:TracePoints": "total number of directions to check for walls around the player",
    "FortInteriorAudioComponent_SphereTrace:NumPoints": "total number of directions to check for walls around the vehicle",
    "MtxPurchaseHistoryEntry:NumPurchasesInBundle": "total number of purchases of the bundle",
    "SongPos:Milliseconds": "total seconds from beginning of the song.",
    "SongPos:TimeSigNum": "total seconds from beginning of the song.",
    "SongPos:FractionalTick": "total ticks from beginning of the song (floor).",
    "SongPos:Beat": "total ticks from beginning of the song.",
    "MissionTimerData:TimeAddedOrRemoved": "total time added or removed",
    "FortNevadaVehicle:AltimeterTraceHitDistance": "trace hit distance from async output continous",
    "FortCharacterVehicle_Ostrich:GunnerAimPointTraceRange": "trace range for gunner aimpoint update",
    "FortHoagieVehicle:AltimeterTraceResult": "trace result from altimeter trace",
    "FortWeaponRanged_Ostrich:SecondaryFireTraceSocket": "trace socket name for rockets",
    "ESupplyDropItemTrackType.SpecialActors": "track special actors in the SpecialActorSystem located in the GameState",
    "FortAthenaVehicle:LastPropImpactImpulseTime": "track time of last prop impulse",
    "EFortQuestObjectiveStatEvent.HasAccumulatedItem": "tracks how many items the player has gained, on first update we will check what the player already owns to seed",
    "EncounterManagerComponent:SpawnedActorInfos": "tracks spawned actors",
    "RealitySaplingAccountData:data_is_valid_for_mcp": "tracks whether this data is valid and intended for mcp processing when received",
    "VictoryCrownAccountData:data_is_valid_for_mcp": "tracks whether this data is valid and intended for mcp processing when received",
    "CampsiteAccountData:data_is_valid_for_mcp": "tracks whether this data is valid for mcp processing when received",
    "FortNevadaVehicle:TractorBeamFX_Unattached": "tractor beam asset",
    "FortNevadaVehicle:TractorBeamFX_Attached": "tractor beam asset (attached state)",
    "FortControllerComponent_SkydiveFeedback:TransOscXMaxAmplitude": "translation x max amp",
    "FortControllerComponent_SkydiveFeedback:TransOscXMaxFreq": "translation x max frequency",
    "FortControllerComponent_SkydiveFeedback:TransOscXMinAmplitude": "translation x min amp",
    "FortControllerComponent_SkydiveFeedback:TransOscXMinFreq": "translation x min frequency",
    "FortControllerComponent_SkydiveFeedback:TransOscYMaxAmplitude": "translation y max amp",
    "FortControllerComponent_SkydiveFeedback:TransOscYMaxFreq": "translation y max frequency",
    "FortControllerComponent_SkydiveFeedback:TransOscYMinAmplitude": "translation y min amp",
    "FortControllerComponent_SkydiveFeedback:TransOscYMinFreq": "translation y min frequency",
    "FortControllerComponent_SkydiveFeedback:TransOscZMaxAmplitude": "translation z max amp",
    "FortControllerComponent_SkydiveFeedback:TransOscZMaxFreq": "translation z max frequency",
    "FortControllerComponent_SkydiveFeedback:TransOscZMinAmplitude": "translation z min amp",
    "FortControllerComponent_SkydiveFeedback:TransOscZMinFreq": "translation z min frequency",
    "FortNevadaVehicle:bBoostInputReleased": "true after a boost when the input is released",
    "FortDagwoodVehicle:bInFlipRoll": "true after flip stage two delay",
    "FortDagwoodVehicle:bDidCinematicFlip": "true during cinematic flip",
    "FortMovementComp_Character:bInitialAttach": "true for the first frame after attaching while swinging",
    "FortVehicleAudioController:bListenerInRange": "true if any audio listeners are in range (Max Range defined in VehicleSoundData)",
    "FortCharacterVehicle_Ostrich:bAllowEnter": "true if entering is allowed",
    "FortCharacterVehicle_Ostrich:bLocalPrimaryFireButtonDown": "true if fire button is down",
    "FortWeaponRanged_Ostrich:bFiringRockets": "true if firing rockets",
    "FortPlayerPawn:bIsSprintJump": "true if jump was initiated while sprinting",
    "FortCharacterVehicle_Ostrich:bKickActive": "true if kick is active",
    "FortWeaponRanged_Ostrich:bLocalChargingRockets": "true if locally charging",
    "FortCharacterVehicle_Ostrich:bAcceleratingFromIdle": "true if mech was idle",
    "FortGameStateAthena:bEnvironmentDamageBlocked": "true if no env damage is allowed",
    "FortCharacterVehicle_Ostrich:bAimedAtEnemy": "true if our aimpoint is on an enemy",
    "FortCharacterVehicle_Ostrich:bAimedAtSky": "true if our aimpoint trace hit nothing at all",
    "FortPlayerPawn:bShowingOverdriveEffect": "true if overdrive effect is active.",
    "FortWeaponRanged_Ostrich:bRocketFireButtonDown": "true if rocket button is down",
    "FortCharacterVehicle_Ostrich:bLocalSecondaryFireButtonDown": "true if secondary fire button is down",
    "FortDagwoodVehicle:bSpeedLinesActive": "true if speed lines are active",
    "FortWeaponComponent_Swinging:bGrounded": "true if swinging grounded",
    "FortCharacterVehicle_Ostrich:bEnableTargetingLaser": "true if targeting laser is enabled",
    "SavedPosition:bTeleported": "true if teleport occurred getting to current position (so don't interpolate)",
    "McpBanInfo:bBanHasStarted": "true if the StartDate can be used (otherwise, the ban starts when it's acknowledged).",
    "FortVerbMessage_KillContribution:bAuthorIsKiller": "true if the author is the killer",
    "BattlePassLandingPageButtonDisplayDetails:bIsBPLocked": "true if the page this button represents requires a battle pass purchase and we don't have it",
    "FortProjectileMovementComponent:bHasHomedTowardTarget": "true if the projectile has ever homed toward its target, false if it's still turning around from it's original velocity",
    "FortAthenaVehicle:bServerIsInUndergroundVolume": "true if the vehicle is overlapping an underground volume on server",
    "FortProjectileBase:bHasLocalPredictedCounterpart": "true if this is a server replicated projectile on the shooter's client that fired a predicted projectile",
    "FortAthenaVehicle:bOnRoad": "true if vehicle is currently on a road",
    "FortAthenaVehicle:bOnGrass": "true if vehicle is currently on grass",
    "FortAthenaVehicle:bOnIce": "true if vehicle is currently on ice",
    "FortAthenaVehicle:bOnLandscape": "true if vehicle is currently on landscape",
    "FortAthenaVehicle:bOnMud": "true if vehicle is currently on mud",
    "FortAthenaVehicle:bOnSnow": "true if vehicle is currently on snow",
    "FortAthenaVehicle:bOnVehicle": "true if vehicle is on another vehicle",
    "FortAthenaVehicle:bOnDirt": "true if vehicle is on dirt",
    "FortNevadaVehicle:bUseTractorBeamUprightForce": "true if we need to apply an upright force to the tractor beam victim",
    "FortContentBeaconClientV2:PendingProjectID": "true if we set the pending project id",
    "FortUnderwaterDamageComponent:bResetFromDBNO": "true if we went DBNO under water",
    "FortCharacterVehicle_Ostrich:bChargingJump": "true if we're charging the jump - replicated for animation",
    "FortCharacterVehicle_Ostrich:bDashing": "true if we're dashing",
    "FortCharacterVehicle_Ostrich:bLoadingRockets": "true if we're loading rockets",
    "FortWeaponRanged_Ostrich:bUseShotgunSecondBarrel": "true if you should use the shotgun second barrel",
    "FortDagwoodVehicle:bInFlipRecovery": "true in flip recovery state",
    "FortCharacterVehicle_Ostrich:bLocalDriverRequestedExit": "true on driver's machine when they press exit button",
    "FortPawn:bSkipReticleColorTrace": "true when skipping reticle weapon trace.",
    "FortNevadaVehicle:bBoostDrag": "true when vehicle is in thrust force phase of the boost",
    "FortNevadaVehicle:bBoostThrust": "true when vehicle is in thrust force phase of the boost",
    "FortPlayerController:bInPossession": "true while this controller is in the middle of possessing a new pawn",
    "FortActionKeyMapping:bIsAxisMapping": "true, if mapping is used for axis",
    "FortNevadaVehicle:TowHookParams": "tuning params of the towhook model",
    "FortCharacterVehicle_Ostrich:PawnRotationRate": "turn rate of the pawn",
    "ProjectileMovementDrunkConfig:HomingDrunkBlendOutTurnSpeed": "turn speed when blending out drunk homing",
    "PlayerLODViewConeConfig": "type for use in editor",
    "PlayerLODViewConeHysteresisConfig": "type for use in editor",
    "BuildingNavObstacle:ObstacleType": "type of obstacle",
    "SpecialActorSingleStatData:StatType": "type of stat to track",
    "Voter:VoteDecision": "type of vote the player decided on",
    "RemapRecord": "typedef TMap<FString, UFusionPatchAsset*>",
    "EContextualEvent": "types of event/change triggering this update",
    "EUIExtensionSlot.UnderTeammateStatus": "under each team mate status widget",
    "VkMetaDataFlags:_validation_flags": "underscore prefix used by the content service to denote authority user variables.",
    "MtxPurchaseHistoryEntry:PurchaseId": "unique ID (to be used to reference this purchase for the purposes of refunds)",
    "AthenaBattlePassOffer:OfferId": "unique ID of the offer that was purchased",
    "BattlePassOfferPurchaseRecord:OfferId": "unique ID of the offer that was purchased",
    "MtxPurchaseHistoryEntry:OfferId": "unique ID of the offer that was purchased",
    "FortLootNotification:LootSourceInstance": "unique id of the source asset (item instance or specific mission/campaign). Interpretation depends on LootSource",
    "ESavedSupportStatus.Supported": "unknown if the actor is supported or not. Physics check recommended",
    "FortAnimInput_PlayerSkydiveAnimAsset:Dive_ToGlide_BS_Male": "unused in animgraph",
    "FortAnimInput_PlayerSkydiveAnimAsset:Glide_BS_Male": "unused in animgraph",
    "FortAnimInput_PlayerSkydiveAnimAsset:Glide_Lean_Additive_BS_Male": "unused in animgraph",
    "FortAnimInput_PlayerSkydiveAnimAsset:Glide_Turn_Additive_BS_Male": "unused in animgraph",
    "EFortAreaFlag": "up to 15 values",
    "FortCharacterVehicle_Ostrich:GunnerAimPointUpdateRate": "update rate for gunner aimpoint computation",
    "EAcquireIncrementType.Single": "update the objective by 1 if the filter passes",
    "FortCharacterVehicle_Ostrich:GunnerAimpointUpdateTimer": "update timer for gunner aimpoint",
    "TireInfo:UprightPitchDamp": "upright spring force damping for pitch",
    "TireInfo:UprightRollDamp": "upright spring force damping for roll",
    "TireInfo:UprightYawDamp": "upright spring force damping for yaw",
    "TireInfo:UprightPitchStiff": "upright spring force stiffness for pitch",
    "TireInfo:UprightRollStiff": "upright spring force stiffness for roll",
    "TireInfo:UprightYawStiff": "upright spring force stiffness for yaw",
    "EPointerValidity": "use this to get a blueprint node with branches for whether a pointer is valid or not.\nsee example for NullBranchCheck below",
    "EResult": "use this to get a blueprint node with branches for whether an operation succeeded or failed.\nsee example for NullBranchCheck below",
    "FortVolumeObjectTrackingComponent:BudgetTracker": "use to track global DS budget and client budget when spatial thermometer is not used",
    "DiscoverPOIIncrementCountHotfix": "used",
    "FortMovementComp_Character:SwingingVerticalDistThreshold": "used as a hysteresis value to prevent rapidly switching back and forth between grounded/airborne swinging",
    "FortWeaponRanged:ShellReloadCounter": "used by shell FX, increased with every shot",
    "FortNevadaVehicle:CockpitHitMaterialWobble": "used for animating a float param with a curve on cockpit shield",
    "FortNevadaVehicle:bCockpitWobble": "used for animating a float param with a curve on cockpit shield",
    "ESpecialActorStatType.TotalStats": "used for array maintenance",
    "FortMovementComp_GroundSpline:AbilitySystemComponent": "used for damaging buildings that get in the way",
    "EMatchmakingSourceV2.KeepPlayingTogetherWidget": "used for in game events like Apollo and Yogurt",
    "FortCharacterVehicle_Ostrich:LockoutDurationAfterRequestSeatChange": "used for locking out actions after requesting a seat change",
    "ProjectileMovementDrunkConfig:HomingLookaheadDist": "used for projecting homing target position for drunk homing",
    "FortHoagieVehicle:RumbleIntensity": "used for rumble during ascent/descent",
    "FortCharacterVehicle_Ostrich:MaxBeamLen": "used for scaling particle system",
    "EFortAreaFlag.Interactable": "used for segment link patches",
    "FortProjectileMovementComponent:bSetInitialLocAndDir": "used for setting initial location and direction",
    "FortWeaponComponent_Swinging:bFastSpeed": "used for triggering going fast effects such as speed lines",
    "ProjectileMovementDrunkConfig:HomingTurnAngleBlendOut": "used for turning randomly during blend out",
    "FortAILODSetting_FortWeaponRanged:Interval": "used in the AFortWeaponRanged to change how often we tick it.",
    "FortAILODSetting_FortWeaponRanged:RandomDeviation": "used in the AFortWeaponRanged to change how often we tick it.",
    "FortAILODSetting_AIEvaluator:IntervalMultiplier": "used in the UFortAthenaBTService_AIEvaluator to change how often we tick it, this value will be multiplied with the node's Interval.",
    "FortAILODSetting_AIEvaluator:RandomDeviationMultiplier": "used in the UFortAthenaBTService_AIEvaluator to change how often we tick it, this value will be multiplied with the node's Random Deviation.",
    "FortAILODSetting_CharacterMovement:Interval": "used in the UFortMovementComp_Character to change how often we tick ControlledCharacterMove, this value will be used as maximum interval and dynamically changed based on circumstances.",
    "FortAILODSetting_CharacterMovement:RandomDeviation": "used in the UFortMovementComp_Character to change how often we tick ControlledCharacterMove.",
    "AudioWorldizationSettings:Identifier": "used to differentiate between settings set from different experiences",
    "EMusicTimeStart.FromSongStart": "used to get a tick/SongPos from the start of the song within the authored content\n(starting position post pre-roll and count-in measures, if any)\n(positions before the pre-roll count-in will report negative values)",
    "EMusicTimeStart.FromContentStart": "used to get a tick/SongPos from the very beginning of the authored content\n(includes pre-roll and count-in measures)",
    "FortCharacterVehicle_Ostrich:OverrideLandingMoveLockDuration": "used to override landing move lock duration",
    "FortPlayerPawn:SwimSprintDiveCooldown": "used to prevent spamming of the dolphin dive",
    "ChallengeObjectiveHotfix": "used to store challenge objective hotfixes",
    "ChallengeSuppressedHotfix": "used to store challenge suppressed hotfixes",
    "WebEnvUrl": "used to store environment + url",
    "XPEventEntryHotfix": "used to store xp event hotfixes",
    "EFortAllowDownloadHighResMipsBehavior.Disabled_Temp": "used when FN has decided to disable this feature. IE: When an error is occured and we need to temporarily disable this behavior until the user takes some action.\nAttempting to set to this when the current value is Disabled_Permanent will do nothing as that value takes precedence.",
    "EAthenaWinCondition.MutatorControlled": "used when a mutator is going to take control of the win condition",
    "EAthenaWinCondition.MutatorControlledGoalScore": "used when a mutator is going to take control of the win condition but is using the scoring mechanism already present in the win condition logic",
    "EAthenaWinCondition.MutatorControlledChinaSupported": "used when a mutator is going to take control of the win condition, but we still want China specific rules to get applied",
    "EFortAllowDownloadHighResMipsBehavior.Disabled_Permanent": "used when this feature is permanently turned off. IE: The user changes the setting in the menu.\nThis is not overwritten by a Disabled_Temp setting and takes precedence.",
    "ApplyVariantsAdditionalParams:bForbidParticleSwapping": "useful in contexts where particles are pooled",
    "EHighlightFeatures.VehicleKills": "using the vehicles moment to launch the player forward and in the air",
    "FortDagwoodVehicle:ValetAudio": "valet audio controller",
    "SpecialActorSingleStatData:Value": "value of the stat we are tracking",
    "CustomizableObjectFloatValue:Value": "values outside of the normalized 0-1 space are disallowed",
    "ELfgState.NoFriendsSuggestLFG": "values used outside the LFG panel",
    "ParticleParamterVariant:VectorParams": "vector data, use to set the vector param on the particle system, same operations as ColorParams just different way to view the data",
    "FortDecoHelper:DirectionChange": "vector to handle elastic bouncing",
    "FortAthenaVehicle:bWaitingForSleep": "vehicle is ready to go to sleep (likely can't yet because it's on fire and needs to keep ticking)",
    "NevadaMoveModeConfig:LiftForce": "vertical acceleration force",
    "FortCharacterVehicle:HealthIndicatorVerticalOffset": "vertical offset of health indicator",
    "FortMeleeWeaponStats:RangeVSBuildingsZ": "vertical range against building actors.",
    "RewardNode:HardDefinedVisuals": "visuals variants for this node, if a channel is defined with no variant it will use a random variant from that channel",
    "FortPlayerController:bVoiceChatPTTTransmit": "voice chat push to talk transmitting",
    "FortPoiManager:LargePoiVolumes": "volumes large enough to be rolled into the grid",
    "FortPoiManager:SmallTickUpdatedPoi": "volumes small enough to not be covered by the grid",
    "FortPoiManager:PendingLargePoiVolumes": "volumes which are about to be added to the grid, but haven't been",
    "FortPoiManager:NamedOnMapPoiVolumes": "volumes which are going to appear with a name on the map",
    "EContextualContext.DoNotShow": "warmup, etc",
    "FortMissionCompletionNotification:bWasCritical": "was this a critical mission",
    "FortPlayerCameraBase:WaterSprintBoostCameraClass": "water sprint boost camera class",
    "EUraniumRoundPhase.EndGame": "we are done with the entire game",
    "EUraniumRoundPhase.EndOfRoundFinish": "we are done with the round end sequence, normal gameplay is resumed",
    "CalendarEvent": "we are going to sort calendar events so they are deterministic in their order in our ICS output.",
    "EHighlightFeatures.FollowingPlayerDeath": "we got a player who was standing and we eliminated or DBNO'd them. Name is wrong but the value are in the DB now!",
    "FortMcpProfileEncryptionKey:KeyGuid": "we use this struct to parse the JSON, so leave them as bare strings\nThe GUID that identifies this encryption key",
    "VkGenerateTestcodeRequest:Content": "what content should we snapshot for this test code",
    "FortDagwoodVehicle:LostGripRightAlpha": "what driver's right alpha was at time of lost grip",
    "GiftBoxInfo:LootList": "what items are referenced by this gift (NOTE: these items were granted to the profile immediately, this is just a reference for display)",
    "VkProjectSnapshot:ProjectId": "what project is this preview record for.",
    "EHighlightFeatures.FollowingPlayerKillDBNO": "what rank we got placed",
    "FortUnderwaterDamageComponent:UnderWaterStartTime": "what time I started under water",
    "McpBanInfo:BanStartTimeUtc": "what time did the ban start (if bBanHasStarted)",
    "BuildingItemCollectorActor:StartingGoalLevel": "what to seed the goal and capture count with, by default it is 0",
    "FortProjectileMovementComponent:InitialHomingStyle": "what type of homing to use, if any",
    "CatalogOfferRequirement:RequirementType": "what type of requirement is this",
    "AttachedWheel:StaticMeshComponent": "wheel mesh component (static version)",
    "RuntimeSpringsInfo:WheelRadiusB": "wheel radius for back tires",
    "RuntimeSpringsInfo:WheelRadiusF": "wheel radius for front tires",
    "FortDagwoodVehicle:NativeTireScaleFront": "wheel scale param that differs per valet vehicle for niagara fx",
    "FortDagwoodVehicle:NativeTireScaleRear": "wheel scale param that differs per valet vehicle for niagara fx",
    "FortDagwoodVehicle:NativeWheelScaleFront": "wheel scale param that differs per valet vehicle for niagara fx",
    "FortDagwoodVehicle:NativeWheelScaleRear": "wheel scale param that differs per valet vehicle for niagara fx",
    "FortDagwoodVehicle:WheelSocketNames": "wheel socket names",
    "FortAthenaVehicle:OnPawnEnteredVehicleSeat": "when a pawn enters a vehicle seat. Is called alongside GetPawnExitedVehicleSeat if there was a previous seat",
    "FortCharacterVehicle:OnPawnEnteredVehicleSeat": "when a pawn enters a vehicle seat. Is called alongside GetPawnExitedVehicleSeat if there was a previous seat",
    "FortAthenaVehicle:OnPawnExitedVehicleSeat": "when a pawn exits a vehicle seat. Is called alongside GetPawnEnteredVehicleSeat if there was a next seat",
    "FortCharacterVehicle:OnPawnExitedVehicleSeat": "when a pawn exits a vehicle seat. Is called alongside GetPawnEnteredVehicleSeat if there was a next seat",
    "FortAthenaVehicle:OnPawnFinishEnteringVehicle": "when a pawn finished entering a vehicle",
    "FortAthenaVehicle:OnPawnEnteredVehicleAtSeat": "when a pawn first enters a vehicle. Is called alongside GetPawnEnteredVehicleSeat.",
    "FortCharacterVehicle:OnPawnEnteredVehicleAtSeat": "when a pawn first enters a vehicle. Is called alongside GetPawnEnteredVehicleSeat.",
    "FortAthenaVehicle:OnPawnExitedVehicleFromSeat": "when a pawn fully exits a vehicle. Is called alongside GetPawnExitedVehicleSeat.",
    "FortCharacterVehicle:OnPawnExitedVehicleFromSeat": "when a pawn fully exits a vehicle. Is called alongside GetPawnExitedVehicleSeat.",
    "FortMovementComp_GroundSpline:PawnPushTime": "when a pawn is pushed, how long (in seconds) are they pushed (canNOT be set to 0.0, because that would be infinite push)",
    "FortAthenaVehicle:OnVehicleHornEvent": "when a player honks a vehicle horn",
    "FortPlayerPawnAthena:IgnoreLandGhostModeTags": "when applied these tags the FX for pawn landed won't be triggered",
    "SwingingControlParams:MinInputAccelMultiplier": "when at zero velocity, this mulitplier is applied to the input accel force",
    "FortMotorSimComponent_PatternPlayer:DriftState": "when driving and grounded - assumed to be some uncontrolled behavior like drifting",
    "FortProgressiveReward:DefaultVariantPreviewOverrides": "when generating a 3D preview for this Stage item, these variants will be used as overrides for other channels, as 3D previews default to the first variant that starts unlocked",
    "FortProgressiveStageOverrideDisplayData:DefaultVariantPreviewOverrides": "when generating a 3D preview for this Stage item, these variants will be used as overrides for other channels, as 3D previews default to the first variant that starts unlocked",
    "SwingingControlParams:MinRopeLengthForAccel": "when set greater than zero, input and reeling forces won't apply when the distance to the attach point is less than this",
    "FortDifficultyEncounterSettings:DifficultyOptions": "when starting this one from the AI Director (See AIDirector::StartEncounter)",
    "ECountdownDisplay.ChallengeBundleUnlockTime": "when the challenge bundle unlocks",
    "FortCommunityVotesState:NumWinners": "when the election ends, how many winners will be picked (top N)",
    "EFortQuestObjectiveStatEvent.StormPhase": "when the game storm phase changes. Target is empty.",
    "ECountdownDisplay.ChallengeUnlockTime": "when the next challenge unlocks based on the even tag",
    "EFCRP_LoopBehavior.PingPong": "when the target is reached, change direction.",
    "EFCRP_LoopBehavior.WrapAround": "when the target is reached, keep the direction but reset to the start value",
    "EFCRP_LoopBehavior.StopAtEnd": "when the target is reached, stop updating.",
    "FortMotorSimComponent_PatternPlayer:AirState": "when the wheels leave the ground",
    "VkProjectSnapshot:CreatedAt": "when was this preview record created (to compare against source file modify times)",
    "EContextualEvent.NewQuests": "when we get new quests",
    "EFortNotifyAudioParamsStoreSource": "where the data store for the parameters lives",
    "FortAthenaMutator_Uranium:bShouldPlayFactionIntro": "whether or not to show the faction intro at the beginning of the game",
    "VkProjectUserInfo:HasStar": "whether the calling user has \"starred\" the project",
    "FortMotorSimPatternState:bLoopCurves": "whether the pattern should continue animating after a curve is finished",
    "PoiDiscoverabilityDataEntry:DiscoveredState": "whether this location is discovered",
    "VkProjectUserInfo:IsNew": "whether this project should be considered \"new\"",
    "EmporiumSettings:bUseCustomAuthToken": "whether to use the custom token, or deduce it from the currently logged user",
    "GiftBoxInfo:FromAccountId": "which (game) accountId sent the gift",
    "VkProjectSnapshot:Palette": "which 3rd party projects comprise the palette for this project at the time of snapshotting\nthis may be blank since hard dependencies are contained in Content already, but helps VK_Edit\nin-game editing mode continue where UEFN left off.",
    "VkSnapshotSaveRequest:Palette": "which 3rd party projects comprise the palette for this project at the time of snapshotting\nthis may be blank since hard dependencies are contained in Content already, but helps VK_Edit\nin-game editing mode continue where UEFN left off.",
    "BattlePassOfferPurchaseRecord:LootResult": "which items were purchased",
    "MtxPurchaseHistoryEntry:LootResult": "which items were purchased (that would be taken away if a refund is issued)",
    "RmtPurchaseHistoryEntry:LootResult": "which items were purchased (that would be taken away if a refund is issued)",
    "DBNOCustomSettings:TenacityType": "which tenacity amount is used at the begining of DBNO state",
    "SwingingControlParams:UnattachedCancelSpeed": "while not attached, exit swinging movement when speed drops below this",
    "SwingingControlParams:AdditionalDownAccelWhileSwinging": "while swinging apply this additional downward force",
    "CreativeLoadedLinkData:CreatorName": "who created this",
    "CreativeLoadedLinkData:SupportCode": "who does this support (SaC). Often the same as CreatorName but not always",
    "HUDElementToHighlight:UniqueHUDElementToHighlight": "will highlight the first one that it can highlight and skip the rest.",
    "EFortItemCollectorTrackingType.Player": "will track the data by player",
    "EFortItemCollectorTrackingType.Team": "will track the data by team",
    "FortCommunityVotesState:ElectionEnds": "winners will be selected on the first shop rollover >= this date (by convention we should time this to coincide with a rollover)",
    "FortInventorySnapshot:Stash": "work out how to make currency balance easily available from BPs once query works",
    "FortPoiGridInfo:GridCountX": "x and y distance between the grid points",
    "EPoppedTireReactionStates.FlipPitch": "yaw 90 degrees",
    "TireInfo:TireMeshYaw": "yaw needed to properly orient this tire mesh",
    "FortAthenaMutator_DadBro:DadBroCodeState": "yes, we could wait for the pawn to spawn, but this gives us more control",
    "EFortAccoladeType.Accolade": "you did a thing",
    "RuntimeSpringsInfo:TireZOffset_B": "z offset for back tires",
    "RuntimeSpringsInfo:TireZOffset": "z offset for front tires",
    "FortAthenaLoadout": "};\nnote: this ugly bit of syntax just hides the native base from UnrealHeaderTool. What it doesn't know cannot hurt it!",
    "FortContrailsComponent:VaporEmitterTemplate": "~ Hard referenced so it is always loaded - possibly move to GameDataCosmetics?",
    "FortWeaponRangedDualForVehicle:LeftWeaponLoc": "~AFortWeaponRangedDual overrides",
    "TempestTornadoForcesComponent": "~Async Data Structs for Async Tick // Manages all of the forces applied to objects caught in the tornado",
    "FortSphericalVehicle": "~Async physics thread declarations",
    "BattleMapPawnLive:GotKillNodeClass": "~Movement Classes",
    "BattleMapPawnReplay:GotKillNodeClass": "~Movement Classes",
    "GlobalWeatherData:bOverride_PostProcessBlendWeight": "~Runtime Data",
    "EDroneFollowMode": "~Runtime created replay events",
    "BuildingGameplayActorPetrol:MaterialInstanceDynamic": "~Splatter Grid Functionality",
    "BattleMapPawnLive:SelectedNodeSound": "~Support Classes\nSound",
    "BattleMapPawnReplay:SelectedNodeSound": "~Support Classes\nSound"
  }
}